
ERB_PS2_test1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001950  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08101be8  08101be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101bf8  08101bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101bfc  08101bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08101c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000010  08101c10  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000030  08101c10  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a108  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001bde  00000000  00000000  0002a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000728  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000640  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037dd5  00000000  00000000  0002ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007f55  00000000  00000000  00064865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00171ed4  00000000  00000000  0006c7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c5  00000000  00000000  001de68e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019dc  00000000  00000000  001de754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0000069f  00000000  00000000  001e0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101bd0 	.word	0x08101bd0

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101bd0 	.word	0x08101bd0

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810030c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8100310:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100312:	4b15      	ldr	r3, [pc, #84]	; (8100368 <main+0x60>)
 8100314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100318:	4a13      	ldr	r2, [pc, #76]	; (8100368 <main+0x60>)
 810031a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100322:	4b11      	ldr	r3, [pc, #68]	; (8100368 <main+0x60>)
 8100324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810032c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8100330:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f001 f931 	bl	810159c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f001 f9bb 	bl	81016b4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f001 f93c 	bl	81015c0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b08      	ldr	r3, [pc, #32]	; (810036c <main+0x64>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d10e      	bne.n	8100374 <main+0x6c>
 8100356:	4b06      	ldr	r3, [pc, #24]	; (8100370 <main+0x68>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810035c:	4a04      	ldr	r2, [pc, #16]	; (8100370 <main+0x68>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100366:	e00d      	b.n	8100384 <main+0x7c>
 8100368:	58024400 	.word	0x58024400
 810036c:	e000ed00 	.word	0xe000ed00
 8100370:	58026400 	.word	0x58026400
 8100374:	4bf8      	ldr	r3, [pc, #992]	; (8100758 <main+0x450>)
 8100376:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810037a:	4af7      	ldr	r2, [pc, #988]	; (8100758 <main+0x450>)
 810037c:	f043 0301 	orr.w	r3, r3, #1
 8100380:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100384:	f000 ff5e 	bl	8101244 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8100388:	f000 fec4 	bl	8101114 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize all configured peripherals */
  MX_DMA_Init();
 810038c:	f000 fec2 	bl	8101114 <MX_DMA_Init>
  const int numberofsubbands=100;
 8100390:	2364      	movs	r3, #100	; 0x64
 8100392:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

  float32_t input=10;
 8100396:	4bf1      	ldr	r3, [pc, #964]	; (810075c <main+0x454>)
 8100398:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  float32_t output=1;
 810039c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 81003a0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

  float32_t subbandfilter_input[numberofsubbands];
 81003a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81003a8:	3b01      	subs	r3, #1
 81003aa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 81003ae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81003b2:	2200      	movs	r2, #0
 81003b4:	461c      	mov	r4, r3
 81003b6:	4615      	mov	r5, r2
 81003b8:	f04f 0200 	mov.w	r2, #0
 81003bc:	f04f 0300 	mov.w	r3, #0
 81003c0:	016b      	lsls	r3, r5, #5
 81003c2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 81003c6:	0162      	lsls	r2, r4, #5
 81003c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81003cc:	2200      	movs	r2, #0
 81003ce:	4698      	mov	r8, r3
 81003d0:	4691      	mov	r9, r2
 81003d2:	f04f 0200 	mov.w	r2, #0
 81003d6:	f04f 0300 	mov.w	r3, #0
 81003da:	ea4f 1349 	mov.w	r3, r9, lsl #5
 81003de:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 81003e2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 81003e6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81003ea:	009b      	lsls	r3, r3, #2
 81003ec:	3307      	adds	r3, #7
 81003ee:	08db      	lsrs	r3, r3, #3
 81003f0:	00db      	lsls	r3, r3, #3
 81003f2:	ebad 0d03 	sub.w	sp, sp, r3
 81003f6:	ab02      	add	r3, sp, #8
 81003f8:	3303      	adds	r3, #3
 81003fa:	089b      	lsrs	r3, r3, #2
 81003fc:	009b      	lsls	r3, r3, #2
 81003fe:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  float32_t subbandfilter_dn[numberofsubbands];
 8100402:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100406:	3b01      	subs	r3, #1
 8100408:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 810040c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100410:	2200      	movs	r2, #0
 8100412:	469a      	mov	sl, r3
 8100414:	4693      	mov	fp, r2
 8100416:	f04f 0200 	mov.w	r2, #0
 810041a:	f04f 0300 	mov.w	r3, #0
 810041e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8100422:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8100426:	ea4f 124a 	mov.w	r2, sl, lsl #5
 810042a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810042e:	2200      	movs	r2, #0
 8100430:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8100434:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8100438:	f04f 0200 	mov.w	r2, #0
 810043c:	f04f 0300 	mov.w	r3, #0
 8100440:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8100444:	4629      	mov	r1, r5
 8100446:	014b      	lsls	r3, r1, #5
 8100448:	4621      	mov	r1, r4
 810044a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810044e:	4621      	mov	r1, r4
 8100450:	014a      	lsls	r2, r1, #5
 8100452:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100456:	009b      	lsls	r3, r3, #2
 8100458:	3307      	adds	r3, #7
 810045a:	08db      	lsrs	r3, r3, #3
 810045c:	00db      	lsls	r3, r3, #3
 810045e:	ebad 0d03 	sub.w	sp, sp, r3
 8100462:	ab02      	add	r3, sp, #8
 8100464:	3303      	adds	r3, #3
 8100466:	089b      	lsrs	r3, r3, #2
 8100468:	009b      	lsls	r3, r3, #2
 810046a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  float32_t subbandfilter_dn1[numberofsubbands];
 810046e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100472:	3b01      	subs	r3, #1
 8100474:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8100478:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810047c:	2200      	movs	r2, #0
 810047e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8100482:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8100486:	f04f 0200 	mov.w	r2, #0
 810048a:	f04f 0300 	mov.w	r3, #0
 810048e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8100492:	4629      	mov	r1, r5
 8100494:	014b      	lsls	r3, r1, #5
 8100496:	4621      	mov	r1, r4
 8100498:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810049c:	4621      	mov	r1, r4
 810049e:	014a      	lsls	r2, r1, #5
 81004a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81004a4:	2200      	movs	r2, #0
 81004a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 81004aa:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 81004ae:	f04f 0200 	mov.w	r2, #0
 81004b2:	f04f 0300 	mov.w	r3, #0
 81004b6:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 81004ba:	4629      	mov	r1, r5
 81004bc:	014b      	lsls	r3, r1, #5
 81004be:	4621      	mov	r1, r4
 81004c0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81004c4:	4621      	mov	r1, r4
 81004c6:	014a      	lsls	r2, r1, #5
 81004c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81004cc:	009b      	lsls	r3, r3, #2
 81004ce:	3307      	adds	r3, #7
 81004d0:	08db      	lsrs	r3, r3, #3
 81004d2:	00db      	lsls	r3, r3, #3
 81004d4:	ebad 0d03 	sub.w	sp, sp, r3
 81004d8:	ab02      	add	r3, sp, #8
 81004da:	3303      	adds	r3, #3
 81004dc:	089b      	lsrs	r3, r3, #2
 81004de:	009b      	lsls	r3, r3, #2
 81004e0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  float32_t subbandfilter_dn2[numberofsubbands];
 81004e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81004e8:	3b01      	subs	r3, #1
 81004ea:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 81004ee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81004f2:	2200      	movs	r2, #0
 81004f4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 81004f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 81004fc:	f04f 0200 	mov.w	r2, #0
 8100500:	f04f 0300 	mov.w	r3, #0
 8100504:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8100508:	4629      	mov	r1, r5
 810050a:	014b      	lsls	r3, r1, #5
 810050c:	4621      	mov	r1, r4
 810050e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100512:	4621      	mov	r1, r4
 8100514:	014a      	lsls	r2, r1, #5
 8100516:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810051a:	2200      	movs	r2, #0
 810051c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8100520:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8100524:	f04f 0200 	mov.w	r2, #0
 8100528:	f04f 0300 	mov.w	r3, #0
 810052c:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8100530:	4629      	mov	r1, r5
 8100532:	014b      	lsls	r3, r1, #5
 8100534:	4621      	mov	r1, r4
 8100536:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810053a:	4621      	mov	r1, r4
 810053c:	014a      	lsls	r2, r1, #5
 810053e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100542:	009b      	lsls	r3, r3, #2
 8100544:	3307      	adds	r3, #7
 8100546:	08db      	lsrs	r3, r3, #3
 8100548:	00db      	lsls	r3, r3, #3
 810054a:	ebad 0d03 	sub.w	sp, sp, r3
 810054e:	ab02      	add	r3, sp, #8
 8100550:	3303      	adds	r3, #3
 8100552:	089b      	lsrs	r3, r3, #2
 8100554:	009b      	lsls	r3, r3, #2
 8100556:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  float32_t subbandfilter_y[numberofsubbands];
 810055a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810055e:	3b01      	subs	r3, #1
 8100560:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8100564:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100568:	2200      	movs	r2, #0
 810056a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 810056e:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8100572:	f04f 0200 	mov.w	r2, #0
 8100576:	f04f 0300 	mov.w	r3, #0
 810057a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 810057e:	4629      	mov	r1, r5
 8100580:	014b      	lsls	r3, r1, #5
 8100582:	4621      	mov	r1, r4
 8100584:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100588:	4621      	mov	r1, r4
 810058a:	014a      	lsls	r2, r1, #5
 810058c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100590:	2200      	movs	r2, #0
 8100592:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8100596:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 810059a:	f04f 0200 	mov.w	r2, #0
 810059e:	f04f 0300 	mov.w	r3, #0
 81005a2:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 81005a6:	4629      	mov	r1, r5
 81005a8:	014b      	lsls	r3, r1, #5
 81005aa:	4621      	mov	r1, r4
 81005ac:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81005b0:	4621      	mov	r1, r4
 81005b2:	014a      	lsls	r2, r1, #5
 81005b4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81005b8:	009b      	lsls	r3, r3, #2
 81005ba:	3307      	adds	r3, #7
 81005bc:	08db      	lsrs	r3, r3, #3
 81005be:	00db      	lsls	r3, r3, #3
 81005c0:	ebad 0d03 	sub.w	sp, sp, r3
 81005c4:	ab02      	add	r3, sp, #8
 81005c6:	3303      	adds	r3, #3
 81005c8:	089b      	lsrs	r3, r3, #2
 81005ca:	009b      	lsls	r3, r3, #2
 81005cc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

  float32_t subbandfilter_a1[numberofsubbands];
 81005d0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81005d4:	3b01      	subs	r3, #1
 81005d6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 81005da:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81005de:	2200      	movs	r2, #0
 81005e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 81005e4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 81005e8:	f04f 0200 	mov.w	r2, #0
 81005ec:	f04f 0300 	mov.w	r3, #0
 81005f0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 81005f4:	4629      	mov	r1, r5
 81005f6:	014b      	lsls	r3, r1, #5
 81005f8:	4621      	mov	r1, r4
 81005fa:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81005fe:	4621      	mov	r1, r4
 8100600:	014a      	lsls	r2, r1, #5
 8100602:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100606:	2200      	movs	r2, #0
 8100608:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 810060c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8100610:	f04f 0200 	mov.w	r2, #0
 8100614:	f04f 0300 	mov.w	r3, #0
 8100618:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 810061c:	4629      	mov	r1, r5
 810061e:	014b      	lsls	r3, r1, #5
 8100620:	4621      	mov	r1, r4
 8100622:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100626:	4621      	mov	r1, r4
 8100628:	014a      	lsls	r2, r1, #5
 810062a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810062e:	009b      	lsls	r3, r3, #2
 8100630:	3307      	adds	r3, #7
 8100632:	08db      	lsrs	r3, r3, #3
 8100634:	00db      	lsls	r3, r3, #3
 8100636:	ebad 0d03 	sub.w	sp, sp, r3
 810063a:	ab02      	add	r3, sp, #8
 810063c:	3303      	adds	r3, #3
 810063e:	089b      	lsrs	r3, r3, #2
 8100640:	009b      	lsls	r3, r3, #2
 8100642:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
  float32_t subbandfilter_a2[numberofsubbands];
 8100646:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810064a:	3b01      	subs	r3, #1
 810064c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8100650:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100654:	2200      	movs	r2, #0
 8100656:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 810065a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 810065e:	f04f 0200 	mov.w	r2, #0
 8100662:	f04f 0300 	mov.w	r3, #0
 8100666:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 810066a:	4629      	mov	r1, r5
 810066c:	014b      	lsls	r3, r1, #5
 810066e:	4621      	mov	r1, r4
 8100670:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100674:	4621      	mov	r1, r4
 8100676:	014a      	lsls	r2, r1, #5
 8100678:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810067c:	2200      	movs	r2, #0
 810067e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8100682:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8100686:	f04f 0200 	mov.w	r2, #0
 810068a:	f04f 0300 	mov.w	r3, #0
 810068e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8100692:	4629      	mov	r1, r5
 8100694:	014b      	lsls	r3, r1, #5
 8100696:	4621      	mov	r1, r4
 8100698:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810069c:	4621      	mov	r1, r4
 810069e:	014a      	lsls	r2, r1, #5
 81006a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81006a4:	009b      	lsls	r3, r3, #2
 81006a6:	3307      	adds	r3, #7
 81006a8:	08db      	lsrs	r3, r3, #3
 81006aa:	00db      	lsls	r3, r3, #3
 81006ac:	ebad 0d03 	sub.w	sp, sp, r3
 81006b0:	ab02      	add	r3, sp, #8
 81006b2:	3303      	adds	r3, #3
 81006b4:	089b      	lsrs	r3, r3, #2
 81006b6:	009b      	lsls	r3, r3, #2
 81006b8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260


  float32_t subbandfilter_b0[numberofsubbands];
 81006bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81006c0:	3b01      	subs	r3, #1
 81006c2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 81006c6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81006ca:	2200      	movs	r2, #0
 81006cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 81006d0:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 81006d4:	f04f 0200 	mov.w	r2, #0
 81006d8:	f04f 0300 	mov.w	r3, #0
 81006dc:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 81006e0:	4629      	mov	r1, r5
 81006e2:	014b      	lsls	r3, r1, #5
 81006e4:	4621      	mov	r1, r4
 81006e6:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81006ea:	4621      	mov	r1, r4
 81006ec:	014a      	lsls	r2, r1, #5
 81006ee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81006f2:	2200      	movs	r2, #0
 81006f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 81006f8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 81006fc:	f04f 0200 	mov.w	r2, #0
 8100700:	f04f 0300 	mov.w	r3, #0
 8100704:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8100708:	4629      	mov	r1, r5
 810070a:	014b      	lsls	r3, r1, #5
 810070c:	4621      	mov	r1, r4
 810070e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100712:	4621      	mov	r1, r4
 8100714:	014a      	lsls	r2, r1, #5
 8100716:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810071a:	009b      	lsls	r3, r3, #2
 810071c:	3307      	adds	r3, #7
 810071e:	08db      	lsrs	r3, r3, #3
 8100720:	00db      	lsls	r3, r3, #3
 8100722:	ebad 0d03 	sub.w	sp, sp, r3
 8100726:	ab02      	add	r3, sp, #8
 8100728:	3303      	adds	r3, #3
 810072a:	089b      	lsrs	r3, r3, #2
 810072c:	009b      	lsls	r3, r3, #2
 810072e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  float32_t subbandfilter_b1[numberofsubbands];
 8100732:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100736:	3b01      	subs	r3, #1
 8100738:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 810073c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100740:	2200      	movs	r2, #0
 8100742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8100746:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 810074a:	f04f 0200 	mov.w	r2, #0
 810074e:	f04f 0300 	mov.w	r3, #0
 8100752:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8100756:	e003      	b.n	8100760 <main+0x458>
 8100758:	58026400 	.word	0x58026400
 810075c:	41200000 	.word	0x41200000
 8100760:	4629      	mov	r1, r5
 8100762:	014b      	lsls	r3, r1, #5
 8100764:	4621      	mov	r1, r4
 8100766:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810076a:	4621      	mov	r1, r4
 810076c:	014a      	lsls	r2, r1, #5
 810076e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100772:	2200      	movs	r2, #0
 8100774:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8100778:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 810077c:	f04f 0200 	mov.w	r2, #0
 8100780:	f04f 0300 	mov.w	r3, #0
 8100784:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8100788:	4629      	mov	r1, r5
 810078a:	014b      	lsls	r3, r1, #5
 810078c:	4621      	mov	r1, r4
 810078e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100792:	4621      	mov	r1, r4
 8100794:	014a      	lsls	r2, r1, #5
 8100796:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810079a:	009b      	lsls	r3, r3, #2
 810079c:	3307      	adds	r3, #7
 810079e:	08db      	lsrs	r3, r3, #3
 81007a0:	00db      	lsls	r3, r3, #3
 81007a2:	ebad 0d03 	sub.w	sp, sp, r3
 81007a6:	ab02      	add	r3, sp, #8
 81007a8:	3303      	adds	r3, #3
 81007aa:	089b      	lsrs	r3, r3, #2
 81007ac:	009b      	lsls	r3, r3, #2
 81007ae:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  float32_t subbandfilter_b2[numberofsubbands];
 81007b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81007b6:	3b01      	subs	r3, #1
 81007b8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 81007bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81007c0:	2200      	movs	r2, #0
 81007c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 81007c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 81007ca:	f04f 0200 	mov.w	r2, #0
 81007ce:	f04f 0300 	mov.w	r3, #0
 81007d2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 81007d6:	4629      	mov	r1, r5
 81007d8:	014b      	lsls	r3, r1, #5
 81007da:	4621      	mov	r1, r4
 81007dc:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81007e0:	4621      	mov	r1, r4
 81007e2:	014a      	lsls	r2, r1, #5
 81007e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81007e8:	2200      	movs	r2, #0
 81007ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 81007ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 81007f2:	f04f 0200 	mov.w	r2, #0
 81007f6:	f04f 0300 	mov.w	r3, #0
 81007fa:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 81007fe:	4629      	mov	r1, r5
 8100800:	014b      	lsls	r3, r1, #5
 8100802:	4621      	mov	r1, r4
 8100804:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100808:	4621      	mov	r1, r4
 810080a:	014a      	lsls	r2, r1, #5
 810080c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100810:	009b      	lsls	r3, r3, #2
 8100812:	3307      	adds	r3, #7
 8100814:	08db      	lsrs	r3, r3, #3
 8100816:	00db      	lsls	r3, r3, #3
 8100818:	ebad 0d03 	sub.w	sp, sp, r3
 810081c:	ab02      	add	r3, sp, #8
 810081e:	3303      	adds	r3, #3
 8100820:	089b      	lsrs	r3, r3, #2
 8100822:	009b      	lsls	r3, r3, #2
 8100824:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

  float32_t subbandfilter_A1[numberofsubbands];
 8100828:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810082c:	3b01      	subs	r3, #1
 810082e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8100832:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100836:	2200      	movs	r2, #0
 8100838:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810083c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8100840:	f04f 0200 	mov.w	r2, #0
 8100844:	f04f 0300 	mov.w	r3, #0
 8100848:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 810084c:	4629      	mov	r1, r5
 810084e:	014b      	lsls	r3, r1, #5
 8100850:	4621      	mov	r1, r4
 8100852:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100856:	4621      	mov	r1, r4
 8100858:	014a      	lsls	r2, r1, #5
 810085a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810085e:	2200      	movs	r2, #0
 8100860:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8100864:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8100868:	f04f 0200 	mov.w	r2, #0
 810086c:	f04f 0300 	mov.w	r3, #0
 8100870:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8100874:	4629      	mov	r1, r5
 8100876:	014b      	lsls	r3, r1, #5
 8100878:	4621      	mov	r1, r4
 810087a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810087e:	4621      	mov	r1, r4
 8100880:	014a      	lsls	r2, r1, #5
 8100882:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100886:	009b      	lsls	r3, r3, #2
 8100888:	3307      	adds	r3, #7
 810088a:	08db      	lsrs	r3, r3, #3
 810088c:	00db      	lsls	r3, r3, #3
 810088e:	ebad 0d03 	sub.w	sp, sp, r3
 8100892:	ab02      	add	r3, sp, #8
 8100894:	3303      	adds	r3, #3
 8100896:	089b      	lsrs	r3, r3, #2
 8100898:	009b      	lsls	r3, r3, #2
 810089a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  float32_t subbandfilter_A2[numberofsubbands];
 810089e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81008a2:	3b01      	subs	r3, #1
 81008a4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 81008a8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81008ac:	2200      	movs	r2, #0
 81008ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 81008b2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 81008b6:	f04f 0200 	mov.w	r2, #0
 81008ba:	f04f 0300 	mov.w	r3, #0
 81008be:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 81008c2:	4629      	mov	r1, r5
 81008c4:	014b      	lsls	r3, r1, #5
 81008c6:	4621      	mov	r1, r4
 81008c8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81008cc:	4621      	mov	r1, r4
 81008ce:	014a      	lsls	r2, r1, #5
 81008d0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81008d4:	2200      	movs	r2, #0
 81008d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81008da:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 81008de:	f04f 0200 	mov.w	r2, #0
 81008e2:	f04f 0300 	mov.w	r3, #0
 81008e6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 81008ea:	4629      	mov	r1, r5
 81008ec:	014b      	lsls	r3, r1, #5
 81008ee:	4621      	mov	r1, r4
 81008f0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81008f4:	4621      	mov	r1, r4
 81008f6:	014a      	lsls	r2, r1, #5
 81008f8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81008fc:	009b      	lsls	r3, r3, #2
 81008fe:	3307      	adds	r3, #7
 8100900:	08db      	lsrs	r3, r3, #3
 8100902:	00db      	lsls	r3, r3, #3
 8100904:	ebad 0d03 	sub.w	sp, sp, r3
 8100908:	ab02      	add	r3, sp, #8
 810090a:	3303      	adds	r3, #3
 810090c:	089b      	lsrs	r3, r3, #2
 810090e:	009b      	lsls	r3, r3, #2
 8100910:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200


  float32_t subbandfilter_B0[numberofsubbands];
 8100914:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100918:	3b01      	subs	r3, #1
 810091a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 810091e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100922:	2200      	movs	r2, #0
 8100924:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8100928:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 810092c:	f04f 0200 	mov.w	r2, #0
 8100930:	f04f 0300 	mov.w	r3, #0
 8100934:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8100938:	4629      	mov	r1, r5
 810093a:	014b      	lsls	r3, r1, #5
 810093c:	4621      	mov	r1, r4
 810093e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100942:	4621      	mov	r1, r4
 8100944:	014a      	lsls	r2, r1, #5
 8100946:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810094a:	2200      	movs	r2, #0
 810094c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8100950:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8100954:	f04f 0200 	mov.w	r2, #0
 8100958:	f04f 0300 	mov.w	r3, #0
 810095c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8100960:	4629      	mov	r1, r5
 8100962:	014b      	lsls	r3, r1, #5
 8100964:	4621      	mov	r1, r4
 8100966:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 810096a:	4621      	mov	r1, r4
 810096c:	014a      	lsls	r2, r1, #5
 810096e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100972:	009b      	lsls	r3, r3, #2
 8100974:	3307      	adds	r3, #7
 8100976:	08db      	lsrs	r3, r3, #3
 8100978:	00db      	lsls	r3, r3, #3
 810097a:	ebad 0d03 	sub.w	sp, sp, r3
 810097e:	ab02      	add	r3, sp, #8
 8100980:	3303      	adds	r3, #3
 8100982:	089b      	lsrs	r3, r3, #2
 8100984:	009b      	lsls	r3, r3, #2
 8100986:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  float32_t subbandfilter_B1[numberofsubbands];
 810098a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810098e:	3b01      	subs	r3, #1
 8100990:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8100994:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100998:	2200      	movs	r2, #0
 810099a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810099e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 81009a2:	f04f 0200 	mov.w	r2, #0
 81009a6:	f04f 0300 	mov.w	r3, #0
 81009aa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 81009ae:	4629      	mov	r1, r5
 81009b0:	014b      	lsls	r3, r1, #5
 81009b2:	4621      	mov	r1, r4
 81009b4:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81009b8:	4621      	mov	r1, r4
 81009ba:	014a      	lsls	r2, r1, #5
 81009bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81009c0:	2200      	movs	r2, #0
 81009c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81009c6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 81009ca:	f04f 0200 	mov.w	r2, #0
 81009ce:	f04f 0300 	mov.w	r3, #0
 81009d2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 81009d6:	4629      	mov	r1, r5
 81009d8:	014b      	lsls	r3, r1, #5
 81009da:	4621      	mov	r1, r4
 81009dc:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 81009e0:	4621      	mov	r1, r4
 81009e2:	014a      	lsls	r2, r1, #5
 81009e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81009e8:	009b      	lsls	r3, r3, #2
 81009ea:	3307      	adds	r3, #7
 81009ec:	08db      	lsrs	r3, r3, #3
 81009ee:	00db      	lsls	r3, r3, #3
 81009f0:	ebad 0d03 	sub.w	sp, sp, r3
 81009f4:	ab02      	add	r3, sp, #8
 81009f6:	3303      	adds	r3, #3
 81009f8:	089b      	lsrs	r3, r3, #2
 81009fa:	009b      	lsls	r3, r3, #2
 81009fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  float32_t subbandfilter_B2[numberofsubbands];
 8100a00:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a04:	3b01      	subs	r3, #1
 8100a06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8100a0a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a0e:	2200      	movs	r2, #0
 8100a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8100a14:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8100a18:	f04f 0200 	mov.w	r2, #0
 8100a1c:	f04f 0300 	mov.w	r3, #0
 8100a20:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8100a24:	4629      	mov	r1, r5
 8100a26:	014b      	lsls	r3, r1, #5
 8100a28:	4621      	mov	r1, r4
 8100a2a:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100a2e:	4621      	mov	r1, r4
 8100a30:	014a      	lsls	r2, r1, #5
 8100a32:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a36:	2200      	movs	r2, #0
 8100a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8100a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8100a40:	f04f 0200 	mov.w	r2, #0
 8100a44:	f04f 0300 	mov.w	r3, #0
 8100a48:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8100a4c:	4629      	mov	r1, r5
 8100a4e:	014b      	lsls	r3, r1, #5
 8100a50:	4621      	mov	r1, r4
 8100a52:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100a56:	4621      	mov	r1, r4
 8100a58:	014a      	lsls	r2, r1, #5
 8100a5a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a5e:	009b      	lsls	r3, r3, #2
 8100a60:	3307      	adds	r3, #7
 8100a62:	08db      	lsrs	r3, r3, #3
 8100a64:	00db      	lsls	r3, r3, #3
 8100a66:	ebad 0d03 	sub.w	sp, sp, r3
 8100a6a:	ab02      	add	r3, sp, #8
 8100a6c:	3303      	adds	r3, #3
 8100a6e:	089b      	lsrs	r3, r3, #2
 8100a70:	009b      	lsls	r3, r3, #2
 8100a72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

  float32_t output_matrix[numberofsubbands];
 8100a76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a7a:	3b01      	subs	r3, #1
 8100a7c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8100a80:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100a84:	2200      	movs	r2, #0
 8100a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8100a8a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8100a8e:	f04f 0200 	mov.w	r2, #0
 8100a92:	f04f 0300 	mov.w	r3, #0
 8100a96:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8100a9a:	4629      	mov	r1, r5
 8100a9c:	014b      	lsls	r3, r1, #5
 8100a9e:	4621      	mov	r1, r4
 8100aa0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100aa4:	4621      	mov	r1, r4
 8100aa6:	014a      	lsls	r2, r1, #5
 8100aa8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100aac:	2200      	movs	r2, #0
 8100aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8100ab2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8100ab6:	f04f 0200 	mov.w	r2, #0
 8100aba:	f04f 0300 	mov.w	r3, #0
 8100abe:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8100ac2:	4629      	mov	r1, r5
 8100ac4:	014b      	lsls	r3, r1, #5
 8100ac6:	4621      	mov	r1, r4
 8100ac8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100acc:	4621      	mov	r1, r4
 8100ace:	014a      	lsls	r2, r1, #5
 8100ad0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100ad4:	009b      	lsls	r3, r3, #2
 8100ad6:	3307      	adds	r3, #7
 8100ad8:	08db      	lsrs	r3, r3, #3
 8100ada:	00db      	lsls	r3, r3, #3
 8100adc:	ebad 0d03 	sub.w	sp, sp, r3
 8100ae0:	ab02      	add	r3, sp, #8
 8100ae2:	3303      	adds	r3, #3
 8100ae4:	089b      	lsrs	r3, r3, #2
 8100ae6:	009b      	lsls	r3, r3, #2
 8100ae8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  float32_t pCoeffs[numberofsubbands][5];
 8100aec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100af0:	3b01      	subs	r3, #1
 8100af2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8100af6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100afa:	2200      	movs	r2, #0
 8100afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8100b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8100b04:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8100b08:	4622      	mov	r2, r4
 8100b0a:	462b      	mov	r3, r5
 8100b0c:	f04f 0000 	mov.w	r0, #0
 8100b10:	f04f 0100 	mov.w	r1, #0
 8100b14:	0099      	lsls	r1, r3, #2
 8100b16:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8100b1a:	0090      	lsls	r0, r2, #2
 8100b1c:	4602      	mov	r2, r0
 8100b1e:	460b      	mov	r3, r1
 8100b20:	4621      	mov	r1, r4
 8100b22:	1851      	adds	r1, r2, r1
 8100b24:	65b9      	str	r1, [r7, #88]	; 0x58
 8100b26:	4629      	mov	r1, r5
 8100b28:	eb43 0101 	adc.w	r1, r3, r1
 8100b2c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8100b2e:	f04f 0200 	mov.w	r2, #0
 8100b32:	f04f 0300 	mov.w	r3, #0
 8100b36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8100b3a:	4629      	mov	r1, r5
 8100b3c:	014b      	lsls	r3, r1, #5
 8100b3e:	4621      	mov	r1, r4
 8100b40:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100b44:	4621      	mov	r1, r4
 8100b46:	014a      	lsls	r2, r1, #5
 8100b48:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100b4c:	2200      	movs	r2, #0
 8100b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8100b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8100b56:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8100b5a:	4622      	mov	r2, r4
 8100b5c:	462b      	mov	r3, r5
 8100b5e:	f04f 0000 	mov.w	r0, #0
 8100b62:	f04f 0100 	mov.w	r1, #0
 8100b66:	0099      	lsls	r1, r3, #2
 8100b68:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8100b6c:	0090      	lsls	r0, r2, #2
 8100b6e:	4602      	mov	r2, r0
 8100b70:	460b      	mov	r3, r1
 8100b72:	4621      	mov	r1, r4
 8100b74:	1851      	adds	r1, r2, r1
 8100b76:	6539      	str	r1, [r7, #80]	; 0x50
 8100b78:	4629      	mov	r1, r5
 8100b7a:	eb43 0101 	adc.w	r1, r3, r1
 8100b7e:	6579      	str	r1, [r7, #84]	; 0x54
 8100b80:	f04f 0200 	mov.w	r2, #0
 8100b84:	f04f 0300 	mov.w	r3, #0
 8100b88:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8100b8c:	4629      	mov	r1, r5
 8100b8e:	014b      	lsls	r3, r1, #5
 8100b90:	4621      	mov	r1, r4
 8100b92:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100b96:	4621      	mov	r1, r4
 8100b98:	014a      	lsls	r2, r1, #5
 8100b9a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8100b9e:	4613      	mov	r3, r2
 8100ba0:	009b      	lsls	r3, r3, #2
 8100ba2:	4413      	add	r3, r2
 8100ba4:	009b      	lsls	r3, r3, #2
 8100ba6:	3307      	adds	r3, #7
 8100ba8:	08db      	lsrs	r3, r3, #3
 8100baa:	00db      	lsls	r3, r3, #3
 8100bac:	ebad 0d03 	sub.w	sp, sp, r3
 8100bb0:	ab02      	add	r3, sp, #8
 8100bb2:	3303      	adds	r3, #3
 8100bb4:	089b      	lsrs	r3, r3, #2
 8100bb6:	009b      	lsls	r3, r3, #2
 8100bb8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  float32_t pState[numberofsubbands][5];
 8100bbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100bc0:	3b01      	subs	r3, #1
 8100bc2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8100bc6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100bca:	2200      	movs	r2, #0
 8100bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8100bd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8100bd4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8100bd8:	4622      	mov	r2, r4
 8100bda:	462b      	mov	r3, r5
 8100bdc:	f04f 0000 	mov.w	r0, #0
 8100be0:	f04f 0100 	mov.w	r1, #0
 8100be4:	0099      	lsls	r1, r3, #2
 8100be6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8100bea:	0090      	lsls	r0, r2, #2
 8100bec:	4602      	mov	r2, r0
 8100bee:	460b      	mov	r3, r1
 8100bf0:	4621      	mov	r1, r4
 8100bf2:	1851      	adds	r1, r2, r1
 8100bf4:	64b9      	str	r1, [r7, #72]	; 0x48
 8100bf6:	4629      	mov	r1, r5
 8100bf8:	eb43 0101 	adc.w	r1, r3, r1
 8100bfc:	64f9      	str	r1, [r7, #76]	; 0x4c
 8100bfe:	f04f 0200 	mov.w	r2, #0
 8100c02:	f04f 0300 	mov.w	r3, #0
 8100c06:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8100c0a:	4629      	mov	r1, r5
 8100c0c:	014b      	lsls	r3, r1, #5
 8100c0e:	4621      	mov	r1, r4
 8100c10:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100c14:	4621      	mov	r1, r4
 8100c16:	014a      	lsls	r2, r1, #5
 8100c18:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100c1c:	2200      	movs	r2, #0
 8100c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8100c22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8100c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8100c2a:	4622      	mov	r2, r4
 8100c2c:	462b      	mov	r3, r5
 8100c2e:	f04f 0000 	mov.w	r0, #0
 8100c32:	f04f 0100 	mov.w	r1, #0
 8100c36:	0099      	lsls	r1, r3, #2
 8100c38:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8100c3c:	0090      	lsls	r0, r2, #2
 8100c3e:	4602      	mov	r2, r0
 8100c40:	460b      	mov	r3, r1
 8100c42:	4621      	mov	r1, r4
 8100c44:	1851      	adds	r1, r2, r1
 8100c46:	6439      	str	r1, [r7, #64]	; 0x40
 8100c48:	4629      	mov	r1, r5
 8100c4a:	eb43 0101 	adc.w	r1, r3, r1
 8100c4e:	6479      	str	r1, [r7, #68]	; 0x44
 8100c50:	f04f 0200 	mov.w	r2, #0
 8100c54:	f04f 0300 	mov.w	r3, #0
 8100c58:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8100c5c:	4629      	mov	r1, r5
 8100c5e:	014b      	lsls	r3, r1, #5
 8100c60:	4621      	mov	r1, r4
 8100c62:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100c66:	4621      	mov	r1, r4
 8100c68:	014a      	lsls	r2, r1, #5
 8100c6a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8100c6e:	4613      	mov	r3, r2
 8100c70:	009b      	lsls	r3, r3, #2
 8100c72:	4413      	add	r3, r2
 8100c74:	009b      	lsls	r3, r3, #2
 8100c76:	3307      	adds	r3, #7
 8100c78:	08db      	lsrs	r3, r3, #3
 8100c7a:	00db      	lsls	r3, r3, #3
 8100c7c:	ebad 0d03 	sub.w	sp, sp, r3
 8100c80:	ab02      	add	r3, sp, #8
 8100c82:	3303      	adds	r3, #3
 8100c84:	089b      	lsrs	r3, r3, #2
 8100c86:	009b      	lsls	r3, r3, #2
 8100c88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  // SubbandFilters

  arm_biquad_casd_df1_inst_f32 filterbank_subband[numberofsubbands];
 8100c8c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100c90:	3b01      	subs	r3, #1
 8100c92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8100c96:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100c9a:	2200      	movs	r2, #0
 8100c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8100ca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8100ca4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8100ca8:	4622      	mov	r2, r4
 8100caa:	462b      	mov	r3, r5
 8100cac:	1891      	adds	r1, r2, r2
 8100cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8100cb0:	415b      	adcs	r3, r3
 8100cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8100cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8100cb8:	4621      	mov	r1, r4
 8100cba:	1851      	adds	r1, r2, r1
 8100cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8100cbe:	4629      	mov	r1, r5
 8100cc0:	eb43 0101 	adc.w	r1, r3, r1
 8100cc4:	6379      	str	r1, [r7, #52]	; 0x34
 8100cc6:	f04f 0200 	mov.w	r2, #0
 8100cca:	f04f 0300 	mov.w	r3, #0
 8100cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8100cd2:	4629      	mov	r1, r5
 8100cd4:	014b      	lsls	r3, r1, #5
 8100cd6:	4621      	mov	r1, r4
 8100cd8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100cdc:	4621      	mov	r1, r4
 8100cde:	014a      	lsls	r2, r1, #5
 8100ce0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100ce4:	2200      	movs	r2, #0
 8100ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8100cea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8100cee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8100cf2:	4622      	mov	r2, r4
 8100cf4:	462b      	mov	r3, r5
 8100cf6:	1891      	adds	r1, r2, r2
 8100cf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8100cfa:	415b      	adcs	r3, r3
 8100cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8100d02:	4621      	mov	r1, r4
 8100d04:	1851      	adds	r1, r2, r1
 8100d06:	6239      	str	r1, [r7, #32]
 8100d08:	4629      	mov	r1, r5
 8100d0a:	eb43 0101 	adc.w	r1, r3, r1
 8100d0e:	6279      	str	r1, [r7, #36]	; 0x24
 8100d10:	f04f 0200 	mov.w	r2, #0
 8100d14:	f04f 0300 	mov.w	r3, #0
 8100d18:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8100d1c:	4629      	mov	r1, r5
 8100d1e:	014b      	lsls	r3, r1, #5
 8100d20:	4621      	mov	r1, r4
 8100d22:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100d26:	4621      	mov	r1, r4
 8100d28:	014a      	lsls	r2, r1, #5
 8100d2a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8100d2e:	4613      	mov	r3, r2
 8100d30:	005b      	lsls	r3, r3, #1
 8100d32:	4413      	add	r3, r2
 8100d34:	009b      	lsls	r3, r3, #2
 8100d36:	3307      	adds	r3, #7
 8100d38:	08db      	lsrs	r3, r3, #3
 8100d3a:	00db      	lsls	r3, r3, #3
 8100d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8100d40:	ab02      	add	r3, sp, #8
 8100d42:	3303      	adds	r3, #3
 8100d44:	089b      	lsrs	r3, r3, #2
 8100d46:	009b      	lsls	r3, r3, #2
 8100d48:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  arm_biquad_cascade_df2T_instance_f32 filterbank_subband_2[numberofsubbands];
 8100d4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100d50:	3b01      	subs	r3, #1
 8100d52:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8100d56:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100d5a:	2200      	movs	r2, #0
 8100d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8100d5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8100d60:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8100d64:	4622      	mov	r2, r4
 8100d66:	462b      	mov	r3, r5
 8100d68:	1891      	adds	r1, r2, r2
 8100d6a:	61b9      	str	r1, [r7, #24]
 8100d6c:	415b      	adcs	r3, r3
 8100d6e:	61fb      	str	r3, [r7, #28]
 8100d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8100d74:	4621      	mov	r1, r4
 8100d76:	1851      	adds	r1, r2, r1
 8100d78:	6139      	str	r1, [r7, #16]
 8100d7a:	4629      	mov	r1, r5
 8100d7c:	eb43 0101 	adc.w	r1, r3, r1
 8100d80:	6179      	str	r1, [r7, #20]
 8100d82:	f04f 0200 	mov.w	r2, #0
 8100d86:	f04f 0300 	mov.w	r3, #0
 8100d8a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8100d8e:	4629      	mov	r1, r5
 8100d90:	014b      	lsls	r3, r1, #5
 8100d92:	4621      	mov	r1, r4
 8100d94:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100d98:	4621      	mov	r1, r4
 8100d9a:	014a      	lsls	r2, r1, #5
 8100d9c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100da0:	2200      	movs	r2, #0
 8100da2:	673b      	str	r3, [r7, #112]	; 0x70
 8100da4:	677a      	str	r2, [r7, #116]	; 0x74
 8100da6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8100daa:	4622      	mov	r2, r4
 8100dac:	462b      	mov	r3, r5
 8100dae:	1891      	adds	r1, r2, r2
 8100db0:	60b9      	str	r1, [r7, #8]
 8100db2:	415b      	adcs	r3, r3
 8100db4:	60fb      	str	r3, [r7, #12]
 8100db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8100dba:	4621      	mov	r1, r4
 8100dbc:	1851      	adds	r1, r2, r1
 8100dbe:	6039      	str	r1, [r7, #0]
 8100dc0:	4629      	mov	r1, r5
 8100dc2:	eb43 0101 	adc.w	r1, r3, r1
 8100dc6:	6079      	str	r1, [r7, #4]
 8100dc8:	f04f 0200 	mov.w	r2, #0
 8100dcc:	f04f 0300 	mov.w	r3, #0
 8100dd0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8100dd4:	4629      	mov	r1, r5
 8100dd6:	014b      	lsls	r3, r1, #5
 8100dd8:	4621      	mov	r1, r4
 8100dda:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8100dde:	4621      	mov	r1, r4
 8100de0:	014a      	lsls	r2, r1, #5
 8100de2:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8100de6:	4613      	mov	r3, r2
 8100de8:	005b      	lsls	r3, r3, #1
 8100dea:	4413      	add	r3, r2
 8100dec:	009b      	lsls	r3, r3, #2
 8100dee:	3307      	adds	r3, #7
 8100df0:	08db      	lsrs	r3, r3, #3
 8100df2:	00db      	lsls	r3, r3, #3
 8100df4:	ebad 0d03 	sub.w	sp, sp, r3
 8100df8:	ab02      	add	r3, sp, #8
 8100dfa:	3303      	adds	r3, #3
 8100dfc:	089b      	lsrs	r3, r3, #2
 8100dfe:	009b      	lsls	r3, r3, #2
 8100e00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  arm_biquad_casd_df1_inst_q15 filterbank_subband_3[numberofsubbands];
 8100e04:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e08:	3b01      	subs	r3, #1
 8100e0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8100e0e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e12:	2200      	movs	r2, #0
 8100e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8100e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8100e18:	f04f 0200 	mov.w	r2, #0
 8100e1c:	f04f 0300 	mov.w	r3, #0
 8100e20:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8100e24:	4629      	mov	r1, r5
 8100e26:	01cb      	lsls	r3, r1, #7
 8100e28:	4621      	mov	r1, r4
 8100e2a:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8100e2e:	4621      	mov	r1, r4
 8100e30:	01ca      	lsls	r2, r1, #7
 8100e32:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e36:	2200      	movs	r2, #0
 8100e38:	663b      	str	r3, [r7, #96]	; 0x60
 8100e3a:	667a      	str	r2, [r7, #100]	; 0x64
 8100e3c:	f04f 0200 	mov.w	r2, #0
 8100e40:	f04f 0300 	mov.w	r3, #0
 8100e44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8100e48:	4629      	mov	r1, r5
 8100e4a:	01cb      	lsls	r3, r1, #7
 8100e4c:	4621      	mov	r1, r4
 8100e4e:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8100e52:	4621      	mov	r1, r4
 8100e54:	01ca      	lsls	r2, r1, #7
 8100e56:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e5a:	011b      	lsls	r3, r3, #4
 8100e5c:	3307      	adds	r3, #7
 8100e5e:	08db      	lsrs	r3, r3, #3
 8100e60:	00db      	lsls	r3, r3, #3
 8100e62:	ebad 0d03 	sub.w	sp, sp, r3
 8100e66:	ab02      	add	r3, sp, #8
 8100e68:	3303      	adds	r3, #3
 8100e6a:	089b      	lsrs	r3, r3, #2
 8100e6c:	009b      	lsls	r3, r3, #2
 8100e6e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

  arm_matrix_instance_f32 subbandfilter_1={numberofsubbands,1,subbandfilter_a1};
 8100e72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e76:	b29b      	uxth	r3, r3
 8100e78:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8100e7c:	2301      	movs	r3, #1
 8100e7e:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8100e82:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8100e86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  arm_matrix_instance_f32 output_matrix_f32={numberofsubbands,1,output_matrix};
 8100e8a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100e8e:	b29b      	uxth	r3, r3
 8100e90:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8100e94:	2301      	movs	r3, #1
 8100e96:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8100e9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8100e9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8



  for(int i=0; i<numberofsubbands;i++){
 8100ea2:	2300      	movs	r3, #0
 8100ea4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8100ea8:	e023      	b.n	8100ef2 <main+0xbea>
	  arm_biquad_cascade_df1_init_f32(&(filterbank_subband[i]), 1, &(pCoeffs[i][0]), &(pState[i][0]));
 8100eaa:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8100eae:	4613      	mov	r3, r2
 8100eb0:	005b      	lsls	r3, r3, #1
 8100eb2:	4413      	add	r3, r2
 8100eb4:	009b      	lsls	r3, r3, #2
 8100eb6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8100eba:	18d0      	adds	r0, r2, r3
 8100ebc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8100ec0:	4613      	mov	r3, r2
 8100ec2:	009b      	lsls	r3, r3, #2
 8100ec4:	4413      	add	r3, r2
 8100ec6:	009b      	lsls	r3, r3, #2
 8100ec8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8100ecc:	18d1      	adds	r1, r2, r3
 8100ece:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8100ed2:	4613      	mov	r3, r2
 8100ed4:	009b      	lsls	r3, r3, #2
 8100ed6:	4413      	add	r3, r2
 8100ed8:	009b      	lsls	r3, r3, #2
 8100eda:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8100ede:	4413      	add	r3, r2
 8100ee0:	460a      	mov	r2, r1
 8100ee2:	2101      	movs	r1, #1
 8100ee4:	f000 fd88 	bl	81019f8 <arm_biquad_cascade_df1_init_f32>
  for(int i=0; i<numberofsubbands;i++){
 8100ee8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8100eec:	3301      	adds	r3, #1
 8100eee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8100ef2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8100ef6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100efa:	429a      	cmp	r2, r3
 8100efc:	dbd5      	blt.n	8100eaa <main+0xba2>
  }
  for(int i=0; i<numberofsubbands;i++){
 8100efe:	2300      	movs	r3, #0
 8100f00:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8100f04:	e023      	b.n	8100f4e <main+0xc46>
  	  arm_biquad_cascade_df2T_init_f32(&(filterbank_subband_2[i]), 1, &(pCoeffs[i][0]), &(pState[i][0]));
 8100f06:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8100f0a:	4613      	mov	r3, r2
 8100f0c:	005b      	lsls	r3, r3, #1
 8100f0e:	4413      	add	r3, r2
 8100f10:	009b      	lsls	r3, r3, #2
 8100f12:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8100f16:	18d0      	adds	r0, r2, r3
 8100f18:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8100f1c:	4613      	mov	r3, r2
 8100f1e:	009b      	lsls	r3, r3, #2
 8100f20:	4413      	add	r3, r2
 8100f22:	009b      	lsls	r3, r3, #2
 8100f24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8100f28:	18d1      	adds	r1, r2, r3
 8100f2a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8100f2e:	4613      	mov	r3, r2
 8100f30:	009b      	lsls	r3, r3, #2
 8100f32:	4413      	add	r3, r2
 8100f34:	009b      	lsls	r3, r3, #2
 8100f36:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8100f3a:	4413      	add	r3, r2
 8100f3c:	460a      	mov	r2, r1
 8100f3e:	2101      	movs	r1, #1
 8100f40:	f000 fd40 	bl	81019c4 <arm_biquad_cascade_df2T_init_f32>
  for(int i=0; i<numberofsubbands;i++){
 8100f44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8100f48:	3301      	adds	r3, #1
 8100f4a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8100f4e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8100f52:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100f56:	429a      	cmp	r2, r3
 8100f58:	dbd5      	blt.n	8100f06 <main+0xbfe>
  }

  for(int i=0; i<numberofsubbands;i++){
 8100f5a:	2300      	movs	r3, #0
 8100f5c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8100f60:	e022      	b.n	8100fa8 <main+0xca0>
	  arm_biquad_cascade_df1_init_q15(&(filterbank_subband_3[i]), 1, &(pCoeffs[i][0]), &(pState[i][0]), 0);
 8100f62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8100f66:	011b      	lsls	r3, r3, #4
 8100f68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8100f6c:	18d0      	adds	r0, r2, r3
 8100f6e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8100f72:	4613      	mov	r3, r2
 8100f74:	009b      	lsls	r3, r3, #2
 8100f76:	4413      	add	r3, r2
 8100f78:	009b      	lsls	r3, r3, #2
 8100f7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8100f7e:	18d1      	adds	r1, r2, r3
 8100f80:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8100f84:	4613      	mov	r3, r2
 8100f86:	009b      	lsls	r3, r3, #2
 8100f88:	4413      	add	r3, r2
 8100f8a:	009b      	lsls	r3, r3, #2
 8100f8c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8100f90:	4413      	add	r3, r2
 8100f92:	2200      	movs	r2, #0
 8100f94:	9200      	str	r2, [sp, #0]
 8100f96:	460a      	mov	r2, r1
 8100f98:	2101      	movs	r1, #1
 8100f9a:	f000 fd1f 	bl	81019dc <arm_biquad_cascade_df1_init_q15>
  for(int i=0; i<numberofsubbands;i++){
 8100f9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8100fa2:	3301      	adds	r3, #1
 8100fa4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8100fa8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8100fac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8100fb0:	429a      	cmp	r2, r3
 8100fb2:	dbd6      	blt.n	8100f62 <main+0xc5a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  volatile uint32_t myvar;
  while (1)
  {
	  myvar=HAL_GetTick();
 8100fb4:	f000 f9ee 	bl	8101394 <HAL_GetTick>
 8100fb8:	4603      	mov	r3, r0
 8100fba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

	  for(int i=0; i<10000;i++){
 8100fbe:	2300      	movs	r3, #0
 8100fc0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8100fc4:	e092      	b.n	81010ec <main+0xde4>
			  //arm_mat_scale_f32(&subbandfilter_1, input, &output_matrix_f32);

		  // vector implementation fo IIR filter
		  // d_n=input + a1*d[n-1] + a2*d[n-2]
		  // A0
		  for(int i=0;i<numberofsubbands;i++){
 8100fc6:	2300      	movs	r3, #0
 8100fc8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8100fcc:	e029      	b.n	8101022 <main+0xd1a>
			  subbandfilter_input[i]=input;
 8100fce:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8100fd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8100fd6:	009b      	lsls	r3, r3, #2
 8100fd8:	4413      	add	r3, r2
 8100fda:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8100fde:	601a      	str	r2, [r3, #0]
			  subbandfilter_dn2[i]=subbandfilter_dn1[i];
 8100fe0:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8100fe4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8100fe8:	009b      	lsls	r3, r3, #2
 8100fea:	4413      	add	r3, r2
 8100fec:	681a      	ldr	r2, [r3, #0]
 8100fee:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8100ff2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8100ff6:	009b      	lsls	r3, r3, #2
 8100ff8:	440b      	add	r3, r1
 8100ffa:	601a      	str	r2, [r3, #0]
			  subbandfilter_dn1[i]=subbandfilter_dn[i];
 8100ffc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8101000:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8101004:	009b      	lsls	r3, r3, #2
 8101006:	4413      	add	r3, r2
 8101008:	681a      	ldr	r2, [r3, #0]
 810100a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 810100e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8101012:	009b      	lsls	r3, r3, #2
 8101014:	440b      	add	r3, r1
 8101016:	601a      	str	r2, [r3, #0]
		  for(int i=0;i<numberofsubbands;i++){
 8101018:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 810101c:	3301      	adds	r3, #1
 810101e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8101022:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8101026:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810102a:	429a      	cmp	r2, r3
 810102c:	dbcf      	blt.n	8100fce <main+0xcc6>
		  }
		  // A1
		  arm_mult_f32(subbandfilter_a1, subbandfilter_dn1, subbandfilter_A1, numberofsubbands);
 810102e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8101032:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8101036:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 810103a:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 810103e:	f000 fce7 	bl	8101a10 <arm_mult_f32>
		  // A2
		  arm_mult_f32(subbandfilter_a2, subbandfilter_dn2, subbandfilter_A2, numberofsubbands);
 8101042:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8101046:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 810104a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 810104e:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 8101052:	f000 fcdd 	bl	8101a10 <arm_mult_f32>

		  // A1+A2
		  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_dn, numberofsubbands);
 8101056:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810105a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 810105e:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8101062:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8101066:	f000 fd2d 	bl	8101ac4 <arm_add_f32>



		  // d[n]=A0+A1+A2
		  arm_add_f32(subbandfilter_dn, subbandfilter_input, subbandfilter_dn, numberofsubbands);
 810106a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 810106e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8101072:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8101076:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 810107a:	f000 fd23 	bl	8101ac4 <arm_add_f32>


		  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

		  // B1
		  arm_mult_f32(subbandfilter_b1, subbandfilter_dn1, subbandfilter_B1, numberofsubbands);
 810107e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8101082:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8101086:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 810108a:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 810108e:	f000 fcbf 	bl	8101a10 <arm_mult_f32>
		  // B2
		  arm_mult_f32(subbandfilter_b2, subbandfilter_dn2, subbandfilter_B2, numberofsubbands);
 8101092:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8101096:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 810109a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 810109e:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 81010a2:	f000 fcb5 	bl	8101a10 <arm_mult_f32>
		  // B1+B2
		  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_y, numberofsubbands);
 81010a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81010aa:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 81010ae:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 81010b2:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 81010b6:	f000 fd05 	bl	8101ac4 <arm_add_f32>

		  // B0
		  arm_mult_f32(subbandfilter_b0, subbandfilter_dn, subbandfilter_B0, numberofsubbands);
 81010ba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81010be:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 81010c2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 81010c6:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 81010ca:	f000 fca1 	bl	8101a10 <arm_mult_f32>



		  // y=B0+B1+B2
		  arm_add_f32(subbandfilter_y, subbandfilter_B0, subbandfilter_y, numberofsubbands);
 81010ce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 81010d2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 81010d6:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 81010da:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 81010de:	f000 fcf1 	bl	8101ac4 <arm_add_f32>
	  for(int i=0; i<10000;i++){
 81010e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 81010e6:	3301      	adds	r3, #1
 81010e8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 81010ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 81010f0:	f242 720f 	movw	r2, #9999	; 0x270f
 81010f4:	4293      	cmp	r3, r2
 81010f6:	f77f af66 	ble.w	8100fc6 <main+0xcbe>


	  }

	  myvar=HAL_GetTick()-myvar;
 81010fa:	f000 f94b 	bl	8101394 <HAL_GetTick>
 81010fe:	4602      	mov	r2, r0
 8101100:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8101104:	1ad3      	subs	r3, r2, r3
 8101106:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

	  int a=1;
 810110a:	2301      	movs	r3, #1
 810110c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  {
 8101110:	e750      	b.n	8100fb4 <main+0xcac>
 8101112:	bf00      	nop

08101114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101114:	b480      	push	{r7}
 8101116:	b083      	sub	sp, #12
 8101118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810111a:	4b12      	ldr	r3, [pc, #72]	; (8101164 <MX_DMA_Init+0x50>)
 810111c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101120:	4a10      	ldr	r2, [pc, #64]	; (8101164 <MX_DMA_Init+0x50>)
 8101122:	f043 0301 	orr.w	r3, r3, #1
 8101126:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810112a:	4b0e      	ldr	r3, [pc, #56]	; (8101164 <MX_DMA_Init+0x50>)
 810112c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101130:	f003 0301 	and.w	r3, r3, #1
 8101134:	607b      	str	r3, [r7, #4]
 8101136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101138:	4b0a      	ldr	r3, [pc, #40]	; (8101164 <MX_DMA_Init+0x50>)
 810113a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810113e:	4a09      	ldr	r2, [pc, #36]	; (8101164 <MX_DMA_Init+0x50>)
 8101140:	f043 0302 	orr.w	r3, r3, #2
 8101144:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101148:	4b06      	ldr	r3, [pc, #24]	; (8101164 <MX_DMA_Init+0x50>)
 810114a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810114e:	f003 0302 	and.w	r3, r3, #2
 8101152:	603b      	str	r3, [r7, #0]
 8101154:	683b      	ldr	r3, [r7, #0]

}
 8101156:	bf00      	nop
 8101158:	370c      	adds	r7, #12
 810115a:	46bd      	mov	sp, r7
 810115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101160:	4770      	bx	lr
 8101162:	bf00      	nop
 8101164:	58024400 	.word	0x58024400

08101168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101168:	b480      	push	{r7}
 810116a:	b083      	sub	sp, #12
 810116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810116e:	4b0a      	ldr	r3, [pc, #40]	; (8101198 <HAL_MspInit+0x30>)
 8101170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101174:	4a08      	ldr	r2, [pc, #32]	; (8101198 <HAL_MspInit+0x30>)
 8101176:	f043 0302 	orr.w	r3, r3, #2
 810117a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810117e:	4b06      	ldr	r3, [pc, #24]	; (8101198 <HAL_MspInit+0x30>)
 8101180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101184:	f003 0302 	and.w	r3, r3, #2
 8101188:	607b      	str	r3, [r7, #4]
 810118a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810118c:	bf00      	nop
 810118e:	370c      	adds	r7, #12
 8101190:	46bd      	mov	sp, r7
 8101192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101196:	4770      	bx	lr
 8101198:	58024400 	.word	0x58024400

0810119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810119c:	b480      	push	{r7}
 810119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81011a0:	e7fe      	b.n	81011a0 <NMI_Handler+0x4>

081011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81011a2:	b480      	push	{r7}
 81011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81011a6:	e7fe      	b.n	81011a6 <HardFault_Handler+0x4>

081011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81011a8:	b480      	push	{r7}
 81011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81011ac:	e7fe      	b.n	81011ac <MemManage_Handler+0x4>

081011ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81011ae:	b480      	push	{r7}
 81011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81011b2:	e7fe      	b.n	81011b2 <BusFault_Handler+0x4>

081011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011b4:	b480      	push	{r7}
 81011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011b8:	e7fe      	b.n	81011b8 <UsageFault_Handler+0x4>

081011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011ba:	b480      	push	{r7}
 81011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011be:	bf00      	nop
 81011c0:	46bd      	mov	sp, r7
 81011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c6:	4770      	bx	lr

081011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011c8:	b480      	push	{r7}
 81011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011cc:	bf00      	nop
 81011ce:	46bd      	mov	sp, r7
 81011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d4:	4770      	bx	lr

081011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81011d6:	b480      	push	{r7}
 81011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81011da:	bf00      	nop
 81011dc:	46bd      	mov	sp, r7
 81011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e2:	4770      	bx	lr

081011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81011e4:	b580      	push	{r7, lr}
 81011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81011e8:	f000 f8c0 	bl	810136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81011ec:	bf00      	nop
 81011ee:	bd80      	pop	{r7, pc}

081011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81011f4:	f7ff f870 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81011f8:	480c      	ldr	r0, [pc, #48]	; (810122c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81011fa:	490d      	ldr	r1, [pc, #52]	; (8101230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81011fc:	4a0d      	ldr	r2, [pc, #52]	; (8101234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101200:	e002      	b.n	8101208 <LoopCopyDataInit>

08101202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101206:	3304      	adds	r3, #4

08101208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810120c:	d3f9      	bcc.n	8101202 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101210:	4c0a      	ldr	r4, [pc, #40]	; (810123c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101214:	e001      	b.n	810121a <LoopFillZerobss>

08101216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101218:	3204      	adds	r2, #4

0810121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810121c:	d3fb      	bcc.n	8101216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810121e:	f000 fcab 	bl	8101b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101222:	f7ff f871 	bl	8100308 <main>
  bx  lr
 8101226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101228:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810122c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101230:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101234:	08101c00 	.word	0x08101c00
  ldr r2, =_sbss
 8101238:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 810123c:	10000030 	.word	0x10000030

08101240 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101240:	e7fe      	b.n	8101240 <ADC3_IRQHandler>
	...

08101244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	b082      	sub	sp, #8
 8101248:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810124a:	4b28      	ldr	r3, [pc, #160]	; (81012ec <HAL_Init+0xa8>)
 810124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101250:	4a26      	ldr	r2, [pc, #152]	; (81012ec <HAL_Init+0xa8>)
 8101252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810125a:	4b24      	ldr	r3, [pc, #144]	; (81012ec <HAL_Init+0xa8>)
 810125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101264:	603b      	str	r3, [r7, #0]
 8101266:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101268:	4b21      	ldr	r3, [pc, #132]	; (81012f0 <HAL_Init+0xac>)
 810126a:	681b      	ldr	r3, [r3, #0]
 810126c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101274:	4a1e      	ldr	r2, [pc, #120]	; (81012f0 <HAL_Init+0xac>)
 8101276:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810127a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810127c:	4b1c      	ldr	r3, [pc, #112]	; (81012f0 <HAL_Init+0xac>)
 810127e:	681b      	ldr	r3, [r3, #0]
 8101280:	4a1b      	ldr	r2, [pc, #108]	; (81012f0 <HAL_Init+0xac>)
 8101282:	f043 0301 	orr.w	r3, r3, #1
 8101286:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101288:	2003      	movs	r0, #3
 810128a:	f000 f941 	bl	8101510 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810128e:	f000 fa1f 	bl	81016d0 <HAL_RCC_GetSysClockFreq>
 8101292:	4602      	mov	r2, r0
 8101294:	4b15      	ldr	r3, [pc, #84]	; (81012ec <HAL_Init+0xa8>)
 8101296:	699b      	ldr	r3, [r3, #24]
 8101298:	0a1b      	lsrs	r3, r3, #8
 810129a:	f003 030f 	and.w	r3, r3, #15
 810129e:	4915      	ldr	r1, [pc, #84]	; (81012f4 <HAL_Init+0xb0>)
 81012a0:	5ccb      	ldrb	r3, [r1, r3]
 81012a2:	f003 031f 	and.w	r3, r3, #31
 81012a6:	fa22 f303 	lsr.w	r3, r2, r3
 81012aa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81012ac:	4b0f      	ldr	r3, [pc, #60]	; (81012ec <HAL_Init+0xa8>)
 81012ae:	699b      	ldr	r3, [r3, #24]
 81012b0:	f003 030f 	and.w	r3, r3, #15
 81012b4:	4a0f      	ldr	r2, [pc, #60]	; (81012f4 <HAL_Init+0xb0>)
 81012b6:	5cd3      	ldrb	r3, [r2, r3]
 81012b8:	f003 031f 	and.w	r3, r3, #31
 81012bc:	687a      	ldr	r2, [r7, #4]
 81012be:	fa22 f303 	lsr.w	r3, r2, r3
 81012c2:	4a0d      	ldr	r2, [pc, #52]	; (81012f8 <HAL_Init+0xb4>)
 81012c4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81012c6:	4b0c      	ldr	r3, [pc, #48]	; (81012f8 <HAL_Init+0xb4>)
 81012c8:	681b      	ldr	r3, [r3, #0]
 81012ca:	4a0c      	ldr	r2, [pc, #48]	; (81012fc <HAL_Init+0xb8>)
 81012cc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81012ce:	2000      	movs	r0, #0
 81012d0:	f000 f816 	bl	8101300 <HAL_InitTick>
 81012d4:	4603      	mov	r3, r0
 81012d6:	2b00      	cmp	r3, #0
 81012d8:	d001      	beq.n	81012de <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81012da:	2301      	movs	r3, #1
 81012dc:	e002      	b.n	81012e4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81012de:	f7ff ff43 	bl	8101168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81012e2:	2300      	movs	r3, #0
}
 81012e4:	4618      	mov	r0, r3
 81012e6:	3708      	adds	r7, #8
 81012e8:	46bd      	mov	sp, r7
 81012ea:	bd80      	pop	{r7, pc}
 81012ec:	58024400 	.word	0x58024400
 81012f0:	40024400 	.word	0x40024400
 81012f4:	08101be8 	.word	0x08101be8
 81012f8:	10000004 	.word	0x10000004
 81012fc:	10000000 	.word	0x10000000

08101300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101300:	b580      	push	{r7, lr}
 8101302:	b082      	sub	sp, #8
 8101304:	af00      	add	r7, sp, #0
 8101306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101308:	4b15      	ldr	r3, [pc, #84]	; (8101360 <HAL_InitTick+0x60>)
 810130a:	781b      	ldrb	r3, [r3, #0]
 810130c:	2b00      	cmp	r3, #0
 810130e:	d101      	bne.n	8101314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101310:	2301      	movs	r3, #1
 8101312:	e021      	b.n	8101358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101314:	4b13      	ldr	r3, [pc, #76]	; (8101364 <HAL_InitTick+0x64>)
 8101316:	681a      	ldr	r2, [r3, #0]
 8101318:	4b11      	ldr	r3, [pc, #68]	; (8101360 <HAL_InitTick+0x60>)
 810131a:	781b      	ldrb	r3, [r3, #0]
 810131c:	4619      	mov	r1, r3
 810131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101322:	fbb3 f3f1 	udiv	r3, r3, r1
 8101326:	fbb2 f3f3 	udiv	r3, r2, r3
 810132a:	4618      	mov	r0, r3
 810132c:	f000 f915 	bl	810155a <HAL_SYSTICK_Config>
 8101330:	4603      	mov	r3, r0
 8101332:	2b00      	cmp	r3, #0
 8101334:	d001      	beq.n	810133a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101336:	2301      	movs	r3, #1
 8101338:	e00e      	b.n	8101358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	2b0f      	cmp	r3, #15
 810133e:	d80a      	bhi.n	8101356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101340:	2200      	movs	r2, #0
 8101342:	6879      	ldr	r1, [r7, #4]
 8101344:	f04f 30ff 	mov.w	r0, #4294967295
 8101348:	f000 f8ed 	bl	8101526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810134c:	4a06      	ldr	r2, [pc, #24]	; (8101368 <HAL_InitTick+0x68>)
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101352:	2300      	movs	r3, #0
 8101354:	e000      	b.n	8101358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101356:	2301      	movs	r3, #1
}
 8101358:	4618      	mov	r0, r3
 810135a:	3708      	adds	r7, #8
 810135c:	46bd      	mov	sp, r7
 810135e:	bd80      	pop	{r7, pc}
 8101360:	1000000c 	.word	0x1000000c
 8101364:	10000000 	.word	0x10000000
 8101368:	10000008 	.word	0x10000008

0810136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810136c:	b480      	push	{r7}
 810136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101370:	4b06      	ldr	r3, [pc, #24]	; (810138c <HAL_IncTick+0x20>)
 8101372:	781b      	ldrb	r3, [r3, #0]
 8101374:	461a      	mov	r2, r3
 8101376:	4b06      	ldr	r3, [pc, #24]	; (8101390 <HAL_IncTick+0x24>)
 8101378:	681b      	ldr	r3, [r3, #0]
 810137a:	4413      	add	r3, r2
 810137c:	4a04      	ldr	r2, [pc, #16]	; (8101390 <HAL_IncTick+0x24>)
 810137e:	6013      	str	r3, [r2, #0]
}
 8101380:	bf00      	nop
 8101382:	46bd      	mov	sp, r7
 8101384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101388:	4770      	bx	lr
 810138a:	bf00      	nop
 810138c:	1000000c 	.word	0x1000000c
 8101390:	1000002c 	.word	0x1000002c

08101394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101394:	b480      	push	{r7}
 8101396:	af00      	add	r7, sp, #0
  return uwTick;
 8101398:	4b03      	ldr	r3, [pc, #12]	; (81013a8 <HAL_GetTick+0x14>)
 810139a:	681b      	ldr	r3, [r3, #0]
}
 810139c:	4618      	mov	r0, r3
 810139e:	46bd      	mov	sp, r7
 81013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a4:	4770      	bx	lr
 81013a6:	bf00      	nop
 81013a8:	1000002c 	.word	0x1000002c

081013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81013ac:	b480      	push	{r7}
 81013ae:	b085      	sub	sp, #20
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	f003 0307 	and.w	r3, r3, #7
 81013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81013bc:	4b0c      	ldr	r3, [pc, #48]	; (81013f0 <__NVIC_SetPriorityGrouping+0x44>)
 81013be:	68db      	ldr	r3, [r3, #12]
 81013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81013c2:	68ba      	ldr	r2, [r7, #8]
 81013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81013c8:	4013      	ands	r3, r2
 81013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81013cc:	68fb      	ldr	r3, [r7, #12]
 81013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81013d0:	68bb      	ldr	r3, [r7, #8]
 81013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81013de:	4a04      	ldr	r2, [pc, #16]	; (81013f0 <__NVIC_SetPriorityGrouping+0x44>)
 81013e0:	68bb      	ldr	r3, [r7, #8]
 81013e2:	60d3      	str	r3, [r2, #12]
}
 81013e4:	bf00      	nop
 81013e6:	3714      	adds	r7, #20
 81013e8:	46bd      	mov	sp, r7
 81013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ee:	4770      	bx	lr
 81013f0:	e000ed00 	.word	0xe000ed00

081013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81013f4:	b480      	push	{r7}
 81013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81013f8:	4b04      	ldr	r3, [pc, #16]	; (810140c <__NVIC_GetPriorityGrouping+0x18>)
 81013fa:	68db      	ldr	r3, [r3, #12]
 81013fc:	0a1b      	lsrs	r3, r3, #8
 81013fe:	f003 0307 	and.w	r3, r3, #7
}
 8101402:	4618      	mov	r0, r3
 8101404:	46bd      	mov	sp, r7
 8101406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140a:	4770      	bx	lr
 810140c:	e000ed00 	.word	0xe000ed00

08101410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101410:	b480      	push	{r7}
 8101412:	b083      	sub	sp, #12
 8101414:	af00      	add	r7, sp, #0
 8101416:	4603      	mov	r3, r0
 8101418:	6039      	str	r1, [r7, #0]
 810141a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810141c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101420:	2b00      	cmp	r3, #0
 8101422:	db0a      	blt.n	810143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101424:	683b      	ldr	r3, [r7, #0]
 8101426:	b2da      	uxtb	r2, r3
 8101428:	490c      	ldr	r1, [pc, #48]	; (810145c <__NVIC_SetPriority+0x4c>)
 810142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810142e:	0112      	lsls	r2, r2, #4
 8101430:	b2d2      	uxtb	r2, r2
 8101432:	440b      	add	r3, r1
 8101434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101438:	e00a      	b.n	8101450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810143a:	683b      	ldr	r3, [r7, #0]
 810143c:	b2da      	uxtb	r2, r3
 810143e:	4908      	ldr	r1, [pc, #32]	; (8101460 <__NVIC_SetPriority+0x50>)
 8101440:	88fb      	ldrh	r3, [r7, #6]
 8101442:	f003 030f 	and.w	r3, r3, #15
 8101446:	3b04      	subs	r3, #4
 8101448:	0112      	lsls	r2, r2, #4
 810144a:	b2d2      	uxtb	r2, r2
 810144c:	440b      	add	r3, r1
 810144e:	761a      	strb	r2, [r3, #24]
}
 8101450:	bf00      	nop
 8101452:	370c      	adds	r7, #12
 8101454:	46bd      	mov	sp, r7
 8101456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810145a:	4770      	bx	lr
 810145c:	e000e100 	.word	0xe000e100
 8101460:	e000ed00 	.word	0xe000ed00

08101464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101464:	b480      	push	{r7}
 8101466:	b089      	sub	sp, #36	; 0x24
 8101468:	af00      	add	r7, sp, #0
 810146a:	60f8      	str	r0, [r7, #12]
 810146c:	60b9      	str	r1, [r7, #8]
 810146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101470:	68fb      	ldr	r3, [r7, #12]
 8101472:	f003 0307 	and.w	r3, r3, #7
 8101476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101478:	69fb      	ldr	r3, [r7, #28]
 810147a:	f1c3 0307 	rsb	r3, r3, #7
 810147e:	2b04      	cmp	r3, #4
 8101480:	bf28      	it	cs
 8101482:	2304      	movcs	r3, #4
 8101484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101486:	69fb      	ldr	r3, [r7, #28]
 8101488:	3304      	adds	r3, #4
 810148a:	2b06      	cmp	r3, #6
 810148c:	d902      	bls.n	8101494 <NVIC_EncodePriority+0x30>
 810148e:	69fb      	ldr	r3, [r7, #28]
 8101490:	3b03      	subs	r3, #3
 8101492:	e000      	b.n	8101496 <NVIC_EncodePriority+0x32>
 8101494:	2300      	movs	r3, #0
 8101496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101498:	f04f 32ff 	mov.w	r2, #4294967295
 810149c:	69bb      	ldr	r3, [r7, #24]
 810149e:	fa02 f303 	lsl.w	r3, r2, r3
 81014a2:	43da      	mvns	r2, r3
 81014a4:	68bb      	ldr	r3, [r7, #8]
 81014a6:	401a      	ands	r2, r3
 81014a8:	697b      	ldr	r3, [r7, #20]
 81014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81014ac:	f04f 31ff 	mov.w	r1, #4294967295
 81014b0:	697b      	ldr	r3, [r7, #20]
 81014b2:	fa01 f303 	lsl.w	r3, r1, r3
 81014b6:	43d9      	mvns	r1, r3
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81014bc:	4313      	orrs	r3, r2
         );
}
 81014be:	4618      	mov	r0, r3
 81014c0:	3724      	adds	r7, #36	; 0x24
 81014c2:	46bd      	mov	sp, r7
 81014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c8:	4770      	bx	lr
	...

081014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b082      	sub	sp, #8
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	3b01      	subs	r3, #1
 81014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81014dc:	d301      	bcc.n	81014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81014de:	2301      	movs	r3, #1
 81014e0:	e00f      	b.n	8101502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81014e2:	4a0a      	ldr	r2, [pc, #40]	; (810150c <SysTick_Config+0x40>)
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	3b01      	subs	r3, #1
 81014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81014ea:	210f      	movs	r1, #15
 81014ec:	f04f 30ff 	mov.w	r0, #4294967295
 81014f0:	f7ff ff8e 	bl	8101410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81014f4:	4b05      	ldr	r3, [pc, #20]	; (810150c <SysTick_Config+0x40>)
 81014f6:	2200      	movs	r2, #0
 81014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81014fa:	4b04      	ldr	r3, [pc, #16]	; (810150c <SysTick_Config+0x40>)
 81014fc:	2207      	movs	r2, #7
 81014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101500:	2300      	movs	r3, #0
}
 8101502:	4618      	mov	r0, r3
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	e000e010 	.word	0xe000e010

08101510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101510:	b580      	push	{r7, lr}
 8101512:	b082      	sub	sp, #8
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101518:	6878      	ldr	r0, [r7, #4]
 810151a:	f7ff ff47 	bl	81013ac <__NVIC_SetPriorityGrouping>
}
 810151e:	bf00      	nop
 8101520:	3708      	adds	r7, #8
 8101522:	46bd      	mov	sp, r7
 8101524:	bd80      	pop	{r7, pc}

08101526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101526:	b580      	push	{r7, lr}
 8101528:	b086      	sub	sp, #24
 810152a:	af00      	add	r7, sp, #0
 810152c:	4603      	mov	r3, r0
 810152e:	60b9      	str	r1, [r7, #8]
 8101530:	607a      	str	r2, [r7, #4]
 8101532:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101534:	f7ff ff5e 	bl	81013f4 <__NVIC_GetPriorityGrouping>
 8101538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810153a:	687a      	ldr	r2, [r7, #4]
 810153c:	68b9      	ldr	r1, [r7, #8]
 810153e:	6978      	ldr	r0, [r7, #20]
 8101540:	f7ff ff90 	bl	8101464 <NVIC_EncodePriority>
 8101544:	4602      	mov	r2, r0
 8101546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810154a:	4611      	mov	r1, r2
 810154c:	4618      	mov	r0, r3
 810154e:	f7ff ff5f 	bl	8101410 <__NVIC_SetPriority>
}
 8101552:	bf00      	nop
 8101554:	3718      	adds	r7, #24
 8101556:	46bd      	mov	sp, r7
 8101558:	bd80      	pop	{r7, pc}

0810155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810155a:	b580      	push	{r7, lr}
 810155c:	b082      	sub	sp, #8
 810155e:	af00      	add	r7, sp, #0
 8101560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101562:	6878      	ldr	r0, [r7, #4]
 8101564:	f7ff ffb2 	bl	81014cc <SysTick_Config>
 8101568:	4603      	mov	r3, r0
}
 810156a:	4618      	mov	r0, r3
 810156c:	3708      	adds	r7, #8
 810156e:	46bd      	mov	sp, r7
 8101570:	bd80      	pop	{r7, pc}
	...

08101574 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101574:	b480      	push	{r7}
 8101576:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101578:	4b07      	ldr	r3, [pc, #28]	; (8101598 <HAL_GetCurrentCPUID+0x24>)
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	091b      	lsrs	r3, r3, #4
 810157e:	f003 030f 	and.w	r3, r3, #15
 8101582:	2b07      	cmp	r3, #7
 8101584:	d101      	bne.n	810158a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101586:	2303      	movs	r3, #3
 8101588:	e000      	b.n	810158c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810158a:	2301      	movs	r3, #1
  }
}
 810158c:	4618      	mov	r0, r3
 810158e:	46bd      	mov	sp, r7
 8101590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101594:	4770      	bx	lr
 8101596:	bf00      	nop
 8101598:	e000ed00 	.word	0xe000ed00

0810159c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810159c:	b480      	push	{r7}
 810159e:	b083      	sub	sp, #12
 81015a0:	af00      	add	r7, sp, #0
 81015a2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81015a4:	4b05      	ldr	r3, [pc, #20]	; (81015bc <HAL_HSEM_ActivateNotification+0x20>)
 81015a6:	681a      	ldr	r2, [r3, #0]
 81015a8:	4904      	ldr	r1, [pc, #16]	; (81015bc <HAL_HSEM_ActivateNotification+0x20>)
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	4313      	orrs	r3, r2
 81015ae:	600b      	str	r3, [r1, #0]
#endif
}
 81015b0:	bf00      	nop
 81015b2:	370c      	adds	r7, #12
 81015b4:	46bd      	mov	sp, r7
 81015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ba:	4770      	bx	lr
 81015bc:	58026510 	.word	0x58026510

081015c0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81015c0:	b580      	push	{r7, lr}
 81015c2:	b084      	sub	sp, #16
 81015c4:	af00      	add	r7, sp, #0
 81015c6:	60f8      	str	r0, [r7, #12]
 81015c8:	460b      	mov	r3, r1
 81015ca:	607a      	str	r2, [r7, #4]
 81015cc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81015ce:	4b37      	ldr	r3, [pc, #220]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	f023 0201 	bic.w	r2, r3, #1
 81015d6:	4935      	ldr	r1, [pc, #212]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 81015d8:	68fb      	ldr	r3, [r7, #12]
 81015da:	4313      	orrs	r3, r2
 81015dc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	2b00      	cmp	r3, #0
 81015e2:	d123      	bne.n	810162c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81015e4:	f7ff ffc6 	bl	8101574 <HAL_GetCurrentCPUID>
 81015e8:	4603      	mov	r3, r0
 81015ea:	2b03      	cmp	r3, #3
 81015ec:	d158      	bne.n	81016a0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81015ee:	4b2f      	ldr	r3, [pc, #188]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 81015f0:	691b      	ldr	r3, [r3, #16]
 81015f2:	4a2e      	ldr	r2, [pc, #184]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 81015f4:	f023 0301 	bic.w	r3, r3, #1
 81015f8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81015fa:	4b2d      	ldr	r3, [pc, #180]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81015fc:	691b      	ldr	r3, [r3, #16]
 81015fe:	4a2c      	ldr	r2, [pc, #176]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101600:	f043 0304 	orr.w	r3, r3, #4
 8101604:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101606:	f3bf 8f4f 	dsb	sy
}
 810160a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810160c:	f3bf 8f6f 	isb	sy
}
 8101610:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101612:	7afb      	ldrb	r3, [r7, #11]
 8101614:	2b01      	cmp	r3, #1
 8101616:	d101      	bne.n	810161c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101618:	bf30      	wfi
 810161a:	e000      	b.n	810161e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810161c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810161e:	4b24      	ldr	r3, [pc, #144]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101620:	691b      	ldr	r3, [r3, #16]
 8101622:	4a23      	ldr	r2, [pc, #140]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101624:	f023 0304 	bic.w	r3, r3, #4
 8101628:	6113      	str	r3, [r2, #16]
 810162a:	e03c      	b.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	2b01      	cmp	r3, #1
 8101630:	d123      	bne.n	810167a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101632:	f7ff ff9f 	bl	8101574 <HAL_GetCurrentCPUID>
 8101636:	4603      	mov	r3, r0
 8101638:	2b01      	cmp	r3, #1
 810163a:	d133      	bne.n	81016a4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810163c:	4b1b      	ldr	r3, [pc, #108]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 810163e:	695b      	ldr	r3, [r3, #20]
 8101640:	4a1a      	ldr	r2, [pc, #104]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 8101642:	f023 0302 	bic.w	r3, r3, #2
 8101646:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101648:	4b19      	ldr	r3, [pc, #100]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810164a:	691b      	ldr	r3, [r3, #16]
 810164c:	4a18      	ldr	r2, [pc, #96]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810164e:	f043 0304 	orr.w	r3, r3, #4
 8101652:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101654:	f3bf 8f4f 	dsb	sy
}
 8101658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810165a:	f3bf 8f6f 	isb	sy
}
 810165e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101660:	7afb      	ldrb	r3, [r7, #11]
 8101662:	2b01      	cmp	r3, #1
 8101664:	d101      	bne.n	810166a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101666:	bf30      	wfi
 8101668:	e000      	b.n	810166c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810166a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810166c:	4b10      	ldr	r3, [pc, #64]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810166e:	691b      	ldr	r3, [r3, #16]
 8101670:	4a0f      	ldr	r2, [pc, #60]	; (81016b0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101672:	f023 0304 	bic.w	r3, r3, #4
 8101676:	6113      	str	r3, [r2, #16]
 8101678:	e015      	b.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810167a:	f7ff ff7b 	bl	8101574 <HAL_GetCurrentCPUID>
 810167e:	4603      	mov	r3, r0
 8101680:	2b03      	cmp	r3, #3
 8101682:	d106      	bne.n	8101692 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101684:	4b09      	ldr	r3, [pc, #36]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 8101686:	691b      	ldr	r3, [r3, #16]
 8101688:	4a08      	ldr	r2, [pc, #32]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 810168a:	f023 0304 	bic.w	r3, r3, #4
 810168e:	6113      	str	r3, [r2, #16]
 8101690:	e009      	b.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101692:	4b06      	ldr	r3, [pc, #24]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 8101694:	695b      	ldr	r3, [r3, #20]
 8101696:	4a05      	ldr	r2, [pc, #20]	; (81016ac <HAL_PWREx_EnterSTOPMode+0xec>)
 8101698:	f023 0304 	bic.w	r3, r3, #4
 810169c:	6153      	str	r3, [r2, #20]
 810169e:	e002      	b.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016a0:	bf00      	nop
 81016a2:	e000      	b.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016a4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81016a6:	3710      	adds	r7, #16
 81016a8:	46bd      	mov	sp, r7
 81016aa:	bd80      	pop	{r7, pc}
 81016ac:	58024800 	.word	0x58024800
 81016b0:	e000ed00 	.word	0xe000ed00

081016b4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81016b4:	b580      	push	{r7, lr}
 81016b6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016b8:	f7ff ff5c 	bl	8101574 <HAL_GetCurrentCPUID>
 81016bc:	4603      	mov	r3, r0
 81016be:	2b03      	cmp	r3, #3
 81016c0:	d101      	bne.n	81016c6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81016c2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81016c4:	e001      	b.n	81016ca <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81016c6:	bf40      	sev
    __WFE ();
 81016c8:	bf20      	wfe
}
 81016ca:	bf00      	nop
 81016cc:	bd80      	pop	{r7, pc}
	...

081016d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81016d0:	b480      	push	{r7}
 81016d2:	b089      	sub	sp, #36	; 0x24
 81016d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81016d6:	4bb3      	ldr	r3, [pc, #716]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016d8:	691b      	ldr	r3, [r3, #16]
 81016da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81016de:	2b18      	cmp	r3, #24
 81016e0:	f200 8155 	bhi.w	810198e <HAL_RCC_GetSysClockFreq+0x2be>
 81016e4:	a201      	add	r2, pc, #4	; (adr r2, 81016ec <HAL_RCC_GetSysClockFreq+0x1c>)
 81016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016ea:	bf00      	nop
 81016ec:	08101751 	.word	0x08101751
 81016f0:	0810198f 	.word	0x0810198f
 81016f4:	0810198f 	.word	0x0810198f
 81016f8:	0810198f 	.word	0x0810198f
 81016fc:	0810198f 	.word	0x0810198f
 8101700:	0810198f 	.word	0x0810198f
 8101704:	0810198f 	.word	0x0810198f
 8101708:	0810198f 	.word	0x0810198f
 810170c:	08101777 	.word	0x08101777
 8101710:	0810198f 	.word	0x0810198f
 8101714:	0810198f 	.word	0x0810198f
 8101718:	0810198f 	.word	0x0810198f
 810171c:	0810198f 	.word	0x0810198f
 8101720:	0810198f 	.word	0x0810198f
 8101724:	0810198f 	.word	0x0810198f
 8101728:	0810198f 	.word	0x0810198f
 810172c:	0810177d 	.word	0x0810177d
 8101730:	0810198f 	.word	0x0810198f
 8101734:	0810198f 	.word	0x0810198f
 8101738:	0810198f 	.word	0x0810198f
 810173c:	0810198f 	.word	0x0810198f
 8101740:	0810198f 	.word	0x0810198f
 8101744:	0810198f 	.word	0x0810198f
 8101748:	0810198f 	.word	0x0810198f
 810174c:	08101783 	.word	0x08101783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101750:	4b94      	ldr	r3, [pc, #592]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f003 0320 	and.w	r3, r3, #32
 8101758:	2b00      	cmp	r3, #0
 810175a:	d009      	beq.n	8101770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810175c:	4b91      	ldr	r3, [pc, #580]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	08db      	lsrs	r3, r3, #3
 8101762:	f003 0303 	and.w	r3, r3, #3
 8101766:	4a90      	ldr	r2, [pc, #576]	; (81019a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101768:	fa22 f303 	lsr.w	r3, r2, r3
 810176c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810176e:	e111      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101770:	4b8d      	ldr	r3, [pc, #564]	; (81019a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101772:	61bb      	str	r3, [r7, #24]
      break;
 8101774:	e10e      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101776:	4b8d      	ldr	r3, [pc, #564]	; (81019ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101778:	61bb      	str	r3, [r7, #24]
      break;
 810177a:	e10b      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810177c:	4b8c      	ldr	r3, [pc, #560]	; (81019b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810177e:	61bb      	str	r3, [r7, #24]
      break;
 8101780:	e108      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101782:	4b88      	ldr	r3, [pc, #544]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101786:	f003 0303 	and.w	r3, r3, #3
 810178a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810178c:	4b85      	ldr	r3, [pc, #532]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101790:	091b      	lsrs	r3, r3, #4
 8101792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101798:	4b82      	ldr	r3, [pc, #520]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810179c:	f003 0301 	and.w	r3, r3, #1
 81017a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81017a2:	4b80      	ldr	r3, [pc, #512]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81017a6:	08db      	lsrs	r3, r3, #3
 81017a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81017ac:	68fa      	ldr	r2, [r7, #12]
 81017ae:	fb02 f303 	mul.w	r3, r2, r3
 81017b2:	ee07 3a90 	vmov	s15, r3
 81017b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81017be:	693b      	ldr	r3, [r7, #16]
 81017c0:	2b00      	cmp	r3, #0
 81017c2:	f000 80e1 	beq.w	8101988 <HAL_RCC_GetSysClockFreq+0x2b8>
 81017c6:	697b      	ldr	r3, [r7, #20]
 81017c8:	2b02      	cmp	r3, #2
 81017ca:	f000 8083 	beq.w	81018d4 <HAL_RCC_GetSysClockFreq+0x204>
 81017ce:	697b      	ldr	r3, [r7, #20]
 81017d0:	2b02      	cmp	r3, #2
 81017d2:	f200 80a1 	bhi.w	8101918 <HAL_RCC_GetSysClockFreq+0x248>
 81017d6:	697b      	ldr	r3, [r7, #20]
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d003      	beq.n	81017e4 <HAL_RCC_GetSysClockFreq+0x114>
 81017dc:	697b      	ldr	r3, [r7, #20]
 81017de:	2b01      	cmp	r3, #1
 81017e0:	d056      	beq.n	8101890 <HAL_RCC_GetSysClockFreq+0x1c0>
 81017e2:	e099      	b.n	8101918 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81017e4:	4b6f      	ldr	r3, [pc, #444]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	f003 0320 	and.w	r3, r3, #32
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	d02d      	beq.n	810184c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81017f0:	4b6c      	ldr	r3, [pc, #432]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017f2:	681b      	ldr	r3, [r3, #0]
 81017f4:	08db      	lsrs	r3, r3, #3
 81017f6:	f003 0303 	and.w	r3, r3, #3
 81017fa:	4a6b      	ldr	r2, [pc, #428]	; (81019a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8101800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	ee07 3a90 	vmov	s15, r3
 8101808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810180c:	693b      	ldr	r3, [r7, #16]
 810180e:	ee07 3a90 	vmov	s15, r3
 8101812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810181a:	4b62      	ldr	r3, [pc, #392]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810181e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101822:	ee07 3a90 	vmov	s15, r3
 8101826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810182a:	ed97 6a02 	vldr	s12, [r7, #8]
 810182e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81019b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810183a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810183e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810184a:	e087      	b.n	810195c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810184c:	693b      	ldr	r3, [r7, #16]
 810184e:	ee07 3a90 	vmov	s15, r3
 8101852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101856:	eddf 6a58 	vldr	s13, [pc, #352]	; 81019b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810185e:	4b51      	ldr	r3, [pc, #324]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101866:	ee07 3a90 	vmov	s15, r3
 810186a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810186e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101872:	eddf 5a50 	vldr	s11, [pc, #320]	; 81019b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810187a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810187e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101886:	ee67 7a27 	vmul.f32	s15, s14, s15
 810188a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810188e:	e065      	b.n	810195c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101890:	693b      	ldr	r3, [r7, #16]
 8101892:	ee07 3a90 	vmov	s15, r3
 8101896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810189a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81019bc <HAL_RCC_GetSysClockFreq+0x2ec>
 810189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018a2:	4b40      	ldr	r3, [pc, #256]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018aa:	ee07 3a90 	vmov	s15, r3
 81018ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81018b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81019b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81018c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81018d2:	e043      	b.n	810195c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81018d4:	693b      	ldr	r3, [r7, #16]
 81018d6:	ee07 3a90 	vmov	s15, r3
 81018da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018de:	eddf 6a38 	vldr	s13, [pc, #224]	; 81019c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81018e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018e6:	4b2f      	ldr	r3, [pc, #188]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018ee:	ee07 3a90 	vmov	s15, r3
 81018f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81018fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81019b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810190a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101916:	e021      	b.n	810195c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101918:	693b      	ldr	r3, [r7, #16]
 810191a:	ee07 3a90 	vmov	s15, r3
 810191e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101922:	eddf 6a26 	vldr	s13, [pc, #152]	; 81019bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8101926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810192a:	4b1e      	ldr	r3, [pc, #120]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101932:	ee07 3a90 	vmov	s15, r3
 8101936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810193a:	ed97 6a02 	vldr	s12, [r7, #8]
 810193e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81019b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810194a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810194e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810195a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810195c:	4b11      	ldr	r3, [pc, #68]	; (81019a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101960:	0a5b      	lsrs	r3, r3, #9
 8101962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101966:	3301      	adds	r3, #1
 8101968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810196a:	683b      	ldr	r3, [r7, #0]
 810196c:	ee07 3a90 	vmov	s15, r3
 8101970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101974:	edd7 6a07 	vldr	s13, [r7, #28]
 8101978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101980:	ee17 3a90 	vmov	r3, s15
 8101984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101986:	e005      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101988:	2300      	movs	r3, #0
 810198a:	61bb      	str	r3, [r7, #24]
      break;
 810198c:	e002      	b.n	8101994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810198e:	4b07      	ldr	r3, [pc, #28]	; (81019ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101990:	61bb      	str	r3, [r7, #24]
      break;
 8101992:	bf00      	nop
  }

  return sysclockfreq;
 8101994:	69bb      	ldr	r3, [r7, #24]
}
 8101996:	4618      	mov	r0, r3
 8101998:	3724      	adds	r7, #36	; 0x24
 810199a:	46bd      	mov	sp, r7
 810199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a0:	4770      	bx	lr
 81019a2:	bf00      	nop
 81019a4:	58024400 	.word	0x58024400
 81019a8:	03d09000 	.word	0x03d09000
 81019ac:	003d0900 	.word	0x003d0900
 81019b0:	007a1200 	.word	0x007a1200
 81019b4:	46000000 	.word	0x46000000
 81019b8:	4c742400 	.word	0x4c742400
 81019bc:	4a742400 	.word	0x4a742400
 81019c0:	4af42400 	.word	0x4af42400

081019c4 <arm_biquad_cascade_df2T_init_f32>:
 81019c4:	b510      	push	{r4, lr}
 81019c6:	6082      	str	r2, [r0, #8]
 81019c8:	7001      	strb	r1, [r0, #0]
 81019ca:	4604      	mov	r4, r0
 81019cc:	00ca      	lsls	r2, r1, #3
 81019ce:	4618      	mov	r0, r3
 81019d0:	2100      	movs	r1, #0
 81019d2:	f000 f8f5 	bl	8101bc0 <memset>
 81019d6:	6060      	str	r0, [r4, #4]
 81019d8:	bd10      	pop	{r4, pc}
 81019da:	bf00      	nop

081019dc <arm_biquad_cascade_df1_init_q15>:
 81019dc:	b510      	push	{r4, lr}
 81019de:	4604      	mov	r4, r0
 81019e0:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 81019e4:	60a2      	str	r2, [r4, #8]
 81019e6:	7021      	strb	r1, [r4, #0]
 81019e8:	00ca      	lsls	r2, r1, #3
 81019ea:	7320      	strb	r0, [r4, #12]
 81019ec:	2100      	movs	r1, #0
 81019ee:	4618      	mov	r0, r3
 81019f0:	f000 f8e6 	bl	8101bc0 <memset>
 81019f4:	6060      	str	r0, [r4, #4]
 81019f6:	bd10      	pop	{r4, pc}

081019f8 <arm_biquad_cascade_df1_init_f32>:
 81019f8:	b510      	push	{r4, lr}
 81019fa:	6082      	str	r2, [r0, #8]
 81019fc:	6001      	str	r1, [r0, #0]
 81019fe:	4604      	mov	r4, r0
 8101a00:	010a      	lsls	r2, r1, #4
 8101a02:	4618      	mov	r0, r3
 8101a04:	2100      	movs	r1, #0
 8101a06:	f000 f8db 	bl	8101bc0 <memset>
 8101a0a:	6060      	str	r0, [r4, #4]
 8101a0c:	bd10      	pop	{r4, pc}
 8101a0e:	bf00      	nop

08101a10 <arm_mult_f32>:
 8101a10:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8101a14:	b4f0      	push	{r4, r5, r6, r7}
 8101a16:	d033      	beq.n	8101a80 <arm_mult_f32+0x70>
 8101a18:	f100 0610 	add.w	r6, r0, #16
 8101a1c:	f101 0510 	add.w	r5, r1, #16
 8101a20:	f102 0410 	add.w	r4, r2, #16
 8101a24:	4667      	mov	r7, ip
 8101a26:	ed15 7a04 	vldr	s14, [r5, #-16]
 8101a2a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8101a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a32:	3f01      	subs	r7, #1
 8101a34:	ed44 7a04 	vstr	s15, [r4, #-16]
 8101a38:	ed15 7a03 	vldr	s14, [r5, #-12]
 8101a3c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8101a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a44:	f106 0610 	add.w	r6, r6, #16
 8101a48:	ed44 7a03 	vstr	s15, [r4, #-12]
 8101a4c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8101a50:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8101a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a58:	f105 0510 	add.w	r5, r5, #16
 8101a5c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8101a60:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8101a64:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8101a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a6c:	f104 0410 	add.w	r4, r4, #16
 8101a70:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8101a74:	d1d7      	bne.n	8101a26 <arm_mult_f32+0x16>
 8101a76:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8101a7a:	4420      	add	r0, r4
 8101a7c:	4421      	add	r1, r4
 8101a7e:	4422      	add	r2, r4
 8101a80:	f013 0303 	ands.w	r3, r3, #3
 8101a84:	d01b      	beq.n	8101abe <arm_mult_f32+0xae>
 8101a86:	edd1 7a00 	vldr	s15, [r1]
 8101a8a:	ed90 7a00 	vldr	s14, [r0]
 8101a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a92:	3b01      	subs	r3, #1
 8101a94:	edc2 7a00 	vstr	s15, [r2]
 8101a98:	d011      	beq.n	8101abe <arm_mult_f32+0xae>
 8101a9a:	edd0 7a01 	vldr	s15, [r0, #4]
 8101a9e:	ed91 7a01 	vldr	s14, [r1, #4]
 8101aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101aa6:	2b01      	cmp	r3, #1
 8101aa8:	edc2 7a01 	vstr	s15, [r2, #4]
 8101aac:	d007      	beq.n	8101abe <arm_mult_f32+0xae>
 8101aae:	edd0 7a02 	vldr	s15, [r0, #8]
 8101ab2:	ed91 7a02 	vldr	s14, [r1, #8]
 8101ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101aba:	edc2 7a02 	vstr	s15, [r2, #8]
 8101abe:	bcf0      	pop	{r4, r5, r6, r7}
 8101ac0:	4770      	bx	lr
 8101ac2:	bf00      	nop

08101ac4 <arm_add_f32>:
 8101ac4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8101ac8:	b4f0      	push	{r4, r5, r6, r7}
 8101aca:	d033      	beq.n	8101b34 <arm_add_f32+0x70>
 8101acc:	f100 0610 	add.w	r6, r0, #16
 8101ad0:	f101 0510 	add.w	r5, r1, #16
 8101ad4:	f102 0410 	add.w	r4, r2, #16
 8101ad8:	4667      	mov	r7, ip
 8101ada:	ed15 7a04 	vldr	s14, [r5, #-16]
 8101ade:	ed56 7a04 	vldr	s15, [r6, #-16]
 8101ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101ae6:	3f01      	subs	r7, #1
 8101ae8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8101aec:	ed15 7a03 	vldr	s14, [r5, #-12]
 8101af0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8101af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101af8:	f106 0610 	add.w	r6, r6, #16
 8101afc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8101b00:	ed15 7a02 	vldr	s14, [r5, #-8]
 8101b04:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8101b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101b0c:	f105 0510 	add.w	r5, r5, #16
 8101b10:	ed44 7a02 	vstr	s15, [r4, #-8]
 8101b14:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8101b18:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8101b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101b20:	f104 0410 	add.w	r4, r4, #16
 8101b24:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8101b28:	d1d7      	bne.n	8101ada <arm_add_f32+0x16>
 8101b2a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8101b2e:	4420      	add	r0, r4
 8101b30:	4421      	add	r1, r4
 8101b32:	4422      	add	r2, r4
 8101b34:	f013 0303 	ands.w	r3, r3, #3
 8101b38:	d01b      	beq.n	8101b72 <arm_add_f32+0xae>
 8101b3a:	edd1 7a00 	vldr	s15, [r1]
 8101b3e:	ed90 7a00 	vldr	s14, [r0]
 8101b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101b46:	3b01      	subs	r3, #1
 8101b48:	edc2 7a00 	vstr	s15, [r2]
 8101b4c:	d011      	beq.n	8101b72 <arm_add_f32+0xae>
 8101b4e:	edd0 7a01 	vldr	s15, [r0, #4]
 8101b52:	ed91 7a01 	vldr	s14, [r1, #4]
 8101b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101b5a:	2b01      	cmp	r3, #1
 8101b5c:	edc2 7a01 	vstr	s15, [r2, #4]
 8101b60:	d007      	beq.n	8101b72 <arm_add_f32+0xae>
 8101b62:	edd0 7a02 	vldr	s15, [r0, #8]
 8101b66:	ed91 7a02 	vldr	s14, [r1, #8]
 8101b6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8101b6e:	edc2 7a02 	vstr	s15, [r2, #8]
 8101b72:	bcf0      	pop	{r4, r5, r6, r7}
 8101b74:	4770      	bx	lr
 8101b76:	bf00      	nop

08101b78 <__libc_init_array>:
 8101b78:	b570      	push	{r4, r5, r6, lr}
 8101b7a:	4d0d      	ldr	r5, [pc, #52]	; (8101bb0 <__libc_init_array+0x38>)
 8101b7c:	4c0d      	ldr	r4, [pc, #52]	; (8101bb4 <__libc_init_array+0x3c>)
 8101b7e:	1b64      	subs	r4, r4, r5
 8101b80:	10a4      	asrs	r4, r4, #2
 8101b82:	2600      	movs	r6, #0
 8101b84:	42a6      	cmp	r6, r4
 8101b86:	d109      	bne.n	8101b9c <__libc_init_array+0x24>
 8101b88:	4d0b      	ldr	r5, [pc, #44]	; (8101bb8 <__libc_init_array+0x40>)
 8101b8a:	4c0c      	ldr	r4, [pc, #48]	; (8101bbc <__libc_init_array+0x44>)
 8101b8c:	f000 f820 	bl	8101bd0 <_init>
 8101b90:	1b64      	subs	r4, r4, r5
 8101b92:	10a4      	asrs	r4, r4, #2
 8101b94:	2600      	movs	r6, #0
 8101b96:	42a6      	cmp	r6, r4
 8101b98:	d105      	bne.n	8101ba6 <__libc_init_array+0x2e>
 8101b9a:	bd70      	pop	{r4, r5, r6, pc}
 8101b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8101ba0:	4798      	blx	r3
 8101ba2:	3601      	adds	r6, #1
 8101ba4:	e7ee      	b.n	8101b84 <__libc_init_array+0xc>
 8101ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8101baa:	4798      	blx	r3
 8101bac:	3601      	adds	r6, #1
 8101bae:	e7f2      	b.n	8101b96 <__libc_init_array+0x1e>
 8101bb0:	08101bf8 	.word	0x08101bf8
 8101bb4:	08101bf8 	.word	0x08101bf8
 8101bb8:	08101bf8 	.word	0x08101bf8
 8101bbc:	08101bfc 	.word	0x08101bfc

08101bc0 <memset>:
 8101bc0:	4402      	add	r2, r0
 8101bc2:	4603      	mov	r3, r0
 8101bc4:	4293      	cmp	r3, r2
 8101bc6:	d100      	bne.n	8101bca <memset+0xa>
 8101bc8:	4770      	bx	lr
 8101bca:	f803 1b01 	strb.w	r1, [r3], #1
 8101bce:	e7f9      	b.n	8101bc4 <memset+0x4>

08101bd0 <_init>:
 8101bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101bd2:	bf00      	nop
 8101bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101bd6:	bc08      	pop	{r3}
 8101bd8:	469e      	mov	lr, r3
 8101bda:	4770      	bx	lr

08101bdc <_fini>:
 8101bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101bde:	bf00      	nop
 8101be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101be2:	bc08      	pop	{r3}
 8101be4:	469e      	mov	lr, r3
 8101be6:	4770      	bx	lr
