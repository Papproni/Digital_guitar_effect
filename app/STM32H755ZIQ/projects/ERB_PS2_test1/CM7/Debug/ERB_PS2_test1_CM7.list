
ERB_PS2_test1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011504  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0801179c  0801179c  0002179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117b4  080117b4  00030380  2**0
                  CONTENTS
  4 .ARM          00000000  080117b4  080117b4  00030380  2**0
                  CONTENTS
  5 .preinit_array 00000000  080117b4  080117b4  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117b4  080117b4  000217b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117b8  080117b8  000217b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  24000000  080117bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a2c  24000380  08011b3c  00030380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000dac  08011b3c  00030dac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024208  00000000  00000000  000303ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f41  00000000  00000000  000545b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014e0d  00000000  00000000  000584f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  0006d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d0d9  00000000  00000000  0006d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002038b  00000000  00000000  000aa769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198906  00000000  00000000  000caaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  002633fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f0  00000000  00000000  002634c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000588  00000000  00000000  002666b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000380 	.word	0x24000380
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011784 	.word	0x08011784

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000384 	.word	0x24000384
 80002d4:	08011784 	.word	0x08011784

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 80002da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80002e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002e6:	691a      	ldr	r2, [r3, #16]
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <SystemInit+0xbc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	2b06      	cmp	r3, #6
 80002f8:	d806      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fa:	4a26      	ldr	r2, [pc, #152]	; (8000394 <SystemInit+0xbc>)
 80002fc:	6813      	ldr	r3, [r2, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	f042 0201 	orr.w	r2, r2, #1
 8000310:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	4a20      	ldr	r2, [pc, #128]	; (800039c <SystemInit+0xc4>)
 800031a:	400a      	ands	r2, r1
 800031c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <SystemInit+0xbc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f013 0f08 	tst.w	r3, #8
 8000326:	d006      	beq.n	8000336 <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <SystemInit+0xbc>)
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	f043 0307 	orr.w	r3, r3, #7
 8000334:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <SystemInit+0xc0>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800033c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800033e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000340:	4917      	ldr	r1, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	4917      	ldr	r1, [pc, #92]	; (80003a4 <SystemInit+0xcc>)
 8000346:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000348:	4917      	ldr	r1, [pc, #92]	; (80003a8 <SystemInit+0xd0>)
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000364:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8000368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <SystemInit+0xd4>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <SystemInit+0xd8>)
 8000376:	4013      	ands	r3, r2
 8000378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800037c:	d203      	bcs.n	8000386 <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <SystemInit+0xdc>)
 8000380:	2201      	movs	r2, #1
 8000382:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <SystemInit+0xe0>)
 8000388:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800038c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	02020200 	.word	0x02020200
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	01010280 	.word	0x01010280
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80003bc:	b410      	push	{r4}
  uint32_t common_system_clock;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80003be:	4b7a      	ldr	r3, [pc, #488]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80003c6:	2b18      	cmp	r3, #24
 80003c8:	f200 80e5 	bhi.w	8000596 <SystemCoreClockUpdate+0x1da>
 80003cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80003d0:	00e3001b 	.word	0x00e3001b
 80003d4:	00e300e3 	.word	0x00e300e3
 80003d8:	00e300e3 	.word	0x00e300e3
 80003dc:	00e300e3 	.word	0x00e300e3
 80003e0:	00e30019 	.word	0x00e30019
 80003e4:	00e300e3 	.word	0x00e300e3
 80003e8:	00e300e3 	.word	0x00e300e3
 80003ec:	00e300e3 	.word	0x00e300e3
 80003f0:	00e300ea 	.word	0x00e300ea
 80003f4:	00e300e3 	.word	0x00e300e3
 80003f8:	00e300e3 	.word	0x00e300e3
 80003fc:	00e300e3 	.word	0x00e300e3
 8000400:	0037      	.short	0x0037
 8000402:	4a6a      	ldr	r2, [pc, #424]	; (80005ac <SystemCoreClockUpdate+0x1f0>)
 8000404:	e005      	b.n	8000412 <SystemCoreClockUpdate+0x56>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000406:	4b68      	ldr	r3, [pc, #416]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800040e:	4a68      	ldr	r2, [pc, #416]	; (80005b0 <SystemCoreClockUpdate+0x1f4>)
 8000410:	40da      	lsrs	r2, r3
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
    break;
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8000412:	4865      	ldr	r0, [pc, #404]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000414:	6983      	ldr	r3, [r0, #24]
 8000416:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800041a:	4966      	ldr	r1, [pc, #408]	; (80005b4 <SystemCoreClockUpdate+0x1f8>)
 800041c:	5ccb      	ldrb	r3, [r1, r3]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 800041e:	40da      	lsrs	r2, r3

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000420:	6983      	ldr	r3, [r0, #24]
 8000422:	f003 030f 	and.w	r3, r3, #15
 8000426:	5ccb      	ldrb	r3, [r1, r3]
 8000428:	f003 031f 	and.w	r3, r3, #31
 800042c:	fa22 f303 	lsr.w	r3, r2, r3
 8000430:	4961      	ldr	r1, [pc, #388]	; (80005b8 <SystemCoreClockUpdate+0x1fc>)
 8000432:	600b      	str	r3, [r1, #0]

#if defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000434:	4b61      	ldr	r3, [pc, #388]	; (80005bc <SystemCoreClockUpdate+0x200>)
 8000436:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM4 */
}
 8000438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800043c:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800043e:	495a      	ldr	r1, [pc, #360]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000440:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000442:	f000 0003 	and.w	r0, r0, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000446:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000448:	f3c4 1205 	ubfx	r2, r4, #4, #6
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800044c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800044e:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000452:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000454:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8000458:	fb0c f303 	mul.w	r3, ip, r3
 800045c:	ee07 3a90 	vmov	s15, r3
 8000460:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (pllm != 0U)
 8000464:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8000468:	d0d3      	beq.n	8000412 <SystemCoreClockUpdate+0x56>
      switch (pllsource)
 800046a:	2801      	cmp	r0, #1
 800046c:	d059      	beq.n	8000522 <SystemCoreClockUpdate+0x166>
 800046e:	2802      	cmp	r0, #2
 8000470:	d074      	beq.n	800055c <SystemCoreClockUpdate+0x1a0>
 8000472:	b318      	cbz	r0, 80004bc <SystemCoreClockUpdate+0x100>
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000474:	484c      	ldr	r0, [pc, #304]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000476:	6801      	ldr	r1, [r0, #0]
 8000478:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800047c:	4b4c      	ldr	r3, [pc, #304]	; (80005b0 <SystemCoreClockUpdate+0x1f4>)
 800047e:	40cb      	lsrs	r3, r1
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000480:	ee07 3a10 	vmov	s14, r3
 8000484:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8000488:	ee07 2a10 	vmov	s14, r2
 800048c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8000490:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8000494:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800049a:	ee06 3a90 	vmov	s13, r3
 800049e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80004a2:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80005c0 <SystemCoreClockUpdate+0x204>
 80004a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80004aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80004ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80004b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80004b6:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80004ba:	e022      	b.n	8000502 <SystemCoreClockUpdate+0x146>
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 80004bc:	4608      	mov	r0, r1
 80004be:	6809      	ldr	r1, [r1, #0]
 80004c0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80004c4:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <SystemCoreClockUpdate+0x1f4>)
 80004c6:	40cb      	lsrs	r3, r1
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80004c8:	ee07 3a10 	vmov	s14, r3
 80004cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80004d0:	ee07 2a10 	vmov	s14, r2
 80004d4:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80004d8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80004dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80004e2:	ee06 3a90 	vmov	s13, r3
 80004e6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80004ea:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80005c0 <SystemCoreClockUpdate+0x204>
 80004ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80004f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80004f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80004fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80004fe:	ee27 7a27 	vmul.f32	s14, s14, s15
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800050a:	3301      	adds	r3, #1
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800050c:	ee07 3a90 	vmov	s15, r3
 8000510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000518:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800051c:	ee17 2a90 	vmov	r2, s15
 8000520:	e777      	b.n	8000412 <SystemCoreClockUpdate+0x56>
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000522:	ee07 2a10 	vmov	s14, r2
 8000526:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800052a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80005c4 <SystemCoreClockUpdate+0x208>
 800052e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800053a:	ee06 3a90 	vmov	s13, r3
 800053e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000542:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80005c0 <SystemCoreClockUpdate+0x204>
 8000546:	ee67 7a86 	vmul.f32	s15, s15, s12
 800054a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800054e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000556:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800055a:	e7d2      	b.n	8000502 <SystemCoreClockUpdate+0x146>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800055c:	ee07 2a10 	vmov	s14, r2
 8000560:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8000564:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80005c8 <SystemCoreClockUpdate+0x20c>
 8000568:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000574:	ee06 3a90 	vmov	s13, r3
 8000578:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800057c:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80005c0 <SystemCoreClockUpdate+0x204>
 8000580:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800058c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000590:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8000594:	e7b5      	b.n	8000502 <SystemCoreClockUpdate+0x146>
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <SystemCoreClockUpdate+0x1ec>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <SystemCoreClockUpdate+0x1f4>)
 80005a0:	40da      	lsrs	r2, r3
    break;
 80005a2:	e736      	b.n	8000412 <SystemCoreClockUpdate+0x56>
    common_system_clock = HSE_VALUE;
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <SystemCoreClockUpdate+0x210>)
 80005a6:	e734      	b.n	8000412 <SystemCoreClockUpdate+0x56>
 80005a8:	58024400 	.word	0x58024400
 80005ac:	003d0900 	.word	0x003d0900
 80005b0:	03d09000 	.word	0x03d09000
 80005b4:	0801179c 	.word	0x0801179c
 80005b8:	24000004 	.word	0x24000004
 80005bc:	24000000 	.word	0x24000000
 80005c0:	39000000 	.word	0x39000000
 80005c4:	4a742400 	.word	0x4a742400
 80005c8:	4af42400 	.word	0x4af42400
 80005cc:	007a1200 	.word	0x007a1200

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0x68>)
 80005d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005fc:	f002 0201 	and.w	r2, r2, #1
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000608:	f042 0204 	orr.w	r2, r2, #4
 800060c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000614:	f002 0204 	and.w	r2, r2, #4
 8000618:	9202      	str	r2, [sp, #8]
 800061a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000620:	f042 0202 	orr.w	r2, r2, #2
 8000624:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	f003 0302 	and.w	r3, r3, #2
 8000630:	9303      	str	r3, [sp, #12]
 8000632:	9b03      	ldr	r3, [sp, #12]

}
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr
 8000638:	58024400 	.word	0x58024400

0800063c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800063c:	b510      	push	{r4, lr}
 800063e:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000640:	2400      	movs	r4, #0
 8000642:	9400      	str	r4, [sp, #0]
 8000644:	9401      	str	r4, [sp, #4]
 8000646:	9402      	str	r4, [sp, #8]
 8000648:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800064a:	f004 f99f 	bl	800498c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800064e:	2301      	movs	r3, #1
 8000650:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000654:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000658:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800065a:	221f      	movs	r2, #31
 800065c:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000660:	2287      	movs	r2, #135	; 0x87
 8000662:	f88d 2009 	strb.w	r2, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000666:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800066a:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800066e:	f88d 300c 	strb.w	r3, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000672:	f88d 300d 	strb.w	r3, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000676:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800067a:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800067e:	4668      	mov	r0, sp
 8000680:	f004 f9a2 	bl	80049c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000684:	2004      	movs	r0, #4
 8000686:	f004 f98f 	bl	80049a8 <HAL_MPU_Enable>

}
 800068a:	b004      	add	sp, #16
 800068c:	bd10      	pop	{r4, pc}

0800068e <MX_DMA_Init>:
{
 800068e:	b500      	push	{lr}
 8000690:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA_Init+0x36>)
 8000694:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000698:	f042 0201 	orr.w	r2, r2, #1
 800069c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80006a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	4611      	mov	r1, r2
 80006b0:	200c      	movs	r0, #12
 80006b2:	f004 f8ef 	bl	8004894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006b6:	200c      	movs	r0, #12
 80006b8:	f004 f922 	bl	8004900 <HAL_NVIC_EnableIRQ>
}
 80006bc:	b003      	add	sp, #12
 80006be:	f85d fb04 	ldr.w	pc, [sp], #4
 80006c2:	bf00      	nop
 80006c4:	58024400 	.word	0x58024400

080006c8 <HAL_ADC_ConvHalfCpltCallback>:
	ADC_buffer_is_full=1;
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <HAL_ADC_ConvHalfCpltCallback+0x8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	4770      	bx	lr
 80006d0:	2400039c 	.word	0x2400039c

080006d4 <HAL_DACEx_ConvCpltCallbackCh2>:
	DAC_buffer_is_full=1;
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <HAL_DACEx_ConvCpltCallbackCh2+0x8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	4770      	bx	lr
 80006dc:	2400039d 	.word	0x2400039d

080006e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
	DAC_buffer_is_half_full=1;
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x8>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	4770      	bx	lr
 80006e8:	2400039e 	.word	0x2400039e

080006ec <subbandfilter_calculation>:
void subbandfilter_calculation(uint32_t input){
 80006ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006f0:	ee07 0a90 	vmov	s15, r0
  float32_t input_f32=(float32_t)input-2048;
 80006f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80007b4 <subbandfilter_calculation+0xc8>
 80006fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
  for(int i=0;i<numberofsubbands;i++){
 8000700:	2300      	movs	r3, #0
 8000702:	e012      	b.n	800072a <subbandfilter_calculation+0x3e>
			  subbandfilter_input[i]=input_f32;
 8000704:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <subbandfilter_calculation+0xcc>)
 8000706:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800070a:	edc2 7a00 	vstr	s15, [r2]
			  subbandfilter_dn2[i]=subbandfilter_dn1[i];
 800070e:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <subbandfilter_calculation+0xd0>)
 8000710:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000714:	6810      	ldr	r0, [r2, #0]
 8000716:	492a      	ldr	r1, [pc, #168]	; (80007c0 <subbandfilter_calculation+0xd4>)
 8000718:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800071c:	6008      	str	r0, [r1, #0]
			  subbandfilter_dn1[i]=subbandfilter_dn[i];
 800071e:	4929      	ldr	r1, [pc, #164]	; (80007c4 <subbandfilter_calculation+0xd8>)
 8000720:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000724:	6809      	ldr	r1, [r1, #0]
 8000726:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000728:	3301      	adds	r3, #1
 800072a:	2b2a      	cmp	r3, #42	; 0x2a
 800072c:	ddea      	ble.n	8000704 <subbandfilter_calculation+0x18>
  arm_mult_f32(subbandfilter_a1, subbandfilter_dn1, subbandfilter_A1, numberofsubbands);
 800072e:	4e26      	ldr	r6, [pc, #152]	; (80007c8 <subbandfilter_calculation+0xdc>)
 8000730:	4f22      	ldr	r7, [pc, #136]	; (80007bc <subbandfilter_calculation+0xd0>)
 8000732:	232b      	movs	r3, #43	; 0x2b
 8000734:	4632      	mov	r2, r6
 8000736:	4639      	mov	r1, r7
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <subbandfilter_calculation+0xe0>)
 800073a:	f010 fea3 	bl	8011484 <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, subbandfilter_dn2, subbandfilter_A2, numberofsubbands);
 800073e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80007f0 <subbandfilter_calculation+0x104>
 8000742:	4d1f      	ldr	r5, [pc, #124]	; (80007c0 <subbandfilter_calculation+0xd4>)
 8000744:	232b      	movs	r3, #43	; 0x2b
 8000746:	4642      	mov	r2, r8
 8000748:	4629      	mov	r1, r5
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <subbandfilter_calculation+0xe4>)
 800074c:	f010 fe9a 	bl	8011484 <arm_mult_f32>
  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_dn, numberofsubbands);
 8000750:	4c1c      	ldr	r4, [pc, #112]	; (80007c4 <subbandfilter_calculation+0xd8>)
 8000752:	232b      	movs	r3, #43	; 0x2b
 8000754:	4622      	mov	r2, r4
 8000756:	4641      	mov	r1, r8
 8000758:	4630      	mov	r0, r6
 800075a:	f010 ff49 	bl	80115f0 <arm_add_f32>
  arm_sub_f32(subbandfilter_input,subbandfilter_dn, subbandfilter_dn, numberofsubbands);
 800075e:	232b      	movs	r3, #43	; 0x2b
 8000760:	4622      	mov	r2, r4
 8000762:	4621      	mov	r1, r4
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <subbandfilter_calculation+0xcc>)
 8000766:	f010 fe33 	bl	80113d0 <arm_sub_f32>
  arm_mult_f32(subbandfilter_b1, subbandfilter_dn1, subbandfilter_B1, numberofsubbands);
 800076a:	4e1a      	ldr	r6, [pc, #104]	; (80007d4 <subbandfilter_calculation+0xe8>)
 800076c:	232b      	movs	r3, #43	; 0x2b
 800076e:	4632      	mov	r2, r6
 8000770:	4639      	mov	r1, r7
 8000772:	4819      	ldr	r0, [pc, #100]	; (80007d8 <subbandfilter_calculation+0xec>)
 8000774:	f010 fe86 	bl	8011484 <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, subbandfilter_dn2, subbandfilter_B2, numberofsubbands);
 8000778:	4f18      	ldr	r7, [pc, #96]	; (80007dc <subbandfilter_calculation+0xf0>)
 800077a:	232b      	movs	r3, #43	; 0x2b
 800077c:	463a      	mov	r2, r7
 800077e:	4629      	mov	r1, r5
 8000780:	4817      	ldr	r0, [pc, #92]	; (80007e0 <subbandfilter_calculation+0xf4>)
 8000782:	f010 fe7f 	bl	8011484 <arm_mult_f32>
  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_output, numberofsubbands);
 8000786:	4d17      	ldr	r5, [pc, #92]	; (80007e4 <subbandfilter_calculation+0xf8>)
 8000788:	232b      	movs	r3, #43	; 0x2b
 800078a:	462a      	mov	r2, r5
 800078c:	4639      	mov	r1, r7
 800078e:	4630      	mov	r0, r6
 8000790:	f010 ff2e 	bl	80115f0 <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, subbandfilter_dn, subbandfilter_B0, numberofsubbands);
 8000794:	4e14      	ldr	r6, [pc, #80]	; (80007e8 <subbandfilter_calculation+0xfc>)
 8000796:	232b      	movs	r3, #43	; 0x2b
 8000798:	4632      	mov	r2, r6
 800079a:	4621      	mov	r1, r4
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <subbandfilter_calculation+0x100>)
 800079e:	f010 fe71 	bl	8011484 <arm_mult_f32>
  arm_add_f32(subbandfilter_output, subbandfilter_B0, subbandfilter_output, numberofsubbands);
 80007a2:	232b      	movs	r3, #43	; 0x2b
 80007a4:	462a      	mov	r2, r5
 80007a6:	4631      	mov	r1, r6
 80007a8:	4628      	mov	r0, r5
 80007aa:	f010 ff21 	bl	80115f0 <arm_add_f32>
}
 80007ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007b2:	bf00      	nop
 80007b4:	45000000 	.word	0x45000000
 80007b8:	24000c50 	.word	0x24000c50
 80007bc:	24000af8 	.word	0x24000af8
 80007c0:	24000ba4 	.word	0x24000ba4
 80007c4:	24000a4c 	.word	0x24000a4c
 80007c8:	24000644 	.word	0x24000644
 80007cc:	240000c8 	.word	0x240000c8
 80007d0:	24000174 	.word	0x24000174
 80007d4:	24000848 	.word	0x24000848
 80007d8:	240009a0 	.word	0x240009a0
 80007dc:	240008f4 	.word	0x240008f4
 80007e0:	240002cc 	.word	0x240002cc
 80007e4:	24000cfc 	.word	0x24000cfc
 80007e8:	2400079c 	.word	0x2400079c
 80007ec:	24000220 	.word	0x24000220
 80007f0:	240006f0 	.word	0x240006f0

080007f4 <octave1up>:
void octave1up(){
 80007f4:	b538      	push	{r3, r4, r5, lr}
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 80007f6:	4d0a      	ldr	r5, [pc, #40]	; (8000820 <octave1up+0x2c>)
 80007f8:	222b      	movs	r2, #43	; 0x2b
 80007fa:	4629      	mov	r1, r5
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <octave1up+0x30>)
 80007fe:	f010 ff51 	bl	80116a4 <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8000802:	4c09      	ldr	r4, [pc, #36]	; (8000828 <octave1up+0x34>)
 8000804:	4623      	mov	r3, r4
 8000806:	222b      	movs	r2, #43	; 0x2b
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <octave1up+0x38>)
 800080a:	4628      	mov	r0, r5
 800080c:	f010 fe94 	bl	8011538 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up, &octave1_up_filtered, 1);
 8000810:	2301      	movs	r3, #1
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <octave1up+0x3c>)
 8000814:	4621      	mov	r1, r4
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <octave1up+0x40>)
 8000818:	f010 fc13 	bl	8011042 <arm_biquad_cascade_df2T_f32>
}
 800081c:	bd38      	pop	{r3, r4, r5, pc}
 800081e:	bf00      	nop
 8000820:	24000598 	.word	0x24000598
 8000824:	24000cfc 	.word	0x24000cfc
 8000828:	24000590 	.word	0x24000590
 800082c:	2400001c 	.word	0x2400001c
 8000830:	24000594 	.word	0x24000594
 8000834:	24000490 	.word	0x24000490

08000838 <HAL_ADC_ConvCpltCallback>:
{
 8000838:	b508      	push	{r3, lr}
	uint32_t value_from_ADC = HAL_ADC_GetValue(&hadc2);
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_ADC_ConvCpltCallback+0x28>)
 800083c:	f001 f880 	bl	8001940 <HAL_ADC_GetValue>
	subbandfilter_calculation(value_from_ADC);
 8000840:	f7ff ff54 	bl	80006ec <subbandfilter_calculation>
	octave1up();
 8000844:	f7ff ffd6 	bl	80007f4 <octave1up>
	uint32_t output_test_ac=(uint32_t)octave1_up_filtered*1;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_ADC_ConvCpltCallback+0x2c>)
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000852:	ee17 3a90 	vmov	r3, s15
	DAC1->DHR12R2 = (uint32_t)output_test_ac+2048;
 8000856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800085a:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_ADC_ConvCpltCallback+0x30>)
 800085c:	6153      	str	r3, [r2, #20]
}
 800085e:	bd08      	pop	{r3, pc}
 8000860:	240003a0 	.word	0x240003a0
 8000864:	24000594 	.word	0x24000594
 8000868:	40007400 	.word	0x40007400

0800086c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086e:	e7fe      	b.n	800086e <Error_Handler+0x2>

08000870 <MX_DAC1_Init>:
{
 8000870:	b500      	push	{lr}
 8000872:	b08b      	sub	sp, #44	; 0x2c
  DAC_ChannelConfTypeDef sConfig = {0};
 8000874:	2224      	movs	r2, #36	; 0x24
 8000876:	2100      	movs	r1, #0
 8000878:	a801      	add	r0, sp, #4
 800087a:	f010 ff7b 	bl	8011774 <memset>
  hdac1.Instance = DAC1;
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_DAC1_Init+0x44>)
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DAC1_Init+0x48>)
 8000882:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000884:	f004 f969 	bl	8004b5a <HAL_DAC_Init>
 8000888:	b978      	cbnz	r0, 80008aa <MX_DAC1_Init+0x3a>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	9301      	str	r3, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800088e:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000890:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000892:	2201      	movs	r2, #1
 8000894:	9204      	str	r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000896:	9305      	str	r3, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000898:	2210      	movs	r2, #16
 800089a:	a901      	add	r1, sp, #4
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_DAC1_Init+0x44>)
 800089e:	f004 fadd 	bl	8004e5c <HAL_DAC_ConfigChannel>
 80008a2:	b920      	cbnz	r0, 80008ae <MX_DAC1_Init+0x3e>
}
 80008a4:	b00b      	add	sp, #44	; 0x2c
 80008a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008aa:	f7ff ffdf 	bl	800086c <Error_Handler>
    Error_Handler();
 80008ae:	f7ff ffdd 	bl	800086c <Error_Handler>
 80008b2:	bf00      	nop
 80008b4:	24000404 	.word	0x24000404
 80008b8:	40007400 	.word	0x40007400

080008bc <MX_TIM5_Init>:
{
 80008bc:	b500      	push	{lr}
 80008be:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c0:	2300      	movs	r3, #0
 80008c2:	9304      	str	r3, [sp, #16]
 80008c4:	9305      	str	r3, [sp, #20]
 80008c6:	9306      	str	r3, [sp, #24]
 80008c8:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	9303      	str	r3, [sp, #12]
  htim5.Instance = TIM5;
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <MX_TIM5_Init+0x64>)
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <MX_TIM5_Init+0x68>)
 80008d4:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 80008d6:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 3333;
 80008da:	f640 5205 	movw	r2, #3333	; 0xd05
 80008de:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008e4:	f00b ff1c 	bl	800c720 <HAL_TIM_Base_Init>
 80008e8:	b998      	cbnz	r0, 8000912 <MX_TIM5_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008f0:	a904      	add	r1, sp, #16
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_TIM5_Init+0x64>)
 80008f4:	f00c fb5d 	bl	800cfb2 <HAL_TIM_ConfigClockSource>
 80008f8:	b968      	cbnz	r0, 8000916 <MX_TIM5_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008fa:	2320      	movs	r3, #32
 80008fc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000902:	a901      	add	r1, sp, #4
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM5_Init+0x64>)
 8000906:	f010 f9d9 	bl	8010cbc <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	b930      	cbnz	r0, 800091a <MX_TIM5_Init+0x5e>
}
 800090c:	b009      	add	sp, #36	; 0x24
 800090e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000912:	f7ff ffab 	bl	800086c <Error_Handler>
    Error_Handler();
 8000916:	f7ff ffa9 	bl	800086c <Error_Handler>
    Error_Handler();
 800091a:	f7ff ffa7 	bl	800086c <Error_Handler>
 800091e:	bf00      	nop
 8000920:	240004f8 	.word	0x240004f8
 8000924:	40000c00 	.word	0x40000c00

08000928 <MX_TIM8_Init>:
{
 8000928:	b500      	push	{lr}
 800092a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092c:	2300      	movs	r3, #0
 800092e:	9304      	str	r3, [sp, #16]
 8000930:	9305      	str	r3, [sp, #20]
 8000932:	9306      	str	r3, [sp, #24]
 8000934:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	9303      	str	r3, [sp, #12]
  htim8.Instance = TIM8;
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <MX_TIM8_Init+0x68>)
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_TIM8_Init+0x6c>)
 8000940:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 8000942:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 2083;
 8000946:	f640 0223 	movw	r2, #2083	; 0x823
 800094a:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 800094e:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000954:	f00b fee4 	bl	800c720 <HAL_TIM_Base_Init>
 8000958:	b9a0      	cbnz	r0, 8000984 <MX_TIM8_Init+0x5c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000960:	a904      	add	r1, sp, #16
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_TIM8_Init+0x68>)
 8000964:	f00c fb25 	bl	800cfb2 <HAL_TIM_ConfigClockSource>
 8000968:	b970      	cbnz	r0, 8000988 <MX_TIM8_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096a:	2320      	movs	r3, #32
 800096c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000974:	a901      	add	r1, sp, #4
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM8_Init+0x68>)
 8000978:	f010 f9a0 	bl	8010cbc <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	b930      	cbnz	r0, 800098c <MX_TIM8_Init+0x64>
}
 800097e:	b009      	add	sp, #36	; 0x24
 8000980:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000984:	f7ff ff72 	bl	800086c <Error_Handler>
    Error_Handler();
 8000988:	f7ff ff70 	bl	800086c <Error_Handler>
    Error_Handler();
 800098c:	f7ff ff6e 	bl	800086c <Error_Handler>
 8000990:	24000544 	.word	0x24000544
 8000994:	40010400 	.word	0x40010400

08000998 <MX_ADC2_Init>:
{
 8000998:	b500      	push	{lr}
 800099a:	b089      	sub	sp, #36	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 800099c:	2300      	movs	r3, #0
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	9303      	str	r3, [sp, #12]
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9305      	str	r3, [sp, #20]
 80009a8:	9306      	str	r3, [sp, #24]
 80009aa:	9307      	str	r3, [sp, #28]
  hadc2.Instance = ADC2;
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_ADC2_Init+0x84>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_ADC2_Init+0x88>)
 80009b0:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80009b2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009b6:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009b8:	2208      	movs	r2, #8
 80009ba:	6082      	str	r2, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009bc:	60c3      	str	r3, [r0, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009be:	2204      	movs	r2, #4
 80009c0:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009c2:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009c4:	7543      	strb	r3, [r0, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009c6:	2201      	movs	r2, #1
 80009c8:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80009cc:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80009d0:	6242      	str	r2, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d6:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009da:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009dc:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009de:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009e2:	f002 fb69 	bl	80030b8 <HAL_ADC_Init>
 80009e6:	b9a8      	cbnz	r0, 8000a14 <MX_ADC2_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_4;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_ADC2_Init+0x8c>)
 80009ea:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ec:	2306      	movs	r3, #6
 80009ee:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80009f0:	2304      	movs	r3, #4
 80009f2:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80009f8:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a00:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a04:	a901      	add	r1, sp, #4
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC2_Init+0x84>)
 8000a08:	f001 f963 	bl	8001cd2 <HAL_ADC_ConfigChannel>
 8000a0c:	b920      	cbnz	r0, 8000a18 <MX_ADC2_Init+0x80>
}
 8000a0e:	b009      	add	sp, #36	; 0x24
 8000a10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a14:	f7ff ff2a 	bl	800086c <Error_Handler>
    Error_Handler();
 8000a18:	f7ff ff28 	bl	800086c <Error_Handler>
 8000a1c:	240003a0 	.word	0x240003a0
 8000a20:	40022100 	.word	0x40022100
 8000a24:	10c00010 	.word	0x10c00010

08000a28 <MX_OPAMP1_Init>:
{
 8000a28:	b508      	push	{r3, lr}
  hopamp1.Instance = OPAMP1;
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_OPAMP1_Init+0x20>)
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_OPAMP1_Init+0x24>)
 8000a2e:	6003      	str	r3, [r0, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000a30:	2360      	movs	r3, #96	; 0x60
 8000a32:	6083      	str	r3, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	6103      	str	r3, [r0, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000a38:	6043      	str	r3, [r0, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000a3a:	61c3      	str	r3, [r0, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000a3c:	f006 ff03 	bl	8007846 <HAL_OPAMP_Init>
 8000a40:	b900      	cbnz	r0, 8000a44 <MX_OPAMP1_Init+0x1c>
}
 8000a42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a44:	f7ff ff12 	bl	800086c <Error_Handler>
 8000a48:	240004c4 	.word	0x240004c4
 8000a4c:	40009000 	.word	0x40009000

08000a50 <SystemClock_Config>:
{
 8000a50:	b500      	push	{lr}
 8000a52:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a54:	224c      	movs	r2, #76	; 0x4c
 8000a56:	2100      	movs	r1, #0
 8000a58:	a809      	add	r0, sp, #36	; 0x24
 8000a5a:	f010 fe8b 	bl	8011774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2100      	movs	r1, #0
 8000a62:	a801      	add	r0, sp, #4
 8000a64:	f010 fe86 	bl	8011774 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a68:	2004      	movs	r0, #4
 8000a6a:	f007 f9d7 	bl	8007e1c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <SystemClock_Config+0xc8>)
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	f022 0201 	bic.w	r2, r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	699a      	ldr	r2, [r3, #24]
 8000a88:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000a8c:	619a      	str	r2, [r3, #24]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000aa0:	d0fa      	beq.n	8000a98 <SystemClock_Config+0x48>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ac4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ac8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aca:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000acc:	2105      	movs	r1, #5
 8000ace:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ad2:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	a809      	add	r0, sp, #36	; 0x24
 8000adc:	f007 fe62 	bl	80087a4 <HAL_RCC_OscConfig>
 8000ae0:	b9b0      	cbnz	r0, 8000b10 <SystemClock_Config+0xc0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	233f      	movs	r3, #63	; 0x3f
 8000ae4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aee:	2308      	movs	r3, #8
 8000af0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afc:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000afe:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b00:	2102      	movs	r1, #2
 8000b02:	a801      	add	r0, sp, #4
 8000b04:	f008 fb04 	bl	8009110 <HAL_RCC_ClockConfig>
 8000b08:	b920      	cbnz	r0, 8000b14 <SystemClock_Config+0xc4>
}
 8000b0a:	b01d      	add	sp, #116	; 0x74
 8000b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b10:	f7ff feac 	bl	800086c <Error_Handler>
    Error_Handler();
 8000b14:	f7ff feaa 	bl	800086c <Error_Handler>
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	58024400 	.word	0x58024400

08000b24 <main>:
{
 8000b24:	b510      	push	{r4, lr}
 8000b26:	b082      	sub	sp, #8
  MPU_Config();
 8000b28:	f7ff fd88 	bl	800063c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b2c:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <main+0x154>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b34:	d113      	bne.n	8000b5e <main+0x3a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b3a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b3e:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <main+0x154>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b54:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b5a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b5e:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <main+0x154>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b66:	d127      	bne.n	8000bb8 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b68:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <main+0x154>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b70:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b74:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b78:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000b7c:	e000      	b.n	8000b80 <main+0x5c>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000b7e:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b80:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b84:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b88:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000b8c:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000b90:	4939      	ldr	r1, [pc, #228]	; (8000c78 <main+0x154>)
 8000b92:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000b96:	4613      	mov	r3, r2
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f2      	bne.n	8000b84 <main+0x60>
    } while(sets-- != 0U);
 8000b9e:	1e43      	subs	r3, r0, #1
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d1ec      	bne.n	8000b7e <main+0x5a>
 8000ba4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ba8:	694b      	ldr	r3, [r1, #20]
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	614b      	str	r3, [r1, #20]
 8000bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb4:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bbc:	e000      	b.n	8000bc0 <main+0x9c>
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <main+0x158>)
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000bc8:	d003      	beq.n	8000bd2 <main+0xae>
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dcf6      	bgt.n	8000bbe <main+0x9a>
 8000bd0:	4613      	mov	r3, r2
  if ( timeout < 0 )
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db1a      	blt.n	8000c0c <main+0xe8>
  HAL_Init();
 8000bd6:	f000 fa83 	bl	80010e0 <HAL_Init>
  SystemClock_Config();
 8000bda:	f7ff ff39 	bl	8000a50 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <main+0x158>)
 8000be0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000be4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000be8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f006 fdc3 	bl	8007784 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4608      	mov	r0, r1
 8000c02:	f006 fddb 	bl	80077bc <HAL_HSEM_Release>
timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c0a:	e002      	b.n	8000c12 <main+0xee>
  Error_Handler();
 8000c0c:	f7ff fe2e 	bl	800086c <Error_Handler>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	4613      	mov	r3, r2
 8000c12:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <main+0x158>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000c1a:	d103      	bne.n	8000c24 <main+0x100>
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	dcf6      	bgt.n	8000c10 <main+0xec>
 8000c22:	4613      	mov	r3, r2
if ( timeout < 0 )
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db24      	blt.n	8000c72 <main+0x14e>
  MX_GPIO_Init();
 8000c28:	f7ff fcd2 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff fd2f 	bl	800068e <MX_DMA_Init>
  MX_DAC1_Init();
 8000c30:	f7ff fe1e 	bl	8000870 <MX_DAC1_Init>
  MX_TIM5_Init();
 8000c34:	f7ff fe42 	bl	80008bc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c38:	f7ff fe76 	bl	8000928 <MX_TIM8_Init>
  MX_ADC2_Init();
 8000c3c:	f7ff feac 	bl	8000998 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 8000c40:	f7ff fef2 	bl	8000a28 <MX_OPAMP1_Init>
	HAL_OPAMP_Start(&hopamp1);
 8000c44:	480e      	ldr	r0, [pc, #56]	; (8000c80 <main+0x15c>)
 8000c46:	f006 fe97 	bl	8007978 <HAL_OPAMP_Start>
	HAL_TIM_Base_Start(&htim8);
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <main+0x160>)
 8000c4c:	f00a fe1f 	bl	800b88e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <main+0x164>)
 8000c52:	f00a fe1c 	bl	800b88e <HAL_TIM_Base_Start>
	 HAL_ADC_Start_IT(&hadc2);
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <main+0x168>)
 8000c58:	f001 fe4c 	bl	80028f4 <HAL_ADC_Start_IT>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000c5c:	2110      	movs	r1, #16
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <main+0x16c>)
 8000c60:	f003 ff9c 	bl	8004b9c <HAL_DAC_Start>
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <main+0x170>)
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <main+0x174>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <main+0x178>)
 8000c6c:	f010 fba4 	bl	80113b8 <arm_biquad_cascade_df2T_init_f32>
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x14c>
Error_Handler();
 8000c72:	f7ff fdfb 	bl	800086c <Error_Handler>
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	240004c4 	.word	0x240004c4
 8000c84:	24000544 	.word	0x24000544
 8000c88:	240004f8 	.word	0x240004f8
 8000c8c:	240003a0 	.word	0x240003a0
 8000c90:	24000404 	.word	0x24000404
 8000c94:	2400049c 	.word	0x2400049c
 8000c98:	24000008 	.word	0x24000008
 8000c9c:	24000490 	.word	0x24000490

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_MspInit+0x20>)
 8000ca4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ca8:	f042 0202 	orr.w	r2, r2, #2
 8000cac:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	b002      	add	sp, #8
 8000cbe:	4770      	bx	lr
 8000cc0:	58024400 	.word	0x58024400

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	b0b2      	sub	sp, #200	; 0xc8
 8000cc8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cca:	22c0      	movs	r2, #192	; 0xc0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	a802      	add	r0, sp, #8
 8000cd0:	f010 fd50 	bl	8011774 <memset>
  if(hadc->Instance==ADC2)
 8000cd4:	6822      	ldr	r2, [r4, #0]
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_ADC_MspInit+0x7c>)
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cdc:	b032      	add	sp, #200	; 0xc8
 8000cde:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000cee:	2350      	movs	r3, #80	; 0x50
 8000cf0:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cfa:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d00:	2320      	movs	r3, #32
 8000d02:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d04:	a802      	add	r0, sp, #8
 8000d06:	f008 fd85 	bl	8009814 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	b9a8      	cbnz	r0, 8000d38 <HAL_ADC_MspInit+0x74>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000d0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	4611      	mov	r1, r2
 8000d2a:	2012      	movs	r0, #18
 8000d2c:	f003 fdb2 	bl	8004894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d30:	2012      	movs	r0, #18
 8000d32:	f003 fde5 	bl	8004900 <HAL_NVIC_EnableIRQ>
}
 8000d36:	e7d1      	b.n	8000cdc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000d38:	f7ff fd98 	bl	800086c <Error_Handler>
 8000d3c:	e7e6      	b.n	8000d0c <HAL_ADC_MspInit+0x48>
 8000d3e:	bf00      	nop
 8000d40:	40022100 	.word	0x40022100
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000d48:	b508      	push	{r3, lr}
  if(hadc->Instance==ADC2)
 8000d4a:	6802      	ldr	r2, [r0, #0]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_ADC_MspDeInit+0x24>)
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d000      	beq.n	8000d54 <HAL_ADC_MspDeInit+0xc>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8000d52:	bd08      	pop	{r3, pc}
    __HAL_RCC_ADC12_CLK_DISABLE();
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_ADC_MspDeInit+0x28>)
 8000d56:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 8000d5a:	f023 0320 	bic.w	r3, r3, #32
 8000d5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000d62:	2012      	movs	r0, #18
 8000d64:	f003 fdda 	bl	800491c <HAL_NVIC_DisableIRQ>
}
 8000d68:	e7f3      	b.n	8000d52 <HAL_ADC_MspDeInit+0xa>
 8000d6a:	bf00      	nop
 8000d6c:	40022100 	.word	0x40022100
 8000d70:	58024400 	.word	0x58024400

08000d74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d74:	b510      	push	{r4, lr}
 8000d76:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9303      	str	r3, [sp, #12]
 8000d7c:	9304      	str	r3, [sp, #16]
 8000d7e:	9305      	str	r3, [sp, #20]
 8000d80:	9306      	str	r3, [sp, #24]
 8000d82:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 8000d84:	6802      	ldr	r2, [r0, #0]
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_DAC_MspInit+0xa4>)
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d001      	beq.n	8000d90 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d8c:	b008      	add	sp, #32
 8000d8e:	bd10      	pop	{r4, pc}
 8000d90:	4604      	mov	r4, r0
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_DAC_MspInit+0xa8>)
 8000d94:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000d98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d9c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000da0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000da4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	a903      	add	r1, sp, #12
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <HAL_DAC_MspInit+0xac>)
 8000dd0:	f006 fad0 	bl	8007374 <HAL_GPIO_Init>
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <HAL_DAC_MspInit+0xb0>)
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_DAC_MspInit+0xb4>)
 8000dd8:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000dda:	2344      	movs	r3, #68	; 0x44
 8000ddc:	6043      	str	r3, [r0, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dde:	2340      	movs	r3, #64	; 0x40
 8000de0:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60c3      	str	r3, [r0, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dea:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df0:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df6:	6182      	str	r2, [r0, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8000df8:	61c3      	str	r3, [r0, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dfe:	6202      	str	r2, [r0, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e00:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000e02:	f004 fcff 	bl	8005804 <HAL_DMA_Init>
 8000e06:	b918      	cbnz	r0, 8000e10 <HAL_DAC_MspInit+0x9c>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_DAC_MspInit+0xb0>)
 8000e0a:	60e3      	str	r3, [r4, #12]
 8000e0c:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000e0e:	e7bd      	b.n	8000d8c <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8000e10:	f7ff fd2c 	bl	800086c <Error_Handler>
 8000e14:	e7f8      	b.n	8000e08 <HAL_DAC_MspInit+0x94>
 8000e16:	bf00      	nop
 8000e18:	40007400 	.word	0x40007400
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	24000418 	.word	0x24000418
 8000e28:	40020028 	.word	0x40020028

08000e2c <HAL_DAC_MspDeInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 8000e2c:	6802      	ldr	r2, [r0, #0]
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_DAC_MspDeInit+0x2c>)
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d000      	beq.n	8000e36 <HAL_DAC_MspDeInit+0xa>
 8000e34:	4770      	bx	lr
{
 8000e36:	b510      	push	{r4, lr}
 8000e38:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC12_CLK_DISABLE();
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_DAC_MspDeInit+0x30>)
 8000e3c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000e40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_DAC_MspDeInit+0x34>)
 8000e4c:	f006 fba2 	bl	8007594 <HAL_GPIO_DeInit>

    /* DAC1 DMA DeInit */
    HAL_DMA_DeInit(hdac->DMA_Handle2);
 8000e50:	68e0      	ldr	r0, [r4, #12]
 8000e52:	f004 fea9 	bl	8005ba8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 8000e56:	bd10      	pop	{r4, pc}
 8000e58:	40007400 	.word	0x40007400
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020000 	.word	0x58020000

08000e64 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000e64:	b510      	push	{r4, lr}
 8000e66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9303      	str	r3, [sp, #12]
 8000e6c:	9304      	str	r3, [sp, #16]
 8000e6e:	9305      	str	r3, [sp, #20]
 8000e70:	9306      	str	r3, [sp, #24]
 8000e72:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 8000e74:	6802      	ldr	r2, [r0, #0]
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_OPAMP_MspInit+0x8c>)
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d001      	beq.n	8000e80 <HAL_OPAMP_MspInit+0x1c>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000e7c:	b008      	add	sp, #32
 8000e7e:	bd10      	pop	{r4, pc}
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_OPAMP_MspInit+0x90>)
 8000e82:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000e86:	f042 0210 	orr.w	r2, r2, #16
 8000e8a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000e8e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000e92:	f002 0210 	and.w	r2, r2, #16
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e9e:	f042 0204 	orr.w	r2, r2, #4
 8000ea2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ea6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eaa:	f002 0204 	and.w	r2, r2, #4
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb6:	f042 0202 	orr.w	r2, r2, #2
 8000eba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2403      	movs	r4, #3
 8000ed0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	a903      	add	r1, sp, #12
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <HAL_OPAMP_MspInit+0x94>)
 8000ed6:	f006 fa4d 	bl	8007374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eda:	2301      	movs	r3, #1
 8000edc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	a903      	add	r1, sp, #12
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_OPAMP_MspInit+0x98>)
 8000ee8:	f006 fa44 	bl	8007374 <HAL_GPIO_Init>
}
 8000eec:	e7c6      	b.n	8000e7c <HAL_OPAMP_MspInit+0x18>
 8000eee:	bf00      	nop
 8000ef0:	40009000 	.word	0x40009000
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020800 	.word	0x58020800
 8000efc:	58020400 	.word	0x58020400

08000f00 <HAL_OPAMP_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspDeInit(OPAMP_HandleTypeDef* hopamp)
{
 8000f00:	b508      	push	{r3, lr}
  if(hopamp->Instance==OPAMP1)
 8000f02:	6802      	ldr	r2, [r0, #0]
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_OPAMP_MspDeInit+0x2c>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d000      	beq.n	8000f0c <HAL_OPAMP_MspDeInit+0xc>
  /* USER CODE BEGIN OPAMP1_MspDeInit 1 */

  /* USER CODE END OPAMP1_MspDeInit 1 */
  }

}
 8000f0a:	bd08      	pop	{r3, pc}
    __HAL_RCC_OPAMP_CLK_DISABLE();
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_OPAMP_MspDeInit+0x30>)
 8000f0e:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
 8000f12:	f023 0310 	bic.w	r3, r3, #16
 8000f16:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_OPAMP_MspDeInit+0x34>)
 8000f1e:	f006 fb39 	bl	8007594 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
 8000f22:	2101      	movs	r1, #1
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <HAL_OPAMP_MspDeInit+0x38>)
 8000f26:	f006 fb35 	bl	8007594 <HAL_GPIO_DeInit>
}
 8000f2a:	e7ee      	b.n	8000f0a <HAL_OPAMP_MspDeInit+0xa>
 8000f2c:	40009000 	.word	0x40009000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020800 	.word	0x58020800
 8000f38:	58020400 	.word	0x58020400

08000f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM5)
 8000f3e:	6803      	ldr	r3, [r0, #0]
 8000f40:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_TIM_Base_MspInit+0x4c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d004      	beq.n	8000f50 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_Base_MspInit+0x50>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00f      	beq.n	8000f6c <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f4c:	b002      	add	sp, #8
 8000f4e:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_TIM_Base_MspInit+0x54>)
 8000f52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000f56:	f042 0208 	orr.w	r2, r2, #8
 8000f5a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	9b00      	ldr	r3, [sp, #0]
 8000f6a:	e7ef      	b.n	8000f4c <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_TIM_Base_MspInit+0x54>)
 8000f6e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000f72:	f042 0202 	orr.w	r2, r2, #2
 8000f76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	9b01      	ldr	r3, [sp, #4]
}
 8000f86:	e7e1      	b.n	8000f4c <HAL_TIM_Base_MspInit+0x10>
 8000f88:	40000c00 	.word	0x40000c00
 8000f8c:	40010400 	.word	0x40010400
 8000f90:	58024400 	.word	0x58024400

08000f94 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM5)
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_TIM_Base_MspDeInit+0x30>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM5_CLK_DISABLE();
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspDeInit+0x34>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d008      	beq.n	8000fb4 <HAL_TIM_Base_MspDeInit+0x20>
  /* USER CODE BEGIN TIM8_MspDeInit 1 */

  /* USER CODE END TIM8_MspDeInit 1 */
  }

}
 8000fa2:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_DISABLE();
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspDeInit+0x38>)
 8000fa6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8000faa:	f023 0308 	bic.w	r3, r3, #8
 8000fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fb2:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_DISABLE();
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <HAL_TIM_Base_MspDeInit+0x38>)
 8000fb6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8000fba:	f023 0302 	bic.w	r3, r3, #2
 8000fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8000fc2:	e7ee      	b.n	8000fa2 <HAL_TIM_Base_MspDeInit+0xe>
 8000fc4:	40000c00 	.word	0x40000c00
 8000fc8:	40010400 	.word	0x40010400
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler>

08000fd2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler>

08000fd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler>

08000fd6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler>

08000fd8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler>

08000fda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f8ab 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bd08      	pop	{r3, pc}

08000fe8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000fea:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA1_Stream1_IRQHandler+0xc>)
 8000fec:	f005 fdb6 	bl	8006b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ff0:	bd08      	pop	{r3, pc}
 8000ff2:	bf00      	nop
 8000ff4:	24000418 	.word	0x24000418

08000ff8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000ffa:	4802      	ldr	r0, [pc, #8]	; (8001004 <ADC_IRQHandler+0xc>)
 8000ffc:	f000 fcac 	bl	8001958 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001000:	bd08      	pop	{r3, pc}
 8001002:	bf00      	nop
 8001004:	240003a0 	.word	0x240003a0
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001008:	4770      	bx	lr

0800100a <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800100a:	4770      	bx	lr

0800100c <HAL_DeInit>:
{
 800100c:	b510      	push	{r4, lr}
  __HAL_RCC_AHB3_FORCE_RESET();
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_DeInit+0x68>)
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_DeInit+0x6c>)
 8001012:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001014:	2400      	movs	r4, #0
 8001016:	67dc      	str	r4, [r3, #124]	; 0x7c
  __HAL_RCC_AHB1_FORCE_RESET();
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <HAL_DeInit+0x70>)
 800101a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 800101e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
 8001022:	f240 2271 	movw	r2, #625	; 0x271
 8001026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 800102a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_DeInit+0x74>)
 8001030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8001034:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  __HAL_RCC_APB3_FORCE_RESET();
 8001038:	2218      	movs	r2, #24
 800103a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 800103e:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_DeInit+0x78>)
 8001044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001048:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
 800104c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8001054:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
   __HAL_RCC_APB2_FORCE_RESET();
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <HAL_DeInit+0x7c>)
 800105a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 800105e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  __HAL_RCC_APB4_FORCE_RESET();
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_DeInit+0x80>)
 8001064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8001068:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
  HAL_MspDeInit();
 800106c:	f7ff ffcd 	bl	800100a <HAL_MspDeInit>
}
 8001070:	4620      	mov	r0, r4
 8001072:	bd10      	pop	{r4, pc}
 8001074:	58024400 	.word	0x58024400
 8001078:	00015031 	.word	0x00015031
 800107c:	0a00c023 	.word	0x0a00c023
 8001080:	032807ff 	.word	0x032807ff
 8001084:	e8ffc3ff 	.word	0xe8ffc3ff
 8001088:	31d73033 	.word	0x31d73033
 800108c:	0020deaa 	.word	0x0020deaa

08001090 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_InitTick+0x44>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b90b      	cbnz	r3, 800109a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001098:	4770      	bx	lr
{
 800109a:	b510      	push	{r4, lr}
 800109c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800109e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_InitTick+0x48>)
 80010a8:	6810      	ldr	r0, [r2, #0]
 80010aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ae:	f003 fc59 	bl	8004964 <HAL_SYSTICK_Config>
 80010b2:	b968      	cbnz	r0, 80010d0 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	2c0f      	cmp	r4, #15
 80010b6:	d901      	bls.n	80010bc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e00a      	b.n	80010d2 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	4621      	mov	r1, r4
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f003 fbe6 	bl	8004894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_InitTick+0x4c>)
 80010ca:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80010cc:	2000      	movs	r0, #0
 80010ce:	e000      	b.n	80010d2 <HAL_InitTick+0x42>
      return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
}
 80010d2:	bd10      	pop	{r4, pc}
 80010d4:	24000378 	.word	0x24000378
 80010d8:	24000000 	.word	0x24000000
 80010dc:	2400037c 	.word	0x2400037c

080010e0 <HAL_Init>:
{
 80010e0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f003 fbc4 	bl	8004870 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010e8:	f007 ff18 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 80010ec:	490f      	ldr	r1, [pc, #60]	; (800112c <HAL_Init+0x4c>)
 80010ee:	698b      	ldr	r3, [r1, #24]
 80010f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_Init+0x50>)
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010fe:	698b      	ldr	r3, [r1, #24]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa20 f303 	lsr.w	r3, r0, r3
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_Init+0x54>)
 8001110:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_Init+0x58>)
 8001114:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ffba 	bl	8001090 <HAL_InitTick>
 800111c:	b110      	cbz	r0, 8001124 <HAL_Init+0x44>
    return HAL_ERROR;
 800111e:	2401      	movs	r4, #1
}
 8001120:	4620      	mov	r0, r4
 8001122:	bd10      	pop	{r4, pc}
 8001124:	4604      	mov	r4, r0
  HAL_MspInit();
 8001126:	f7ff fdbb 	bl	8000ca0 <HAL_MspInit>
  return HAL_OK;
 800112a:	e7f9      	b.n	8001120 <HAL_Init+0x40>
 800112c:	58024400 	.word	0x58024400
 8001130:	0801179c 	.word	0x0801179c
 8001134:	24000004 	.word	0x24000004
 8001138:	24000000 	.word	0x24000000

0800113c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_IncTick+0x10>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <HAL_IncTick+0x14>)
 8001142:	6811      	ldr	r1, [r2, #0]
 8001144:	440b      	add	r3, r1
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	24000378 	.word	0x24000378
 8001150:	24000da8 	.word	0x24000da8

08001154 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <HAL_GetTick+0x8>)
 8001156:	6818      	ldr	r0, [r3, #0]
}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	24000da8 	.word	0x24000da8

08001160 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001160:	4b01      	ldr	r3, [pc, #4]	; (8001168 <HAL_GetTickPrio+0x8>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2400037c 	.word	0x2400037c

0800116c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800116c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_SetTickFreq+0x24>)
 8001170:	781c      	ldrb	r4, [r3, #0]
 8001172:	4284      	cmp	r4, r0
 8001174:	d101      	bne.n	800117a <HAL_SetTickFreq+0xe>
  HAL_StatusTypeDef status  = HAL_OK;
 8001176:	2000      	movs	r0, #0
      uwTickFreq = prevTickFreq;
    }
  }

  return status;
}
 8001178:	bd10      	pop	{r4, pc}
    uwTickFreq = Freq;
 800117a:	7018      	strb	r0, [r3, #0]
    status = HAL_InitTick(uwTickPrio);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_SetTickFreq+0x28>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f7ff ff86 	bl	8001090 <HAL_InitTick>
    if (status != HAL_OK)
 8001184:	2800      	cmp	r0, #0
 8001186:	d0f7      	beq.n	8001178 <HAL_SetTickFreq+0xc>
      uwTickFreq = prevTickFreq;
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <HAL_SetTickFreq+0x24>)
 800118a:	701c      	strb	r4, [r3, #0]
 800118c:	e7f4      	b.n	8001178 <HAL_SetTickFreq+0xc>
 800118e:	bf00      	nop
 8001190:	24000378 	.word	0x24000378
 8001194:	2400037c 	.word	0x2400037c

08001198 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8001198:	4b01      	ldr	r3, [pc, #4]	; (80011a0 <HAL_GetTickFreq+0x8>)
 800119a:	7818      	ldrb	r0, [r3, #0]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	24000378 	.word	0x24000378

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffd4 	bl	8001154 <HAL_GetTick>
 80011ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80011b2:	d002      	beq.n	80011ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_Delay+0x24>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ba:	f7ff ffcb 	bl	8001154 <HAL_GetTick>
 80011be:	1b40      	subs	r0, r0, r5
 80011c0:	42a0      	cmp	r0, r4
 80011c2:	d3fa      	bcc.n	80011ba <HAL_Delay+0x16>
  {
  }
}
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop
 80011c8:	24000378 	.word	0x24000378

080011cc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80011cc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011d0:	6913      	ldr	r3, [r2, #16]
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6113      	str	r3, [r2, #16]
}
 80011d8:	4770      	bx	lr

080011da <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80011da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011de:	6913      	ldr	r3, [r2, #16]
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6113      	str	r3, [r2, #16]
}
 80011e6:	4770      	bx	lr

080011e8 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 80011e8:	4800      	ldr	r0, [pc, #0]	; (80011ec <HAL_GetHalVersion+0x4>)
 80011ea:	4770      	bx	lr
 80011ec:	010b0100 	.word	0x010b0100

080011f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <HAL_GetREVID+0x8>)
 80011f2:	6818      	ldr	r0, [r3, #0]
}
 80011f4:	0c00      	lsrs	r0, r0, #16
 80011f6:	4770      	bx	lr
 80011f8:	5c001000 	.word	0x5c001000

080011fc <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_GetDEVID+0xc>)
 80011fe:	6818      	ldr	r0, [r3, #0]
}
 8001200:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	5c001000 	.word	0x5c001000

0800120c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <HAL_GetUIDw0+0x8>)
 800120e:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
 8001212:	4770      	bx	lr
 8001214:	1ff1e000 	.word	0x1ff1e000

08001218 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8001218:	4b01      	ldr	r3, [pc, #4]	; (8001220 <HAL_GetUIDw1+0x8>)
 800121a:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
 800121e:	4770      	bx	lr
 8001220:	1ff1e000 	.word	0x1ff1e000

08001224 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetUIDw2+0x8>)
 8001226:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 800122a:	4770      	bx	lr
 800122c:	1ff1e000 	.word	0x1ff1e000

08001230 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001238:	4303      	orrs	r3, r0
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	58003c00 	.word	0x58003c00

08001244 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	4303      	orrs	r3, r0
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	58003c00 	.word	0x58003c00

08001258 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x10>)
 800125a:	6853      	ldr	r3, [r2, #4]
 800125c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001260:	4303      	orrs	r3, r0
 8001262:	6053      	str	r3, [r2, #4]
}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	58003c00 	.word	0x58003c00

0800126c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800126c:	b510      	push	{r4, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001278:	f7ff ff6c 	bl	8001154 <HAL_GetTick>
 800127c:	4604      	mov	r4, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f013 0f08 	tst.w	r3, #8
 8001286:	d106      	bne.n	8001296 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001288:	f7ff ff64 	bl	8001154 <HAL_GetTick>
 800128c:	1b00      	subs	r0, r0, r4
 800128e:	280a      	cmp	r0, #10
 8001290:	d9f5      	bls.n	800127e <HAL_SYSCFG_EnableVREFBUF+0x12>
    {
      return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
 8001294:	e000      	b.n	8001298 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    }
  }

  return HAL_OK;
 8001296:	2000      	movs	r0, #0
}
 8001298:	bd10      	pop	{r4, pc}
 800129a:	bf00      	nop
 800129c:	58003c00 	.word	0x58003c00

080012a0 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80012a0:	4a02      	ldr	r2, [pc, #8]	; (80012ac <HAL_SYSCFG_DisableVREFBUF+0xc>)
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	4770      	bx	lr
 80012ac:	58003c00 	.word	0x58003c00

080012b0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80012b2:	6853      	ldr	r3, [r2, #4]
 80012b4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80012b8:	4303      	orrs	r3, r0
 80012ba:	6053      	str	r3, [r2, #4]
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	58000400 	.word	0x58000400

080012c4 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80012c4:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80012c6:	6853      	ldr	r3, [r2, #4]
 80012c8:	ea23 0300 	bic.w	r3, r3, r0
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6053      	str	r3, [r2, #4]
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	58000400 	.word	0x58000400

080012d8 <HAL_SYSCFG_EnableBOOST>:
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 80012d8:	4a02      	ldr	r2, [pc, #8]	; (80012e4 <HAL_SYSCFG_EnableBOOST+0xc>)
 80012da:	6853      	ldr	r3, [r2, #4]
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6053      	str	r3, [r2, #4]
}
 80012e2:	4770      	bx	lr
 80012e4:	58000400 	.word	0x58000400

080012e8 <HAL_SYSCFG_DisableBOOST>:
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 80012e8:	4a02      	ldr	r2, [pc, #8]	; (80012f4 <HAL_SYSCFG_DisableBOOST+0xc>)
 80012ea:	6853      	ldr	r3, [r2, #4]
 80012ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f0:	6053      	str	r3, [r2, #4]
}
 80012f2:	4770      	bx	lr
 80012f4:	58000400 	.word	0x58000400

080012f8 <HAL_SYSCFG_CM7BootAddConfig>:
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
 80012f8:	b948      	cbnz	r0, 800130e <HAL_SYSCFG_CM7BootAddConfig+0x16>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
 80012fa:	480a      	ldr	r0, [pc, #40]	; (8001324 <HAL_SYSCFG_CM7BootAddConfig+0x2c>)
 80012fc:	f8d0 3308 	ldr.w	r3, [r0, #776]	; 0x308
 8001300:	b29b      	uxth	r3, r3
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_SYSCFG_CM7BootAddConfig+0x30>)
 8001304:	400a      	ands	r2, r1
 8001306:	4313      	orrs	r3, r2
 8001308:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
 800130c:	4770      	bx	lr
  }
  else
  {
    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_SYSCFG_CM7BootAddConfig+0x2c>)
 8001310:	f8d2 030c 	ldr.w	r0, [r2, #780]	; 0x30c
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_SYSCFG_CM7BootAddConfig+0x30>)
 8001316:	4003      	ands	r3, r0
 8001318:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
 800131c:	f8c2 130c 	str.w	r1, [r2, #780]	; 0x30c
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	58000400 	.word	0x58000400
 8001328:	ffff0000 	.word	0xffff0000

0800132c <HAL_SYSCFG_CM4BootAddConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));

  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
 800132c:	b948      	cbnz	r0, 8001342 <HAL_SYSCFG_CM4BootAddConfig+0x16>
  {
    /* Configure CM4 BOOT ADD0 */
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM4_ADD0, ((BootAddress >> 16)<< SYSCFG_UR3_BCM4_ADD0_Pos));
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <HAL_SYSCFG_CM4BootAddConfig+0x2c>)
 8001330:	f8d0 330c 	ldr.w	r3, [r0, #780]	; 0x30c
 8001334:	b29b      	uxth	r3, r3
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_SYSCFG_CM4BootAddConfig+0x30>)
 8001338:	400a      	ands	r2, r1
 800133a:	4313      	orrs	r3, r2
 800133c:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
 8001340:	4770      	bx	lr
  }

  else
  {
    /* Configure CM4 BOOT ADD1 */
    MODIFY_REG(SYSCFG->UR4, SYSCFG_UR4_BCM4_ADD1, (BootAddress >> 16));
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_SYSCFG_CM4BootAddConfig+0x2c>)
 8001344:	f8d2 0310 	ldr.w	r0, [r2, #784]	; 0x310
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <HAL_SYSCFG_CM4BootAddConfig+0x30>)
 800134a:	4003      	ands	r3, r0
 800134c:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
 8001350:	f8c2 1310 	str.w	r1, [r2, #784]	; 0x310
  }
}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	58000400 	.word	0x58000400
 800135c:	ffff0000 	.word	0xffff0000

08001360 <HAL_SYSCFG_EnableCM7BOOT>:
  * @brief  Enables the Cortex-M7 boot
  * @retval None
  */
void HAL_SYSCFG_EnableCM7BOOT(void)
{
 SET_BIT(SYSCFG->UR1, SYSCFG_UR1_BCM7);
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_SYSCFG_EnableCM7BOOT+0x10>)
 8001362:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <HAL_SYSCFG_DisableCM7BOOT>:
  * @note   Disabling the boot will gate the CPU clock
  * @retval None
  */
void HAL_SYSCFG_DisableCM7BOOT(void)
{
 CLEAR_BIT(SYSCFG->UR1, SYSCFG_UR1_BCM7) ;
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_SYSCFG_DisableCM7BOOT+0x10>)
 8001376:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 8001382:	4770      	bx	lr
 8001384:	58000400 	.word	0x58000400

08001388 <HAL_SYSCFG_EnableCM4BOOT>:
  * @brief  Enables the Cortex-M4 boot
  * @retval None
  */
void HAL_SYSCFG_EnableCM4BOOT(void)
{
 SET_BIT(SYSCFG->UR1, SYSCFG_UR1_BCM4);
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_SYSCFG_EnableCM4BOOT+0x10>)
 800138a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 8001396:	4770      	bx	lr
 8001398:	58000400 	.word	0x58000400

0800139c <HAL_SYSCFG_DisableCM4BOOT>:
  * @note   Disabling the boot will gate the CPU clock
  * @retval None
  */
void HAL_SYSCFG_DisableCM4BOOT(void)
{
  CLEAR_BIT(SYSCFG->UR1, SYSCFG_UR1_BCM4);
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_SYSCFG_DisableCM4BOOT+0x10>)
 800139e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 80013aa:	4770      	bx	lr
 80013ac:	58000400 	.word	0x58000400

080013b0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80013b0:	4a02      	ldr	r2, [pc, #8]	; (80013bc <HAL_EnableCompensationCell+0xc>)
 80013b2:	6a13      	ldr	r3, [r2, #32]
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
}
 80013ba:	4770      	bx	lr
 80013bc:	58000400 	.word	0x58000400

080013c0 <HAL_DisableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
 80013c0:	4a02      	ldr	r2, [pc, #8]	; (80013cc <HAL_DisableCompensationCell+0xc>)
 80013c2:	6a13      	ldr	r3, [r2, #32]
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6213      	str	r3, [r2, #32]
}
 80013ca:	4770      	bx	lr
 80013cc:	58000400 	.word	0x58000400

080013d0 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
 80013d0:	4a02      	ldr	r2, [pc, #8]	; (80013dc <HAL_SYSCFG_EnableIOSpeedOptimize+0xc>)
 80013d2:	6a13      	ldr	r3, [r2, #32]
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
 80013da:	4770      	bx	lr
 80013dc:	58000400 	.word	0x58000400

080013e0 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
 80013e0:	4a02      	ldr	r2, [pc, #8]	; (80013ec <HAL_SYSCFG_DisableIOSpeedOptimize+0xc>)
 80013e2:	6a13      	ldr	r3, [r2, #32]
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
 80013ea:	4770      	bx	lr
 80013ec:	58000400 	.word	0x58000400

080013f0 <HAL_SYSCFG_CompensationCodeSelect>:
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_SYSCFG_CompensationCodeSelect+0x10>)
 80013f2:	6a13      	ldr	r3, [r2, #32]
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	4303      	orrs	r3, r0
 80013fa:	6213      	str	r3, [r2, #32]
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	58000400 	.word	0x58000400

08001404 <HAL_SYSCFG_CompensationCodeConfig>:
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_SYSCFG_CompensationCodeConfig+0x14>)
 8001406:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001408:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800140c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001410:	430b      	orrs	r3, r1
 8001412:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	58000400 	.word	0x58000400

0800141c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 800141c:	4a02      	ldr	r2, [pc, #8]	; (8001428 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800141e:	6853      	ldr	r3, [r2, #4]
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6053      	str	r3, [r2, #4]
}
 8001426:	4770      	bx	lr
 8001428:	5c001000 	.word	0x5c001000

0800142c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 800142c:	4a02      	ldr	r2, [pc, #8]	; (8001438 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800142e:	6853      	ldr	r3, [r2, #4]
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6053      	str	r3, [r2, #4]
}
 8001436:	4770      	bx	lr
 8001438:	5c001000 	.word	0x5c001000

0800143c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 800143c:	4a02      	ldr	r2, [pc, #8]	; (8001448 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800143e:	6853      	ldr	r3, [r2, #4]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6053      	str	r3, [r2, #4]
}
 8001446:	4770      	bx	lr
 8001448:	5c001000 	.word	0x5c001000

0800144c <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 800144c:	4a02      	ldr	r2, [pc, #8]	; (8001458 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800144e:	6853      	ldr	r3, [r2, #4]
 8001450:	f023 0302 	bic.w	r3, r3, #2
 8001454:	6053      	str	r3, [r2, #4]
}
 8001456:	4770      	bx	lr
 8001458:	5c001000 	.word	0x5c001000

0800145c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 800145c:	4a02      	ldr	r2, [pc, #8]	; (8001468 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800145e:	6853      	ldr	r3, [r2, #4]
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6053      	str	r3, [r2, #4]
}
 8001466:	4770      	bx	lr
 8001468:	5c001000 	.word	0x5c001000

0800146c <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 800146c:	4a02      	ldr	r2, [pc, #8]	; (8001478 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800146e:	6853      	ldr	r3, [r2, #4]
 8001470:	f023 0304 	bic.w	r3, r3, #4
 8001474:	6053      	str	r3, [r2, #4]
}
 8001476:	4770      	bx	lr
 8001478:	5c001000 	.word	0x5c001000

0800147c <HAL_EnableDomain2DBGSleepMode>:
  * @brief  Enable the Debug Module during Domain1 SLEEP mode
  * @retval None
  */
void HAL_EnableDomain2DBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD2);
 800147c:	4a02      	ldr	r2, [pc, #8]	; (8001488 <HAL_EnableDomain2DBGSleepMode+0xc>)
 800147e:	6853      	ldr	r3, [r2, #4]
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6053      	str	r3, [r2, #4]
}
 8001486:	4770      	bx	lr
 8001488:	5c001000 	.word	0x5c001000

0800148c <HAL_DisableDomain2DBGSleepMode>:
  * @brief  Disable the Debug Module during Domain2 SLEEP mode
  * @retval None
  */
void HAL_DisableDomain2DBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD2);
 800148c:	4a02      	ldr	r2, [pc, #8]	; (8001498 <HAL_DisableDomain2DBGSleepMode+0xc>)
 800148e:	6853      	ldr	r3, [r2, #4]
 8001490:	f023 0308 	bic.w	r3, r3, #8
 8001494:	6053      	str	r3, [r2, #4]
}
 8001496:	4770      	bx	lr
 8001498:	5c001000 	.word	0x5c001000

0800149c <HAL_EnableDomain2DBGStopMode>:
  * @brief  Enable the Debug Module during Domain2 STOP mode
  * @retval None
  */
void HAL_EnableDomain2DBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD2);
 800149c:	4a02      	ldr	r2, [pc, #8]	; (80014a8 <HAL_EnableDomain2DBGStopMode+0xc>)
 800149e:	6853      	ldr	r3, [r2, #4]
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6053      	str	r3, [r2, #4]
}
 80014a6:	4770      	bx	lr
 80014a8:	5c001000 	.word	0x5c001000

080014ac <HAL_DisableDomain2DBGStopMode>:
  * @brief  Disable the Debug Module during Domain2 STOP mode
  * @retval None
  */
void HAL_DisableDomain2DBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD2);
 80014ac:	4a02      	ldr	r2, [pc, #8]	; (80014b8 <HAL_DisableDomain2DBGStopMode+0xc>)
 80014ae:	6853      	ldr	r3, [r2, #4]
 80014b0:	f023 0310 	bic.w	r3, r3, #16
 80014b4:	6053      	str	r3, [r2, #4]
}
 80014b6:	4770      	bx	lr
 80014b8:	5c001000 	.word	0x5c001000

080014bc <HAL_EnableDomain2DBGStandbyMode>:
  * @brief  Enable the Debug Module during Domain2 STANDBY mode
  * @retval None
  */
void HAL_EnableDomain2DBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD2);
 80014bc:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <HAL_EnableDomain2DBGStandbyMode+0xc>)
 80014be:	6853      	ldr	r3, [r2, #4]
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	6053      	str	r3, [r2, #4]
}
 80014c6:	4770      	bx	lr
 80014c8:	5c001000 	.word	0x5c001000

080014cc <HAL_DisableDomain2DBGStandbyMode>:
  * @brief  Disable the Debug Module during Domain2 STANDBY mode
  * @retval None
  */
void HAL_DisableDomain2DBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD2);
 80014cc:	4a02      	ldr	r2, [pc, #8]	; (80014d8 <HAL_DisableDomain2DBGStandbyMode+0xc>)
 80014ce:	6853      	ldr	r3, [r2, #4]
 80014d0:	f023 0320 	bic.w	r3, r3, #32
 80014d4:	6053      	str	r3, [r2, #4]
}
 80014d6:	4770      	bx	lr
 80014d8:	5c001000 	.word	0x5c001000

080014dc <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_SetFMCMemorySwappingConfig+0x10>)
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80014e4:	4303      	orrs	r3, r0
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	52004000 	.word	0x52004000

080014f0 <HAL_GetFMCMemorySwappingConfig>:
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_GetFMCMemorySwappingConfig+0xc>)
 80014f2:	6818      	ldr	r0, [r3, #0]
}
 80014f4:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	52004000 	.word	0x52004000

08001500 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
 8001500:	b430      	push	{r4, r5}
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001502:	0943      	lsrs	r3, r0, #5
 8001504:	f020 0c1f 	bic.w	ip, r0, #31
 8001508:	4c11      	ldr	r4, [pc, #68]	; (8001550 <HAL_EXTI_EdgeConfig+0x50>)
 800150a:	f85c 5004 	ldr.w	r5, [ip, r4]
 800150e:	f000 001f 	and.w	r0, r0, #31
 8001512:	2201      	movs	r2, #1
 8001514:	fa02 f000 	lsl.w	r0, r2, r0
 8001518:	ea25 0500 	bic.w	r5, r5, r0
 800151c:	f84c 5004 	str.w	r5, [ip, r4]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001520:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	ea22 0200 	bic.w	r2, r2, r0
 800152c:	601a      	str	r2, [r3, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
 800152e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001532:	d002      	beq.n	800153a <HAL_EXTI_EdgeConfig+0x3a>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4302      	orrs	r2, r0
 8001538:	601a      	str	r2, [r3, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
 800153a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 800153e:	d004      	beq.n	800154a <HAL_EXTI_EdgeConfig+0x4a>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001540:	f85c 3004 	ldr.w	r3, [ip, r4]
 8001544:	4318      	orrs	r0, r3
 8001546:	f84c 0004 	str.w	r0, [ip, r4]
  }
}
 800154a:	bc30      	pop	{r4, r5}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58000004 	.word	0x58000004

08001554 <HAL_EXTI_GenerateSWInterrupt>:
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001554:	f020 0c1f 	bic.w	ip, r0, #31
 8001558:	4905      	ldr	r1, [pc, #20]	; (8001570 <HAL_EXTI_GenerateSWInterrupt+0x1c>)
 800155a:	f85c 3001 	ldr.w	r3, [ip, r1]
 800155e:	f000 001f 	and.w	r0, r0, #31
 8001562:	2201      	movs	r2, #1
 8001564:	fa02 f000 	lsl.w	r0, r2, r0
 8001568:	4318      	orrs	r0, r3
 800156a:	f84c 0001 	str.w	r0, [ip, r1]
}
 800156e:	4770      	bx	lr
 8001570:	58000008 	.word	0x58000008

08001574 <HAL_EXTI_D1_ClearFlag>:
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001574:	f000 021f 	and.w	r2, r0, #31
 8001578:	0940      	lsrs	r0, r0, #5
 800157a:	0100      	lsls	r0, r0, #4
 800157c:	2301      	movs	r3, #1
 800157e:	4093      	lsls	r3, r2
 8001580:	4a01      	ldr	r2, [pc, #4]	; (8001588 <HAL_EXTI_D1_ClearFlag+0x14>)
 8001582:	5083      	str	r3, [r0, r2]

}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	58000088 	.word	0x58000088

0800158c <HAL_EXTI_D2_ClearFlag>:
  */
void HAL_EXTI_D2_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
 assert_param(IS_EXTI_D2_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800158c:	f000 021f 	and.w	r2, r0, #31
 8001590:	0940      	lsrs	r0, r0, #5
 8001592:	0100      	lsls	r0, r0, #4
 8001594:	2301      	movs	r3, #1
 8001596:	4093      	lsls	r3, r2
 8001598:	4a01      	ldr	r2, [pc, #4]	; (80015a0 <HAL_EXTI_D2_ClearFlag+0x14>)
 800159a:	5083      	str	r3, [r0, r2]
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	580000c8 	.word	0x580000c8

080015a4 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 80015a4:	b510      	push	{r4, lr}
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 80015a6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80015aa:	d00e      	beq.n	80015ca <HAL_EXTI_D1_EventInputConfig+0x26>
  {
     if( EXTI_LineCmd == 0UL)
 80015ac:	b9ea      	cbnz	r2, 80015ea <HAL_EXTI_D1_EventInputConfig+0x46>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_EXTI_D1_EventInputConfig+0x7c>)
 80015b0:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	f000 0e1f 	and.w	lr, r0, #31
 80015bc:	f04f 0c01 	mov.w	ip, #1
 80015c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80015c4:	ea24 040c 	bic.w	r4, r4, ip
 80015c8:	601c      	str	r4, [r3, #0]
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 80015ca:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80015ce:	d00b      	beq.n	80015e8 <HAL_EXTI_D1_EventInputConfig+0x44>
  {
    if( EXTI_LineCmd == 0UL)
 80015d0:	b9d2      	cbnz	r2, 8001608 <HAL_EXTI_D1_EventInputConfig+0x64>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80015d2:	0943      	lsrs	r3, r0, #5
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4913      	ldr	r1, [pc, #76]	; (8001624 <HAL_EXTI_D1_EventInputConfig+0x80>)
 80015d8:	585a      	ldr	r2, [r3, r1]
 80015da:	f000 041f 	and.w	r4, r0, #31
 80015de:	2001      	movs	r0, #1
 80015e0:	40a0      	lsls	r0, r4
 80015e2:	ea22 0000 	bic.w	r0, r2, r0
 80015e6:	5058      	str	r0, [r3, r1]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 80015e8:	bd10      	pop	{r4, pc}
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_EXTI_D1_EventInputConfig+0x7c>)
 80015ec:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	681c      	ldr	r4, [r3, #0]
 80015f4:	f000 0e1f 	and.w	lr, r0, #31
 80015f8:	f04f 0c01 	mov.w	ip, #1
 80015fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001600:	ea44 040c 	orr.w	r4, r4, ip
 8001604:	601c      	str	r4, [r3, #0]
 8001606:	e7e0      	b.n	80015ca <HAL_EXTI_D1_EventInputConfig+0x26>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001608:	0943      	lsrs	r3, r0, #5
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4c05      	ldr	r4, [pc, #20]	; (8001624 <HAL_EXTI_D1_EventInputConfig+0x80>)
 800160e:	591a      	ldr	r2, [r3, r4]
 8001610:	f000 001f 	and.w	r0, r0, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f000 	lsl.w	r0, r1, r0
 800161a:	4310      	orrs	r0, r2
 800161c:	5118      	str	r0, [r3, r4]
}
 800161e:	e7e3      	b.n	80015e8 <HAL_EXTI_D1_EventInputConfig+0x44>
 8001620:	05800008 	.word	0x05800008
 8001624:	58000084 	.word	0x58000084

08001628 <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8001628:	b510      	push	{r4, lr}
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 800162a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800162e:	d00e      	beq.n	800164e <HAL_EXTI_D2_EventInputConfig+0x26>
  {
    if( EXTI_LineCmd == 0UL)
 8001630:	b9ea      	cbnz	r2, 800166e <HAL_EXTI_D2_EventInputConfig+0x46>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_EXTI_D2_EventInputConfig+0x7c>)
 8001634:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	f000 0e1f 	and.w	lr, r0, #31
 8001640:	f04f 0c01 	mov.w	ip, #1
 8001644:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001648:	ea24 040c 	bic.w	r4, r4, ip
 800164c:	601c      	str	r4, [r3, #0]
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 800164e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001652:	d00b      	beq.n	800166c <HAL_EXTI_D2_EventInputConfig+0x44>
  {
    if( EXTI_LineCmd == 0UL)
 8001654:	b9d2      	cbnz	r2, 800168c <HAL_EXTI_D2_EventInputConfig+0x64>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8001656:	0943      	lsrs	r3, r0, #5
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4913      	ldr	r1, [pc, #76]	; (80016a8 <HAL_EXTI_D2_EventInputConfig+0x80>)
 800165c:	585a      	ldr	r2, [r3, r1]
 800165e:	f000 041f 	and.w	r4, r0, #31
 8001662:	2001      	movs	r0, #1
 8001664:	40a0      	lsls	r0, r4
 8001666:	ea22 0000 	bic.w	r0, r2, r0
 800166a:	5058      	str	r0, [r3, r1]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 800166c:	bd10      	pop	{r4, pc}
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_EXTI_D2_EventInputConfig+0x7c>)
 8001670:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	681c      	ldr	r4, [r3, #0]
 8001678:	f000 0e1f 	and.w	lr, r0, #31
 800167c:	f04f 0c01 	mov.w	ip, #1
 8001680:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001684:	ea44 040c 	orr.w	r4, r4, ip
 8001688:	601c      	str	r4, [r3, #0]
 800168a:	e7e0      	b.n	800164e <HAL_EXTI_D2_EventInputConfig+0x26>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800168c:	0943      	lsrs	r3, r0, #5
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4c05      	ldr	r4, [pc, #20]	; (80016a8 <HAL_EXTI_D2_EventInputConfig+0x80>)
 8001692:	591a      	ldr	r2, [r3, r4]
 8001694:	f000 001f 	and.w	r0, r0, #31
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f000 	lsl.w	r0, r1, r0
 800169e:	4310      	orrs	r0, r2
 80016a0:	5118      	str	r0, [r3, r4]
}
 80016a2:	e7e3      	b.n	800166c <HAL_EXTI_D2_EventInputConfig+0x44>
 80016a4:	0580000c 	.word	0x0580000c
 80016a8:	580000c4 	.word	0x580000c4

080016ac <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
 80016ac:	b510      	push	{r4, lr}

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
 80016ae:	bb11      	cbnz	r1, 80016f6 <HAL_EXTI_D3_EventInputConfig+0x4a>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 80016b0:	f020 031f 	bic.w	r3, r0, #31
 80016b4:	4c19      	ldr	r4, [pc, #100]	; (800171c <HAL_EXTI_D3_EventInputConfig+0x70>)
 80016b6:	5919      	ldr	r1, [r3, r4]
 80016b8:	f000 0e1f 	and.w	lr, r0, #31
 80016bc:	f04f 0c01 	mov.w	ip, #1
 80016c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80016c4:	ea21 010c 	bic.w	r1, r1, ip
 80016c8:	5119      	str	r1, [r3, r4]
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
 80016ca:	f010 0f10 	tst.w	r0, #16
 80016ce:	d120      	bne.n	8001712 <HAL_EXTI_D3_EventInputConfig+0x66>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
 80016d0:	f020 031f 	bic.w	r3, r0, #31
 80016d4:	4912      	ldr	r1, [pc, #72]	; (8001720 <HAL_EXTI_D3_EventInputConfig+0x74>)
 80016d6:	4419      	add	r1, r3
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
 80016d8:	680b      	ldr	r3, [r1, #0]
 80016da:	0040      	lsls	r0, r0, #1
 80016dc:	f000 001e 	and.w	r0, r0, #30
 80016e0:	f04f 0c03 	mov.w	ip, #3
 80016e4:	fa0c fc00 	lsl.w	ip, ip, r0
 80016e8:	ea23 030c 	bic.w	r3, r3, ip
 80016ec:	fa02 f000 	lsl.w	r0, r2, r0
 80016f0:	4318      	orrs	r0, r3
 80016f2:	6008      	str	r0, [r1, #0]

}
 80016f4:	bd10      	pop	{r4, pc}
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80016f6:	f020 031f 	bic.w	r3, r0, #31
 80016fa:	4c08      	ldr	r4, [pc, #32]	; (800171c <HAL_EXTI_D3_EventInputConfig+0x70>)
 80016fc:	5919      	ldr	r1, [r3, r4]
 80016fe:	f000 0e1f 	and.w	lr, r0, #31
 8001702:	f04f 0c01 	mov.w	ip, #1
 8001706:	fa0c fc0e 	lsl.w	ip, ip, lr
 800170a:	ea41 010c 	orr.w	r1, r1, ip
 800170e:	5119      	str	r1, [r3, r4]
 8001710:	e7db      	b.n	80016ca <HAL_EXTI_D3_EventInputConfig+0x1e>
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
 8001712:	f020 031f 	bic.w	r3, r0, #31
 8001716:	4903      	ldr	r1, [pc, #12]	; (8001724 <HAL_EXTI_D3_EventInputConfig+0x78>)
 8001718:	4419      	add	r1, r3
 800171a:	e7dd      	b.n	80016d8 <HAL_EXTI_D3_EventInputConfig+0x2c>
 800171c:	5800000c 	.word	0x5800000c
 8001720:	58000010 	.word	0x58000010
 8001724:	58000014 	.word	0x58000014
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8001728:	4770      	bx	lr
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */
}
 800172a:	4770      	bx	lr

0800172c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	460e      	mov	r6, r1
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001734:	6803      	ldr	r3, [r0, #0]
 8001736:	4945      	ldr	r1, [pc, #276]	; (800184c <HAL_ADC_PollForConversion+0x120>)
 8001738:	4a45      	ldr	r2, [pc, #276]	; (8001850 <HAL_ADC_PollForConversion+0x124>)
 800173a:	4293      	cmp	r3, r2
 800173c:	bf18      	it	ne
 800173e:	428b      	cmpne	r3, r1
 8001740:	d113      	bne.n	800176a <HAL_ADC_PollForConversion+0x3e>
 8001742:	f502 7200 	add.w	r2, r2, #512	; 0x200
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001746:	6897      	ldr	r7, [r2, #8]
 8001748:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800174c:	6925      	ldr	r5, [r4, #16]
 800174e:	2d08      	cmp	r5, #8
 8001750:	d012      	beq.n	8001778 <HAL_ADC_PollForConversion+0x4c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001752:	2f05      	cmp	r7, #5
 8001754:	bf18      	it	ne
 8001756:	2f00      	cmpne	r7, #0
 8001758:	d009      	beq.n	800176e <HAL_ADC_PollForConversion+0x42>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800175a:	2f09      	cmp	r7, #9
 800175c:	d007      	beq.n	800176e <HAL_ADC_PollForConversion+0x42>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800175e:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001760:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001764:	d12d      	bne.n	80017c2 <HAL_ADC_PollForConversion+0x96>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001766:	2504      	movs	r5, #4
 8001768:	e006      	b.n	8001778 <HAL_ADC_PollForConversion+0x4c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800176a:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_ADC_PollForConversion+0x128>)
 800176c:	e7eb      	b.n	8001746 <HAL_ADC_PollForConversion+0x1a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f013 0f01 	tst.w	r3, #1
 8001774:	d11f      	bne.n	80017b6 <HAL_ADC_PollForConversion+0x8a>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001776:	2504      	movs	r5, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001778:	f7ff fcec 	bl	8001154 <HAL_GetTick>
 800177c:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	422a      	tst	r2, r5
 8001784:	d123      	bne.n	80017ce <HAL_ADC_PollForConversion+0xa2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	f1b6 3fff 	cmp.w	r6, #4294967295
 800178a:	d0f8      	beq.n	800177e <HAL_ADC_PollForConversion+0x52>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800178c:	f7ff fce2 	bl	8001154 <HAL_GetTick>
 8001790:	eba0 0008 	sub.w	r0, r0, r8
 8001794:	42b0      	cmp	r0, r6
 8001796:	d801      	bhi.n	800179c <HAL_ADC_PollForConversion+0x70>
 8001798:	2e00      	cmp	r6, #0
 800179a:	d1f0      	bne.n	800177e <HAL_ADC_PollForConversion+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	422b      	tst	r3, r5
 80017a2:	d1ec      	bne.n	800177e <HAL_ADC_PollForConversion+0x52>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6563      	str	r3, [r4, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ac:	2300      	movs	r3, #0
 80017ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

          return HAL_TIMEOUT;
 80017b2:	2003      	movs	r0, #3
 80017b4:	e045      	b.n	8001842 <HAL_ADC_PollForConversion+0x116>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80017be:	2001      	movs	r0, #1
 80017c0:	e03f      	b.n	8001842 <HAL_ADC_PollForConversion+0x116>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
 80017cc:	e039      	b.n	8001842 <HAL_ADC_PollForConversion+0x116>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d4:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80017dc:	d111      	bne.n	8001802 <HAL_ADC_PollForConversion+0xd6>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017de:	7d62      	ldrb	r2, [r4, #21]
 80017e0:	b97a      	cbnz	r2, 8001802 <HAL_ADC_PollForConversion+0xd6>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f012 0f08 	tst.w	r2, #8
 80017e8:	d00b      	beq.n	8001802 <HAL_ADC_PollForConversion+0xd6>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017f0:	6562      	str	r2, [r4, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017f4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80017f8:	d103      	bne.n	8001802 <HAL_ADC_PollForConversion+0xd6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	6562      	str	r2, [r4, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <HAL_ADC_PollForConversion+0x124>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00c      	beq.n	8001822 <HAL_ADC_PollForConversion+0xf6>
 8001808:	461a      	mov	r2, r3
 800180a:	4293      	cmp	r3, r2
 800180c:	d00c      	beq.n	8001828 <HAL_ADC_PollForConversion+0xfc>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800180e:	2f05      	cmp	r7, #5
 8001810:	bf14      	ite	ne
 8001812:	2100      	movne	r1, #0
 8001814:	2101      	moveq	r1, #1
 8001816:	b13f      	cbz	r7, 8001828 <HAL_ADC_PollForConversion+0xfc>
 8001818:	b931      	cbnz	r1, 8001828 <HAL_ADC_PollForConversion+0xfc>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800181a:	2f09      	cmp	r7, #9
 800181c:	d004      	beq.n	8001828 <HAL_ADC_PollForConversion+0xfc>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800181e:	68d2      	ldr	r2, [r2, #12]
 8001820:	e003      	b.n	800182a <HAL_ADC_PollForConversion+0xfe>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001822:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001826:	e7f0      	b.n	800180a <HAL_ADC_PollForConversion+0xde>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001828:	68da      	ldr	r2, [r3, #12]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800182a:	2d08      	cmp	r5, #8
 800182c:	d006      	beq.n	800183c <HAL_ADC_PollForConversion+0x110>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800182e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001832:	d108      	bne.n	8001846 <HAL_ADC_PollForConversion+0x11a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001834:	220c      	movs	r2, #12
 8001836:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001838:	2000      	movs	r0, #0
 800183a:	e002      	b.n	8001842 <HAL_ADC_PollForConversion+0x116>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800183c:	2208      	movs	r2, #8
 800183e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001840:	2000      	movs	r0, #0
}
 8001842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001846:	2000      	movs	r0, #0
 8001848:	e7fb      	b.n	8001842 <HAL_ADC_PollForConversion+0x116>
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40022100 	.word	0x40022100
 8001854:	58026300 	.word	0x58026300

08001858 <HAL_ADC_PollForEvent>:
  *         To reset OVR flag once the preserved data is retrieved, the user can resort
  *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeout)
{
 8001858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185c:	4606      	mov	r6, r0
 800185e:	460d      	mov	r5, r1
 8001860:	4617      	mov	r7, r2
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001862:	f7ff fc77 	bl	8001154 <HAL_GetTick>
 8001866:	4680      	mov	r8, r0

  /* Check selected event flag */
  while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 8001868:	6833      	ldr	r3, [r6, #0]
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	ea35 0204 	bics.w	r2, r5, r4
 8001870:	d018      	beq.n	80018a4 <HAL_ADC_PollForEvent+0x4c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001872:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001876:	d0f7      	beq.n	8001868 <HAL_ADC_PollForEvent+0x10>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001878:	f7ff fc6c 	bl	8001154 <HAL_GetTick>
 800187c:	eba0 0308 	sub.w	r3, r0, r8
 8001880:	42bb      	cmp	r3, r7
 8001882:	d801      	bhi.n	8001888 <HAL_ADC_PollForEvent+0x30>
 8001884:	2f00      	cmp	r7, #0
 8001886:	d1ef      	bne.n	8001868 <HAL_ADC_PollForEvent+0x10>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 8001888:	6833      	ldr	r3, [r6, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ea35 0303 	bics.w	r3, r5, r3
 8001890:	d0ea      	beq.n	8001868 <HAL_ADC_PollForEvent+0x10>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001892:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6573      	str	r3, [r6, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800189a:	2300      	movs	r3, #0
 800189c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

          return HAL_TIMEOUT;
 80018a0:	2003      	movs	r0, #3
 80018a2:	e029      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
        }
      }
    }
  }

  switch (EventType)
 80018a4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80018a8:	d028      	beq.n	80018fc <HAL_ADC_PollForEvent+0xa4>
 80018aa:	d80b      	bhi.n	80018c4 <HAL_ADC_PollForEvent+0x6c>
 80018ac:	2d02      	cmp	r5, #2
 80018ae:	d01c      	beq.n	80018ea <HAL_ADC_PollForEvent+0x92>
 80018b0:	2d80      	cmp	r5, #128	; 0x80
 80018b2:	d135      	bne.n	8001920 <HAL_ADC_PollForEvent+0xc8>
    /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */

    /* Check analog watchdog 1 flag */
    case ADC_AWD_EVENT:
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018b4:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80018b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018ba:	6572      	str	r2, [r6, #84]	; 0x54

      /* Clear ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	601a      	str	r2, [r3, #0]
      }
      break;
  }

  /* Return function status */
  return HAL_OK;
 80018c0:	2000      	movs	r0, #0
      break;
 80018c2:	e019      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
  switch (EventType)
 80018c4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80018c8:	d021      	beq.n	800190e <HAL_ADC_PollForEvent+0xb6>
 80018ca:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80018ce:	d127      	bne.n	8001920 <HAL_ADC_PollForEvent+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80018d0:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80018d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018d6:	6572      	str	r2, [r6, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80018d8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	65b2      	str	r2, [r6, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80018e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018e6:	2000      	movs	r0, #0
      break;
 80018e8:	e006      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018ea:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80018ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f0:	6572      	str	r2, [r6, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
}
 80018f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80018fc:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80018fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001902:	6572      	str	r2, [r6, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800190a:	2000      	movs	r0, #0
      break;
 800190c:	e7f4      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800190e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001910:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001914:	6572      	str	r2, [r6, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800191c:	2000      	movs	r0, #0
      break;
 800191e:	e7eb      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001920:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001922:	b94a      	cbnz	r2, 8001938 <HAL_ADC_PollForEvent+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001924:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6573      	str	r3, [r6, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800192c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	65b3      	str	r3, [r6, #88]	; 0x58
  return HAL_OK;
 8001934:	2000      	movs	r0, #0
 8001936:	e7df      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001938:	2210      	movs	r2, #16
 800193a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800193c:	2000      	movs	r0, #0
 800193e:	e7db      	b.n	80018f8 <HAL_ADC_PollForEvent+0xa0>

08001940 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001940:	6803      	ldr	r3, [r0, #0]
 8001942:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001944:	4770      	bx	lr
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001946:	4770      	bx	lr
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001948:	4770      	bx	lr

0800194a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800194a:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800194c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800194e:	f7fe febb 	bl	80006c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001952:	bd08      	pop	{r3, pc}

08001954 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001954:	4770      	bx	lr

08001956 <HAL_ADC_ErrorCallback>:
}
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_IRQHandler>:
{
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800195c:	6803      	ldr	r3, [r0, #0]
 800195e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001960:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001962:	4996      	ldr	r1, [pc, #600]	; (8001bbc <HAL_ADC_IRQHandler+0x264>)
 8001964:	4a96      	ldr	r2, [pc, #600]	; (8001bc0 <HAL_ADC_IRQHandler+0x268>)
 8001966:	4293      	cmp	r3, r2
 8001968:	bf18      	it	ne
 800196a:	428b      	cmpne	r3, r1
 800196c:	d140      	bne.n	80019f0 <HAL_ADC_IRQHandler+0x98>
 800196e:	4b95      	ldr	r3, [pc, #596]	; (8001bc4 <HAL_ADC_IRQHandler+0x26c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001970:	689f      	ldr	r7, [r3, #8]
 8001972:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001976:	f015 0f02 	tst.w	r5, #2
 800197a:	d010      	beq.n	800199e <HAL_ADC_IRQHandler+0x46>
 800197c:	f016 0f02 	tst.w	r6, #2
 8001980:	d00d      	beq.n	800199e <HAL_ADC_IRQHandler+0x46>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001982:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001984:	f013 0f10 	tst.w	r3, #16
 8001988:	d103      	bne.n	8001992 <HAL_ADC_IRQHandler+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800198a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800198c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001990:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001992:	4620      	mov	r0, r4
 8001994:	f002 f9e6 	bl	8003d64 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800199e:	f015 0f04 	tst.w	r5, #4
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_IRQHandler+0x52>
 80019a4:	f016 0f04 	tst.w	r6, #4
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_IRQHandler+0x5e>
 80019aa:	f015 0f08 	tst.w	r5, #8
 80019ae:	d04f      	beq.n	8001a50 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019b0:	f016 0f08 	tst.w	r6, #8
 80019b4:	d04c      	beq.n	8001a50 <HAL_ADC_IRQHandler+0xf8>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019b8:	f013 0f10 	tst.w	r3, #16
 80019bc:	d103      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c4:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019c6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80019ce:	d139      	bne.n	8001a44 <HAL_ADC_IRQHandler+0xec>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019d0:	4a7b      	ldr	r2, [pc, #492]	; (8001bc0 <HAL_ADC_IRQHandler+0x268>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x9c>
 80019d6:	461a      	mov	r2, r3
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00e      	beq.n	80019fa <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019dc:	2f05      	cmp	r7, #5
 80019de:	bf14      	ite	ne
 80019e0:	2100      	movne	r1, #0
 80019e2:	2101      	moveq	r1, #1
 80019e4:	b14f      	cbz	r7, 80019fa <HAL_ADC_IRQHandler+0xa2>
 80019e6:	b941      	cbnz	r1, 80019fa <HAL_ADC_IRQHandler+0xa2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e8:	2f09      	cmp	r7, #9
 80019ea:	d006      	beq.n	80019fa <HAL_ADC_IRQHandler+0xa2>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	e005      	b.n	80019fc <HAL_ADC_IRQHandler+0xa4>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f0:	4b75      	ldr	r3, [pc, #468]	; (8001bc8 <HAL_ADC_IRQHandler+0x270>)
 80019f2:	e7bd      	b.n	8001970 <HAL_ADC_IRQHandler+0x18>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f4:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80019f8:	e7ee      	b.n	80019d8 <HAL_ADC_IRQHandler+0x80>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019fa:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019fc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001a00:	d120      	bne.n	8001a44 <HAL_ADC_IRQHandler+0xec>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f012 0f08 	tst.w	r2, #8
 8001a08:	d01c      	beq.n	8001a44 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	f012 0f04 	tst.w	r2, #4
 8001a10:	d110      	bne.n	8001a34 <HAL_ADC_IRQHandler+0xdc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	f022 020c 	bic.w	r2, r2, #12
 8001a18:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a24:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a28:	d10c      	bne.n	8001a44 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6563      	str	r3, [r4, #84]	; 0x54
 8001a32:	e007      	b.n	8001a44 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7fe fef7 	bl	8000838 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a50:	f015 0f20 	tst.w	r5, #32
 8001a54:	d002      	beq.n	8001a5c <HAL_ADC_IRQHandler+0x104>
 8001a56:	f016 0f20 	tst.w	r6, #32
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x110>
 8001a5c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a60:	d063      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x1d2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a62:	f016 0f40 	tst.w	r6, #64	; 0x40
 8001a66:	d060      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x1d2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a6a:	f013 0f10 	tst.w	r3, #16
 8001a6e:	d103      	bne.n	8001a78 <HAL_ADC_IRQHandler+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a76:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a78:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7c:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8001a80:	d119      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x15e>
 8001a82:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001a8a:	d116      	bne.n	8001aba <HAL_ADC_IRQHandler+0x162>
 8001a8c:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a8e:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_ADC_IRQHandler+0x268>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d014      	beq.n	8001abe <HAL_ADC_IRQHandler+0x166>
 8001a94:	461a      	mov	r2, r3
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d014      	beq.n	8001ac4 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001a9a:	2f06      	cmp	r7, #6
 8001a9c:	bf14      	ite	ne
 8001a9e:	f04f 0c00 	movne.w	ip, #0
 8001aa2:	f04f 0c01 	moveq.w	ip, #1
 8001aa6:	b16f      	cbz	r7, 8001ac4 <HAL_ADC_IRQHandler+0x16c>
 8001aa8:	f1bc 0f00 	cmp.w	ip, #0
 8001aac:	d10a      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x16c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001aae:	2f07      	cmp	r7, #7
 8001ab0:	d008      	beq.n	8001ac4 <HAL_ADC_IRQHandler+0x16c>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ab2:	68d2      	ldr	r2, [r2, #12]
 8001ab4:	e007      	b.n	8001ac6 <HAL_ADC_IRQHandler+0x16e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	e7e4      	b.n	8001a84 <HAL_ADC_IRQHandler+0x12c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7e7      	b.n	8001a8e <HAL_ADC_IRQHandler+0x136>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001abe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001ac2:	e7e8      	b.n	8001a96 <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ac4:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ac6:	b351      	cbz	r1, 8001b1e <HAL_ADC_IRQHandler+0x1c6>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ac8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001acc:	d003      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x17e>
 8001ace:	b330      	cbz	r0, 8001b1e <HAL_ADC_IRQHandler+0x1c6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ad0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001ad4:	d123      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x1c6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001adc:	d01f      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x1c6>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ade:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001ae2:	d11c      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x1c6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f012 0f08 	tst.w	r2, #8
 8001aea:	d110      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x1b6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001af2:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afa:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001afe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b02:	d10c      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x1c6>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6563      	str	r3, [r4, #84]	; 0x54
 8001b0c:	e007      	b.n	8001b1e <HAL_ADC_IRQHandler+0x1c6>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f002 f91c 	bl	8003d5c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	2260      	movs	r2, #96	; 0x60
 8001b28:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b2a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x1de>
 8001b30:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001b34:	d136      	bne.n	8001ba4 <HAL_ADC_IRQHandler+0x24c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b36:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001b3a:	d002      	beq.n	8001b42 <HAL_ADC_IRQHandler+0x1ea>
 8001b3c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001b40:	d144      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x274>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b42:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x1f6>
 8001b48:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001b4c:	d14a      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x28c>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b4e:	f015 0f10 	tst.w	r5, #16
 8001b52:	d020      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x23e>
 8001b54:	f016 0f10 	tst.w	r6, #16
 8001b58:	d01d      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x23e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b5c:	b16b      	cbz	r3, 8001b7a <HAL_ADC_IRQHandler+0x222>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d04e      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x2a8>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	4915      	ldr	r1, [pc, #84]	; (8001bbc <HAL_ADC_IRQHandler+0x264>)
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_ADC_IRQHandler+0x268>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	bf18      	it	ne
 8001b6c:	428b      	cmpne	r3, r1
 8001b6e:	d145      	bne.n	8001bfc <HAL_ADC_IRQHandler+0x2a4>
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_ADC_IRQHandler+0x26c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001b78:	d00a      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x238>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b80:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fee3 	bl	8001956 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	2210      	movs	r2, #16
 8001b94:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001b96:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001b9a:	d002      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x24a>
 8001b9c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001ba0:	d134      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x2b4>
}
 8001ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ba4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fed1 	bl	8001954 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e7bd      	b.n	8001b36 <HAL_ADC_IRQHandler+0x1de>
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40022100 	.word	0x40022100
 8001bc4:	40022300 	.word	0x40022300
 8001bc8:	58026300 	.word	0x58026300
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd2:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f002 f8c3 	bl	8003d60 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e7ae      	b.n	8001b42 <HAL_ADC_IRQHandler+0x1ea>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bec:	4620      	mov	r0, r4
 8001bee:	f002 f8b8 	bl	8003d62 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e7a8      	b.n	8001b4e <HAL_ADC_IRQHandler+0x1f6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_ADC_IRQHandler+0x2d4>)
 8001bfe:	e7b8      	b.n	8001b72 <HAL_ADC_IRQHandler+0x21a>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f013 0f03 	tst.w	r3, #3
 8001c08:	d0c2      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x238>
 8001c0a:	e7b6      	b.n	8001b7a <HAL_ADC_IRQHandler+0x222>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c22:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c24:	4620      	mov	r0, r4
 8001c26:	f002 f89a 	bl	8003d5e <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001c2a:	e7ba      	b.n	8001ba2 <HAL_ADC_IRQHandler+0x24a>
 8001c2c:	58026300 	.word	0x58026300

08001c30 <ADC_DMAConvCplt>:
{
 8001c30:	b508      	push	{r3, lr}
 8001c32:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c36:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c38:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001c3c:	d130      	bne.n	8001ca0 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6543      	str	r3, [r0, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f012 0f08 	tst.w	r2, #8
 8001c4e:	d014      	beq.n	8001c7a <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001c56:	d120      	bne.n	8001c9a <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c5e:	d11c      	bne.n	8001c9a <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c60:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c66:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c6a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c6e:	d114      	bne.n	8001c9a <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c70:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6543      	str	r3, [r0, #84]	; 0x54
 8001c78:	e00f      	b.n	8001c9a <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f013 0f03 	tst.w	r3, #3
 8001c80:	d10b      	bne.n	8001c9a <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c82:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c88:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c8a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c8c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c90:	d103      	bne.n	8001c9a <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001c9a:	f7fe fdcd 	bl	8000838 <HAL_ADC_ConvCpltCallback>
}
 8001c9e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ca0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001ca2:	f012 0f10 	tst.w	r2, #16
 8001ca6:	d104      	bne.n	8001cb2 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001caa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cac:	4618      	mov	r0, r3
 8001cae:	4790      	blx	r2
}
 8001cb0:	e7f5      	b.n	8001c9e <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8001cb2:	f7ff fe50 	bl	8001956 <HAL_ADC_ErrorCallback>
 8001cb6:	e7f2      	b.n	8001c9e <ADC_DMAConvCplt+0x6e>

08001cb8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cba:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cbc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cc4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ccc:	f7ff fe43 	bl	8001956 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd0:	bd08      	pop	{r3, pc}

08001cd2 <HAL_ADC_ConfigChannel>:
{
 8001cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001cda:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8001cde:	2a01      	cmp	r2, #1
 8001ce0:	f000 8254 	beq.w	800218c <HAL_ADC_ConfigChannel+0x4ba>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cec:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cee:	6882      	ldr	r2, [r0, #8]
 8001cf0:	f012 0f04 	tst.w	r2, #4
 8001cf4:	d009      	beq.n	8001d0a <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001d06:	b003      	add	sp, #12
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001d0a:	680a      	ldr	r2, [r1, #0]
 8001d0c:	f3c2 0413 	ubfx	r4, r2, #0, #20
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d14e      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0xe0>
 8001d14:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001d18:	2401      	movs	r4, #1
 8001d1a:	4094      	lsls	r4, r2
 8001d1c:	69c2      	ldr	r2, [r0, #28]
 8001d1e:	4322      	orrs	r2, r4
 8001d20:	61c2      	str	r2, [r0, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d22:	681d      	ldr	r5, [r3, #0]
 8001d24:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d26:	3530      	adds	r5, #48	; 0x30
 8001d28:	0a22      	lsrs	r2, r4, #8
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8001d30:	58a8      	ldr	r0, [r5, r2]
 8001d32:	f004 0e1f 	and.w	lr, r4, #31
 8001d36:	241f      	movs	r4, #31
 8001d38:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d3c:	ea20 0004 	bic.w	r0, r0, r4
 8001d40:	680c      	ldr	r4, [r1, #0]
 8001d42:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001d46:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001d4a:	ea40 000c 	orr.w	r0, r0, ip
 8001d4e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d50:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d52:	68a2      	ldr	r2, [r4, #8]
 8001d54:	f012 0204 	ands.w	r2, r2, #4
 8001d58:	d000      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x8a>
 8001d5a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d5c:	68a0      	ldr	r0, [r4, #8]
 8001d5e:	f010 0008 	ands.w	r0, r0, #8
 8001d62:	d000      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x94>
 8001d64:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d66:	4302      	orrs	r2, r0
 8001d68:	d02f      	beq.n	8001dca <HAL_ADC_ConfigChannel+0xf8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d6c:	6882      	ldr	r2, [r0, #8]
 8001d6e:	f012 0f01 	tst.w	r2, #1
 8001d72:	f040 8207 	bne.w	8002184 <HAL_ADC_ConfigChannel+0x4b2>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d76:	680a      	ldr	r2, [r1, #0]
 8001d78:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001d7a:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8001d7e:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001d82:	ea24 0406 	bic.w	r4, r4, r6
 8001d86:	f005 0c18 	and.w	ip, r5, #24
 8001d8a:	4db2      	ldr	r5, [pc, #712]	; (8002054 <HAL_ADC_ConfigChannel+0x382>)
 8001d8c:	fa25 f50c 	lsr.w	r5, r5, ip
 8001d90:	402a      	ands	r2, r5
 8001d92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8001d96:	4322      	orrs	r2, r4
 8001d98:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d9c:	68c8      	ldr	r0, [r1, #12]
 8001d9e:	4aae      	ldr	r2, [pc, #696]	; (8002058 <HAL_ADC_ConfigChannel+0x386>)
 8001da0:	4290      	cmp	r0, r2
 8001da2:	f000 80b0 	beq.w	8001f06 <HAL_ADC_ConfigChannel+0x234>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001da6:	680a      	ldr	r2, [r1, #0]
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	f2c0 816a 	blt.w	8002082 <HAL_ADC_ConfigChannel+0x3b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2000      	movs	r0, #0
 8001db0:	e7a6      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001db6:	b132      	cbz	r2, 8001dc6 <HAL_ADC_ConfigChannel+0xf4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001db8:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2401      	movs	r4, #1
 8001dc2:	4094      	lsls	r4, r2
 8001dc4:	e7aa      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x4a>
    return 32U;
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	e7f8      	b.n	8001dbc <HAL_ADC_ConfigChannel+0xea>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dca:	680f      	ldr	r7, [r1, #0]
 8001dcc:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dce:	3414      	adds	r4, #20
 8001dd0:	0e78      	lsrs	r0, r7, #25
 8001dd2:	0080      	lsls	r0, r0, #2
 8001dd4:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001dd8:	5826      	ldr	r6, [r4, r0]
 8001dda:	f3c7 5e04 	ubfx	lr, r7, #20, #5
 8001dde:	f04f 0c07 	mov.w	ip, #7
 8001de2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001de6:	ea26 0c0c 	bic.w	ip, r6, ip
 8001dea:	fa05 f50e 	lsl.w	r5, r5, lr
 8001dee:	ea4c 0505 	orr.w	r5, ip, r5
 8001df2:	5025      	str	r5, [r4, r0]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001df4:	4899      	ldr	r0, [pc, #612]	; (800205c <HAL_ADC_ConfigChannel+0x38a>)
 8001df6:	6800      	ldr	r0, [r0, #0]
 8001df8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8001dfc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8001e00:	d00b      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0x148>
 8001e02:	681c      	ldr	r4, [r3, #0]
 8001e04:	68e0      	ldr	r0, [r4, #12]
 8001e06:	f010 0f10 	tst.w	r0, #16
 8001e0a:	d139      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1ae>
 8001e0c:	6948      	ldr	r0, [r1, #20]
 8001e0e:	68e4      	ldr	r4, [r4, #12]
 8001e10:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8001e14:	0064      	lsls	r4, r4, #1
 8001e16:	40a0      	lsls	r0, r4
 8001e18:	e006      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x156>
 8001e1a:	6948      	ldr	r0, [r1, #20]
 8001e1c:	681c      	ldr	r4, [r3, #0]
 8001e1e:	68e4      	ldr	r4, [r4, #12]
 8001e20:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8001e24:	0064      	lsls	r4, r4, #1
 8001e26:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e28:	690d      	ldr	r5, [r1, #16]
 8001e2a:	2d04      	cmp	r5, #4
 8001e2c:	d036      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x1ca>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e2e:	681f      	ldr	r7, [r3, #0]
 8001e30:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	3760      	adds	r7, #96	; 0x60
    MODIFY_REG(*preg,
 8001e34:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8001e38:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8001e3c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001e40:	4330      	orrs	r0, r6
 8001e42:	4320      	orrs	r0, r4
 8001e44:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	690e      	ldr	r6, [r1, #16]
 8001e4c:	7e4c      	ldrb	r4, [r1, #25]
 8001e4e:	2c01      	cmp	r4, #1
 8001e50:	d01e      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x1be>
 8001e52:	4615      	mov	r5, r2
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e54:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e56:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001e5a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8001e5e:	432c      	orrs	r4, r5
 8001e60:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e64:	681d      	ldr	r5, [r3, #0]
 8001e66:	690c      	ldr	r4, [r1, #16]
 8001e68:	7e08      	ldrb	r0, [r1, #24]
 8001e6a:	2801      	cmp	r0, #1
 8001e6c:	d013      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e6e:	6928      	ldr	r0, [r5, #16]
 8001e70:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8001e74:	f004 041f 	and.w	r4, r4, #31
 8001e78:	40a2      	lsls	r2, r4
 8001e7a:	4302      	orrs	r2, r0
 8001e7c:	612a      	str	r2, [r5, #16]
}
 8001e7e:	e774      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x98>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e80:	6948      	ldr	r0, [r1, #20]
 8001e82:	68e4      	ldr	r4, [r4, #12]
 8001e84:	08a4      	lsrs	r4, r4, #2
 8001e86:	f004 0404 	and.w	r4, r4, #4
 8001e8a:	0064      	lsls	r4, r4, #1
 8001e8c:	40a0      	lsls	r0, r4
 8001e8e:	e7cb      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x156>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001e90:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8001e94:	e7de      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x182>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e9a:	e7e8      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x19c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001ea0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ea4:	680c      	ldr	r4, [r1, #0]
 8001ea6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x216>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001eb0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001eb4:	680c      	ldr	r4, [r1, #0]
 8001eb6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001eba:	d01a      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x220>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ec0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ec4:	680c      	ldr	r4, [r1, #0]
 8001ec6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001eca:	d017      	beq.n	8001efc <HAL_ADC_ConfigChannel+0x22a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001ed0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ed4:	680c      	ldr	r4, [r1, #0]
 8001ed6:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001eda:	f47f af46 	bne.w	8001d6a <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ede:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001ee0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee4:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001ee6:	e740      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ee8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001eea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eee:	6602      	str	r2, [r0, #96]	; 0x60
 8001ef0:	e7dc      	b.n	8001eac <HAL_ADC_ConfigChannel+0x1da>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ef2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001ef4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef8:	6642      	str	r2, [r0, #100]	; 0x64
 8001efa:	e7df      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1ea>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001efc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001efe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f02:	6682      	str	r2, [r0, #104]	; 0x68
 8001f04:	e7e2      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1fa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f06:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f08:	680a      	ldr	r2, [r1, #0]
 8001f0a:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	d134      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x2aa>
 8001f12:	0e90      	lsrs	r0, r2, #26
 8001f14:	3001      	adds	r0, #1
 8001f16:	f000 001f 	and.w	r0, r0, #31
 8001f1a:	2809      	cmp	r0, #9
 8001f1c:	bf8c      	ite	hi
 8001f1e:	2000      	movhi	r0, #0
 8001f20:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d061      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x318>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f26:	2d00      	cmp	r5, #0
 8001f28:	d137      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x2c8>
 8001f2a:	0e90      	lsrs	r0, r2, #26
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	0680      	lsls	r0, r0, #26
 8001f30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	d13c      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x2e0>
 8001f38:	0e96      	lsrs	r6, r2, #26
 8001f3a:	3601      	adds	r6, #1
 8001f3c:	f006 071f 	and.w	r7, r6, #31
 8001f40:	2601      	movs	r6, #1
 8001f42:	40be      	lsls	r6, r7
 8001f44:	4330      	orrs	r0, r6
 8001f46:	2d00      	cmp	r5, #0
 8001f48:	d141      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x2fc>
 8001f4a:	0e92      	lsrs	r2, r2, #26
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f56:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f58:	4302      	orrs	r2, r0
 8001f5a:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f5c:	3414      	adds	r4, #20
 8001f5e:	0e55      	lsrs	r5, r2, #25
 8001f60:	00ad      	lsls	r5, r5, #2
 8001f62:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001f66:	5966      	ldr	r6, [r4, r5]
 8001f68:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001f6c:	2707      	movs	r7, #7
 8001f6e:	4097      	lsls	r7, r2
 8001f70:	ea26 0607 	bic.w	r6, r6, r7
 8001f74:	4090      	lsls	r0, r2
 8001f76:	4330      	orrs	r0, r6
 8001f78:	5160      	str	r0, [r4, r5]
}
 8001f7a:	e714      	b.n	8001da6 <HAL_ADC_ConfigChannel+0xd4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001f80:	b148      	cbz	r0, 8001f96 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f82:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f86:	3001      	adds	r0, #1
 8001f88:	f000 001f 	and.w	r0, r0, #31
 8001f8c:	2809      	cmp	r0, #9
 8001f8e:	bf8c      	ite	hi
 8001f90:	2000      	movhi	r0, #0
 8001f92:	2001      	movls	r0, #1
 8001f94:	e7c5      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x250>
    return 32U;
 8001f96:	2020      	movs	r0, #32
 8001f98:	e7f5      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x2b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001f9e:	b130      	cbz	r0, 8001fae <HAL_ADC_ConfigChannel+0x2dc>
  return __builtin_clz(value);
 8001fa0:	fab0 f080 	clz	r0, r0
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	0680      	lsls	r0, r0, #26
 8001fa8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001fac:	e7c2      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x262>
    return 32U;
 8001fae:	2020      	movs	r0, #32
 8001fb0:	e7f8      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001fb6:	b146      	cbz	r6, 8001fca <HAL_ADC_ConfigChannel+0x2f8>
  return __builtin_clz(value);
 8001fb8:	fab6 f686 	clz	r6, r6
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	f006 061f 	and.w	r6, r6, #31
 8001fc2:	2701      	movs	r7, #1
 8001fc4:	fa07 f606 	lsl.w	r6, r7, r6
 8001fc8:	e7bc      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8001fca:	2620      	movs	r6, #32
 8001fcc:	e7f6      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x2ea>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001fd2:	b142      	cbz	r2, 8001fe6 <HAL_ADC_ConfigChannel+0x314>
  return __builtin_clz(value);
 8001fd4:	fab2 f282 	clz	r2, r2
 8001fd8:	3201      	adds	r2, #1
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001fe2:	0512      	lsls	r2, r2, #20
 8001fe4:	e7b8      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x286>
    return 32U;
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	e7f6      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x306>
 8001fea:	b9cd      	cbnz	r5, 8002020 <HAL_ADC_ConfigChannel+0x34e>
 8001fec:	0e90      	lsrs	r0, r2, #26
 8001fee:	3001      	adds	r0, #1
 8001ff0:	0680      	lsls	r0, r0, #26
 8001ff2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001ff6:	b9fd      	cbnz	r5, 8002038 <HAL_ADC_ConfigChannel+0x366>
 8001ff8:	0e96      	lsrs	r6, r2, #26
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	f006 071f 	and.w	r7, r6, #31
 8002000:	2601      	movs	r6, #1
 8002002:	40be      	lsls	r6, r7
 8002004:	4330      	orrs	r0, r6
 8002006:	bb5d      	cbnz	r5, 8002060 <HAL_ADC_ConfigChannel+0x38e>
 8002008:	0e92      	lsrs	r2, r2, #26
 800200a:	3201      	adds	r2, #1
 800200c:	f002 021f 	and.w	r2, r2, #31
 8002010:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002014:	3a1e      	subs	r2, #30
 8002016:	0512      	lsls	r2, r2, #20
 8002018:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201c:	4302      	orrs	r2, r0
 800201e:	e79c      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x288>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002024:	b130      	cbz	r0, 8002034 <HAL_ADC_ConfigChannel+0x362>
  return __builtin_clz(value);
 8002026:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800202a:	3001      	adds	r0, #1
 800202c:	0680      	lsls	r0, r0, #26
 800202e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002032:	e7e0      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x324>
    return 32U;
 8002034:	2020      	movs	r0, #32
 8002036:	e7f8      	b.n	800202a <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800203c:	b146      	cbz	r6, 8002050 <HAL_ADC_ConfigChannel+0x37e>
  return __builtin_clz(value);
 800203e:	fab6 f686 	clz	r6, r6
 8002042:	3601      	adds	r6, #1
 8002044:	f006 061f 	and.w	r6, r6, #31
 8002048:	2701      	movs	r7, #1
 800204a:	fa07 f606 	lsl.w	r6, r7, r6
 800204e:	e7d9      	b.n	8002004 <HAL_ADC_ConfigChannel+0x332>
    return 32U;
 8002050:	2620      	movs	r6, #32
 8002052:	e7f6      	b.n	8002042 <HAL_ADC_ConfigChannel+0x370>
 8002054:	000fffff 	.word	0x000fffff
 8002058:	47ff0000 	.word	0x47ff0000
 800205c:	5c001000 	.word	0x5c001000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002064:	b15a      	cbz	r2, 800207e <HAL_ADC_ConfigChannel+0x3ac>
  return __builtin_clz(value);
 8002066:	fab2 f282 	clz	r2, r2
 800206a:	3201      	adds	r2, #1
 800206c:	f002 021f 	and.w	r2, r2, #31
 8002070:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002074:	3a1e      	subs	r2, #30
 8002076:	0512      	lsls	r2, r2, #20
 8002078:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800207c:	e7ce      	b.n	800201c <HAL_ADC_ConfigChannel+0x34a>
    return 32U;
 800207e:	2220      	movs	r2, #32
 8002080:	e7f3      	b.n	800206a <HAL_ADC_ConfigChannel+0x398>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	4842      	ldr	r0, [pc, #264]	; (8002190 <HAL_ADC_ConfigChannel+0x4be>)
 8002086:	4c43      	ldr	r4, [pc, #268]	; (8002194 <HAL_ADC_ConfigChannel+0x4c2>)
 8002088:	42a1      	cmp	r1, r4
 800208a:	bf18      	it	ne
 800208c:	4281      	cmpne	r1, r0
 800208e:	bf0c      	ite	eq
 8002090:	2001      	moveq	r0, #1
 8002092:	2000      	movne	r0, #0
 8002094:	d121      	bne.n	80020da <HAL_ADC_ConfigChannel+0x408>
 8002096:	4e40      	ldr	r6, [pc, #256]	; (8002198 <HAL_ADC_ConfigChannel+0x4c6>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002098:	68b5      	ldr	r5, [r6, #8]
 800209a:	f005 77e0 	and.w	r7, r5, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800209e:	b1f0      	cbz	r0, 80020de <HAL_ADC_ConfigChannel+0x40c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a0:	483b      	ldr	r0, [pc, #236]	; (8002190 <HAL_ADC_ConfigChannel+0x4be>)
 80020a2:	6880      	ldr	r0, [r0, #8]
 80020a4:	f010 0001 	ands.w	r0, r0, #1
 80020a8:	d000      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x3da>
 80020aa:	2001      	movs	r0, #1
 80020ac:	4c39      	ldr	r4, [pc, #228]	; (8002194 <HAL_ADC_ConfigChannel+0x4c2>)
 80020ae:	68a4      	ldr	r4, [r4, #8]
 80020b0:	f014 0401 	ands.w	r4, r4, #1
 80020b4:	d000      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x3e6>
 80020b6:	2401      	movs	r4, #1
 80020b8:	4320      	orrs	r0, r4
 80020ba:	bf0c      	ite	eq
 80020bc:	2001      	moveq	r0, #1
 80020be:	2000      	movne	r0, #0
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d059      	beq.n	8002178 <HAL_ADC_ConfigChannel+0x4a6>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020c4:	4835      	ldr	r0, [pc, #212]	; (800219c <HAL_ADC_ConfigChannel+0x4ca>)
 80020c6:	4282      	cmp	r2, r0
 80020c8:	d012      	beq.n	80020f0 <HAL_ADC_ConfigChannel+0x41e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ca:	4835      	ldr	r0, [pc, #212]	; (80021a0 <HAL_ADC_ConfigChannel+0x4ce>)
 80020cc:	4282      	cmp	r2, r0
 80020ce:	d031      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x462>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020d0:	4834      	ldr	r0, [pc, #208]	; (80021a4 <HAL_ADC_ConfigChannel+0x4d2>)
 80020d2:	4282      	cmp	r2, r0
 80020d4:	d03f      	beq.n	8002156 <HAL_ADC_ConfigChannel+0x484>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d6:	2000      	movs	r0, #0
 80020d8:	e612      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020da:	4e33      	ldr	r6, [pc, #204]	; (80021a8 <HAL_ADC_ConfigChannel+0x4d6>)
 80020dc:	e7dc      	b.n	8002098 <HAL_ADC_ConfigChannel+0x3c6>
 80020de:	4833      	ldr	r0, [pc, #204]	; (80021ac <HAL_ADC_ConfigChannel+0x4da>)
 80020e0:	6880      	ldr	r0, [r0, #8]
 80020e2:	f010 0001 	ands.w	r0, r0, #1
 80020e6:	d000      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x418>
 80020e8:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020ea:	f080 0001 	eor.w	r0, r0, #1
 80020ee:	e7e7      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x3ee>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80020f4:	d1e9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x3f8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_ADC_ConfigChannel+0x4da>)
 80020f8:	4291      	cmp	r1, r2
 80020fa:	d001      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x42e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fc:	2000      	movs	r0, #0
 80020fe:	e5ff      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002100:	f447 0200 	orr.w	r2, r7, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002104:	68b1      	ldr	r1, [r6, #8]
 8002106:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800210a:	430a      	orrs	r2, r1
 800210c:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_ADC_ConfigChannel+0x4de>)
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	0992      	lsrs	r2, r2, #6
 8002114:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_ADC_ConfigChannel+0x4e2>)
 8002116:	fba1 1202 	umull	r1, r2, r1, r2
 800211a:	0992      	lsrs	r2, r2, #6
 800211c:	3201      	adds	r2, #1
 800211e:	0052      	lsls	r2, r2, #1
 8002120:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x458>
                wait_loop_index--;
 8002124:	9a01      	ldr	r2, [sp, #4]
 8002126:	3a01      	subs	r2, #1
 8002128:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800212a:	9a01      	ldr	r2, [sp, #4]
 800212c:	2a00      	cmp	r2, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x452>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2000      	movs	r0, #0
 8002132:	e5e5      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002134:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8002138:	d1ca      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x3fe>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_ADC_ConfigChannel+0x4da>)
 800213c:	4291      	cmp	r1, r2
 800213e:	d001      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x472>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	e5dd      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002144:	f047 7280 	orr.w	r2, r7, #16777216	; 0x1000000
 8002148:	68b1      	ldr	r1, [r6, #8]
 800214a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800214e:	430a      	orrs	r2, r1
 8002150:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002152:	2000      	movs	r0, #0
}
 8002154:	e5d4      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002156:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800215a:	d115      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x4b6>
            if (ADC_VREFINT_INSTANCE(hadc))
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_ADC_ConfigChannel+0x4da>)
 800215e:	4291      	cmp	r1, r2
 8002160:	d001      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x494>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002162:	2000      	movs	r0, #0
 8002164:	e5cc      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002166:	f447 0280 	orr.w	r2, r7, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800216a:	68b1      	ldr	r1, [r6, #8]
 800216c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002170:	430a      	orrs	r2, r1
 8002172:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002174:	2000      	movs	r0, #0
}
 8002176:	e5c3      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e5bd      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2000      	movs	r0, #0
 8002186:	e5bb      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
 8002188:	2000      	movs	r0, #0
 800218a:	e5b9      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800218c:	2002      	movs	r0, #2
 800218e:	e5ba      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x34>
 8002190:	40022000 	.word	0x40022000
 8002194:	40022100 	.word	0x40022100
 8002198:	40022300 	.word	0x40022300
 800219c:	cb840000 	.word	0xcb840000
 80021a0:	c7520000 	.word	0xc7520000
 80021a4:	cfb80000 	.word	0xcfb80000
 80021a8:	58026300 	.word	0x58026300
 80021ac:	58026000 	.word	0x58026000
 80021b0:	24000000 	.word	0x24000000
 80021b4:	053e2d63 	.word	0x053e2d63

080021b8 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 80021b8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80021bc:	2a01      	cmp	r2, #1
 80021be:	f000 821e 	beq.w	80025fe <HAL_ADC_AnalogWDGConfig+0x446>
{
 80021c2:	b470      	push	{r4, r5, r6}
 80021c4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021cc:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ce:	68a2      	ldr	r2, [r4, #8]
 80021d0:	f012 0204 	ands.w	r2, r2, #4
 80021d4:	d000      	beq.n	80021d8 <HAL_ADC_AnalogWDGConfig+0x20>
 80021d6:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021d8:	68a0      	ldr	r0, [r4, #8]
 80021da:	f010 0008 	ands.w	r0, r0, #8
 80021de:	d000      	beq.n	80021e2 <HAL_ADC_AnalogWDGConfig+0x2a>
 80021e0:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e2:	4302      	orrs	r2, r0
 80021e4:	f040 8201 	bne.w	80025ea <HAL_ADC_AnalogWDGConfig+0x432>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80021e8:	6808      	ldr	r0, [r1, #0]
 80021ea:	4aac      	ldr	r2, [pc, #688]	; (800249c <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80021ec:	4290      	cmp	r0, r2
 80021ee:	d039      	beq.n	8002264 <HAL_ADC_AnalogWDGConfig+0xac>
      switch (AnalogWDGConfig->WatchdogMode)
 80021f0:	684a      	ldr	r2, [r1, #4]
 80021f2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 80021f6:	f000 80f4 	beq.w	80023e2 <HAL_ADC_AnalogWDGConfig+0x22a>
 80021fa:	f200 80eb 	bhi.w	80023d4 <HAL_ADC_AnalogWDGConfig+0x21c>
 80021fe:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002202:	f000 80ee 	beq.w	80023e2 <HAL_ADC_AnalogWDGConfig+0x22a>
 8002206:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800220a:	f000 8121 	beq.w	8002450 <HAL_ADC_AnalogWDGConfig+0x298>
 800220e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002212:	f000 811d 	beq.w	8002450 <HAL_ADC_AnalogWDGConfig+0x298>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8002216:	340c      	adds	r4, #12
 8002218:	f3c0 5201 	ubfx	r2, r0, #20, #2
 800221c:	f000 0501 	and.w	r5, r0, #1
 8002220:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8002224:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  MODIFY_REG(*preg,
 8002228:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 800222c:	4e9c      	ldr	r6, [pc, #624]	; (80024a0 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 800222e:	4006      	ands	r6, r0
 8002230:	ea25 0506 	bic.w	r5, r5, r6
 8002234:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002238:	4a9a      	ldr	r2, [pc, #616]	; (80024a4 <HAL_ADC_AnalogWDGConfig+0x2ec>)
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002240:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002244:	f000 8145 	beq.w	80024d2 <HAL_ADC_AnalogWDGConfig+0x31a>
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	68c2      	ldr	r2, [r0, #12]
 800224c:	f012 0f10 	tst.w	r2, #16
 8002250:	f040 815a 	bne.w	8002508 <HAL_ADC_AnalogWDGConfig+0x350>
 8002254:	690c      	ldr	r4, [r1, #16]
 8002256:	68c2      	ldr	r2, [r0, #12]
 8002258:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	fa04 f202 	lsl.w	r2, r4, r2
 8002262:	e13e      	b.n	80024e2 <HAL_ADC_AnalogWDGConfig+0x32a>
      switch (AnalogWDGConfig->WatchdogMode)
 8002264:	684a      	ldr	r2, [r1, #4]
 8002266:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 800226a:	d045      	beq.n	80022f8 <HAL_ADC_AnalogWDGConfig+0x140>
 800226c:	d816      	bhi.n	800229c <HAL_ADC_AnalogWDGConfig+0xe4>
 800226e:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002272:	d024      	beq.n	80022be <HAL_ADC_AnalogWDGConfig+0x106>
 8002274:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8002278:	d106      	bne.n	8002288 <HAL_ADC_AnalogWDGConfig+0xd0>
 800227a:	68e0      	ldr	r0, [r4, #12]
 800227c:	4a8a      	ldr	r2, [pc, #552]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 800227e:	4002      	ands	r2, r0
 8002280:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002284:	60e2      	str	r2, [r4, #12]
}
 8002286:	e024      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
 8002288:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800228c:	d146      	bne.n	800231c <HAL_ADC_AnalogWDGConfig+0x164>
  MODIFY_REG(*preg,
 800228e:	68e0      	ldr	r0, [r4, #12]
 8002290:	4a85      	ldr	r2, [pc, #532]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002292:	4002      	ands	r2, r0
 8002294:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002298:	60e2      	str	r2, [r4, #12]
}
 800229a:	e01a      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
 800229c:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80022a0:	d035      	beq.n	800230e <HAL_ADC_AnalogWDGConfig+0x156>
 80022a2:	f1b2 7fe0 	cmp.w	r2, #29360128	; 0x1c00000
 80022a6:	d139      	bne.n	800231c <HAL_ADC_AnalogWDGConfig+0x164>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80022a8:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(*preg,
 80022aa:	68e5      	ldr	r5, [r4, #12]
 80022ac:	4a7e      	ldr	r2, [pc, #504]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 80022ae:	402a      	ands	r2, r5
 80022b0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022b4:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 80022b8:	4302      	orrs	r2, r0
 80022ba:	60e2      	str	r2, [r4, #12]
}
 80022bc:	e009      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80022be:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(*preg,
 80022c0:	68e5      	ldr	r5, [r4, #12]
 80022c2:	4a79      	ldr	r2, [pc, #484]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 80022c4:	402a      	ands	r2, r5
 80022c6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80022ce:	4302      	orrs	r2, r0
 80022d0:	60e2      	str	r2, [r4, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80022d2:	4a74      	ldr	r2, [pc, #464]	; (80024a4 <HAL_ADC_AnalogWDGConfig+0x2ec>)
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80022da:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80022de:	d022      	beq.n	8002326 <HAL_ADC_AnalogWDGConfig+0x16e>
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	68c2      	ldr	r2, [r0, #12]
 80022e4:	f012 0f10 	tst.w	r2, #16
 80022e8:	d138      	bne.n	800235c <HAL_ADC_AnalogWDGConfig+0x1a4>
 80022ea:	690c      	ldr	r4, [r1, #16]
 80022ec:	68c2      	ldr	r2, [r0, #12]
 80022ee:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80022f2:	0052      	lsls	r2, r2, #1
 80022f4:	4094      	lsls	r4, r2
 80022f6:	e01d      	b.n	8002334 <HAL_ADC_AnalogWDGConfig+0x17c>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80022f8:	6888      	ldr	r0, [r1, #8]
 80022fa:	68e5      	ldr	r5, [r4, #12]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 80022fe:	402a      	ands	r2, r5
 8002300:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002304:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8002308:	4302      	orrs	r2, r0
 800230a:	60e2      	str	r2, [r4, #12]
}
 800230c:	e7e1      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
  MODIFY_REG(*preg,
 800230e:	68e0      	ldr	r0, [r4, #12]
 8002310:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002312:	4002      	ands	r2, r0
 8002314:	f042 72c0 	orr.w	r2, r2, #25165824	; 0x1800000
 8002318:	60e2      	str	r2, [r4, #12]
}
 800231a:	e7da      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
  MODIFY_REG(*preg,
 800231c:	68e0      	ldr	r0, [r4, #12]
 800231e:	4a62      	ldr	r2, [pc, #392]	; (80024a8 <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002320:	4002      	ands	r2, r0
 8002322:	60e2      	str	r2, [r4, #12]
}
 8002324:	e7d5      	b.n	80022d2 <HAL_ADC_AnalogWDGConfig+0x11a>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002326:	690c      	ldr	r4, [r1, #16]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68d2      	ldr	r2, [r2, #12]
 800232c:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	4094      	lsls	r4, r2
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002334:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_ADC_AnalogWDGConfig+0x2ec>)
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800233c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002340:	d014      	beq.n	800236c <HAL_ADC_AnalogWDGConfig+0x1b4>
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68d0      	ldr	r0, [r2, #12]
 8002346:	f010 0f10 	tst.w	r0, #16
 800234a:	d134      	bne.n	80023b6 <HAL_ADC_AnalogWDGConfig+0x1fe>
 800234c:	6948      	ldr	r0, [r1, #20]
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002354:	0052      	lsls	r2, r2, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	e00f      	b.n	800237c <HAL_ADC_AnalogWDGConfig+0x1c4>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800235c:	690c      	ldr	r4, [r1, #16]
 800235e:	68c2      	ldr	r2, [r0, #12]
 8002360:	0892      	lsrs	r2, r2, #2
 8002362:	f002 0204 	and.w	r2, r2, #4
 8002366:	0052      	lsls	r2, r2, #1
 8002368:	4094      	lsls	r4, r2
 800236a:	e7e3      	b.n	8002334 <HAL_ADC_AnalogWDGConfig+0x17c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800236c:	6948      	ldr	r0, [r1, #20]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002376:	0052      	lsls	r2, r2, #1
 8002378:	fa00 f202 	lsl.w	r2, r0, r2
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800237c:	681d      	ldr	r5, [r3, #0]
 800237e:	6a28      	ldr	r0, [r5, #32]
 8002380:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8002384:	4310      	orrs	r0, r2
 8002386:	6228      	str	r0, [r5, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800238c:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
 8002390:	4322      	orrs	r2, r4
 8002392:	6242      	str	r2, [r0, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800239c:	681a      	ldr	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800239e:	2080      	movs	r0, #128	; 0x80
 80023a0:	6010      	str	r0, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80023a2:	7b0a      	ldrb	r2, [r1, #12]
 80023a4:	2a01      	cmp	r2, #1
 80023a6:	d00f      	beq.n	80023c8 <HAL_ADC_AnalogWDGConfig+0x210>
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80023a8:	6819      	ldr	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80023aa:	684a      	ldr	r2, [r1, #4]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b0:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2000      	movs	r0, #0
}
 80023b4:	e11e      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80023b6:	6948      	ldr	r0, [r1, #20]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	0892      	lsrs	r2, r2, #2
 80023bc:	f002 0204 	and.w	r2, r2, #4
 80023c0:	0052      	lsls	r2, r2, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	e7d9      	b.n	800237c <HAL_ADC_AnalogWDGConfig+0x1c4>
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80023c8:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80023ca:	684a      	ldr	r2, [r1, #4]
 80023cc:	4302      	orrs	r2, r0
 80023ce:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2000      	movs	r0, #0
}
 80023d2:	e10f      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
      switch (AnalogWDGConfig->WatchdogMode)
 80023d4:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80023d8:	d03a      	beq.n	8002450 <HAL_ADC_AnalogWDGConfig+0x298>
 80023da:	f1b2 7fe0 	cmp.w	r2, #29360128	; 0x1c00000
 80023de:	f47f af1a 	bne.w	8002216 <HAL_ADC_AnalogWDGConfig+0x5e>
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80023e2:	4a32      	ldr	r2, [pc, #200]	; (80024ac <HAL_ADC_AnalogWDGConfig+0x2f4>)
 80023e4:	4290      	cmp	r0, r2
 80023e6:	d008      	beq.n	80023fa <HAL_ADC_AnalogWDGConfig+0x242>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80023e8:	688a      	ldr	r2, [r1, #8]
 80023ea:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80023ee:	b9f0      	cbnz	r0, 800242e <HAL_ADC_AnalogWDGConfig+0x276>
 80023f0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	4090      	lsls	r0, r2
 80023f8:	e022      	b.n	8002440 <HAL_ADC_AnalogWDGConfig+0x288>
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80023fa:	688a      	ldr	r2, [r1, #8]
 80023fc:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002400:	b948      	cbnz	r0, 8002416 <HAL_ADC_AnalogWDGConfig+0x25e>
 8002402:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002406:	2001      	movs	r0, #1
 8002408:	4090      	lsls	r0, r2
 800240a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800240e:	4302      	orrs	r2, r0
 8002410:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8002414:	e710      	b.n	8002238 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800241a:	b132      	cbz	r2, 800242a <HAL_ADC_AnalogWDGConfig+0x272>
  return __builtin_clz(value);
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2001      	movs	r0, #1
 8002426:	4090      	lsls	r0, r2
 8002428:	e7ef      	b.n	800240a <HAL_ADC_AnalogWDGConfig+0x252>
    return 32U;
 800242a:	2220      	movs	r2, #32
 800242c:	e7f8      	b.n	8002420 <HAL_ADC_AnalogWDGConfig+0x268>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002432:	b15a      	cbz	r2, 800244c <HAL_ADC_AnalogWDGConfig+0x294>
  return __builtin_clz(value);
 8002434:	fab2 f282 	clz	r2, r2
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2001      	movs	r0, #1
 800243e:	4090      	lsls	r0, r2
 8002440:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8002444:	4302      	orrs	r2, r0
 8002446:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 800244a:	e6f5      	b.n	8002238 <HAL_ADC_AnalogWDGConfig+0x80>
    return 32U;
 800244c:	2220      	movs	r2, #32
 800244e:	e7f3      	b.n	8002438 <HAL_ADC_AnalogWDGConfig+0x280>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_ADC_AnalogWDGConfig+0x2f4>)
 8002452:	4290      	cmp	r0, r2
 8002454:	d008      	beq.n	8002468 <HAL_ADC_AnalogWDGConfig+0x2b0>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002456:	688a      	ldr	r2, [r1, #8]
 8002458:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800245c:	bb40      	cbnz	r0, 80024b0 <HAL_ADC_AnalogWDGConfig+0x2f8>
 800245e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002462:	2001      	movs	r0, #1
 8002464:	4090      	lsls	r0, r2
 8002466:	e02c      	b.n	80024c2 <HAL_ADC_AnalogWDGConfig+0x30a>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002468:	688a      	ldr	r2, [r1, #8]
 800246a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800246e:	b948      	cbnz	r0, 8002484 <HAL_ADC_AnalogWDGConfig+0x2cc>
 8002470:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002474:	2001      	movs	r0, #1
 8002476:	4090      	lsls	r0, r2
 8002478:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800247c:	4302      	orrs	r2, r0
 800247e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8002482:	e6d9      	b.n	8002238 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002488:	b132      	cbz	r2, 8002498 <HAL_ADC_AnalogWDGConfig+0x2e0>
  return __builtin_clz(value);
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2001      	movs	r0, #1
 8002494:	4090      	lsls	r0, r2
 8002496:	e7ef      	b.n	8002478 <HAL_ADC_AnalogWDGConfig+0x2c0>
    return 32U;
 8002498:	2220      	movs	r2, #32
 800249a:	e7f8      	b.n	800248e <HAL_ADC_AnalogWDGConfig+0x2d6>
 800249c:	7dc00000 	.word	0x7dc00000
 80024a0:	7dcfffff 	.word	0x7dcfffff
 80024a4:	5c001000 	.word	0x5c001000
 80024a8:	823fffff 	.word	0x823fffff
 80024ac:	001fffff 	.word	0x001fffff
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80024b4:	b15a      	cbz	r2, 80024ce <HAL_ADC_AnalogWDGConfig+0x316>
  return __builtin_clz(value);
 80024b6:	fab2 f282 	clz	r2, r2
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2001      	movs	r0, #1
 80024c0:	4090      	lsls	r0, r2
 80024c2:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80024c6:	4302      	orrs	r2, r0
 80024c8:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80024cc:	e6b4      	b.n	8002238 <HAL_ADC_AnalogWDGConfig+0x80>
    return 32U;
 80024ce:	2220      	movs	r2, #32
 80024d0:	e7f3      	b.n	80024ba <HAL_ADC_AnalogWDGConfig+0x302>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80024d2:	6908      	ldr	r0, [r1, #16]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68d2      	ldr	r2, [r2, #12]
 80024d8:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80024dc:	0052      	lsls	r2, r2, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80024e2:	4848      	ldr	r0, [pc, #288]	; (8002604 <HAL_ADC_AnalogWDGConfig+0x44c>)
 80024e4:	6800      	ldr	r0, [r0, #0]
 80024e6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80024ea:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80024ee:	d014      	beq.n	800251a <HAL_ADC_AnalogWDGConfig+0x362>
 80024f0:	681c      	ldr	r4, [r3, #0]
 80024f2:	68e0      	ldr	r0, [r4, #12]
 80024f4:	f010 0f10 	tst.w	r0, #16
 80024f8:	d140      	bne.n	800257c <HAL_ADC_AnalogWDGConfig+0x3c4>
 80024fa:	6948      	ldr	r0, [r1, #20]
 80024fc:	68e4      	ldr	r4, [r4, #12]
 80024fe:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002502:	0064      	lsls	r4, r4, #1
 8002504:	40a0      	lsls	r0, r4
 8002506:	e00f      	b.n	8002528 <HAL_ADC_AnalogWDGConfig+0x370>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002508:	690c      	ldr	r4, [r1, #16]
 800250a:	68c2      	ldr	r2, [r0, #12]
 800250c:	0892      	lsrs	r2, r2, #2
 800250e:	f002 0204 	and.w	r2, r2, #4
 8002512:	0052      	lsls	r2, r2, #1
 8002514:	fa04 f202 	lsl.w	r2, r4, r2
 8002518:	e7e3      	b.n	80024e2 <HAL_ADC_AnalogWDGConfig+0x32a>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800251a:	6948      	ldr	r0, [r1, #20]
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	68e4      	ldr	r4, [r4, #12]
 8002520:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002524:	0064      	lsls	r4, r4, #1
 8002526:	40a0      	lsls	r0, r4
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002528:	4c37      	ldr	r4, [pc, #220]	; (8002608 <HAL_ADC_AnalogWDGConfig+0x450>)
 800252a:	680d      	ldr	r5, [r1, #0]
 800252c:	42a5      	cmp	r5, r4
 800252e:	d02d      	beq.n	800258c <HAL_ADC_AnalogWDGConfig+0x3d4>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8002530:	681d      	ldr	r5, [r3, #0]
 8002532:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8002536:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800253a:	4320      	orrs	r0, r4
 800253c:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8002540:	681c      	ldr	r4, [r3, #0]
 8002542:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8002546:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 800254a:	4302      	orrs	r2, r0
 800254c:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002550:	6808      	ldr	r0, [r1, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_ADC_AnalogWDGConfig+0x450>)
 8002554:	4290      	cmp	r0, r2
 8002556:	d02a      	beq.n	80025ae <HAL_ADC_AnalogWDGConfig+0x3f6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002560:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002566:	6010      	str	r0, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002568:	7b0a      	ldrb	r2, [r1, #12]
 800256a:	2a01      	cmp	r2, #1
 800256c:	d037      	beq.n	80025de <HAL_ADC_AnalogWDGConfig+0x426>
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800256e:	6819      	ldr	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002570:	684a      	ldr	r2, [r1, #4]
 8002572:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002576:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	2000      	movs	r0, #0
}
 800257a:	e03b      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800257c:	6948      	ldr	r0, [r1, #20]
 800257e:	68e4      	ldr	r4, [r4, #12]
 8002580:	08a4      	lsrs	r4, r4, #2
 8002582:	f004 0404 	and.w	r4, r4, #4
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	40a0      	lsls	r0, r4
 800258a:	e7cd      	b.n	8002528 <HAL_ADC_AnalogWDGConfig+0x370>
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800258c:	681d      	ldr	r5, [r3, #0]
 800258e:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8002592:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8002596:	4320      	orrs	r0, r4
 8002598:	f8c5 00b0 	str.w	r0, [r5, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800259c:	681c      	ldr	r4, [r3, #0]
 800259e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80025a2:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80025a6:	4302      	orrs	r2, r0
 80025a8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80025ac:	e7d0      	b.n	8002550 <HAL_ADC_AnalogWDGConfig+0x398>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025b0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80025b6:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80025b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025bc:	6010      	str	r0, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 80025be:	7b0a      	ldrb	r2, [r1, #12]
 80025c0:	2a01      	cmp	r2, #1
 80025c2:	d006      	beq.n	80025d2 <HAL_ADC_AnalogWDGConfig+0x41a>
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80025c4:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80025c6:	684a      	ldr	r2, [r1, #4]
 80025c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025cc:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
}
 80025d0:	e010      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80025d2:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80025d4:	684a      	ldr	r2, [r1, #4]
 80025d6:	4302      	orrs	r2, r0
 80025d8:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025da:	2000      	movs	r0, #0
}
 80025dc:	e00a      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80025de:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80025e0:	684a      	ldr	r2, [r1, #4]
 80025e2:	4302      	orrs	r2, r0
 80025e4:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2000      	movs	r0, #0
}
 80025e8:	e004      	b.n	80025f4 <HAL_ADC_AnalogWDGConfig+0x43c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80025fa:	bc70      	pop	{r4, r5, r6}
 80025fc:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80025fe:	2002      	movs	r0, #2
}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	5c001000 	.word	0x5c001000
 8002608:	001fffff 	.word	0x001fffff

0800260c <HAL_ADC_GetState>:
  return hadc->State;
 800260c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_GetError>:
  return hadc->ErrorCode;
 8002610:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
 8002612:	4770      	bx	lr

08002614 <ADC_ConversionStop>:
{
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002618:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800261a:	6883      	ldr	r3, [r0, #8]
 800261c:	f013 0304 	ands.w	r3, r3, #4
 8002620:	d000      	beq.n	8002624 <ADC_ConversionStop+0x10>
 8002622:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002624:	6882      	ldr	r2, [r0, #8]
 8002626:	f012 0208 	ands.w	r2, r2, #8
 800262a:	d000      	beq.n	800262e <ADC_ConversionStop+0x1a>
 800262c:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800262e:	4313      	orrs	r3, r2
 8002630:	d067      	beq.n	8002702 <ADC_ConversionStop+0xee>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002632:	68c3      	ldr	r3, [r0, #12]
 8002634:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002638:	d004      	beq.n	8002644 <ADC_ConversionStop+0x30>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800263a:	8aa2      	ldrh	r2, [r4, #20]
 800263c:	f240 1301 	movw	r3, #257	; 0x101
 8002640:	429a      	cmp	r2, r3
 8002642:	d04a      	beq.n	80026da <ADC_ConversionStop+0xc6>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002644:	2902      	cmp	r1, #2
 8002646:	d00e      	beq.n	8002666 <ADC_ConversionStop+0x52>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002648:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	f012 0f04 	tst.w	r2, #4
 8002650:	d009      	beq.n	8002666 <ADC_ConversionStop+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	f012 0f02 	tst.w	r2, #2
 8002658:	d105      	bne.n	8002666 <ADC_ConversionStop+0x52>
  MODIFY_REG(ADCx->CR,
 800265a:	6898      	ldr	r0, [r3, #8]
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <ADC_ConversionStop+0xf4>)
 800265e:	4002      	ands	r2, r0
 8002660:	f042 0210 	orr.w	r2, r2, #16
 8002664:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002666:	2901      	cmp	r1, #1
 8002668:	d00e      	beq.n	8002688 <ADC_ConversionStop+0x74>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800266a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	f012 0f08 	tst.w	r2, #8
 8002672:	d009      	beq.n	8002688 <ADC_ConversionStop+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	f012 0f02 	tst.w	r2, #2
 800267a:	d105      	bne.n	8002688 <ADC_ConversionStop+0x74>
  MODIFY_REG(ADCx->CR,
 800267c:	6898      	ldr	r0, [r3, #8]
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <ADC_ConversionStop+0xf4>)
 8002680:	4002      	ands	r2, r0
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002688:	2902      	cmp	r1, #2
 800268a:	d034      	beq.n	80026f6 <ADC_ConversionStop+0xe2>
 800268c:	2903      	cmp	r1, #3
 800268e:	d134      	bne.n	80026fa <ADC_ConversionStop+0xe6>
 8002690:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8002692:	f7fe fd5f 	bl	8001154 <HAL_GetTick>
 8002696:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	422b      	tst	r3, r5
 800269e:	d02e      	beq.n	80026fe <ADC_ConversionStop+0xea>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026a0:	f7fe fd58 	bl	8001154 <HAL_GetTick>
 80026a4:	1b83      	subs	r3, r0, r6
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d9f6      	bls.n	8002698 <ADC_ConversionStop+0x84>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	422b      	tst	r3, r5
 80026b0:	d0f2      	beq.n	8002698 <ADC_ConversionStop+0x84>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b4:	f043 0310 	orr.w	r3, r3, #16
 80026b8:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80026c2:	2001      	movs	r0, #1
 80026c4:	e01e      	b.n	8002704 <ADC_ConversionStop+0xf0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80026d6:	2001      	movs	r0, #1
 80026d8:	e014      	b.n	8002704 <ADC_ConversionStop+0xf0>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80026da:	2300      	movs	r3, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026dc:	6802      	ldr	r2, [r0, #0]
 80026de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026e2:	d104      	bne.n	80026ee <ADC_ConversionStop+0xda>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <ADC_ConversionStop+0xf8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d8ed      	bhi.n	80026c6 <ADC_ConversionStop+0xb2>
        Conversion_Timeout_CPU_cycles ++;
 80026ea:	3301      	adds	r3, #1
 80026ec:	e7f6      	b.n	80026dc <ADC_ConversionStop+0xc8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026ee:	2340      	movs	r3, #64	; 0x40
 80026f0:	6003      	str	r3, [r0, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80026f2:	2101      	movs	r1, #1
 80026f4:	e7a8      	b.n	8002648 <ADC_ConversionStop+0x34>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026f6:	2508      	movs	r5, #8
 80026f8:	e7cb      	b.n	8002692 <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026fa:	2504      	movs	r5, #4
 80026fc:	e7c9      	b.n	8002692 <ADC_ConversionStop+0x7e>
  return HAL_OK;
 80026fe:	2000      	movs	r0, #0
 8002700:	e000      	b.n	8002704 <ADC_ConversionStop+0xf0>
 8002702:	2000      	movs	r0, #0
}
 8002704:	bd70      	pop	{r4, r5, r6, pc}
 8002706:	bf00      	nop
 8002708:	7fffffc0 	.word	0x7fffffc0
 800270c:	000cdbff 	.word	0x000cdbff

08002710 <ADC_Enable>:
{
 8002710:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002712:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	f012 0f01 	tst.w	r2, #1
 800271a:	d156      	bne.n	80027ca <ADC_Enable+0xba>
 800271c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <ADC_Enable+0xc0>)
 8002722:	4211      	tst	r1, r2
 8002724:	d009      	beq.n	800273a <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e048      	b.n	80027cc <ADC_Enable+0xbc>
  MODIFY_REG(ADCx->CR,
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <ADC_Enable+0xc4>)
 800273e:	400a      	ands	r2, r1
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002746:	f7fe fd05 	bl	8001154 <HAL_GetTick>
 800274a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <ADC_Enable+0xc8>)
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <ADC_Enable+0xcc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	bf18      	it	ne
 8002756:	428b      	cmpne	r3, r1
 8002758:	d10d      	bne.n	8002776 <ADC_Enable+0x66>
 800275a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002764:	491d      	ldr	r1, [pc, #116]	; (80027dc <ADC_Enable+0xcc>)
 8002766:	428b      	cmp	r3, r1
 8002768:	d007      	beq.n	800277a <ADC_Enable+0x6a>
 800276a:	4619      	mov	r1, r3
 800276c:	4299      	cmp	r1, r3
 800276e:	d007      	beq.n	8002780 <ADC_Enable+0x70>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002770:	b132      	cbz	r2, 8002780 <ADC_Enable+0x70>
  return HAL_OK;
 8002772:	2000      	movs	r0, #0
 8002774:	e02a      	b.n	80027cc <ADC_Enable+0xbc>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <ADC_Enable+0xd0>)
 8002778:	e7f1      	b.n	800275e <ADC_Enable+0x4e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800277a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 800277e:	e7f5      	b.n	800276c <ADC_Enable+0x5c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f012 0f01 	tst.w	r2, #1
 8002788:	d11d      	bne.n	80027c6 <ADC_Enable+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	f012 0f01 	tst.w	r2, #1
 8002790:	d105      	bne.n	800279e <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <ADC_Enable+0xc4>)
 8002796:	400a      	ands	r2, r1
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279e:	f7fe fcd9 	bl	8001154 <HAL_GetTick>
 80027a2:	1b40      	subs	r0, r0, r5
 80027a4:	2802      	cmp	r0, #2
 80027a6:	d9eb      	bls.n	8002780 <ADC_Enable+0x70>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f013 0f01 	tst.w	r3, #1
 80027b0:	d1e6      	bne.n	8002780 <ADC_Enable+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
 80027c4:	e002      	b.n	80027cc <ADC_Enable+0xbc>
  return HAL_OK;
 80027c6:	2000      	movs	r0, #0
 80027c8:	e000      	b.n	80027cc <ADC_Enable+0xbc>
 80027ca:	2000      	movs	r0, #0
}
 80027cc:	bd38      	pop	{r3, r4, r5, pc}
 80027ce:	bf00      	nop
 80027d0:	8000003f 	.word	0x8000003f
 80027d4:	7fffffc0 	.word	0x7fffffc0
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022100 	.word	0x40022100
 80027e0:	58026300 	.word	0x58026300

080027e4 <HAL_ADC_Start>:
{
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e8:	6803      	ldr	r3, [r0, #0]
 80027ea:	493e      	ldr	r1, [pc, #248]	; (80028e4 <HAL_ADC_Start+0x100>)
 80027ec:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <HAL_ADC_Start+0x104>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	bf18      	it	ne
 80027f2:	428b      	cmpne	r3, r1
 80027f4:	d152      	bne.n	800289c <HAL_ADC_Start+0xb8>
 80027f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027fa:	6895      	ldr	r5, [r2, #8]
 80027fc:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f013 0f04 	tst.w	r3, #4
 8002806:	d169      	bne.n	80028dc <HAL_ADC_Start+0xf8>
    __HAL_LOCK(hadc);
 8002808:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800280c:	2b01      	cmp	r3, #1
 800280e:	d067      	beq.n	80028e0 <HAL_ADC_Start+0xfc>
 8002810:	2301      	movs	r3, #1
 8002812:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff ff7a 	bl	8002710 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800281c:	2800      	cmp	r0, #0
 800281e:	d159      	bne.n	80028d4 <HAL_ADC_Start+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 8002820:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002822:	f6a0 7302 	subw	r3, r0, #3842	; 0xf02
 8002826:	4013      	ands	r3, r2
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <HAL_ADC_Start+0x104>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d034      	beq.n	80028a0 <HAL_ADC_Start+0xbc>
 8002836:	461a      	mov	r2, r3
 8002838:	4293      	cmp	r3, r2
 800283a:	d000      	beq.n	800283e <HAL_ADC_Start+0x5a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800283c:	b91d      	cbnz	r5, 8002846 <HAL_ADC_Start+0x62>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800283e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002840:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002844:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002846:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002848:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800284c:	d02b      	beq.n	80028a6 <HAL_ADC_Start+0xc2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800284e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002850:	f022 0206 	bic.w	r2, r2, #6
 8002854:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002856:	221c      	movs	r2, #28
 8002858:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800285a:	2300      	movs	r3, #0
 800285c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_ADC_Start+0x104>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d021      	beq.n	80028ac <HAL_ADC_Start+0xc8>
 8002868:	461a      	mov	r2, r3
 800286a:	4293      	cmp	r3, r2
 800286c:	d021      	beq.n	80028b2 <HAL_ADC_Start+0xce>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286e:	2d05      	cmp	r5, #5
 8002870:	bf14      	ite	ne
 8002872:	2100      	movne	r1, #0
 8002874:	2101      	moveq	r1, #1
 8002876:	b1e5      	cbz	r5, 80028b2 <HAL_ADC_Start+0xce>
 8002878:	b9d9      	cbnz	r1, 80028b2 <HAL_ADC_Start+0xce>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287a:	2d09      	cmp	r5, #9
 800287c:	d019      	beq.n	80028b2 <HAL_ADC_Start+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800287e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002884:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002886:	68d3      	ldr	r3, [r2, #12]
 8002888:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800288c:	d027      	beq.n	80028de <HAL_ADC_Start+0xfa>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800288e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002898:	6563      	str	r3, [r4, #84]	; 0x54
 800289a:	e020      	b.n	80028de <HAL_ADC_Start+0xfa>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289c:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_ADC_Start+0x108>)
 800289e:	e7ac      	b.n	80027fa <HAL_ADC_Start+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80028a4:	e7c8      	b.n	8002838 <HAL_ADC_Start+0x54>
        ADC_CLEAR_ERRORCODE(hadc);
 80028a6:	2200      	movs	r2, #0
 80028a8:	65a2      	str	r2, [r4, #88]	; 0x58
 80028aa:	e7d4      	b.n	8002856 <HAL_ADC_Start+0x72>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ac:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80028b0:	e7db      	b.n	800286a <HAL_ADC_Start+0x86>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028b8:	d005      	beq.n	80028c6 <HAL_ADC_Start+0xe2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028c4:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_ADC_Start+0x10c>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	f042 0204 	orr.w	r2, r2, #4
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	e004      	b.n	80028de <HAL_ADC_Start+0xfa>
      __HAL_UNLOCK(hadc);
 80028d4:	2300      	movs	r3, #0
 80028d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80028da:	e000      	b.n	80028de <HAL_ADC_Start+0xfa>
    tmp_hal_status = HAL_BUSY;
 80028dc:	2002      	movs	r0, #2
}
 80028de:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80028e0:	2002      	movs	r0, #2
 80028e2:	e7fc      	b.n	80028de <HAL_ADC_Start+0xfa>
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40022100 	.word	0x40022100
 80028ec:	58026300 	.word	0x58026300
 80028f0:	7fffffc0 	.word	0x7fffffc0

080028f4 <HAL_ADC_Start_IT>:
{
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	6803      	ldr	r3, [r0, #0]
 80028fa:	4963      	ldr	r1, [pc, #396]	; (8002a88 <HAL_ADC_Start_IT+0x194>)
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_ADC_Start_IT+0x198>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	bf18      	it	ne
 8002902:	428b      	cmpne	r3, r1
 8002904:	d175      	bne.n	80029f2 <HAL_ADC_Start_IT+0xfe>
 8002906:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800290a:	6895      	ldr	r5, [r2, #8]
 800290c:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f013 0f04 	tst.w	r3, #4
 8002916:	f040 80b3 	bne.w	8002a80 <HAL_ADC_Start_IT+0x18c>
    __HAL_LOCK(hadc);
 800291a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800291e:	2b01      	cmp	r3, #1
 8002920:	f000 80b0 	beq.w	8002a84 <HAL_ADC_Start_IT+0x190>
 8002924:	2301      	movs	r3, #1
 8002926:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fef0 	bl	8002710 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002930:	2800      	cmp	r0, #0
 8002932:	f040 80a1 	bne.w	8002a78 <HAL_ADC_Start_IT+0x184>
      ADC_STATE_CLR_SET(hadc->State,
 8002936:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002938:	f6a0 7302 	subw	r3, r0, #3842	; 0xf02
 800293c:	4013      	ands	r3, r2
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_ADC_Start_IT+0x198>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d054      	beq.n	80029f6 <HAL_ADC_Start_IT+0x102>
 800294c:	461a      	mov	r2, r3
 800294e:	4293      	cmp	r3, r2
 8002950:	d000      	beq.n	8002954 <HAL_ADC_Start_IT+0x60>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002952:	b91d      	cbnz	r5, 800295c <HAL_ADC_Start_IT+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002954:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002956:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800295a:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800295c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800295e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002962:	d04b      	beq.n	80029fc <HAL_ADC_Start_IT+0x108>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002964:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002966:	f022 0206 	bic.w	r2, r2, #6
 800296a:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800296c:	221c      	movs	r2, #28
 800296e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002970:	2300      	movs	r3, #0
 8002972:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	6853      	ldr	r3, [r2, #4]
 800297a:	f023 031c 	bic.w	r3, r3, #28
 800297e:	6053      	str	r3, [r2, #4]
      switch (hadc->Init.EOCSelection)
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d03d      	beq.n	8002a02 <HAL_ADC_Start_IT+0x10e>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	6853      	ldr	r3, [r2, #4]
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6053      	str	r3, [r2, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002992:	b923      	cbnz	r3, 800299e <HAL_ADC_Start_IT+0xaa>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	6853      	ldr	r3, [r2, #4]
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6053      	str	r3, [r2, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_ADC_Start_IT+0x198>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d033      	beq.n	8002a0e <HAL_ADC_Start_IT+0x11a>
 80029a6:	461a      	mov	r2, r3
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d033      	beq.n	8002a14 <HAL_ADC_Start_IT+0x120>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ac:	2d05      	cmp	r5, #5
 80029ae:	bf14      	ite	ne
 80029b0:	2100      	movne	r1, #0
 80029b2:	2101      	moveq	r1, #1
 80029b4:	b375      	cbz	r5, 8002a14 <HAL_ADC_Start_IT+0x120>
 80029b6:	bb69      	cbnz	r1, 8002a14 <HAL_ADC_Start_IT+0x120>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029b8:	2d09      	cmp	r5, #9
 80029ba:	d02b      	beq.n	8002a14 <HAL_ADC_Start_IT+0x120>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80029be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80029c2:	6561      	str	r1, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80029ca:	d05a      	beq.n	8002a82 <HAL_ADC_Start_IT+0x18e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029d6:	6562      	str	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
 80029d8:	6922      	ldr	r2, [r4, #16]
 80029da:	2a08      	cmp	r2, #8
 80029dc:	d042      	beq.n	8002a64 <HAL_ADC_Start_IT+0x170>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	6853      	ldr	r3, [r2, #4]
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	6053      	str	r3, [r2, #4]
              break;
 80029f0:	e047      	b.n	8002a82 <HAL_ADC_Start_IT+0x18e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f2:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_ADC_Start_IT+0x19c>)
 80029f4:	e789      	b.n	800290a <HAL_ADC_Start_IT+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029f6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80029fa:	e7a8      	b.n	800294e <HAL_ADC_Start_IT+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 80029fc:	2200      	movs	r2, #0
 80029fe:	65a2      	str	r2, [r4, #88]	; 0x58
 8002a00:	e7b4      	b.n	800296c <HAL_ADC_Start_IT+0x78>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	6853      	ldr	r3, [r2, #4]
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6053      	str	r3, [r2, #4]
          break;
 8002a0c:	e7c0      	b.n	8002990 <HAL_ADC_Start_IT+0x9c>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002a12:	e7c9      	b.n	80029a8 <HAL_ADC_Start_IT+0xb4>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a1a:	d011      	beq.n	8002a40 <HAL_ADC_Start_IT+0x14c>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a26:	6562      	str	r2, [r4, #84]	; 0x54
          switch (hadc->Init.EOCSelection)
 8002a28:	6922      	ldr	r2, [r4, #16]
 8002a2a:	2a08      	cmp	r2, #8
 8002a2c:	d010      	beq.n	8002a50 <HAL_ADC_Start_IT+0x15c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a34:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	6853      	ldr	r3, [r2, #4]
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a40:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002a42:	6891      	ldr	r1, [r2, #8]
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_ADC_Start_IT+0x1a0>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6093      	str	r3, [r2, #8]
}
 8002a4e:	e018      	b.n	8002a82 <HAL_ADC_Start_IT+0x18e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	f022 0220 	bic.w	r2, r2, #32
 8002a56:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	6853      	ldr	r3, [r2, #4]
 8002a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a60:	6053      	str	r3, [r2, #4]
              break;
 8002a62:	e7ed      	b.n	8002a40 <HAL_ADC_Start_IT+0x14c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	f022 0220 	bic.w	r2, r2, #32
 8002a6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	6853      	ldr	r3, [r2, #4]
 8002a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a74:	6053      	str	r3, [r2, #4]
              break;
 8002a76:	e004      	b.n	8002a82 <HAL_ADC_Start_IT+0x18e>
      __HAL_UNLOCK(hadc);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_Start_IT+0x18e>
    tmp_hal_status = HAL_BUSY;
 8002a80:	2002      	movs	r0, #2
}
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8002a84:	2002      	movs	r0, #2
 8002a86:	e7fc      	b.n	8002a82 <HAL_ADC_Start_IT+0x18e>
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022100 	.word	0x40022100
 8002a90:	58026300 	.word	0x58026300
 8002a94:	7fffffc0 	.word	0x7fffffc0

08002a98 <HAL_ADC_Start_DMA>:
{
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	460e      	mov	r6, r1
 8002a9e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa0:	6800      	ldr	r0, [r0, #0]
 8002aa2:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <HAL_ADC_Start_DMA+0x100>)
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_ADC_Start_DMA+0x104>)
 8002aa6:	4298      	cmp	r0, r3
 8002aa8:	bf18      	it	ne
 8002aaa:	4290      	cmpne	r0, r2
 8002aac:	d11a      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x4c>
 8002aae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ab2:	689d      	ldr	r5, [r3, #8]
 8002ab4:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ab8:	6880      	ldr	r0, [r0, #8]
 8002aba:	f010 0f04 	tst.w	r0, #4
 8002abe:	d167      	bne.n	8002b90 <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 8002ac0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d065      	beq.n	8002b94 <HAL_ADC_Start_DMA+0xfc>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ace:	2d05      	cmp	r5, #5
 8002ad0:	bf18      	it	ne
 8002ad2:	2d00      	cmpne	r5, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ad6:	2d09      	cmp	r5, #9
 8002ad8:	d006      	beq.n	8002ae8 <HAL_ADC_Start_DMA+0x50>
      __HAL_UNLOCK(hadc);
 8002ada:	2300      	movs	r3, #0
 8002adc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e056      	b.n	8002b92 <HAL_ADC_Start_DMA+0xfa>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_ADC_Start_DMA+0x108>)
 8002ae6:	e7e4      	b.n	8002ab2 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff fe11 	bl	8002710 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d14a      	bne.n	8002b88 <HAL_ADC_Start_DMA+0xf0>
        ADC_STATE_CLR_SET(hadc->State,
 8002af2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002af4:	f6a0 7302 	subw	r3, r0, #3842	; 0xf02
 8002af8:	4013      	ands	r3, r2
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <HAL_ADC_Start_DMA+0x104>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d039      	beq.n	8002b7c <HAL_ADC_Start_DMA+0xe4>
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d000      	beq.n	8002b10 <HAL_ADC_Start_DMA+0x78>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0e:	b91d      	cbnz	r5, 8002b18 <HAL_ADC_Start_DMA+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b16:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b1a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b1e:	d030      	beq.n	8002b82 <HAL_ADC_Start_DMA+0xea>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b22:	f023 0306 	bic.w	r3, r3, #6
 8002b26:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_ADC_Start_DMA+0x10c>)
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_ADC_Start_DMA+0x110>)
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_ADC_Start_DMA+0x114>)
 8002b38:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	221c      	movs	r2, #28
 8002b3e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	6853      	ldr	r3, [r2, #4]
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	6053      	str	r3, [r2, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002b50:	6821      	ldr	r1, [r4, #0]
 8002b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b54:	68ca      	ldr	r2, [r1, #12]
 8002b56:	f022 0203 	bic.w	r2, r2, #3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b5e:	6821      	ldr	r1, [r4, #0]
 8002b60:	463b      	mov	r3, r7
 8002b62:	4632      	mov	r2, r6
 8002b64:	3140      	adds	r1, #64	; 0x40
 8002b66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b68:	f003 f9ac 	bl	8005ec4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b6c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002b6e:	6891      	ldr	r1, [r2, #8]
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_ADC_Start_DMA+0x118>)
 8002b72:	400b      	ands	r3, r1
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6093      	str	r3, [r2, #8]
}
 8002b7a:	e00a      	b.n	8002b92 <HAL_ADC_Start_DMA+0xfa>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b7c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002b80:	e7c3      	b.n	8002b0a <HAL_ADC_Start_DMA+0x72>
          ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	2300      	movs	r3, #0
 8002b84:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b86:	e7cf      	b.n	8002b28 <HAL_ADC_Start_DMA+0x90>
        __HAL_UNLOCK(hadc);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002b8e:	e000      	b.n	8002b92 <HAL_ADC_Start_DMA+0xfa>
    tmp_hal_status = HAL_BUSY;
 8002b90:	2002      	movs	r0, #2
}
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002b94:	2002      	movs	r0, #2
 8002b96:	e7fc      	b.n	8002b92 <HAL_ADC_Start_DMA+0xfa>
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40022100 	.word	0x40022100
 8002ba0:	58026300 	.word	0x58026300
 8002ba4:	08001c31 	.word	0x08001c31
 8002ba8:	0800194b 	.word	0x0800194b
 8002bac:	08001cb9 	.word	0x08001cb9
 8002bb0:	7fffffc0 	.word	0x7fffffc0

08002bb4 <ADC_Disable>:
{
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bb8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bba:	6893      	ldr	r3, [r2, #8]
 8002bbc:	f013 0302 	ands.w	r3, r3, #2
 8002bc0:	d000      	beq.n	8002bc4 <ADC_Disable+0x10>
 8002bc2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc4:	6891      	ldr	r1, [r2, #8]
 8002bc6:	f011 0f01 	tst.w	r1, #1
 8002bca:	d037      	beq.n	8002c3c <ADC_Disable+0x88>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d137      	bne.n	8002c40 <ADC_Disable+0x8c>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bd0:	6893      	ldr	r3, [r2, #8]
 8002bd2:	f003 030d 	and.w	r3, r3, #13
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d009      	beq.n	8002bee <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
 8002bec:	e027      	b.n	8002c3e <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8002bee:	6891      	ldr	r1, [r2, #8]
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <ADC_Disable+0x90>)
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002c00:	f7fe faa8 	bl	8001154 <HAL_GetTick>
 8002c04:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f013 0f01 	tst.w	r3, #1
 8002c0e:	d013      	beq.n	8002c38 <ADC_Disable+0x84>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c10:	f7fe faa0 	bl	8001154 <HAL_GetTick>
 8002c14:	1b40      	subs	r0, r0, r5
 8002c16:	2802      	cmp	r0, #2
 8002c18:	d9f5      	bls.n	8002c06 <ADC_Disable+0x52>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f013 0f01 	tst.w	r3, #1
 8002c22:	d0f0      	beq.n	8002c06 <ADC_Disable+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e002      	b.n	8002c3e <ADC_Disable+0x8a>
  return HAL_OK;
 8002c38:	2000      	movs	r0, #0
 8002c3a:	e000      	b.n	8002c3e <ADC_Disable+0x8a>
 8002c3c:	2000      	movs	r0, #0
}
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002c40:	2000      	movs	r0, #0
 8002c42:	e7fc      	b.n	8002c3e <ADC_Disable+0x8a>
 8002c44:	7fffffc0 	.word	0x7fffffc0

08002c48 <HAL_ADC_DeInit>:
{
 8002c48:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	f000 80de 	beq.w	8002e0c <HAL_ADC_DeInit+0x1c4>
 8002c50:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c52:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	f7ff fcda 	bl	8002614 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	68d3      	ldr	r3, [r2, #12]
 8002c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c68:	60d3      	str	r3, [r2, #12]
  if (tmp_hal_status == HAL_OK)
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	f000 80b8 	beq.w	8002de2 <HAL_ADC_DeInit+0x19a>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	6851      	ldr	r1, [r2, #4]
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_ADC_DeInit+0x1c8>)
 8002c78:	400b      	ands	r3, r1
 8002c7a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	6893      	ldr	r3, [r2, #8]
 8002c88:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8002c8c:	6093      	str	r3, [r2, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	6893      	ldr	r3, [r2, #8]
 8002c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c96:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	68d3      	ldr	r3, [r2, #12]
 8002c9c:	f003 2380 	and.w	r3, r3, #2147516416	; 0x80008000
 8002ca0:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	68d3      	ldr	r3, [r2, #12]
 8002ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	6911      	ldr	r1, [r2, #16]
 8002cb0:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_ADC_DeInit+0x1cc>)
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6953      	ldr	r3, [r2, #20]
 8002cba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002cbe:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	6993      	ldr	r3, [r2, #24]
 8002cc4:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
 8002cc8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6a13      	ldr	r3, [r2, #32]
 8002cce:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002cd2:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002cd8:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002cdc:	6253      	str	r3, [r2, #36]	; 0x24
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8002ce4:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002ce8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8002cec:	6822      	ldr	r2, [r4, #0]
 8002cee:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8002cf2:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002cf6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 8002d00:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002d04:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
 8002d0e:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8002d12:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_ADC_DeInit+0x1d0>)
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d24:	493d      	ldr	r1, [pc, #244]	; (8002e1c <HAL_ADC_DeInit+0x1d4>)
 8002d26:	400a      	ands	r2, r1
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002d2e:	400b      	ands	r3, r1
 8002d30:	6393      	str	r3, [r2, #56]	; 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_ADC_DeInit+0x1d8>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	63d3      	str	r3, [r2, #60]	; 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002d40:	2300      	movs	r3, #0
 8002d42:	6613      	str	r3, [r2, #96]	; 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002d48:	6653      	str	r3, [r2, #100]	; 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8002d4e:	6693      	str	r3, [r2, #104]	; 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8002d54:	66d3      	str	r3, [r2, #108]	; 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002d56:	6821      	ldr	r1, [r4, #0]
 8002d58:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
 8002d5c:	4a31      	ldr	r2, [pc, #196]	; (8002e24 <HAL_ADC_DeInit+0x1dc>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8002d64:	6821      	ldr	r1, [r4, #0]
 8002d66:	f8d1 30a4 	ldr.w	r3, [r1, #164]	; 0xa4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8002d70:	6821      	ldr	r1, [r4, #0]
 8002d72:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8002d76:	4013      	ands	r3, r2
 8002d78:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d82:	f003 23f8 	and.w	r3, r3, #4160813056	; 0xf800f800
 8002d86:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	4926      	ldr	r1, [pc, #152]	; (8002e28 <HAL_ADC_DeInit+0x1e0>)
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_ADC_DeInit+0x1e4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf18      	it	ne
 8002d94:	428b      	cmpne	r3, r1
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	d12b      	bne.n	8002df6 <HAL_ADC_DeInit+0x1ae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d9e:	688a      	ldr	r2, [r1, #8]
 8002da0:	f012 0201 	ands.w	r2, r2, #1
 8002da4:	d000      	beq.n	8002da8 <HAL_ADC_DeInit+0x160>
 8002da6:	2201      	movs	r2, #1
 8002da8:	4920      	ldr	r1, [pc, #128]	; (8002e2c <HAL_ADC_DeInit+0x1e4>)
 8002daa:	6889      	ldr	r1, [r1, #8]
 8002dac:	f011 0101 	ands.w	r1, r1, #1
 8002db0:	d000      	beq.n	8002db4 <HAL_ADC_DeInit+0x16c>
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	bf0c      	ite	eq
 8002db8:	2201      	moveq	r2, #1
 8002dba:	2200      	movne	r2, #0
 8002dbc:	b142      	cbz	r2, 8002dd0 <HAL_ADC_DeInit+0x188>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002dbe:	b31b      	cbz	r3, 8002e08 <HAL_ADC_DeInit+0x1c0>
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_ADC_DeInit+0x1e8>)
 8002dc2:	6891      	ldr	r1, [r2, #8]
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_ADC_DeInit+0x1ec>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7fd ffbc 	bl	8000d48 <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	65a3      	str	r3, [r4, #88]	; 0x58
  hadc->InjectionConfig.ContextQueue = 0;
 8002dd4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8002dd6:	6623      	str	r3, [r4, #96]	; 0x60
  hadc->State = HAL_ADC_STATE_RESET;
 8002dd8:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002dda:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002dde:	4628      	mov	r0, r5
 8002de0:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff fee6 	bl	8002bb4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002de8:	4605      	mov	r5, r0
 8002dea:	2800      	cmp	r0, #0
 8002dec:	f47f af41 	bne.w	8002c72 <HAL_ADC_DeInit+0x2a>
      hadc->State = HAL_ADC_STATE_READY;
 8002df0:	2301      	movs	r3, #1
 8002df2:	6563      	str	r3, [r4, #84]	; 0x54
 8002df4:	e73d      	b.n	8002c72 <HAL_ADC_DeInit+0x2a>
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_ADC_DeInit+0x1f0>)
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	f012 0201 	ands.w	r2, r2, #1
 8002dfe:	d000      	beq.n	8002e02 <HAL_ADC_DeInit+0x1ba>
 8002e00:	2201      	movs	r2, #1
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e02:	f082 0201 	eor.w	r2, r2, #1
 8002e06:	e7d9      	b.n	8002dbc <HAL_ADC_DeInit+0x174>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <HAL_ADC_DeInit+0x1f4>)
 8002e0a:	e7da      	b.n	8002dc2 <HAL_ADC_DeInit+0x17a>
    return HAL_ERROR;
 8002e0c:	2501      	movs	r5, #1
 8002e0e:	e7e6      	b.n	8002dde <HAL_ADC_DeInit+0x196>
 8002e10:	fffff800 	.word	0xfffff800
 8002e14:	fc00f81c 	.word	0xfc00f81c
 8002e18:	e0820830 	.word	0xe0820830
 8002e1c:	e0820820 	.word	0xe0820820
 8002e20:	fffff820 	.word	0xfffff820
 8002e24:	fff00000 	.word	0xfff00000
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40022100 	.word	0x40022100
 8002e30:	40022300 	.word	0x40022300
 8002e34:	fe0030e0 	.word	0xfe0030e0
 8002e38:	58026000 	.word	0x58026000
 8002e3c:	58026300 	.word	0x58026300

08002e40 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002e40:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d018      	beq.n	8002e7a <HAL_ADC_Stop+0x3a>
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e52:	2103      	movs	r1, #3
 8002e54:	f7ff fbde 	bl	8002614 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002e58:	b118      	cbz	r0, 8002e62 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002e60:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff fea6 	bl	8002bb4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d1f6      	bne.n	8002e5a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_ADC_Stop+0x40>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6563      	str	r3, [r4, #84]	; 0x54
 8002e78:	e7ef      	b.n	8002e5a <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8002e7a:	2002      	movs	r0, #2
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	ffffeefe 	.word	0xffffeefe

08002e84 <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8002e84:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_ADC_Stop_IT+0x44>
{
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002e90:	2301      	movs	r3, #1
 8002e92:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e96:	2103      	movs	r1, #3
 8002e98:	f7ff fbbc 	bl	8002614 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002e9c:	b118      	cbz	r0, 8002ea6 <HAL_ADC_Stop_IT+0x22>
  __HAL_UNLOCK(hadc);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002ea4:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	6853      	ldr	r3, [r2, #4]
 8002eaa:	f023 031c 	bic.w	r3, r3, #28
 8002eae:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fe7f 	bl	8002bb4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d1f1      	bne.n	8002e9e <HAL_ADC_Stop_IT+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8002eba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_ADC_Stop_IT+0x48>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8002ec6:	e7ea      	b.n	8002e9e <HAL_ADC_Stop_IT+0x1a>
  __HAL_LOCK(hadc);
 8002ec8:	2002      	movs	r0, #2
}
 8002eca:	4770      	bx	lr
 8002ecc:	ffffeefe 	.word	0xffffeefe

08002ed0 <HAL_ADC_Stop_DMA>:
{
 8002ed0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002ed2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d037      	beq.n	8002f4a <HAL_ADC_Stop_DMA+0x7a>
 8002eda:	4604      	mov	r4, r0
 8002edc:	2301      	movs	r3, #1
 8002ede:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	f7ff fb96 	bl	8002614 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002ee8:	4605      	mov	r5, r0
 8002eea:	b9d8      	cbnz	r0, 8002f24 <HAL_ADC_Stop_DMA+0x54>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	68d3      	ldr	r3, [r2, #12]
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ef6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ef8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d015      	beq.n	8002f2e <HAL_ADC_Stop_DMA+0x5e>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	6853      	ldr	r3, [r2, #4]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002f0c:	b9cd      	cbnz	r5, 8002f42 <HAL_ADC_Stop_DMA+0x72>
      tmp_hal_status = ADC_Disable(hadc);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff fe50 	bl	8002bb4 <ADC_Disable>
 8002f14:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002f16:	b92d      	cbnz	r5, 8002f24 <HAL_ADC_Stop_DMA+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002f18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_ADC_Stop_DMA+0x80>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002f24:	2300      	movs	r3, #0
 8002f26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002f2e:	f003 f915 	bl	800615c <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002f32:	4605      	mov	r5, r0
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0e4      	beq.n	8002f02 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3e:	6563      	str	r3, [r4, #84]	; 0x54
 8002f40:	e7df      	b.n	8002f02 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff fe36 	bl	8002bb4 <ADC_Disable>
 8002f48:	e7e5      	b.n	8002f16 <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 8002f4a:	2502      	movs	r5, #2
 8002f4c:	e7ed      	b.n	8002f2a <HAL_ADC_Stop_DMA+0x5a>
 8002f4e:	bf00      	nop
 8002f50:	ffffeefe 	.word	0xffffeefe

08002f54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f58:	6803      	ldr	r3, [r0, #0]
 8002f5a:	494f      	ldr	r1, [pc, #316]	; (8003098 <ADC_ConfigureBoostMode+0x144>)
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	; (800309c <ADC_ConfigureBoostMode+0x148>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	bf18      	it	ne
 8002f62:	428b      	cmpne	r3, r1
 8002f64:	d123      	bne.n	8002fae <ADC_ConfigureBoostMode+0x5a>
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <ADC_ConfigureBoostMode+0x14c>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b34b      	cbz	r3, 8002fca <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f76:	f006 fa15 	bl	80093a4 <HAL_RCC_GetHCLKFreq>
 8002f7a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f82:	d01c      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x6a>
 8002f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f88:	d01d      	beq.n	8002fc6 <ADC_ConfigureBoostMode+0x72>
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d016      	beq.n	8002fbe <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f90:	f7fe f92e 	bl	80011f0 <HAL_GetREVID>
 8002f94:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	d858      	bhi.n	800304e <ADC_ConfigureBoostMode+0xfa>
  {
    if (freq > 20000000UL)
 8002f9c:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <ADC_ConfigureBoostMode+0x150>)
 8002f9e:	429d      	cmp	r5, r3
 8002fa0:	d94f      	bls.n	8003042 <ADC_ConfigureBoostMode+0xee>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	6893      	ldr	r3, [r2, #8]
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002fac:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <ADC_ConfigureBoostMode+0x154>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	e7da      	b.n	8002f74 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002fc4:	e7e4      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8002fc6:	0885      	lsrs	r5, r0, #2
        break;
 8002fc8:	e7e2      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f007 fd78 	bl	800aac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fdc:	d02d      	beq.n	800303a <ADC_ConfigureBoostMode+0xe6>
 8002fde:	d822      	bhi.n	8003026 <ADC_ConfigureBoostMode+0xd2>
 8002fe0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fe4:	d027      	beq.n	8003036 <ADC_ConfigureBoostMode+0xe2>
 8002fe6:	d904      	bls.n	8002ff2 <ADC_ConfigureBoostMode+0x9e>
 8002fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fec:	d1d0      	bne.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8002fee:	0945      	lsrs	r5, r0, #5
        break;
 8002ff0:	e7ce      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d00d      	beq.n	8003014 <ADC_ConfigureBoostMode+0xc0>
 8002ff8:	d906      	bls.n	8003008 <ADC_ConfigureBoostMode+0xb4>
 8002ffa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ffe:	d009      	beq.n	8003014 <ADC_ConfigureBoostMode+0xc0>
 8003000:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003004:	d006      	beq.n	8003014 <ADC_ConfigureBoostMode+0xc0>
 8003006:	e7c3      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
 8003008:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800300c:	d002      	beq.n	8003014 <ADC_ConfigureBoostMode+0xc0>
 800300e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003012:	d104      	bne.n	800301e <ADC_ConfigureBoostMode+0xca>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800301c:	e7b8      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 800301e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003022:	d0f7      	beq.n	8003014 <ADC_ConfigureBoostMode+0xc0>
 8003024:	e7b4      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
 8003026:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800302a:	d008      	beq.n	800303e <ADC_ConfigureBoostMode+0xea>
 800302c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003030:	d1ae      	bne.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003032:	0a05      	lsrs	r5, r0, #8
        break;
 8003034:	e7ac      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003036:	0905      	lsrs	r5, r0, #4
        break;
 8003038:	e7aa      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 800303a:	0985      	lsrs	r5, r0, #6
        break;
 800303c:	e7a8      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 800303e:	09c5      	lsrs	r5, r0, #7
        break;
 8003040:	e7a6      	b.n	8002f90 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	6893      	ldr	r3, [r2, #8]
 8003046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	e7ae      	b.n	8002fac <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <ADC_ConfigureBoostMode+0x158>)
 8003050:	429d      	cmp	r5, r3
 8003052:	d805      	bhi.n	8003060 <ADC_ConfigureBoostMode+0x10c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003054:	6822      	ldr	r2, [r4, #0]
 8003056:	6893      	ldr	r3, [r2, #8]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	6093      	str	r3, [r2, #8]
 800305e:	e7a5      	b.n	8002fac <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <ADC_ConfigureBoostMode+0x15c>)
 8003062:	429d      	cmp	r5, r3
 8003064:	d807      	bhi.n	8003076 <ADC_ConfigureBoostMode+0x122>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	6893      	ldr	r3, [r2, #8]
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6093      	str	r3, [r2, #8]
 8003074:	e79a      	b.n	8002fac <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <ADC_ConfigureBoostMode+0x160>)
 8003078:	429d      	cmp	r5, r3
 800307a:	d807      	bhi.n	800308c <ADC_ConfigureBoostMode+0x138>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	6893      	ldr	r3, [r2, #8]
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	e78f      	b.n	8002fac <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	6893      	ldr	r3, [r2, #8]
 8003090:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003094:	6093      	str	r3, [r2, #8]
}
 8003096:	e789      	b.n	8002fac <ADC_ConfigureBoostMode+0x58>
 8003098:	40022000 	.word	0x40022000
 800309c:	40022100 	.word	0x40022100
 80030a0:	40022300 	.word	0x40022300
 80030a4:	01312d00 	.word	0x01312d00
 80030a8:	58026300 	.word	0x58026300
 80030ac:	00bebc21 	.word	0x00bebc21
 80030b0:	017d7841 	.word	0x017d7841
 80030b4:	02faf081 	.word	0x02faf081

080030b8 <HAL_ADC_Init>:
{
 80030b8:	b530      	push	{r4, r5, lr}
 80030ba:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80030c0:	2800      	cmp	r0, #0
 80030c2:	f000 8110 	beq.w	80032e6 <HAL_ADC_Init+0x22e>
 80030c6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80030ca:	b1eb      	cbz	r3, 8003108 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80030d4:	d003      	beq.n	80030de <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	4a84      	ldr	r2, [pc, #528]	; (80032ec <HAL_ADC_Init+0x234>)
 80030da:	400a      	ands	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030de:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80030e6:	d11c      	bne.n	8003122 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	4a81      	ldr	r2, [pc, #516]	; (80032f0 <HAL_ADC_Init+0x238>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f2:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f4:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_ADC_Init+0x23c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	4a7f      	ldr	r2, [pc, #508]	; (80032f8 <HAL_ADC_Init+0x240>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	3301      	adds	r3, #1
 8003104:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003106:	e009      	b.n	800311c <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8003108:	f7fd fddc 	bl	8000cc4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800310c:	2300      	movs	r3, #0
 800310e:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003110:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003114:	e7da      	b.n	80030cc <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8003116:	9b01      	ldr	r3, [sp, #4]
 8003118:	3b01      	subs	r3, #1
 800311a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f9      	bne.n	8003116 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003122:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800312a:	f040 809c 	bne.w	8003266 <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003130:	f043 0310 	orr.w	r3, r3, #16
 8003134:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800313e:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003140:	6893      	ldr	r3, [r2, #8]
 8003142:	f013 0304 	ands.w	r3, r3, #4
 8003146:	d000      	beq.n	800314a <HAL_ADC_Init+0x92>
 8003148:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800314a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800314c:	f011 0f10 	tst.w	r1, #16
 8003150:	f040 80c1 	bne.w	80032d6 <HAL_ADC_Init+0x21e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 80be 	bne.w	80032d6 <HAL_ADC_Init+0x21e>
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800315c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003166:	6893      	ldr	r3, [r2, #8]
 8003168:	f013 0f01 	tst.w	r3, #1
 800316c:	d121      	bne.n	80031b2 <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316e:	4963      	ldr	r1, [pc, #396]	; (80032fc <HAL_ADC_Init+0x244>)
 8003170:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_ADC_Init+0x248>)
 8003172:	429a      	cmp	r2, r3
 8003174:	bf18      	it	ne
 8003176:	428a      	cmpne	r2, r1
 8003178:	bf0c      	ite	eq
 800317a:	2201      	moveq	r2, #1
 800317c:	2200      	movne	r2, #0
 800317e:	d174      	bne.n	800326a <HAL_ADC_Init+0x1b2>
 8003180:	688b      	ldr	r3, [r1, #8]
 8003182:	f013 0301 	ands.w	r3, r3, #1
 8003186:	d000      	beq.n	800318a <HAL_ADC_Init+0xd2>
 8003188:	2301      	movs	r3, #1
 800318a:	495d      	ldr	r1, [pc, #372]	; (8003300 <HAL_ADC_Init+0x248>)
 800318c:	6889      	ldr	r1, [r1, #8]
 800318e:	f011 0101 	ands.w	r1, r1, #1
 8003192:	d000      	beq.n	8003196 <HAL_ADC_Init+0xde>
 8003194:	2101      	movs	r1, #1
 8003196:	430b      	orrs	r3, r1
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b143      	cbz	r3, 80031b2 <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031a0:	2a00      	cmp	r2, #0
 80031a2:	d06b      	beq.n	800327c <HAL_ADC_Init+0x1c4>
 80031a4:	4957      	ldr	r1, [pc, #348]	; (8003304 <HAL_ADC_Init+0x24c>)
 80031a6:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031a8:	688a      	ldr	r2, [r1, #8]
 80031aa:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031b2:	f7fe f81d 	bl	80011f0 <HAL_GetREVID>
 80031b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80031ba:	4298      	cmp	r0, r3
 80031bc:	d902      	bls.n	80031c4 <HAL_ADC_Init+0x10c>
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d05d      	beq.n	8003280 <HAL_ADC_Init+0x1c8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c4:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80031c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 80031cc:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 80031ce:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031d0:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d6:	7f22      	ldrb	r2, [r4, #28]
 80031d8:	2a01      	cmp	r2, #1
 80031da:	d05c      	beq.n	8003296 <HAL_ADC_Init+0x1de>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031de:	b122      	cbz	r2, 80031ea <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031e6:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	68c8      	ldr	r0, [r1, #12]
 80031ee:	4a46      	ldr	r2, [pc, #280]	; (8003308 <HAL_ADC_Init+0x250>)
 80031f0:	4002      	ands	r2, r0
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f6:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f8:	688b      	ldr	r3, [r1, #8]
 80031fa:	f013 0304 	ands.w	r3, r3, #4
 80031fe:	d000      	beq.n	8003202 <HAL_ADC_Init+0x14a>
 8003200:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003202:	688a      	ldr	r2, [r1, #8]
 8003204:	f012 0208 	ands.w	r2, r2, #8
 8003208:	d000      	beq.n	800320c <HAL_ADC_Init+0x154>
 800320a:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800320c:	4313      	orrs	r3, r2
 800320e:	d11b      	bne.n	8003248 <HAL_ADC_Init+0x190>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003210:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmpCFGR = (
 8003214:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003218:	68c8      	ldr	r0, [r1, #12]
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <HAL_ADC_Init+0x254>)
 800321c:	4003      	ands	r3, r0
 800321e:	4313      	orrs	r3, r2
 8003220:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003222:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003226:	2b01      	cmp	r3, #1
 8003228:	d03a      	beq.n	80032a0 <HAL_ADC_Init+0x1e8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	6913      	ldr	r3, [r2, #16]
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	6913      	ldr	r3, [r2, #16]
 8003238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800323c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800323e:	430b      	orrs	r3, r1
 8003240:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff fe86 	bl	8002f54 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003248:	68e3      	ldr	r3, [r4, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d03a      	beq.n	80032c4 <HAL_ADC_Init+0x20c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003252:	f023 030f 	bic.w	r3, r3, #15
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003258:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6563      	str	r3, [r4, #84]	; 0x54
 8003264:	e03c      	b.n	80032e0 <HAL_ADC_Init+0x228>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003266:	2500      	movs	r5, #0
 8003268:	e76a      	b.n	8003140 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_ADC_Init+0x258>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f013 0301 	ands.w	r3, r3, #1
 8003272:	d000      	beq.n	8003276 <HAL_ADC_Init+0x1be>
 8003274:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	e790      	b.n	800319e <HAL_ADC_Init+0xe6>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800327c:	4925      	ldr	r1, [pc, #148]	; (8003314 <HAL_ADC_Init+0x25c>)
 800327e:	e792      	b.n	80031a6 <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003280:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003282:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003284:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8003288:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800328a:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800328c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003290:	f043 030c 	orr.w	r3, r3, #12
 8003294:	e79f      	b.n	80031d6 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003296:	6a22      	ldr	r2, [r4, #32]
 8003298:	3a01      	subs	r2, #1
 800329a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800329e:	e79d      	b.n	80031dc <HAL_ADC_Init+0x124>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032a0:	6820      	ldr	r0, [r4, #0]
 80032a2:	6902      	ldr	r2, [r0, #16]
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <HAL_ADC_Init+0x260>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80032aa:	1e51      	subs	r1, r2, #1
 80032ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80032b4:	430a      	orrs	r2, r1
 80032b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80032b8:	430a      	orrs	r2, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6103      	str	r3, [r0, #16]
 80032c2:	e7b7      	b.n	8003234 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032c4:	6821      	ldr	r1, [r4, #0]
 80032c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80032c8:	f023 030f 	bic.w	r3, r3, #15
 80032cc:	69a2      	ldr	r2, [r4, #24]
 80032ce:	3a01      	subs	r2, #1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	630b      	str	r3, [r1, #48]	; 0x30
 80032d4:	e7c0      	b.n	8003258 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80032de:	2501      	movs	r5, #1
}
 80032e0:	4628      	mov	r0, r5
 80032e2:	b003      	add	sp, #12
 80032e4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80032e6:	2501      	movs	r5, #1
 80032e8:	e7fa      	b.n	80032e0 <HAL_ADC_Init+0x228>
 80032ea:	bf00      	nop
 80032ec:	5fffffc0 	.word	0x5fffffc0
 80032f0:	6fffffc0 	.word	0x6fffffc0
 80032f4:	24000000 	.word	0x24000000
 80032f8:	053e2d63 	.word	0x053e2d63
 80032fc:	40022000 	.word	0x40022000
 8003300:	40022100 	.word	0x40022100
 8003304:	40022300 	.word	0x40022300
 8003308:	fff0c003 	.word	0xfff0c003
 800330c:	ffffbffc 	.word	0xffffbffc
 8003310:	58026000 	.word	0x58026000
 8003314:	58026300 	.word	0x58026300
 8003318:	fc00f81e 	.word	0xfc00f81e

0800331c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003328:	2b01      	cmp	r3, #1
 800332a:	d042      	beq.n	80033b2 <HAL_ADCEx_Calibration_Start+0x96>
 800332c:	4604      	mov	r4, r0
 800332e:	460d      	mov	r5, r1
 8003330:	4616      	mov	r6, r2
 8003332:	2301      	movs	r3, #1
 8003334:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003338:	f7ff fc3c 	bl	8002bb4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800333c:	2800      	cmp	r0, #0
 800333e:	d12f      	bne.n	80033a0 <HAL_ADCEx_Calibration_Start+0x84>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003340:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003344:	4013      	ands	r3, r2
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800334c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800334e:	6891      	ldr	r1, [r2, #8]
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_ADCEx_Calibration_Start+0xa0>)
 8003352:	400b      	ands	r3, r1
 8003354:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8003358:	f006 4680 	and.w	r6, r6, #1073741824	; 0x40000000
 800335c:	4335      	orrs	r5, r6
 800335e:	432b      	orrs	r3, r5
 8003360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003364:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003366:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db06      	blt.n	800337c <HAL_ADCEx_Calibration_Start+0x60>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003370:	f023 0303 	bic.w	r3, r3, #3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6563      	str	r3, [r4, #84]	; 0x54
 800337a:	e015      	b.n	80033a8 <HAL_ADCEx_Calibration_Start+0x8c>
      wait_loop_index++;
 800337c:	9b01      	ldr	r3, [sp, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003382:	9a01      	ldr	r2, [sp, #4]
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_ADCEx_Calibration_Start+0xa4>)
 8003386:	429a      	cmp	r2, r3
 8003388:	d3ed      	bcc.n	8003366 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 800338a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800338c:	f023 0312 	bic.w	r3, r3, #18
 8003390:	f043 0310 	orr.w	r3, r3, #16
 8003394:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003396:	2300      	movs	r3, #0
 8003398:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e006      	b.n	80033ae <HAL_ADCEx_Calibration_Start+0x92>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a2:	f043 0310 	orr.w	r3, r3, #16
 80033a6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a8:	2300      	movs	r3, #0
 80033aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80033ae:	b002      	add	sp, #8
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80033b2:	2002      	movs	r0, #2
 80033b4:	e7fb      	b.n	80033ae <HAL_ADCEx_Calibration_Start+0x92>
 80033b6:	bf00      	nop
 80033b8:	ffffeefd 	.word	0xffffeefd
 80033bc:	3ffeffc0 	.word	0x3ffeffc0
 80033c0:	25c3f800 	.word	0x25c3f800

080033c4 <HAL_ADCEx_Calibration_GetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the selected ADC calibration value */
  return LL_ADC_GetCalibrationOffsetFactor(hadc->Instance, SingleDiff);
 80033c4:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4));
 80033c6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80033ca:	4008      	ands	r0, r1
 80033cc:	f020 20f8 	bic.w	r0, r0, #4160813056	; 0xf800f800
 80033d0:	0b09      	lsrs	r1, r1, #12
 80033d2:	f001 0110 	and.w	r1, r1, #16
}
 80033d6:	40c8      	lsrs	r0, r1
 80033d8:	4770      	bx	lr

080033da <HAL_ADCEx_LinearCalibration_GetValue>:
  * @param  hadc ADC handle
  * @param  LinearCalib_Buffer: Linear calibration factor
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCalib_Buffer)
{
 80033da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033dc:	4605      	mov	r5, r0
 80033de:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Enable the ADC ADEN = 1 to be able to read the linear calibration factor */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f013 0f01 	tst.w	r3, #1
 80033e8:	d111      	bne.n	800340e <HAL_ADCEx_LinearCalibration_GetValue+0x34>
  {
    tmp_hal_status = ADC_Enable(hadc);
 80033ea:	f7ff f991 	bl	8002710 <ADC_Enable>
  }

  if (tmp_hal_status == HAL_OK)
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d136      	bne.n	8003460 <HAL_ADCEx_LinearCalibration_GetValue+0x86>
  {
    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033f2:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f4:	689f      	ldr	r7, [r3, #8]
 80033f6:	f017 0704 	ands.w	r7, r7, #4
 80033fa:	d006      	beq.n	800340a <HAL_ADCEx_LinearCalibration_GetValue+0x30>
  MODIFY_REG(ADCx->CR,
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_ADCEx_LinearCalibration_GetValue+0x8a>)
 8003400:	400a      	ands	r2, r1
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	609a      	str	r2, [r3, #8]
    {
      LL_ADC_REG_StopConversion(hadc->Instance);
      temp_REG_IsConversionOngoing = 1UL;
 8003408:	2701      	movs	r7, #1
    }
    for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL; cnt--)
 800340a:	2406      	movs	r4, #6
 800340c:	e00f      	b.n	800342e <HAL_ADCEx_LinearCalibration_GetValue+0x54>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340e:	2000      	movs	r0, #0
 8003410:	e7ed      	b.n	80033ee <HAL_ADCEx_LinearCalibration_GetValue+0x14>
    timeout_cpu_cycles--;
 8003412:	3b01      	subs	r3, #1
  while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 8003414:	688a      	ldr	r2, [r1, #8]
 8003416:	ea1c 0f02 	tst.w	ip, r2
 800341a:	d001      	beq.n	8003420 <HAL_ADCEx_LinearCalibration_GetValue+0x46>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f8      	bne.n	8003412 <HAL_ADCEx_LinearCalibration_GetValue+0x38>
  return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
 8003420:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 8003424:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    {
      LinearCalib_Buffer[cnt - 1U] = LL_ADC_GetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG_COUNT - cnt));
 8003428:	f846 302e 	str.w	r3, [r6, lr, lsl #2]
    for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL; cnt--)
 800342c:	3c01      	subs	r4, #1
 800342e:	b17c      	cbz	r4, 8003450 <HAL_ADCEx_LinearCalibration_GetValue+0x76>
      LinearCalib_Buffer[cnt - 1U] = LL_ADC_GetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG_COUNT - cnt));
 8003430:	6829      	ldr	r1, [r5, #0]
 8003432:	f1c4 0306 	rsb	r3, r4, #6
 8003436:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800343a:	fa2c fc03 	lsr.w	ip, ip, r3
 800343e:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 8003442:	44a6      	add	lr, r4
  CLEAR_BIT(ADCx->CR, LinearityWord);
 8003444:	688b      	ldr	r3, [r1, #8]
 8003446:	ea23 030c 	bic.w	r3, r3, ip
 800344a:	608b      	str	r3, [r1, #8]
  uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_ADCEx_LinearCalibration_GetValue+0x8e>)
  while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 800344e:	e7e1      	b.n	8003414 <HAL_ADCEx_LinearCalibration_GetValue+0x3a>
    }
    if (temp_REG_IsConversionOngoing != 0UL)
 8003450:	b137      	cbz	r7, 8003460 <HAL_ADCEx_LinearCalibration_GetValue+0x86>
    {
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003452:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8003454:	6891      	ldr	r1, [r2, #8]
 8003456:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_ADCEx_LinearCalibration_GetValue+0x8a>)
 8003458:	400b      	ands	r3, r1
 800345a:	f043 0304 	orr.w	r3, r3, #4
 800345e:	6093      	str	r3, [r2, #8]
    }
  }

  return tmp_hal_status;
}
 8003460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003462:	bf00      	nop
 8003464:	7fffffc0 	.word	0x7fffffc0
 8003468:	00080070 	.word	0x00080070

0800346c <HAL_ADCEx_Calibration_SetValue>:
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint32_t CalibrationFactor)
{
 800346c:	4603      	mov	r3, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  /* Process locked */
  __HAL_LOCK(hadc);
 800346e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003472:	2801      	cmp	r0, #1
 8003474:	d035      	beq.n	80034e2 <HAL_ADCEx_Calibration_SetValue+0x76>
{
 8003476:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8003478:	2001      	movs	r0, #1
 800347a:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347e:	681d      	ldr	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003480:	68a8      	ldr	r0, [r5, #8]
 8003482:	f010 0004 	ands.w	r0, r0, #4
 8003486:	d000      	beq.n	800348a <HAL_ADCEx_Calibration_SetValue+0x1e>
 8003488:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800348a:	68ac      	ldr	r4, [r5, #8]
 800348c:	f014 0408 	ands.w	r4, r4, #8
 8003490:	d000      	beq.n	8003494 <HAL_ADCEx_Calibration_SetValue+0x28>
 8003492:	2401      	movs	r4, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003494:	68ae      	ldr	r6, [r5, #8]
 8003496:	f016 0f01 	tst.w	r6, #1
 800349a:	d001      	beq.n	80034a0 <HAL_ADCEx_Calibration_SetValue+0x34>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800349c:	4320      	orrs	r0, r4
 800349e:	d00d      	beq.n	80034bc <HAL_ADCEx_Calibration_SetValue+0x50>
    LL_ADC_SetCalibrationOffsetFactor(hadc->Instance, SingleDiff, CalibrationFactor);
  }
  else
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034a2:	f042 0220 	orr.w	r2, r2, #32
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Update ADC error code */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
 80034b0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80034b8:	bc70      	pop	{r4, r5, r6}
 80034ba:	4770      	bx	lr
  MODIFY_REG(ADCx->CALFACT,
 80034bc:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
 80034c0:	f021 20f8 	bic.w	r0, r1, #4160813056	; 0xf800f800
 80034c4:	ea24 0400 	bic.w	r4, r4, r0
 80034c8:	f3c1 000a 	ubfx	r0, r1, #0, #11
 80034cc:	43c0      	mvns	r0, r0
 80034ce:	ea00 3111 	and.w	r1, r0, r1, lsr #12
 80034d2:	f001 0110 	and.w	r1, r1, #16
 80034d6:	408a      	lsls	r2, r1
 80034d8:	4322      	orrs	r2, r4
 80034da:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034de:	2000      	movs	r0, #0
}
 80034e0:	e7e7      	b.n	80034b2 <HAL_ADCEx_Calibration_SetValue+0x46>
  __HAL_LOCK(hadc);
 80034e2:	2002      	movs	r0, #2
}
 80034e4:	4770      	bx	lr

080034e6 <HAL_ADCEx_LinearCalibration_SetValue>:
  * @param  hadc ADC handle
  * @param  LinearCalib_Buffer: Linear calibration factor
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCalib_Buffer)
{
 80034e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e8:	b083      	sub	sp, #12
 80034ea:	4604      	mov	r4, r0
 80034ec:	460d      	mov	r5, r1
  uint32_t cnt;
  __IO uint32_t wait_loop_index = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state                        */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80034fa:	d003      	beq.n	8003504 <HAL_ADCEx_LinearCalibration_SetValue+0x1e>
  {
    /* Exit deep power down mode */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003502:	609a      	str	r2, [r3, #8]
       be relaunched or a previously saved calibration factor
       re-applied once the ADC voltage regulator is enabled */
  }


  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800350c:	d113      	bne.n	8003536 <HAL_ADCEx_LinearCalibration_SetValue+0x50>
  {
    /* Enable ADC internal voltage regulator                                  */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003514:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time                                       */
    /* Wait loop initialization and execution                                 */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = ((ADC_STAB_DELAY_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_ADCEx_LinearCalibration_SetValue+0x156>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	4a48      	ldr	r2, [pc, #288]	; (8003640 <HAL_ADCEx_LinearCalibration_SetValue+0x15a>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	3301      	adds	r3, #1
 8003526:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003528:	e002      	b.n	8003530 <HAL_ADCEx_LinearCalibration_SetValue+0x4a>
    {
      wait_loop_index--;
 800352a:	9b01      	ldr	r3, [sp, #4]
 800352c:	3b01      	subs	r3, #1
 800352e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003530:	9b01      	ldr	r3, [sp, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f9      	bne.n	800352a <HAL_ADCEx_LinearCalibration_SetValue+0x44>


  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800353e:	d009      	beq.n	8003554 <HAL_ADCEx_LinearCalibration_SetValue+0x6e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	f012 0f01 	tst.w	r2, #1
 8003546:	d011      	beq.n	800356c <HAL_ADCEx_LinearCalibration_SetValue+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003548:	689e      	ldr	r6, [r3, #8]
 800354a:	f016 0604 	ands.w	r6, r6, #4
 800354e:	d13a      	bne.n	80035c6 <HAL_ADCEx_LinearCalibration_SetValue+0xe0>
    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
    {
      LL_ADC_REG_StopConversion(hadc->Instance);
      temp_REG_IsConversionOngoing = 1UL;
    }
    for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 8003550:	2006      	movs	r0, #6
 8003552:	e048      	b.n	80035e6 <HAL_ADCEx_LinearCalibration_SetValue+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	65a3      	str	r3, [r4, #88]	; 0x58
    return  HAL_ERROR;
 8003564:	2601      	movs	r6, #1
    {
      LL_ADC_REG_StartConversion(hadc->Instance);
    }
  }
  return HAL_OK;
}
 8003566:	4630      	mov	r0, r6
 8003568:	b003      	add	sp, #12
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ADC_Enable(hadc) != HAL_OK)
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff f8cf 	bl	8002710 <ADC_Enable>
 8003572:	4606      	mov	r6, r0
 8003574:	2800      	cmp	r0, #0
 8003576:	d15c      	bne.n	8003632 <HAL_ADCEx_LinearCalibration_SetValue+0x14c>
      for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 8003578:	2706      	movs	r7, #6
 800357a:	e000      	b.n	800357e <HAL_ADCEx_LinearCalibration_SetValue+0x98>
 800357c:	3f01      	subs	r7, #1
 800357e:	b1f7      	cbz	r7, 80035be <HAL_ADCEx_LinearCalibration_SetValue+0xd8>
        LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG_COUNT - cnt), LinearCalib_Buffer[cnt - 1U]);
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	f1c7 0306 	rsb	r3, r7, #6
 8003586:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800358a:	40d8      	lsrs	r0, r3
 800358c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003590:	443b      	add	r3, r7
 8003592:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
  MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
 8003596:	f8d1 20c8 	ldr.w	r2, [r1, #200]	; 0xc8
 800359a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
 80035a4:	688b      	ldr	r3, [r1, #8]
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	4303      	orrs	r3, r0
 80035ac:	608b      	str	r3, [r1, #8]
  uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
 80035ae:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_ADCEx_LinearCalibration_SetValue+0x15e>)
  while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 80035b0:	688a      	ldr	r2, [r1, #8]
 80035b2:	4210      	tst	r0, r2
 80035b4:	d1e2      	bne.n	800357c <HAL_ADCEx_LinearCalibration_SetValue+0x96>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0e0      	beq.n	800357c <HAL_ADCEx_LinearCalibration_SetValue+0x96>
    timeout_cpu_cycles--;
 80035ba:	3b01      	subs	r3, #1
 80035bc:	e7f8      	b.n	80035b0 <HAL_ADCEx_LinearCalibration_SetValue+0xca>
      (void)ADC_Disable(hadc);
 80035be:	4620      	mov	r0, r4
 80035c0:	f7ff faf8 	bl	8002bb4 <ADC_Disable>
 80035c4:	e7cf      	b.n	8003566 <HAL_ADCEx_LinearCalibration_SetValue+0x80>
  MODIFY_REG(ADCx->CR,
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_ADCEx_LinearCalibration_SetValue+0x162>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	f042 0210 	orr.w	r2, r2, #16
 80035d0:	609a      	str	r2, [r3, #8]
      temp_REG_IsConversionOngoing = 1UL;
 80035d2:	2601      	movs	r6, #1
 80035d4:	e7bc      	b.n	8003550 <HAL_ADCEx_LinearCalibration_SetValue+0x6a>
    timeout_cpu_cycles--;
 80035d6:	3b01      	subs	r3, #1
  while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 80035d8:	688a      	ldr	r2, [r1, #8]
 80035da:	ea1c 0f02 	tst.w	ip, r2
 80035de:	d101      	bne.n	80035e4 <HAL_ADCEx_LinearCalibration_SetValue+0xfe>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f8      	bne.n	80035d6 <HAL_ADCEx_LinearCalibration_SetValue+0xf0>
    for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 80035e4:	3801      	subs	r0, #1
 80035e6:	b1d0      	cbz	r0, 800361e <HAL_ADCEx_LinearCalibration_SetValue+0x138>
      LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG_COUNT - cnt), LinearCalib_Buffer[cnt - 1U]);
 80035e8:	6821      	ldr	r1, [r4, #0]
 80035ea:	f1c0 0306 	rsb	r3, r0, #6
 80035ee:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80035f2:	fa2c fc03 	lsr.w	ip, ip, r3
 80035f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80035fa:	4403      	add	r3, r0
 80035fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
  MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
 8003600:	f8d1 20c8 	ldr.w	r2, [r1, #200]	; 0xc8
 8003604:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
 800360e:	688b      	ldr	r3, [r1, #8]
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	ea4c 0303 	orr.w	r3, ip, r3
 8003618:	608b      	str	r3, [r1, #8]
  uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_ADCEx_LinearCalibration_SetValue+0x15e>)
  while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 800361c:	e7dc      	b.n	80035d8 <HAL_ADCEx_LinearCalibration_SetValue+0xf2>
    if (temp_REG_IsConversionOngoing != 0UL)
 800361e:	b156      	cbz	r6, 8003636 <HAL_ADCEx_LinearCalibration_SetValue+0x150>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003620:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003622:	6891      	ldr	r1, [r2, #8]
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_ADCEx_LinearCalibration_SetValue+0x162>)
 8003626:	400b      	ands	r3, r1
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 800362e:	2600      	movs	r6, #0
}
 8003630:	e799      	b.n	8003566 <HAL_ADCEx_LinearCalibration_SetValue+0x80>
      return  HAL_ERROR;
 8003632:	2601      	movs	r6, #1
 8003634:	e797      	b.n	8003566 <HAL_ADCEx_LinearCalibration_SetValue+0x80>
  return HAL_OK;
 8003636:	2600      	movs	r6, #0
 8003638:	e795      	b.n	8003566 <HAL_ADCEx_LinearCalibration_SetValue+0x80>
 800363a:	bf00      	nop
 800363c:	24000000 	.word	0x24000000
 8003640:	053e2d63 	.word	0x053e2d63
 8003644:	00080070 	.word	0x00080070
 8003648:	7fffffc0 	.word	0x7fffffc0

0800364c <HAL_ADCEx_LinearCalibration_FactorLoad>:
  * @brief  Load the calibration factor from engi bytes
  * @param  hadc ADC handle
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_FactorLoad(ADC_HandleTypeDef *hadc)
{
 800364c:	b500      	push	{lr}
 800364e:	b087      	sub	sp, #28

  /* Linearity calibration is retrieved from engi bytes
     read values from registers and put them to the CALFACT2 register */
  /* If needed linearity calibration can be done in runtime using
     LL_ADC_GetCalibrationLinearFactor()                             */
  if (hadc->Instance == ADC1)
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_ADCEx_LinearCalibration_FactorLoad+0x54>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00a      	beq.n	800366e <HAL_ADCEx_LinearCalibration_FactorLoad+0x22>
  {
    FactorOffset = 0UL;
  }
  else if (hadc->Instance == ADC2)
 8003658:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <HAL_ADCEx_LinearCalibration_FactorLoad+0x1c>
  {
    FactorOffset = 8UL;
  }
  else   /*Case ADC3*/
  {
    FactorOffset = 16UL;
 8003660:	f04f 0c10 	mov.w	ip, #16
  }

  for (cnt = 0UL; cnt < ADC_LINEAR_CALIB_REG_COUNT; cnt++)
 8003664:	2300      	movs	r3, #0
 8003666:	e010      	b.n	800368a <HAL_ADCEx_LinearCalibration_FactorLoad+0x3e>
    FactorOffset = 8UL;
 8003668:	f04f 0c08 	mov.w	ip, #8
 800366c:	e7fa      	b.n	8003664 <HAL_ADCEx_LinearCalibration_FactorLoad+0x18>
    FactorOffset = 0UL;
 800366e:	f04f 0c00 	mov.w	ip, #0
 8003672:	e7f7      	b.n	8003664 <HAL_ADCEx_LinearCalibration_FactorLoad+0x18>
  {
    LinearCalib_Buffer[cnt] = *(uint32_t *)(ADC_LINEAR_CALIB_REG_1_ADDR + FactorOffset + cnt);
 8003674:	eb03 010c 	add.w	r1, r3, ip
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_ADCEx_LinearCalibration_FactorLoad+0x58>)
 800367a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800367e:	aa06      	add	r2, sp, #24
 8003680:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003684:	f842 1c18 	str.w	r1, [r2, #-24]
  for (cnt = 0UL; cnt < ADC_LINEAR_CALIB_REG_COUNT; cnt++)
 8003688:	3301      	adds	r3, #1
 800368a:	2b05      	cmp	r3, #5
 800368c:	d9f2      	bls.n	8003674 <HAL_ADCEx_LinearCalibration_FactorLoad+0x28>
  }
  if (HAL_ADCEx_LinearCalibration_SetValue(hadc, (uint32_t *)LinearCalib_Buffer) != HAL_OK)
 800368e:	4669      	mov	r1, sp
 8003690:	f7ff ff29 	bl	80034e6 <HAL_ADCEx_LinearCalibration_SetValue>
 8003694:	b100      	cbz	r0, 8003698 <HAL_ADCEx_LinearCalibration_FactorLoad+0x4c>
  {
    tmp_hal_status = HAL_ERROR;
 8003696:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003698:	b007      	add	sp, #28
 800369a:	f85d fb04 	ldr.w	pc, [sp], #4
 800369e:	bf00      	nop
 80036a0:	40022000 	.word	0x40022000
 80036a4:	1ff1ec00 	.word	0x1ff1ec00

080036a8 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ac:	6803      	ldr	r3, [r0, #0]
 80036ae:	493c      	ldr	r1, [pc, #240]	; (80037a0 <HAL_ADCEx_InjectedStart+0xf8>)
 80036b0:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_ADCEx_InjectedStart+0xfc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	bf18      	it	ne
 80036b6:	428b      	cmpne	r3, r1
 80036b8:	d14e      	bne.n	8003758 <HAL_ADCEx_InjectedStart+0xb0>
 80036ba:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036be:	6895      	ldr	r5, [r2, #8]
 80036c0:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	f012 0f08 	tst.w	r2, #8
 80036ca:	d165      	bne.n	8003798 <HAL_ADCEx_InjectedStart+0xf0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80036cc:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	f413 7fc0 	tst.w	r3, #384	; 0x180
 80036d4:	d101      	bne.n	80036da <HAL_ADCEx_InjectedStart+0x32>
        && (tmp_config_injected_queue == 0UL)
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	da40      	bge.n	800375c <HAL_ADCEx_InjectedStart+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80036da:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d05c      	beq.n	800379c <HAL_ADCEx_InjectedStart+0xf4>
 80036e2:	2301      	movs	r3, #1
 80036e4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff f811 	bl	8002710 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d14e      	bne.n	8003790 <HAL_ADCEx_InjectedStart+0xe8>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80036f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036f8:	d036      	beq.n	8003768 <HAL_ADCEx_InjectedStart+0xc0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036fc:	f023 0308 	bic.w	r3, r3, #8
 8003700:	65a3      	str	r3, [r4, #88]	; 0x58
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003702:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_ADCEx_InjectedStart+0x100>)
 8003706:	4013      	ands	r3, r2
 8003708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800370c:	6563      	str	r3, [r4, #84]	; 0x54
                        HAL_ADC_STATE_INJ_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <HAL_ADCEx_InjectedStart+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d02b      	beq.n	800376e <HAL_ADCEx_InjectedStart+0xc6>
 8003716:	461a      	mov	r2, r3
 8003718:	4293      	cmp	r3, r2
 800371a:	d000      	beq.n	800371e <HAL_ADCEx_InjectedStart+0x76>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371c:	b91d      	cbnz	r5, 8003726 <HAL_ADCEx_InjectedStart+0x7e>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800371e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003720:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003724:	6562      	str	r2, [r4, #84]	; 0x54
      }

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003726:	2260      	movs	r2, #96	; 0x60
 8003728:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800372a:	2300      	movs	r3, #0
 800372c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      /*    - ADC is enabled only (conversion is not started),                  */
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_ADCEx_InjectedStart+0xfc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_ADCEx_InjectedStart+0xcc>
 8003738:	461a      	mov	r2, r3
 800373a:	4293      	cmp	r3, r2
 800373c:	d01d      	beq.n	800377a <HAL_ADCEx_InjectedStart+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800373e:	2d06      	cmp	r5, #6
 8003740:	bf14      	ite	ne
 8003742:	2200      	movne	r2, #0
 8003744:	2201      	moveq	r2, #1
 8003746:	b1c5      	cbz	r5, 800377a <HAL_ADCEx_InjectedStart+0xd2>
 8003748:	b9ba      	cbnz	r2, 800377a <HAL_ADCEx_InjectedStart+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800374a:	2d07      	cmp	r5, #7
 800374c:	d015      	beq.n	800377a <HAL_ADCEx_InjectedStart+0xd2>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800374e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003754:	6563      	str	r3, [r4, #84]	; 0x54
 8003756:	e020      	b.n	800379a <HAL_ADCEx_InjectedStart+0xf2>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <HAL_ADCEx_InjectedStart+0x104>)
 800375a:	e7b0      	b.n	80036be <HAL_ADCEx_InjectedStart+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800375e:	f043 0320 	orr.w	r3, r3, #32
 8003762:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003764:	2001      	movs	r0, #1
 8003766:	e018      	b.n	800379a <HAL_ADCEx_InjectedStart+0xf2>
        ADC_CLEAR_ERRORCODE(hadc);
 8003768:	2300      	movs	r3, #0
 800376a:	65a3      	str	r3, [r4, #88]	; 0x58
 800376c:	e7c9      	b.n	8003702 <HAL_ADCEx_InjectedStart+0x5a>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800376e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003772:	e7d1      	b.n	8003718 <HAL_ADCEx_InjectedStart+0x70>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003774:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003778:	e7df      	b.n	800373a <HAL_ADCEx_InjectedStart+0x92>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800377a:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800377c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003780:	d10b      	bne.n	800379a <HAL_ADCEx_InjectedStart+0xf2>
  MODIFY_REG(ADCx->CR,
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_ADCEx_InjectedStart+0x108>)
 8003786:	400a      	ands	r2, r1
 8003788:	f042 0208 	orr.w	r2, r2, #8
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	e004      	b.n	800379a <HAL_ADCEx_InjectedStart+0xf2>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003790:	2300      	movs	r3, #0
 8003792:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003796:	e000      	b.n	800379a <HAL_ADCEx_InjectedStart+0xf2>
    return HAL_BUSY;
 8003798:	2002      	movs	r0, #2
  }
}
 800379a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 800379c:	2002      	movs	r0, #2
 800379e:	e7fc      	b.n	800379a <HAL_ADCEx_InjectedStart+0xf2>
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40022100 	.word	0x40022100
 80037a8:	ffffcffe 	.word	0xffffcffe
 80037ac:	58026300 	.word	0x58026300
 80037b0:	7fffffc0 	.word	0x7fffffc0

080037b4 <HAL_ADCEx_InjectedStop>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d021      	beq.n	8003800 <HAL_ADCEx_InjectedStop+0x4c>
{
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80037c0:	2301      	movs	r3, #1
 80037c2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f7fe ff24 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on regular group is on-going                       */
  if (tmp_hal_status == HAL_OK)
 80037cc:	b940      	cbnz	r0, 80037e0 <HAL_ADCEx_InjectedStop+0x2c>
  {
    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ce:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f013 0f04 	tst.w	r3, #4
 80037d6:	d007      	beq.n	80037e8 <HAL_ADCEx_InjectedStop+0x34>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037de:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e0:	2300      	movs	r3, #0
 80037e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80037e6:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Disable(hadc);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff f9e3 	bl	8002bb4 <ADC_Disable>
      if (tmp_hal_status == HAL_OK)
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d1f6      	bne.n	80037e0 <HAL_ADCEx_InjectedStop+0x2c>
        ADC_STATE_CLR_SET(hadc->State,
 80037f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_ADCEx_InjectedStop+0x50>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6563      	str	r3, [r4, #84]	; 0x54
 80037fe:	e7ef      	b.n	80037e0 <HAL_ADCEx_InjectedStop+0x2c>
  __HAL_LOCK(hadc);
 8003800:	2002      	movs	r0, #2
}
 8003802:	4770      	bx	lr
 8003804:	ffffeefe 	.word	0xffffeefe

08003808 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	4604      	mov	r4, r0
 800380e:	460d      	mov	r5, r1
  uint32_t tmp_Flag_End;
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003810:	6803      	ldr	r3, [r0, #0]
 8003812:	4941      	ldr	r1, [pc, #260]	; (8003918 <HAL_ADCEx_InjectedPollForConversion+0x110>)
 8003814:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_ADCEx_InjectedPollForConversion+0x114>)
 8003816:	4293      	cmp	r3, r2
 8003818:	bf18      	it	ne
 800381a:	428b      	cmpne	r3, r1
 800381c:	d126      	bne.n	800386c <HAL_ADCEx_InjectedPollForConversion+0x64>
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_ADCEx_InjectedPollForConversion+0x118>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003820:	689f      	ldr	r7, [r3, #8]
 8003822:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003826:	6923      	ldr	r3, [r4, #16]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d021      	beq.n	8003870 <HAL_ADCEx_InjectedPollForConversion+0x68>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 800382c:	2620      	movs	r6, #32
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800382e:	f7fd fc91 	bl	8001154 <HAL_GetTick>
 8003832:	4680      	mov	r8, r0

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4232      	tst	r2, r6
 800383a:	d11b      	bne.n	8003874 <HAL_ADCEx_InjectedPollForConversion+0x6c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800383c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003840:	d0f8      	beq.n	8003834 <HAL_ADCEx_InjectedPollForConversion+0x2c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003842:	f7fd fc87 	bl	8001154 <HAL_GetTick>
 8003846:	eba0 0008 	sub.w	r0, r0, r8
 800384a:	42a8      	cmp	r0, r5
 800384c:	d801      	bhi.n	8003852 <HAL_ADCEx_InjectedPollForConversion+0x4a>
 800384e:	2d00      	cmp	r5, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_ADCEx_InjectedPollForConversion+0x2c>
      {
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4233      	tst	r3, r6
 8003858:	d1ec      	bne.n	8003834 <HAL_ADCEx_InjectedPollForConversion+0x2c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800385a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6563      	str	r3, [r4, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003862:	2300      	movs	r3, #0
 8003864:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

          return HAL_TIMEOUT;
 8003868:	2003      	movs	r0, #3
 800386a:	e049      	b.n	8003900 <HAL_ADCEx_InjectedPollForConversion+0xf8>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_ADCEx_InjectedPollForConversion+0x11c>)
 800386e:	e7d7      	b.n	8003820 <HAL_ADCEx_InjectedPollForConversion+0x18>
    tmp_Flag_End = ADC_FLAG_JEOS;
 8003870:	2640      	movs	r6, #64	; 0x40
 8003872:	e7dc      	b.n	800382e <HAL_ADCEx_InjectedPollForConversion+0x26>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003874:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003876:	f412 7fc0 	tst.w	r2, #384	; 0x180
 800387a:	d115      	bne.n	80038a8 <HAL_ADCEx_InjectedPollForConversion+0xa0>
 800387c:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003884:	d112      	bne.n	80038ac <HAL_ADCEx_InjectedPollForConversion+0xa4>
 8003886:	2501      	movs	r5, #1
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
  /* Get relevant register CFGR in ADC instance of ADC master or slave  */
  /* in function of multimode state (for devices with multimode         */
  /* available).                                                        */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <HAL_ADCEx_InjectedPollForConversion+0x114>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d010      	beq.n	80038b0 <HAL_ADCEx_InjectedPollForConversion+0xa8>
 800388e:	461a      	mov	r2, r3
 8003890:	4293      	cmp	r3, r2
 8003892:	d010      	beq.n	80038b6 <HAL_ADCEx_InjectedPollForConversion+0xae>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003894:	2f06      	cmp	r7, #6
 8003896:	bf14      	ite	ne
 8003898:	2100      	movne	r1, #0
 800389a:	2101      	moveq	r1, #1
 800389c:	b15f      	cbz	r7, 80038b6 <HAL_ADCEx_InjectedPollForConversion+0xae>
 800389e:	b951      	cbnz	r1, 80038b6 <HAL_ADCEx_InjectedPollForConversion+0xae>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038a0:	2f07      	cmp	r7, #7
 80038a2:	d008      	beq.n	80038b6 <HAL_ADCEx_InjectedPollForConversion+0xae>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
  }
  else
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038a4:	68d1      	ldr	r1, [r2, #12]
 80038a6:	e007      	b.n	80038b8 <HAL_ADCEx_InjectedPollForConversion+0xb0>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80038a8:	2000      	movs	r0, #0
 80038aa:	e7e8      	b.n	800387e <HAL_ADCEx_InjectedPollForConversion+0x76>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038ac:	2500      	movs	r5, #0
 80038ae:	e7eb      	b.n	8003888 <HAL_ADCEx_InjectedPollForConversion+0x80>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80038b4:	e7ec      	b.n	8003890 <HAL_ADCEx_InjectedPollForConversion+0x88>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038b6:	68d9      	ldr	r1, [r3, #12]
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038be:	6562      	str	r2, [r4, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80038c0:	b930      	cbnz	r0, 80038d0 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 80038c2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80038c6:	d116      	bne.n	80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80038c8:	b1ad      	cbz	r5, 80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80038ca:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80038ce:	d112      	bne.n	80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038d6:	d00e      	beq.n	80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038d8:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 80038dc:	d10b      	bne.n	80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038e4:	6562      	str	r2, [r4, #84]	; 0x54

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038e8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80038ec:	d103      	bne.n	80038f6 <HAL_ADCEx_InjectedPollForConversion+0xee>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	6562      	str	r2, [r4, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80038f6:	2e40      	cmp	r6, #64	; 0x40
 80038f8:	d004      	beq.n	8003904 <HAL_ADCEx_InjectedPollForConversion+0xfc>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80038fa:	2220      	movs	r2, #32
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 80038fe:	2000      	movs	r0, #0
}
 8003900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003904:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 8003908:	d103      	bne.n	8003912 <HAL_ADCEx_InjectedPollForConversion+0x10a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800390a:	2260      	movs	r2, #96	; 0x60
 800390c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800390e:	2000      	movs	r0, #0
 8003910:	e7f6      	b.n	8003900 <HAL_ADCEx_InjectedPollForConversion+0xf8>
 8003912:	2000      	movs	r0, #0
 8003914:	e7f4      	b.n	8003900 <HAL_ADCEx_InjectedPollForConversion+0xf8>
 8003916:	bf00      	nop
 8003918:	40022000 	.word	0x40022000
 800391c:	40022100 	.word	0x40022100
 8003920:	40022300 	.word	0x40022300
 8003924:	58026300 	.word	0x58026300

08003928 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4604      	mov	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800392c:	6803      	ldr	r3, [r0, #0]
 800392e:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_ADCEx_InjectedStart_IT+0x13c>)
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_ADCEx_InjectedStart_IT+0x140>)
 8003932:	4293      	cmp	r3, r2
 8003934:	bf18      	it	ne
 8003936:	428b      	cmpne	r3, r1
 8003938:	d165      	bne.n	8003a06 <HAL_ADCEx_InjectedStart_IT+0xde>
 800393a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800393e:	6895      	ldr	r5, [r2, #8]
 8003940:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	f012 0f08 	tst.w	r2, #8
 800394a:	f040 8087 	bne.w	8003a5c <HAL_ADCEx_InjectedStart_IT+0x134>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800394e:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8003956:	d101      	bne.n	800395c <HAL_ADCEx_InjectedStart_IT+0x34>
        && (tmp_config_injected_queue == 0UL)
 8003958:	2a00      	cmp	r2, #0
 800395a:	da56      	bge.n	8003a0a <HAL_ADCEx_InjectedStart_IT+0xe2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800395c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003960:	2b01      	cmp	r3, #1
 8003962:	d07d      	beq.n	8003a60 <HAL_ADCEx_InjectedStart_IT+0x138>
 8003964:	2301      	movs	r3, #1
 8003966:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800396a:	4620      	mov	r0, r4
 800396c:	f7fe fed0 	bl	8002710 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003970:	2800      	cmp	r0, #0
 8003972:	d16f      	bne.n	8003a54 <HAL_ADCEx_InjectedStart_IT+0x12c>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003974:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003976:	f413 7f80 	tst.w	r3, #256	; 0x100
 800397a:	d04c      	beq.n	8003a16 <HAL_ADCEx_InjectedStart_IT+0xee>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800397c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800397e:	f023 0308 	bic.w	r3, r3, #8
 8003982:	65a3      	str	r3, [r4, #88]	; 0x58
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003984:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003986:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <HAL_ADCEx_InjectedStart_IT+0x144>)
 8003988:	4013      	ands	r3, r2
 800398a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800398e:	6563      	str	r3, [r4, #84]	; 0x54
                        HAL_ADC_STATE_INJ_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_ADCEx_InjectedStart_IT+0x140>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d041      	beq.n	8003a1c <HAL_ADCEx_InjectedStart_IT+0xf4>
 8003998:	461a      	mov	r2, r3
 800399a:	4293      	cmp	r3, r2
 800399c:	d000      	beq.n	80039a0 <HAL_ADCEx_InjectedStart_IT+0x78>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800399e:	b91d      	cbnz	r5, 80039a8 <HAL_ADCEx_InjectedStart_IT+0x80>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80039a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80039a6:	6562      	str	r2, [r4, #84]	; 0x54
      }

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80039a8:	2260      	movs	r2, #96	; 0x60
 80039aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039ac:	2300      	movs	r3, #0
 80039ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80039ba:	d003      	beq.n	80039c4 <HAL_ADCEx_InjectedStart_IT+0x9c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c2:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d02b      	beq.n	8003a22 <HAL_ADCEx_InjectedStart_IT+0xfa>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	6853      	ldr	r3, [r2, #4]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	6853      	ldr	r3, [r2, #4]
 80039d8:	f043 0320 	orr.w	r3, r3, #32
 80039dc:	6053      	str	r3, [r2, #4]
      /*    - ADC is enabled only (conversion is not started),                  */
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_ADCEx_InjectedStart_IT+0x140>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d028      	beq.n	8003a38 <HAL_ADCEx_InjectedStart_IT+0x110>
 80039e6:	461a      	mov	r2, r3
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d028      	beq.n	8003a3e <HAL_ADCEx_InjectedStart_IT+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039ec:	2d06      	cmp	r5, #6
 80039ee:	bf14      	ite	ne
 80039f0:	2200      	movne	r2, #0
 80039f2:	2201      	moveq	r2, #1
 80039f4:	b31d      	cbz	r5, 8003a3e <HAL_ADCEx_InjectedStart_IT+0x116>
 80039f6:	bb12      	cbnz	r2, 8003a3e <HAL_ADCEx_InjectedStart_IT+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039f8:	2d07      	cmp	r5, #7
 80039fa:	d020      	beq.n	8003a3e <HAL_ADCEx_InjectedStart_IT+0x116>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a02:	6563      	str	r3, [r4, #84]	; 0x54
 8003a04:	e02b      	b.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_ADCEx_InjectedStart_IT+0x148>)
 8003a08:	e799      	b.n	800393e <HAL_ADCEx_InjectedStart_IT+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a0c:	f043 0320 	orr.w	r3, r3, #32
 8003a10:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
 8003a14:	e023      	b.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>
        ADC_CLEAR_ERRORCODE(hadc);
 8003a16:	2300      	movs	r3, #0
 8003a18:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a1a:	e7b3      	b.n	8003984 <HAL_ADCEx_InjectedStart_IT+0x5c>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a1c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003a20:	e7bb      	b.n	800399a <HAL_ADCEx_InjectedStart_IT+0x72>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	6853      	ldr	r3, [r2, #4]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	6853      	ldr	r3, [r2, #4]
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	6053      	str	r3, [r2, #4]
          break;
 8003a36:	e7d2      	b.n	80039de <HAL_ADCEx_InjectedStart_IT+0xb6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a38:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003a3c:	e7d4      	b.n	80039e8 <HAL_ADCEx_InjectedStart_IT+0xc0>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003a3e:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003a40:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a44:	d10b      	bne.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>
  MODIFY_REG(ADCx->CR,
 8003a46:	6899      	ldr	r1, [r3, #8]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_ADCEx_InjectedStart_IT+0x14c>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	e004      	b.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003a5a:	e000      	b.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>
    return HAL_BUSY;
 8003a5c:	2002      	movs	r0, #2
  }
}
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8003a60:	2002      	movs	r0, #2
 8003a62:	e7fc      	b.n	8003a5e <HAL_ADCEx_InjectedStart_IT+0x136>
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40022100 	.word	0x40022100
 8003a6c:	ffffcffe 	.word	0xffffcffe
 8003a70:	58026300 	.word	0x58026300
 8003a74:	7fffffc0 	.word	0x7fffffc0

08003a78 <HAL_ADCEx_InjectedStop_IT>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a78:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d026      	beq.n	8003ace <HAL_ADCEx_InjectedStop_IT+0x56>
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003a84:	2301      	movs	r3, #1
 8003a86:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* 1. Stop potential conversion on going on injected group only. */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	f7fe fdc2 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if injected conversions are effectively stopped   */
  /* and if no conversion on the other group (regular group) is intended to   */
  /* continue.                                                                */
  if (tmp_hal_status == HAL_OK)
 8003a90:	b968      	cbnz	r0, 8003aae <HAL_ADCEx_InjectedStop_IT+0x36>
  {
    /* Disable ADC end of conversion interrupt for injected channels */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	6853      	ldr	r3, [r2, #4]
 8003a96:	f423 638c 	bic.w	r3, r3, #1120	; 0x460
 8003a9a:	6053      	str	r3, [r2, #4]

    if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a9c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f013 0f04 	tst.w	r3, #4
 8003aa4:	d007      	beq.n	8003ab6 <HAL_ADCEx_InjectedStop_IT+0x3e>
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aac:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003ab4:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Disable(hadc);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff f87c 	bl	8002bb4 <ADC_Disable>
      if (tmp_hal_status == HAL_OK)
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d1f6      	bne.n	8003aae <HAL_ADCEx_InjectedStop_IT+0x36>
        ADC_STATE_CLR_SET(hadc->State,
 8003ac0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_ADCEx_InjectedStop_IT+0x5c>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6563      	str	r3, [r4, #84]	; 0x54
 8003acc:	e7ef      	b.n	8003aae <HAL_ADCEx_InjectedStop_IT+0x36>
  __HAL_LOCK(hadc);
 8003ace:	2002      	movs	r0, #2
}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	ffffeefe 	.word	0xffffeefe

08003ad8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	b09a      	sub	sp, #104	; 0x68
 8003adc:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ade:	6800      	ldr	r0, [r0, #0]
 8003ae0:	6880      	ldr	r0, [r0, #8]
 8003ae2:	f010 0f04 	tst.w	r0, #4
 8003ae6:	d164      	bne.n	8003bb2 <HAL_ADCEx_MultiModeStart_DMA+0xda>
 8003ae8:	460e      	mov	r6, r1
 8003aea:	4615      	mov	r5, r2
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003aec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d061      	beq.n	8003bb8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>
 8003af4:	2301      	movs	r3, #1
 8003af6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	9316      	str	r3, [sp, #88]	; 0x58
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003afe:	9317      	str	r3, [sp, #92]	; 0x5c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d03d      	beq.n	8003b84 <HAL_ADCEx_MultiModeStart_DMA+0xac>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]

    if (tmphadcSlave.Instance == NULL)
 8003b0c:	9b01      	ldr	r3, [sp, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d03c      	beq.n	8003b8c <HAL_ADCEx_MultiModeStart_DMA+0xb4>
      return HAL_ERROR;
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7fe fdfc 	bl	8002710 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d040      	beq.n	8003b9e <HAL_ADCEx_MultiModeStart_DMA+0xc6>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d144      	bne.n	8003baa <HAL_ADCEx_MultiModeStart_DMA+0xd2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2a:	6563      	str	r3, [r4, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b32:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8003b34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003b3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8003b40:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	491d      	ldr	r1, [pc, #116]	; (8003bbc <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_ADCEx_MultiModeStart_DMA+0xf8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf18      	it	ne
 8003b4c:	428b      	cmpne	r3, r1
 8003b4e:	d12a      	bne.n	8003ba6 <HAL_ADCEx_MultiModeStart_DMA+0xce>
 8003b50:	f501 7140 	add.w	r1, r1, #768	; 0x300
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b54:	221c      	movs	r2, #28
 8003b56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	6853      	ldr	r3, [r2, #4]
 8003b62:	f043 0310 	orr.w	r3, r3, #16
 8003b66:	6053      	str	r3, [r2, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003b68:	462b      	mov	r3, r5
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	310c      	adds	r1, #12
 8003b6e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b70:	f002 f9a8 	bl	8005ec4 <HAL_DMA_Start_IT>
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b74:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b76:	6891      	ldr	r1, [r2, #8]
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_ADCEx_MultiModeStart_DMA+0xfc>)
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	6093      	str	r3, [r2, #8]
}
 8003b82:	e017      	b.n	8003bb4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	e7bf      	b.n	8003b0c <HAL_ADCEx_MultiModeStart_DMA+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003b94:	2300      	movs	r3, #0
 8003b96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR;
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	e00a      	b.n	8003bb4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003b9e:	a801      	add	r0, sp, #4
 8003ba0:	f7fe fdb6 	bl	8002710 <ADC_Enable>
 8003ba4:	e7ba      	b.n	8003b1c <HAL_ADCEx_MultiModeStart_DMA+0x44>
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ba6:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <HAL_ADCEx_MultiModeStart_DMA+0x100>)
 8003ba8:	e7d4      	b.n	8003b54 <HAL_ADCEx_MultiModeStart_DMA+0x7c>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003baa:	2300      	movs	r3, #0
 8003bac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
    return HAL_BUSY;
 8003bb2:	2002      	movs	r0, #2
  }
}
 8003bb4:	b01a      	add	sp, #104	; 0x68
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003bb8:	2002      	movs	r0, #2
 8003bba:	e7fb      	b.n	8003bb4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	fffff0fe 	.word	0xfffff0fe
 8003bc4:	08001c31 	.word	0x08001c31
 8003bc8:	0800194b 	.word	0x0800194b
 8003bcc:	08001cb9 	.word	0x08001cb9
 8003bd0:	40022100 	.word	0x40022100
 8003bd4:	7fffffc0 	.word	0x7fffffc0
 8003bd8:	58026300 	.word	0x58026300

08003bdc <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	b09a      	sub	sp, #104	; 0x68

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f000 8083 	beq.w	8003cf0 <HAL_ADCEx_MultiModeStop_DMA+0x114>
 8003bea:	4604      	mov	r4, r0
 8003bec:	2301      	movs	r3, #1
 8003bee:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	f7fe fd0e 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d172      	bne.n	8003ce4 <HAL_ADCEx_MultiModeStop_DMA+0x108>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9316      	str	r3, [sp, #88]	; 0x58
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c02:	9317      	str	r3, [sp, #92]	; 0x5c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d00d      	beq.n	8003c28 <HAL_ADCEx_MultiModeStop_DMA+0x4c>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9301      	str	r3, [sp, #4]

    if (tmphadcSlave.Instance == NULL)
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	b16b      	cbz	r3, 8003c30 <HAL_ADCEx_MultiModeStop_DMA+0x54>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8003c14:	f7fd fa9e 	bl	8001154 <HAL_GetTick>
 8003c18:	4605      	mov	r5, r0

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c1a:	9b01      	ldr	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f013 0304 	ands.w	r3, r3, #4
 8003c22:	d013      	beq.n	8003c4c <HAL_ADCEx_MultiModeStop_DMA+0x70>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e011      	b.n	8003c4c <HAL_ADCEx_MultiModeStop_DMA+0x70>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	e7ef      	b.n	8003c10 <HAL_ADCEx_MultiModeStop_DMA+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR;
 8003c3e:	2501      	movs	r5, #1
 8003c40:	e053      	b.n	8003cea <HAL_ADCEx_MultiModeStop_DMA+0x10e>

          return HAL_ERROR;
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f013 0304 	ands.w	r3, r3, #4
 8003c4a:	d121      	bne.n	8003c90 <HAL_ADCEx_MultiModeStop_DMA+0xb4>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	6892      	ldr	r2, [r2, #8]
 8003c50:	f012 0f04 	tst.w	r2, #4
 8003c54:	d101      	bne.n	8003c5a <HAL_ADCEx_MultiModeStop_DMA+0x7e>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d11c      	bne.n	8003c94 <HAL_ADCEx_MultiModeStop_DMA+0xb8>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c5a:	f7fd fa7b 	bl	8001154 <HAL_GetTick>
 8003c5e:	1b43      	subs	r3, r0, r5
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d9ee      	bls.n	8003c42 <HAL_ADCEx_MultiModeStop_DMA+0x66>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f013 0304 	ands.w	r3, r3, #4
 8003c6c:	d000      	beq.n	8003c70 <HAL_ADCEx_MultiModeStop_DMA+0x94>
 8003c6e:	2301      	movs	r3, #1
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	f012 0f04 	tst.w	r2, #4
 8003c78:	d101      	bne.n	8003c7e <HAL_ADCEx_MultiModeStop_DMA+0xa2>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d1e1      	bne.n	8003c42 <HAL_ADCEx_MultiModeStop_DMA+0x66>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c80:	f043 0310 	orr.w	r3, r3, #16
 8003c84:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8003c86:	2300      	movs	r3, #0
 8003c88:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_ERROR;
 8003c8c:	2501      	movs	r5, #1
 8003c8e:	e02c      	b.n	8003cea <HAL_ADCEx_MultiModeStop_DMA+0x10e>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e7db      	b.n	8003c4c <HAL_ADCEx_MultiModeStop_DMA+0x70>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003c94:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003c96:	f002 fa61 	bl	800615c <HAL_DMA_Abort>
 8003c9a:	4605      	mov	r5, r0

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8003c9c:	2801      	cmp	r0, #1
 8003c9e:	d010      	beq.n	8003cc2 <HAL_ADCEx_MultiModeStop_DMA+0xe6>
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	6853      	ldr	r3, [r2, #4]
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	6053      	str	r3, [r2, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8003caa:	b97d      	cbnz	r5, 8003ccc <HAL_ADCEx_MultiModeStop_DMA+0xf0>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8003cac:	a801      	add	r0, sp, #4
 8003cae:	f7fe ff81 	bl	8002bb4 <ADC_Disable>
 8003cb2:	4606      	mov	r6, r0
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7fe ff7d 	bl	8002bb4 <ADC_Disable>
 8003cba:	b968      	cbnz	r0, 8003cd8 <HAL_ADCEx_MultiModeStop_DMA+0xfc>
 8003cbc:	b966      	cbnz	r6, 8003cd8 <HAL_ADCEx_MultiModeStop_DMA+0xfc>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8003cbe:	4635      	mov	r5, r6
 8003cc0:	e00a      	b.n	8003cd8 <HAL_ADCEx_MultiModeStop_DMA+0xfc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc8:	6563      	str	r3, [r4, #84]	; 0x54
 8003cca:	e7e9      	b.n	8003ca0 <HAL_ADCEx_MultiModeStop_DMA+0xc4>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7fe ff71 	bl	8002bb4 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8003cd2:	a801      	add	r0, sp, #4
 8003cd4:	f7fe ff6e 	bl	8002bb4 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003cea:	4628      	mov	r0, r5
 8003cec:	b01a      	add	sp, #104	; 0x68
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003cf0:	2502      	movs	r5, #2
 8003cf2:	e7fa      	b.n	8003cea <HAL_ADCEx_MultiModeStop_DMA+0x10e>
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	ffffeefe 	.word	0xffffeefe

08003cfc <HAL_ADCEx_MultiModeGetValue>:
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cfc:	6803      	ldr	r3, [r0, #0]
 8003cfe:	4905      	ldr	r1, [pc, #20]	; (8003d14 <HAL_ADCEx_MultiModeGetValue+0x18>)
 8003d00:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <HAL_ADCEx_MultiModeGetValue+0x1c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bf18      	it	ne
 8003d06:	428b      	cmpne	r3, r1
 8003d08:	d102      	bne.n	8003d10 <HAL_ADCEx_MultiModeGetValue+0x14>
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_ADCEx_MultiModeGetValue+0x20>)

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 8003d0c:	68d8      	ldr	r0, [r3, #12]
}
 8003d0e:	4770      	bx	lr
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_ADCEx_MultiModeGetValue+0x24>)
 8003d12:	e7fb      	b.n	8003d0c <HAL_ADCEx_MultiModeGetValue+0x10>
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40022100 	.word	0x40022100
 8003d1c:	40022300 	.word	0x40022300
 8003d20:	58026300 	.word	0x58026300

08003d24 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003d24:	f240 2315 	movw	r3, #533	; 0x215
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	d00f      	beq.n	8003d4c <HAL_ADCEx_InjectedGetValue+0x28>
 8003d2c:	f240 331b 	movw	r3, #795	; 0x31b
 8003d30:	4299      	cmp	r1, r3
 8003d32:	d007      	beq.n	8003d44 <HAL_ADCEx_InjectedGetValue+0x20>
 8003d34:	f240 130f 	movw	r3, #271	; 0x10f
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	d00b      	beq.n	8003d54 <HAL_ADCEx_InjectedGetValue+0x30>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
      break;
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
      break;
  }

  /* Return ADC converted value */
  return tmp_jdr;
}
 8003d42:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8003d44:	6803      	ldr	r3, [r0, #0]
 8003d46:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8003d4a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8003d4c:	6803      	ldr	r3, [r0, #0]
 8003d4e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8003d52:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8003d54:	6803      	ldr	r3, [r0, #0]
 8003d56:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8003d5a:	4770      	bx	lr

08003d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d60:	4770      	bx	lr

08003d62 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d64:	4770      	bx	lr

08003d66 <HAL_ADCEx_RegularStop>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d66:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d024      	beq.n	8003db8 <HAL_ADCEx_RegularStop+0x52>
{
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50

  /* 1. Stop potential regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8003d78:	f7fe fc4c 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if regular conversions are effectively stopped
     and if no injected conversions are on-going */
  if (tmp_hal_status == HAL_OK)
 8003d7c:	b960      	cbnz	r0, 8003d98 <HAL_ADCEx_RegularStop+0x32>
  {
    /* Clear HAL_ADC_STATE_REG_BUSY bit */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	6563      	str	r3, [r4, #84]	; 0x54

    if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d86:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f013 0f08 	tst.w	r3, #8
 8003d8e:	d007      	beq.n	8003da0 <HAL_ADCEx_RegularStop+0x3a>
    }
    /* Conversion on injected group is stopped, but ADC not disabled since    */
    /* conversion on regular group is still running.                          */
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d96:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003d9e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Disable(hadc);
 8003da0:	4620      	mov	r0, r4
 8003da2:	f7fe ff07 	bl	8002bb4 <ADC_Disable>
      if (tmp_hal_status == HAL_OK)
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1f6      	bne.n	8003d98 <HAL_ADCEx_RegularStop+0x32>
        ADC_STATE_CLR_SET(hadc->State,
 8003daa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_ADCEx_RegularStop+0x56>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6563      	str	r3, [r4, #84]	; 0x54
 8003db6:	e7ef      	b.n	8003d98 <HAL_ADCEx_RegularStop+0x32>
  __HAL_LOCK(hadc);
 8003db8:	2002      	movs	r0, #2
}
 8003dba:	4770      	bx	lr
 8003dbc:	ffffeffe 	.word	0xffffeffe

08003dc0 <HAL_ADCEx_RegularStop_IT>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d029      	beq.n	8003e1c <HAL_ADCEx_RegularStop_IT+0x5c>
{
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50

  /* 1. Stop potential regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8003dd2:	f7fe fc1f 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped
    and if no injected conversion is on-going */
  if (tmp_hal_status == HAL_OK)
 8003dd6:	b988      	cbnz	r0, 8003dfc <HAL_ADCEx_RegularStop_IT+0x3c>
  {
    /* Clear HAL_ADC_STATE_REG_BUSY bit */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dde:	6563      	str	r3, [r4, #84]	; 0x54

    /* Disable all regular-related interrupts */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	6853      	ldr	r3, [r2, #4]
 8003de4:	f023 031c 	bic.w	r3, r3, #28
 8003de8:	6053      	str	r3, [r2, #4]

    /* 2. Disable ADC peripheral if no injected conversions are on-going */
    if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f013 0f08 	tst.w	r3, #8
 8003df2:	d007      	beq.n	8003e04 <HAL_ADCEx_RegularStop_IT+0x44>
                          HAL_ADC_STATE_READY);
      }
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003df4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dfa:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003e02:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Disable(hadc);
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fe fed5 	bl	8002bb4 <ADC_Disable>
      if (tmp_hal_status == HAL_OK)
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d1f6      	bne.n	8003dfc <HAL_ADCEx_RegularStop_IT+0x3c>
        ADC_STATE_CLR_SET(hadc->State,
 8003e0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_ADCEx_RegularStop_IT+0x60>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6563      	str	r3, [r4, #84]	; 0x54
 8003e1a:	e7ef      	b.n	8003dfc <HAL_ADCEx_RegularStop_IT+0x3c>
  __HAL_LOCK(hadc);
 8003e1c:	2002      	movs	r0, #2
}
 8003e1e:	4770      	bx	lr
 8003e20:	ffffeffe 	.word	0xffffeffe

08003e24 <HAL_ADCEx_RegularStop_DMA>:
  *         HAL_ADCEx_RegularMultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc)
{
 8003e24:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e26:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d03f      	beq.n	8003eae <HAL_ADCEx_RegularStop_DMA+0x8a>
 8003e2e:	4604      	mov	r4, r0
 8003e30:	2101      	movs	r1, #1
 8003e32:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50

  /* 1. Stop potential regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8003e36:	f7fe fbed 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped
     and if no injected conversion is on-going */
  if (tmp_hal_status == HAL_OK)
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	b120      	cbz	r0, 8003e48 <HAL_ADCEx_RegularStop_DMA+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003e44:	4628      	mov	r0, r5
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e4e:	6563      	str	r3, [r4, #84]	; 0x54
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	68d3      	ldr	r3, [r2, #12]
 8003e54:	f023 0303 	bic.w	r3, r3, #3
 8003e58:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003e5c:	f002 f97e 	bl	800615c <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8003e60:	4605      	mov	r5, r0
 8003e62:	b118      	cbz	r0, 8003e6c <HAL_ADCEx_RegularStop_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e6a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6853      	ldr	r3, [r2, #4]
 8003e70:	f023 0310 	bic.w	r3, r3, #16
 8003e74:	6053      	str	r3, [r2, #4]
    if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f013 0f08 	tst.w	r3, #8
 8003e7e:	d004      	beq.n	8003e8a <HAL_ADCEx_RegularStop_DMA+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e86:	6563      	str	r3, [r4, #84]	; 0x54
 8003e88:	e7d9      	b.n	8003e3e <HAL_ADCEx_RegularStop_DMA+0x1a>
      if (tmp_hal_status == HAL_OK)
 8003e8a:	b965      	cbnz	r5, 8003ea6 <HAL_ADCEx_RegularStop_DMA+0x82>
        tmp_hal_status = ADC_Disable(hadc);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7fe fe91 	bl	8002bb4 <ADC_Disable>
 8003e92:	4605      	mov	r5, r0
      if (tmp_hal_status == HAL_OK)
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	d1d2      	bne.n	8003e3e <HAL_ADCEx_RegularStop_DMA+0x1a>
        ADC_STATE_CLR_SET(hadc->State,
 8003e98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_ADCEx_RegularStop_DMA+0x90>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6563      	str	r3, [r4, #84]	; 0x54
 8003ea4:	e7cb      	b.n	8003e3e <HAL_ADCEx_RegularStop_DMA+0x1a>
        (void)ADC_Disable(hadc);
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7fe fe84 	bl	8002bb4 <ADC_Disable>
 8003eac:	e7f2      	b.n	8003e94 <HAL_ADCEx_RegularStop_DMA+0x70>
  __HAL_LOCK(hadc);
 8003eae:	2502      	movs	r5, #2
 8003eb0:	e7c8      	b.n	8003e44 <HAL_ADCEx_RegularStop_DMA+0x20>
 8003eb2:	bf00      	nop
 8003eb4:	ffffeffe 	.word	0xffffeffe

08003eb8 <HAL_ADCEx_RegularMultiModeStop_DMA>:

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f000 8084 	beq.w	8003fca <HAL_ADCEx_RegularMultiModeStop_DMA+0x112>
{
 8003ec2:	b530      	push	{r4, r5, lr}
 8003ec4:	b09b      	sub	sp, #108	; 0x6c
 8003ec6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003ec8:	2101      	movs	r1, #1
 8003eca:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50


  /* 1. Stop potential multimode conversion on going, on regular groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8003ece:	f7fe fba1 	bl	8002614 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d174      	bne.n	8003fc0 <HAL_ADCEx_RegularMultiModeStop_DMA+0x108>
  {
    /* Clear HAL_ADC_STATE_REG_BUSY bit */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	6563      	str	r3, [r4, #84]	; 0x54

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9316      	str	r3, [sp, #88]	; 0x58
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ee2:	9317      	str	r3, [sp, #92]	; 0x5c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_ADCEx_RegularMultiModeStop_DMA+0x118>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d00d      	beq.n	8003f08 <HAL_ADCEx_RegularMultiModeStop_DMA+0x50>
 8003eec:	2300      	movs	r3, #0
 8003eee:	9301      	str	r3, [sp, #4]

    if (tmphadcSlave.Instance == NULL)
 8003ef0:	9b01      	ldr	r3, [sp, #4]
 8003ef2:	b16b      	cbz	r3, 8003f10 <HAL_ADCEx_RegularMultiModeStop_DMA+0x58>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd f92e 	bl	8001154 <HAL_GetTick>
 8003ef8:	4605      	mov	r5, r0

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003efa:	9b01      	ldr	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f013 0304 	ands.w	r3, r3, #4
 8003f02:	d013      	beq.n	8003f2c <HAL_ADCEx_RegularMultiModeStop_DMA+0x74>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e011      	b.n	8003f2c <HAL_ADCEx_RegularMultiModeStop_DMA+0x74>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	e7ef      	b.n	8003ef0 <HAL_ADCEx_RegularMultiModeStop_DMA+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR;
 8003f1e:	2001      	movs	r0, #1
 8003f20:	e051      	b.n	8003fc6 <HAL_ADCEx_RegularMultiModeStop_DMA+0x10e>

          return HAL_ERROR;
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f22:	9b01      	ldr	r3, [sp, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f013 0304 	ands.w	r3, r3, #4
 8003f2a:	d121      	bne.n	8003f70 <HAL_ADCEx_RegularMultiModeStop_DMA+0xb8>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	6892      	ldr	r2, [r2, #8]
 8003f30:	f012 0f04 	tst.w	r2, #4
 8003f34:	d101      	bne.n	8003f3a <HAL_ADCEx_RegularMultiModeStop_DMA+0x82>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d11c      	bne.n	8003f74 <HAL_ADCEx_RegularMultiModeStop_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f3a:	f7fd f90b 	bl	8001154 <HAL_GetTick>
 8003f3e:	1b43      	subs	r3, r0, r5
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d9ee      	bls.n	8003f22 <HAL_ADCEx_RegularMultiModeStop_DMA+0x6a>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f44:	9b01      	ldr	r3, [sp, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f013 0304 	ands.w	r3, r3, #4
 8003f4c:	d000      	beq.n	8003f50 <HAL_ADCEx_RegularMultiModeStop_DMA+0x98>
 8003f4e:	2301      	movs	r3, #1
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8003f50:	6822      	ldr	r2, [r4, #0]
 8003f52:	6892      	ldr	r2, [r2, #8]
 8003f54:	f012 0f04 	tst.w	r2, #4
 8003f58:	d101      	bne.n	8003f5e <HAL_ADCEx_RegularMultiModeStop_DMA+0xa6>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d1e1      	bne.n	8003f22 <HAL_ADCEx_RegularMultiModeStop_DMA+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f60:	f043 0310 	orr.w	r3, r3, #16
 8003f64:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8003f66:	2300      	movs	r3, #0
 8003f68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_ERROR;
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	e02a      	b.n	8003fc6 <HAL_ADCEx_RegularMultiModeStop_DMA+0x10e>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e7db      	b.n	8003f2c <HAL_ADCEx_RegularMultiModeStop_DMA+0x74>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /* with HAL_ADCEx_RegularStop_DMA() API.                                  */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003f76:	f002 f8f1 	bl	800615c <HAL_DMA_Abort>

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8003f7a:	b118      	cbz	r0, 8003f84 <HAL_ADCEx_RegularMultiModeStop_DMA+0xcc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f82:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6853      	ldr	r3, [r2, #4]
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	6053      	str	r3, [r2, #4]

    /* 2. Disable the ADC peripherals: master and slave if no injected        */
    /*   conversion is on-going.                                              */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8003f8e:	b9b8      	cbnz	r0, 8003fc0 <HAL_ADCEx_RegularMultiModeStop_DMA+0x108>
    {
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f90:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f013 0f08 	tst.w	r3, #8
 8003f98:	d10b      	bne.n	8003fb2 <HAL_ADCEx_RegularMultiModeStop_DMA+0xfa>
      {
        tmp_hal_status =  ADC_Disable(hadc);
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7fe fe0a 	bl	8002bb4 <ADC_Disable>
        if (tmp_hal_status == HAL_OK)
 8003fa0:	b938      	cbnz	r0, 8003fb2 <HAL_ADCEx_RegularMultiModeStop_DMA+0xfa>
        {
          if (LL_ADC_INJ_IsConversionOngoing((&tmphadcSlave)->Instance) == 0UL)
 8003fa2:	9b01      	ldr	r3, [sp, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f013 0f08 	tst.w	r3, #8
 8003faa:	d102      	bne.n	8003fb2 <HAL_ADCEx_RegularMultiModeStop_DMA+0xfa>
          {
            tmp_hal_status =  ADC_Disable(&tmphadcSlave);
 8003fac:	a801      	add	r0, sp, #4
 8003fae:	f7fe fe01 	bl	8002bb4 <ADC_Disable>
          }
        }
      }

      if (tmp_hal_status == HAL_OK)
 8003fb2:	b928      	cbnz	r0, 8003fc0 <HAL_ADCEx_RegularMultiModeStop_DMA+0x108>
      {
        /* Both Master and Slave ADC's could be disabled. Update Master State */
        /* Clear HAL_ADC_STATE_INJ_BUSY bit, set HAL_ADC_STATE_READY bit */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_READY);
 8003fb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_ADCEx_RegularMultiModeStop_DMA+0x11c>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6563      	str	r3, [r4, #84]	; 0x54
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003fc6:	b01b      	add	sp, #108	; 0x6c
 8003fc8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8003fca:	2002      	movs	r0, #2
}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	ffffeffe 	.word	0xffffeffe

08003fd8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9201      	str	r2, [sp, #4]
#endif /* ADC_VER_V5_V90 */
  {
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
  }

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fe2:	68c0      	ldr	r0, [r0, #12]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8003fe8:	2a01      	cmp	r2, #1
 8003fea:	f000 8321 	beq.w	8004630 <HAL_ADCEx_InjectedConfigChannel+0x658>
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003ff4:	b1a8      	cbz	r0, 8004022 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003ff6:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003ff8:	2a01      	cmp	r2, #1
 8003ffa:	d012      	beq.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003ffc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f040 80ae 	bne.w	8004160 <HAL_ADCEx_InjectedConfigChannel+0x188>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004004:	661a      	str	r2, [r3, #96]	; 0x60
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004006:	2200      	movs	r2, #0
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800400a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800400c:	2c00      	cmp	r4, #0
 800400e:	f000 80a4 	beq.w	800415a <HAL_ADCEx_InjectedConfigChannel+0x182>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004012:	6a0a      	ldr	r2, [r1, #32]
 8004014:	3a01      	subs	r2, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004016:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 800401a:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800401c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800401e:	4314      	orrs	r4, r2
 8004020:	e09f      	b.n	8004162 <HAL_ADCEx_InjectedConfigChannel+0x18a>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004022:	684a      	ldr	r2, [r1, #4]
 8004024:	2a09      	cmp	r2, #9
 8004026:	d078      	beq.n	800411a <HAL_ADCEx_InjectedConfigChannel+0x142>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	6882      	ldr	r2, [r0, #8]
 800402c:	f012 0f08 	tst.w	r2, #8
 8004030:	d11e      	bne.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x98>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 8004032:	680a      	ldr	r2, [r1, #0]
 8004034:	f3c2 0413 	ubfx	r4, r2, #0, #20
 8004038:	2c00      	cmp	r4, #0
 800403a:	f040 80b1 	bne.w	80041a0 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
 800403e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004042:	2401      	movs	r4, #1
 8004044:	4094      	lsls	r4, r2
 8004046:	69c2      	ldr	r2, [r0, #28]
 8004048:	4322      	orrs	r2, r4
 800404a:	61c2      	str	r2, [r0, #28]
#endif /* ADC_VER_V5_V90 */

    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800404c:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8004050:	2a00      	cmp	r2, #0
 8004052:	f040 80b1 	bne.w	80041b8 <HAL_ADCEx_InjectedConfigChannel+0x1e0>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004056:	681c      	ldr	r4, [r3, #0]
 8004058:	68e2      	ldr	r2, [r4, #12]
 800405a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800405e:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004062:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8004066:	0500      	lsls	r0, r0, #20
 8004068:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 800406c:	4302      	orrs	r2, r0
 800406e:	60e2      	str	r2, [r4, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004070:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004072:	68a2      	ldr	r2, [r4, #8]
 8004074:	f012 0204 	ands.w	r2, r2, #4
 8004078:	d000      	beq.n	800407c <HAL_ADCEx_InjectedConfigChannel+0xa4>
 800407a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800407c:	68a0      	ldr	r0, [r4, #8]
 800407e:	f010 0008 	ands.w	r0, r0, #8
 8004082:	d000      	beq.n	8004086 <HAL_ADCEx_InjectedConfigChannel+0xae>
 8004084:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004086:	4302      	orrs	r2, r0
 8004088:	f040 8172 	bne.w	8004370 <HAL_ADCEx_InjectedConfigChannel+0x398>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800408c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800408e:	b118      	cbz	r0, 8004098 <HAL_ADCEx_InjectedConfigChannel+0xc0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004090:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8004092:	2800      	cmp	r0, #0
 8004094:	f040 80a0 	bne.w	80041d8 <HAL_ADCEx_InjectedConfigChannel+0x200>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004098:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800409c:	2801      	cmp	r0, #1
 800409e:	f000 8095 	beq.w	80041cc <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80040a8:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040aa:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80040ac:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
 80040b0:	2c01      	cmp	r4, #1
 80040b2:	f000 80a0 	beq.w	80041f6 <HAL_ADCEx_InjectedConfigChannel+0x21e>
#endif
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80040b6:	681d      	ldr	r5, [r3, #0]
 80040b8:	692c      	ldr	r4, [r5, #16]
 80040ba:	f024 0402 	bic.w	r4, r4, #2
 80040be:	612c      	str	r4, [r5, #16]
    }

    /* Set sampling time of the selected ADC channel */
    LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80040c0:	681c      	ldr	r4, [r3, #0]
 80040c2:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040c4:	f104 0e14 	add.w	lr, r4, #20
 80040c8:	0e74      	lsrs	r4, r6, #25
 80040ca:	00a4      	lsls	r4, r4, #2
 80040cc:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80040d0:	f85e 5004 	ldr.w	r5, [lr, r4]
 80040d4:	f3c6 5c04 	ubfx	ip, r6, #20, #5
 80040d8:	2607      	movs	r6, #7
 80040da:	fa06 f60c 	lsl.w	r6, r6, ip
 80040de:	ea25 0506 	bic.w	r5, r5, r6
 80040e2:	688e      	ldr	r6, [r1, #8]
 80040e4:	fa06 fc0c 	lsl.w	ip, r6, ip
 80040e8:	ea45 050c 	orr.w	r5, r5, ip
 80040ec:	f84e 5004 	str.w	r5, [lr, r4]
      tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
    }
    else
#endif /* ADC_VER_V5_V90 */
    {
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80040f0:	4c9d      	ldr	r4, [pc, #628]	; (8004368 <HAL_ADCEx_InjectedConfigChannel+0x390>)
 80040f2:	6824      	ldr	r4, [r4, #0]
 80040f4:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
 80040f8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 80040fc:	f000 8089 	beq.w	8004212 <HAL_ADCEx_InjectedConfigChannel+0x23a>
 8004100:	681d      	ldr	r5, [r3, #0]
 8004102:	68ec      	ldr	r4, [r5, #12]
 8004104:	f014 0f10 	tst.w	r4, #16
 8004108:	f040 80a9 	bne.w	800425e <HAL_ADCEx_InjectedConfigChannel+0x286>
 800410c:	694c      	ldr	r4, [r1, #20]
 800410e:	68ed      	ldr	r5, [r5, #12]
 8004110:	f3c5 0582 	ubfx	r5, r5, #2, #3
 8004114:	006d      	lsls	r5, r5, #1
 8004116:	40ac      	lsls	r4, r5
 8004118:	e082      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x248>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800411a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800411c:	b1bc      	cbz	r4, 800414e <HAL_ADCEx_InjectedConfigChannel+0x176>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800411e:	6808      	ldr	r0, [r1, #0]
 8004120:	0e82      	lsrs	r2, r0, #26
 8004122:	0252      	lsls	r2, r2, #9
 8004124:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004128:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 800412c:	4322      	orrs	r2, r4
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800412e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004130:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004132:	681c      	ldr	r4, [r3, #0]
 8004134:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004136:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 800413a:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 800413e:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8004142:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004146:	4310      	orrs	r0, r2
 8004148:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800414a:	65da      	str	r2, [r3, #92]	; 0x5c
 800414c:	e76c      	b.n	8004028 <HAL_ADCEx_InjectedConfigChannel+0x50>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800414e:	680a      	ldr	r2, [r1, #0]
 8004150:	0e92      	lsrs	r2, r2, #26
 8004152:	0252      	lsls	r2, r2, #9
 8004154:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 8004158:	e7eb      	b.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x15a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800415a:	6a0a      	ldr	r2, [r1, #32]
 800415c:	1e54      	subs	r4, r2, #1
 800415e:	e000      	b.n	8004162 <HAL_ADCEx_InjectedConfigChannel+0x18a>
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004160:	2400      	movs	r4, #0
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004162:	6808      	ldr	r0, [r1, #0]
 8004164:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004168:	684a      	ldr	r2, [r1, #4]
 800416a:	f002 021f 	and.w	r2, r2, #31
 800416e:	fa00 f202 	lsl.w	r2, r0, r2
 8004172:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8004174:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004176:	3801      	subs	r0, #1
 8004178:	6618      	str	r0, [r3, #96]	; 0x60
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800417a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800417c:	4322      	orrs	r2, r4
 800417e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004180:	2800      	cmp	r0, #0
 8004182:	f47f af51 	bne.w	8004028 <HAL_ADCEx_InjectedConfigChannel+0x50>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004186:	681c      	ldr	r4, [r3, #0]
 8004188:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800418a:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 800418e:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8004192:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8004196:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800419a:	4302      	orrs	r2, r0
 800419c:	64e2      	str	r2, [r4, #76]	; 0x4c
 800419e:	e743      	b.n	8004028 <HAL_ADCEx_InjectedConfigChannel+0x50>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80041a4:	b132      	cbz	r2, 80041b4 <HAL_ADCEx_InjectedConfigChannel+0x1dc>
  return __builtin_clz(value);
 80041a6:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel) & 0x1FUL));
 80041aa:	f002 021f 	and.w	r2, r2, #31
 80041ae:	2401      	movs	r4, #1
 80041b0:	4094      	lsls	r4, r2
 80041b2:	e748      	b.n	8004046 <HAL_ADCEx_InjectedConfigChannel+0x6e>
    return 32U;
 80041b4:	2220      	movs	r2, #32
 80041b6:	e7f8      	b.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->CFGR,
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	68c2      	ldr	r2, [r0, #12]
 80041bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80041c0:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 80041c4:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
 80041c8:	60c2      	str	r2, [r0, #12]
 80041ca:	e751      	b.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x98>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80041cc:	68e0      	ldr	r0, [r4, #12]
 80041ce:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80041d2:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d4:	2000      	movs	r0, #0
 80041d6:	e769      	b.n	80040ac <HAL_ADCEx_InjectedConfigChannel+0xd4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80041d8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80041dc:	2801      	cmp	r0, #1
 80041de:	d005      	beq.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x214>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80041e6:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e8:	2000      	movs	r0, #0
 80041ea:	e75f      	b.n	80040ac <HAL_ADCEx_InjectedConfigChannel+0xd4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ec:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80041ee:	f044 0420 	orr.w	r4, r4, #32
 80041f2:	655c      	str	r4, [r3, #84]	; 0x54
        tmp_hal_status = HAL_ERROR;
 80041f4:	e75a      	b.n	80040ac <HAL_ADCEx_InjectedConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->CFGR2,
 80041f6:	681f      	ldr	r7, [r3, #0]
 80041f8:	693d      	ldr	r5, [r7, #16]
 80041fa:	4c5c      	ldr	r4, [pc, #368]	; (800436c <HAL_ADCEx_InjectedConfigChannel+0x394>)
 80041fc:	402c      	ands	r4, r5
 80041fe:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004200:	1e6e      	subs	r6, r5, #1
 8004202:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8004204:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004208:	432c      	orrs	r4, r5
 800420a:	f044 0402 	orr.w	r4, r4, #2
 800420e:	613c      	str	r4, [r7, #16]
 8004210:	e756      	b.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004212:	694c      	ldr	r4, [r1, #20]
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	68ed      	ldr	r5, [r5, #12]
 8004218:	f3c5 0582 	ubfx	r5, r5, #2, #3
 800421c:	006d      	lsls	r5, r5, #1
 800421e:	40ac      	lsls	r4, r5
    }

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004220:	690f      	ldr	r7, [r1, #16]
 8004222:	2f04      	cmp	r7, #4
 8004224:	d026      	beq.n	8004274 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel, tmpOffsetShifted);
 8004226:	681d      	ldr	r5, [r3, #0]
 8004228:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800422a:	f105 0c60 	add.w	ip, r5, #96	; 0x60
    MODIFY_REG(*preg,
 800422e:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
 8004232:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8004236:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800423a:	4334      	orrs	r4, r6
 800423c:	432c      	orrs	r4, r5
 800423e:	f84c 4027 	str.w	r4, [ip, r7, lsl #2]
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004242:	681c      	ldr	r4, [r3, #0]
 8004244:	690e      	ldr	r6, [r1, #16]
 8004246:	7f0d      	ldrb	r5, [r1, #28]
 8004248:	2d01      	cmp	r5, #1
 800424a:	d010      	beq.n	800426e <HAL_ADCEx_InjectedConfigChannel+0x296>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	3460      	adds	r4, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800424e:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8004252:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004256:	432a      	orrs	r2, r5
 8004258:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
}
 800425c:	e089      	b.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x39a>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800425e:	694c      	ldr	r4, [r1, #20]
 8004260:	68ed      	ldr	r5, [r5, #12]
 8004262:	08ad      	lsrs	r5, r5, #2
 8004264:	f005 0504 	and.w	r5, r5, #4
 8004268:	006d      	lsls	r5, r5, #1
 800426a:	40ac      	lsls	r4, r5
 800426c:	e7d8      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x248>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigInjected->InjectedOffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800426e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004272:	e7eb      	b.n	800424c <HAL_ADCEx_InjectedConfigChannel+0x274>
      else
#endif /* ADC_VER_V5_V90 */
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004274:	681e      	ldr	r6, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004276:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8004278:	6e35      	ldr	r5, [r6, #96]	; 0x60
 800427a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800427e:	680c      	ldr	r4, [r1, #0]
 8004280:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004284:	2a00      	cmp	r2, #0
 8004286:	d137      	bne.n	80042f8 <HAL_ADCEx_InjectedConfigChannel+0x320>
 8004288:	f3c4 6284 	ubfx	r2, r4, #26, #5
 800428c:	4295      	cmp	r5, r2
 800428e:	d03b      	beq.n	8004308 <HAL_ADCEx_InjectedConfigChannel+0x330>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004290:	681e      	ldr	r6, [r3, #0]
 8004292:	6e72      	ldr	r2, [r6, #100]	; 0x64
 8004294:	6e75      	ldr	r5, [r6, #100]	; 0x64
 8004296:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800429a:	680c      	ldr	r4, [r1, #0]
 800429c:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d139      	bne.n	8004318 <HAL_ADCEx_InjectedConfigChannel+0x340>
 80042a4:	f3c4 6284 	ubfx	r2, r4, #26, #5
 80042a8:	4295      	cmp	r5, r2
 80042aa:	d03d      	beq.n	8004328 <HAL_ADCEx_InjectedConfigChannel+0x350>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042ac:	681a      	ldr	r2, [r3, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ae:	f102 0660 	add.w	r6, r2, #96	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80042b4:	6e95      	ldr	r5, [r2, #104]	; 0x68
 80042b6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80042ba:	680c      	ldr	r4, [r1, #0]
 80042bc:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d139      	bne.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x360>
 80042c4:	f3c4 6284 	ubfx	r2, r4, #26, #5
 80042c8:	4295      	cmp	r5, r2
 80042ca:	d03d      	beq.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x370>
        {
          LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042cc:	681e      	ldr	r6, [r3, #0]
 80042ce:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80042d0:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
 80042d2:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80042d6:	680c      	ldr	r4, [r1, #0]
 80042d8:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80042dc:	2a00      	cmp	r2, #0
 80042de:	d13b      	bne.n	8004358 <HAL_ADCEx_InjectedConfigChannel+0x380>
 80042e0:	f3c4 6284 	ubfx	r2, r4, #26, #5
 80042e4:	4295      	cmp	r5, r2
 80042e6:	d144      	bne.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x39a>
    MODIFY_REG(*preg,
 80042e8:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80042ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80042f2:	4314      	orrs	r4, r2
 80042f4:	66f4      	str	r4, [r6, #108]	; 0x6c
}
 80042f6:	e03c      	b.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0x39a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 80042fc:	b112      	cbz	r2, 8004304 <HAL_ADCEx_InjectedConfigChannel+0x32c>
  return __builtin_clz(value);
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	e7c3      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x2b4>
    return 32U;
 8004304:	2220      	movs	r2, #32
 8004306:	e7c1      	b.n	800428c <HAL_ADCEx_InjectedConfigChannel+0x2b4>
    MODIFY_REG(*preg,
 8004308:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800430a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800430e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004312:	4314      	orrs	r4, r2
 8004314:	6634      	str	r4, [r6, #96]	; 0x60
}
 8004316:	e7bb      	b.n	8004290 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 800431c:	b112      	cbz	r2, 8004324 <HAL_ADCEx_InjectedConfigChannel+0x34c>
  return __builtin_clz(value);
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	e7c1      	b.n	80042a8 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
    return 32U;
 8004324:	2220      	movs	r2, #32
 8004326:	e7bf      	b.n	80042a8 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
    MODIFY_REG(*preg,
 8004328:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800432a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800432e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004332:	4314      	orrs	r4, r2
 8004334:	6674      	str	r4, [r6, #100]	; 0x64
}
 8004336:	e7b9      	b.n	80042ac <HAL_ADCEx_InjectedConfigChannel+0x2d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 800433c:	b112      	cbz	r2, 8004344 <HAL_ADCEx_InjectedConfigChannel+0x36c>
  return __builtin_clz(value);
 800433e:	fab2 f282 	clz	r2, r2
 8004342:	e7c1      	b.n	80042c8 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 8004344:	2220      	movs	r2, #32
 8004346:	e7bf      	b.n	80042c8 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    MODIFY_REG(*preg,
 8004348:	68f2      	ldr	r2, [r6, #12]
 800434a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800434e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004352:	4314      	orrs	r4, r2
 8004354:	60f4      	str	r4, [r6, #12]
}
 8004356:	e7b9      	b.n	80042cc <HAL_ADCEx_InjectedConfigChannel+0x2f4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 800435c:	b112      	cbz	r2, 8004364 <HAL_ADCEx_InjectedConfigChannel+0x38c>
  return __builtin_clz(value);
 800435e:	fab2 f282 	clz	r2, r2
 8004362:	e7bf      	b.n	80042e4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
    return 32U;
 8004364:	2220      	movs	r2, #32
 8004366:	e7bd      	b.n	80042e4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004368:	5c001000 	.word	0x5c001000
 800436c:	fc00fe1d 	.word	0xfc00fe1d
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004370:	2000      	movs	r0, #0

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004372:	681d      	ldr	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004374:	68aa      	ldr	r2, [r5, #8]
 8004376:	f012 0f01 	tst.w	r2, #1
 800437a:	d11a      	bne.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800437c:	680a      	ldr	r2, [r1, #0]
 800437e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004380:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8004384:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8004388:	ea24 0407 	bic.w	r4, r4, r7
 800438c:	f006 0c18 	and.w	ip, r6, #24
 8004390:	4ea8      	ldr	r6, [pc, #672]	; (8004634 <HAL_ADCEx_InjectedConfigChannel+0x65c>)
 8004392:	fa26 f60c 	lsr.w	r6, r6, ip
 8004396:	4032      	ands	r2, r6
 8004398:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800439c:	4322      	orrs	r2, r4
 800439e:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043a2:	68cc      	ldr	r4, [r1, #12]
 80043a4:	4aa4      	ldr	r2, [pc, #656]	; (8004638 <HAL_ADCEx_InjectedConfigChannel+0x660>)
 80043a6:	4294      	cmp	r4, r2
 80043a8:	d008      	beq.n	80043bc <HAL_ADCEx_InjectedConfigChannel+0x3e4>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80043aa:	680a      	ldr	r2, [r1, #0]
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	f2c0 80c3 	blt.w	8004538 <HAL_ADCEx_InjectedConfigChannel+0x560>
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80043b8:	b003      	add	sp, #12
 80043ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	680a      	ldr	r2, [r1, #0]
 80043c0:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80043c4:	2e00      	cmp	r6, #0
 80043c6:	d137      	bne.n	8004438 <HAL_ADCEx_InjectedConfigChannel+0x460>
 80043c8:	0e94      	lsrs	r4, r2, #26
 80043ca:	3401      	adds	r4, #1
 80043cc:	f004 041f 	and.w	r4, r4, #31
 80043d0:	2c09      	cmp	r4, #9
 80043d2:	bf8c      	ite	hi
 80043d4:	2400      	movhi	r4, #0
 80043d6:	2401      	movls	r4, #1
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d065      	beq.n	80044a8 <HAL_ADCEx_InjectedConfigChannel+0x4d0>
 80043dc:	2e00      	cmp	r6, #0
 80043de:	d13a      	bne.n	8004456 <HAL_ADCEx_InjectedConfigChannel+0x47e>
 80043e0:	0e94      	lsrs	r4, r2, #26
 80043e2:	3401      	adds	r4, #1
 80043e4:	06a4      	lsls	r4, r4, #26
 80043e6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d13f      	bne.n	800446e <HAL_ADCEx_InjectedConfigChannel+0x496>
 80043ee:	0e97      	lsrs	r7, r2, #26
 80043f0:	3701      	adds	r7, #1
 80043f2:	f007 0c1f 	and.w	ip, r7, #31
 80043f6:	2701      	movs	r7, #1
 80043f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80043fc:	433c      	orrs	r4, r7
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d144      	bne.n	800448c <HAL_ADCEx_InjectedConfigChannel+0x4b4>
 8004402:	0e92      	lsrs	r2, r2, #26
 8004404:	3201      	adds	r2, #1
 8004406:	f002 021f 	and.w	r2, r2, #31
 800440a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800440e:	0512      	lsls	r2, r2, #20
 8004410:	4322      	orrs	r2, r4
 8004412:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004414:	3514      	adds	r5, #20
 8004416:	0e56      	lsrs	r6, r2, #25
 8004418:	00b6      	lsls	r6, r6, #2
 800441a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 800441e:	59af      	ldr	r7, [r5, r6]
 8004420:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004424:	f04f 0c07 	mov.w	ip, #7
 8004428:	fa0c fc02 	lsl.w	ip, ip, r2
 800442c:	ea27 070c 	bic.w	r7, r7, ip
 8004430:	4094      	lsls	r4, r2
 8004432:	433c      	orrs	r4, r7
 8004434:	51ac      	str	r4, [r5, r6]
}
 8004436:	e7b8      	b.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0x3d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800443c:	b14c      	cbz	r4, 8004452 <HAL_ADCEx_InjectedConfigChannel+0x47a>
  return __builtin_clz(value);
 800443e:	fab4 f484 	clz	r4, r4
 8004442:	3401      	adds	r4, #1
 8004444:	f004 041f 	and.w	r4, r4, #31
 8004448:	2c09      	cmp	r4, #9
 800444a:	bf8c      	ite	hi
 800444c:	2400      	movhi	r4, #0
 800444e:	2401      	movls	r4, #1
 8004450:	e7c2      	b.n	80043d8 <HAL_ADCEx_InjectedConfigChannel+0x400>
    return 32U;
 8004452:	2420      	movs	r4, #32
 8004454:	e7f5      	b.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x46a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800445a:	b134      	cbz	r4, 800446a <HAL_ADCEx_InjectedConfigChannel+0x492>
  return __builtin_clz(value);
 800445c:	fab4 f484 	clz	r4, r4
 8004460:	3401      	adds	r4, #1
 8004462:	06a4      	lsls	r4, r4, #26
 8004464:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004468:	e7bf      	b.n	80043ea <HAL_ADCEx_InjectedConfigChannel+0x412>
    return 32U;
 800446a:	2420      	movs	r4, #32
 800446c:	e7f8      	b.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x488>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004472:	b14f      	cbz	r7, 8004488 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
  return __builtin_clz(value);
 8004474:	fab7 f787 	clz	r7, r7
 8004478:	3701      	adds	r7, #1
 800447a:	f007 071f 	and.w	r7, r7, #31
 800447e:	f04f 0c01 	mov.w	ip, #1
 8004482:	fa0c f707 	lsl.w	r7, ip, r7
 8004486:	e7b9      	b.n	80043fc <HAL_ADCEx_InjectedConfigChannel+0x424>
    return 32U;
 8004488:	2720      	movs	r7, #32
 800448a:	e7f5      	b.n	8004478 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004490:	b142      	cbz	r2, 80044a4 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
  return __builtin_clz(value);
 8004492:	fab2 f282 	clz	r2, r2
 8004496:	3201      	adds	r2, #1
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80044a0:	0512      	lsls	r2, r2, #20
 80044a2:	e7b5      	b.n	8004410 <HAL_ADCEx_InjectedConfigChannel+0x438>
    return 32U;
 80044a4:	2220      	movs	r2, #32
 80044a6:	e7f6      	b.n	8004496 <HAL_ADCEx_InjectedConfigChannel+0x4be>
 80044a8:	b9d6      	cbnz	r6, 80044e0 <HAL_ADCEx_InjectedConfigChannel+0x508>
 80044aa:	0e94      	lsrs	r4, r2, #26
 80044ac:	3401      	adds	r4, #1
 80044ae:	06a4      	lsls	r4, r4, #26
 80044b0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80044b4:	bb06      	cbnz	r6, 80044f8 <HAL_ADCEx_InjectedConfigChannel+0x520>
 80044b6:	0e97      	lsrs	r7, r2, #26
 80044b8:	3701      	adds	r7, #1
 80044ba:	f007 0c1f 	and.w	ip, r7, #31
 80044be:	2701      	movs	r7, #1
 80044c0:	fa07 f70c 	lsl.w	r7, r7, ip
 80044c4:	433c      	orrs	r4, r7
 80044c6:	bb36      	cbnz	r6, 8004516 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80044c8:	0e92      	lsrs	r2, r2, #26
 80044ca:	3201      	adds	r2, #1
 80044cc:	f002 021f 	and.w	r2, r2, #31
 80044d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80044d4:	3a1e      	subs	r2, #30
 80044d6:	0512      	lsls	r2, r2, #20
 80044d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80044dc:	4322      	orrs	r2, r4
 80044de:	e798      	b.n	8004412 <HAL_ADCEx_InjectedConfigChannel+0x43a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80044e4:	b134      	cbz	r4, 80044f4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
  return __builtin_clz(value);
 80044e6:	fab4 f484 	clz	r4, r4
 80044ea:	3401      	adds	r4, #1
 80044ec:	06a4      	lsls	r4, r4, #26
 80044ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80044f2:	e7df      	b.n	80044b4 <HAL_ADCEx_InjectedConfigChannel+0x4dc>
    return 32U;
 80044f4:	2420      	movs	r4, #32
 80044f6:	e7f8      	b.n	80044ea <HAL_ADCEx_InjectedConfigChannel+0x512>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 80044fc:	b14f      	cbz	r7, 8004512 <HAL_ADCEx_InjectedConfigChannel+0x53a>
  return __builtin_clz(value);
 80044fe:	fab7 f787 	clz	r7, r7
 8004502:	3701      	adds	r7, #1
 8004504:	f007 071f 	and.w	r7, r7, #31
 8004508:	f04f 0c01 	mov.w	ip, #1
 800450c:	fa0c f707 	lsl.w	r7, ip, r7
 8004510:	e7d8      	b.n	80044c4 <HAL_ADCEx_InjectedConfigChannel+0x4ec>
    return 32U;
 8004512:	2720      	movs	r7, #32
 8004514:	e7f5      	b.n	8004502 <HAL_ADCEx_InjectedConfigChannel+0x52a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800451a:	b15a      	cbz	r2, 8004534 <HAL_ADCEx_InjectedConfigChannel+0x55c>
  return __builtin_clz(value);
 800451c:	fab2 f282 	clz	r2, r2
 8004520:	3201      	adds	r2, #1
 8004522:	f002 021f 	and.w	r2, r2, #31
 8004526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800452a:	3a1e      	subs	r2, #30
 800452c:	0512      	lsls	r2, r2, #20
 800452e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004532:	e7d3      	b.n	80044dc <HAL_ADCEx_InjectedConfigChannel+0x504>
    return 32U;
 8004534:	2220      	movs	r2, #32
 8004536:	e7f3      	b.n	8004520 <HAL_ADCEx_InjectedConfigChannel+0x548>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	4d40      	ldr	r5, [pc, #256]	; (800463c <HAL_ADCEx_InjectedConfigChannel+0x664>)
 800453c:	4c40      	ldr	r4, [pc, #256]	; (8004640 <HAL_ADCEx_InjectedConfigChannel+0x668>)
 800453e:	42a1      	cmp	r1, r4
 8004540:	bf18      	it	ne
 8004542:	42a9      	cmpne	r1, r5
 8004544:	bf0c      	ite	eq
 8004546:	2501      	moveq	r5, #1
 8004548:	2500      	movne	r5, #0
 800454a:	d131      	bne.n	80045b0 <HAL_ADCEx_InjectedConfigChannel+0x5d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454c:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
 8004550:	68a4      	ldr	r4, [r4, #8]
 8004552:	f014 0401 	ands.w	r4, r4, #1
 8004556:	d000      	beq.n	800455a <HAL_ADCEx_InjectedConfigChannel+0x582>
 8004558:	2401      	movs	r4, #1
 800455a:	4e39      	ldr	r6, [pc, #228]	; (8004640 <HAL_ADCEx_InjectedConfigChannel+0x668>)
 800455c:	68b6      	ldr	r6, [r6, #8]
 800455e:	f016 0601 	ands.w	r6, r6, #1
 8004562:	d000      	beq.n	8004566 <HAL_ADCEx_InjectedConfigChannel+0x58e>
 8004564:	2601      	movs	r6, #1
 8004566:	4334      	orrs	r4, r6
 8004568:	bf0c      	ite	eq
 800456a:	2401      	moveq	r4, #1
 800456c:	2400      	movne	r4, #0
 800456e:	2c00      	cmp	r4, #0
 8004570:	d058      	beq.n	8004624 <HAL_ADCEx_InjectedConfigChannel+0x64c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004572:	b335      	cbz	r5, 80045c2 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
 8004574:	4d33      	ldr	r5, [pc, #204]	; (8004644 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004576:	68ac      	ldr	r4, [r5, #8]
 8004578:	f004 77e0 	and.w	r7, r4, #29360128	; 0x1c00000
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800457c:	4e32      	ldr	r6, [pc, #200]	; (8004648 <HAL_ADCEx_InjectedConfigChannel+0x670>)
 800457e:	42b2      	cmp	r2, r6
 8004580:	d021      	beq.n	80045c6 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004582:	4e32      	ldr	r6, [pc, #200]	; (800464c <HAL_ADCEx_InjectedConfigChannel+0x674>)
 8004584:	42b2      	cmp	r2, r6
 8004586:	d03e      	beq.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0x62e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004588:	4e31      	ldr	r6, [pc, #196]	; (8004650 <HAL_ADCEx_InjectedConfigChannel+0x678>)
 800458a:	42b2      	cmp	r2, r6
 800458c:	f47f af11 	bne.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004590:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8004594:	f47f af0d 	bne.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
          if (ADC_VREFINT_INSTANCE(hadc))
 8004598:	4a2e      	ldr	r2, [pc, #184]	; (8004654 <HAL_ADCEx_InjectedConfigChannel+0x67c>)
 800459a:	4291      	cmp	r1, r2
 800459c:	f47f af09 	bne.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045a0:	f447 0280 	orr.w	r2, r7, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045a4:	68a9      	ldr	r1, [r5, #8]
 80045a6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80045aa:	430a      	orrs	r2, r1
 80045ac:	60aa      	str	r2, [r5, #8]
}
 80045ae:	e700      	b.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b0:	4c28      	ldr	r4, [pc, #160]	; (8004654 <HAL_ADCEx_InjectedConfigChannel+0x67c>)
 80045b2:	68a4      	ldr	r4, [r4, #8]
 80045b4:	f014 0401 	ands.w	r4, r4, #1
 80045b8:	d000      	beq.n	80045bc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80045ba:	2401      	movs	r4, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045bc:	f084 0401 	eor.w	r4, r4, #1
 80045c0:	e7d5      	b.n	800456e <HAL_ADCEx_InjectedConfigChannel+0x596>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c2:	4d25      	ldr	r5, [pc, #148]	; (8004658 <HAL_ADCEx_InjectedConfigChannel+0x680>)
 80045c4:	e7d7      	b.n	8004576 <HAL_ADCEx_InjectedConfigChannel+0x59e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045c6:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 80045ca:	d1da      	bne.n	8004582 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_ADCEx_InjectedConfigChannel+0x67c>)
 80045ce:	4291      	cmp	r1, r2
 80045d0:	f47f aeef 	bne.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045d4:	f447 0200 	orr.w	r2, r7, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045d8:	68a9      	ldr	r1, [r5, #8]
 80045da:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80045de:	430a      	orrs	r2, r1
 80045e0:	60aa      	str	r2, [r5, #8]
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0x684>)
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	0992      	lsrs	r2, r2, #6
 80045e8:	491d      	ldr	r1, [pc, #116]	; (8004660 <HAL_ADCEx_InjectedConfigChannel+0x688>)
 80045ea:	fba1 1202 	umull	r1, r2, r1, r2
 80045ee:	0992      	lsrs	r2, r2, #6
 80045f0:	3201      	adds	r2, #1
 80045f2:	0052      	lsls	r2, r2, #1
 80045f4:	9201      	str	r2, [sp, #4]
            while (wait_loop_index != 0UL)
 80045f6:	e002      	b.n	80045fe <HAL_ADCEx_InjectedConfigChannel+0x626>
              wait_loop_index--;
 80045f8:	9a01      	ldr	r2, [sp, #4]
 80045fa:	3a01      	subs	r2, #1
 80045fc:	9201      	str	r2, [sp, #4]
            while (wait_loop_index != 0UL)
 80045fe:	9a01      	ldr	r2, [sp, #4]
 8004600:	2a00      	cmp	r2, #0
 8004602:	d1f9      	bne.n	80045f8 <HAL_ADCEx_InjectedConfigChannel+0x620>
 8004604:	e6d5      	b.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004606:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 800460a:	d1bd      	bne.n	8004588 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <HAL_ADCEx_InjectedConfigChannel+0x67c>)
 800460e:	4291      	cmp	r1, r2
 8004610:	f47f aecf 	bne.w	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004614:	f047 7280 	orr.w	r2, r7, #16777216	; 0x1000000
 8004618:	68a9      	ldr	r1, [r5, #8]
 800461a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800461e:	430a      	orrs	r2, r1
 8004620:	60aa      	str	r2, [r5, #8]
}
 8004622:	e6c6      	b.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004626:	f042 0220 	orr.w	r2, r2, #32
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
        tmp_hal_status = HAL_ERROR;
 800462c:	2001      	movs	r0, #1
 800462e:	e6c0      	b.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  __HAL_LOCK(hadc);
 8004630:	2002      	movs	r0, #2
 8004632:	e6c1      	b.n	80043b8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
 8004634:	000fffff 	.word	0x000fffff
 8004638:	47ff0000 	.word	0x47ff0000
 800463c:	40022000 	.word	0x40022000
 8004640:	40022100 	.word	0x40022100
 8004644:	40022300 	.word	0x40022300
 8004648:	cb840000 	.word	0xcb840000
 800464c:	c7520000 	.word	0xc7520000
 8004650:	cfb80000 	.word	0xcfb80000
 8004654:	58026000 	.word	0x58026000
 8004658:	58026300 	.word	0x58026300
 800465c:	24000000 	.word	0x24000000
 8004660:	053e2d63 	.word	0x053e2d63

08004664 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004664:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8004668:	2a01      	cmp	r2, #1
 800466a:	f000 80a1 	beq.w	80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
{
 800466e:	b430      	push	{r4, r5}
 8004670:	b09a      	sub	sp, #104	; 0x68
 8004672:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004674:	2201      	movs	r2, #1
 8004676:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800467a:	2200      	movs	r2, #0
 800467c:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800467e:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004680:	6800      	ldr	r0, [r0, #0]
 8004682:	4a4c      	ldr	r2, [pc, #304]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004684:	4290      	cmp	r0, r2
 8004686:	d042      	beq.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8004688:	2200      	movs	r2, #0
 800468a:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800468c:	9a01      	ldr	r2, [sp, #4]
 800468e:	2a00      	cmp	r2, #0
 8004690:	d041      	beq.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004692:	6892      	ldr	r2, [r2, #8]
 8004694:	f012 0204 	ands.w	r2, r2, #4
 8004698:	d000      	beq.n	800469c <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800469a:	2201      	movs	r2, #1
 800469c:	6884      	ldr	r4, [r0, #8]
 800469e:	f014 0f04 	tst.w	r4, #4
 80046a2:	d176      	bne.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	d174      	bne.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046a8:	4c42      	ldr	r4, [pc, #264]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046aa:	4a43      	ldr	r2, [pc, #268]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046ac:	4290      	cmp	r0, r2
 80046ae:	bf18      	it	ne
 80046b0:	42a0      	cmpne	r0, r4
 80046b2:	d139      	bne.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80046b4:	f502 7200 	add.w	r2, r2, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b8:	6808      	ldr	r0, [r1, #0]
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d03f      	beq.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0xda>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046be:	6890      	ldr	r0, [r2, #8]
 80046c0:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 80046c4:	684c      	ldr	r4, [r1, #4]
 80046c6:	4320      	orrs	r0, r4
 80046c8:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4d39      	ldr	r5, [pc, #228]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046ce:	4c3a      	ldr	r4, [pc, #232]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	bf18      	it	ne
 80046d4:	42a8      	cmpne	r0, r5
 80046d6:	d129      	bne.n	800472c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046d8:	68a8      	ldr	r0, [r5, #8]
 80046da:	f010 0001 	ands.w	r0, r0, #1
 80046de:	d000      	beq.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80046e0:	2001      	movs	r0, #1
 80046e2:	4c35      	ldr	r4, [pc, #212]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046e4:	68a4      	ldr	r4, [r4, #8]
 80046e6:	f014 0401 	ands.w	r4, r4, #1
 80046ea:	d000      	beq.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80046ec:	2401      	movs	r4, #1
 80046ee:	4320      	orrs	r0, r4
 80046f0:	bf0c      	ite	eq
 80046f2:	2001      	moveq	r0, #1
 80046f4:	2000      	movne	r0, #0
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d056      	beq.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x144>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046fa:	6894      	ldr	r4, [r2, #8]
 80046fc:	482f      	ldr	r0, [pc, #188]	; (80047bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80046fe:	4020      	ands	r0, r4
 8004700:	680c      	ldr	r4, [r1, #0]
 8004702:	6889      	ldr	r1, [r1, #8]
 8004704:	4321      	orrs	r1, r4
 8004706:	4308      	orrs	r0, r1
 8004708:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470a:	2000      	movs	r0, #0
 800470c:	e046      	b.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800470e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004712:	9201      	str	r2, [sp, #4]
 8004714:	e7ba      	b.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004718:	f042 0220 	orr.w	r2, r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004724:	2001      	movs	r0, #1
 8004726:	e03c      	b.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800472a:	e7c5      	b.n	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 800472c:	4825      	ldr	r0, [pc, #148]	; (80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800472e:	6880      	ldr	r0, [r0, #8]
 8004730:	f010 0001 	ands.w	r0, r0, #1
 8004734:	d000      	beq.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8004736:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004738:	f080 0001 	eor.w	r0, r0, #1
 800473c:	e7db      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800473e:	6891      	ldr	r1, [r2, #8]
 8004740:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8004744:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	4c1a      	ldr	r4, [pc, #104]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800474a:	481b      	ldr	r0, [pc, #108]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800474c:	4281      	cmp	r1, r0
 800474e:	bf18      	it	ne
 8004750:	42a1      	cmpne	r1, r4
 8004752:	d115      	bne.n	8004780 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8004754:	68a1      	ldr	r1, [r4, #8]
 8004756:	f011 0101 	ands.w	r1, r1, #1
 800475a:	d000      	beq.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800475c:	2101      	movs	r1, #1
 800475e:	4816      	ldr	r0, [pc, #88]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004760:	6880      	ldr	r0, [r0, #8]
 8004762:	f010 0001 	ands.w	r0, r0, #1
 8004766:	d000      	beq.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8004768:	2001      	movs	r0, #1
 800476a:	4301      	orrs	r1, r0
 800476c:	bf0c      	ite	eq
 800476e:	2101      	moveq	r1, #1
 8004770:	2100      	movne	r1, #0
 8004772:	b1d9      	cbz	r1, 80047ac <HAL_ADCEx_MultiModeConfigChannel+0x148>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004774:	6890      	ldr	r0, [r2, #8]
 8004776:	4911      	ldr	r1, [pc, #68]	; (80047bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004778:	4001      	ands	r1, r0
 800477a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477c:	2000      	movs	r0, #0
 800477e:	e00d      	b.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004780:	4910      	ldr	r1, [pc, #64]	; (80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8004782:	6889      	ldr	r1, [r1, #8]
 8004784:	f011 0101 	ands.w	r1, r1, #1
 8004788:	d000      	beq.n	800478c <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800478a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800478c:	f081 0101 	eor.w	r1, r1, #1
 8004790:	e7ef      	b.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004794:	f042 0220 	orr.w	r2, r2, #32
 8004798:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800479a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80047a2:	b01a      	add	sp, #104	; 0x68
 80047a4:	bc30      	pop	{r4, r5}
 80047a6:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a8:	2000      	movs	r0, #0
 80047aa:	e7f7      	b.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80047ac:	2000      	movs	r0, #0
 80047ae:	e7f5      	b.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  __HAL_LOCK(hadc);
 80047b0:	2002      	movs	r0, #2
}
 80047b2:	4770      	bx	lr
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40022100 	.word	0x40022100
 80047bc:	fffff0e0 	.word	0xfffff0e0
 80047c0:	58026300 	.word	0x58026300
 80047c4:	58026000 	.word	0x58026000

080047c8 <HAL_ADCEx_EnableInjectedQueue>:
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047c8:	6801      	ldr	r1, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ca:	688b      	ldr	r3, [r1, #8]
 80047cc:	f013 0304 	ands.w	r3, r3, #4
 80047d0:	d000      	beq.n	80047d4 <HAL_ADCEx_EnableInjectedQueue+0xc>
 80047d2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047d4:	688a      	ldr	r2, [r1, #8]
 80047d6:	f012 0208 	ands.w	r2, r2, #8
 80047da:	d000      	beq.n	80047de <HAL_ADCEx_EnableInjectedQueue+0x16>
 80047dc:	2201      	movs	r2, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047de:	4313      	orrs	r3, r2
 80047e0:	d109      	bne.n	80047f6 <HAL_ADCEx_EnableInjectedQueue+0x2e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
     )
  {
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80047e2:	68cb      	ldr	r3, [r1, #12]
 80047e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	60cb      	str	r3, [r1, #12]

    /* Update state, clear previous result related to injected queue overflow */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80047ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f0:	6543      	str	r3, [r0, #84]	; 0x54

    tmp_hal_status = HAL_OK;
 80047f2:	2000      	movs	r0, #0
 80047f4:	4770      	bx	lr
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047f6:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80047f8:	4770      	bx	lr

080047fa <HAL_ADCEx_DisableInjectedQueue>:
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047fa:	6801      	ldr	r1, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047fc:	688b      	ldr	r3, [r1, #8]
 80047fe:	f013 0304 	ands.w	r3, r3, #4
 8004802:	d000      	beq.n	8004806 <HAL_ADCEx_DisableInjectedQueue+0xc>
 8004804:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004806:	688a      	ldr	r2, [r1, #8]
 8004808:	f012 0208 	ands.w	r2, r2, #8
 800480c:	d000      	beq.n	8004810 <HAL_ADCEx_DisableInjectedQueue+0x16>
 800480e:	2201      	movs	r2, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004810:	4313      	orrs	r3, r2
 8004812:	d107      	bne.n	8004824 <HAL_ADCEx_DisableInjectedQueue+0x2a>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8004814:	68ca      	ldr	r2, [r1, #12]
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_ADCEx_DisableInjectedQueue+0x2e>)
 8004818:	4013      	ands	r3, r2
 800481a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800481e:	60cb      	str	r3, [r1, #12]
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
    tmp_hal_status = HAL_OK;
 8004820:	2000      	movs	r0, #0
 8004822:	4770      	bx	lr
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004824:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8004826:	4770      	bx	lr
 8004828:	7fdfffff 	.word	0x7fdfffff

0800482c <HAL_ADCEx_DisableVoltageRegulator>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800482c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	f012 0f01 	tst.w	r2, #1
 8004834:	d105      	bne.n	8004842 <HAL_ADCEx_DisableVoltageRegulator+0x16>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	4a03      	ldr	r2, [pc, #12]	; (8004848 <HAL_ADCEx_DisableVoltageRegulator+0x1c>)
 800483a:	400a      	ands	r2, r1
 800483c:	609a      	str	r2, [r3, #8]
  {
    LL_ADC_DisableInternalRegulator(hadc->Instance);
    tmp_hal_status = HAL_OK;
 800483e:	2000      	movs	r0, #0
 8004840:	4770      	bx	lr
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004842:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	6fffffc0 	.word	0x6fffffc0

0800484c <HAL_ADCEx_EnterADCDeepPowerDownMode>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	f012 0f01 	tst.w	r2, #1
 8004854:	d107      	bne.n	8004866 <HAL_ADCEx_EnterADCDeepPowerDownMode+0x1a>
  MODIFY_REG(ADCx->CR,
 8004856:	6899      	ldr	r1, [r3, #8]
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_ADCEx_EnterADCDeepPowerDownMode+0x20>)
 800485a:	400a      	ands	r2, r1
 800485c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004860:	609a      	str	r2, [r3, #8]
  {
    LL_ADC_EnableDeepPowerDown(hadc->Instance);
    tmp_hal_status = HAL_OK;
 8004862:	2000      	movs	r0, #0
 8004864:	4770      	bx	lr
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004866:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	5fffffc0 	.word	0x5fffffc0

08004870 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004872:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800487c:	0200      	lsls	r0, r0, #8
 800487e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004882:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004884:	4a02      	ldr	r2, [pc, #8]	; (8004890 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004886:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004888:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800488a:	4770      	bx	lr
 800488c:	e000ed00 	.word	0xe000ed00
 8004890:	05fa0000 	.word	0x05fa0000

08004894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004894:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_NVIC_SetPriority+0x60>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800489e:	f1c3 0c07 	rsb	ip, r3, #7
 80048a2:	f1bc 0f04 	cmp.w	ip, #4
 80048a6:	bf28      	it	cs
 80048a8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ac:	f103 0e04 	add.w	lr, r3, #4
 80048b0:	f1be 0f06 	cmp.w	lr, #6
 80048b4:	d914      	bls.n	80048e0 <HAL_NVIC_SetPriority+0x4c>
 80048b6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	f04f 3eff 	mov.w	lr, #4294967295
 80048bc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80048c0:	ea21 010c 	bic.w	r1, r1, ip
 80048c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c6:	fa0e f303 	lsl.w	r3, lr, r3
 80048ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80048d0:	2800      	cmp	r0, #0
 80048d2:	db07      	blt.n	80048e4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d4:	0109      	lsls	r1, r1, #4
 80048d6:	b2c9      	uxtb	r1, r1
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_NVIC_SetPriority+0x64>)
 80048da:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80048dc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048e0:	2300      	movs	r3, #0
 80048e2:	e7e9      	b.n	80048b8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	f000 000f 	and.w	r0, r0, #15
 80048e8:	0109      	lsls	r1, r1, #4
 80048ea:	b2c9      	uxtb	r1, r1
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_NVIC_SetPriority+0x68>)
 80048ee:	5419      	strb	r1, [r3, r0]
 80048f0:	e7f4      	b.n	80048dc <HAL_NVIC_SetPriority+0x48>
 80048f2:	bf00      	nop
 80048f4:	e000ed00 	.word	0xe000ed00
 80048f8:	e000e400 	.word	0xe000e400
 80048fc:	e000ed14 	.word	0xe000ed14

08004900 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004900:	2800      	cmp	r0, #0
 8004902:	db07      	blt.n	8004914 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004904:	f000 021f 	and.w	r2, r0, #31
 8004908:	0940      	lsrs	r0, r0, #5
 800490a:	2301      	movs	r3, #1
 800490c:	4093      	lsls	r3, r2
 800490e:	4a02      	ldr	r2, [pc, #8]	; (8004918 <HAL_NVIC_EnableIRQ+0x18>)
 8004910:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	e000e100 	.word	0xe000e100

0800491c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800491c:	2800      	cmp	r0, #0
 800491e:	db0c      	blt.n	800493a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004920:	f000 021f 	and.w	r2, r0, #31
 8004924:	0940      	lsrs	r0, r0, #5
 8004926:	2301      	movs	r3, #1
 8004928:	4093      	lsls	r3, r2
 800492a:	3020      	adds	r0, #32
 800492c:	4a03      	ldr	r2, [pc, #12]	; (800493c <HAL_NVIC_DisableIRQ+0x20>)
 800492e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004936:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800493a:	4770      	bx	lr
 800493c:	e000e100 	.word	0xe000e100

08004940 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004940:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004944:	4905      	ldr	r1, [pc, #20]	; (800495c <HAL_NVIC_SystemReset+0x1c>)
 8004946:	68ca      	ldr	r2, [r1, #12]
 8004948:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_NVIC_SystemReset+0x20>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
 8004952:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004956:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004958:	e7fd      	b.n	8004956 <HAL_NVIC_SystemReset+0x16>
 800495a:	bf00      	nop
 800495c:	e000ed00 	.word	0xe000ed00
 8004960:	05fa0004 	.word	0x05fa0004

08004964 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	3801      	subs	r0, #1
 8004966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800496a:	d20b      	bcs.n	8004984 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004970:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <HAL_SYSTICK_Config+0x24>)
 8004974:	21f0      	movs	r1, #240	; 0xf0
 8004976:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800497a:	2000      	movs	r0, #0
 800497c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497e:	2207      	movs	r2, #7
 8004980:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004982:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004984:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800498c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <HAL_MPU_Disable+0x18>)
 8004992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80049a8:	f040 0001 	orr.w	r0, r0, #1
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_MPU_Enable+0x1c>)
 80049ae:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80049b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80049ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80049be:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80049c8:	7842      	ldrb	r2, [r0, #1]
 80049ca:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_MPU_ConfigRegion+0x5c>)
 80049cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80049d0:	7803      	ldrb	r3, [r0, #0]
 80049d2:	b1fb      	cbz	r3, 8004a14 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80049d4:	6843      	ldr	r3, [r0, #4]
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_MPU_ConfigRegion+0x5c>)
 80049d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049dc:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80049de:	7ac3      	ldrb	r3, [r0, #11]
 80049e0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049e2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80049e6:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80049e8:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80049ec:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80049ee:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049f2:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80049f4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049f8:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049fe:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a04:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a06:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004a0a:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a0c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004a12:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_MPU_ConfigRegion+0x5c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004a1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a28:	4b02      	ldr	r3, [pc, #8]	; (8004a34 <HAL_NVIC_GetPriorityGrouping+0xc>)
 8004a2a:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8004a2c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8004a38:	b510      	push	{r4, lr}
  if ((int32_t)(IRQn) >= 0)
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	db1e      	blt.n	8004a7c <HAL_NVIC_GetPriority+0x44>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
 8004a3e:	4c13      	ldr	r4, [pc, #76]	; (8004a8c <HAL_NVIC_GetPriority+0x54>)
 8004a40:	5c20      	ldrb	r0, [r4, r0]
 8004a42:	0900      	lsrs	r0, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a44:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a48:	f1c1 0c07 	rsb	ip, r1, #7
 8004a4c:	f1bc 0f04 	cmp.w	ip, #4
 8004a50:	bf28      	it	cs
 8004a52:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a56:	1d0c      	adds	r4, r1, #4
 8004a58:	2c06      	cmp	r4, #6
 8004a5a:	d915      	bls.n	8004a88 <HAL_NVIC_GetPriority+0x50>
 8004a5c:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8004a5e:	fa20 f401 	lsr.w	r4, r0, r1
 8004a62:	f04f 3eff 	mov.w	lr, #4294967295
 8004a66:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004a6a:	ea24 040c 	bic.w	r4, r4, ip
 8004a6e:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8004a70:	fa0e f101 	lsl.w	r1, lr, r1
 8004a74:	ea20 0001 	bic.w	r0, r0, r1
 8004a78:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8004a7a:	bd10      	pop	{r4, pc}
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8004a7c:	f000 000f 	and.w	r0, r0, #15
 8004a80:	4c03      	ldr	r4, [pc, #12]	; (8004a90 <HAL_NVIC_GetPriority+0x58>)
 8004a82:	5c20      	ldrb	r0, [r4, r0]
 8004a84:	0900      	lsrs	r0, r0, #4
 8004a86:	e7dd      	b.n	8004a44 <HAL_NVIC_GetPriority+0xc>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a88:	2100      	movs	r1, #0
 8004a8a:	e7e8      	b.n	8004a5e <HAL_NVIC_GetPriority+0x26>
 8004a8c:	e000e400 	.word	0xe000e400
 8004a90:	e000ed14 	.word	0xe000ed14

08004a94 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a94:	2800      	cmp	r0, #0
 8004a96:	db08      	blt.n	8004aaa <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a98:	f000 021f 	and.w	r2, r0, #31
 8004a9c:	0940      	lsrs	r0, r0, #5
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	3040      	adds	r0, #64	; 0x40
 8004aa4:	4a01      	ldr	r2, [pc, #4]	; (8004aac <HAL_NVIC_SetPendingIRQ+0x18>)
 8004aa6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8004aaa:	4770      	bx	lr
 8004aac:	e000e100 	.word	0xe000e100

08004ab0 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	db0b      	blt.n	8004acc <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004ab4:	0943      	lsrs	r3, r0, #5
 8004ab6:	3340      	adds	r3, #64	; 0x40
 8004ab8:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <HAL_NVIC_GetPendingIRQ+0x20>)
 8004aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abe:	f000 001f 	and.w	r0, r0, #31
 8004ac2:	fa23 f000 	lsr.w	r0, r3, r0
 8004ac6:	f000 0001 	and.w	r0, r0, #1
 8004aca:	4770      	bx	lr
    return(0U);
 8004acc:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	db08      	blt.n	8004aea <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad8:	f000 021f 	and.w	r2, r0, #31
 8004adc:	0940      	lsrs	r0, r0, #5
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	3060      	adds	r0, #96	; 0x60
 8004ae4:	4a01      	ldr	r2, [pc, #4]	; (8004aec <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004ae6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 8004af0:	2800      	cmp	r0, #0
 8004af2:	db0b      	blt.n	8004b0c <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004af4:	0943      	lsrs	r3, r0, #5
 8004af6:	3380      	adds	r3, #128	; 0x80
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <HAL_NVIC_GetActive+0x20>)
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	f000 001f 	and.w	r0, r0, #31
 8004b02:	fa23 f000 	lsr.w	r0, r3, r0
 8004b06:	f000 0001 	and.w	r0, r0, #1
 8004b0a:	4770      	bx	lr
    return(0U);
 8004b0c:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8004b0e:	4770      	bx	lr
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004b14:	2804      	cmp	r0, #4
 8004b16:	d006      	beq.n	8004b26 <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004b18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004b1c:	6913      	ldr	r3, [r2, #16]
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	6113      	str	r3, [r2, #16]
  }
}
 8004b24:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004b26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004b2a:	6913      	ldr	r3, [r2, #16]
 8004b2c:	f043 0304 	orr.w	r3, r3, #4
 8004b30:	6113      	str	r3, [r2, #16]
 8004b32:	4770      	bx	lr

08004b34 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004b34:	4770      	bx	lr

08004b36 <HAL_SYSTICK_IRQHandler>:
{
 8004b36:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004b38:	f7ff fffc 	bl	8004b34 <HAL_SYSTICK_Callback>
}
 8004b3c:	bd08      	pop	{r3, pc}

08004b3e <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_GetCurrentCPUID+0x16>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b46:	2b07      	cmp	r3, #7
 8004b48:	d001      	beq.n	8004b4e <HAL_GetCurrentCPUID+0x10>
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8004b4a:	2001      	movs	r0, #1
  }
}
 8004b4c:	4770      	bx	lr
    return  CM7_CPUID;
 8004b4e:	2003      	movs	r0, #3
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_MspInit could be implemented in the user file
   */
}
 8004b58:	4770      	bx	lr

08004b5a <HAL_DAC_Init>:
  if (hdac == NULL)
 8004b5a:	b170      	cbz	r0, 8004b7a <HAL_DAC_Init+0x20>
{
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	4604      	mov	r4, r0
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b60:	7903      	ldrb	r3, [r0, #4]
 8004b62:	b133      	cbz	r3, 8004b72 <HAL_DAC_Init+0x18>
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	7123      	strb	r3, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b68:	2000      	movs	r0, #0
 8004b6a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	7123      	strb	r3, [r4, #4]
}
 8004b70:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004b72:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004b74:	f7fc f8fe 	bl	8000d74 <HAL_DAC_MspInit>
 8004b78:	e7f4      	b.n	8004b64 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8004b7a:	2001      	movs	r0, #1
}
 8004b7c:	4770      	bx	lr
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_MspDeInit could be implemented in the user file
   */
}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_DAC_DeInit>:
  if (hdac == NULL)
 8004b80:	b150      	cbz	r0, 8004b98 <HAL_DAC_DeInit+0x18>
{
 8004b82:	b510      	push	{r4, lr}
 8004b84:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	7103      	strb	r3, [r0, #4]
  HAL_DAC_MspDeInit(hdac);
 8004b8a:	f7fc f94f 	bl	8000e2c <HAL_DAC_MspDeInit>
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b8e:	2000      	movs	r0, #0
 8004b90:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_RESET;
 8004b92:	7120      	strb	r0, [r4, #4]
  __HAL_UNLOCK(hdac);
 8004b94:	7160      	strb	r0, [r4, #5]
}
 8004b96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b98:	2001      	movs	r0, #1
}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b9c:	7943      	ldrb	r3, [r0, #5]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d02e      	beq.n	8004c00 <HAL_DAC_Start+0x64>
{
 8004ba2:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ba8:	2202      	movs	r2, #2
 8004baa:	7102      	strb	r2, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bac:	6804      	ldr	r4, [r0, #0]
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	f001 0c10 	and.w	ip, r1, #16
 8004bb4:	fa03 f30c 	lsl.w	r3, r3, ip
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	6023      	str	r3, [r4, #0]

  if (Channel == DAC_CHANNEL_1)
 8004bbc:	b991      	cbnz	r1, 8004be4 <HAL_DAC_Start+0x48>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004bbe:	6802      	ldr	r2, [r0, #0]
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d007      	beq.n	8004bda <HAL_DAC_Start+0x3e>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8004bd2:	4618      	mov	r0, r3
}
 8004bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd8:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bda:	6853      	ldr	r3, [r2, #4]
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	6053      	str	r3, [r2, #4]
 8004be2:	e7f2      	b.n	8004bca <HAL_DAC_Start+0x2e>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004be4:	6801      	ldr	r1, [r0, #0]
 8004be6:	680a      	ldr	r2, [r1, #0]
 8004be8:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8004bec:	2302      	movs	r3, #2
 8004bee:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004bf2:	4562      	cmp	r2, ip
 8004bf4:	d1e9      	bne.n	8004bca <HAL_DAC_Start+0x2e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004bf6:	684b      	ldr	r3, [r1, #4]
 8004bf8:	f043 0302 	orr.w	r3, r3, #2
 8004bfc:	604b      	str	r3, [r1, #4]
 8004bfe:	e7e4      	b.n	8004bca <HAL_DAC_Start+0x2e>
  __HAL_LOCK(hdac);
 8004c00:	2002      	movs	r0, #2
}
 8004c02:	4770      	bx	lr

08004c04 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004c04:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c06:	6804      	ldr	r4, [r0, #0]
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	f001 0110 	and.w	r1, r1, #16
 8004c0e:	2201      	movs	r2, #1
 8004c10:	fa02 f101 	lsl.w	r1, r2, r1
 8004c14:	ea23 0101 	bic.w	r1, r3, r1
 8004c18:	6021      	str	r1, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c1a:	7102      	strb	r2, [r0, #4]

  /* Return function status */
  return HAL_OK;
}
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	9a04      	ldr	r2, [sp, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c2e:	7940      	ldrb	r0, [r0, #5]
 8004c30:	2801      	cmp	r0, #1
 8004c32:	d066      	beq.n	8004d02 <HAL_DAC_Start_DMA+0xde>
 8004c34:	2001      	movs	r0, #1
 8004c36:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c38:	2002      	movs	r0, #2
 8004c3a:	7120      	strb	r0, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d134      	bne.n	8004caa <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c40:	68a0      	ldr	r0, [r4, #8]
 8004c42:	4e31      	ldr	r6, [pc, #196]	; (8004d08 <HAL_DAC_Start_DMA+0xe4>)
 8004c44:	63c6      	str	r6, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c46:	68a0      	ldr	r0, [r4, #8]
 8004c48:	4e30      	ldr	r6, [pc, #192]	; (8004d0c <HAL_DAC_Start_DMA+0xe8>)
 8004c4a:	6406      	str	r6, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c4c:	68a0      	ldr	r0, [r4, #8]
 8004c4e:	4e30      	ldr	r6, [pc, #192]	; (8004d10 <HAL_DAC_Start_DMA+0xec>)
 8004c50:	64c6      	str	r6, [r0, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c52:	6826      	ldr	r6, [r4, #0]
 8004c54:	6830      	ldr	r0, [r6, #0]
 8004c56:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004c5a:	6030      	str	r0, [r6, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c5c:	2a04      	cmp	r2, #4
 8004c5e:	d01e      	beq.n	8004c9e <HAL_DAC_Start_DMA+0x7a>
 8004c60:	2a08      	cmp	r2, #8
 8004c62:	d01f      	beq.n	8004ca4 <HAL_DAC_Start_DMA+0x80>
 8004c64:	b1c2      	cbz	r2, 8004c98 <HAL_DAC_Start_DMA+0x74>
 8004c66:	462a      	mov	r2, r5
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	d13c      	bne.n	8004ce6 <HAL_DAC_Start_DMA+0xc2>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c6c:	6826      	ldr	r6, [r4, #0]
 8004c6e:	6830      	ldr	r0, [r6, #0]
 8004c70:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8004c74:	6030      	str	r0, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c76:	68a0      	ldr	r0, [r4, #8]
 8004c78:	f001 f924 	bl	8005ec4 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d139      	bne.n	8004cf8 <HAL_DAC_Start_DMA+0xd4>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c84:	6822      	ldr	r2, [r4, #0]
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	f005 0510 	and.w	r5, r5, #16
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f505 	lsl.w	r5, r1, r5
 8004c92:	431d      	orrs	r5, r3
 8004c94:	6015      	str	r5, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	3208      	adds	r2, #8
        break;
 8004c9c:	e7e4      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	320c      	adds	r2, #12
        break;
 8004ca2:	e7e1      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	3210      	adds	r2, #16
        break;
 8004ca8:	e7de      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004caa:	68e0      	ldr	r0, [r4, #12]
 8004cac:	4e19      	ldr	r6, [pc, #100]	; (8004d14 <HAL_DAC_Start_DMA+0xf0>)
 8004cae:	63c6      	str	r6, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004cb0:	68e0      	ldr	r0, [r4, #12]
 8004cb2:	4e19      	ldr	r6, [pc, #100]	; (8004d18 <HAL_DAC_Start_DMA+0xf4>)
 8004cb4:	6406      	str	r6, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cb6:	68e0      	ldr	r0, [r4, #12]
 8004cb8:	4e18      	ldr	r6, [pc, #96]	; (8004d1c <HAL_DAC_Start_DMA+0xf8>)
 8004cba:	64c6      	str	r6, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cbc:	6826      	ldr	r6, [r4, #0]
 8004cbe:	6830      	ldr	r0, [r6, #0]
 8004cc0:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8004cc4:	6030      	str	r0, [r6, #0]
    switch (Alignment)
 8004cc6:	2a04      	cmp	r2, #4
 8004cc8:	d007      	beq.n	8004cda <HAL_DAC_Start_DMA+0xb6>
 8004cca:	2a08      	cmp	r2, #8
 8004ccc:	d008      	beq.n	8004ce0 <HAL_DAC_Start_DMA+0xbc>
 8004cce:	b10a      	cbz	r2, 8004cd4 <HAL_DAC_Start_DMA+0xb0>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	e7c9      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004cd4:	6822      	ldr	r2, [r4, #0]
 8004cd6:	3214      	adds	r2, #20
        break;
 8004cd8:	e7c6      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	3218      	adds	r2, #24
        break;
 8004cde:	e7c3      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	321c      	adds	r2, #28
        break;
 8004ce4:	e7c0      	b.n	8004c68 <HAL_DAC_Start_DMA+0x44>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ce6:	6826      	ldr	r6, [r4, #0]
 8004ce8:	6830      	ldr	r0, [r6, #0]
 8004cea:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8004cee:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004cf0:	68e0      	ldr	r0, [r4, #12]
 8004cf2:	f001 f8e7 	bl	8005ec4 <HAL_DMA_Start_IT>
 8004cf6:	e7c1      	b.n	8004c7c <HAL_DAC_Start_DMA+0x58>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	e7c9      	b.n	8004c96 <HAL_DAC_Start_DMA+0x72>
  __HAL_LOCK(hdac);
 8004d02:	2002      	movs	r0, #2
 8004d04:	e7c7      	b.n	8004c96 <HAL_DAC_Start_DMA+0x72>
 8004d06:	bf00      	nop
 8004d08:	08004da7 	.word	0x08004da7
 8004d0c:	08004db9 	.word	0x08004db9
 8004d10:	08004dc5 	.word	0x08004dc5
 8004d14:	0800522f 	.word	0x0800522f
 8004d18:	08005241 	.word	0x08005241
 8004d1c:	0800524d 	.word	0x0800524d

08004d20 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004d24:	6803      	ldr	r3, [r0, #0]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	f001 0e10 	and.w	lr, r1, #16
 8004d2c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8004d30:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004d34:	ea20 000c 	bic.w	r0, r0, ip
 8004d38:	6018      	str	r0, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f20e 	lsl.w	r2, r2, lr
 8004d44:	ea23 0302 	bic.w	r3, r3, r2
 8004d48:	6003      	str	r3, [r0, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004d4a:	b959      	cbnz	r1, 8004d64 <HAL_DAC_Stop_DMA+0x44>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d4c:	68a0      	ldr	r0, [r4, #8]
 8004d4e:	f001 fa05 	bl	800615c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d5a:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8004d60:	2000      	movs	r0, #0
 8004d62:	bd10      	pop	{r4, pc}
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004d64:	68e0      	ldr	r0, [r4, #12]
 8004d66:	f001 f9f9 	bl	800615c <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e7f2      	b.n	8004d5c <HAL_DAC_Stop_DMA+0x3c>

08004d76 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d76:	b410      	push	{r4}
 8004d78:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8004d7a:	2400      	movs	r4, #0
 8004d7c:	9401      	str	r4, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8004d82:	b951      	cbnz	r1, 8004d9a <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d84:	9901      	ldr	r1, [sp, #4]
 8004d86:	440a      	add	r2, r1
 8004d88:	3208      	adds	r2, #8
 8004d8a:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d8c:	9a01      	ldr	r2, [sp, #4]
 8004d8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8004d90:	2000      	movs	r0, #0
 8004d92:	b003      	add	sp, #12
 8004d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d98:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d9a:	9901      	ldr	r1, [sp, #4]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	3214      	adds	r2, #20
 8004da0:	9201      	str	r2, [sp, #4]
 8004da2:	e7f3      	b.n	8004d8c <HAL_DAC_SetValue+0x16>

08004da4 <HAL_DAC_ConvCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004da4:	4770      	bx	lr

08004da6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004da6:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da8:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff fffa 	bl	8004da4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004db0:	2301      	movs	r3, #1
 8004db2:	7123      	strb	r3, [r4, #4]
}
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
}
 8004db6:	4770      	bx	lr

08004db8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004db8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004dba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004dbc:	f7ff fffb 	bl	8004db6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004dc0:	bd08      	pop	{r3, pc}

08004dc2 <HAL_DAC_ErrorCallbackCh1>:
}
 8004dc2:	4770      	bx	lr

08004dc4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	f043 0304 	orr.w	r3, r3, #4
 8004dce:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7ff fff6 	bl	8004dc2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	7123      	strb	r3, [r4, #4]
}
 8004dda:	bd10      	pop	{r4, pc}

08004ddc <HAL_DAC_DMAUnderrunCallbackCh1>:
}
 8004ddc:	4770      	bx	lr

08004dde <HAL_DAC_IRQHandler>:
{
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004de2:	6803      	ldr	r3, [r0, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8004dea:	d003      	beq.n	8004df4 <HAL_DAC_IRQHandler+0x16>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8004df2:	d109      	bne.n	8004e08 <HAL_DAC_IRQHandler+0x2a>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8004dfc:	d003      	beq.n	8004e06 <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e00:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8004e04:	d111      	bne.n	8004e2a <HAL_DAC_IRQHandler+0x4c>
}
 8004e06:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e08:	2204      	movs	r2, #4
 8004e0a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e0c:	6902      	ldr	r2, [r0, #16]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e22:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e24:	f7ff ffda 	bl	8004ddc <HAL_DAC_DMAUnderrunCallbackCh1>
 8004e28:	e7e4      	b.n	8004df4 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e2e:	6922      	ldr	r2, [r4, #16]
 8004e30:	f042 0202 	orr.w	r2, r2, #2
 8004e34:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e3a:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e46:	4620      	mov	r0, r4
 8004e48:	f000 fa0c 	bl	8005264 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8004e4c:	e7db      	b.n	8004e06 <HAL_DAC_IRQHandler+0x28>

08004e4e <HAL_DAC_GetValue>:
  if (Channel == DAC_CHANNEL_1)
 8004e4e:	b911      	cbnz	r1, 8004e56 <HAL_DAC_GetValue+0x8>
    result = hdac->Instance->DOR1;
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004e54:	4770      	bx	lr
    result = hdac->Instance->DOR2;
 8004e56:	6803      	ldr	r3, [r0, #0]
 8004e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8004e5a:	4770      	bx	lr

08004e5c <HAL_DAC_ConfigChannel>:
{
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdac);
 8004e5e:	7943      	ldrb	r3, [r0, #5]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f000 80ae 	beq.w	8004fc2 <HAL_DAC_ConfigChannel+0x166>
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	4616      	mov	r6, r2
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e70:	2302      	movs	r3, #2
 8004e72:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e74:	680b      	ldr	r3, [r1, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d016      	beq.n	8004ea8 <HAL_DAC_ConfigChannel+0x4c>
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e7a:	692b      	ldr	r3, [r5, #16]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d067      	beq.n	8004f50 <HAL_DAC_ConfigChannel+0xf4>
  tmpreg1 = hdac->Instance->MCR;
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e84:	f006 0210 	and.w	r2, r6, #16
 8004e88:	2107      	movs	r1, #7
 8004e8a:	4091      	lsls	r1, r2
 8004e8c:	ea23 0101 	bic.w	r1, r3, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e90:	68eb      	ldr	r3, [r5, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d069      	beq.n	8004f6a <HAL_DAC_ConfigChannel+0x10e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	f000 808f 	beq.w	8004fba <HAL_DAC_ConfigChannel+0x15e>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e9c:	68ab      	ldr	r3, [r5, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 808d 	bne.w	8004fbe <HAL_DAC_ConfigChannel+0x162>
      connectOnChip = DAC_MCR_MODE1_0;
 8004ea4:	2601      	movs	r6, #1
 8004ea6:	e061      	b.n	8004f6c <HAL_DAC_ConfigChannel+0x110>
    tickstart = HAL_GetTick();
 8004ea8:	f7fc f954 	bl	8001154 <HAL_GetTick>
 8004eac:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004eae:	b19e      	cbz	r6, 8004ed8 <HAL_DAC_ConfigChannel+0x7c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da44      	bge.n	8004f42 <HAL_DAC_ConfigChannel+0xe6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004eb8:	f7fc f94c 	bl	8001154 <HAL_GetTick>
 8004ebc:	1bc0      	subs	r0, r0, r7
 8004ebe:	2801      	cmp	r0, #1
 8004ec0:	d9f6      	bls.n	8004eb0 <HAL_DAC_ConfigChannel+0x54>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	daf2      	bge.n	8004eb0 <HAL_DAC_ConfigChannel+0x54>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	7120      	strb	r0, [r4, #4]
            return HAL_TIMEOUT;
 8004ed6:	e06f      	b.n	8004fb8 <HAL_DAC_ConfigChannel+0x15c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004edc:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <HAL_DAC_ConfigChannel+0x16c>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	b18b      	cbz	r3, 8004f06 <HAL_DAC_ConfigChannel+0xaa>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ee2:	f7fc f937 	bl	8001154 <HAL_GetTick>
 8004ee6:	1bc0      	subs	r0, r0, r7
 8004ee8:	2801      	cmp	r0, #1
 8004eea:	d9f5      	bls.n	8004ed8 <HAL_DAC_ConfigChannel+0x7c>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_DAC_ConfigChannel+0x16c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <HAL_DAC_ConfigChannel+0x7c>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	f043 0308 	orr.w	r3, r3, #8
 8004efe:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f00:	2003      	movs	r0, #3
 8004f02:	7120      	strb	r0, [r4, #4]
            return HAL_TIMEOUT;
 8004f04:	e058      	b.n	8004fb8 <HAL_DAC_ConfigChannel+0x15c>
      HAL_Delay(1);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fc f94c 	bl	80011a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	69aa      	ldr	r2, [r5, #24]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004f16:	f006 0110 	and.w	r1, r6, #16
 8004f1a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004f1e:	408b      	lsls	r3, r1
 8004f20:	ea22 0203 	bic.w	r2, r2, r3
 8004f24:	69eb      	ldr	r3, [r5, #28]
 8004f26:	408b      	lsls	r3, r1
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f30:	22ff      	movs	r2, #255	; 0xff
 8004f32:	408a      	lsls	r2, r1
 8004f34:	ea23 0302 	bic.w	r3, r3, r2
 8004f38:	6a2a      	ldr	r2, [r5, #32]
 8004f3a:	408a      	lsls	r2, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004f40:	e79b      	b.n	8004e7a <HAL_DAC_ConfigChannel+0x1e>
      HAL_Delay(1U);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fc f92e 	bl	80011a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	69aa      	ldr	r2, [r5, #24]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
 8004f4e:	e7e0      	b.n	8004f12 <HAL_DAC_ConfigChannel+0xb6>
    tmpreg1 = hdac->Instance->CCR;
 8004f50:	6821      	ldr	r1, [r4, #0]
 8004f52:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f54:	f006 0010 	and.w	r0, r6, #16
 8004f58:	231f      	movs	r3, #31
 8004f5a:	4083      	lsls	r3, r0
 8004f5c:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f60:	696b      	ldr	r3, [r5, #20]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f62:	4083      	lsls	r3, r0
 8004f64:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8004f66:	638b      	str	r3, [r1, #56]	; 0x38
 8004f68:	e78a      	b.n	8004e80 <HAL_DAC_ConfigChannel+0x24>
    connectOnChip = 0x00000000UL;
 8004f6a:	2600      	movs	r6, #0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	68af      	ldr	r7, [r5, #8]
 8004f70:	433b      	orrs	r3, r7
 8004f72:	4333      	orrs	r3, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f74:	4093      	lsls	r3, r2
 8004f76:	430b      	orrs	r3, r1
  hdac->Instance->MCR = tmpreg1;
 8004f78:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f7a:	6820      	ldr	r0, [r4, #0]
 8004f7c:	6803      	ldr	r3, [r0, #0]
 8004f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f82:	4091      	lsls	r1, r2
 8004f84:	ea23 0301 	bic.w	r3, r3, r1
 8004f88:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f8e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8004f92:	4091      	lsls	r1, r2
 8004f94:	ea23 0101 	bic.w	r1, r3, r1
  tmpreg2 = sConfig->DAC_Trigger;
 8004f98:	686b      	ldr	r3, [r5, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f9a:	4093      	lsls	r3, r2
 8004f9c:	430b      	orrs	r3, r1
  hdac->Instance->CR = tmpreg1;
 8004f9e:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	6803      	ldr	r3, [r0, #0]
 8004fa4:	21c0      	movs	r1, #192	; 0xc0
 8004fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004faa:	ea23 0202 	bic.w	r2, r3, r2
 8004fae:	6002      	str	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	7160      	strb	r0, [r4, #5]
}
 8004fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8004fba:	2601      	movs	r6, #1
 8004fbc:	e7d6      	b.n	8004f6c <HAL_DAC_ConfigChannel+0x110>
      connectOnChip = 0x00000000UL;
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	e7d4      	b.n	8004f6c <HAL_DAC_ConfigChannel+0x110>
  __HAL_LOCK(hdac);
 8004fc2:	2002      	movs	r0, #2
 8004fc4:	e7f8      	b.n	8004fb8 <HAL_DAC_ConfigChannel+0x15c>
 8004fc6:	bf00      	nop
 8004fc8:	20008000 	.word	0x20008000

08004fcc <HAL_DAC_GetState>:
  return hdac->State;
 8004fcc:	7900      	ldrb	r0, [r0, #4]
}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_DAC_GetError>:
  return hdac->ErrorCode;
 8004fd0:	6900      	ldr	r0, [r0, #16]
}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_DACEx_DualStart>:
{
  uint32_t tmp_swtrig = 0UL;


  /* Process locked */
  __HAL_LOCK(hdac);
 8004fd4:	7943      	ldrb	r3, [r0, #5]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d02b      	beq.n	8005032 <HAL_DACEx_DualStart+0x5e>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	7103      	strb	r3, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8004fe2:	6802      	ldr	r2, [r0, #0]
 8004fe4:	6813      	ldr	r3, [r2, #0]
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	6013      	str	r3, [r2, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8004fec:	6802      	ldr	r2, [r0, #0]
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ff6:	6803      	ldr	r3, [r0, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8004ffe:	2a02      	cmp	r2, #2
 8005000:	d011      	beq.n	8005026 <HAL_DACEx_DualStart+0x52>
  uint32_t tmp_swtrig = 0UL;
 8005002:	f04f 0c00 	mov.w	ip, #0
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 800500c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005010:	d00c      	beq.n	800502c <HAL_DACEx_DualStart+0x58>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	ea42 020c 	orr.w	r2, r2, ip
 8005018:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800501a:	2301      	movs	r3, #1
 800501c:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800501e:	2300      	movs	r3, #0
 8005020:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8005022:	4618      	mov	r0, r3
 8005024:	4770      	bx	lr
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8005026:	f04f 0c01 	mov.w	ip, #1
 800502a:	e7ec      	b.n	8005006 <HAL_DACEx_DualStart+0x32>
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 800502c:	f04c 0c02 	orr.w	ip, ip, #2
 8005030:	e7ef      	b.n	8005012 <HAL_DACEx_DualStart+0x3e>
  __HAL_LOCK(hdac);
 8005032:	2002      	movs	r0, #2
}
 8005034:	4770      	bx	lr

08005036 <HAL_DACEx_DualStop>:
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8005036:	6802      	ldr	r2, [r0, #0]
 8005038:	6813      	ldr	r3, [r2, #0]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8005040:	6802      	ldr	r2, [r0, #0]
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	6013      	str	r3, [r2, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800504a:	2301      	movs	r3, #1
 800504c:	7103      	strb	r3, [r0, #4]

  /* Return function status */
  return HAL_OK;
}
 800504e:	2000      	movs	r0, #0
 8005050:	4770      	bx	lr

08005052 <HAL_DACEx_DualStart_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment)
{
 8005052:	b570      	push	{r4, r5, r6, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	9d04      	ldr	r5, [sp, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005058:	f890 c005 	ldrb.w	ip, [r0, #5]
 800505c:	f1bc 0f01 	cmp.w	ip, #1
 8005060:	d05e      	beq.n	8005120 <HAL_DACEx_DualStart_DMA+0xce>
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	2201      	movs	r2, #1
 8005068:	7162      	strb	r2, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800506a:	2202      	movs	r2, #2
 800506c:	7122      	strb	r2, [r4, #4]

  if (Channel == DAC_CHANNEL_1)
 800506e:	2800      	cmp	r0, #0
 8005070:	d12d      	bne.n	80050ce <HAL_DACEx_DualStart_DMA+0x7c>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005072:	68a2      	ldr	r2, [r4, #8]
 8005074:	4e2b      	ldr	r6, [pc, #172]	; (8005124 <HAL_DACEx_DualStart_DMA+0xd2>)
 8005076:	63d6      	str	r6, [r2, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005078:	68a2      	ldr	r2, [r4, #8]
 800507a:	4e2b      	ldr	r6, [pc, #172]	; (8005128 <HAL_DACEx_DualStart_DMA+0xd6>)
 800507c:	6416      	str	r6, [r2, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800507e:	68a2      	ldr	r2, [r4, #8]
 8005080:	4e2a      	ldr	r6, [pc, #168]	; (800512c <HAL_DACEx_DualStart_DMA+0xda>)
 8005082:	64d6      	str	r6, [r2, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005084:	6826      	ldr	r6, [r4, #0]
 8005086:	6832      	ldr	r2, [r6, #0]
 8005088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800508c:	6032      	str	r2, [r6, #0]

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
  }

  switch (Alignment)
 800508e:	2d04      	cmp	r5, #4
 8005090:	d030      	beq.n	80050f4 <HAL_DACEx_DualStart_DMA+0xa2>
 8005092:	2d08      	cmp	r5, #8
 8005094:	d032      	beq.n	80050fc <HAL_DACEx_DualStart_DMA+0xaa>
 8005096:	2d00      	cmp	r5, #0
 8005098:	d028      	beq.n	80050ec <HAL_DACEx_DualStart_DMA+0x9a>
 800509a:	2200      	movs	r2, #0
    default:
      break;
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800509c:	2800      	cmp	r0, #0
 800509e:	d131      	bne.n	8005104 <HAL_DACEx_DualStart_DMA+0xb2>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80050a0:	6825      	ldr	r5, [r4, #0]
 80050a2:	6828      	ldr	r0, [r5, #0]
 80050a4:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80050a8:	6028      	str	r0, [r5, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80050aa:	68a0      	ldr	r0, [r4, #8]
 80050ac:	f000 ff0a 	bl	8005ec4 <HAL_DMA_Start_IT>
    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80050b0:	2300      	movs	r3, #0
 80050b2:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d12e      	bne.n	8005116 <HAL_DACEx_DualStart_DMA+0xc4>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6013      	str	r3, [r2, #0]
    __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80050ce:	68e2      	ldr	r2, [r4, #12]
 80050d0:	4e17      	ldr	r6, [pc, #92]	; (8005130 <HAL_DACEx_DualStart_DMA+0xde>)
 80050d2:	63d6      	str	r6, [r2, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80050d4:	68e2      	ldr	r2, [r4, #12]
 80050d6:	4e17      	ldr	r6, [pc, #92]	; (8005134 <HAL_DACEx_DualStart_DMA+0xe2>)
 80050d8:	6416      	str	r6, [r2, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80050da:	68e2      	ldr	r2, [r4, #12]
 80050dc:	4e16      	ldr	r6, [pc, #88]	; (8005138 <HAL_DACEx_DualStart_DMA+0xe6>)
 80050de:	64d6      	str	r6, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80050e0:	6826      	ldr	r6, [r4, #0]
 80050e2:	6832      	ldr	r2, [r6, #0]
 80050e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050e8:	6032      	str	r2, [r6, #0]
 80050ea:	e7d0      	b.n	800508e <HAL_DACEx_DualStart_DMA+0x3c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12RD;
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	f105 0220 	add.w	r2, r5, #32
      break;
 80050f2:	e7d3      	b.n	800509c <HAL_DACEx_DualStart_DMA+0x4a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12LD;
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	f105 0224 	add.w	r2, r5, #36	; 0x24
      break;
 80050fa:	e7cf      	b.n	800509c <HAL_DACEx_DualStart_DMA+0x4a>
      tmpreg = (uint32_t)&hdac->Instance->DHR8RD;
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	f105 0228 	add.w	r2, r5, #40	; 0x28
      break;
 8005102:	e7cb      	b.n	800509c <HAL_DACEx_DualStart_DMA+0x4a>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005104:	6825      	ldr	r5, [r4, #0]
 8005106:	6828      	ldr	r0, [r5, #0]
 8005108:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800510c:	6028      	str	r0, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800510e:	68e0      	ldr	r0, [r4, #12]
 8005110:	f000 fed8 	bl	8005ec4 <HAL_DMA_Start_IT>
 8005114:	e7cc      	b.n	80050b0 <HAL_DACEx_DualStart_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	e7d5      	b.n	80050cc <HAL_DACEx_DualStart_DMA+0x7a>
  __HAL_LOCK(hdac);
 8005120:	2002      	movs	r0, #2
 8005122:	e7d3      	b.n	80050cc <HAL_DACEx_DualStart_DMA+0x7a>
 8005124:	08004da7 	.word	0x08004da7
 8005128:	08004db9 	.word	0x08004db9
 800512c:	08004dc5 	.word	0x08004dc5
 8005130:	0800522f 	.word	0x0800522f
 8005134:	08005241 	.word	0x08005241
 8005138:	0800524d 	.word	0x0800524d

0800513c <HAL_DACEx_DualStop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800513c:	b510      	push	{r4, lr}
 800513e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;


  /* Disable the selected DAC channel DMA request */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2 | DAC_CR_DMAEN1);
 8005140:	6802      	ldr	r2, [r0, #0]
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8005148:	6013      	str	r3, [r2, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 800514a:	6802      	ldr	r2, [r0, #0]
 800514c:	6813      	ldr	r3, [r2, #0]
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6013      	str	r3, [r2, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8005154:	6802      	ldr	r2, [r0, #0]
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800515e:	b959      	cbnz	r1, 8005178 <HAL_DACEx_DualStop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005160:	6880      	ldr	r0, [r0, #8]
 8005162:	f000 fffb 	bl	800615c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	6813      	ldr	r3, [r2, #0]
 800516a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516e:	6013      	str	r3, [r2, #0]
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8005170:	b158      	cbz	r0, 800518a <HAL_DACEx_DualStop_DMA+0x4e>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005172:	2304      	movs	r3, #4
 8005174:	7123      	strb	r3, [r4, #4]
    hdac->State = HAL_DAC_STATE_READY;
  }

  /* Return function status */
  return status;
}
 8005176:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8005178:	68c0      	ldr	r0, [r0, #12]
 800517a:	f000 ffef 	bl	800615c <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e7f2      	b.n	8005170 <HAL_DACEx_DualStop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_READY;
 800518a:	2301      	movs	r3, #1
 800518c:	7123      	strb	r3, [r4, #4]
 800518e:	e7f2      	b.n	8005176 <HAL_DACEx_DualStop_DMA+0x3a>

08005190 <HAL_DACEx_TriangleWaveGenerate>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005190:	7943      	ldrb	r3, [r0, #5]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d01b      	beq.n	80051ce <HAL_DACEx_TriangleWaveGenerate+0x3e>
{
 8005196:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8005198:	f04f 0e01 	mov.w	lr, #1
 800519c:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	7103      	strb	r3, [r0, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80051a4:	6804      	ldr	r4, [r0, #0]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f001 0110 	and.w	r1, r1, #16
 80051ac:	f44f 6c7c 	mov.w	ip, #4032	; 0xfc0
 80051b0:	fa0c fc01 	lsl.w	ip, ip, r1
 80051b4:	ea23 030c 	bic.w	r3, r3, ip
 80051b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051bc:	408a      	lsls	r2, r1
 80051be:	431a      	orrs	r2, r3
 80051c0:	6022      	str	r2, [r4, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051c2:	f880 e004 	strb.w	lr, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051c6:	2300      	movs	r3, #0
 80051c8:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 80051ca:	4618      	mov	r0, r3
}
 80051cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 80051ce:	2002      	movs	r0, #2
}
 80051d0:	4770      	bx	lr

080051d2 <HAL_DACEx_NoiseWaveGenerate>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051d2:	7943      	ldrb	r3, [r0, #5]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d01b      	beq.n	8005210 <HAL_DACEx_NoiseWaveGenerate+0x3e>
{
 80051d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 80051da:	f04f 0e01 	mov.w	lr, #1
 80051de:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	7103      	strb	r3, [r0, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80051e6:	6804      	ldr	r4, [r0, #0]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f001 0110 	and.w	r1, r1, #16
 80051ee:	f44f 6c7c 	mov.w	ip, #4032	; 0xfc0
 80051f2:	fa0c fc01 	lsl.w	ip, ip, r1
 80051f6:	ea23 030c 	bic.w	r3, r3, ip
 80051fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fe:	408a      	lsls	r2, r1
 8005200:	431a      	orrs	r2, r3
 8005202:	6022      	str	r2, [r4, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005204:	f880 e004 	strb.w	lr, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005208:	2300      	movs	r3, #0
 800520a:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 800520c:	4618      	mov	r0, r3
}
 800520e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8005210:	2002      	movs	r0, #2
}
 8005212:	4770      	bx	lr

08005214 <HAL_DACEx_DualSetValue>:
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8005214:	2908      	cmp	r1, #8
 8005216:	d006      	beq.n	8005226 <HAL_DACEx_DualSetValue+0x12>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8005218:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  }

  tmp = (uint32_t)hdac->Instance;
 800521c:	6803      	ldr	r3, [r0, #0]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800521e:	4419      	add	r1, r3

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8005220:	620a      	str	r2, [r1, #32]

  /* Return function status */
  return HAL_OK;
}
 8005222:	2000      	movs	r0, #0
 8005224:	4770      	bx	lr
    data = ((uint32_t)Data2 << 8U) | Data1;
 8005226:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800522a:	e7f7      	b.n	800521c <HAL_DACEx_DualSetValue+0x8>
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800522c:	4770      	bx	lr

0800522e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800522e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005230:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005232:	4620      	mov	r0, r4
 8005234:	f7fb fa4e 	bl	80006d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005238:	2301      	movs	r3, #1
 800523a:	7123      	strb	r3, [r4, #4]
}
 800523c:	bd10      	pop	{r4, pc}
}
 800523e:	4770      	bx	lr

08005240 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005240:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005242:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005244:	f7fb fa4c 	bl	80006e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005248:	bd08      	pop	{r3, pc}

0800524a <HAL_DACEx_ErrorCallbackCh2>:
}
 800524a:	4770      	bx	lr

0800524c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800524c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005258:	4620      	mov	r0, r4
 800525a:	f7ff fff6 	bl	800524a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800525e:	2301      	movs	r3, #1
 8005260:	7123      	strb	r3, [r4, #4]
}
 8005262:	bd10      	pop	{r4, pc}

08005264 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8005264:	4770      	bx	lr

08005266 <HAL_DACEx_SelfCalibrate>:
  if (hdac == NULL)
 8005266:	2800      	cmp	r0, #0
 8005268:	f000 8083 	beq.w	8005372 <HAL_DACEx_SelfCalibrate+0x10c>
{
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	b083      	sub	sp, #12
 8005272:	4689      	mov	r9, r1
 8005274:	4604      	mov	r4, r0
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8005276:	7903      	ldrb	r3, [r0, #4]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d07b      	beq.n	8005376 <HAL_DACEx_SelfCalibrate+0x110>
    __HAL_LOCK(hdac);
 800527e:	7943      	ldrb	r3, [r0, #5]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d07a      	beq.n	800537a <HAL_DACEx_SelfCalibrate+0x114>
 8005284:	2101      	movs	r1, #1
 8005286:	7141      	strb	r1, [r0, #5]
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8005288:	6800      	ldr	r0, [r0, #0]
 800528a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800528c:	f002 0710 	and.w	r7, r2, #16
 8005290:	2307      	movs	r3, #7
 8005292:	40bb      	lsls	r3, r7
 8005294:	ea05 0b03 	and.w	fp, r5, r3
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8005298:	6805      	ldr	r5, [r0, #0]
 800529a:	40b9      	lsls	r1, r7
 800529c:	ea25 0101 	bic.w	r1, r5, r1
 80052a0:	6001      	str	r1, [r0, #0]
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80052a6:	ea6f 0a03 	mvn.w	sl, r3
 80052aa:	ea21 0303 	bic.w	r3, r1, r3
 80052ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    tmp = (uint32_t)hdac->Instance;
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	9301      	str	r3, [sp, #4]
    if (Channel == DAC_CHANNEL_1)
 80052b4:	b992      	cbnz	r2, 80052dc <HAL_DACEx_SelfCalibrate+0x76>
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 80052b6:	9b01      	ldr	r3, [sp, #4]
 80052b8:	3308      	adds	r3, #8
 80052ba:	9301      	str	r3, [sp, #4]
    *(__IO uint32_t *) tmp = 0x0800UL;
 80052bc:	9b01      	ldr	r3, [sp, #4]
 80052be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c2:	601a      	str	r2, [r3, #0]
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80052cc:	fa08 f807 	lsl.w	r8, r8, r7
 80052d0:	ea43 0308 	orr.w	r3, r3, r8
 80052d4:	6013      	str	r3, [r2, #0]
    delta = 8UL;
 80052d6:	2508      	movs	r5, #8
    trimmingvalue = 16UL;
 80052d8:	2610      	movs	r6, #16
    while (delta != 0UL)
 80052da:	e005      	b.n	80052e8 <HAL_DACEx_SelfCalibrate+0x82>
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80052dc:	9b01      	ldr	r3, [sp, #4]
 80052de:	3314      	adds	r3, #20
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	e7eb      	b.n	80052bc <HAL_DACEx_SelfCalibrate+0x56>
        trimmingvalue += delta;
 80052e4:	442e      	add	r6, r5
      delta >>= 1UL;
 80052e6:	086d      	lsrs	r5, r5, #1
    while (delta != 0UL)
 80052e8:	b19d      	cbz	r5, 8005312 <HAL_DACEx_SelfCalibrate+0xac>
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80052ea:	6821      	ldr	r1, [r4, #0]
 80052ec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80052ee:	221f      	movs	r2, #31
 80052f0:	40ba      	lsls	r2, r7
 80052f2:	ea23 0302 	bic.w	r3, r3, r2
 80052f6:	fa06 f207 	lsl.w	r2, r6, r7
 80052fa:	4313      	orrs	r3, r2
 80052fc:	638b      	str	r3, [r1, #56]	; 0x38
      HAL_Delay(1);
 80052fe:	2001      	movs	r0, #1
 8005300:	f7fb ff50 	bl	80011a4 <HAL_Delay>
      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	ea38 0303 	bics.w	r3, r8, r3
 800530c:	d1ea      	bne.n	80052e4 <HAL_DACEx_SelfCalibrate+0x7e>
        trimmingvalue -= delta;
 800530e:	1b76      	subs	r6, r6, r5
 8005310:	e7e9      	b.n	80052e6 <HAL_DACEx_SelfCalibrate+0x80>
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8005312:	6821      	ldr	r1, [r4, #0]
 8005314:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005316:	221f      	movs	r2, #31
 8005318:	40ba      	lsls	r2, r7
 800531a:	43d5      	mvns	r5, r2
 800531c:	ea23 0302 	bic.w	r3, r3, r2
 8005320:	fa06 f207 	lsl.w	r2, r6, r7
 8005324:	4313      	orrs	r3, r2
 8005326:	638b      	str	r3, [r1, #56]	; 0x38
    HAL_Delay(1U);
 8005328:	2001      	movs	r0, #1
 800532a:	f7fb ff3b 	bl	80011a4 <HAL_Delay>
    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	ea18 0f02 	tst.w	r8, r2
 8005336:	d106      	bne.n	8005346 <HAL_DACEx_SelfCalibrate+0xe0>
      trimmingvalue++;
 8005338:	3601      	adds	r6, #1
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800533a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533c:	4015      	ands	r5, r2
 800533e:	fa06 f707 	lsl.w	r7, r6, r7
 8005342:	432f      	orrs	r7, r5
 8005344:	639f      	str	r7, [r3, #56]	; 0x38
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6813      	ldr	r3, [r2, #0]
 800534a:	ea23 0308 	bic.w	r3, r3, r8
 800534e:	6013      	str	r3, [r2, #0]
    sConfig->DAC_TrimmingValue = trimmingvalue;
 8005350:	f8c9 6014 	str.w	r6, [r9, #20]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8005354:	2301      	movs	r3, #1
 8005356:	f8c9 3010 	str.w	r3, [r9, #16]
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800535e:	ea0a 0a03 	and.w	sl, sl, r3
 8005362:	ea4a 030b 	orr.w	r3, sl, fp
 8005366:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_UNLOCK(hdac);
 8005368:	2000      	movs	r0, #0
 800536a:	7160      	strb	r0, [r4, #5]
}
 800536c:	b003      	add	sp, #12
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_ERROR;
 8005372:	2001      	movs	r0, #1
}
 8005374:	4770      	bx	lr
    status = HAL_ERROR;
 8005376:	2001      	movs	r0, #1
 8005378:	e7f8      	b.n	800536c <HAL_DACEx_SelfCalibrate+0x106>
    __HAL_LOCK(hdac);
 800537a:	2002      	movs	r0, #2
 800537c:	e7f6      	b.n	800536c <HAL_DACEx_SelfCalibrate+0x106>

0800537e <HAL_DACEx_SetUserTrimming>:
  if (hdac == NULL)
 800537e:	b1e0      	cbz	r0, 80053ba <HAL_DACEx_SetUserTrimming+0x3c>
{
 8005380:	b530      	push	{r4, r5, lr}
 8005382:	4686      	mov	lr, r0
    __HAL_LOCK(hdac);
 8005384:	7940      	ldrb	r0, [r0, #5]
 8005386:	2801      	cmp	r0, #1
 8005388:	d019      	beq.n	80053be <HAL_DACEx_SetUserTrimming+0x40>
 800538a:	2401      	movs	r4, #1
 800538c:	f88e 4005 	strb.w	r4, [lr, #5]
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (NewTrimmingValue << (Channel & 0x10UL)));
 8005390:	f8de 5000 	ldr.w	r5, [lr]
 8005394:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005396:	f002 0210 	and.w	r2, r2, #16
 800539a:	f04f 0c1f 	mov.w	ip, #31
 800539e:	fa0c fc02 	lsl.w	ip, ip, r2
 80053a2:	ea20 000c 	bic.w	r0, r0, ip
 80053a6:	fa03 f202 	lsl.w	r2, r3, r2
 80053aa:	4302      	orrs	r2, r0
 80053ac:	63aa      	str	r2, [r5, #56]	; 0x38
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 80053ae:	610c      	str	r4, [r1, #16]
    sConfig->DAC_TrimmingValue = NewTrimmingValue;
 80053b0:	614b      	str	r3, [r1, #20]
    __HAL_UNLOCK(hdac);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f88e 0005 	strb.w	r0, [lr, #5]
}
 80053b8:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 80053ba:	2001      	movs	r0, #1
}
 80053bc:	4770      	bx	lr
    __HAL_LOCK(hdac);
 80053be:	2002      	movs	r0, #2
 80053c0:	e7fa      	b.n	80053b8 <HAL_DACEx_SetUserTrimming+0x3a>

080053c2 <HAL_DACEx_GetTrimOffset>:
  return ((hdac->Instance->CCR & (DAC_CCR_OTRIM1 << (Channel & 0x10UL))) >> (Channel & 0x10UL));
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053c6:	f001 0110 	and.w	r1, r1, #16
 80053ca:	231f      	movs	r3, #31
 80053cc:	408b      	lsls	r3, r1
 80053ce:	4018      	ands	r0, r3
}
 80053d0:	40c8      	lsrs	r0, r1
 80053d2:	4770      	bx	lr

080053d4 <HAL_DACEx_DualGetValue>:
  tmp |= hdac->Instance->DOR1;
 80053d4:	6803      	ldr	r3, [r0, #0]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp |= hdac->Instance->DOR2 << 16UL;
 80053d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 80053da:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80053de:	4770      	bx	lr

080053e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e0:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053e4:	6804      	ldr	r4, [r0, #0]
 80053e6:	4e66      	ldr	r6, [pc, #408]	; (8005580 <DMA_SetConfig+0x1a0>)
 80053e8:	4d66      	ldr	r5, [pc, #408]	; (8005584 <DMA_SetConfig+0x1a4>)
 80053ea:	42ac      	cmp	r4, r5
 80053ec:	bf18      	it	ne
 80053ee:	42b4      	cmpne	r4, r6
 80053f0:	d042      	beq.n	8005478 <DMA_SetConfig+0x98>
 80053f2:	3518      	adds	r5, #24
 80053f4:	42ac      	cmp	r4, r5
 80053f6:	d03f      	beq.n	8005478 <DMA_SetConfig+0x98>
 80053f8:	3518      	adds	r5, #24
 80053fa:	42ac      	cmp	r4, r5
 80053fc:	d03c      	beq.n	8005478 <DMA_SetConfig+0x98>
 80053fe:	3518      	adds	r5, #24
 8005400:	42ac      	cmp	r4, r5
 8005402:	d039      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005404:	3518      	adds	r5, #24
 8005406:	42ac      	cmp	r4, r5
 8005408:	d036      	beq.n	8005478 <DMA_SetConfig+0x98>
 800540a:	3518      	adds	r5, #24
 800540c:	42ac      	cmp	r4, r5
 800540e:	d033      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005410:	3518      	adds	r5, #24
 8005412:	42ac      	cmp	r4, r5
 8005414:	d030      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005416:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800541a:	42ac      	cmp	r4, r5
 800541c:	d02c      	beq.n	8005478 <DMA_SetConfig+0x98>
 800541e:	3518      	adds	r5, #24
 8005420:	42ac      	cmp	r4, r5
 8005422:	d029      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005424:	3518      	adds	r5, #24
 8005426:	42ac      	cmp	r4, r5
 8005428:	d026      	beq.n	8005478 <DMA_SetConfig+0x98>
 800542a:	3518      	adds	r5, #24
 800542c:	42ac      	cmp	r4, r5
 800542e:	d023      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005430:	3518      	adds	r5, #24
 8005432:	42ac      	cmp	r4, r5
 8005434:	d020      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005436:	3518      	adds	r5, #24
 8005438:	42ac      	cmp	r4, r5
 800543a:	d01d      	beq.n	8005478 <DMA_SetConfig+0x98>
 800543c:	3518      	adds	r5, #24
 800543e:	42ac      	cmp	r4, r5
 8005440:	d01a      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005442:	3518      	adds	r5, #24
 8005444:	42ac      	cmp	r4, r5
 8005446:	d017      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005448:	4d4f      	ldr	r5, [pc, #316]	; (8005588 <DMA_SetConfig+0x1a8>)
 800544a:	42ac      	cmp	r4, r5
 800544c:	d014      	beq.n	8005478 <DMA_SetConfig+0x98>
 800544e:	3514      	adds	r5, #20
 8005450:	42ac      	cmp	r4, r5
 8005452:	d011      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005454:	3514      	adds	r5, #20
 8005456:	42ac      	cmp	r4, r5
 8005458:	d00e      	beq.n	8005478 <DMA_SetConfig+0x98>
 800545a:	3514      	adds	r5, #20
 800545c:	42ac      	cmp	r4, r5
 800545e:	d00b      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005460:	3514      	adds	r5, #20
 8005462:	42ac      	cmp	r4, r5
 8005464:	d008      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005466:	3514      	adds	r5, #20
 8005468:	42ac      	cmp	r4, r5
 800546a:	d005      	beq.n	8005478 <DMA_SetConfig+0x98>
 800546c:	3514      	adds	r5, #20
 800546e:	42ac      	cmp	r4, r5
 8005470:	d002      	beq.n	8005478 <DMA_SetConfig+0x98>
 8005472:	3514      	adds	r5, #20
 8005474:	42ac      	cmp	r4, r5
 8005476:	d107      	bne.n	8005488 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005478:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800547a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800547c:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800547e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8005480:	b114      	cbz	r4, 8005488 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005482:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8005484:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8005486:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005488:	6804      	ldr	r4, [r0, #0]
 800548a:	4e3d      	ldr	r6, [pc, #244]	; (8005580 <DMA_SetConfig+0x1a0>)
 800548c:	4d3d      	ldr	r5, [pc, #244]	; (8005584 <DMA_SetConfig+0x1a4>)
 800548e:	42ac      	cmp	r4, r5
 8005490:	bf18      	it	ne
 8005492:	42b4      	cmpne	r4, r6
 8005494:	d052      	beq.n	800553c <DMA_SetConfig+0x15c>
 8005496:	3518      	adds	r5, #24
 8005498:	42ac      	cmp	r4, r5
 800549a:	d04f      	beq.n	800553c <DMA_SetConfig+0x15c>
 800549c:	3518      	adds	r5, #24
 800549e:	42ac      	cmp	r4, r5
 80054a0:	d04c      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054a2:	3518      	adds	r5, #24
 80054a4:	42ac      	cmp	r4, r5
 80054a6:	d049      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054a8:	3518      	adds	r5, #24
 80054aa:	42ac      	cmp	r4, r5
 80054ac:	d046      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054ae:	3518      	adds	r5, #24
 80054b0:	42ac      	cmp	r4, r5
 80054b2:	d043      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054b4:	3518      	adds	r5, #24
 80054b6:	42ac      	cmp	r4, r5
 80054b8:	d040      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054ba:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80054be:	42ac      	cmp	r4, r5
 80054c0:	d03c      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054c2:	3518      	adds	r5, #24
 80054c4:	42ac      	cmp	r4, r5
 80054c6:	d039      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054c8:	3518      	adds	r5, #24
 80054ca:	42ac      	cmp	r4, r5
 80054cc:	d036      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054ce:	3518      	adds	r5, #24
 80054d0:	42ac      	cmp	r4, r5
 80054d2:	d033      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054d4:	3518      	adds	r5, #24
 80054d6:	42ac      	cmp	r4, r5
 80054d8:	d030      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054da:	3518      	adds	r5, #24
 80054dc:	42ac      	cmp	r4, r5
 80054de:	d02d      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054e0:	3518      	adds	r5, #24
 80054e2:	42ac      	cmp	r4, r5
 80054e4:	d02a      	beq.n	800553c <DMA_SetConfig+0x15c>
 80054e6:	3518      	adds	r5, #24
 80054e8:	42ac      	cmp	r4, r5
 80054ea:	d027      	beq.n	800553c <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054ec:	4e26      	ldr	r6, [pc, #152]	; (8005588 <DMA_SetConfig+0x1a8>)
 80054ee:	4d27      	ldr	r5, [pc, #156]	; (800558c <DMA_SetConfig+0x1ac>)
 80054f0:	42ac      	cmp	r4, r5
 80054f2:	bf18      	it	ne
 80054f4:	42b4      	cmpne	r4, r6
 80054f6:	d011      	beq.n	800551c <DMA_SetConfig+0x13c>
 80054f8:	4d25      	ldr	r5, [pc, #148]	; (8005590 <DMA_SetConfig+0x1b0>)
 80054fa:	42ac      	cmp	r4, r5
 80054fc:	d00e      	beq.n	800551c <DMA_SetConfig+0x13c>
 80054fe:	3514      	adds	r5, #20
 8005500:	42ac      	cmp	r4, r5
 8005502:	d00b      	beq.n	800551c <DMA_SetConfig+0x13c>
 8005504:	3514      	adds	r5, #20
 8005506:	42ac      	cmp	r4, r5
 8005508:	d008      	beq.n	800551c <DMA_SetConfig+0x13c>
 800550a:	3514      	adds	r5, #20
 800550c:	42ac      	cmp	r4, r5
 800550e:	d005      	beq.n	800551c <DMA_SetConfig+0x13c>
 8005510:	3514      	adds	r5, #20
 8005512:	42ac      	cmp	r4, r5
 8005514:	d002      	beq.n	800551c <DMA_SetConfig+0x13c>
 8005516:	3514      	adds	r5, #20
 8005518:	42ac      	cmp	r4, r5
 800551a:	d124      	bne.n	8005566 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800551c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800551e:	f004 051f 	and.w	r5, r4, #31
 8005522:	2401      	movs	r4, #1
 8005524:	40ac      	lsls	r4, r5
 8005526:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005528:	6804      	ldr	r4, [r0, #0]
 800552a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552c:	6883      	ldr	r3, [r0, #8]
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d020      	beq.n	8005574 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005532:	6803      	ldr	r3, [r0, #0]
 8005534:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005536:	6803      	ldr	r3, [r0, #0]
 8005538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800553a:	e014      	b.n	8005566 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800553c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800553e:	f004 0c1f 	and.w	ip, r4, #31
 8005542:	243f      	movs	r4, #63	; 0x3f
 8005544:	fa04 f40c 	lsl.w	r4, r4, ip
 8005548:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800554a:	6805      	ldr	r5, [r0, #0]
 800554c:	682c      	ldr	r4, [r5, #0]
 800554e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005552:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005554:	6804      	ldr	r4, [r0, #0]
 8005556:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005558:	6883      	ldr	r3, [r0, #8]
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d005      	beq.n	800556a <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800555e:	6803      	ldr	r3, [r0, #0]
 8005560:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005562:	6803      	ldr	r3, [r0, #0]
 8005564:	60da      	str	r2, [r3, #12]
}
 8005566:	bcf0      	pop	{r4, r5, r6, r7}
 8005568:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800556a:	6803      	ldr	r3, [r0, #0]
 800556c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800556e:	6803      	ldr	r3, [r0, #0]
 8005570:	60d9      	str	r1, [r3, #12]
 8005572:	e7f8      	b.n	8005566 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005574:	6803      	ldr	r3, [r0, #0]
 8005576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005578:	6803      	ldr	r3, [r0, #0]
 800557a:	60d9      	str	r1, [r3, #12]
 800557c:	e7f3      	b.n	8005566 <DMA_SetConfig+0x186>
 800557e:	bf00      	nop
 8005580:	40020010 	.word	0x40020010
 8005584:	40020028 	.word	0x40020028
 8005588:	58025408 	.word	0x58025408
 800558c:	5802541c 	.word	0x5802541c
 8005590:	58025430 	.word	0x58025430

08005594 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005594:	6803      	ldr	r3, [r0, #0]
 8005596:	4927      	ldr	r1, [pc, #156]	; (8005634 <DMA_CalcBaseAndBitshift+0xa0>)
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <DMA_CalcBaseAndBitshift+0xa4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	bf18      	it	ne
 800559e:	428b      	cmpne	r3, r1
 80055a0:	d02f      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055a2:	3218      	adds	r2, #24
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d02c      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055a8:	3218      	adds	r2, #24
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d029      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055ae:	3218      	adds	r2, #24
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d026      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055b4:	3218      	adds	r2, #24
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d023      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055ba:	3218      	adds	r2, #24
 80055bc:	4293      	cmp	r3, r2
 80055be:	d020      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055c0:	3218      	adds	r2, #24
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01d      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055c6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d019      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055ce:	3218      	adds	r2, #24
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d016      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055d4:	3218      	adds	r2, #24
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055da:	3218      	adds	r2, #24
 80055dc:	4293      	cmp	r3, r2
 80055de:	d010      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055e0:	3218      	adds	r2, #24
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00d      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055e6:	3218      	adds	r2, #24
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00a      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055ec:	3218      	adds	r2, #24
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
 80055f2:	3218      	adds	r2, #24
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055fc:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80055fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005600:	4770      	bx	lr
{
 8005602:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005604:	b2d9      	uxtb	r1, r3
 8005606:	3910      	subs	r1, #16
 8005608:	4a0c      	ldr	r2, [pc, #48]	; (800563c <DMA_CalcBaseAndBitshift+0xa8>)
 800560a:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800560e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005612:	4c0b      	ldr	r4, [pc, #44]	; (8005640 <DMA_CalcBaseAndBitshift+0xac>)
 8005614:	5ca2      	ldrb	r2, [r4, r2]
 8005616:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8005618:	295f      	cmp	r1, #95	; 0x5f
 800561a:	d907      	bls.n	800562c <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <DMA_CalcBaseAndBitshift+0xb0>)
 800561e:	401a      	ands	r2, r3
 8005620:	3204      	adds	r2, #4
 8005622:	6582      	str	r2, [r0, #88]	; 0x58
}
 8005624:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562a:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800562c:	4a05      	ldr	r2, [pc, #20]	; (8005644 <DMA_CalcBaseAndBitshift+0xb0>)
 800562e:	401a      	ands	r2, r3
 8005630:	6582      	str	r2, [r0, #88]	; 0x58
 8005632:	e7f7      	b.n	8005624 <DMA_CalcBaseAndBitshift+0x90>
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	aaaaaaab 	.word	0xaaaaaaab
 8005640:	080117ac 	.word	0x080117ac
 8005644:	fffffc00 	.word	0xfffffc00

08005648 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005648:	6983      	ldr	r3, [r0, #24]
 800564a:	b99b      	cbnz	r3, 8005674 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800564c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800564e:	2b01      	cmp	r3, #1
 8005650:	d00a      	beq.n	8005668 <DMA_CheckFifoParam+0x20>
 8005652:	2b02      	cmp	r3, #2
 8005654:	d002      	beq.n	800565c <DMA_CheckFifoParam+0x14>
 8005656:	b10b      	cbz	r3, 800565c <DMA_CheckFifoParam+0x14>
 8005658:	2000      	movs	r0, #0
 800565a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800565c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800565e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005662:	d12a      	bne.n	80056ba <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2000      	movs	r0, #0
 8005666:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005668:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800566a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800566e:	d026      	beq.n	80056be <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2000      	movs	r0, #0
 8005672:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005678:	d00a      	beq.n	8005690 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800567a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800567c:	2b02      	cmp	r3, #2
 800567e:	d926      	bls.n	80056ce <DMA_CheckFifoParam+0x86>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d126      	bne.n	80056d2 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005684:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005686:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800568a:	d124      	bne.n	80056d6 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 800568c:	2000      	movs	r0, #0
 800568e:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8005690:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005692:	2b03      	cmp	r3, #3
 8005694:	d803      	bhi.n	800569e <DMA_CheckFifoParam+0x56>
 8005696:	e8df f003 	tbb	[pc, r3]
 800569a:	0414      	.short	0x0414
 800569c:	0a14      	.short	0x0a14
 800569e:	2000      	movs	r0, #0
 80056a0:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056a8:	d10d      	bne.n	80056c6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2000      	movs	r0, #0
 80056ac:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b4:	d009      	beq.n	80056ca <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2000      	movs	r0, #0
 80056b8:	4770      	bx	lr
          status = HAL_ERROR;
 80056ba:	2001      	movs	r0, #1
 80056bc:	4770      	bx	lr
          status = HAL_ERROR;
 80056be:	2001      	movs	r0, #1
 80056c0:	4770      	bx	lr
        status = HAL_ERROR;
 80056c2:	2001      	movs	r0, #1
 80056c4:	4770      	bx	lr
          status = HAL_ERROR;
 80056c6:	2001      	movs	r0, #1
 80056c8:	4770      	bx	lr
          status = HAL_ERROR;
 80056ca:	2001      	movs	r0, #1
 80056cc:	4770      	bx	lr
        status = HAL_ERROR;
 80056ce:	2001      	movs	r0, #1
 80056d0:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80056d2:	2000      	movs	r0, #0
 80056d4:	4770      	bx	lr
        {
          status = HAL_ERROR;
 80056d6:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 80056d8:	4770      	bx	lr

080056da <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80056da:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056dc:	4921      	ldr	r1, [pc, #132]	; (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x8a>)
 80056de:	4a22      	ldr	r2, [pc, #136]	; (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bf18      	it	ne
 80056e4:	428b      	cmpne	r3, r1
 80056e6:	d028      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80056e8:	3214      	adds	r2, #20
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d025      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80056ee:	3214      	adds	r2, #20
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d022      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80056f4:	3214      	adds	r2, #20
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 80056fa:	3214      	adds	r2, #20
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d01c      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8005700:	3214      	adds	r2, #20
 8005702:	4293      	cmp	r3, r2
 8005704:	d019      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8005706:	3214      	adds	r2, #20
 8005708:	4293      	cmp	r3, r2
 800570a:	d016      	beq.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800570c:	b2da      	uxtb	r2, r3
 800570e:	3a10      	subs	r2, #16
 8005710:	4916      	ldr	r1, [pc, #88]	; (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x92>)
 8005712:	fba1 1202 	umull	r1, r2, r1, r2
 8005716:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005718:	4915      	ldr	r1, [pc, #84]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x96>)
 800571a:	4419      	add	r1, r3
 800571c:	29a8      	cmp	r1, #168	; 0xa8
 800571e:	d91f      	bls.n	8005760 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x9a>)
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>)
 800572a:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800572c:	f002 021f 	and.w	r2, r2, #31
 8005730:	2301      	movs	r3, #1
 8005732:	fa03 f202 	lsl.w	r2, r3, r2
 8005736:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8005738:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800573a:	b2db      	uxtb	r3, r3
 800573c:	3b08      	subs	r3, #8
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005744:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0xa6>)
 8005746:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 800574a:	0092      	lsls	r2, r2, #2
 800574c:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800574e:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0xaa>)
 8005750:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005752:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8005756:	2201      	movs	r2, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	6683      	str	r3, [r0, #104]	; 0x68
 800575e:	4770      	bx	lr
      stream_number += 8U;
 8005760:	3208      	adds	r2, #8
 8005762:	e7dd      	b.n	8005720 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8005764:	58025408 	.word	0x58025408
 8005768:	5802541c 	.word	0x5802541c
 800576c:	aaaaaaab 	.word	0xaaaaaaab
 8005770:	bffdfbf0 	.word	0xbffdfbf0
 8005774:	10008200 	.word	0x10008200
 8005778:	40020880 	.word	0x40020880
 800577c:	cccccccd 	.word	0xcccccccd
 8005780:	16009600 	.word	0x16009600
 8005784:	58025880 	.word	0x58025880

08005788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005788:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800578a:	1e4a      	subs	r2, r1, #1
 800578c:	2a07      	cmp	r2, #7
 800578e:	d82c      	bhi.n	80057ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8005790:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005792:	6803      	ldr	r3, [r0, #0]
 8005794:	4d15      	ldr	r5, [pc, #84]	; (80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8005796:	4c16      	ldr	r4, [pc, #88]	; (80057f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8005798:	42a3      	cmp	r3, r4
 800579a:	bf18      	it	ne
 800579c:	42ab      	cmpne	r3, r5
 800579e:	d018      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057a0:	3414      	adds	r4, #20
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d015      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057a6:	3414      	adds	r4, #20
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d012      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057ac:	3414      	adds	r4, #20
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	d00f      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057b2:	3414      	adds	r4, #20
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d00c      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057b8:	3414      	adds	r4, #20
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	d009      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80057be:	3414      	adds	r4, #20
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d006      	beq.n	80057d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80057c6:	440b      	add	r3, r1
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 80057ce:	6703      	str	r3, [r0, #112]	; 0x70
 80057d0:	e005      	b.n	80057de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 80057d4:	440b      	add	r3, r1
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 80057dc:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80057de:	2301      	movs	r3, #1
 80057e0:	fa03 f202 	lsl.w	r2, r3, r2
 80057e4:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 80057e6:	bc30      	pop	{r4, r5}
 80057e8:	4770      	bx	lr
 80057ea:	4770      	bx	lr
 80057ec:	58025408 	.word	0x58025408
 80057f0:	5802541c 	.word	0x5802541c
 80057f4:	1000823f 	.word	0x1000823f
 80057f8:	40020940 	.word	0x40020940
 80057fc:	1600963f 	.word	0x1600963f
 8005800:	58025940 	.word	0x58025940

08005804 <HAL_DMA_Init>:
{
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005808:	f7fb fca4 	bl	8001154 <HAL_GetTick>
  if(hdma == NULL)
 800580c:	2c00      	cmp	r4, #0
 800580e:	f000 81b6 	beq.w	8005b7e <HAL_DMA_Init+0x37a>
 8005812:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4953      	ldr	r1, [pc, #332]	; (8005964 <HAL_DMA_Init+0x160>)
 8005818:	4a53      	ldr	r2, [pc, #332]	; (8005968 <HAL_DMA_Init+0x164>)
 800581a:	4293      	cmp	r3, r2
 800581c:	bf18      	it	ne
 800581e:	428b      	cmpne	r3, r1
 8005820:	bf0c      	ite	eq
 8005822:	2201      	moveq	r2, #1
 8005824:	2200      	movne	r2, #0
 8005826:	d050      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005828:	3130      	adds	r1, #48	; 0x30
 800582a:	428b      	cmp	r3, r1
 800582c:	d04d      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 800582e:	3118      	adds	r1, #24
 8005830:	428b      	cmp	r3, r1
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005834:	3118      	adds	r1, #24
 8005836:	428b      	cmp	r3, r1
 8005838:	d047      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 800583a:	3118      	adds	r1, #24
 800583c:	428b      	cmp	r3, r1
 800583e:	d044      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005840:	3118      	adds	r1, #24
 8005842:	428b      	cmp	r3, r1
 8005844:	d041      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005846:	3118      	adds	r1, #24
 8005848:	428b      	cmp	r3, r1
 800584a:	d03e      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 800584c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005850:	428b      	cmp	r3, r1
 8005852:	d03a      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005854:	3118      	adds	r1, #24
 8005856:	428b      	cmp	r3, r1
 8005858:	d037      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 800585a:	3118      	adds	r1, #24
 800585c:	428b      	cmp	r3, r1
 800585e:	d034      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005860:	3118      	adds	r1, #24
 8005862:	428b      	cmp	r3, r1
 8005864:	d031      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005866:	3118      	adds	r1, #24
 8005868:	428b      	cmp	r3, r1
 800586a:	d02e      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 800586c:	3118      	adds	r1, #24
 800586e:	428b      	cmp	r3, r1
 8005870:	d02b      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005872:	3118      	adds	r1, #24
 8005874:	428b      	cmp	r3, r1
 8005876:	d028      	beq.n	80058ca <HAL_DMA_Init+0xc6>
 8005878:	3118      	adds	r1, #24
 800587a:	428b      	cmp	r3, r1
 800587c:	d025      	beq.n	80058ca <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800587e:	493b      	ldr	r1, [pc, #236]	; (800596c <HAL_DMA_Init+0x168>)
 8005880:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <HAL_DMA_Init+0x16c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	bf18      	it	ne
 8005886:	428b      	cmpne	r3, r1
 8005888:	f000 8131 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <HAL_DMA_Init+0x170>)
 800588e:	4293      	cmp	r3, r2
 8005890:	f000 812d 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 8005894:	3214      	adds	r2, #20
 8005896:	4293      	cmp	r3, r2
 8005898:	f000 8129 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 800589c:	3214      	adds	r2, #20
 800589e:	4293      	cmp	r3, r2
 80058a0:	f000 8125 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 80058a4:	3214      	adds	r2, #20
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f000 8121 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 80058ac:	3214      	adds	r2, #20
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f000 811d 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
 80058b4:	3214      	adds	r2, #20
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f000 8119 	beq.w	8005aee <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058c0:	2303      	movs	r3, #3
 80058c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80058c6:	2001      	movs	r0, #1
 80058c8:	e04a      	b.n	8005960 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80058ca:	2102      	movs	r1, #2
 80058cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80058d6:	bb7a      	cbnz	r2, 8005938 <HAL_DMA_Init+0x134>
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <HAL_DMA_Init+0x174>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d02c      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058de:	3218      	adds	r2, #24
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d029      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058e4:	3218      	adds	r2, #24
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d026      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058ea:	3218      	adds	r2, #24
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d023      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058f0:	3218      	adds	r2, #24
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d020      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058f6:	3218      	adds	r2, #24
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d01d      	beq.n	8005938 <HAL_DMA_Init+0x134>
 80058fc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005900:	4293      	cmp	r3, r2
 8005902:	d019      	beq.n	8005938 <HAL_DMA_Init+0x134>
 8005904:	3218      	adds	r2, #24
 8005906:	4293      	cmp	r3, r2
 8005908:	d016      	beq.n	8005938 <HAL_DMA_Init+0x134>
 800590a:	3218      	adds	r2, #24
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <HAL_DMA_Init+0x134>
 8005910:	3218      	adds	r2, #24
 8005912:	4293      	cmp	r3, r2
 8005914:	d010      	beq.n	8005938 <HAL_DMA_Init+0x134>
 8005916:	3218      	adds	r2, #24
 8005918:	4293      	cmp	r3, r2
 800591a:	d00d      	beq.n	8005938 <HAL_DMA_Init+0x134>
 800591c:	3218      	adds	r2, #24
 800591e:	4293      	cmp	r3, r2
 8005920:	d00a      	beq.n	8005938 <HAL_DMA_Init+0x134>
 8005922:	3218      	adds	r2, #24
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <HAL_DMA_Init+0x134>
 8005928:	3218      	adds	r2, #24
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_DMA_Init+0x134>
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e003      	b.n	8005940 <HAL_DMA_Init+0x13c>
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	f012 0f01 	tst.w	r2, #1
 8005948:	d018      	beq.n	800597c <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800594a:	f7fb fc03 	bl	8001154 <HAL_GetTick>
 800594e:	1b43      	subs	r3, r0, r5
 8005950:	2b05      	cmp	r3, #5
 8005952:	d9f5      	bls.n	8005940 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005954:	2320      	movs	r3, #32
 8005956:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8005958:	2303      	movs	r3, #3
 800595a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 800595e:	2001      	movs	r0, #1
}
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	bf00      	nop
 8005964:	40020010 	.word	0x40020010
 8005968:	40020028 	.word	0x40020028
 800596c:	58025408 	.word	0x58025408
 8005970:	5802541c 	.word	0x5802541c
 8005974:	58025430 	.word	0x58025430
 8005978:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800597c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800597e:	4881      	ldr	r0, [pc, #516]	; (8005b84 <HAL_DMA_Init+0x380>)
 8005980:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8005982:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005984:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8005986:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800598c:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598e:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005990:	69a1      	ldr	r1, [r4, #24]
 8005992:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8005994:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005996:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8005998:	6a21      	ldr	r1, [r4, #32]
 800599a:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 800599c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059a0:	2904      	cmp	r1, #4
 80059a2:	f000 8099 	beq.w	8005ad8 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80059a6:	4978      	ldr	r1, [pc, #480]	; (8005b88 <HAL_DMA_Init+0x384>)
 80059a8:	6808      	ldr	r0, [r1, #0]
 80059aa:	4978      	ldr	r1, [pc, #480]	; (8005b8c <HAL_DMA_Init+0x388>)
 80059ac:	4001      	ands	r1, r0
 80059ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80059b2:	d311      	bcc.n	80059d8 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059b4:	6861      	ldr	r1, [r4, #4]
 80059b6:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80059ba:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80059be:	2803      	cmp	r0, #3
 80059c0:	bf88      	it	hi
 80059c2:	2d05      	cmphi	r5, #5
 80059c4:	d906      	bls.n	80059d4 <HAL_DMA_Init+0x1d0>
 80059c6:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80059ca:	2801      	cmp	r0, #1
 80059cc:	d902      	bls.n	80059d4 <HAL_DMA_Init+0x1d0>
 80059ce:	394f      	subs	r1, #79	; 0x4f
 80059d0:	2903      	cmp	r1, #3
 80059d2:	d801      	bhi.n	80059d8 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 80059d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059d8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80059da:	6826      	ldr	r6, [r4, #0]
 80059dc:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059de:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80059e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e4:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d108      	bne.n	80059fc <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 80059ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059ec:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059f0:	b123      	cbz	r3, 80059fc <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff fe28 	bl	8005648 <DMA_CheckFifoParam>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d172      	bne.n	8005ae2 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80059fc:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff fdc8 	bl	8005594 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a06:	f003 021f 	and.w	r2, r3, #31
 8005a0a:	233f      	movs	r3, #63	; 0x3f
 8005a0c:	4093      	lsls	r3, r2
 8005a0e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	495f      	ldr	r1, [pc, #380]	; (8005b90 <HAL_DMA_Init+0x38c>)
 8005a14:	4a5f      	ldr	r2, [pc, #380]	; (8005b94 <HAL_DMA_Init+0x390>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bf18      	it	ne
 8005a1a:	428b      	cmpne	r3, r1
 8005a1c:	d042      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a1e:	3218      	adds	r2, #24
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d03f      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a24:	3218      	adds	r2, #24
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03c      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a2a:	3218      	adds	r2, #24
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d039      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a30:	3218      	adds	r2, #24
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d036      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a36:	3218      	adds	r2, #24
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d033      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a3c:	3218      	adds	r2, #24
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d030      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a42:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02c      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a4a:	3218      	adds	r2, #24
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d029      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a50:	3218      	adds	r2, #24
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d026      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a56:	3218      	adds	r2, #24
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d023      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a5c:	3218      	adds	r2, #24
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d020      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a62:	3218      	adds	r2, #24
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01d      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a68:	3218      	adds	r2, #24
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01a      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a6e:	3218      	adds	r2, #24
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d017      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a74:	4a48      	ldr	r2, [pc, #288]	; (8005b98 <HAL_DMA_Init+0x394>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d014      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a7a:	3214      	adds	r2, #20
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d011      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a80:	3214      	adds	r2, #20
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a86:	3214      	adds	r2, #20
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a8c:	3214      	adds	r2, #20
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d008      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a92:	3214      	adds	r2, #20
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d005      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a98:	3214      	adds	r2, #20
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d002      	beq.n	8005aa4 <HAL_DMA_Init+0x2a0>
 8005a9e:	3214      	adds	r2, #20
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d113      	bne.n	8005acc <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7ff fe18 	bl	80056da <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d059      	beq.n	8005b64 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ab0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ab2:	7922      	ldrb	r2, [r4, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ab8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005aba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	d952      	bls.n	8005b6a <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ac8:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005aca:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005acc:	2000      	movs	r0, #0
 8005ace:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005ad6:	e743      	b.n	8005960 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ad8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ada:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005adc:	4301      	orrs	r1, r0
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	e761      	b.n	80059a6 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8005aec:	e738      	b.n	8005960 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aee:	2202      	movs	r2, #2
 8005af0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005af4:	2200      	movs	r2, #0
 8005af6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005afa:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005afc:	4927      	ldr	r1, [pc, #156]	; (8005b9c <HAL_DMA_Init+0x398>)
 8005afe:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b00:	68a2      	ldr	r2, [r4, #8]
 8005b02:	2a40      	cmp	r2, #64	; 0x40
 8005b04:	d02c      	beq.n	8005b60 <HAL_DMA_Init+0x35c>
 8005b06:	2a80      	cmp	r2, #128	; 0x80
 8005b08:	d027      	beq.n	8005b5a <HAL_DMA_Init+0x356>
 8005b0a:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b0c:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b0e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b12:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b14:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b18:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b1a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b1e:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b20:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b24:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b26:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b2a:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b2c:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b30:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b32:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <HAL_DMA_Init+0x39c>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <HAL_DMA_Init+0x3a0>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f7ff fd24 	bl	8005594 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b4e:	f002 011f 	and.w	r1, r2, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	408a      	lsls	r2, r1
 8005b56:	6042      	str	r2, [r0, #4]
 8005b58:	e75a      	b.n	8005a10 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b5e:	e7d5      	b.n	8005b0c <HAL_DMA_Init+0x308>
 8005b60:	2210      	movs	r2, #16
 8005b62:	e7d3      	b.n	8005b0c <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b64:	2300      	movs	r3, #0
 8005b66:	6063      	str	r3, [r4, #4]
 8005b68:	e7a2      	b.n	8005ab0 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff fe0c 	bl	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b78:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	e7a6      	b.n	8005acc <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e6ee      	b.n	8005960 <HAL_DMA_Init+0x15c>
 8005b82:	bf00      	nop
 8005b84:	fe10803f 	.word	0xfe10803f
 8005b88:	5c001000 	.word	0x5c001000
 8005b8c:	ffff0000 	.word	0xffff0000
 8005b90:	40020010 	.word	0x40020010
 8005b94:	40020028 	.word	0x40020028
 8005b98:	58025408 	.word	0x58025408
 8005b9c:	fffe000f 	.word	0xfffe000f
 8005ba0:	a7fdabf8 	.word	0xa7fdabf8
 8005ba4:	cccccccd 	.word	0xcccccccd

08005ba8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f000 80db 	beq.w	8005d64 <HAL_DMA_DeInit+0x1bc>
{
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8005bb2:	6803      	ldr	r3, [r0, #0]
 8005bb4:	496c      	ldr	r1, [pc, #432]	; (8005d68 <HAL_DMA_DeInit+0x1c0>)
 8005bb6:	4a6d      	ldr	r2, [pc, #436]	; (8005d6c <HAL_DMA_DeInit+0x1c4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bf18      	it	ne
 8005bbc:	428b      	cmpne	r3, r1
 8005bbe:	d02f      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bc0:	3218      	adds	r2, #24
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02c      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bc6:	3218      	adds	r2, #24
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d029      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bcc:	3218      	adds	r2, #24
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d026      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bd2:	3218      	adds	r2, #24
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d023      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bd8:	3218      	adds	r2, #24
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d020      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bde:	3218      	adds	r2, #24
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005be4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d019      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bec:	3218      	adds	r2, #24
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d016      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bf2:	3218      	adds	r2, #24
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bf8:	3218      	adds	r2, #24
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d010      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005bfe:	3218      	adds	r2, #24
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00d      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005c04:	3218      	adds	r2, #24
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00a      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005c0a:	3218      	adds	r2, #24
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005c10:	3218      	adds	r2, #24
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_DeInit+0x78>
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e003      	b.n	8005c28 <HAL_DMA_DeInit+0x80>
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	494f      	ldr	r1, [pc, #316]	; (8005d68 <HAL_DMA_DeInit+0x1c0>)
 8005c2c:	4a4f      	ldr	r2, [pc, #316]	; (8005d6c <HAL_DMA_DeInit+0x1c4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bf18      	it	ne
 8005c32:	428b      	cmpne	r3, r1
 8005c34:	d044      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c36:	3218      	adds	r2, #24
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d041      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c3c:	3218      	adds	r2, #24
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d03e      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c42:	3218      	adds	r2, #24
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d03b      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c48:	3218      	adds	r2, #24
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d038      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c4e:	3218      	adds	r2, #24
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d035      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c54:	3218      	adds	r2, #24
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d032      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c5a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02e      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c62:	3218      	adds	r2, #24
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02b      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c68:	3218      	adds	r2, #24
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d028      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c6e:	3218      	adds	r2, #24
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d025      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c74:	3218      	adds	r2, #24
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c7a:	3218      	adds	r2, #24
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01f      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c80:	3218      	adds	r2, #24
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01c      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
 8005c86:	3218      	adds	r2, #24
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d019      	beq.n	8005cc0 <HAL_DMA_DeInit+0x118>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c8c:	4938      	ldr	r1, [pc, #224]	; (8005d70 <HAL_DMA_DeInit+0x1c8>)
 8005c8e:	4a39      	ldr	r2, [pc, #228]	; (8005d74 <HAL_DMA_DeInit+0x1cc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	bf18      	it	ne
 8005c94:	428b      	cmpne	r3, r1
 8005c96:	d047      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005c98:	4a37      	ldr	r2, [pc, #220]	; (8005d78 <HAL_DMA_DeInit+0x1d0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d044      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005c9e:	3214      	adds	r2, #20
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d041      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005ca4:	3214      	adds	r2, #20
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d03e      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005caa:	3214      	adds	r2, #20
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d03b      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005cb0:	3214      	adds	r2, #20
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d038      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
 8005cb6:	3214      	adds	r2, #20
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d035      	beq.n	8005d28 <HAL_DMA_DeInit+0x180>
    return HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e032      	b.n	8005d26 <HAL_DMA_DeInit+0x17e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	2221      	movs	r2, #33	; 0x21
 8005cd8:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff fc5a 	bl	8005594 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ce0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ce2:	f003 021f 	and.w	r2, r3, #31
 8005ce6:	233f      	movs	r3, #63	; 0x3f
 8005ce8:	4093      	lsls	r3, r2
 8005cea:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff fcf4 	bl	80056da <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 8005cf2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cf4:	b123      	cbz	r3, 8005d00 <HAL_DMA_DeInit+0x158>
      hdma->DMAmuxChannel->CCR = 0U;
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005cfe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	2b07      	cmp	r3, #7
 8005d06:	d923      	bls.n	8005d50 <HAL_DMA_DeInit+0x1a8>
    hdma->DMAmuxRequestGen = 0U;
 8005d08:	2000      	movs	r0, #0
 8005d0a:	66e0      	str	r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d0c:	6720      	str	r0, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d0e:	6760      	str	r0, [r4, #116]	; 0x74
  hdma->XferCpltCallback       = NULL;
 8005d10:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005d12:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005d14:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005d16:	64a0      	str	r0, [r4, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005d18:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005d1a:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d1c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8005d1e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005d22:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005d26:	bd10      	pop	{r4, pc}
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff fc29 	bl	8005594 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4093      	lsls	r3, r2
 8005d4c:	6043      	str	r3, [r0, #4]
 8005d4e:	e7cd      	b.n	8005cec <HAL_DMA_DeInit+0x144>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff fd19 	bl	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d56:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005d5e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	e7d1      	b.n	8005d08 <HAL_DMA_DeInit+0x160>
    return HAL_ERROR;
 8005d64:	2001      	movs	r0, #1
}
 8005d66:	4770      	bx	lr
 8005d68:	40020010 	.word	0x40020010
 8005d6c:	40020028 	.word	0x40020028
 8005d70:	58025408 	.word	0x58025408
 8005d74:	5802541c 	.word	0x5802541c
 8005d78:	58025430 	.word	0x58025430

08005d7c <HAL_DMA_Start>:
  if(hdma == NULL)
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f000 8098 	beq.w	8005eb2 <HAL_DMA_Start+0x136>
{
 8005d82:	b570      	push	{r4, r5, r6, lr}
 8005d84:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005d86:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005d8a:	2801      	cmp	r0, #1
 8005d8c:	f000 8093 	beq.w	8005eb6 <HAL_DMA_Start+0x13a>
 8005d90:	2001      	movs	r0, #1
 8005d92:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d96:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005d9a:	b2c0      	uxtb	r0, r0
 8005d9c:	2801      	cmp	r0, #1
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMA_Start+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005da4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005da6:	2300      	movs	r3, #0
 8005da8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8005dac:	2001      	movs	r0, #1
}
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005db0:	2002      	movs	r0, #2
 8005db2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005db6:	2000      	movs	r0, #0
 8005db8:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	4e3f      	ldr	r6, [pc, #252]	; (8005ebc <HAL_DMA_Start+0x140>)
 8005dbe:	4d40      	ldr	r5, [pc, #256]	; (8005ec0 <HAL_DMA_Start+0x144>)
 8005dc0:	42a8      	cmp	r0, r5
 8005dc2:	bf18      	it	ne
 8005dc4:	42b0      	cmpne	r0, r6
 8005dc6:	d02f      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dc8:	3518      	adds	r5, #24
 8005dca:	42a8      	cmp	r0, r5
 8005dcc:	d02c      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dce:	3518      	adds	r5, #24
 8005dd0:	42a8      	cmp	r0, r5
 8005dd2:	d029      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dd4:	3518      	adds	r5, #24
 8005dd6:	42a8      	cmp	r0, r5
 8005dd8:	d026      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dda:	3518      	adds	r5, #24
 8005ddc:	42a8      	cmp	r0, r5
 8005dde:	d023      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005de0:	3518      	adds	r5, #24
 8005de2:	42a8      	cmp	r0, r5
 8005de4:	d020      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005de6:	3518      	adds	r5, #24
 8005de8:	42a8      	cmp	r0, r5
 8005dea:	d01d      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dec:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8005df0:	42a8      	cmp	r0, r5
 8005df2:	d019      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005df4:	3518      	adds	r5, #24
 8005df6:	42a8      	cmp	r0, r5
 8005df8:	d016      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005dfa:	3518      	adds	r5, #24
 8005dfc:	42a8      	cmp	r0, r5
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e00:	3518      	adds	r5, #24
 8005e02:	42a8      	cmp	r0, r5
 8005e04:	d010      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e06:	3518      	adds	r5, #24
 8005e08:	42a8      	cmp	r0, r5
 8005e0a:	d00d      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e0c:	3518      	adds	r5, #24
 8005e0e:	42a8      	cmp	r0, r5
 8005e10:	d00a      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e12:	3518      	adds	r5, #24
 8005e14:	42a8      	cmp	r0, r5
 8005e16:	d007      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e18:	3518      	adds	r5, #24
 8005e1a:	42a8      	cmp	r0, r5
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_Start+0xac>
 8005e1e:	6805      	ldr	r5, [r0, #0]
 8005e20:	f025 0501 	bic.w	r5, r5, #1
 8005e24:	6005      	str	r5, [r0, #0]
 8005e26:	e003      	b.n	8005e30 <HAL_DMA_Start+0xb4>
 8005e28:	6805      	ldr	r5, [r0, #0]
 8005e2a:	f025 0501 	bic.w	r5, r5, #1
 8005e2e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fad5 	bl	80053e0 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	4920      	ldr	r1, [pc, #128]	; (8005ebc <HAL_DMA_Start+0x140>)
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_DMA_Start+0x144>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf18      	it	ne
 8005e40:	428b      	cmpne	r3, r1
 8005e42:	d030      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e44:	3218      	adds	r2, #24
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02d      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e4a:	3218      	adds	r2, #24
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d02a      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e50:	3218      	adds	r2, #24
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d027      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e56:	3218      	adds	r2, #24
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d024      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e5c:	3218      	adds	r2, #24
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d021      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e62:	3218      	adds	r2, #24
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d01e      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e68:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01a      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e70:	3218      	adds	r2, #24
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e76:	3218      	adds	r2, #24
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d014      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e7c:	3218      	adds	r2, #24
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d011      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e82:	3218      	adds	r2, #24
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e88:	3218      	adds	r2, #24
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e8e:	3218      	adds	r2, #24
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d008      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e94:	3218      	adds	r2, #24
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d005      	beq.n	8005ea6 <HAL_DMA_Start+0x12a>
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e783      	b.n	8005dae <HAL_DMA_Start+0x32>
    __HAL_DMA_ENABLE(hdma);
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005eb0:	e77d      	b.n	8005dae <HAL_DMA_Start+0x32>
    return HAL_ERROR;
 8005eb2:	2001      	movs	r0, #1
}
 8005eb4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005eb6:	2002      	movs	r0, #2
 8005eb8:	e779      	b.n	8005dae <HAL_DMA_Start+0x32>
 8005eba:	bf00      	nop
 8005ebc:	40020010 	.word	0x40020010
 8005ec0:	40020028 	.word	0x40020028

08005ec4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f000 813e 	beq.w	8006146 <HAL_DMA_Start_IT+0x282>
{
 8005eca:	b570      	push	{r4, r5, r6, lr}
 8005ecc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005ece:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005ed2:	2801      	cmp	r0, #1
 8005ed4:	f000 8139 	beq.w	800614a <HAL_DMA_Start_IT+0x286>
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ede:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005ee2:	b2c0      	uxtb	r0, r0
 8005ee4:	2801      	cmp	r0, #1
 8005ee6:	d007      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eec:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8005ef4:	2001      	movs	r0, #1
}
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ef8:	2002      	movs	r0, #2
 8005efa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005efe:	2000      	movs	r0, #0
 8005f00:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	4e92      	ldr	r6, [pc, #584]	; (8006150 <HAL_DMA_Start_IT+0x28c>)
 8005f06:	4d93      	ldr	r5, [pc, #588]	; (8006154 <HAL_DMA_Start_IT+0x290>)
 8005f08:	42a8      	cmp	r0, r5
 8005f0a:	bf18      	it	ne
 8005f0c:	42b0      	cmpne	r0, r6
 8005f0e:	d02f      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f10:	3518      	adds	r5, #24
 8005f12:	42a8      	cmp	r0, r5
 8005f14:	d02c      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f16:	3518      	adds	r5, #24
 8005f18:	42a8      	cmp	r0, r5
 8005f1a:	d029      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f1c:	3518      	adds	r5, #24
 8005f1e:	42a8      	cmp	r0, r5
 8005f20:	d026      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f22:	3518      	adds	r5, #24
 8005f24:	42a8      	cmp	r0, r5
 8005f26:	d023      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f28:	3518      	adds	r5, #24
 8005f2a:	42a8      	cmp	r0, r5
 8005f2c:	d020      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f2e:	3518      	adds	r5, #24
 8005f30:	42a8      	cmp	r0, r5
 8005f32:	d01d      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f34:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8005f38:	42a8      	cmp	r0, r5
 8005f3a:	d019      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f3c:	3518      	adds	r5, #24
 8005f3e:	42a8      	cmp	r0, r5
 8005f40:	d016      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f42:	3518      	adds	r5, #24
 8005f44:	42a8      	cmp	r0, r5
 8005f46:	d013      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f48:	3518      	adds	r5, #24
 8005f4a:	42a8      	cmp	r0, r5
 8005f4c:	d010      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f4e:	3518      	adds	r5, #24
 8005f50:	42a8      	cmp	r0, r5
 8005f52:	d00d      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f54:	3518      	adds	r5, #24
 8005f56:	42a8      	cmp	r0, r5
 8005f58:	d00a      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f5a:	3518      	adds	r5, #24
 8005f5c:	42a8      	cmp	r0, r5
 8005f5e:	d007      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f60:	3518      	adds	r5, #24
 8005f62:	42a8      	cmp	r0, r5
 8005f64:	d004      	beq.n	8005f70 <HAL_DMA_Start_IT+0xac>
 8005f66:	6805      	ldr	r5, [r0, #0]
 8005f68:	f025 0501 	bic.w	r5, r5, #1
 8005f6c:	6005      	str	r5, [r0, #0]
 8005f6e:	e003      	b.n	8005f78 <HAL_DMA_Start_IT+0xb4>
 8005f70:	6805      	ldr	r5, [r0, #0]
 8005f72:	f025 0501 	bic.w	r5, r5, #1
 8005f76:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fa31 	bl	80053e0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	4973      	ldr	r1, [pc, #460]	; (8006150 <HAL_DMA_Start_IT+0x28c>)
 8005f82:	4a74      	ldr	r2, [pc, #464]	; (8006154 <HAL_DMA_Start_IT+0x290>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bf18      	it	ne
 8005f88:	428b      	cmpne	r3, r1
 8005f8a:	d038      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005f8c:	3218      	adds	r2, #24
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d035      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005f92:	3218      	adds	r2, #24
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d032      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005f98:	3218      	adds	r2, #24
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d02f      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005f9e:	3218      	adds	r2, #24
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d02c      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fa4:	3218      	adds	r2, #24
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d029      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005faa:	3218      	adds	r2, #24
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d026      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fb0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fb8:	3218      	adds	r2, #24
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01f      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fbe:	3218      	adds	r2, #24
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01c      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fc4:	3218      	adds	r2, #24
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d019      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fca:	3218      	adds	r2, #24
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d016      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fd0:	3218      	adds	r2, #24
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fd6:	3218      	adds	r2, #24
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d010      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
 8005fdc:	3218      	adds	r2, #24
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00d      	beq.n	8005ffe <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f022 020e 	bic.w	r2, r2, #14
 8005fe8:	f042 020a 	orr.w	r2, r2, #10
 8005fec:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff0:	b193      	cbz	r3, 8006018 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	6813      	ldr	r3, [r2, #0]
 8005ff6:	f043 0304 	orr.w	r3, r3, #4
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e00c      	b.n	8006018 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	f022 021e 	bic.w	r2, r2, #30
 8006004:	f042 0216 	orr.w	r2, r2, #22
 8006008:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800600a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800600c:	b123      	cbz	r3, 8006018 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6813      	ldr	r3, [r2, #0]
 8006012:	f043 0308 	orr.w	r3, r3, #8
 8006016:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	494d      	ldr	r1, [pc, #308]	; (8006150 <HAL_DMA_Start_IT+0x28c>)
 800601c:	4a4d      	ldr	r2, [pc, #308]	; (8006154 <HAL_DMA_Start_IT+0x290>)
 800601e:	4293      	cmp	r3, r2
 8006020:	bf18      	it	ne
 8006022:	428b      	cmpne	r3, r1
 8006024:	d042      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006026:	3218      	adds	r2, #24
 8006028:	4293      	cmp	r3, r2
 800602a:	d03f      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800602c:	3218      	adds	r2, #24
 800602e:	4293      	cmp	r3, r2
 8006030:	d03c      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006032:	3218      	adds	r2, #24
 8006034:	4293      	cmp	r3, r2
 8006036:	d039      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006038:	3218      	adds	r2, #24
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800603e:	3218      	adds	r2, #24
 8006040:	4293      	cmp	r3, r2
 8006042:	d033      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006044:	3218      	adds	r2, #24
 8006046:	4293      	cmp	r3, r2
 8006048:	d030      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800604a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006052:	3218      	adds	r2, #24
 8006054:	4293      	cmp	r3, r2
 8006056:	d029      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006058:	3218      	adds	r2, #24
 800605a:	4293      	cmp	r3, r2
 800605c:	d026      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800605e:	3218      	adds	r2, #24
 8006060:	4293      	cmp	r3, r2
 8006062:	d023      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006064:	3218      	adds	r2, #24
 8006066:	4293      	cmp	r3, r2
 8006068:	d020      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800606a:	3218      	adds	r2, #24
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006070:	3218      	adds	r2, #24
 8006072:	4293      	cmp	r3, r2
 8006074:	d01a      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006076:	3218      	adds	r2, #24
 8006078:	4293      	cmp	r3, r2
 800607a:	d017      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800607c:	4a36      	ldr	r2, [pc, #216]	; (8006158 <HAL_DMA_Start_IT+0x294>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d014      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006082:	3214      	adds	r2, #20
 8006084:	4293      	cmp	r3, r2
 8006086:	d011      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006088:	3214      	adds	r2, #20
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800608e:	3214      	adds	r2, #20
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 8006094:	3214      	adds	r2, #20
 8006096:	4293      	cmp	r3, r2
 8006098:	d008      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 800609a:	3214      	adds	r2, #20
 800609c:	4293      	cmp	r3, r2
 800609e:	d005      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 80060a0:	3214      	adds	r2, #20
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d002      	beq.n	80060ac <HAL_DMA_Start_IT+0x1e8>
 80060a6:	3214      	adds	r2, #20
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10e      	bne.n	80060ca <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80060b4:	d003      	beq.n	80060be <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060bc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80060be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80060c0:	b11b      	cbz	r3, 80060ca <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	4920      	ldr	r1, [pc, #128]	; (8006150 <HAL_DMA_Start_IT+0x28c>)
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_DMA_Start_IT+0x290>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bf18      	it	ne
 80060d4:	428b      	cmpne	r3, r1
 80060d6:	d030      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060d8:	3218      	adds	r2, #24
 80060da:	4293      	cmp	r3, r2
 80060dc:	d02d      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060de:	3218      	adds	r2, #24
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02a      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060e4:	3218      	adds	r2, #24
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d027      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060ea:	3218      	adds	r2, #24
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d024      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060f0:	3218      	adds	r2, #24
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d021      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060f6:	3218      	adds	r2, #24
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d01e      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 80060fc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006100:	4293      	cmp	r3, r2
 8006102:	d01a      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 8006104:	3218      	adds	r2, #24
 8006106:	4293      	cmp	r3, r2
 8006108:	d017      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 800610a:	3218      	adds	r2, #24
 800610c:	4293      	cmp	r3, r2
 800610e:	d014      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 8006110:	3218      	adds	r2, #24
 8006112:	4293      	cmp	r3, r2
 8006114:	d011      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 8006116:	3218      	adds	r2, #24
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 800611c:	3218      	adds	r2, #24
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 8006122:	3218      	adds	r2, #24
 8006124:	4293      	cmp	r3, r2
 8006126:	d008      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 8006128:	3218      	adds	r2, #24
 800612a:	4293      	cmp	r3, r2
 800612c:	d005      	beq.n	800613a <HAL_DMA_Start_IT+0x276>
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2000      	movs	r0, #0
 8006138:	e6dd      	b.n	8005ef6 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006142:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006144:	e6d7      	b.n	8005ef6 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8006146:	2001      	movs	r0, #1
}
 8006148:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800614a:	2002      	movs	r0, #2
 800614c:	e6d3      	b.n	8005ef6 <HAL_DMA_Start_IT+0x32>
 800614e:	bf00      	nop
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	58025408 	.word	0x58025408

0800615c <HAL_DMA_Abort>:
{
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006160:	f7fa fff8 	bl	8001154 <HAL_GetTick>
  if(hdma == NULL)
 8006164:	2c00      	cmp	r4, #0
 8006166:	f000 8191 	beq.w	800648c <HAL_DMA_Abort+0x330>
 800616a:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800616c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d006      	beq.n	8006184 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800617a:	2300      	movs	r3, #0
 800617c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006180:	2001      	movs	r0, #1
}
 8006182:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	498c      	ldr	r1, [pc, #560]	; (80063b8 <HAL_DMA_Abort+0x25c>)
 8006188:	4a8c      	ldr	r2, [pc, #560]	; (80063bc <HAL_DMA_Abort+0x260>)
 800618a:	4293      	cmp	r3, r2
 800618c:	bf18      	it	ne
 800618e:	428b      	cmpne	r3, r1
 8006190:	d030      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 8006192:	3218      	adds	r2, #24
 8006194:	4293      	cmp	r3, r2
 8006196:	d02d      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 8006198:	3218      	adds	r2, #24
 800619a:	4293      	cmp	r3, r2
 800619c:	d02a      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 800619e:	3218      	adds	r2, #24
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d027      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061a4:	3218      	adds	r2, #24
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d024      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061aa:	3218      	adds	r2, #24
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d021      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061b0:	3218      	adds	r2, #24
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01e      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061b6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01a      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061be:	3218      	adds	r2, #24
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d017      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061c4:	3218      	adds	r2, #24
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d014      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061ca:	3218      	adds	r2, #24
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d011      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061d0:	3218      	adds	r2, #24
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00e      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061d6:	3218      	adds	r2, #24
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061dc:	3218      	adds	r2, #24
 80061de:	4293      	cmp	r3, r2
 80061e0:	d008      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
 80061e2:	3218      	adds	r2, #24
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d005      	beq.n	80061f4 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80061f0:	6826      	ldr	r6, [r4, #0]
 80061f2:	e009      	b.n	8006208 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	f022 021e 	bic.w	r2, r2, #30
 80061fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	6953      	ldr	r3, [r2, #20]
 8006200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006204:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006206:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	496b      	ldr	r1, [pc, #428]	; (80063b8 <HAL_DMA_Abort+0x25c>)
 800620c:	4a6b      	ldr	r2, [pc, #428]	; (80063bc <HAL_DMA_Abort+0x260>)
 800620e:	4293      	cmp	r3, r2
 8006210:	bf18      	it	ne
 8006212:	428b      	cmpne	r3, r1
 8006214:	d042      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006216:	3218      	adds	r2, #24
 8006218:	4293      	cmp	r3, r2
 800621a:	d03f      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800621c:	3218      	adds	r2, #24
 800621e:	4293      	cmp	r3, r2
 8006220:	d03c      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006222:	3218      	adds	r2, #24
 8006224:	4293      	cmp	r3, r2
 8006226:	d039      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006228:	3218      	adds	r2, #24
 800622a:	4293      	cmp	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800622e:	3218      	adds	r2, #24
 8006230:	4293      	cmp	r3, r2
 8006232:	d033      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006234:	3218      	adds	r2, #24
 8006236:	4293      	cmp	r3, r2
 8006238:	d030      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800623a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800623e:	4293      	cmp	r3, r2
 8006240:	d02c      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006242:	3218      	adds	r2, #24
 8006244:	4293      	cmp	r3, r2
 8006246:	d029      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006248:	3218      	adds	r2, #24
 800624a:	4293      	cmp	r3, r2
 800624c:	d026      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800624e:	3218      	adds	r2, #24
 8006250:	4293      	cmp	r3, r2
 8006252:	d023      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006254:	3218      	adds	r2, #24
 8006256:	4293      	cmp	r3, r2
 8006258:	d020      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800625a:	3218      	adds	r2, #24
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006260:	3218      	adds	r2, #24
 8006262:	4293      	cmp	r3, r2
 8006264:	d01a      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006266:	3218      	adds	r2, #24
 8006268:	4293      	cmp	r3, r2
 800626a:	d017      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800626c:	4a54      	ldr	r2, [pc, #336]	; (80063c0 <HAL_DMA_Abort+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d014      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006272:	3214      	adds	r2, #20
 8006274:	4293      	cmp	r3, r2
 8006276:	d011      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006278:	3214      	adds	r2, #20
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800627e:	3214      	adds	r2, #20
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006284:	3214      	adds	r2, #20
 8006286:	4293      	cmp	r3, r2
 8006288:	d008      	beq.n	800629c <HAL_DMA_Abort+0x140>
 800628a:	3214      	adds	r2, #20
 800628c:	4293      	cmp	r3, r2
 800628e:	d005      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006290:	3214      	adds	r2, #20
 8006292:	4293      	cmp	r3, r2
 8006294:	d002      	beq.n	800629c <HAL_DMA_Abort+0x140>
 8006296:	3214      	adds	r2, #20
 8006298:	4293      	cmp	r3, r2
 800629a:	d104      	bne.n	80062a6 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800629c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	4943      	ldr	r1, [pc, #268]	; (80063b8 <HAL_DMA_Abort+0x25c>)
 80062aa:	4a44      	ldr	r2, [pc, #272]	; (80063bc <HAL_DMA_Abort+0x260>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bf18      	it	ne
 80062b0:	428b      	cmpne	r3, r1
 80062b2:	d02f      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062b4:	3218      	adds	r2, #24
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02c      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062ba:	3218      	adds	r2, #24
 80062bc:	4293      	cmp	r3, r2
 80062be:	d029      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062c0:	3218      	adds	r2, #24
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d026      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062c6:	3218      	adds	r2, #24
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d023      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062cc:	3218      	adds	r2, #24
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d020      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062d2:	3218      	adds	r2, #24
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01d      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062d8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80062dc:	4293      	cmp	r3, r2
 80062de:	d019      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062e0:	3218      	adds	r2, #24
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d016      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062e6:	3218      	adds	r2, #24
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062ec:	3218      	adds	r2, #24
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d010      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062f2:	3218      	adds	r2, #24
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00d      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062f8:	3218      	adds	r2, #24
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00a      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 80062fe:	3218      	adds	r2, #24
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 8006304:	3218      	adds	r2, #24
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_DMA_Abort+0x1b8>
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e003      	b.n	800631c <HAL_DMA_Abort+0x1c0>
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800631c:	6833      	ldr	r3, [r6, #0]
 800631e:	f013 0f01 	tst.w	r3, #1
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006324:	f7fa ff16 	bl	8001154 <HAL_GetTick>
 8006328:	1b43      	subs	r3, r0, r5
 800632a:	2b05      	cmp	r3, #5
 800632c:	d9f6      	bls.n	800631c <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800632e:	2320      	movs	r3, #32
 8006330:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8006332:	2303      	movs	r3, #3
 8006334:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8006338:	2300      	movs	r3, #0
 800633a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 800633e:	2001      	movs	r0, #1
 8006340:	e71f      	b.n	8006182 <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	491c      	ldr	r1, [pc, #112]	; (80063b8 <HAL_DMA_Abort+0x25c>)
 8006346:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <HAL_DMA_Abort+0x260>)
 8006348:	4293      	cmp	r3, r2
 800634a:	bf18      	it	ne
 800634c:	428b      	cmpne	r3, r1
 800634e:	d039      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006350:	3218      	adds	r2, #24
 8006352:	4293      	cmp	r3, r2
 8006354:	d036      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006356:	3218      	adds	r2, #24
 8006358:	4293      	cmp	r3, r2
 800635a:	d033      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 800635c:	3218      	adds	r2, #24
 800635e:	4293      	cmp	r3, r2
 8006360:	d030      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006362:	3218      	adds	r2, #24
 8006364:	4293      	cmp	r3, r2
 8006366:	d02d      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006368:	3218      	adds	r2, #24
 800636a:	4293      	cmp	r3, r2
 800636c:	d02a      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 800636e:	3218      	adds	r2, #24
 8006370:	4293      	cmp	r3, r2
 8006372:	d027      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006374:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006378:	4293      	cmp	r3, r2
 800637a:	d023      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 800637c:	3218      	adds	r2, #24
 800637e:	4293      	cmp	r3, r2
 8006380:	d020      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006382:	3218      	adds	r2, #24
 8006384:	4293      	cmp	r3, r2
 8006386:	d01d      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006388:	3218      	adds	r2, #24
 800638a:	4293      	cmp	r3, r2
 800638c:	d01a      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 800638e:	3218      	adds	r2, #24
 8006390:	4293      	cmp	r3, r2
 8006392:	d017      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 8006394:	3218      	adds	r2, #24
 8006396:	4293      	cmp	r3, r2
 8006398:	d014      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 800639a:	3218      	adds	r2, #24
 800639c:	4293      	cmp	r3, r2
 800639e:	d011      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
 80063a0:	3218      	adds	r2, #24
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063aa:	f003 021f 	and.w	r2, r3, #31
 80063ae:	2301      	movs	r3, #1
 80063b0:	4093      	lsls	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]
 80063b4:	e00d      	b.n	80063d2 <HAL_DMA_Abort+0x276>
 80063b6:	bf00      	nop
 80063b8:	40020010 	.word	0x40020010
 80063bc:	40020028 	.word	0x40020028
 80063c0:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c4:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063c8:	f003 021f 	and.w	r2, r3, #31
 80063cc:	233f      	movs	r3, #63	; 0x3f
 80063ce:	4093      	lsls	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	492e      	ldr	r1, [pc, #184]	; (8006490 <HAL_DMA_Abort+0x334>)
 80063d6:	4a2f      	ldr	r2, [pc, #188]	; (8006494 <HAL_DMA_Abort+0x338>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	bf18      	it	ne
 80063dc:	428b      	cmpne	r3, r1
 80063de:	d042      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063e0:	3218      	adds	r2, #24
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d03f      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063e6:	3218      	adds	r2, #24
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d03c      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063ec:	3218      	adds	r2, #24
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d039      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063f2:	3218      	adds	r2, #24
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d036      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063f8:	3218      	adds	r2, #24
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d033      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 80063fe:	3218      	adds	r2, #24
 8006400:	4293      	cmp	r3, r2
 8006402:	d030      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006404:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006408:	4293      	cmp	r3, r2
 800640a:	d02c      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800640c:	3218      	adds	r2, #24
 800640e:	4293      	cmp	r3, r2
 8006410:	d029      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006412:	3218      	adds	r2, #24
 8006414:	4293      	cmp	r3, r2
 8006416:	d026      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006418:	3218      	adds	r2, #24
 800641a:	4293      	cmp	r3, r2
 800641c:	d023      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800641e:	3218      	adds	r2, #24
 8006420:	4293      	cmp	r3, r2
 8006422:	d020      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006424:	3218      	adds	r2, #24
 8006426:	4293      	cmp	r3, r2
 8006428:	d01d      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800642a:	3218      	adds	r2, #24
 800642c:	4293      	cmp	r3, r2
 800642e:	d01a      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006430:	3218      	adds	r2, #24
 8006432:	4293      	cmp	r3, r2
 8006434:	d017      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006436:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_DMA_Abort+0x33c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d014      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800643c:	3214      	adds	r2, #20
 800643e:	4293      	cmp	r3, r2
 8006440:	d011      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006442:	3214      	adds	r2, #20
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006448:	3214      	adds	r2, #20
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800644e:	3214      	adds	r2, #20
 8006450:	4293      	cmp	r3, r2
 8006452:	d008      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006454:	3214      	adds	r2, #20
 8006456:	4293      	cmp	r3, r2
 8006458:	d005      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 800645a:	3214      	adds	r2, #20
 800645c:	4293      	cmp	r3, r2
 800645e:	d002      	beq.n	8006466 <HAL_DMA_Abort+0x30a>
 8006460:	3214      	adds	r2, #20
 8006462:	4293      	cmp	r3, r2
 8006464:	d10b      	bne.n	800647e <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006468:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800646a:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800646c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800646e:	b133      	cbz	r3, 800647e <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006476:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006478:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800647a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800647c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800647e:	2301      	movs	r3, #1
 8006480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8006484:	2000      	movs	r0, #0
 8006486:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 800648a:	e67a      	b.n	8006182 <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 800648c:	2001      	movs	r0, #1
 800648e:	e678      	b.n	8006182 <HAL_DMA_Abort+0x26>
 8006490:	40020010 	.word	0x40020010
 8006494:	40020028 	.word	0x40020028
 8006498:	58025408 	.word	0x58025408

0800649c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800649c:	2800      	cmp	r0, #0
 800649e:	f000 8129 	beq.w	80066f4 <HAL_DMA_Abort_IT+0x258>
{
 80064a2:	b508      	push	{r3, lr}
 80064a4:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064a6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d003      	beq.n	80064b8 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80064b4:	2001      	movs	r0, #1
}
 80064b6:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064b8:	6803      	ldr	r3, [r0, #0]
 80064ba:	4890      	ldr	r0, [pc, #576]	; (80066fc <HAL_DMA_Abort_IT+0x260>)
 80064bc:	4990      	ldr	r1, [pc, #576]	; (8006700 <HAL_DMA_Abort_IT+0x264>)
 80064be:	428b      	cmp	r3, r1
 80064c0:	bf18      	it	ne
 80064c2:	4283      	cmpne	r3, r0
 80064c4:	bf0c      	ite	eq
 80064c6:	2101      	moveq	r1, #1
 80064c8:	2100      	movne	r1, #0
 80064ca:	d066      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064cc:	3030      	adds	r0, #48	; 0x30
 80064ce:	4283      	cmp	r3, r0
 80064d0:	d063      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064d2:	3018      	adds	r0, #24
 80064d4:	4283      	cmp	r3, r0
 80064d6:	d060      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064d8:	3018      	adds	r0, #24
 80064da:	4283      	cmp	r3, r0
 80064dc:	d05d      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064de:	3018      	adds	r0, #24
 80064e0:	4283      	cmp	r3, r0
 80064e2:	d05a      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064e4:	3018      	adds	r0, #24
 80064e6:	4283      	cmp	r3, r0
 80064e8:	d057      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064ea:	3018      	adds	r0, #24
 80064ec:	4283      	cmp	r3, r0
 80064ee:	d054      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064f0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80064f4:	4283      	cmp	r3, r0
 80064f6:	d050      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064f8:	3018      	adds	r0, #24
 80064fa:	4283      	cmp	r3, r0
 80064fc:	d04d      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 80064fe:	3018      	adds	r0, #24
 8006500:	4283      	cmp	r3, r0
 8006502:	d04a      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 8006504:	3018      	adds	r0, #24
 8006506:	4283      	cmp	r3, r0
 8006508:	d047      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 800650a:	3018      	adds	r0, #24
 800650c:	4283      	cmp	r3, r0
 800650e:	d044      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 8006510:	3018      	adds	r0, #24
 8006512:	4283      	cmp	r3, r0
 8006514:	d041      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 8006516:	3018      	adds	r0, #24
 8006518:	4283      	cmp	r3, r0
 800651a:	d03e      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
 800651c:	3018      	adds	r0, #24
 800651e:	4283      	cmp	r3, r0
 8006520:	d03b      	beq.n	800659a <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	f021 010e 	bic.w	r1, r1, #14
 8006528:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8006530:	4973      	ldr	r1, [pc, #460]	; (8006700 <HAL_DMA_Abort_IT+0x264>)
 8006532:	428b      	cmp	r3, r1
 8006534:	bf18      	it	ne
 8006536:	4283      	cmpne	r3, r0
 8006538:	d06a      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800653a:	4972      	ldr	r1, [pc, #456]	; (8006704 <HAL_DMA_Abort_IT+0x268>)
 800653c:	428b      	cmp	r3, r1
 800653e:	d067      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006540:	3118      	adds	r1, #24
 8006542:	428b      	cmp	r3, r1
 8006544:	d064      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006546:	3118      	adds	r1, #24
 8006548:	428b      	cmp	r3, r1
 800654a:	d061      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800654c:	3118      	adds	r1, #24
 800654e:	428b      	cmp	r3, r1
 8006550:	d05e      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006552:	3118      	adds	r1, #24
 8006554:	428b      	cmp	r3, r1
 8006556:	d05b      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006558:	3118      	adds	r1, #24
 800655a:	428b      	cmp	r3, r1
 800655c:	d058      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800655e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006562:	428b      	cmp	r3, r1
 8006564:	d054      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006566:	3118      	adds	r1, #24
 8006568:	428b      	cmp	r3, r1
 800656a:	d051      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800656c:	3118      	adds	r1, #24
 800656e:	428b      	cmp	r3, r1
 8006570:	d04e      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006572:	3118      	adds	r1, #24
 8006574:	428b      	cmp	r3, r1
 8006576:	d04b      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006578:	3118      	adds	r1, #24
 800657a:	428b      	cmp	r3, r1
 800657c:	d048      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800657e:	3118      	adds	r1, #24
 8006580:	428b      	cmp	r3, r1
 8006582:	d045      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006584:	3118      	adds	r1, #24
 8006586:	428b      	cmp	r3, r1
 8006588:	d042      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 800658a:	3118      	adds	r1, #24
 800658c:	428b      	cmp	r3, r1
 800658e:	d03f      	beq.n	8006610 <HAL_DMA_Abort_IT+0x174>
 8006590:	6819      	ldr	r1, [r3, #0]
 8006592:	f021 0101 	bic.w	r1, r1, #1
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	e03e      	b.n	8006618 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 800659a:	2004      	movs	r0, #4
 800659c:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80065a0:	bb81      	cbnz	r1, 8006604 <HAL_DMA_Abort_IT+0x168>
 80065a2:	4a58      	ldr	r2, [pc, #352]	; (8006704 <HAL_DMA_Abort_IT+0x268>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d02d      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065a8:	3218      	adds	r2, #24
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d02a      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065ae:	3218      	adds	r2, #24
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d027      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065b4:	3218      	adds	r2, #24
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d024      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065ba:	3218      	adds	r2, #24
 80065bc:	4293      	cmp	r3, r2
 80065be:	d021      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065c0:	3218      	adds	r2, #24
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01e      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065c6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01a      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065ce:	3218      	adds	r2, #24
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d017      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065d4:	3218      	adds	r2, #24
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d014      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065da:	3218      	adds	r2, #24
 80065dc:	4293      	cmp	r3, r2
 80065de:	d011      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065e0:	3218      	adds	r2, #24
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065e6:	3218      	adds	r2, #24
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065ec:	3218      	adds	r2, #24
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d008      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065f2:	3218      	adds	r2, #24
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d005      	beq.n	8006604 <HAL_DMA_Abort_IT+0x168>
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006600:	2000      	movs	r0, #0
 8006602:	e758      	b.n	80064b6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800660c:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800660e:	e752      	b.n	80064b6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	f021 0101 	bic.w	r1, r1, #1
 8006616:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006618:	6813      	ldr	r3, [r2, #0]
 800661a:	4838      	ldr	r0, [pc, #224]	; (80066fc <HAL_DMA_Abort_IT+0x260>)
 800661c:	4938      	ldr	r1, [pc, #224]	; (8006700 <HAL_DMA_Abort_IT+0x264>)
 800661e:	428b      	cmp	r3, r1
 8006620:	bf18      	it	ne
 8006622:	4283      	cmpne	r3, r0
 8006624:	d042      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006626:	3118      	adds	r1, #24
 8006628:	428b      	cmp	r3, r1
 800662a:	d03f      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800662c:	3118      	adds	r1, #24
 800662e:	428b      	cmp	r3, r1
 8006630:	d03c      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006632:	3118      	adds	r1, #24
 8006634:	428b      	cmp	r3, r1
 8006636:	d039      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006638:	3118      	adds	r1, #24
 800663a:	428b      	cmp	r3, r1
 800663c:	d036      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800663e:	3118      	adds	r1, #24
 8006640:	428b      	cmp	r3, r1
 8006642:	d033      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006644:	3118      	adds	r1, #24
 8006646:	428b      	cmp	r3, r1
 8006648:	d030      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800664a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800664e:	428b      	cmp	r3, r1
 8006650:	d02c      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006652:	3118      	adds	r1, #24
 8006654:	428b      	cmp	r3, r1
 8006656:	d029      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006658:	3118      	adds	r1, #24
 800665a:	428b      	cmp	r3, r1
 800665c:	d026      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800665e:	3118      	adds	r1, #24
 8006660:	428b      	cmp	r3, r1
 8006662:	d023      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006664:	3118      	adds	r1, #24
 8006666:	428b      	cmp	r3, r1
 8006668:	d020      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800666a:	3118      	adds	r1, #24
 800666c:	428b      	cmp	r3, r1
 800666e:	d01d      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006670:	3118      	adds	r1, #24
 8006672:	428b      	cmp	r3, r1
 8006674:	d01a      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006676:	3118      	adds	r1, #24
 8006678:	428b      	cmp	r3, r1
 800667a:	d017      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800667c:	4922      	ldr	r1, [pc, #136]	; (8006708 <HAL_DMA_Abort_IT+0x26c>)
 800667e:	428b      	cmp	r3, r1
 8006680:	d014      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006682:	3114      	adds	r1, #20
 8006684:	428b      	cmp	r3, r1
 8006686:	d011      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006688:	3114      	adds	r1, #20
 800668a:	428b      	cmp	r3, r1
 800668c:	d00e      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800668e:	3114      	adds	r1, #20
 8006690:	428b      	cmp	r3, r1
 8006692:	d00b      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 8006694:	3114      	adds	r1, #20
 8006696:	428b      	cmp	r3, r1
 8006698:	d008      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 800669a:	3114      	adds	r1, #20
 800669c:	428b      	cmp	r3, r1
 800669e:	d005      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 80066a0:	3114      	adds	r1, #20
 80066a2:	428b      	cmp	r3, r1
 80066a4:	d002      	beq.n	80066ac <HAL_DMA_Abort_IT+0x210>
 80066a6:	3114      	adds	r1, #20
 80066a8:	428b      	cmp	r3, r1
 80066aa:	d117      	bne.n	80066dc <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ac:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80066ae:	680b      	ldr	r3, [r1, #0]
 80066b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b4:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b6:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066b8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80066ba:	f003 011f 	and.w	r1, r3, #31
 80066be:	2301      	movs	r3, #1
 80066c0:	408b      	lsls	r3, r1
 80066c2:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066c4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80066c6:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80066c8:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80066ca:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80066cc:	b133      	cbz	r3, 80066dc <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80066d4:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80066d8:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80066da:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80066dc:	2301      	movs	r3, #1
 80066de:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80066e2:	2300      	movs	r3, #0
 80066e4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80066e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80066ea:	b12b      	cbz	r3, 80066f8 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
  return HAL_OK;
 80066f0:	2000      	movs	r0, #0
 80066f2:	e6e0      	b.n	80064b6 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 80066f4:	2001      	movs	r0, #1
}
 80066f6:	4770      	bx	lr
  return HAL_OK;
 80066f8:	2000      	movs	r0, #0
 80066fa:	e6dc      	b.n	80064b6 <HAL_DMA_Abort_IT+0x1a>
 80066fc:	40020010 	.word	0x40020010
 8006700:	40020028 	.word	0x40020028
 8006704:	40020040 	.word	0x40020040
 8006708:	58025408 	.word	0x58025408

0800670c <HAL_DMA_PollForTransfer>:
{
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	4604      	mov	r4, r0
 8006712:	460f      	mov	r7, r1
 8006714:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006716:	f7fa fd1d 	bl	8001154 <HAL_GetTick>
  if(hdma == NULL)
 800671a:	2c00      	cmp	r4, #0
 800671c:	f000 8218 	beq.w	8006b50 <HAL_DMA_PollForTransfer+0x444>
 8006720:	4682      	mov	sl, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006722:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d007      	beq.n	800673c <HAL_DMA_PollForTransfer+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006730:	2300      	movs	r3, #0
 8006732:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8006736:	2001      	movs	r0, #1
}
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	4936      	ldr	r1, [pc, #216]	; (8006818 <HAL_DMA_PollForTransfer+0x10c>)
 8006740:	4a36      	ldr	r2, [pc, #216]	; (800681c <HAL_DMA_PollForTransfer+0x110>)
 8006742:	4293      	cmp	r3, r2
 8006744:	bf18      	it	ne
 8006746:	428b      	cmpne	r3, r1
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800674a:	3218      	adds	r2, #24
 800674c:	4293      	cmp	r3, r2
 800674e:	d038      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006750:	3218      	adds	r2, #24
 8006752:	4293      	cmp	r3, r2
 8006754:	d035      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006756:	3218      	adds	r2, #24
 8006758:	4293      	cmp	r3, r2
 800675a:	d032      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800675c:	3218      	adds	r2, #24
 800675e:	4293      	cmp	r3, r2
 8006760:	d02f      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006762:	3218      	adds	r2, #24
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006768:	3218      	adds	r2, #24
 800676a:	4293      	cmp	r3, r2
 800676c:	d029      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800676e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006772:	4293      	cmp	r3, r2
 8006774:	d025      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006776:	3218      	adds	r2, #24
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800677c:	3218      	adds	r2, #24
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006782:	3218      	adds	r2, #24
 8006784:	4293      	cmp	r3, r2
 8006786:	d01c      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006788:	3218      	adds	r2, #24
 800678a:	4293      	cmp	r3, r2
 800678c:	d019      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800678e:	3218      	adds	r2, #24
 8006790:	4293      	cmp	r3, r2
 8006792:	d016      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 8006794:	3218      	adds	r2, #24
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
 800679a:	3218      	adds	r2, #24
 800679c:	4293      	cmp	r3, r2
 800679e:	d010      	beq.n	80067c2 <HAL_DMA_PollForTransfer+0xb6>
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f013 0f20 	tst.w	r3, #32
 80067a6:	d12a      	bne.n	80067fe <HAL_DMA_PollForTransfer+0xf2>
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80067a8:	bb77      	cbnz	r7, 8006808 <HAL_DMA_PollForTransfer+0xfc>
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 80067aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	f04f 0902 	mov.w	r9, #2
 80067b4:	fa09 f903 	lsl.w	r9, r9, r3
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 80067b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ba:	461d      	mov	r5, r3
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 80067bc:	f103 0804 	add.w	r8, r3, #4
 80067c0:	e0ba      	b.n	8006938 <HAL_DMA_PollForTransfer+0x22c>
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067c8:	d10c      	bne.n	80067e4 <HAL_DMA_PollForTransfer+0xd8>
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80067ca:	b987      	cbnz	r7, 80067ee <HAL_DMA_PollForTransfer+0xe2>
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	f04f 0920 	mov.w	r9, #32
 80067d6:	fa09 f903 	lsl.w	r9, r9, r3
    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 80067da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067dc:	461d      	mov	r5, r3
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 80067de:	f103 0808 	add.w	r8, r3, #8
 80067e2:	e0a9      	b.n	8006938 <HAL_DMA_PollForTransfer+0x22c>
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7a4      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	f04f 0910 	mov.w	r9, #16
 80067f8:	fa09 f903 	lsl.w	r9, r9, r3
 80067fc:	e7ed      	b.n	80067da <HAL_DMA_PollForTransfer+0xce>
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80067fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006802:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8006804:	2001      	movs	r0, #1
 8006806:	e797      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8006808:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	f04f 0904 	mov.w	r9, #4
 8006812:	fa09 f903 	lsl.w	r9, r9, r3
 8006816:	e7cf      	b.n	80067b8 <HAL_DMA_PollForTransfer+0xac>
 8006818:	40020010 	.word	0x40020010
 800681c:	40020028 	.word	0x40020028
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006820:	682a      	ldr	r2, [r5, #0]
 8006822:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	40da      	lsrs	r2, r3
 800682a:	f012 0f01 	tst.w	r2, #1
 800682e:	d008      	beq.n	8006842 <HAL_DMA_PollForTransfer+0x136>
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006830:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006832:	f042 0202 	orr.w	r2, r2, #2
 8006836:	6562      	str	r2, [r4, #84]	; 0x54
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006838:	2201      	movs	r2, #1
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	f8c8 3000 	str.w	r3, [r8]
      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006842:	6829      	ldr	r1, [r5, #0]
 8006844:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006846:	f003 021f 	and.w	r2, r3, #31
 800684a:	2304      	movs	r3, #4
 800684c:	4093      	lsls	r3, r2
 800684e:	4219      	tst	r1, r3
 8006850:	d005      	beq.n	800685e <HAL_DMA_PollForTransfer+0x152>
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006852:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006854:	f042 0204 	orr.w	r2, r2, #4
 8006858:	6562      	str	r2, [r4, #84]	; 0x54
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800685a:	f8c8 3000 	str.w	r3, [r8]
      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800685e:	6829      	ldr	r1, [r5, #0]
 8006860:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006862:	f003 021f 	and.w	r2, r3, #31
 8006866:	2308      	movs	r3, #8
 8006868:	4093      	lsls	r3, r2
 800686a:	4219      	tst	r1, r3
 800686c:	f040 80bd 	bne.w	80069ea <HAL_DMA_PollForTransfer+0x2de>
    if(Timeout != HAL_MAX_DELAY)
 8006870:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006874:	f040 80c6 	bne.w	8006a04 <HAL_DMA_PollForTransfer+0x2f8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4990      	ldr	r1, [pc, #576]	; (8006abc <HAL_DMA_PollForTransfer+0x3b0>)
 800687c:	4a90      	ldr	r2, [pc, #576]	; (8006ac0 <HAL_DMA_PollForTransfer+0x3b4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	bf18      	it	ne
 8006882:	428b      	cmpne	r3, r1
 8006884:	d042      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 8006886:	3218      	adds	r2, #24
 8006888:	4293      	cmp	r3, r2
 800688a:	d03f      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 800688c:	3218      	adds	r2, #24
 800688e:	4293      	cmp	r3, r2
 8006890:	d03c      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 8006892:	3218      	adds	r2, #24
 8006894:	4293      	cmp	r3, r2
 8006896:	d039      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 8006898:	3218      	adds	r2, #24
 800689a:	4293      	cmp	r3, r2
 800689c:	d036      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 800689e:	3218      	adds	r2, #24
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d033      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068a4:	3218      	adds	r2, #24
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d030      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068aa:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d02c      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068b2:	3218      	adds	r2, #24
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d029      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068b8:	3218      	adds	r2, #24
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d026      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068be:	3218      	adds	r2, #24
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d023      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068c4:	3218      	adds	r2, #24
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d020      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068ca:	3218      	adds	r2, #24
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01d      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068d0:	3218      	adds	r2, #24
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01a      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068d6:	3218      	adds	r2, #24
 80068d8:	4293      	cmp	r3, r2
 80068da:	d017      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068dc:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <HAL_DMA_PollForTransfer+0x3b8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d014      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068e2:	3214      	adds	r2, #20
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d011      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068e8:	3214      	adds	r2, #20
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068ee:	3214      	adds	r2, #20
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068f4:	3214      	adds	r2, #20
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d008      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 80068fa:	3214      	adds	r2, #20
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d005      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 8006900:	3214      	adds	r2, #20
 8006902:	4293      	cmp	r3, r2
 8006904:	d002      	beq.n	800690c <HAL_DMA_PollForTransfer+0x200>
 8006906:	3214      	adds	r2, #20
 8006908:	4293      	cmp	r3, r2
 800690a:	d115      	bne.n	8006938 <HAL_DMA_PollForTransfer+0x22c>
      if(hdma->DMAmuxRequestGen != 0U)
 800690c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800690e:	b14b      	cbz	r3, 8006924 <HAL_DMA_PollForTransfer+0x218>
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8006910:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006916:	4211      	tst	r1, r2
 8006918:	d004      	beq.n	8006924 <HAL_DMA_PollForTransfer+0x218>
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800691a:	605a      	str	r2, [r3, #4]
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800691c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800691e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006922:	6563      	str	r3, [r4, #84]	; 0x54
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8006924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800692a:	4211      	tst	r1, r2
 800692c:	d004      	beq.n	8006938 <HAL_DMA_PollForTransfer+0x22c>
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800692e:	605a      	str	r2, [r3, #4]
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8006930:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006936:	6563      	str	r3, [r4, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	ea13 0f09 	tst.w	r3, r9
 800693e:	d171      	bne.n	8006a24 <HAL_DMA_PollForTransfer+0x318>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	495e      	ldr	r1, [pc, #376]	; (8006abc <HAL_DMA_PollForTransfer+0x3b0>)
 8006944:	4a5e      	ldr	r2, [pc, #376]	; (8006ac0 <HAL_DMA_PollForTransfer+0x3b4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	bf18      	it	ne
 800694a:	428b      	cmpne	r3, r1
 800694c:	f43f af68 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006950:	3218      	adds	r2, #24
 8006952:	4293      	cmp	r3, r2
 8006954:	f43f af64 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006958:	3218      	adds	r2, #24
 800695a:	4293      	cmp	r3, r2
 800695c:	f43f af60 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006960:	3218      	adds	r2, #24
 8006962:	4293      	cmp	r3, r2
 8006964:	f43f af5c 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006968:	3218      	adds	r2, #24
 800696a:	4293      	cmp	r3, r2
 800696c:	f43f af58 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006970:	3218      	adds	r2, #24
 8006972:	4293      	cmp	r3, r2
 8006974:	f43f af54 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006978:	3218      	adds	r2, #24
 800697a:	4293      	cmp	r3, r2
 800697c:	f43f af50 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006980:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006984:	4293      	cmp	r3, r2
 8006986:	f43f af4b 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 800698a:	3218      	adds	r2, #24
 800698c:	4293      	cmp	r3, r2
 800698e:	f43f af47 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 8006992:	3218      	adds	r2, #24
 8006994:	4293      	cmp	r3, r2
 8006996:	f43f af43 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 800699a:	3218      	adds	r2, #24
 800699c:	4293      	cmp	r3, r2
 800699e:	f43f af3f 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 80069a2:	3218      	adds	r2, #24
 80069a4:	4293      	cmp	r3, r2
 80069a6:	f43f af3b 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 80069aa:	3218      	adds	r2, #24
 80069ac:	4293      	cmp	r3, r2
 80069ae:	f43f af37 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 80069b2:	3218      	adds	r2, #24
 80069b4:	4293      	cmp	r3, r2
 80069b6:	f43f af33 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
 80069ba:	3218      	adds	r2, #24
 80069bc:	4293      	cmp	r3, r2
 80069be:	f43f af2f 	beq.w	8006820 <HAL_DMA_PollForTransfer+0x114>
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069c2:	6829      	ldr	r1, [r5, #0]
 80069c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2208      	movs	r2, #8
 80069cc:	409a      	lsls	r2, r3
 80069ce:	4211      	tst	r1, r2
 80069d0:	f43f af4e 	beq.w	8006870 <HAL_DMA_PollForTransfer+0x164>
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 80069d4:	2001      	movs	r0, #1
 80069d6:	fa00 f303 	lsl.w	r3, r0, r3
 80069da:	602b      	str	r3, [r5, #0]
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069dc:	6560      	str	r0, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80069de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 80069e8:	e6a6      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	6562      	str	r2, [r4, #84]	; 0x54
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f2:	f8c8 3000 	str.w	r3, [r8]
        hdma->State = HAL_DMA_STATE_READY;
 80069f6:	2001      	movs	r0, #1
 80069f8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80069fc:	2300      	movs	r3, #0
 80069fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8006a02:	e699      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006a04:	f7fa fba6 	bl	8001154 <HAL_GetTick>
 8006a08:	eba0 000a 	sub.w	r0, r0, sl
 8006a0c:	42b0      	cmp	r0, r6
 8006a0e:	d802      	bhi.n	8006a16 <HAL_DMA_PollForTransfer+0x30a>
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	f47f af31 	bne.w	8006878 <HAL_DMA_PollForTransfer+0x16c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a16:	2320      	movs	r3, #32
 8006a18:	6563      	str	r3, [r4, #84]	; 0x54
        (void) HAL_DMA_Abort(hdma);
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff fb9e 	bl	800615c <HAL_DMA_Abort>
        return HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
 8006a22:	e689      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	d14f      	bne.n	8006ac8 <HAL_DMA_PollForTransfer+0x3bc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	4924      	ldr	r1, [pc, #144]	; (8006abc <HAL_DMA_PollForTransfer+0x3b0>)
 8006a2c:	4a24      	ldr	r2, [pc, #144]	; (8006ac0 <HAL_DMA_PollForTransfer+0x3b4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bf18      	it	ne
 8006a32:	428b      	cmpne	r3, r1
 8006a34:	d032      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a36:	3218      	adds	r2, #24
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d02f      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a3c:	3218      	adds	r2, #24
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d02c      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a42:	3218      	adds	r2, #24
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d029      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a48:	3218      	adds	r2, #24
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d026      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a4e:	3218      	adds	r2, #24
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d023      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a54:	3218      	adds	r2, #24
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d020      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a5a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01c      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a62:	3218      	adds	r2, #24
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d019      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a68:	3218      	adds	r2, #24
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d016      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a6e:	3218      	adds	r2, #24
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a74:	3218      	adds	r2, #24
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d010      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a7a:	3218      	adds	r2, #24
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00d      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a80:	3218      	adds	r2, #24
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00a      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
 8006a86:	3218      	adds	r2, #24
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <HAL_DMA_PollForTransfer+0x390>
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8006a8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006a8e:	f003 021f 	and.w	r2, r3, #31
 8006a92:	2302      	movs	r3, #2
 8006a94:	4093      	lsls	r3, r2
 8006a96:	f8c8 3000 	str.w	r3, [r8]
 8006a9a:	e006      	b.n	8006aaa <HAL_DMA_PollForTransfer+0x39e>
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 8006a9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006a9e:	f003 021f 	and.w	r2, r3, #31
 8006aa2:	2330      	movs	r3, #48	; 0x30
 8006aa4:	4093      	lsls	r3, r2
 8006aa6:	f8c8 3000 	str.w	r3, [r8]
    hdma->State = HAL_DMA_STATE_READY;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return status;
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	e63e      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	58025408 	.word	0x58025408
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	4922      	ldr	r1, [pc, #136]	; (8006b54 <HAL_DMA_PollForTransfer+0x448>)
 8006acc:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <HAL_DMA_PollForTransfer+0x44c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	bf18      	it	ne
 8006ad2:	428b      	cmpne	r3, r1
 8006ad4:	d033      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006ad6:	3218      	adds	r2, #24
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d030      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006adc:	3218      	adds	r2, #24
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d02d      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006ae2:	3218      	adds	r2, #24
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d02a      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006ae8:	3218      	adds	r2, #24
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d027      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006aee:	3218      	adds	r2, #24
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d024      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006af4:	3218      	adds	r2, #24
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d021      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006afa:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b02:	3218      	adds	r2, #24
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d01a      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b08:	3218      	adds	r2, #24
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d017      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b0e:	3218      	adds	r2, #24
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d014      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b14:	3218      	adds	r2, #24
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d011      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b1a:	3218      	adds	r2, #24
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b20:	3218      	adds	r2, #24
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00b      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
 8006b26:	3218      	adds	r2, #24
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d008      	beq.n	8006b3e <HAL_DMA_PollForTransfer+0x432>
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 8006b2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006b2e:	f002 021f 	and.w	r2, r2, #31
 8006b32:	2304      	movs	r3, #4
 8006b34:	4093      	lsls	r3, r2
 8006b36:	f8c8 3000 	str.w	r3, [r8]
  return status;
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e5fc      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8006b3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006b40:	f002 021f 	and.w	r2, r2, #31
 8006b44:	2310      	movs	r3, #16
 8006b46:	4093      	lsls	r3, r2
 8006b48:	f8c8 3000 	str.w	r3, [r8]
  return status;
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e5f3      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
    return HAL_ERROR;
 8006b50:	2001      	movs	r0, #1
 8006b52:	e5f1      	b.n	8006738 <HAL_DMA_PollForTransfer+0x2c>
 8006b54:	40020010 	.word	0x40020010
 8006b58:	40020028 	.word	0x40020028

08006b5c <HAL_DMA_IRQHandler>:
{
 8006b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b66:	4b7d      	ldr	r3, [pc, #500]	; (8006d5c <HAL_DMA_IRQHandler+0x200>)
 8006b68:	681d      	ldr	r5, [r3, #0]
 8006b6a:	4b7d      	ldr	r3, [pc, #500]	; (8006d60 <HAL_DMA_IRQHandler+0x204>)
 8006b6c:	fba3 3505 	umull	r3, r5, r3, r5
 8006b70:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b72:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8006b74:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8006b76:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b7a:	6803      	ldr	r3, [r0, #0]
 8006b7c:	4979      	ldr	r1, [pc, #484]	; (8006d64 <HAL_DMA_IRQHandler+0x208>)
 8006b7e:	487a      	ldr	r0, [pc, #488]	; (8006d68 <HAL_DMA_IRQHandler+0x20c>)
 8006b80:	4283      	cmp	r3, r0
 8006b82:	bf18      	it	ne
 8006b84:	428b      	cmpne	r3, r1
 8006b86:	bf0c      	ite	eq
 8006b88:	2001      	moveq	r0, #1
 8006b8a:	2000      	movne	r0, #0
 8006b8c:	d061      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006b8e:	4a77      	ldr	r2, [pc, #476]	; (8006d6c <HAL_DMA_IRQHandler+0x210>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d05e      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006b94:	3218      	adds	r2, #24
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d05b      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006b9a:	3218      	adds	r2, #24
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d058      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006ba0:	3218      	adds	r2, #24
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d055      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006ba6:	3218      	adds	r2, #24
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d052      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bac:	3218      	adds	r2, #24
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d04f      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bb2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d04b      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bba:	3218      	adds	r2, #24
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d048      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bc0:	3218      	adds	r2, #24
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d045      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bc6:	3218      	adds	r2, #24
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d042      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bcc:	3218      	adds	r2, #24
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d03f      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bd2:	3218      	adds	r2, #24
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d03c      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bd8:	3218      	adds	r2, #24
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d039      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
 8006bde:	3218      	adds	r2, #24
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d036      	beq.n	8006c52 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006be4:	4962      	ldr	r1, [pc, #392]	; (8006d70 <HAL_DMA_IRQHandler+0x214>)
 8006be6:	4a63      	ldr	r2, [pc, #396]	; (8006d74 <HAL_DMA_IRQHandler+0x218>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bf18      	it	ne
 8006bec:	428b      	cmpne	r3, r1
 8006bee:	d012      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006bf0:	4a61      	ldr	r2, [pc, #388]	; (8006d78 <HAL_DMA_IRQHandler+0x21c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006bf6:	3214      	adds	r2, #20
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00c      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006bfc:	3214      	adds	r2, #20
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006c02:	3214      	adds	r2, #20
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d006      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006c08:	3214      	adds	r2, #20
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xba>
 8006c0e:	3214      	adds	r2, #20
 8006c10:	4293      	cmp	r3, r2
 8006c12:	f040 8261 	bne.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c16:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c1a:	f001 011f 	and.w	r1, r1, #31
 8006c1e:	2004      	movs	r0, #4
 8006c20:	4088      	lsls	r0, r1
 8006c22:	ea10 0f0c 	tst.w	r0, ip
 8006c26:	f000 82a7 	beq.w	8007178 <HAL_DMA_IRQHandler+0x61c>
 8006c2a:	f012 0f04 	tst.w	r2, #4
 8006c2e:	f000 82a3 	beq.w	8007178 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c32:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c34:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006c38:	f000 825a 	beq.w	80070f0 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c3c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006c40:	f040 8250 	bne.w	80070e4 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8246 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4798      	blx	r3
 8006c50:	e242      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c54:	f002 011f 	and.w	r1, r2, #31
 8006c58:	2208      	movs	r2, #8
 8006c5a:	408a      	lsls	r2, r1
 8006c5c:	4232      	tst	r2, r6
 8006c5e:	d041      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c60:	bb70      	cbnz	r0, 8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c62:	4a42      	ldr	r2, [pc, #264]	; (8006d6c <HAL_DMA_IRQHandler+0x210>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d02b      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c68:	3218      	adds	r2, #24
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d028      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c6e:	3218      	adds	r2, #24
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d025      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c74:	3218      	adds	r2, #24
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d022      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c7a:	3218      	adds	r2, #24
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d01f      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c80:	3218      	adds	r2, #24
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01c      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c86:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c8e:	3218      	adds	r2, #24
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d015      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c94:	3218      	adds	r2, #24
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d012      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006c9a:	3218      	adds	r2, #24
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006ca0:	3218      	adds	r2, #24
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006ca6:	3218      	adds	r2, #24
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006cac:	3218      	adds	r2, #24
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d006      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006cb2:	3218      	adds	r2, #24
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x164>
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8006cbe:	e002      	b.n	8006cc6 <HAL_DMA_IRQHandler+0x16a>
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8006cc6:	b16a      	cbz	r2, 8006ce4 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006cd2:	f003 021f 	and.w	r2, r3, #31
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	4093      	lsls	r3, r2
 8006cda:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006ce6:	f002 021f 	and.w	r2, r2, #31
 8006cea:	fa26 f302 	lsr.w	r3, r6, r2
 8006cee:	f013 0f01 	tst.w	r3, #1
 8006cf2:	d047      	beq.n	8006d84 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	481b      	ldr	r0, [pc, #108]	; (8006d64 <HAL_DMA_IRQHandler+0x208>)
 8006cf8:	491b      	ldr	r1, [pc, #108]	; (8006d68 <HAL_DMA_IRQHandler+0x20c>)
 8006cfa:	428b      	cmp	r3, r1
 8006cfc:	bf18      	it	ne
 8006cfe:	4283      	cmpne	r3, r0
 8006d00:	d03c      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d02:	3118      	adds	r1, #24
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d039      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d08:	3118      	adds	r1, #24
 8006d0a:	428b      	cmp	r3, r1
 8006d0c:	d036      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d0e:	3118      	adds	r1, #24
 8006d10:	428b      	cmp	r3, r1
 8006d12:	d033      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d14:	3118      	adds	r1, #24
 8006d16:	428b      	cmp	r3, r1
 8006d18:	d030      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d1a:	3118      	adds	r1, #24
 8006d1c:	428b      	cmp	r3, r1
 8006d1e:	d02d      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d20:	3118      	adds	r1, #24
 8006d22:	428b      	cmp	r3, r1
 8006d24:	d02a      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d26:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006d2a:	428b      	cmp	r3, r1
 8006d2c:	d026      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d2e:	3118      	adds	r1, #24
 8006d30:	428b      	cmp	r3, r1
 8006d32:	d023      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d34:	3118      	adds	r1, #24
 8006d36:	428b      	cmp	r3, r1
 8006d38:	d020      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d3a:	3118      	adds	r1, #24
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	d01d      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d40:	3118      	adds	r1, #24
 8006d42:	428b      	cmp	r3, r1
 8006d44:	d01a      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d46:	3118      	adds	r1, #24
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	d017      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d4c:	3118      	adds	r1, #24
 8006d4e:	428b      	cmp	r3, r1
 8006d50:	d014      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d52:	3118      	adds	r1, #24
 8006d54:	428b      	cmp	r3, r1
 8006d56:	d011      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x220>
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	e013      	b.n	8006d84 <HAL_DMA_IRQHandler+0x228>
 8006d5c:	24000000 	.word	0x24000000
 8006d60:	1b4e81b5 	.word	0x1b4e81b5
 8006d64:	40020010 	.word	0x40020010
 8006d68:	40020028 	.word	0x40020028
 8006d6c:	40020040 	.word	0x40020040
 8006d70:	58025408 	.word	0x58025408
 8006d74:	5802541c 	.word	0x5802541c
 8006d78:	58025430 	.word	0x58025430
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d82:	d13b      	bne.n	8006dfc <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	4233      	tst	r3, r6
 8006d92:	d040      	beq.n	8006e16 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	4896      	ldr	r0, [pc, #600]	; (8006ff0 <HAL_DMA_IRQHandler+0x494>)
 8006d98:	4996      	ldr	r1, [pc, #600]	; (8006ff4 <HAL_DMA_IRQHandler+0x498>)
 8006d9a:	428a      	cmp	r2, r1
 8006d9c:	bf18      	it	ne
 8006d9e:	4282      	cmpne	r2, r0
 8006da0:	d035      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006da2:	3118      	adds	r1, #24
 8006da4:	428a      	cmp	r2, r1
 8006da6:	d032      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006da8:	3118      	adds	r1, #24
 8006daa:	428a      	cmp	r2, r1
 8006dac:	d02f      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dae:	3118      	adds	r1, #24
 8006db0:	428a      	cmp	r2, r1
 8006db2:	d02c      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006db4:	3118      	adds	r1, #24
 8006db6:	428a      	cmp	r2, r1
 8006db8:	d029      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dba:	3118      	adds	r1, #24
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d026      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dc0:	3118      	adds	r1, #24
 8006dc2:	428a      	cmp	r2, r1
 8006dc4:	d023      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dc6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006dca:	428a      	cmp	r2, r1
 8006dcc:	d01f      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dce:	3118      	adds	r1, #24
 8006dd0:	428a      	cmp	r2, r1
 8006dd2:	d01c      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dd4:	3118      	adds	r1, #24
 8006dd6:	428a      	cmp	r2, r1
 8006dd8:	d019      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dda:	3118      	adds	r1, #24
 8006ddc:	428a      	cmp	r2, r1
 8006dde:	d016      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006de0:	3118      	adds	r1, #24
 8006de2:	428a      	cmp	r2, r1
 8006de4:	d013      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006de6:	3118      	adds	r1, #24
 8006de8:	428a      	cmp	r2, r1
 8006dea:	d010      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006dec:	3118      	adds	r1, #24
 8006dee:	428a      	cmp	r2, r1
 8006df0:	d00d      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006df2:	3118      	adds	r1, #24
 8006df4:	428a      	cmp	r2, r1
 8006df6:	d00a      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x2b2>
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	e00c      	b.n	8006e16 <HAL_DMA_IRQHandler+0x2ba>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	fa03 f202 	lsl.w	r2, r3, r2
 8006e02:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e06:	f043 0302 	orr.w	r3, r3, #2
 8006e0a:	6563      	str	r3, [r4, #84]	; 0x54
 8006e0c:	e7ba      	b.n	8006d84 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	f012 0f02 	tst.w	r2, #2
 8006e14:	d13d      	bne.n	8006e92 <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	4233      	tst	r3, r6
 8006e24:	d05f      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	4871      	ldr	r0, [pc, #452]	; (8006ff0 <HAL_DMA_IRQHandler+0x494>)
 8006e2a:	4972      	ldr	r1, [pc, #456]	; (8006ff4 <HAL_DMA_IRQHandler+0x498>)
 8006e2c:	428a      	cmp	r2, r1
 8006e2e:	bf18      	it	ne
 8006e30:	4282      	cmpne	r2, r0
 8006e32:	d034      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e34:	3118      	adds	r1, #24
 8006e36:	428a      	cmp	r2, r1
 8006e38:	d031      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e3a:	3118      	adds	r1, #24
 8006e3c:	428a      	cmp	r2, r1
 8006e3e:	d02e      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e40:	3118      	adds	r1, #24
 8006e42:	428a      	cmp	r2, r1
 8006e44:	d02b      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e46:	3118      	adds	r1, #24
 8006e48:	428a      	cmp	r2, r1
 8006e4a:	d028      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e4c:	3118      	adds	r1, #24
 8006e4e:	428a      	cmp	r2, r1
 8006e50:	d025      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e52:	3118      	adds	r1, #24
 8006e54:	428a      	cmp	r2, r1
 8006e56:	d022      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e58:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006e5c:	428a      	cmp	r2, r1
 8006e5e:	d01e      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e60:	3118      	adds	r1, #24
 8006e62:	428a      	cmp	r2, r1
 8006e64:	d01b      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e66:	3118      	adds	r1, #24
 8006e68:	428a      	cmp	r2, r1
 8006e6a:	d018      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e6c:	3118      	adds	r1, #24
 8006e6e:	428a      	cmp	r2, r1
 8006e70:	d015      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e72:	3118      	adds	r1, #24
 8006e74:	428a      	cmp	r2, r1
 8006e76:	d012      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e78:	3118      	adds	r1, #24
 8006e7a:	428a      	cmp	r2, r1
 8006e7c:	d00f      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e7e:	3118      	adds	r1, #24
 8006e80:	428a      	cmp	r2, r1
 8006e82:	d00c      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e84:	3118      	adds	r1, #24
 8006e86:	428a      	cmp	r2, r1
 8006e88:	d009      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x342>
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8006e90:	e008      	b.n	8006ea4 <HAL_DMA_IRQHandler+0x348>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e92:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e96:	f043 0304 	orr.w	r3, r3, #4
 8006e9a:	6563      	str	r3, [r4, #84]	; 0x54
 8006e9c:	e7bb      	b.n	8006e16 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8006ea4:	b1fa      	cbz	r2, 8006ee6 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ea6:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006eb0:	d00d      	beq.n	8006ece <HAL_DMA_IRQHandler+0x372>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006eb8:	d104      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0x368>
            if(hdma->XferHalfCpltCallback != NULL)
 8006eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ebc:	b19b      	cbz	r3, 8006ee6 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferHalfCpltCallback(hdma);
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4798      	blx	r3
 8006ec2:	e010      	b.n	8006ee6 <HAL_DMA_IRQHandler+0x38a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ec4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006ec6:	b173      	cbz	r3, 8006ee6 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferM1HalfCpltCallback(hdma);
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4798      	blx	r3
 8006ecc:	e00b      	b.n	8006ee6 <HAL_DMA_IRQHandler+0x38a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006ed4:	d103      	bne.n	8006ede <HAL_DMA_IRQHandler+0x382>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f022 0208 	bic.w	r2, r2, #8
 8006edc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ee0:	b10b      	cbz	r3, 8006ee6 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferHalfCpltCallback(hdma);
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ee6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2220      	movs	r2, #32
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	4233      	tst	r3, r6
 8006ef4:	f000 8092 	beq.w	800701c <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	483d      	ldr	r0, [pc, #244]	; (8006ff0 <HAL_DMA_IRQHandler+0x494>)
 8006efc:	493d      	ldr	r1, [pc, #244]	; (8006ff4 <HAL_DMA_IRQHandler+0x498>)
 8006efe:	428a      	cmp	r2, r1
 8006f00:	bf18      	it	ne
 8006f02:	4282      	cmpne	r2, r0
 8006f04:	d02e      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f06:	3118      	adds	r1, #24
 8006f08:	428a      	cmp	r2, r1
 8006f0a:	d02b      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f0c:	3118      	adds	r1, #24
 8006f0e:	428a      	cmp	r2, r1
 8006f10:	d028      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f12:	3118      	adds	r1, #24
 8006f14:	428a      	cmp	r2, r1
 8006f16:	d025      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f18:	3118      	adds	r1, #24
 8006f1a:	428a      	cmp	r2, r1
 8006f1c:	d022      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f1e:	3118      	adds	r1, #24
 8006f20:	428a      	cmp	r2, r1
 8006f22:	d01f      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f24:	3118      	adds	r1, #24
 8006f26:	428a      	cmp	r2, r1
 8006f28:	d01c      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f2a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006f2e:	428a      	cmp	r2, r1
 8006f30:	d018      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f32:	3118      	adds	r1, #24
 8006f34:	428a      	cmp	r2, r1
 8006f36:	d015      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f38:	3118      	adds	r1, #24
 8006f3a:	428a      	cmp	r2, r1
 8006f3c:	d012      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f3e:	3118      	adds	r1, #24
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d00f      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f44:	3118      	adds	r1, #24
 8006f46:	428a      	cmp	r2, r1
 8006f48:	d00c      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f4a:	3118      	adds	r1, #24
 8006f4c:	428a      	cmp	r2, r1
 8006f4e:	d009      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f50:	3118      	adds	r1, #24
 8006f52:	428a      	cmp	r2, r1
 8006f54:	d006      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f56:	3118      	adds	r1, #24
 8006f58:	428a      	cmp	r2, r1
 8006f5a:	d003      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x408>
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8006f62:	e002      	b.n	8006f6a <HAL_DMA_IRQHandler+0x40e>
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	d056      	beq.n	800701c <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f6e:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f70:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d00e      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x43c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006f82:	d039      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006f8a:	d12c      	bne.n	8006fe6 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8006f8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d044      	beq.n	800701c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8006f92:	4620      	mov	r0, r4
 8006f94:	4798      	blx	r3
 8006f96:	e041      	b.n	800701c <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	f023 0316 	bic.w	r3, r3, #22
 8006fa0:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	6953      	ldr	r3, [r2, #20]
 8006fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006faa:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fae:	b1b3      	cbz	r3, 8006fde <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	f023 0308 	bic.w	r3, r3, #8
 8006fb8:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006fbc:	f003 021f 	and.w	r2, r3, #31
 8006fc0:	233f      	movs	r3, #63	; 0x3f
 8006fc2:	4093      	lsls	r3, r2
 8006fc4:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8006fd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d07f      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4798      	blx	r3
          return;
 8006fdc:	e07c      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e5      	bne.n	8006fb0 <HAL_DMA_IRQHandler+0x454>
 8006fe4:	e7e9      	b.n	8006fba <HAL_DMA_IRQHandler+0x45e>
            if(hdma->XferCpltCallback != NULL)
 8006fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fe8:	b1c3      	cbz	r3, 800701c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8006fea:	4620      	mov	r0, r4
 8006fec:	4798      	blx	r3
 8006fee:	e015      	b.n	800701c <HAL_DMA_IRQHandler+0x4c0>
 8006ff0:	40020010 	.word	0x40020010
 8006ff4:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006ffe:	d109      	bne.n	8007014 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	f022 0210 	bic.w	r2, r2, #16
 8007006:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8007008:	2301      	movs	r3, #1
 800700a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800700e:	2300      	movs	r3, #0
 8007010:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8007014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007016:	b10b      	cbz	r3, 800701c <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8007018:	4620      	mov	r0, r4
 800701a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800701c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800701e:	2b00      	cmp	r3, #0
 8007020:	d05a      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007022:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007024:	f013 0f01 	tst.w	r3, #1
 8007028:	d052      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 800702a:	2304      	movs	r3, #4
 800702c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	4996      	ldr	r1, [pc, #600]	; (800728c <HAL_DMA_IRQHandler+0x730>)
 8007034:	4a96      	ldr	r2, [pc, #600]	; (8007290 <HAL_DMA_IRQHandler+0x734>)
 8007036:	4293      	cmp	r3, r2
 8007038:	bf18      	it	ne
 800703a:	428b      	cmpne	r3, r1
 800703c:	d02f      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800703e:	3218      	adds	r2, #24
 8007040:	4293      	cmp	r3, r2
 8007042:	d02c      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007044:	3218      	adds	r2, #24
 8007046:	4293      	cmp	r3, r2
 8007048:	d029      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800704a:	3218      	adds	r2, #24
 800704c:	4293      	cmp	r3, r2
 800704e:	d026      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007050:	3218      	adds	r2, #24
 8007052:	4293      	cmp	r3, r2
 8007054:	d023      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007056:	3218      	adds	r2, #24
 8007058:	4293      	cmp	r3, r2
 800705a:	d020      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800705c:	3218      	adds	r2, #24
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007062:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007066:	4293      	cmp	r3, r2
 8007068:	d019      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800706a:	3218      	adds	r2, #24
 800706c:	4293      	cmp	r3, r2
 800706e:	d016      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007070:	3218      	adds	r2, #24
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007076:	3218      	adds	r2, #24
 8007078:	4293      	cmp	r3, r2
 800707a:	d010      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800707c:	3218      	adds	r2, #24
 800707e:	4293      	cmp	r3, r2
 8007080:	d00d      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007082:	3218      	adds	r2, #24
 8007084:	4293      	cmp	r3, r2
 8007086:	d00a      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007088:	3218      	adds	r2, #24
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 800708e:	3218      	adds	r2, #24
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_DMA_IRQHandler+0x542>
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	f022 0201 	bic.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e003      	b.n	80070a6 <HAL_DMA_IRQHandler+0x54a>
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	d804      	bhi.n	80070ba <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f013 0f01 	tst.w	r3, #1
 80070b8:	d1f5      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f013 0f01 	tst.w	r3, #1
 80070c2:	d00b      	beq.n	80070dc <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80070c4:	2303      	movs	r3, #3
 80070c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80070ca:	2300      	movs	r3, #0
 80070cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80070d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80070d2:	b10b      	cbz	r3, 80070d8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80070d4:	4620      	mov	r0, r4
 80070d6:	4798      	blx	r3
}
 80070d8:	b003      	add	sp, #12
 80070da:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80070dc:	2301      	movs	r3, #1
 80070de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80070e2:	e7f2      	b.n	80070ca <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80070e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f6      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80070ea:	4620      	mov	r0, r4
 80070ec:	4798      	blx	r3
 80070ee:	e7f3      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070f0:	f012 0f20 	tst.w	r2, #32
 80070f4:	d13a      	bne.n	800716c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	4964      	ldr	r1, [pc, #400]	; (800728c <HAL_DMA_IRQHandler+0x730>)
 80070fa:	4a65      	ldr	r2, [pc, #404]	; (8007290 <HAL_DMA_IRQHandler+0x734>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	bf18      	it	ne
 8007100:	428b      	cmpne	r3, r1
 8007102:	d02f      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007104:	3218      	adds	r2, #24
 8007106:	4293      	cmp	r3, r2
 8007108:	d02c      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 800710a:	3218      	adds	r2, #24
 800710c:	4293      	cmp	r3, r2
 800710e:	d029      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007110:	3218      	adds	r2, #24
 8007112:	4293      	cmp	r3, r2
 8007114:	d026      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007116:	3218      	adds	r2, #24
 8007118:	4293      	cmp	r3, r2
 800711a:	d023      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 800711c:	3218      	adds	r2, #24
 800711e:	4293      	cmp	r3, r2
 8007120:	d020      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007122:	3218      	adds	r2, #24
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007128:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800712c:	4293      	cmp	r3, r2
 800712e:	d019      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007130:	3218      	adds	r2, #24
 8007132:	4293      	cmp	r3, r2
 8007134:	d016      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007136:	3218      	adds	r2, #24
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 800713c:	3218      	adds	r2, #24
 800713e:	4293      	cmp	r3, r2
 8007140:	d010      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007142:	3218      	adds	r2, #24
 8007144:	4293      	cmp	r3, r2
 8007146:	d00d      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007148:	3218      	adds	r2, #24
 800714a:	4293      	cmp	r3, r2
 800714c:	d00a      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 800714e:	3218      	adds	r2, #24
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 8007154:	3218      	adds	r2, #24
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_DMA_IRQHandler+0x608>
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f022 0204 	bic.w	r2, r2, #4
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e003      	b.n	800716c <HAL_DMA_IRQHandler+0x610>
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	f022 0208 	bic.w	r2, r2, #8
 800716a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800716c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0b2      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8007172:	4620      	mov	r0, r4
 8007174:	4798      	blx	r3
 8007176:	e7af      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007178:	2002      	movs	r0, #2
 800717a:	4088      	lsls	r0, r1
 800717c:	ea10 0f0c 	tst.w	r0, ip
 8007180:	d060      	beq.n	8007244 <HAL_DMA_IRQHandler+0x6e8>
 8007182:	f012 0f02 	tst.w	r2, #2
 8007186:	d05d      	beq.n	8007244 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007188:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800718a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800718e:	d00e      	beq.n	80071ae <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007190:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007194:	d105      	bne.n	80071a2 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8007196:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007198:	2b00      	cmp	r3, #0
 800719a:	d09d      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 800719c:	4620      	mov	r0, r4
 800719e:	4798      	blx	r3
 80071a0:	e79a      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 80071a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d097      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 80071a8:	4620      	mov	r0, r4
 80071aa:	4798      	blx	r3
 80071ac:	e794      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071ae:	f012 0f20 	tst.w	r2, #32
 80071b2:	d140      	bne.n	8007236 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	4935      	ldr	r1, [pc, #212]	; (800728c <HAL_DMA_IRQHandler+0x730>)
 80071b8:	4a35      	ldr	r2, [pc, #212]	; (8007290 <HAL_DMA_IRQHandler+0x734>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	bf18      	it	ne
 80071be:	428b      	cmpne	r3, r1
 80071c0:	d02f      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071c2:	3218      	adds	r2, #24
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071c8:	3218      	adds	r2, #24
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d029      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071ce:	3218      	adds	r2, #24
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d026      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071d4:	3218      	adds	r2, #24
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d023      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071da:	3218      	adds	r2, #24
 80071dc:	4293      	cmp	r3, r2
 80071de:	d020      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071e0:	3218      	adds	r2, #24
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071e6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d019      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071ee:	3218      	adds	r2, #24
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d016      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071f4:	3218      	adds	r2, #24
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 80071fa:	3218      	adds	r2, #24
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d010      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 8007200:	3218      	adds	r2, #24
 8007202:	4293      	cmp	r3, r2
 8007204:	d00d      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 8007206:	3218      	adds	r2, #24
 8007208:	4293      	cmp	r3, r2
 800720a:	d00a      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 800720c:	3218      	adds	r2, #24
 800720e:	4293      	cmp	r3, r2
 8007210:	d007      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 8007212:	3218      	adds	r2, #24
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_IRQHandler+0x6c6>
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	f022 020a 	bic.w	r2, r2, #10
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e003      	b.n	800722a <HAL_DMA_IRQHandler+0x6ce>
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	f022 0214 	bic.w	r2, r2, #20
 8007228:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800722a:	2301      	movs	r3, #1
 800722c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8007230:	2300      	movs	r3, #0
 8007232:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8007236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007238:	2b00      	cmp	r3, #0
 800723a:	f43f af4d 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800723e:	4620      	mov	r0, r4
 8007240:	4798      	blx	r3
 8007242:	e749      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007244:	2008      	movs	r0, #8
 8007246:	fa00 f101 	lsl.w	r1, r0, r1
 800724a:	ea11 0f0c 	tst.w	r1, ip
 800724e:	f43f af43 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
 8007252:	f012 0f08 	tst.w	r2, #8
 8007256:	f43f af3f 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f022 020e 	bic.w	r2, r2, #14
 8007260:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007262:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2201      	movs	r2, #1
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007270:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8007272:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007276:	2300      	movs	r3, #0
 8007278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 800727c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800727e:	2b00      	cmp	r3, #0
 8007280:	f43f af2a 	beq.w	80070d8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8007284:	4620      	mov	r0, r4
 8007286:	4798      	blx	r3
  }
 8007288:	e726      	b.n	80070d8 <HAL_DMA_IRQHandler+0x57c>
 800728a:	bf00      	nop
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028

08007294 <HAL_DMA_RegisterCallback>:
  if(hdma == NULL)
 8007294:	4603      	mov	r3, r0
 8007296:	b348      	cbz	r0, 80072ec <HAL_DMA_RegisterCallback+0x58>
  __HAL_LOCK(hdma);
 8007298:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800729c:	2801      	cmp	r0, #1
 800729e:	d027      	beq.n	80072f0 <HAL_DMA_RegisterCallback+0x5c>
 80072a0:	2001      	movs	r0, #1
 80072a2:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80072a6:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 80072aa:	b2c0      	uxtb	r0, r0
 80072ac:	2801      	cmp	r0, #1
 80072ae:	d004      	beq.n	80072ba <HAL_DMA_RegisterCallback+0x26>
    status =  HAL_ERROR;
 80072b0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 80072b8:	4770      	bx	lr
    switch (CallbackID)
 80072ba:	2905      	cmp	r1, #5
 80072bc:	d8f9      	bhi.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
 80072be:	e8df f001 	tbb	[pc, r1]
 80072c2:	0603      	.short	0x0603
 80072c4:	120f0c09 	.word	0x120f0c09
      hdma->XferCpltCallback = pCallback;
 80072c8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80072ca:	4608      	mov	r0, r1
      break;
 80072cc:	e7f1      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
      hdma->XferHalfCpltCallback = pCallback;
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2000      	movs	r0, #0
      break;
 80072d2:	e7ee      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
      hdma->XferM1CpltCallback = pCallback;
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2000      	movs	r0, #0
      break;
 80072d8:	e7eb      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
      hdma->XferM1HalfCpltCallback = pCallback;
 80072da:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2000      	movs	r0, #0
      break;
 80072de:	e7e8      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
      hdma->XferErrorCallback = pCallback;
 80072e0:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80072e2:	2000      	movs	r0, #0
      break;
 80072e4:	e7e5      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
      hdma->XferAbortCallback = pCallback;
 80072e6:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80072e8:	2000      	movs	r0, #0
      break;
 80072ea:	e7e2      	b.n	80072b2 <HAL_DMA_RegisterCallback+0x1e>
    return HAL_ERROR;
 80072ec:	2001      	movs	r0, #1
 80072ee:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80072f0:	2002      	movs	r0, #2
}
 80072f2:	4770      	bx	lr

080072f4 <HAL_DMA_UnRegisterCallback>:
  if(hdma == NULL)
 80072f4:	4603      	mov	r3, r0
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d033      	beq.n	8007362 <HAL_DMA_UnRegisterCallback+0x6e>
  __HAL_LOCK(hdma);
 80072fa:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80072fe:	2a01      	cmp	r2, #1
 8007300:	d031      	beq.n	8007366 <HAL_DMA_UnRegisterCallback+0x72>
 8007302:	2201      	movs	r2, #1
 8007304:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007308:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800730c:	b2c0      	uxtb	r0, r0
 800730e:	4290      	cmp	r0, r2
 8007310:	d004      	beq.n	800731c <HAL_DMA_UnRegisterCallback+0x28>
    status = HAL_ERROR;
 8007312:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 800731a:	4770      	bx	lr
    switch (CallbackID)
 800731c:	2906      	cmp	r1, #6
 800731e:	d8f9      	bhi.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
 8007320:	e8df f001 	tbb	[pc, r1]
 8007324:	0e0b0804 	.word	0x0e0b0804
 8007328:	1411      	.short	0x1411
 800732a:	17          	.byte	0x17
 800732b:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 800732c:	2200      	movs	r2, #0
 800732e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	4608      	mov	r0, r1
      break;
 8007332:	e7ef      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferHalfCpltCallback = NULL;
 8007334:	2000      	movs	r0, #0
 8007336:	6418      	str	r0, [r3, #64]	; 0x40
      break;
 8007338:	e7ec      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferM1CpltCallback = NULL;
 800733a:	2000      	movs	r0, #0
 800733c:	6458      	str	r0, [r3, #68]	; 0x44
      break;
 800733e:	e7e9      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferM1HalfCpltCallback = NULL;
 8007340:	2000      	movs	r0, #0
 8007342:	6498      	str	r0, [r3, #72]	; 0x48
      break;
 8007344:	e7e6      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferErrorCallback = NULL;
 8007346:	2000      	movs	r0, #0
 8007348:	64d8      	str	r0, [r3, #76]	; 0x4c
      break;
 800734a:	e7e3      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferAbortCallback = NULL;
 800734c:	2000      	movs	r0, #0
 800734e:	6518      	str	r0, [r3, #80]	; 0x50
      break;
 8007350:	e7e0      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
      hdma->XferCpltCallback = NULL;
 8007352:	2000      	movs	r0, #0
 8007354:	63d8      	str	r0, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8007356:	6418      	str	r0, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8007358:	6458      	str	r0, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800735a:	6498      	str	r0, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 800735c:	64d8      	str	r0, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800735e:	6518      	str	r0, [r3, #80]	; 0x50
      break;
 8007360:	e7d8      	b.n	8007314 <HAL_DMA_UnRegisterCallback+0x20>
    return HAL_ERROR;
 8007362:	2001      	movs	r0, #1
 8007364:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8007366:	2002      	movs	r0, #2
}
 8007368:	4770      	bx	lr

0800736a <HAL_DMA_GetState>:
  return hdma->State;
 800736a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800736e:	4770      	bx	lr

08007370 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007370:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007372:	4770      	bx	lr

08007374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8007378:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800737a:	e06b      	b.n	8007454 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800737c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800737e:	005e      	lsls	r6, r3, #1
 8007380:	2403      	movs	r4, #3
 8007382:	40b4      	lsls	r4, r6
 8007384:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007388:	68cc      	ldr	r4, [r1, #12]
 800738a:	40b4      	lsls	r4, r6
 800738c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800738e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007390:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007392:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007396:	684c      	ldr	r4, [r1, #4]
 8007398:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800739c:	409c      	lsls	r4, r3
 800739e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80073a2:	6044      	str	r4, [r0, #4]
 80073a4:	e068      	b.n	8007478 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073a6:	08dd      	lsrs	r5, r3, #3
 80073a8:	3508      	adds	r5, #8
 80073aa:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073ae:	f003 0407 	and.w	r4, r3, #7
 80073b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073b6:	240f      	movs	r4, #15
 80073b8:	fa04 f40c 	lsl.w	r4, r4, ip
 80073bc:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073c0:	690c      	ldr	r4, [r1, #16]
 80073c2:	fa04 f40c 	lsl.w	r4, r4, ip
 80073c6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80073ca:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80073ce:	e06b      	b.n	80074a8 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073d0:	2409      	movs	r4, #9
 80073d2:	e000      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 80073d4:	2400      	movs	r4, #0
 80073d6:	fa04 f40e 	lsl.w	r4, r4, lr
 80073da:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073dc:	f10c 0c02 	add.w	ip, ip, #2
 80073e0:	4d69      	ldr	r5, [pc, #420]	; (8007588 <HAL_GPIO_Init+0x214>)
 80073e2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073e6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80073ea:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80073ec:	43d4      	mvns	r4, r2
 80073ee:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073f2:	684f      	ldr	r7, [r1, #4]
 80073f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80073f8:	d001      	beq.n	80073fe <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80073fa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80073fe:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007402:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8007404:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8007406:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800740a:	684f      	ldr	r7, [r1, #4]
 800740c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8007410:	d001      	beq.n	8007416 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8007412:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8007416:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800741a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800741c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8007420:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007424:	684f      	ldr	r7, [r1, #4]
 8007426:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800742a:	d001      	beq.n	8007430 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800742c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007430:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007434:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007438:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800743c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800743e:	684e      	ldr	r6, [r1, #4]
 8007440:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8007444:	d001      	beq.n	800744a <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8007446:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800744a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800744e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8007452:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007454:	680a      	ldr	r2, [r1, #0]
 8007456:	fa32 f403 	lsrs.w	r4, r2, r3
 800745a:	f000 8092 	beq.w	8007582 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800745e:	f04f 0c01 	mov.w	ip, #1
 8007462:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8007466:	ea1c 0202 	ands.w	r2, ip, r2
 800746a:	d0f2      	beq.n	8007452 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800746c:	684c      	ldr	r4, [r1, #4]
 800746e:	f004 0403 	and.w	r4, r4, #3
 8007472:	3c01      	subs	r4, #1
 8007474:	2c01      	cmp	r4, #1
 8007476:	d981      	bls.n	800737c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007478:	684c      	ldr	r4, [r1, #4]
 800747a:	f004 0403 	and.w	r4, r4, #3
 800747e:	2c03      	cmp	r4, #3
 8007480:	d00c      	beq.n	800749c <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8007482:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007484:	005d      	lsls	r5, r3, #1
 8007486:	f04f 0c03 	mov.w	ip, #3
 800748a:	fa0c fc05 	lsl.w	ip, ip, r5
 800748e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007492:	688c      	ldr	r4, [r1, #8]
 8007494:	40ac      	lsls	r4, r5
 8007496:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800749a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800749c:	684c      	ldr	r4, [r1, #4]
 800749e:	f004 0403 	and.w	r4, r4, #3
 80074a2:	2c02      	cmp	r4, #2
 80074a4:	f43f af7f 	beq.w	80073a6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80074a8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074aa:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80074ae:	f04f 0c03 	mov.w	ip, #3
 80074b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80074b6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074ba:	684c      	ldr	r4, [r1, #4]
 80074bc:	f004 0403 	and.w	r4, r4, #3
 80074c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80074c4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80074c8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074ca:	684c      	ldr	r4, [r1, #4]
 80074cc:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80074d0:	d0bf      	beq.n	8007452 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074d2:	4c2e      	ldr	r4, [pc, #184]	; (800758c <HAL_GPIO_Init+0x218>)
 80074d4:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 80074d8:	f045 0502 	orr.w	r5, r5, #2
 80074dc:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 80074e0:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 80074e4:	f004 0402 	and.w	r4, r4, #2
 80074e8:	9401      	str	r4, [sp, #4]
 80074ea:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80074ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80074f0:	f10c 0502 	add.w	r5, ip, #2
 80074f4:	4c24      	ldr	r4, [pc, #144]	; (8007588 <HAL_GPIO_Init+0x214>)
 80074f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074fa:	f003 0403 	and.w	r4, r3, #3
 80074fe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007502:	240f      	movs	r4, #15
 8007504:	fa04 f40e 	lsl.w	r4, r4, lr
 8007508:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800750c:	4c20      	ldr	r4, [pc, #128]	; (8007590 <HAL_GPIO_Init+0x21c>)
 800750e:	42a0      	cmp	r0, r4
 8007510:	f43f af60 	beq.w	80073d4 <HAL_GPIO_Init+0x60>
 8007514:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007518:	42a0      	cmp	r0, r4
 800751a:	d022      	beq.n	8007562 <HAL_GPIO_Init+0x1ee>
 800751c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007520:	42a0      	cmp	r0, r4
 8007522:	d020      	beq.n	8007566 <HAL_GPIO_Init+0x1f2>
 8007524:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007528:	42a0      	cmp	r0, r4
 800752a:	d01e      	beq.n	800756a <HAL_GPIO_Init+0x1f6>
 800752c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007530:	42a0      	cmp	r0, r4
 8007532:	d01c      	beq.n	800756e <HAL_GPIO_Init+0x1fa>
 8007534:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007538:	42a0      	cmp	r0, r4
 800753a:	d01a      	beq.n	8007572 <HAL_GPIO_Init+0x1fe>
 800753c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007540:	42a0      	cmp	r0, r4
 8007542:	d018      	beq.n	8007576 <HAL_GPIO_Init+0x202>
 8007544:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007548:	42a0      	cmp	r0, r4
 800754a:	d016      	beq.n	800757a <HAL_GPIO_Init+0x206>
 800754c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007550:	42a0      	cmp	r0, r4
 8007552:	d014      	beq.n	800757e <HAL_GPIO_Init+0x20a>
 8007554:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007558:	42a0      	cmp	r0, r4
 800755a:	f43f af39 	beq.w	80073d0 <HAL_GPIO_Init+0x5c>
 800755e:	240a      	movs	r4, #10
 8007560:	e739      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 8007562:	2401      	movs	r4, #1
 8007564:	e737      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 8007566:	2402      	movs	r4, #2
 8007568:	e735      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 800756a:	2403      	movs	r4, #3
 800756c:	e733      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 800756e:	2404      	movs	r4, #4
 8007570:	e731      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 8007572:	2405      	movs	r4, #5
 8007574:	e72f      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 8007576:	2406      	movs	r4, #6
 8007578:	e72d      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 800757a:	2407      	movs	r4, #7
 800757c:	e72b      	b.n	80073d6 <HAL_GPIO_Init+0x62>
 800757e:	2408      	movs	r4, #8
 8007580:	e729      	b.n	80073d6 <HAL_GPIO_Init+0x62>
  }
}
 8007582:	b003      	add	sp, #12
 8007584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007586:	bf00      	nop
 8007588:	58000400 	.word	0x58000400
 800758c:	58024400 	.word	0x58024400
 8007590:	58020000 	.word	0x58020000

08007594 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8007594:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007596:	fa31 f203 	lsrs.w	r2, r1, r3
 800759a:	f000 809d 	beq.w	80076d8 <HAL_GPIO_DeInit+0x144>
{
 800759e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a0:	e02e      	b.n	8007600 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80075a2:	2509      	movs	r5, #9
 80075a4:	e000      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 80075a6:	2500      	movs	r5, #0
 80075a8:	fa05 fc0c 	lsl.w	ip, r5, ip
 80075ac:	45a4      	cmp	ip, r4
 80075ae:	d072      	beq.n	8007696 <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80075b0:	6804      	ldr	r4, [r0, #0]
 80075b2:	005d      	lsls	r5, r3, #1
 80075b4:	f04f 0c03 	mov.w	ip, #3
 80075b8:	fa0c fc05 	lsl.w	ip, ip, r5
 80075bc:	ea44 040c 	orr.w	r4, r4, ip
 80075c0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80075c2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80075c6:	f10e 0e08 	add.w	lr, lr, #8
 80075ca:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80075ce:	f003 0507 	and.w	r5, r3, #7
 80075d2:	00ae      	lsls	r6, r5, #2
 80075d4:	250f      	movs	r5, #15
 80075d6:	40b5      	lsls	r5, r6
 80075d8:	ea24 0405 	bic.w	r4, r4, r5
 80075dc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075e0:	68c4      	ldr	r4, [r0, #12]
 80075e2:	ea24 040c 	bic.w	r4, r4, ip
 80075e6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80075e8:	6844      	ldr	r4, [r0, #4]
 80075ea:	ea24 0202 	bic.w	r2, r4, r2
 80075ee:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075f0:	6882      	ldr	r2, [r0, #8]
 80075f2:	ea22 020c 	bic.w	r2, r2, ip
 80075f6:	6082      	str	r2, [r0, #8]
    }

    position++;
 80075f8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 80075fa:	fa31 f203 	lsrs.w	r2, r1, r3
 80075fe:	d06a      	beq.n	80076d6 <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007600:	2201      	movs	r2, #1
 8007602:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007604:	ea12 0e01 	ands.w	lr, r2, r1
 8007608:	d0f6      	beq.n	80075f8 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800760a:	089e      	lsrs	r6, r3, #2
 800760c:	1cb5      	adds	r5, r6, #2
 800760e:	4c33      	ldr	r4, [pc, #204]	; (80076dc <HAL_GPIO_DeInit+0x148>)
 8007610:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007614:	f003 0c03 	and.w	ip, r3, #3
 8007618:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800761c:	250f      	movs	r5, #15
 800761e:	fa05 f70c 	lsl.w	r7, r5, ip
 8007622:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007624:	4d2e      	ldr	r5, [pc, #184]	; (80076e0 <HAL_GPIO_DeInit+0x14c>)
 8007626:	42a8      	cmp	r0, r5
 8007628:	d0bd      	beq.n	80075a6 <HAL_GPIO_DeInit+0x12>
 800762a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800762e:	42a8      	cmp	r0, r5
 8007630:	d021      	beq.n	8007676 <HAL_GPIO_DeInit+0xe2>
 8007632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007636:	42a8      	cmp	r0, r5
 8007638:	d01f      	beq.n	800767a <HAL_GPIO_DeInit+0xe6>
 800763a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800763e:	42a8      	cmp	r0, r5
 8007640:	d01d      	beq.n	800767e <HAL_GPIO_DeInit+0xea>
 8007642:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007646:	42a8      	cmp	r0, r5
 8007648:	d01b      	beq.n	8007682 <HAL_GPIO_DeInit+0xee>
 800764a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800764e:	42a8      	cmp	r0, r5
 8007650:	d019      	beq.n	8007686 <HAL_GPIO_DeInit+0xf2>
 8007652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007656:	42a8      	cmp	r0, r5
 8007658:	d017      	beq.n	800768a <HAL_GPIO_DeInit+0xf6>
 800765a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800765e:	42a8      	cmp	r0, r5
 8007660:	d015      	beq.n	800768e <HAL_GPIO_DeInit+0xfa>
 8007662:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007666:	42a8      	cmp	r0, r5
 8007668:	d013      	beq.n	8007692 <HAL_GPIO_DeInit+0xfe>
 800766a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800766e:	42a8      	cmp	r0, r5
 8007670:	d097      	beq.n	80075a2 <HAL_GPIO_DeInit+0xe>
 8007672:	250a      	movs	r5, #10
 8007674:	e798      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 8007676:	2501      	movs	r5, #1
 8007678:	e796      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 800767a:	2502      	movs	r5, #2
 800767c:	e794      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 800767e:	2503      	movs	r5, #3
 8007680:	e792      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 8007682:	2504      	movs	r5, #4
 8007684:	e790      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 8007686:	2505      	movs	r5, #5
 8007688:	e78e      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 800768a:	2506      	movs	r5, #6
 800768c:	e78c      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 800768e:	2507      	movs	r5, #7
 8007690:	e78a      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
 8007692:	2508      	movs	r5, #8
 8007694:	e788      	b.n	80075a8 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007696:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800769a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800769e:	ea25 050e 	bic.w	r5, r5, lr
 80076a2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80076a6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80076aa:	ea25 050e 	bic.w	r5, r5, lr
 80076ae:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80076b2:	6865      	ldr	r5, [r4, #4]
 80076b4:	ea25 050e 	bic.w	r5, r5, lr
 80076b8:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80076ba:	6825      	ldr	r5, [r4, #0]
 80076bc:	ea25 050e 	bic.w	r5, r5, lr
 80076c0:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80076c2:	f8df c018 	ldr.w	ip, [pc, #24]	; 80076dc <HAL_GPIO_DeInit+0x148>
 80076c6:	1cb4      	adds	r4, r6, #2
 80076c8:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80076cc:	ea25 0507 	bic.w	r5, r5, r7
 80076d0:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 80076d4:	e76c      	b.n	80075b0 <HAL_GPIO_DeInit+0x1c>
  }
}
 80076d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	58000400 	.word	0x58000400
 80076e0:	58020000 	.word	0x58020000

080076e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80076e4:	6903      	ldr	r3, [r0, #16]
 80076e6:	4219      	tst	r1, r3
 80076e8:	d001      	beq.n	80076ee <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80076ea:	2001      	movs	r0, #1
 80076ec:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076ee:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80076f0:	4770      	bx	lr

080076f2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076f2:	b10a      	cbz	r2, 80076f8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076f4:	6181      	str	r1, [r0, #24]
 80076f6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076f8:	0409      	lsls	r1, r1, #16
 80076fa:	6181      	str	r1, [r0, #24]
  }
}
 80076fc:	4770      	bx	lr

080076fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007700:	ea01 0203 	and.w	r2, r1, r3
 8007704:	ea21 0103 	bic.w	r1, r1, r3
 8007708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800770c:	6181      	str	r1, [r0, #24]
}
 800770e:	4770      	bx	lr

08007710 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007710:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8007712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007716:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	430b      	orrs	r3, r1
 800771c:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8007722:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
 8007728:	69c3      	ldr	r3, [r0, #28]
 800772a:	9301      	str	r3, [sp, #4]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
 800772c:	69c3      	ldr	r3, [r0, #28]
 800772e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007732:	d002      	beq.n	800773a <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
 8007734:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_ERROR;
  }
}
 8007736:	b002      	add	sp, #8
 8007738:	4770      	bx	lr
    return HAL_ERROR;
 800773a:	2001      	movs	r0, #1
 800773c:	e7fb      	b.n	8007736 <HAL_GPIO_LockPin+0x26>

0800773e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800773e:	4770      	bx	lr

08007740 <HAL_GPIO_EXTI_IRQHandler>:
{
 8007740:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	4203      	tst	r3, r0
 800774c:	d100      	bne.n	8007750 <HAL_GPIO_EXTI_IRQHandler+0x10>
}
 800774e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007754:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007758:	f7ff fff1 	bl	800773e <HAL_GPIO_EXTI_Callback>
}
 800775c:	e7f7      	b.n	800774e <HAL_GPIO_EXTI_IRQHandler+0xe>
 800775e:	bf00      	nop

08007760 <HAL_HSEM_Take>:
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_HSEM_Take+0x1c>)
 8007762:	430b      	orrs	r3, r1
 8007764:	4a06      	ldr	r2, [pc, #24]	; (8007780 <HAL_HSEM_Take+0x20>)
 8007766:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 800776a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800776e:	4293      	cmp	r3, r2
 8007770:	d001      	beq.n	8007776 <HAL_HSEM_Take+0x16>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8007772:	2001      	movs	r0, #1
 8007774:	4770      	bx	lr
    return HAL_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	80000300 	.word	0x80000300
 8007780:	58026400 	.word	0x58026400

08007784 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007784:	3020      	adds	r0, #32
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_HSEM_FastTake+0x18>)
 8007788:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <HAL_HSEM_FastTake+0x1c>)
 800778e:	429a      	cmp	r2, r3
 8007790:	d001      	beq.n	8007796 <HAL_HSEM_FastTake+0x12>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007792:	2001      	movs	r0, #1
 8007794:	4770      	bx	lr
    return HAL_OK;
 8007796:	2000      	movs	r0, #0
}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	58026400 	.word	0x58026400
 80077a0:	80000300 	.word	0x80000300

080077a4 <HAL_HSEM_IsSemTaken>:
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <HAL_HSEM_IsSemTaken+0x14>)
 80077a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	db01      	blt.n	80077b2 <HAL_HSEM_IsSemTaken+0xe>
 80077ae:	2000      	movs	r0, #0
}
 80077b0:	4770      	bx	lr
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 80077b2:	2001      	movs	r0, #1
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	58026400 	.word	0x58026400

080077bc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80077bc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80077c0:	4b01      	ldr	r3, [pc, #4]	; (80077c8 <HAL_HSEM_Release+0xc>)
 80077c2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80077c6:	4770      	bx	lr
 80077c8:	58026400 	.word	0x58026400

080077cc <HAL_HSEM_ReleaseAll>:
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
 80077cc:	0209      	lsls	r1, r1, #8
 80077ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077d2:	4b02      	ldr	r3, [pc, #8]	; (80077dc <HAL_HSEM_ReleaseAll+0x10>)
 80077d4:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
}
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	58026400 	.word	0x58026400

080077e0 <HAL_HSEM_SetClearKey>:
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
 80077e0:	4a04      	ldr	r2, [pc, #16]	; (80077f4 <HAL_HSEM_SetClearKey+0x14>)
 80077e2:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077ec:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	58026400 	.word	0x58026400

080077f8 <HAL_HSEM_GetClearKey>:
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <HAL_HSEM_GetClearKey+0xc>)
 80077fa:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
}
 80077fe:	0c00      	lsrs	r0, r0, #16
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	58026400 	.word	0x58026400

08007808 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8007808:	4a02      	ldr	r2, [pc, #8]	; (8007814 <HAL_HSEM_ActivateNotification+0xc>)
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	4303      	orrs	r3, r0
 800780e:	6013      	str	r3, [r2, #0]
#endif
}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	58026500 	.word	0x58026500

08007818 <HAL_HSEM_DeactivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
 8007818:	4a02      	ldr	r2, [pc, #8]	; (8007824 <HAL_HSEM_DeactivateNotification+0xc>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	ea23 0300 	bic.w	r3, r3, r0
 8007820:	6013      	str	r3, [r2, #0]
#endif
}
 8007822:	4770      	bx	lr
 8007824:	58026500 	.word	0x58026500

08007828 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8007828:	4770      	bx	lr

0800782a <HAL_HSEM_IRQHandler>:
{
 800782a:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <HAL_HSEM_IRQHandler+0x16>)
 800782e:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	ea22 0200 	bic.w	r2, r2, r0
 8007836:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8007838:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 800783a:	f7ff fff5 	bl	8007828 <HAL_HSEM_FreeCallback>
}
 800783e:	bd08      	pop	{r3, pc}
 8007840:	58026500 	.word	0x58026500
  UNUSED(hopamp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the function "HAL_OPAMP_MspInit()" must be implemented in the user file.
   */
}
 8007844:	4770      	bx	lr

08007846 <HAL_OPAMP_Init>:
  if(hopamp == NULL)
 8007846:	2800      	cmp	r0, #0
 8007848:	d072      	beq.n	8007930 <HAL_OPAMP_Init+0xea>
{ 
 800784a:	b510      	push	{r4, lr}
 800784c:	4604      	mov	r4, r0
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800784e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b05      	cmp	r3, #5
 8007856:	d06d      	beq.n	8007934 <HAL_OPAMP_Init+0xee>
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007858:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d06a      	beq.n	8007938 <HAL_OPAMP_Init+0xf2>
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8007862:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007866:	b90b      	cbnz	r3, 800786c <HAL_OPAMP_Init+0x26>
      hopamp->Lock = HAL_UNLOCKED;
 8007868:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    HAL_OPAMP_MspInit(hopamp);
 800786c:	4620      	mov	r0, r4
 800786e:	f7f9 faf9 	bl	8000e64 <HAL_OPAMP_MspInit>
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	6813      	ldr	r3, [r2, #0]
 8007876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800787a:	6013      	str	r3, [r2, #0]
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800787c:	68a3      	ldr	r3, [r4, #8]
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d01e      	beq.n	80078c0 <HAL_OPAMP_Init+0x7a>
    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	2b60      	cmp	r3, #96	; 0x60
 8007886:	d02c      	beq.n	80078e2 <HAL_OPAMP_Init+0x9c>
    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	b96b      	cbnz	r3, 80078a8 <HAL_OPAMP_Init+0x62>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800788c:	6821      	ldr	r1, [r4, #0]
 800788e:	6808      	ldr	r0, [r1, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_OPAMP_Init+0xf6>)
 8007892:	4002      	ands	r2, r0
 8007894:	6860      	ldr	r0, [r4, #4]
 8007896:	4303      	orrs	r3, r0
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	4303      	orrs	r3, r0
 800789c:	6920      	ldr	r0, [r4, #16]
 800789e:	4303      	orrs	r3, r0
 80078a0:	69e0      	ldr	r0, [r4, #28]
 80078a2:	4303      	orrs	r3, r0
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80078a8:	69e3      	ldr	r3, [r4, #28]
 80078aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078ae:	d025      	beq.n	80078fc <HAL_OPAMP_Init+0xb6>
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80078b0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80078b4:	b913      	cbnz	r3, 80078bc <HAL_OPAMP_Init+0x76>
      hopamp->State = HAL_OPAMP_STATE_READY;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    return status;
 80078bc:	2000      	movs	r0, #0
}
 80078be:	bd10      	pop	{r4, pc}
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	6808      	ldr	r0, [r1, #0]
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <HAL_OPAMP_Init+0xfa>)
 80078c6:	4002      	ands	r2, r0
 80078c8:	6860      	ldr	r0, [r4, #4]
 80078ca:	4303      	orrs	r3, r0
 80078cc:	6960      	ldr	r0, [r4, #20]
 80078ce:	4303      	orrs	r3, r0
 80078d0:	69a0      	ldr	r0, [r4, #24]
 80078d2:	4303      	orrs	r3, r0
 80078d4:	6920      	ldr	r0, [r4, #16]
 80078d6:	4303      	orrs	r3, r0
 80078d8:	69e0      	ldr	r0, [r4, #28]
 80078da:	4303      	orrs	r3, r0
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	e7cf      	b.n	8007882 <HAL_OPAMP_Init+0x3c>
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	4a15      	ldr	r2, [pc, #84]	; (800793c <HAL_OPAMP_Init+0xf6>)
 80078e8:	4002      	ands	r2, r0
 80078ea:	6860      	ldr	r0, [r4, #4]
 80078ec:	4303      	orrs	r3, r0
 80078ee:	6920      	ldr	r0, [r4, #16]
 80078f0:	4303      	orrs	r3, r0
 80078f2:	69e0      	ldr	r0, [r4, #28]
 80078f4:	4303      	orrs	r3, r0
 80078f6:	4313      	orrs	r3, r2
 80078f8:	600b      	str	r3, [r1, #0]
 80078fa:	e7c5      	b.n	8007888 <HAL_OPAMP_Init+0x42>
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007902:	d00a      	beq.n	800791a <HAL_OPAMP_Init+0xd4>
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8007904:	6a22      	ldr	r2, [r4, #32]
                         | (hopamp->Init.TrimmingValueN)); 
 8007906:	6a63      	ldr	r3, [r4, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8007908:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800790c:	6821      	ldr	r1, [r4, #0]
 800790e:	6848      	ldr	r0, [r1, #4]
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <HAL_OPAMP_Init+0xfe>)
 8007912:	4003      	ands	r3, r0
 8007914:	4313      	orrs	r3, r2
 8007916:	604b      	str	r3, [r1, #4]
 8007918:	e7ca      	b.n	80078b0 <HAL_OPAMP_Init+0x6a>
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800791a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                         | (hopamp->Init.TrimmingValueNHighSpeed)); 
 800791c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800791e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);     
 8007922:	6821      	ldr	r1, [r4, #0]
 8007924:	6888      	ldr	r0, [r1, #8]
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <HAL_OPAMP_Init+0xfe>)
 8007928:	4003      	ands	r3, r0
 800792a:	4313      	orrs	r3, r2
 800792c:	608b      	str	r3, [r1, #8]
 800792e:	e7bf      	b.n	80078b0 <HAL_OPAMP_Init+0x6a>
    return HAL_ERROR;
 8007930:	2001      	movs	r0, #1
}
 8007932:	4770      	bx	lr
    return HAL_ERROR;
 8007934:	2001      	movs	r0, #1
 8007936:	e7c2      	b.n	80078be <HAL_OPAMP_Init+0x78>
    return HAL_ERROR;
 8007938:	2001      	movs	r0, #1
 800793a:	e7c0      	b.n	80078be <HAL_OPAMP_Init+0x78>
 800793c:	fffbfe93 	.word	0xfffbfe93
 8007940:	fff83e93 	.word	0xfff83e93
 8007944:	ffffe0e0 	.word	0xffffe0e0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hopamp);
  /* NOTE : This function should not be modified, when the callback is needed,
            the function "HAL_OPAMP_MspDeInit()" must be implemented in the user file.
   */
}
 8007948:	4770      	bx	lr

0800794a <HAL_OPAMP_DeInit>:
  if(hopamp == NULL)
 800794a:	b198      	cbz	r0, 8007974 <HAL_OPAMP_DeInit+0x2a>
{
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4605      	mov	r5, r0
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007950:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d101      	bne.n	800795e <HAL_OPAMP_DeInit+0x14>
    status = HAL_ERROR;
 800795a:	2001      	movs	r0, #1
}
 800795c:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hopamp->Instance->CSR, OPAMP_CSR_RESET_VALUE);
 800795e:	6803      	ldr	r3, [r0, #0]
 8007960:	2400      	movs	r4, #0
 8007962:	601c      	str	r4, [r3, #0]
    HAL_OPAMP_MspDeInit(hopamp);
 8007964:	f7f9 facc 	bl	8000f00 <HAL_OPAMP_MspDeInit>
    hopamp->State = HAL_OPAMP_STATE_RESET;   
 8007968:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    __HAL_UNLOCK(hopamp);
 800796c:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
  HAL_StatusTypeDef status = HAL_OK;
 8007970:	4620      	mov	r0, r4
 8007972:	e7f3      	b.n	800795c <HAL_OPAMP_DeInit+0x12>
    status = HAL_ERROR;
 8007974:	2001      	movs	r0, #1
}
 8007976:	4770      	bx	lr

08007978 <HAL_OPAMP_Start>:
{ 
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8007978:	b1a8      	cbz	r0, 80079a6 <HAL_OPAMP_Start+0x2e>
  {
    status = HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800797a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b05      	cmp	r3, #5
 8007982:	d012      	beq.n	80079aa <HAL_OPAMP_Start+0x32>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
    
    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8007984:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b01      	cmp	r3, #1
 800798c:	d001      	beq.n	8007992 <HAL_OPAMP_Start+0x1a>
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
    }
    else
    {
      status = HAL_ERROR;
 800798e:	2001      	movs	r0, #1
    }
    
   }
  return status;
}
 8007990:	4770      	bx	lr
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007992:	6801      	ldr	r1, [r0, #0]
 8007994:	680b      	ldr	r3, [r1, #0]
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	600b      	str	r3, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
 800799c:	2304      	movs	r3, #4
 800799e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  HAL_StatusTypeDef status = HAL_OK;
 80079a2:	2000      	movs	r0, #0
 80079a4:	4770      	bx	lr
    status = HAL_ERROR;
 80079a6:	2001      	movs	r0, #1
 80079a8:	4770      	bx	lr
    status = HAL_ERROR;
 80079aa:	2001      	movs	r0, #1
 80079ac:	4770      	bx	lr

080079ae <HAL_OPAMP_Stop>:
  HAL_StatusTypeDef status = HAL_OK;
    
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  /* Check if OPAMP calibration ongoing */
  if(hopamp == NULL)
 80079ae:	b1d0      	cbz	r0, 80079e6 <HAL_OPAMP_Stop+0x38>
  {
    status = HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80079b0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d017      	beq.n	80079ea <HAL_OPAMP_Stop+0x3c>
  {
    status = HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY) 
 80079ba:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d014      	beq.n	80079ee <HAL_OPAMP_Stop+0x40>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_BUSY)
 80079c4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d001      	beq.n	80079d2 <HAL_OPAMP_Stop+0x24>
      /* From  HAL_OPAMP_STATE_BUSY to HAL_OPAMP_STATE_READY*/
      hopamp->State = HAL_OPAMP_STATE_READY;
    }
    else
    {
      status = HAL_ERROR;
 80079ce:	2001      	movs	r0, #1
    }
  }
  return status;
}
 80079d0:	4770      	bx	lr
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN); 
 80079d2:	6801      	ldr	r1, [r0, #0]
 80079d4:	680b      	ldr	r3, [r1, #0]
 80079d6:	f023 0301 	bic.w	r3, r3, #1
 80079da:	600b      	str	r3, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_READY;
 80079dc:	2301      	movs	r3, #1
 80079de:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  HAL_StatusTypeDef status = HAL_OK;
 80079e2:	2000      	movs	r0, #0
 80079e4:	4770      	bx	lr
    status = HAL_ERROR;
 80079e6:	2001      	movs	r0, #1
 80079e8:	4770      	bx	lr
    status = HAL_ERROR;
 80079ea:	2001      	movs	r0, #1
 80079ec:	4770      	bx	lr
    status = HAL_ERROR;
 80079ee:	2001      	movs	r0, #1
 80079f0:	4770      	bx	lr

080079f2 <HAL_OPAMP_SelfCalibrate>:
  
  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or HSOTR */
    
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f000 80bf 	beq.w	8007b76 <HAL_OPAMP_SelfCalibrate+0x184>
{ 
 80079f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fc:	4604      	mov	r4, r0
  {
    status = HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80079fe:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b05      	cmp	r3, #5
 8007a06:	f000 80b8 	beq.w	8007b7a <HAL_OPAMP_SelfCalibrate+0x188>
  }
  else
  {
  
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8007a0a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d002      	beq.n	8007a1a <HAL_OPAMP_SelfCalibrate+0x28>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */ 
      status = HAL_ERROR;
 8007a14:	2001      	movs	r0, #1
    }   
  }
  return status;
}
 8007a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_VMSEL);
 8007a1a:	6803      	ldr	r3, [r0, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	f002 0960 	and.w	r9, r2, #96	; 0x60
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_VMSEL, OPAMP_STANDALONE_MODE); 
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a28:	601a      	str	r2, [r3, #0]
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8007a2a:	6802      	ldr	r2, [r0, #0]
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a32:	6013      	str	r3, [r2, #0]
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMAL)
 8007a34:	6843      	ldr	r3, [r0, #4]
 8007a36:	b9cb      	cbnz	r3, 8007a6c <HAL_OPAMP_SelfCalibrate+0x7a>
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8007a38:	6805      	ldr	r5, [r0, #0]
 8007a3a:	3504      	adds	r5, #4
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a44:	6013      	str	r3, [r2, #0]
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	6813      	ldr	r3, [r2, #0]
 8007a4a:	f043 0302 	orr.w	r3, r3, #2
 8007a4e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	6813      	ldr	r3, [r2, #0]
 8007a54:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007a58:	6013      	str	r3, [r2, #0]
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	6813      	ldr	r3, [r2, #0]
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	6013      	str	r3, [r2, #0]
      delta = 8U;
 8007a64:	2608      	movs	r6, #8
      trimmingvaluen = 16U;
 8007a66:	f04f 0810 	mov.w	r8, #16
      while (delta != 0U)
 8007a6a:	e005      	b.n	8007a78 <HAL_OPAMP_SelfCalibrate+0x86>
        tmp_opamp_reg_trimming = &hopamp->Instance->HSOTR;
 8007a6c:	6805      	ldr	r5, [r0, #0]
 8007a6e:	3508      	adds	r5, #8
 8007a70:	e7e4      	b.n	8007a3c <HAL_OPAMP_SelfCalibrate+0x4a>
          trimmingvaluen -= delta;
 8007a72:	eba8 0806 	sub.w	r8, r8, r6
        delta >>= 1;
 8007a76:	0876      	lsrs	r6, r6, #1
      while (delta != 0U)
 8007a78:	b17e      	cbz	r6, 8007a9a <HAL_OPAMP_SelfCalibrate+0xa8>
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	f023 031f 	bic.w	r3, r3, #31
 8007a80:	ea43 0308 	orr.w	r3, r3, r8
 8007a84:	602b      	str	r3, [r5, #0]
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8007a86:	2002      	movs	r0, #2
 8007a88:	f7f9 fb8c 	bl	80011a4 <HAL_Delay>
        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U) 
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a94:	d0ed      	beq.n	8007a72 <HAL_OPAMP_SelfCalibrate+0x80>
          trimmingvaluen += delta;
 8007a96:	44b0      	add	r8, r6
 8007a98:	e7ed      	b.n	8007a76 <HAL_OPAMP_SelfCalibrate+0x84>
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	f023 031f 	bic.w	r3, r3, #31
 8007aa0:	ea43 0308 	orr.w	r3, r3, r8
 8007aa4:	602b      	str	r3, [r5, #0]
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8007aa6:	2002      	movs	r0, #2
 8007aa8:	f7f9 fb7c 	bl	80011a4 <HAL_Delay>
      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) != 0U)
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ab4:	d007      	beq.n	8007ac6 <HAL_OPAMP_SelfCalibrate+0xd4>
        trimmingvaluen++;
 8007ab6:	f108 0801 	add.w	r8, r8, #1
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	f023 031f 	bic.w	r3, r3, #31
 8007ac0:	ea43 0308 	orr.w	r3, r3, r8
 8007ac4:	602b      	str	r3, [r5, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	6813      	ldr	r3, [r2, #0]
 8007aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ad2:	6013      	str	r3, [r2, #0]
      delta = 8U;
 8007ad4:	2608      	movs	r6, #8
      trimmingvaluep = 16U; 
 8007ad6:	2710      	movs	r7, #16
      while (delta != 0U)
 8007ad8:	e001      	b.n	8007ade <HAL_OPAMP_SelfCalibrate+0xec>
          trimmingvaluep -= delta;
 8007ada:	1bbf      	subs	r7, r7, r6
        delta >>= 1U;
 8007adc:	0876      	lsrs	r6, r6, #1
      while (delta != 0U)
 8007ade:	b17e      	cbz	r6, 8007b00 <HAL_OPAMP_SelfCalibrate+0x10e>
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007ae6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007aea:	602b      	str	r3, [r5, #0]
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8007aec:	2002      	movs	r0, #2
 8007aee:	f7f9 fb59 	bl	80011a4 <HAL_Delay>
        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)!= 0U) 
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007afa:	d0ee      	beq.n	8007ada <HAL_OPAMP_SelfCalibrate+0xe8>
          trimmingvaluep += delta;
 8007afc:	4437      	add	r7, r6
 8007afe:	e7ed      	b.n	8007adc <HAL_OPAMP_SelfCalibrate+0xea>
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007b06:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007b0a:	602b      	str	r3, [r5, #0]
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8007b0c:	2002      	movs	r0, #2
 8007b0e:	f7f9 fb49 	bl	80011a4 <HAL_Delay>
      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U) 
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007b1a:	d006      	beq.n	8007b2a <HAL_OPAMP_SelfCalibrate+0x138>
        trimmingvaluep++;
 8007b1c:	3701      	adds	r7, #1
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007b24:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007b28:	602b      	str	r3, [r5, #0]
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	6813      	ldr	r3, [r2, #0]
 8007b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b32:	6013      	str	r3, [r2, #0]
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	6813      	ldr	r3, [r2, #0]
 8007b42:	f023 0302 	bic.w	r3, r3, #2
 8007b46:	6013      	str	r3, [r2, #0]
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007b48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b4c:	61e3      	str	r3, [r4, #28]
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b54:	d00b      	beq.n	8007b6e <HAL_OPAMP_SelfCalibrate+0x17c>
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8007b56:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8007b5a:	6227      	str	r7, [r4, #32]
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_VMSEL, opampmode);
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007b64:	ea43 0309 	orr.w	r3, r3, r9
 8007b68:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e753      	b.n	8007a16 <HAL_OPAMP_SelfCalibrate+0x24>
        hopamp->Init.TrimmingValueNHighSpeed = trimmingvaluen;
 8007b6e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
        hopamp->Init.TrimmingValuePHighSpeed = trimmingvaluep;
 8007b72:	62a7      	str	r7, [r4, #40]	; 0x28
 8007b74:	e7f2      	b.n	8007b5c <HAL_OPAMP_SelfCalibrate+0x16a>
    status = HAL_ERROR;
 8007b76:	2001      	movs	r0, #1
}
 8007b78:	4770      	bx	lr
    status = HAL_ERROR;
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e74b      	b.n	8007a16 <HAL_OPAMP_SelfCalibrate+0x24>

08007b7e <HAL_OPAMP_Lock>:

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  /* OPAMP can be locked when enabled and running in normal mode */ 
  /*   It is meaningless otherwise */
  if(hopamp == NULL)
 8007b7e:	b158      	cbz	r0, 8007b98 <HAL_OPAMP_Lock+0x1a>
  {
    status = HAL_ERROR;
  }
  
  else if(hopamp->State != HAL_OPAMP_STATE_BUSY)
 8007b80:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d001      	beq.n	8007b8e <HAL_OPAMP_Lock+0x10>
  {
    status = HAL_ERROR;
 8007b8a:	2001      	movs	r0, #1
    
   /* OPAMP state changed to locked */
    hopamp->State = HAL_OPAMP_STATE_BUSYLOCKED;
  }  
  return status; 
}
 8007b8c:	4770      	bx	lr
    hopamp->State = HAL_OPAMP_STATE_BUSYLOCKED;
 8007b8e:	2305      	movs	r3, #5
 8007b90:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  HAL_StatusTypeDef status = HAL_OK;
 8007b94:	2000      	movs	r0, #0
 8007b96:	4770      	bx	lr
    status = HAL_ERROR;
 8007b98:	2001      	movs	r0, #1
 8007b9a:	4770      	bx	lr

08007b9c <HAL_OPAMP_GetTrimOffset>:
  HAL_OPAMP_TrimmingValueTypeDef trimmingvalue;
  __IO uint32_t* tmp_opamp_reg_trimming;  /* Selection of register of trimming depending on power mode: OTR or LPOTR */
  
  /* Check the OPAMP handle allocation */
  /* Value can be retrieved in HAL_OPAMP_STATE_READY state */
  if(hopamp == NULL)
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	b1c0      	cbz	r0, 8007bd2 <HAL_OPAMP_GetTrimOffset+0x36>
  {
    return OPAMP_FACTORYTRIMMING_DUMMY;
  }
  
  if(hopamp->State == HAL_OPAMP_STATE_READY)
 8007ba0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d116      	bne.n	8007bd8 <HAL_OPAMP_GetTrimOffset+0x3c>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
    assert_param(IS_OPAMP_FACTORYTRIMMING(trimmingoffset));
    assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));
    
    /* Check the trimming mode */
    if (READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_USERTRIM)!= 0U) 
 8007baa:	6803      	ldr	r3, [r0, #0]
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007bb2:	d114      	bne.n	8007bde <HAL_OPAMP_GetTrimOffset+0x42>
      trimmingvalue = OPAMP_FACTORYTRIMMING_DUMMY;
    }
    else
    {
      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMAL)
 8007bb4:	6852      	ldr	r2, [r2, #4]
 8007bb6:	b932      	cbnz	r2, 8007bc6 <HAL_OPAMP_GetTrimOffset+0x2a>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8007bb8:	3304      	adds	r3, #4
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->HSOTR;
      }      
    
      /* Get factory trimming  */
      if (trimmingoffset == OPAMP_FACTORYTRIMMING_P)
 8007bba:	2901      	cmp	r1, #1
 8007bbc:	d005      	beq.n	8007bca <HAL_OPAMP_GetTrimOffset+0x2e>
        trimmingvalue = ((*tmp_opamp_reg_trimming) & OPAMP_OTR_TRIMOFFSETP) >> OPAMP_INPUT_NONINVERTING;
      }
      else
      {
        /* OPAMP_FACTORYTRIMMING_N */
        trimmingvalue = (*tmp_opamp_reg_trimming) & OPAMP_OTR_TRIMOFFSETN;
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	f000 001f 	and.w	r0, r0, #31
 8007bc4:	4770      	bx	lr
        tmp_opamp_reg_trimming = &hopamp->Instance->HSOTR;
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	e7f7      	b.n	8007bba <HAL_OPAMP_GetTrimOffset+0x1e>
        trimmingvalue = ((*tmp_opamp_reg_trimming) & OPAMP_OTR_TRIMOFFSETP) >> OPAMP_INPUT_NONINVERTING;
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8007bd0:	4770      	bx	lr
    return OPAMP_FACTORYTRIMMING_DUMMY;
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	4770      	bx	lr
      }
    }
  }
  else
  {
    return OPAMP_FACTORYTRIMMING_DUMMY;
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	4770      	bx	lr
      trimmingvalue = OPAMP_FACTORYTRIMMING_DUMMY;
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
  }
  
  return trimmingvalue;
}
 8007be2:	4770      	bx	lr

08007be4 <HAL_OPAMP_GetState>:
  * @retval HAL state
  */
HAL_OPAMP_StateTypeDef HAL_OPAMP_GetState(OPAMP_HandleTypeDef *hopamp)
{
  /* Check the OPAMP handle allocation */
  if(hopamp == NULL)
 8007be4:	b118      	cbz	r0, 8007bee <HAL_OPAMP_GetState+0xa>

  /* Check the parameter */
  assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

  /* Return OPAMP handle state */
  return hopamp->State;
 8007be6:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 8007bea:	b2c0      	uxtb	r0, r0
 8007bec:	4770      	bx	lr
    return HAL_OPAMP_STATE_RESET;
 8007bee:	2000      	movs	r0, #0
}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <HAL_PWR_DeInit>:
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
}
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_PWR_EnableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007bf6:	4a03      	ldr	r2, [pc, #12]	; (8007c04 <HAL_PWR_EnableBkUpAccess+0xe>)
 8007bf8:	6813      	ldr	r3, [r2, #0]
 8007bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	58024800 	.word	0x58024800

08007c08 <HAL_PWR_DisableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
 8007c08:	4a02      	ldr	r2, [pc, #8]	; (8007c14 <HAL_PWR_DisableBkUpAccess+0xc>)
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c10:	6013      	str	r3, [r2, #0]
}
 8007c12:	4770      	bx	lr
 8007c14:	58024800 	.word	0x58024800

08007c18 <HAL_PWR_ConfigPVD>:
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8007c18:	4602      	mov	r2, r0
 8007c1a:	b320      	cbz	r0, 8007c66 <HAL_PWR_ConfigPVD+0x4e>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8007c1c:	4912      	ldr	r1, [pc, #72]	; (8007c68 <HAL_PWR_ConfigPVD+0x50>)
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007c24:	6800      	ldr	r0, [r0, #0]
 8007c26:	4303      	orrs	r3, r0
 8007c28:	600b      	str	r3, [r1, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8007c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c34:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c3c:	6059      	str	r1, [r3, #4]
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007c3e:	6853      	ldr	r3, [r2, #4]
 8007c40:	f013 0f01 	tst.w	r3, #1
 8007c44:	d005      	beq.n	8007c52 <HAL_PWR_ConfigPVD+0x3a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8007c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c4a:	680b      	ldr	r3, [r1, #0]
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c50:	600b      	str	r3, [r1, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8007c52:	6853      	ldr	r3, [r2, #4]
 8007c54:	f013 0f02 	tst.w	r3, #2
 8007c58:	d005      	beq.n	8007c66 <HAL_PWR_ConfigPVD+0x4e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8007c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c5e:	6853      	ldr	r3, [r2, #4]
 8007c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c64:	6053      	str	r3, [r2, #4]
  }
}
 8007c66:	4770      	bx	lr
 8007c68:	58024800 	.word	0x58024800

08007c6c <HAL_PWR_EnablePVD>:
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8007c6c:	4a02      	ldr	r2, [pc, #8]	; (8007c78 <HAL_PWR_EnablePVD+0xc>)
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	f043 0310 	orr.w	r3, r3, #16
 8007c74:	6013      	str	r3, [r2, #0]
}
 8007c76:	4770      	bx	lr
 8007c78:	58024800 	.word	0x58024800

08007c7c <HAL_PWR_DisablePVD>:
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8007c7c:	4a02      	ldr	r2, [pc, #8]	; (8007c88 <HAL_PWR_DisablePVD+0xc>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	4770      	bx	lr
 8007c88:	58024800 	.word	0x58024800

08007c8c <HAL_PWR_EnableWakeUpPin>:

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8007c8c:	4a03      	ldr	r2, [pc, #12]	; (8007c9c <HAL_PWR_EnableWakeUpPin+0x10>)
 8007c8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_PWR_EnableWakeUpPin+0x14>)
 8007c92:	400b      	ands	r3, r1
 8007c94:	4303      	orrs	r3, r0
 8007c96:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	58024800 	.word	0x58024800
 8007ca0:	f000c0c0 	.word	0xf000c0c0

08007ca4 <HAL_PWR_DisableWakeUpPin>:
{
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <HAL_PWR_DisableWakeUpPin+0x10>)
 8007ca6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007ca8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007cac:	ea23 0300 	bic.w	r3, r3, r0
 8007cb0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007cb2:	4770      	bx	lr
 8007cb4:	58024800 	.word	0x58024800

08007cb8 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <HAL_PWR_EnterSLEEPMode+0x18>)
 8007cba:	6913      	ldr	r3, [r2, #16]
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007cc2:	2901      	cmp	r1, #1
 8007cc4:	d001      	beq.n	8007cca <HAL_PWR_EnterSLEEPMode+0x12>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007cc6:	bf20      	wfe
  }
}
 8007cc8:	4770      	bx	lr
    __WFI ();
 8007cca:	bf30      	wfi
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000ed00 	.word	0xe000ed00

08007cd4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007cd8:	4a14      	ldr	r2, [pc, #80]	; (8007d2c <HAL_PWR_EnterSTOPMode+0x58>)
 8007cda:	6813      	ldr	r3, [r2, #0]
 8007cdc:	f023 0301 	bic.w	r3, r3, #1
 8007ce0:	4303      	orrs	r3, r0
 8007ce2:	6013      	str	r3, [r2, #0]

  /* Configure the PWR mode for the different Domains */
#if defined (DUAL_CORE)
  /* Check CPU ID */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8007ce4:	f7fc ff2b 	bl	8004b3e <HAL_GetCurrentCPUID>
 8007ce8:	2803      	cmp	r0, #3
 8007cea:	d016      	beq.n	8007d1a <HAL_PWR_EnterSTOPMode+0x46>
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
  }
  else
  {
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
 8007cec:	4a0f      	ldr	r2, [pc, #60]	; (8007d2c <HAL_PWR_EnterSTOPMode+0x58>)
 8007cee:	6913      	ldr	r3, [r2, #16]
 8007cf0:	f023 0306 	bic.w	r3, r3, #6
 8007cf4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007cf6:	4a0e      	ldr	r2, [pc, #56]	; (8007d30 <HAL_PWR_EnterSTOPMode+0x5c>)
 8007cf8:	6913      	ldr	r3, [r2, #16]
 8007cfa:	f043 0304 	orr.w	r3, r3, #4
 8007cfe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d04:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007d08:	2c01      	cmp	r4, #1
 8007d0a:	d00c      	beq.n	8007d26 <HAL_PWR_EnterSTOPMode+0x52>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007d0c:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_PWR_EnterSTOPMode+0x5c>)
 8007d10:	6913      	ldr	r3, [r2, #16]
 8007d12:	f023 0304 	bic.w	r3, r3, #4
 8007d16:	6113      	str	r3, [r2, #16]
}
 8007d18:	bd10      	pop	{r4, pc}
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007d1a:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <HAL_PWR_EnterSTOPMode+0x58>)
 8007d1c:	6913      	ldr	r3, [r2, #16]
 8007d1e:	f023 0305 	bic.w	r3, r3, #5
 8007d22:	6113      	str	r3, [r2, #16]
 8007d24:	e7e7      	b.n	8007cf6 <HAL_PWR_EnterSTOPMode+0x22>
    __WFI ();
 8007d26:	bf30      	wfi
 8007d28:	e7f1      	b.n	8007d0e <HAL_PWR_EnterSTOPMode+0x3a>
 8007d2a:	bf00      	nop
 8007d2c:	58024800 	.word	0x58024800
 8007d30:	e000ed00 	.word	0xe000ed00

08007d34 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
 8007d34:	b508      	push	{r3, lr}
  /* Configure the PWR mode for the different Domains */
#if defined (DUAL_CORE)
  /* Check CPU ID */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8007d36:	f7fc ff02 	bl	8004b3e <HAL_GetCurrentCPUID>
 8007d3a:	2803      	cmp	r0, #3
 8007d3c:	d013      	beq.n	8007d66 <HAL_PWR_EnterSTANDBYMode+0x32>
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D1 | PWR_CPU2CR_PDDS_D3));
  }
  else
  {
    /* Enter DSTANDBY mode when Cortex-M4 enters DEEP-SLEEP */
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <HAL_PWR_EnterSTANDBYMode+0x48>)
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	f042 0206 	orr.w	r2, r2, #6
 8007d46:	611a      	str	r2, [r3, #16]
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
 8007d48:	695a      	ldr	r2, [r3, #20]
 8007d4a:	f042 0206 	orr.w	r2, r2, #6
 8007d4e:	615a      	str	r2, [r3, #20]
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007d50:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <HAL_PWR_EnterSTANDBYMode+0x4c>)
 8007d52:	6913      	ldr	r3, [r2, #16]
 8007d54:	f043 0304 	orr.w	r3, r3, #4
 8007d58:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d5e:	f3bf 8f6f 	isb	sy
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
 8007d62:	bf30      	wfi
}
 8007d64:	bd08      	pop	{r3, pc}
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <HAL_PWR_EnterSTANDBYMode+0x48>)
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	f042 0205 	orr.w	r2, r2, #5
 8007d6e:	611a      	str	r2, [r3, #16]
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D1 | PWR_CPU2CR_PDDS_D3));
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	f042 0205 	orr.w	r2, r2, #5
 8007d76:	615a      	str	r2, [r3, #20]
 8007d78:	e7ea      	b.n	8007d50 <HAL_PWR_EnterSTANDBYMode+0x1c>
 8007d7a:	bf00      	nop
 8007d7c:	58024800 	.word	0x58024800
 8007d80:	e000ed00 	.word	0xe000ed00

08007d84 <HAL_PWR_EnableSleepOnExit>:
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 8007d84:	4a02      	ldr	r2, [pc, #8]	; (8007d90 <HAL_PWR_EnableSleepOnExit+0xc>)
 8007d86:	6913      	ldr	r3, [r2, #16]
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	6113      	str	r3, [r2, #16]
}
 8007d8e:	4770      	bx	lr
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
 8007d94:	4a02      	ldr	r2, [pc, #8]	; (8007da0 <HAL_PWR_DisableSleepOnExit+0xc>)
 8007d96:	6913      	ldr	r3, [r2, #16]
 8007d98:	f023 0302 	bic.w	r3, r3, #2
 8007d9c:	6113      	str	r3, [r2, #16]
}
 8007d9e:	4770      	bx	lr
 8007da0:	e000ed00 	.word	0xe000ed00

08007da4 <HAL_PWR_EnableSEVOnPend>:
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 8007da4:	4a02      	ldr	r2, [pc, #8]	; (8007db0 <HAL_PWR_EnableSEVOnPend+0xc>)
 8007da6:	6913      	ldr	r3, [r2, #16]
 8007da8:	f043 0310 	orr.w	r3, r3, #16
 8007dac:	6113      	str	r3, [r2, #16]
}
 8007dae:	4770      	bx	lr
 8007db0:	e000ed00 	.word	0xe000ed00

08007db4 <HAL_PWR_DisableSEVOnPend>:
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
 8007db4:	4a02      	ldr	r2, [pc, #8]	; (8007dc0 <HAL_PWR_DisableSEVOnPend+0xc>)
 8007db6:	6913      	ldr	r3, [r2, #16]
 8007db8:	f023 0310 	bic.w	r3, r3, #16
 8007dbc:	6113      	str	r3, [r2, #16]
}
 8007dbe:	4770      	bx	lr
 8007dc0:	e000ed00 	.word	0xe000ed00

08007dc4 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_PWR_PVD_IRQHandler>:
{
 8007dc6:	b508      	push	{r3, lr}
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8007dc8:	f7fc feb9 	bl	8004b3e <HAL_GetCurrentCPUID>
 8007dcc:	2803      	cmp	r0, #3
 8007dce:	d007      	beq.n	8007de0 <HAL_PWR_PVD_IRQHandler+0x1a>
    if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
 8007dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007dd8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007ddc:	d112      	bne.n	8007e04 <HAL_PWR_PVD_IRQHandler+0x3e>
}
 8007dde:	bd08      	pop	{r3, pc}
    if(__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8007de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007dec:	d0f7      	beq.n	8007dde <HAL_PWR_PVD_IRQHandler+0x18>
      __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8007dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007df2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      HAL_PWR_PVDCallback ();
 8007dfe:	f7ff ffe1 	bl	8007dc4 <HAL_PWR_PVDCallback>
 8007e02:	e7ec      	b.n	8007dde <HAL_PWR_PVD_IRQHandler+0x18>
      __HAL_PWR_PVD_EXTID2_CLEAR_FLAG ();
 8007e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e08:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8007e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e10:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
      HAL_PWR_PVDCallback ();
 8007e14:	f7ff ffd6 	bl	8007dc4 <HAL_PWR_PVDCallback>
}
 8007e18:	e7e1      	b.n	8007dde <HAL_PWR_PVD_IRQHandler+0x18>
 8007e1a:	bf00      	nop

08007e1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007e20:	4b22      	ldr	r3, [pc, #136]	; (8007eac <HAL_PWREx_ConfigSupply+0x90>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d007      	beq.n	8007e3c <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <HAL_PWREx_ConfigSupply+0x90>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e34:	4283      	cmp	r3, r0
 8007e36:	d036      	beq.n	8007ea6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e38:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e3c:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <HAL_PWREx_ConfigSupply+0x90>)
 8007e3e:	68d3      	ldr	r3, [r2, #12]
 8007e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e44:	4303      	orrs	r3, r0
 8007e46:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8007e48:	f7f9 f984 	bl	8001154 <HAL_GetTick>
 8007e4c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <HAL_PWREx_ConfigSupply+0x90>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007e56:	d107      	bne.n	8007e68 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e58:	f7f9 f97c 	bl	8001154 <HAL_GetTick>
 8007e5c:	1b43      	subs	r3, r0, r5
 8007e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e62:	d9f4      	bls.n	8007e4e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8007e64:	2001      	movs	r0, #1
 8007e66:	e7e8      	b.n	8007e3a <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007e68:	2c2e      	cmp	r4, #46	; 0x2e
 8007e6a:	bf18      	it	ne
 8007e6c:	2c1e      	cmpne	r4, #30
 8007e6e:	d008      	beq.n	8007e82 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8007e70:	2c2d      	cmp	r4, #45	; 0x2d
 8007e72:	bf14      	ite	ne
 8007e74:	2300      	movne	r3, #0
 8007e76:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007e78:	2c1d      	cmp	r4, #29
 8007e7a:	d002      	beq.n	8007e82 <HAL_PWREx_ConfigSupply+0x66>
 8007e7c:	b90b      	cbnz	r3, 8007e82 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e7db      	b.n	8007e3a <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8007e82:	f7f9 f967 	bl	8001154 <HAL_GetTick>
 8007e86:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e88:	4b08      	ldr	r3, [pc, #32]	; (8007eac <HAL_PWREx_ConfigSupply+0x90>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007e90:	d107      	bne.n	8007ea2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e92:	f7f9 f95f 	bl	8001154 <HAL_GetTick>
 8007e96:	1b00      	subs	r0, r0, r4
 8007e98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e9c:	d9f4      	bls.n	8007e88 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e7cb      	b.n	8007e3a <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7c9      	b.n	8007e3a <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e7c7      	b.n	8007e3a <HAL_PWREx_ConfigSupply+0x1e>
 8007eaa:	bf00      	nop
 8007eac:	58024800 	.word	0x58024800

08007eb0 <HAL_PWREx_GetSupplyConfig>:
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <HAL_PWREx_GetSupplyConfig+0xc>)
 8007eb2:	68d8      	ldr	r0, [r3, #12]
}
 8007eb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	58024800 	.word	0x58024800

08007ec0 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
 8007ec0:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 8007ec2:	4b32      	ldr	r3, [pc, #200]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	d05c      	beq.n	8007f88 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8007ece:	4604      	mov	r4, r0
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 8007ed0:	bb08      	cbnz	r0, 8007f16 <HAL_PWREx_ControlVoltageScaling+0x56>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 8007ed2:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f013 0f02 	tst.w	r3, #2
 8007eda:	d101      	bne.n	8007ee0 <HAL_PWREx_ControlVoltageScaling+0x20>
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
 8007edc:	2001      	movs	r0, #1
 8007ede:	e052      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0xc6>
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ee0:	4a2a      	ldr	r2, [pc, #168]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007ee2:	6993      	ldr	r3, [r2, #24]
 8007ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ee8:	6193      	str	r3, [r2, #24]
      tickstart = HAL_GetTick ();
 8007eea:	f7f9 f933 	bl	8001154 <HAL_GetTick>
 8007eee:	4604      	mov	r4, r0
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ef0:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007ef8:	d107      	bne.n	8007f0a <HAL_PWREx_ControlVoltageScaling+0x4a>
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007efa:	f7f9 f92b 	bl	8001154 <HAL_GetTick>
 8007efe:	1b00      	subs	r0, r0, r4
 8007f00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007f04:	d9f4      	bls.n	8007ef0 <HAL_PWREx_ControlVoltageScaling+0x30>
          return HAL_ERROR;
 8007f06:	2001      	movs	r0, #1
 8007f08:	e03d      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0xc6>
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007f0a:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8007f0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f14:	e00c      	b.n	8007f30 <HAL_PWREx_ControlVoltageScaling+0x70>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f16:	4b1d      	ldr	r3, [pc, #116]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f22:	d015      	beq.n	8007f50 <HAL_PWREx_ControlVoltageScaling+0x90>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007f26:	6998      	ldr	r0, [r3, #24]
 8007f28:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8007f2c:	4304      	orrs	r4, r0
 8007f2e:	619c      	str	r4, [r3, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f30:	f7f9 f910 	bl	8001154 <HAL_GetTick>
 8007f34:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f36:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007f3e:	d121      	bne.n	8007f84 <HAL_PWREx_ControlVoltageScaling+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f40:	f7f9 f908 	bl	8001154 <HAL_GetTick>
 8007f44:	1b00      	subs	r0, r0, r4
 8007f46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007f4a:	d9f4      	bls.n	8007f36 <HAL_PWREx_ControlVoltageScaling+0x76>
    {
      return HAL_ERROR;
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e01a      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0xc6>
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	f013 0f01 	tst.w	r3, #1
 8007f58:	d0e4      	beq.n	8007f24 <HAL_PWREx_ControlVoltageScaling+0x64>
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 8007f5a:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <HAL_PWREx_ControlVoltageScaling+0xd0>)
 8007f5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	62d3      	str	r3, [r2, #44]	; 0x2c
        tickstart = HAL_GetTick ();
 8007f64:	f7f9 f8f6 	bl	8001154 <HAL_GetTick>
 8007f68:	4605      	mov	r5, r0
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f6a:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <HAL_PWREx_ControlVoltageScaling+0xcc>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007f72:	d1d7      	bne.n	8007f24 <HAL_PWREx_ControlVoltageScaling+0x64>
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f74:	f7f9 f8ee 	bl	8001154 <HAL_GetTick>
 8007f78:	1b40      	subs	r0, r0, r5
 8007f7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007f7e:	d9f4      	bls.n	8007f6a <HAL_PWREx_ControlVoltageScaling+0xaa>
            return HAL_ERROR;
 8007f80:	2001      	movs	r0, #1
 8007f82:	e000      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0xc6>
    }
  }

  return HAL_OK;
 8007f84:	2000      	movs	r0, #0
}
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_OK;
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7fc      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0xc6>
 8007f8c:	58024800 	.word	0x58024800
 8007f90:	58000400 	.word	0x58000400

08007f94 <HAL_PWREx_GetVoltageRange>:
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 8007f94:	4b02      	ldr	r3, [pc, #8]	; (8007fa0 <HAL_PWREx_GetVoltageRange+0xc>)
 8007f96:	6858      	ldr	r0, [r3, #4]
}
 8007f98:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	58024800 	.word	0x58024800

08007fa4 <HAL_PWREx_ControlStopModeVoltageScaling>:
{
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 8007fa4:	4a03      	ldr	r2, [pc, #12]	; (8007fb4 <HAL_PWREx_ControlStopModeVoltageScaling+0x10>)
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007fac:	4303      	orrs	r3, r0
 8007fae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
}
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	4770      	bx	lr
 8007fb4:	58024800 	.word	0x58024800

08007fb8 <HAL_PWREx_GetStopModeVoltageRange>:
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <HAL_PWREx_GetStopModeVoltageRange+0xc>)
 8007fba:	6818      	ldr	r0, [r3, #0]
}
 8007fbc:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	58024800 	.word	0x58024800

08007fc8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	460d      	mov	r5, r1
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007fcc:	4c28      	ldr	r4, [pc, #160]	; (8008070 <HAL_PWREx_EnterSTOPMode+0xa8>)
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	f023 0301 	bic.w	r3, r3, #1
 8007fd4:	4303      	orrs	r3, r0
 8007fd6:	6023      	str	r3, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8007fd8:	b15a      	cbz	r2, 8007ff2 <HAL_PWREx_EnterSTOPMode+0x2a>

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	d025      	beq.n	800802a <HAL_PWREx_EnterSTOPMode+0x62>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8007fde:	f7fc fdae 	bl	8004b3e <HAL_GetCurrentCPUID>
 8007fe2:	2803      	cmp	r0, #3
 8007fe4:	d03e      	beq.n	8008064 <HAL_PWREx_EnterSTOPMode+0x9c>
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8007fe6:	4a22      	ldr	r2, [pc, #136]	; (8008070 <HAL_PWREx_EnterSTOPMode+0xa8>)
 8007fe8:	6953      	ldr	r3, [r2, #20]
 8007fea:	f023 0304 	bic.w	r3, r3, #4
 8007fee:	6153      	str	r3, [r2, #20]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8007ff2:	f7fc fda4 	bl	8004b3e <HAL_GetCurrentCPUID>
 8007ff6:	2803      	cmp	r0, #3
 8007ff8:	d1fa      	bne.n	8007ff0 <HAL_PWREx_EnterSTOPMode+0x28>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	6123      	str	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008002:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_PWREx_EnterSTOPMode+0xac>)
 8008004:	6913      	ldr	r3, [r2, #16]
 8008006:	f043 0304 	orr.w	r3, r3, #4
 800800a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800800c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008010:	f3bf 8f6f 	isb	sy
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8008014:	2d01      	cmp	r5, #1
 8008016:	d006      	beq.n	8008026 <HAL_PWREx_EnterSTOPMode+0x5e>
      __WFE ();
 8008018:	bf20      	wfe
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800801a:	4a16      	ldr	r2, [pc, #88]	; (8008074 <HAL_PWREx_EnterSTOPMode+0xac>)
 800801c:	6913      	ldr	r3, [r2, #16]
 800801e:	f023 0304 	bic.w	r3, r3, #4
 8008022:	6113      	str	r3, [r2, #16]
 8008024:	e7e4      	b.n	8007ff0 <HAL_PWREx_EnterSTOPMode+0x28>
      __WFI ();
 8008026:	bf30      	wfi
 8008028:	e7f7      	b.n	800801a <HAL_PWREx_EnterSTOPMode+0x52>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 800802a:	f7fc fd88 	bl	8004b3e <HAL_GetCurrentCPUID>
 800802e:	2801      	cmp	r0, #1
 8008030:	d1de      	bne.n	8007ff0 <HAL_PWREx_EnterSTOPMode+0x28>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8008032:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <HAL_PWREx_EnterSTOPMode+0xa8>)
 8008034:	6953      	ldr	r3, [r2, #20]
 8008036:	f023 0302 	bic.w	r3, r3, #2
 800803a:	6153      	str	r3, [r2, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800803c:	4a0d      	ldr	r2, [pc, #52]	; (8008074 <HAL_PWREx_EnterSTOPMode+0xac>)
 800803e:	6913      	ldr	r3, [r2, #16]
 8008040:	f043 0304 	orr.w	r3, r3, #4
 8008044:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800804a:	f3bf 8f6f 	isb	sy
    if (STOPEntry == PWR_STOPENTRY_WFI)
 800804e:	2d01      	cmp	r5, #1
 8008050:	d006      	beq.n	8008060 <HAL_PWREx_EnterSTOPMode+0x98>
      __WFE ();
 8008052:	bf20      	wfe
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008054:	4a07      	ldr	r2, [pc, #28]	; (8008074 <HAL_PWREx_EnterSTOPMode+0xac>)
 8008056:	6913      	ldr	r3, [r2, #16]
 8008058:	f023 0304 	bic.w	r3, r3, #4
 800805c:	6113      	str	r3, [r2, #16]
 800805e:	e7c7      	b.n	8007ff0 <HAL_PWREx_EnterSTOPMode+0x28>
      __WFI ();
 8008060:	bf30      	wfi
 8008062:	e7f7      	b.n	8008054 <HAL_PWREx_EnterSTOPMode+0x8c>
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8008064:	4a02      	ldr	r2, [pc, #8]	; (8008070 <HAL_PWREx_EnterSTOPMode+0xa8>)
 8008066:	6913      	ldr	r3, [r2, #16]
 8008068:	f023 0304 	bic.w	r3, r3, #4
 800806c:	6113      	str	r3, [r2, #16]
 800806e:	e7bf      	b.n	8007ff0 <HAL_PWREx_EnterSTOPMode+0x28>
 8008070:	58024800 	.word	0x58024800
 8008074:	e000ed00 	.word	0xe000ed00

08008078 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8008078:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 800807a:	f7fc fd60 	bl	8004b3e <HAL_GetCurrentCPUID>
 800807e:	2803      	cmp	r0, #3
 8008080:	d002      	beq.n	8008088 <HAL_PWREx_ClearPendingEvent+0x10>
  {
    __WFE ();
  }
  else
  {
    __SEV ();
 8008082:	bf40      	sev
    __WFE ();
 8008084:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8008086:	bd08      	pop	{r3, pc}
    __WFE ();
 8008088:	bf20      	wfe
 800808a:	e7fc      	b.n	8008086 <HAL_PWREx_ClearPendingEvent+0xe>

0800808c <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
 800808c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 800808e:	b158      	cbz	r0, 80080a8 <HAL_PWREx_EnterSTANDBYMode+0x1c>

    /* Request Wait For Interrupt */
    __WFI ();
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8008090:	2801      	cmp	r0, #1
 8008092:	d01d      	beq.n	80080d0 <HAL_PWREx_EnterSTANDBYMode+0x44>
  }
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8008094:	4b19      	ldr	r3, [pc, #100]	; (80080fc <HAL_PWREx_EnterSTANDBYMode+0x70>)
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	f042 0204 	orr.w	r2, r2, #4
 800809c:	611a      	str	r2, [r3, #16]

#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 800809e:	695a      	ldr	r2, [r3, #20]
 80080a0:	f042 0204 	orr.w	r2, r2, #4
 80080a4:	615a      	str	r2, [r3, #20]
#endif /* defined (DUAL_CORE) */
  }
}
 80080a6:	bd08      	pop	{r3, pc}
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 80080a8:	f7fc fd49 	bl	8004b3e <HAL_GetCurrentCPUID>
 80080ac:	2803      	cmp	r0, #3
 80080ae:	d1fa      	bne.n	80080a6 <HAL_PWREx_EnterSTANDBYMode+0x1a>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 80080b0:	4b12      	ldr	r3, [pc, #72]	; (80080fc <HAL_PWREx_EnterSTANDBYMode+0x70>)
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	f042 0201 	orr.w	r2, r2, #1
 80080b8:	611a      	str	r2, [r3, #16]
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
 80080ba:	695a      	ldr	r2, [r3, #20]
 80080bc:	f042 0201 	orr.w	r2, r2, #1
 80080c0:	615a      	str	r2, [r3, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80080c2:	4a0f      	ldr	r2, [pc, #60]	; (8008100 <HAL_PWREx_EnterSTANDBYMode+0x74>)
 80080c4:	6913      	ldr	r3, [r2, #16]
 80080c6:	f043 0304 	orr.w	r3, r3, #4
 80080ca:	6113      	str	r3, [r2, #16]
    __WFI ();
 80080cc:	bf30      	wfi
 80080ce:	e7ea      	b.n	80080a6 <HAL_PWREx_EnterSTANDBYMode+0x1a>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_PWREx_EnterSTANDBYMode+0x70>)
 80080d2:	6913      	ldr	r3, [r2, #16]
 80080d4:	f043 0302 	orr.w	r3, r3, #2
 80080d8:	6113      	str	r3, [r2, #16]
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 80080da:	f7fc fd30 	bl	8004b3e <HAL_GetCurrentCPUID>
 80080de:	2801      	cmp	r0, #1
 80080e0:	d1e1      	bne.n	80080a6 <HAL_PWREx_EnterSTANDBYMode+0x1a>
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
 80080e2:	4a06      	ldr	r2, [pc, #24]	; (80080fc <HAL_PWREx_EnterSTANDBYMode+0x70>)
 80080e4:	6953      	ldr	r3, [r2, #20]
 80080e6:	f043 0302 	orr.w	r3, r3, #2
 80080ea:	6153      	str	r3, [r2, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80080ec:	4a04      	ldr	r2, [pc, #16]	; (8008100 <HAL_PWREx_EnterSTANDBYMode+0x74>)
 80080ee:	6913      	ldr	r3, [r2, #16]
 80080f0:	f043 0304 	orr.w	r3, r3, #4
 80080f4:	6113      	str	r3, [r2, #16]
    __WFI ();
 80080f6:	bf30      	wfi
 80080f8:	e7d5      	b.n	80080a6 <HAL_PWREx_EnterSTANDBYMode+0x1a>
 80080fa:	bf00      	nop
 80080fc:	58024800 	.word	0x58024800
 8008100:	e000ed00 	.word	0xe000ed00

08008104 <HAL_PWREx_ConfigD3Domain>:
{
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 8008104:	4a03      	ldr	r2, [pc, #12]	; (8008114 <HAL_PWREx_ConfigD3Domain+0x10>)
 8008106:	6913      	ldr	r3, [r2, #16]
 8008108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800810c:	4303      	orrs	r3, r0
 800810e:	6113      	str	r3, [r2, #16]
}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	58024800 	.word	0x58024800

08008118 <HAL_PWREx_ClearDomainFlags>:
{
  /* Check the parameter */
  assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));

  /* D1 CPU flags */
  if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
 8008118:	b928      	cbnz	r0, 8008126 <HAL_PWREx_ClearDomainFlags+0xe>
  {
    /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
    SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
 800811a:	4a0c      	ldr	r2, [pc, #48]	; (800814c <HAL_PWREx_ClearDomainFlags+0x34>)
 800811c:	6913      	ldr	r3, [r2, #16]
 800811e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008122:	6113      	str	r3, [r2, #16]
 8008124:	4770      	bx	lr
  }
  /* D2 CPU flags */
  else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
 8008126:	2801      	cmp	r0, #1
 8008128:	d009      	beq.n	800813e <HAL_PWREx_ClearDomainFlags+0x26>
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
  }
  else
  {
    /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
    SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
 800812a:	4b08      	ldr	r3, [pc, #32]	; (800814c <HAL_PWREx_ClearDomainFlags+0x34>)
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008132:	611a      	str	r2, [r3, #16]
    /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813a:	615a      	str	r2, [r3, #20]
  }
}
 800813c:	4770      	bx	lr
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
 800813e:	4a03      	ldr	r2, [pc, #12]	; (800814c <HAL_PWREx_ClearDomainFlags+0x34>)
 8008140:	6953      	ldr	r3, [r2, #20]
 8008142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008146:	6153      	str	r3, [r2, #20]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	58024800 	.word	0x58024800

08008150 <HAL_PWREx_HoldCore>:

  /* Check the parameters */
  assert_param (IS_PWR_CORE (CPU));

  /* Check CPU index */
  if (CPU == PWR_CORE_CPU2)
 8008150:	2801      	cmp	r0, #1
 8008152:	d00b      	beq.n	800816c <HAL_PWREx_HoldCore+0x1c>
    }
  }
  else
  {
    /* If CPU2 is not held */
    if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <HAL_PWREx_HoldCore+0x3c>)
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800815c:	d114      	bne.n	8008188 <HAL_PWREx_HoldCore+0x38>
    {
      /* Set HOLD1 bit */
      SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 800815e:	4a0b      	ldr	r2, [pc, #44]	; (800818c <HAL_PWREx_HoldCore+0x3c>)
 8008160:	6953      	ldr	r3, [r2, #20]
 8008162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008166:	6153      	str	r3, [r2, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008168:	2000      	movs	r0, #0
 800816a:	4770      	bx	lr
    if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
 800816c:	4b07      	ldr	r3, [pc, #28]	; (800818c <HAL_PWREx_HoldCore+0x3c>)
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008174:	d106      	bne.n	8008184 <HAL_PWREx_HoldCore+0x34>
      SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
 8008176:	4a05      	ldr	r2, [pc, #20]	; (800818c <HAL_PWREx_HoldCore+0x3c>)
 8008178:	6913      	ldr	r3, [r2, #16]
 800817a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800817e:	6113      	str	r3, [r2, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr
      status = HAL_ERROR;
 8008184:	2001      	movs	r0, #1
 8008186:	4770      	bx	lr
    }
    else
    {
      status = HAL_ERROR;
 8008188:	2001      	movs	r0, #1
    }
  }

  return status;
}
 800818a:	4770      	bx	lr
 800818c:	58024800 	.word	0x58024800

08008190 <HAL_PWREx_ReleaseCore>:
{
  /* Check the parameters */
  assert_param (IS_PWR_CORE (CPU));

  /* Check CPU index */
  if (CPU == PWR_CORE_CPU2)
 8008190:	2801      	cmp	r0, #1
 8008192:	d005      	beq.n	80081a0 <HAL_PWREx_ReleaseCore+0x10>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
  }
  else
  {
    /* Reset HOLD1 bit */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 8008194:	4a05      	ldr	r2, [pc, #20]	; (80081ac <HAL_PWREx_ReleaseCore+0x1c>)
 8008196:	6953      	ldr	r3, [r2, #20]
 8008198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800819c:	6153      	str	r3, [r2, #20]
  }
}
 800819e:	4770      	bx	lr
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
 80081a0:	4a02      	ldr	r2, [pc, #8]	; (80081ac <HAL_PWREx_ReleaseCore+0x1c>)
 80081a2:	6913      	ldr	r3, [r2, #16]
 80081a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081a8:	6113      	str	r3, [r2, #16]
 80081aa:	4770      	bx	lr
 80081ac:	58024800 	.word	0x58024800

080081b0 <HAL_PWREx_EnableFlashPowerDown>:
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 80081b0:	4a02      	ldr	r2, [pc, #8]	; (80081bc <HAL_PWREx_EnableFlashPowerDown+0xc>)
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081b8:	6013      	str	r3, [r2, #0]
}
 80081ba:	4770      	bx	lr
 80081bc:	58024800 	.word	0x58024800

080081c0 <HAL_PWREx_DisableFlashPowerDown>:
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 80081c0:	4a02      	ldr	r2, [pc, #8]	; (80081cc <HAL_PWREx_DisableFlashPowerDown+0xc>)
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c8:	6013      	str	r3, [r2, #0]
}
 80081ca:	4770      	bx	lr
 80081cc:	58024800 	.word	0x58024800

080081d0 <HAL_PWREx_EnableWakeUpPin>:
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
 80081d0:	6803      	ldr	r3, [r0, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
 80081d2:	6841      	ldr	r1, [r0, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80081d8:	b3a2      	cbz	r2, 8008244 <HAL_PWREx_EnableWakeUpPin+0x74>
  return __builtin_clz(value);
 80081da:	fab2 f282 	clz	r2, r2
 80081de:	3208      	adds	r2, #8
 80081e0:	f002 021f 	and.w	r2, r2, #31
 80081e4:	fa01 f202 	lsl.w	r2, r1, r2
  pinConfig = sPinParams->WakeUpPin | \
 80081e8:	ea43 0102 	orr.w	r1, r3, r2
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
 80081ec:	6880      	ldr	r0, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80081f2:	b34a      	cbz	r2, 8008248 <HAL_PWREx_EnableWakeUpPin+0x78>
  return __builtin_clz(value);
 80081f4:	fab2 f282 	clz	r2, r2
 80081f8:	3208      	adds	r2, #8
 80081fa:	0052      	lsls	r2, r2, #1
 80081fc:	f002 021e 	and.w	r2, r2, #30
 8008200:	fa00 f202 	lsl.w	r2, r0, r2
  pinConfig = sPinParams->WakeUpPin | \
 8008204:	430a      	orrs	r2, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008206:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800820a:	b1f9      	cbz	r1, 800824c <HAL_PWREx_EnableWakeUpPin+0x7c>
  return __builtin_clz(value);
 800820c:	fab1 f181 	clz	r1, r1

  regMask   = sPinParams->WakeUpPin | \
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 8008210:	f001 001f 	and.w	r0, r1, #31
 8008214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008218:	4081      	lsls	r1, r0
  regMask   = sPinParams->WakeUpPin | \
 800821a:	4319      	orrs	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8008220:	b1b3      	cbz	r3, 8008250 <HAL_PWREx_EnableWakeUpPin+0x80>
  return __builtin_clz(value);
 8008222:	fab3 f383 	clz	r3, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	f003 031e 	and.w	r3, r3, #30
 800822c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008230:	fa00 f303 	lsl.w	r3, r0, r3
  regMask   = sPinParams->WakeUpPin | \
 8008234:	430b      	orrs	r3, r1

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 8008236:	4807      	ldr	r0, [pc, #28]	; (8008254 <HAL_PWREx_EnableWakeUpPin+0x84>)
 8008238:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800823a:	ea21 0303 	bic.w	r3, r1, r3
 800823e:	431a      	orrs	r2, r3
 8008240:	6282      	str	r2, [r0, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
#endif /* !DUAL_CORE */
}
 8008242:	4770      	bx	lr
    return 32U;
 8008244:	2220      	movs	r2, #32
 8008246:	e7ca      	b.n	80081de <HAL_PWREx_EnableWakeUpPin+0xe>
 8008248:	2220      	movs	r2, #32
 800824a:	e7d5      	b.n	80081f8 <HAL_PWREx_EnableWakeUpPin+0x28>
 800824c:	2120      	movs	r1, #32
 800824e:	e7df      	b.n	8008210 <HAL_PWREx_EnableWakeUpPin+0x40>
 8008250:	2320      	movs	r3, #32
 8008252:	e7e8      	b.n	8008226 <HAL_PWREx_EnableWakeUpPin+0x56>
 8008254:	58024800 	.word	0x58024800

08008258 <HAL_PWREx_DisableWakeUpPin>:
{
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 8008258:	4a02      	ldr	r2, [pc, #8]	; (8008264 <HAL_PWREx_DisableWakeUpPin+0xc>)
 800825a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800825c:	ea23 0300 	bic.w	r3, r3, r0
 8008260:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008262:	4770      	bx	lr
 8008264:	58024800 	.word	0x58024800

08008268 <HAL_PWREx_GetWakeupFlag>:
{
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
 8008268:	4b01      	ldr	r3, [pc, #4]	; (8008270 <HAL_PWREx_GetWakeupFlag+0x8>)
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800826c:	4018      	ands	r0, r3
 800826e:	4770      	bx	lr
 8008270:	58024800 	.word	0x58024800

08008274 <HAL_PWREx_ClearWakeupFlag>:
{
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <HAL_PWREx_ClearWakeupFlag+0x18>)
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	4302      	orrs	r2, r0
 800827a:	621a      	str	r2, [r3, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	4203      	tst	r3, r0
 8008280:	d101      	bne.n	8008286 <HAL_PWREx_ClearWakeupFlag+0x12>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008282:	2000      	movs	r0, #0
 8008284:	4770      	bx	lr
    return HAL_ERROR;
 8008286:	2001      	movs	r0, #1
}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	58024800 	.word	0x58024800

08008290 <HAL_PWREx_WKUP1_Callback>:
__weak void HAL_PWREx_WKUP1_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
 8008290:	4770      	bx	lr

08008292 <HAL_PWREx_WKUP2_Callback>:
__weak void HAL_PWREx_WKUP2_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
 8008292:	4770      	bx	lr

08008294 <HAL_PWREx_WKUP3_Callback>:
__weak void HAL_PWREx_WKUP3_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
 8008294:	4770      	bx	lr

08008296 <HAL_PWREx_WKUP4_Callback>:
__weak void HAL_PWREx_WKUP4_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
 8008296:	4770      	bx	lr

08008298 <HAL_PWREx_WKUP5_Callback>:
__weak void HAL_PWREx_WKUP5_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
 8008298:	4770      	bx	lr

0800829a <HAL_PWREx_WKUP6_Callback>:
__weak void HAL_PWREx_WKUP6_Callback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
 800829a:	4770      	bx	lr

0800829c <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
{
 800829c:	b508      	push	{r3, lr}
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	f013 0f01 	tst.w	r3, #1
 80082a6:	d11b      	bne.n	80082e0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x44>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
 80082a8:	4b21      	ldr	r3, [pc, #132]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	f013 0f02 	tst.w	r3, #2
 80082b0:	d11e      	bne.n	80082f0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x54>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	f013 0f04 	tst.w	r3, #4
 80082ba:	d121      	bne.n	8008300 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x64>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	f013 0f08 	tst.w	r3, #8
 80082c4:	d124      	bne.n	8008310 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	f013 0f10 	tst.w	r3, #16
 80082ce:	d027      	beq.n	8008320 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x84>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
 80082d0:	4a17      	ldr	r2, [pc, #92]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082d2:	6a13      	ldr	r3, [r2, #32]
 80082d4:	f043 0310 	orr.w	r3, r3, #16
 80082d8:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
 80082da:	f7ff ffdd 	bl	8008298 <HAL_PWREx_WKUP5_Callback>
 80082de:	e006      	b.n	80082ee <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x52>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
 80082e0:	4a13      	ldr	r2, [pc, #76]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082e2:	6a13      	ldr	r3, [r2, #32]
 80082e4:	f043 0301 	orr.w	r3, r3, #1
 80082e8:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP1_Callback ();
 80082ea:	f7ff ffd1 	bl	8008290 <HAL_PWREx_WKUP1_Callback>
}
 80082ee:	bd08      	pop	{r3, pc}
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
 80082f0:	4a0f      	ldr	r2, [pc, #60]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 80082f2:	6a13      	ldr	r3, [r2, #32]
 80082f4:	f043 0302 	orr.w	r3, r3, #2
 80082f8:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
 80082fa:	f7ff ffca 	bl	8008292 <HAL_PWREx_WKUP2_Callback>
 80082fe:	e7f6      	b.n	80082ee <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x52>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
 8008300:	4a0b      	ldr	r2, [pc, #44]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 8008302:	6a13      	ldr	r3, [r2, #32]
 8008304:	f043 0304 	orr.w	r3, r3, #4
 8008308:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
 800830a:	f7ff ffc3 	bl	8008294 <HAL_PWREx_WKUP3_Callback>
 800830e:	e7ee      	b.n	80082ee <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x52>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
 8008310:	4a07      	ldr	r2, [pc, #28]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 8008312:	6a13      	ldr	r3, [r2, #32]
 8008314:	f043 0308 	orr.w	r3, r3, #8
 8008318:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
 800831a:	f7ff ffbc 	bl	8008296 <HAL_PWREx_WKUP4_Callback>
 800831e:	e7e6      	b.n	80082ee <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x52>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
 8008320:	4a03      	ldr	r2, [pc, #12]	; (8008330 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x94>)
 8008322:	6a13      	ldr	r3, [r2, #32]
 8008324:	f043 0320 	orr.w	r3, r3, #32
 8008328:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
 800832a:	f7ff ffb6 	bl	800829a <HAL_PWREx_WKUP6_Callback>
}
 800832e:	e7de      	b.n	80082ee <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x52>
 8008330:	58024800 	.word	0x58024800

08008334 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
 8008334:	b510      	push	{r4, lr}
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
 8008336:	4a0b      	ldr	r2, [pc, #44]	; (8008364 <HAL_PWREx_EnableBkUpReg+0x30>)
 8008338:	6893      	ldr	r3, [r2, #8]
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008340:	f7f8 ff08 	bl	8001154 <HAL_GetTick>
 8008344:	4604      	mov	r4, r0

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <HAL_PWREx_EnableBkUpReg+0x30>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800834e:	d107      	bne.n	8008360 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 8008350:	f7f8 ff00 	bl	8001154 <HAL_GetTick>
 8008354:	1b00      	subs	r0, r0, r4
 8008356:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800835a:	d9f4      	bls.n	8008346 <HAL_PWREx_EnableBkUpReg+0x12>
    {
      return HAL_ERROR;
 800835c:	2001      	movs	r0, #1
 800835e:	e000      	b.n	8008362 <HAL_PWREx_EnableBkUpReg+0x2e>
    }
  }

  return HAL_OK;
 8008360:	2000      	movs	r0, #0
}
 8008362:	bd10      	pop	{r4, pc}
 8008364:	58024800 	.word	0x58024800

08008368 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
 8008368:	b510      	push	{r4, lr}
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 800836a:	4a0b      	ldr	r2, [pc, #44]	; (8008398 <HAL_PWREx_DisableBkUpReg+0x30>)
 800836c:	6893      	ldr	r3, [r2, #8]
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008374:	f7f8 feee 	bl	8001154 <HAL_GetTick>
 8008378:	4604      	mov	r4, r0

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 800837a:	4b07      	ldr	r3, [pc, #28]	; (8008398 <HAL_PWREx_DisableBkUpReg+0x30>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008382:	d007      	beq.n	8008394 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 8008384:	f7f8 fee6 	bl	8001154 <HAL_GetTick>
 8008388:	1b00      	subs	r0, r0, r4
 800838a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800838e:	d9f4      	bls.n	800837a <HAL_PWREx_DisableBkUpReg+0x12>
    {
      return HAL_ERROR;
 8008390:	2001      	movs	r0, #1
 8008392:	e000      	b.n	8008396 <HAL_PWREx_DisableBkUpReg+0x2e>
    }
  }

  return HAL_OK;
 8008394:	2000      	movs	r0, #0
}
 8008396:	bd10      	pop	{r4, pc}
 8008398:	58024800 	.word	0x58024800

0800839c <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
 800839c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 800839e:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <HAL_PWREx_EnableUSBReg+0x30>)
 80083a0:	68d3      	ldr	r3, [r2, #12]
 80083a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083a6:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083a8:	f7f8 fed4 	bl	8001154 <HAL_GetTick>
 80083ac:	4604      	mov	r4, r0

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <HAL_PWREx_EnableUSBReg+0x30>)
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80083b6:	d107      	bne.n	80083c8 <HAL_PWREx_EnableUSBReg+0x2c>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 80083b8:	f7f8 fecc 	bl	8001154 <HAL_GetTick>
 80083bc:	1b00      	subs	r0, r0, r4
 80083be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80083c2:	d9f4      	bls.n	80083ae <HAL_PWREx_EnableUSBReg+0x12>
    {
      return HAL_ERROR;
 80083c4:	2001      	movs	r0, #1
 80083c6:	e000      	b.n	80083ca <HAL_PWREx_EnableUSBReg+0x2e>
    }
  }

  return HAL_OK;
 80083c8:	2000      	movs	r0, #0
}
 80083ca:	bd10      	pop	{r4, pc}
 80083cc:	58024800 	.word	0x58024800

080083d0 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
 80083d0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 80083d2:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <HAL_PWREx_DisableUSBReg+0x30>)
 80083d4:	68d3      	ldr	r3, [r2, #12]
 80083d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80083da:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083dc:	f7f8 feba 	bl	8001154 <HAL_GetTick>
 80083e0:	4604      	mov	r4, r0

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <HAL_PWREx_DisableUSBReg+0x30>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80083ea:	d007      	beq.n	80083fc <HAL_PWREx_DisableUSBReg+0x2c>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 80083ec:	f7f8 feb2 	bl	8001154 <HAL_GetTick>
 80083f0:	1b00      	subs	r0, r0, r4
 80083f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80083f6:	d9f4      	bls.n	80083e2 <HAL_PWREx_DisableUSBReg+0x12>
    {
      return HAL_ERROR;
 80083f8:	2001      	movs	r0, #1
 80083fa:	e000      	b.n	80083fe <HAL_PWREx_DisableUSBReg+0x2e>
    }
  }

  return HAL_OK;
 80083fc:	2000      	movs	r0, #0
}
 80083fe:	bd10      	pop	{r4, pc}
 8008400:	58024800 	.word	0x58024800

08008404 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008404:	4a02      	ldr	r2, [pc, #8]	; (8008410 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8008406:	68d3      	ldr	r3, [r2, #12]
 8008408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800840c:	60d3      	str	r3, [r2, #12]
}
 800840e:	4770      	bx	lr
 8008410:	58024800 	.word	0x58024800

08008414 <HAL_PWREx_DisableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008414:	4a02      	ldr	r2, [pc, #8]	; (8008420 <HAL_PWREx_DisableUSBVoltageDetector+0xc>)
 8008416:	68d3      	ldr	r3, [r2, #12]
 8008418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800841c:	60d3      	str	r3, [r2, #12]
}
 800841e:	4770      	bx	lr
 8008420:	58024800 	.word	0x58024800

08008424 <HAL_PWREx_EnableBatteryCharging>:
{
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 8008424:	4a05      	ldr	r2, [pc, #20]	; (800843c <HAL_PWREx_EnableBatteryCharging+0x18>)
 8008426:	68d3      	ldr	r3, [r2, #12]
 8008428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800842c:	4303      	orrs	r3, r0
 800842e:	60d3      	str	r3, [r2, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
 8008430:	68d3      	ldr	r3, [r2, #12]
 8008432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008436:	60d3      	str	r3, [r2, #12]
}
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	58024800 	.word	0x58024800

08008440 <HAL_PWREx_DisableBatteryCharging>:
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 8008440:	4a02      	ldr	r2, [pc, #8]	; (800844c <HAL_PWREx_DisableBatteryCharging+0xc>)
 8008442:	68d3      	ldr	r3, [r2, #12]
 8008444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008448:	60d3      	str	r3, [r2, #12]
}
 800844a:	4770      	bx	lr
 800844c:	58024800 	.word	0x58024800

08008450 <HAL_PWREx_EnableMonitoring>:
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 8008450:	4a02      	ldr	r2, [pc, #8]	; (800845c <HAL_PWREx_EnableMonitoring+0xc>)
 8008452:	6893      	ldr	r3, [r2, #8]
 8008454:	f043 0310 	orr.w	r3, r3, #16
 8008458:	6093      	str	r3, [r2, #8]
}
 800845a:	4770      	bx	lr
 800845c:	58024800 	.word	0x58024800

08008460 <HAL_PWREx_DisableMonitoring>:
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 8008460:	4a02      	ldr	r2, [pc, #8]	; (800846c <HAL_PWREx_DisableMonitoring+0xc>)
 8008462:	6893      	ldr	r3, [r2, #8]
 8008464:	f023 0310 	bic.w	r3, r3, #16
 8008468:	6093      	str	r3, [r2, #8]
}
 800846a:	4770      	bx	lr
 800846c:	58024800 	.word	0x58024800

08008470 <HAL_PWREx_GetTemperatureLevel>:
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <HAL_PWREx_GetTemperatureLevel+0x18>)
 8008472:	6898      	ldr	r0, [r3, #8]
 8008474:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
 8008478:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800847c:	d003      	beq.n	8008486 <HAL_PWREx_GetTemperatureLevel+0x16>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
 800847e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008482:	d000      	beq.n	8008486 <HAL_PWREx_GetTemperatureLevel+0x16>
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 8008484:	2000      	movs	r0, #0
  }

  return tempLevel;
}
 8008486:	4770      	bx	lr
 8008488:	58024800 	.word	0x58024800

0800848c <HAL_PWREx_GetVBATLevel>:
uint32_t HAL_PWREx_GetVBATLevel (void)
{
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <HAL_PWREx_GetVBATLevel+0x18>)
 800848e:	6898      	ldr	r0, [r3, #8]
 8008490:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
 8008494:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8008498:	d003      	beq.n	80084a2 <HAL_PWREx_GetVBATLevel+0x16>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
 800849a:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 800849e:	d000      	beq.n	80084a2 <HAL_PWREx_GetVBATLevel+0x16>
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 80084a0:	2000      	movs	r0, #0
  }

  return VBATLevel;
}
 80084a2:	4770      	bx	lr
 80084a4:	58024800 	.word	0x58024800

080084a8 <HAL_PWREx_ConfigAVD>:
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 80084a8:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <HAL_PWREx_ConfigAVD+0x4c>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80084b0:	6801      	ldr	r1, [r0, #0]
 80084b2:	430b      	orrs	r3, r1
 80084b4:	6013      	str	r3, [r2, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 80084b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084c0:	601a      	str	r2, [r3, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084c8:	605a      	str	r2, [r3, #4]
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 80084ca:	6843      	ldr	r3, [r0, #4]
 80084cc:	f013 0f01 	tst.w	r3, #1
 80084d0:	d005      	beq.n	80084de <HAL_PWREx_ConfigAVD+0x36>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 80084d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084dc:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 80084de:	6843      	ldr	r3, [r0, #4]
 80084e0:	f013 0f02 	tst.w	r3, #2
 80084e4:	d005      	beq.n	80084f2 <HAL_PWREx_ConfigAVD+0x4a>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 80084e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084ea:	6853      	ldr	r3, [r2, #4]
 80084ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f0:	6053      	str	r3, [r2, #4]
  }
}
 80084f2:	4770      	bx	lr
 80084f4:	58024800 	.word	0x58024800

080084f8 <HAL_PWREx_EnableAVD>:
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 80084f8:	4a02      	ldr	r2, [pc, #8]	; (8008504 <HAL_PWREx_EnableAVD+0xc>)
 80084fa:	6813      	ldr	r3, [r2, #0]
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008500:	6013      	str	r3, [r2, #0]
}
 8008502:	4770      	bx	lr
 8008504:	58024800 	.word	0x58024800

08008508 <HAL_PWREx_DisableAVD>:
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 8008508:	4a02      	ldr	r2, [pc, #8]	; (8008514 <HAL_PWREx_DisableAVD+0xc>)
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008510:	6013      	str	r3, [r2, #0]
}
 8008512:	4770      	bx	lr
 8008514:	58024800 	.word	0x58024800

08008518 <HAL_PWREx_AVDCallback>:
__weak void HAL_PWREx_AVDCallback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8008518:	4770      	bx	lr

0800851a <HAL_PWREx_PVD_AVD_IRQHandler>:
{
 800851a:	b508      	push	{r3, lr}
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 800851c:	4b2d      	ldr	r3, [pc, #180]	; (80085d4 <HAL_PWREx_PVD_AVD_IRQHandler+0xba>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f013 0f10 	tst.w	r3, #16
 8008524:	d105      	bne.n	8008532 <HAL_PWREx_PVD_AVD_IRQHandler+0x18>
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8008526:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <HAL_PWREx_PVD_AVD_IRQHandler+0xba>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800852e:	d128      	bne.n	8008582 <HAL_PWREx_PVD_AVD_IRQHandler+0x68>
}
 8008530:	bd08      	pop	{r3, pc}
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8008532:	f7fc fb04 	bl	8004b3e <HAL_GetCurrentCPUID>
 8008536:	2803      	cmp	r0, #3
 8008538:	d011      	beq.n	800855e <HAL_PWREx_PVD_AVD_IRQHandler+0x44>
      if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
 800853a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008542:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008546:	d0ee      	beq.n	8008526 <HAL_PWREx_PVD_AVD_IRQHandler+0xc>
        HAL_PWR_PVDCallback ();
 8008548:	f7ff fc3c 	bl	8007dc4 <HAL_PWR_PVDCallback>
        __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
 800854c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008550:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8008554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008558:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 800855c:	e7e3      	b.n	8008526 <HAL_PWREx_PVD_AVD_IRQHandler+0xc>
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 800855e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008566:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800856a:	d0dc      	beq.n	8008526 <HAL_PWREx_PVD_AVD_IRQHandler+0xc>
        HAL_PWR_PVDCallback ();
 800856c:	f7ff fc2a 	bl	8007dc4 <HAL_PWR_PVDCallback>
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8008570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008574:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008580:	e7d1      	b.n	8008526 <HAL_PWREx_PVD_AVD_IRQHandler+0xc>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8008582:	f7fc fadc 	bl	8004b3e <HAL_GetCurrentCPUID>
 8008586:	2803      	cmp	r0, #3
 8008588:	d011      	beq.n	80085ae <HAL_PWREx_PVD_AVD_IRQHandler+0x94>
      if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
 800858a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008592:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008596:	d0cb      	beq.n	8008530 <HAL_PWREx_PVD_AVD_IRQHandler+0x16>
        HAL_PWREx_AVDCallback ();
 8008598:	f7ff ffbe 	bl	8008518 <HAL_PWREx_AVDCallback>
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
 800859c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085a0:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 80085ac:	e7c0      	b.n	8008530 <HAL_PWREx_PVD_AVD_IRQHandler+0x16>
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80085ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80085ba:	d0b9      	beq.n	8008530 <HAL_PWREx_PVD_AVD_IRQHandler+0x16>
        HAL_PWREx_AVDCallback ();
 80085bc:	f7ff ffac 	bl	8008518 <HAL_PWREx_AVDCallback>
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 80085c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80085c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80085d0:	e7ae      	b.n	8008530 <HAL_PWREx_PVD_AVD_IRQHandler+0x16>
 80085d2:	bf00      	nop
 80085d4:	58024800 	.word	0x58024800

080085d8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80085d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 80085da:	4b68      	ldr	r3, [pc, #416]	; (800877c <HAL_RCC_DeInit+0x1a4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	2b06      	cmp	r3, #6
 80085e4:	d80c      	bhi.n	8008600 <HAL_RCC_DeInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80085e6:	4a65      	ldr	r2, [pc, #404]	; (800877c <HAL_RCC_DeInit+0x1a4>)
 80085e8:	6813      	ldr	r3, [r2, #0]
 80085ea:	f023 030f 	bic.w	r3, r3, #15
 80085ee:	f043 0307 	orr.w	r3, r3, #7
 80085f2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80085f4:	6813      	ldr	r3, [r2, #0]
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	2b07      	cmp	r3, #7
 80085fc:	f040 80ba 	bne.w	8008774 <HAL_RCC_DeInit+0x19c>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008600:	f7f8 fda8 	bl	8001154 <HAL_GetTick>
 8008604:	4604      	mov	r4, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008606:	4a5e      	ldr	r2, [pc, #376]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 8008608:	6813      	ldr	r3, [r2, #0]
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008610:	4b5b      	ldr	r3, [pc, #364]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f013 0f04 	tst.w	r3, #4
 8008618:	d106      	bne.n	8008628 <HAL_RCC_DeInit+0x50>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800861a:	f7f8 fd9b 	bl	8001154 <HAL_GetTick>
 800861e:	1b00      	subs	r0, r0, r4
 8008620:	2802      	cmp	r0, #2
 8008622:	d9f5      	bls.n	8008610 <HAL_RCC_DeInit+0x38>
    {
      return HAL_TIMEOUT;
 8008624:	2403      	movs	r4, #3
 8008626:	e0a6      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8008628:	4b55      	ldr	r3, [pc, #340]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008630:	605a      	str	r2, [r3, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8008632:	2200      	movs	r2, #0
 8008634:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8008636:	4b53      	ldr	r3, [pc, #332]	; (8008784 <HAL_RCC_DeInit+0x1ac>)
 8008638:	4a53      	ldr	r2, [pc, #332]	; (8008788 <HAL_RCC_DeInit+0x1b0>)
 800863a:	6013      	str	r3, [r2, #0]
  SystemD2Clock = HSI_VALUE;
 800863c:	4a53      	ldr	r2, [pc, #332]	; (800878c <HAL_RCC_DeInit+0x1b4>)
 800863e:	6013      	str	r3, [r2, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008640:	4b53      	ldr	r3, [pc, #332]	; (8008790 <HAL_RCC_DeInit+0x1b8>)
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f7f8 fd24 	bl	8001090 <HAL_InitTick>
 8008648:	4604      	mov	r4, r0
 800864a:	b108      	cbz	r0, 8008650 <HAL_RCC_DeInit+0x78>
  {
    return HAL_ERROR;
 800864c:	2401      	movs	r4, #1
 800864e:	e092      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008650:	f7f8 fd80 	bl	8001154 <HAL_GetTick>
 8008654:	4605      	mov	r5, r0

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8008656:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f013 0f38 	tst.w	r3, #56	; 0x38
 800865e:	d008      	beq.n	8008672 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008660:	f7f8 fd78 	bl	8001154 <HAL_GetTick>
 8008664:	1b40      	subs	r0, r0, r5
 8008666:	f241 3388 	movw	r3, #5000	; 0x1388
 800866a:	4298      	cmp	r0, r3
 800866c:	d9f3      	bls.n	8008656 <HAL_RCC_DeInit+0x7e>
    {
      return HAL_TIMEOUT;
 800866e:	2403      	movs	r4, #3
 8008670:	e081      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8008672:	f7f8 fd6f 	bl	8001154 <HAL_GetTick>
 8008676:	4605      	mov	r5, r0

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8008678:	4a41      	ldr	r2, [pc, #260]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 800867a:	6811      	ldr	r1, [r2, #0]
 800867c:	4b45      	ldr	r3, [pc, #276]	; (8008794 <HAL_RCC_DeInit+0x1bc>)
 800867e:	400b      	ands	r3, r1
 8008680:	6013      	str	r3, [r2, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008682:	4b3f      	ldr	r3, [pc, #252]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800868a:	d006      	beq.n	800869a <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800868c:	f7f8 fd62 	bl	8001154 <HAL_GetTick>
 8008690:	1b40      	subs	r0, r0, r5
 8008692:	2864      	cmp	r0, #100	; 0x64
 8008694:	d9f5      	bls.n	8008682 <HAL_RCC_DeInit+0xaa>
    {
      return HAL_TIMEOUT;
 8008696:	2403      	movs	r4, #3
 8008698:	e06d      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800869a:	f7f8 fd5b 	bl	8001154 <HAL_GetTick>
 800869e:	4605      	mov	r5, r0

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80086a0:	4a37      	ldr	r2, [pc, #220]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80086aa:	4b35      	ldr	r3, [pc, #212]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80086b2:	d006      	beq.n	80086c2 <HAL_RCC_DeInit+0xea>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b4:	f7f8 fd4e 	bl	8001154 <HAL_GetTick>
 80086b8:	1b40      	subs	r0, r0, r5
 80086ba:	2802      	cmp	r0, #2
 80086bc:	d9f5      	bls.n	80086aa <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 80086be:	2403      	movs	r4, #3
 80086c0:	e059      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80086c2:	f7f8 fd47 	bl	8001154 <HAL_GetTick>
 80086c6:	4605      	mov	r5, r0

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 80086c8:	4a2d      	ldr	r2, [pc, #180]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086ca:	6813      	ldr	r3, [r2, #0]
 80086cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086d0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80086d2:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80086da:	d006      	beq.n	80086ea <HAL_RCC_DeInit+0x112>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086dc:	f7f8 fd3a 	bl	8001154 <HAL_GetTick>
 80086e0:	1b40      	subs	r0, r0, r5
 80086e2:	2802      	cmp	r0, #2
 80086e4:	d9f5      	bls.n	80086d2 <HAL_RCC_DeInit+0xfa>
    {
      return HAL_TIMEOUT;
 80086e6:	2403      	movs	r4, #3
 80086e8:	e045      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80086ea:	f7f8 fd33 	bl	8001154 <HAL_GetTick>
 80086ee:	4605      	mov	r5, r0

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80086f0:	4a23      	ldr	r2, [pc, #140]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80086fa:	4b21      	ldr	r3, [pc, #132]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008702:	d006      	beq.n	8008712 <HAL_RCC_DeInit+0x13a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008704:	f7f8 fd26 	bl	8001154 <HAL_GetTick>
 8008708:	1b40      	subs	r0, r0, r5
 800870a:	2802      	cmp	r0, #2
 800870c:	d9f5      	bls.n	80086fa <HAL_RCC_DeInit+0x122>
    {
      return HAL_TIMEOUT;
 800870e:	2403      	movs	r4, #3
 8008710:	e031      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <HAL_RCC_DeInit+0x1a8>)
 8008714:	2200      	movs	r2, #0
 8008716:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8008718:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 800871a:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 800871c:	491e      	ldr	r1, [pc, #120]	; (8008798 <HAL_RCC_DeInit+0x1c0>)
 800871e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8008720:	491e      	ldr	r1, [pc, #120]	; (800879c <HAL_RCC_DeInit+0x1c4>)
 8008722:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8008724:	491e      	ldr	r1, [pc, #120]	; (80087a0 <HAL_RCC_DeInit+0x1c8>)
 8008726:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8008728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 800872a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800872c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 800872e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8008730:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8008738:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800873a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8008742:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8008746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800874a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_RCC_DeInit+0x1a4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f013 0f08 	tst.w	r3, #8
 8008756:	d00e      	beq.n	8008776 <HAL_RCC_DeInit+0x19e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8008758:	4a08      	ldr	r2, [pc, #32]	; (800877c <HAL_RCC_DeInit+0x1a4>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	f023 030f 	bic.w	r3, r3, #15
 8008760:	f043 0307 	orr.w	r3, r3, #7
 8008764:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8008766:	6813      	ldr	r3, [r2, #0]
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	2b07      	cmp	r3, #7
 800876e:	d002      	beq.n	8008776 <HAL_RCC_DeInit+0x19e>
    {
      return HAL_ERROR;
 8008770:	2401      	movs	r4, #1
 8008772:	e000      	b.n	8008776 <HAL_RCC_DeInit+0x19e>
      return HAL_ERROR;
 8008774:	2401      	movs	r4, #1
    }

  }

  return HAL_OK;
}
 8008776:	4620      	mov	r0, r4
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	52002000 	.word	0x52002000
 8008780:	58024400 	.word	0x58024400
 8008784:	03d09000 	.word	0x03d09000
 8008788:	24000000 	.word	0x24000000
 800878c:	24000004 	.word	0x24000004
 8008790:	2400037c 	.word	0x2400037c
 8008794:	fff6ed45 	.word	0xfff6ed45
 8008798:	02020200 	.word	0x02020200
 800879c:	01ff0000 	.word	0x01ff0000
 80087a0:	01010280 	.word	0x01010280

080087a4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f000 8339 	beq.w	8008e1c <HAL_RCC_OscConfig+0x678>
{
 80087aa:	b538      	push	{r3, r4, r5, lr}
 80087ac:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ae:	6803      	ldr	r3, [r0, #0]
 80087b0:	f013 0f01 	tst.w	r3, #1
 80087b4:	d025      	beq.n	8008802 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b6:	4a94      	ldr	r2, [pc, #592]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80087b8:	6913      	ldr	r3, [r2, #16]
 80087ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087be:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d015      	beq.n	80087f0 <HAL_RCC_OscConfig+0x4c>
 80087c4:	2b18      	cmp	r3, #24
 80087c6:	d00f      	beq.n	80087e8 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ce:	d03f      	beq.n	8008850 <HAL_RCC_OscConfig+0xac>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d153      	bne.n	800887c <HAL_RCC_OscConfig+0xd8>
 80087d4:	4b8c      	ldr	r3, [pc, #560]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e038      	b.n	800885a <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087e8:	f002 0203 	and.w	r2, r2, #3
 80087ec:	2a02      	cmp	r2, #2
 80087ee:	d1eb      	bne.n	80087c8 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f0:	4b85      	ldr	r3, [pc, #532]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80087f8:	d003      	beq.n	8008802 <HAL_RCC_OscConfig+0x5e>
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 830f 	beq.w	8008e20 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f013 0f02 	tst.w	r3, #2
 8008808:	f000 80a1 	beq.w	800894e <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800880c:	4a7e      	ldr	r2, [pc, #504]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 800880e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008810:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008812:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008816:	d05a      	beq.n	80088ce <HAL_RCC_OscConfig+0x12a>
 8008818:	2b18      	cmp	r3, #24
 800881a:	d055      	beq.n	80088c8 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800881c:	68e3      	ldr	r3, [r4, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 80de 	beq.w	80089e0 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008824:	4978      	ldr	r1, [pc, #480]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008826:	680a      	ldr	r2, [r1, #0]
 8008828:	f022 0219 	bic.w	r2, r2, #25
 800882c:	4313      	orrs	r3, r2
 800882e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008830:	f7f8 fc90 	bl	8001154 <HAL_GetTick>
 8008834:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008836:	4b74      	ldr	r3, [pc, #464]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f013 0f04 	tst.w	r3, #4
 800883e:	f040 80ad 	bne.w	800899c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008842:	f7f8 fc87 	bl	8001154 <HAL_GetTick>
 8008846:	1b40      	subs	r0, r0, r5
 8008848:	2802      	cmp	r0, #2
 800884a:	d9f4      	bls.n	8008836 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 800884c:	2003      	movs	r0, #3
 800884e:	e2ee      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008850:	4a6d      	ldr	r2, [pc, #436]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008858:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	b32b      	cbz	r3, 80088aa <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800885e:	f7f8 fc79 	bl	8001154 <HAL_GetTick>
 8008862:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008864:	4b68      	ldr	r3, [pc, #416]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800886c:	d1c9      	bne.n	8008802 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800886e:	f7f8 fc71 	bl	8001154 <HAL_GetTick>
 8008872:	1b40      	subs	r0, r0, r5
 8008874:	2864      	cmp	r0, #100	; 0x64
 8008876:	d9f5      	bls.n	8008864 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8008878:	2003      	movs	r0, #3
 800887a:	e2d8      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800887c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008880:	d009      	beq.n	8008896 <HAL_RCC_OscConfig+0xf2>
 8008882:	4b61      	ldr	r3, [pc, #388]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e7e1      	b.n	800885a <HAL_RCC_OscConfig+0xb6>
 8008896:	4b5c      	ldr	r3, [pc, #368]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	e7d7      	b.n	800885a <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 80088aa:	f7f8 fc53 	bl	8001154 <HAL_GetTick>
 80088ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088b0:	4b55      	ldr	r3, [pc, #340]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80088b8:	d0a3      	beq.n	8008802 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088ba:	f7f8 fc4b 	bl	8001154 <HAL_GetTick>
 80088be:	1b40      	subs	r0, r0, r5
 80088c0:	2864      	cmp	r0, #100	; 0x64
 80088c2:	d9f5      	bls.n	80088b0 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80088c4:	2003      	movs	r0, #3
 80088c6:	e2b2      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088c8:	f012 0f03 	tst.w	r2, #3
 80088cc:	d1a6      	bne.n	800881c <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ce:	4b4e      	ldr	r3, [pc, #312]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f013 0f04 	tst.w	r3, #4
 80088d6:	d003      	beq.n	80088e0 <HAL_RCC_OscConfig+0x13c>
 80088d8:	68e3      	ldr	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 82a2 	beq.w	8008e24 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088e0:	4a49      	ldr	r2, [pc, #292]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	f023 0319 	bic.w	r3, r3, #25
 80088e8:	68e1      	ldr	r1, [r4, #12]
 80088ea:	430b      	orrs	r3, r1
 80088ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80088ee:	f7f8 fc31 	bl	8001154 <HAL_GetTick>
 80088f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088f4:	4b44      	ldr	r3, [pc, #272]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f013 0f04 	tst.w	r3, #4
 80088fc:	d106      	bne.n	800890c <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088fe:	f7f8 fc29 	bl	8001154 <HAL_GetTick>
 8008902:	1b40      	subs	r0, r0, r5
 8008904:	2802      	cmp	r0, #2
 8008906:	d9f5      	bls.n	80088f4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8008908:	2003      	movs	r0, #3
 800890a:	e290      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800890c:	f7f8 fc70 	bl	80011f0 <HAL_GetREVID>
 8008910:	f241 0303 	movw	r3, #4099	; 0x1003
 8008914:	4298      	cmp	r0, r3
 8008916:	d812      	bhi.n	800893e <HAL_RCC_OscConfig+0x19a>
 8008918:	6922      	ldr	r2, [r4, #16]
 800891a:	2a40      	cmp	r2, #64	; 0x40
 800891c:	d007      	beq.n	800892e <HAL_RCC_OscConfig+0x18a>
 800891e:	493a      	ldr	r1, [pc, #232]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008920:	684b      	ldr	r3, [r1, #4]
 8008922:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008926:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	e00f      	b.n	800894e <HAL_RCC_OscConfig+0x1aa>
 800892e:	4a36      	ldr	r2, [pc, #216]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008930:	6853      	ldr	r3, [r2, #4]
 8008932:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800893a:	6053      	str	r3, [r2, #4]
 800893c:	e007      	b.n	800894e <HAL_RCC_OscConfig+0x1aa>
 800893e:	4a32      	ldr	r2, [pc, #200]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008940:	6853      	ldr	r3, [r2, #4]
 8008942:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008946:	6921      	ldr	r1, [r4, #16]
 8008948:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800894c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f013 0f10 	tst.w	r3, #16
 8008954:	f000 8088 	beq.w	8008a68 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008958:	4a2b      	ldr	r2, [pc, #172]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 800895a:	6913      	ldr	r3, [r2, #16]
 800895c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008960:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008962:	2b08      	cmp	r3, #8
 8008964:	d056      	beq.n	8008a14 <HAL_RCC_OscConfig+0x270>
 8008966:	2b18      	cmp	r3, #24
 8008968:	d050      	beq.n	8008a0c <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800896a:	69e3      	ldr	r3, [r4, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80b8 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008972:	4a25      	ldr	r2, [pc, #148]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008974:	6813      	ldr	r3, [r2, #0]
 8008976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897c:	f7f8 fbea 	bl	8001154 <HAL_GetTick>
 8008980:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008982:	4b21      	ldr	r3, [pc, #132]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f413 7f80 	tst.w	r3, #256	; 0x100
 800898a:	f040 8088 	bne.w	8008a9e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800898e:	f7f8 fbe1 	bl	8001154 <HAL_GetTick>
 8008992:	1b40      	subs	r0, r0, r5
 8008994:	2802      	cmp	r0, #2
 8008996:	d9f4      	bls.n	8008982 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8008998:	2003      	movs	r0, #3
 800899a:	e248      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800899c:	f7f8 fc28 	bl	80011f0 <HAL_GetREVID>
 80089a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80089a4:	4298      	cmp	r0, r3
 80089a6:	d812      	bhi.n	80089ce <HAL_RCC_OscConfig+0x22a>
 80089a8:	6922      	ldr	r2, [r4, #16]
 80089aa:	2a40      	cmp	r2, #64	; 0x40
 80089ac:	d007      	beq.n	80089be <HAL_RCC_OscConfig+0x21a>
 80089ae:	4916      	ldr	r1, [pc, #88]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80089b0:	684b      	ldr	r3, [r1, #4]
 80089b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80089ba:	604b      	str	r3, [r1, #4]
 80089bc:	e7c7      	b.n	800894e <HAL_RCC_OscConfig+0x1aa>
 80089be:	4a12      	ldr	r2, [pc, #72]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80089c0:	6853      	ldr	r3, [r2, #4]
 80089c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ca:	6053      	str	r3, [r2, #4]
 80089cc:	e7bf      	b.n	800894e <HAL_RCC_OscConfig+0x1aa>
 80089ce:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80089d0:	6853      	ldr	r3, [r2, #4]
 80089d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089d6:	6921      	ldr	r1, [r4, #16]
 80089d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80089dc:	6053      	str	r3, [r2, #4]
 80089de:	e7b6      	b.n	800894e <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80089e0:	4a09      	ldr	r2, [pc, #36]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80089ea:	f7f8 fbb3 	bl	8001154 <HAL_GetTick>
 80089ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_RCC_OscConfig+0x264>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f013 0f04 	tst.w	r3, #4
 80089f8:	d0a9      	beq.n	800894e <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089fa:	f7f8 fbab 	bl	8001154 <HAL_GetTick>
 80089fe:	1b40      	subs	r0, r0, r5
 8008a00:	2802      	cmp	r0, #2
 8008a02:	d9f5      	bls.n	80089f0 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8008a04:	2003      	movs	r0, #3
 8008a06:	e212      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008a08:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a0c:	f002 0203 	and.w	r2, r2, #3
 8008a10:	2a01      	cmp	r2, #1
 8008a12:	d1aa      	bne.n	800896a <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a14:	4ba1      	ldr	r3, [pc, #644]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a1c:	d003      	beq.n	8008a26 <HAL_RCC_OscConfig+0x282>
 8008a1e:	69e3      	ldr	r3, [r4, #28]
 8008a20:	2b80      	cmp	r3, #128	; 0x80
 8008a22:	f040 8201 	bne.w	8008e28 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a26:	f7f8 fbe3 	bl	80011f0 <HAL_GetREVID>
 8008a2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a2e:	4298      	cmp	r0, r3
 8008a30:	d812      	bhi.n	8008a58 <HAL_RCC_OscConfig+0x2b4>
 8008a32:	6a22      	ldr	r2, [r4, #32]
 8008a34:	2a20      	cmp	r2, #32
 8008a36:	d007      	beq.n	8008a48 <HAL_RCC_OscConfig+0x2a4>
 8008a38:	4998      	ldr	r1, [pc, #608]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a3a:	684b      	ldr	r3, [r1, #4]
 8008a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a40:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008a44:	604b      	str	r3, [r1, #4]
 8008a46:	e00f      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
 8008a48:	4a94      	ldr	r2, [pc, #592]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a4a:	6853      	ldr	r3, [r2, #4]
 8008a4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a54:	6053      	str	r3, [r2, #4]
 8008a56:	e007      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
 8008a58:	4a90      	ldr	r2, [pc, #576]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a5a:	68d3      	ldr	r3, [r2, #12]
 8008a5c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a66:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	f013 0f08 	tst.w	r3, #8
 8008a6e:	d060      	beq.n	8008b32 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a70:	6963      	ldr	r3, [r4, #20]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d049      	beq.n	8008b0a <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a76:	4a89      	ldr	r2, [pc, #548]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a78:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a80:	f7f8 fb68 	bl	8001154 <HAL_GetTick>
 8008a84:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a86:	4b85      	ldr	r3, [pc, #532]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8a:	f013 0f02 	tst.w	r3, #2
 8008a8e:	d150      	bne.n	8008b32 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a90:	f7f8 fb60 	bl	8001154 <HAL_GetTick>
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	2802      	cmp	r0, #2
 8008a98:	d9f5      	bls.n	8008a86 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8008a9a:	2003      	movs	r0, #3
 8008a9c:	e1c7      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a9e:	f7f8 fba7 	bl	80011f0 <HAL_GetREVID>
 8008aa2:	f241 0303 	movw	r3, #4099	; 0x1003
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	d812      	bhi.n	8008ad0 <HAL_RCC_OscConfig+0x32c>
 8008aaa:	6a22      	ldr	r2, [r4, #32]
 8008aac:	2a20      	cmp	r2, #32
 8008aae:	d007      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x31c>
 8008ab0:	497a      	ldr	r1, [pc, #488]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008ab2:	684b      	ldr	r3, [r1, #4]
 8008ab4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ab8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008abc:	604b      	str	r3, [r1, #4]
 8008abe:	e7d3      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
 8008ac0:	4a76      	ldr	r2, [pc, #472]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008ac2:	6853      	ldr	r3, [r2, #4]
 8008ac4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008acc:	6053      	str	r3, [r2, #4]
 8008ace:	e7cb      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
 8008ad0:	4a72      	ldr	r2, [pc, #456]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	68d3      	ldr	r3, [r2, #12]
 8008ad4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ade:	60d3      	str	r3, [r2, #12]
 8008ae0:	e7c2      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8008ae2:	4a6e      	ldr	r2, [pc, #440]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008aec:	f7f8 fb32 	bl	8001154 <HAL_GetTick>
 8008af0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008af2:	4b6a      	ldr	r3, [pc, #424]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008afa:	d0b5      	beq.n	8008a68 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008afc:	f7f8 fb2a 	bl	8001154 <HAL_GetTick>
 8008b00:	1b40      	subs	r0, r0, r5
 8008b02:	2802      	cmp	r0, #2
 8008b04:	d9f5      	bls.n	8008af2 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8008b06:	2003      	movs	r0, #3
 8008b08:	e191      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b0a:	4a64      	ldr	r2, [pc, #400]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b0c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b14:	f7f8 fb1e 	bl	8001154 <HAL_GetTick>
 8008b18:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b1a:	4b60      	ldr	r3, [pc, #384]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b1e:	f013 0f02 	tst.w	r3, #2
 8008b22:	d006      	beq.n	8008b32 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b24:	f7f8 fb16 	bl	8001154 <HAL_GetTick>
 8008b28:	1b40      	subs	r0, r0, r5
 8008b2a:	2802      	cmp	r0, #2
 8008b2c:	d9f5      	bls.n	8008b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b2e:	2003      	movs	r0, #3
 8008b30:	e17d      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	f013 0f20 	tst.w	r3, #32
 8008b38:	d029      	beq.n	8008b8e <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b3a:	69a3      	ldr	r3, [r4, #24]
 8008b3c:	b19b      	cbz	r3, 8008b66 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b3e:	4a57      	ldr	r2, [pc, #348]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b48:	f7f8 fb04 	bl	8001154 <HAL_GetTick>
 8008b4c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b4e:	4b53      	ldr	r3, [pc, #332]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008b56:	d11a      	bne.n	8008b8e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b58:	f7f8 fafc 	bl	8001154 <HAL_GetTick>
 8008b5c:	1b40      	subs	r0, r0, r5
 8008b5e:	2802      	cmp	r0, #2
 8008b60:	d9f5      	bls.n	8008b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008b62:	2003      	movs	r0, #3
 8008b64:	e163      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b66:	4a4d      	ldr	r2, [pc, #308]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b70:	f7f8 faf0 	bl	8001154 <HAL_GetTick>
 8008b74:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b76:	4b49      	ldr	r3, [pc, #292]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008b7e:	d006      	beq.n	8008b8e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b80:	f7f8 fae8 	bl	8001154 <HAL_GetTick>
 8008b84:	1b40      	subs	r0, r0, r5
 8008b86:	2802      	cmp	r0, #2
 8008b88:	d9f5      	bls.n	8008b76 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008b8a:	2003      	movs	r0, #3
 8008b8c:	e14f      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f013 0f04 	tst.w	r3, #4
 8008b94:	d121      	bne.n	8008bda <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8147 	beq.w	8008e2c <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b9e:	4a3f      	ldr	r2, [pc, #252]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008ba0:	6912      	ldr	r2, [r2, #16]
 8008ba2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008ba6:	2a18      	cmp	r2, #24
 8008ba8:	f000 80ee 	beq.w	8008d88 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d079      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb0:	4a3a      	ldr	r2, [pc, #232]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bba:	f7f8 facb 	bl	8001154 <HAL_GetTick>
 8008bbe:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bc0:	4b36      	ldr	r3, [pc, #216]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008bc8:	f000 80dc 	beq.w	8008d84 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bcc:	f7f8 fac2 	bl	8001154 <HAL_GetTick>
 8008bd0:	1b00      	subs	r0, r0, r4
 8008bd2:	2802      	cmp	r0, #2
 8008bd4:	d9f4      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008bd6:	2003      	movs	r0, #3
 8008bd8:	e129      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008bda:	4a31      	ldr	r2, [pc, #196]	; (8008ca0 <HAL_RCC_OscConfig+0x4fc>)
 8008bdc:	6813      	ldr	r3, [r2, #0]
 8008bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008be4:	f7f8 fab6 	bl	8001154 <HAL_GetTick>
 8008be8:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bea:	4b2d      	ldr	r3, [pc, #180]	; (8008ca0 <HAL_RCC_OscConfig+0x4fc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008bf2:	d106      	bne.n	8008c02 <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bf4:	f7f8 faae 	bl	8001154 <HAL_GetTick>
 8008bf8:	1b40      	subs	r0, r0, r5
 8008bfa:	2864      	cmp	r0, #100	; 0x64
 8008bfc:	d9f5      	bls.n	8008bea <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8008bfe:	2003      	movs	r0, #3
 8008c00:	e115      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d00a      	beq.n	8008c1e <HAL_RCC_OscConfig+0x47a>
 8008c08:	bb0b      	cbnz	r3, 8008c4e <HAL_RCC_OscConfig+0x4aa>
 8008c0a:	4b24      	ldr	r3, [pc, #144]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c0e:	f022 0201 	bic.w	r2, r2, #1
 8008c12:	671a      	str	r2, [r3, #112]	; 0x70
 8008c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c16:	f022 0204 	bic.w	r2, r2, #4
 8008c1a:	671a      	str	r2, [r3, #112]	; 0x70
 8008c1c:	e004      	b.n	8008c28 <HAL_RCC_OscConfig+0x484>
 8008c1e:	4a1f      	ldr	r2, [pc, #124]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	b333      	cbz	r3, 8008c7a <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8008c2c:	f7f8 fa92 	bl	8001154 <HAL_GetTick>
 8008c30:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c32:	4b1a      	ldr	r3, [pc, #104]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	f013 0f02 	tst.w	r3, #2
 8008c3a:	d1ac      	bne.n	8008b96 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3c:	f7f8 fa8a 	bl	8001154 <HAL_GetTick>
 8008c40:	1b40      	subs	r0, r0, r5
 8008c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c46:	4298      	cmp	r0, r3
 8008c48:	d9f3      	bls.n	8008c32 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8008c4a:	2003      	movs	r0, #3
 8008c4c:	e0ef      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d009      	beq.n	8008c66 <HAL_RCC_OscConfig+0x4c2>
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c56:	f022 0201 	bic.w	r2, r2, #1
 8008c5a:	671a      	str	r2, [r3, #112]	; 0x70
 8008c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c5e:	f022 0204 	bic.w	r2, r2, #4
 8008c62:	671a      	str	r2, [r3, #112]	; 0x70
 8008c64:	e7e0      	b.n	8008c28 <HAL_RCC_OscConfig+0x484>
 8008c66:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c6a:	f042 0204 	orr.w	r2, r2, #4
 8008c6e:	671a      	str	r2, [r3, #112]	; 0x70
 8008c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	671a      	str	r2, [r3, #112]	; 0x70
 8008c78:	e7d6      	b.n	8008c28 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8008c7a:	f7f8 fa6b 	bl	8001154 <HAL_GetTick>
 8008c7e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <HAL_RCC_OscConfig+0x4f8>)
 8008c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c84:	f013 0f02 	tst.w	r3, #2
 8008c88:	d085      	beq.n	8008b96 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c8a:	f7f8 fa63 	bl	8001154 <HAL_GetTick>
 8008c8e:	1b40      	subs	r0, r0, r5
 8008c90:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c94:	4298      	cmp	r0, r3
 8008c96:	d9f3      	bls.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8008c98:	2003      	movs	r0, #3
 8008c9a:	e0c8      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8008ca4:	4a69      	ldr	r2, [pc, #420]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008cae:	f7f8 fa51 	bl	8001154 <HAL_GetTick>
 8008cb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cb4:	4b65      	ldr	r3, [pc, #404]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008cbc:	d006      	beq.n	8008ccc <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbe:	f7f8 fa49 	bl	8001154 <HAL_GetTick>
 8008cc2:	1b40      	subs	r0, r0, r5
 8008cc4:	2802      	cmp	r0, #2
 8008cc6:	d9f5      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8008cc8:	2003      	movs	r0, #3
 8008cca:	e0b0      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ccc:	4b5f      	ldr	r3, [pc, #380]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008cce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008cd0:	4a5f      	ldr	r2, [pc, #380]	; (8008e50 <HAL_RCC_OscConfig+0x6ac>)
 8008cd2:	400a      	ands	r2, r1
 8008cd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008cd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008cd8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28
 8008ce0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008ce2:	3a01      	subs	r2, #1
 8008ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cea:	3901      	subs	r1, #1
 8008cec:	0249      	lsls	r1, r1, #9
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008cf4:	3901      	subs	r1, #1
 8008cf6:	0409      	lsls	r1, r1, #16
 8008cf8:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d00:	3901      	subs	r1, #1
 8008d02:	0609      	lsls	r1, r1, #24
 8008d04:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	f022 0201 	bic.w	r2, r2, #1
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d16:	4a4f      	ldr	r2, [pc, #316]	; (8008e54 <HAL_RCC_OscConfig+0x6b0>)
 8008d18:	400a      	ands	r2, r1
 8008d1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d1c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d24:	f022 020c 	bic.w	r2, r2, #12
 8008d28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	f022 0202 	bic.w	r2, r2, #2
 8008d34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008d36:	430a      	orrs	r2, r1
 8008d38:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d40:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008d48:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008d50:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d54:	f042 0201 	orr.w	r2, r2, #1
 8008d58:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008d60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d62:	f7f8 f9f7 	bl	8001154 <HAL_GetTick>
 8008d66:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d68:	4b38      	ldr	r3, [pc, #224]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008d70:	d106      	bne.n	8008d80 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d72:	f7f8 f9ef 	bl	8001154 <HAL_GetTick>
 8008d76:	1b00      	subs	r0, r0, r4
 8008d78:	2802      	cmp	r0, #2
 8008d7a:	d9f5      	bls.n	8008d68 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8008d7c:	2003      	movs	r0, #3
 8008d7e:	e056      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8008d80:	2000      	movs	r0, #0
 8008d82:	e054      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008d84:	2000      	movs	r0, #0
 8008d86:	e052      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d88:	4a30      	ldr	r2, [pc, #192]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008d8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d8c:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d04e      	beq.n	8008e30 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d92:	f001 0303 	and.w	r3, r1, #3
 8008d96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d14b      	bne.n	8008e34 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d9c:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8008da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da2:	4299      	cmp	r1, r3
 8008da4:	d148      	bne.n	8008e38 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008da6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8008daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d144      	bne.n	8008e3c <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008db2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8008db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d140      	bne.n	8008e40 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dbe:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8008dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d13c      	bne.n	8008e44 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008dca:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8008dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dd2:	4298      	cmp	r0, r3
 8008dd4:	d138      	bne.n	8008e48 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008dde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d101      	bne.n	8008de8 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8008de4:	2000      	movs	r0, #0
 8008de6:	e022      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 8008de8:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008dea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8008df2:	f7f8 f9af 	bl	8001154 <HAL_GetTick>
 8008df6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008df8:	f7f8 f9ac 	bl	8001154 <HAL_GetTick>
 8008dfc:	42a8      	cmp	r0, r5
 8008dfe:	d0fb      	beq.n	8008df8 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e00:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <HAL_RCC_OscConfig+0x6a8>)
 8008e02:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008e04:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <HAL_RCC_OscConfig+0x6b0>)
 8008e06:	400b      	ands	r3, r1
 8008e08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e0e:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e12:	f043 0301 	orr.w	r3, r3, #1
 8008e16:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8008e1c:	2001      	movs	r0, #1
}
 8008e1e:	4770      	bx	lr
        return HAL_ERROR;
 8008e20:	2001      	movs	r0, #1
 8008e22:	e004      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8008e24:	2001      	movs	r0, #1
 8008e26:	e002      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8008e28:	2001      	movs	r0, #1
 8008e2a:	e000      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8008e2c:	2000      	movs	r0, #0
}
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8008e30:	2001      	movs	r0, #1
 8008e32:	e7fc      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7fa      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7f8      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	e7f6      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e40:	2001      	movs	r0, #1
 8008e42:	e7f4      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e44:	2001      	movs	r0, #1
 8008e46:	e7f2      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e7f0      	b.n	8008e2e <HAL_RCC_OscConfig+0x68a>
 8008e4c:	58024400 	.word	0x58024400
 8008e50:	fffffc0c 	.word	0xfffffc0c
 8008e54:	ffff0007 	.word	0xffff0007

08008e58 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008e60:	bb10      	cbnz	r0, 8008ea8 <HAL_RCC_MCOConfig+0x50>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008e62:	4e23      	ldr	r6, [pc, #140]	; (8008ef0 <HAL_RCC_MCOConfig+0x98>)
 8008e64:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8008e70:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	9b01      	ldr	r3, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e82:	2302      	movs	r3, #2
 8008e84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e86:	2303      	movs	r3, #3
 8008e88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008e8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008e90:	a903      	add	r1, sp, #12
 8008e92:	4818      	ldr	r0, [pc, #96]	; (8008ef4 <HAL_RCC_MCOConfig+0x9c>)
 8008e94:	f7fe fa6e 	bl	8007374 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008e98:	6933      	ldr	r3, [r6, #16]
 8008e9a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8008e9e:	4325      	orrs	r5, r4
 8008ea0:	431d      	orrs	r5, r3
 8008ea2:	6135      	str	r5, [r6, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008ea4:	b008      	add	sp, #32
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8008ea8:	4e11      	ldr	r6, [pc, #68]	; (8008ef0 <HAL_RCC_MCOConfig+0x98>)
 8008eaa:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8008eae:	f043 0304 	orr.w	r3, r3, #4
 8008eb2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8008eb6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	9302      	str	r3, [sp, #8]
 8008ec0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008ed4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008ed6:	a903      	add	r1, sp, #12
 8008ed8:	4807      	ldr	r0, [pc, #28]	; (8008ef8 <HAL_RCC_MCOConfig+0xa0>)
 8008eda:	f7fe fa4b 	bl	8007374 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008ede:	6933      	ldr	r3, [r6, #16]
 8008ee0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008ee4:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
 8008ee8:	431c      	orrs	r4, r3
 8008eea:	6134      	str	r4, [r6, #16]
}
 8008eec:	e7da      	b.n	8008ea4 <HAL_RCC_MCOConfig+0x4c>
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	58020000 	.word	0x58020000
 8008ef8:	58020800 	.word	0x58020800

08008efc <HAL_RCC_EnableCSS>:
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8008efc:	4a02      	ldr	r2, [pc, #8]	; (8008f08 <HAL_RCC_EnableCSS+0xc>)
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f04:	6013      	str	r3, [r2, #0]
}
 8008f06:	4770      	bx	lr
 8008f08:	58024400 	.word	0x58024400

08008f0c <HAL_RCC_DisableCSS>:
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
 8008f0c:	4a02      	ldr	r2, [pc, #8]	; (8008f18 <HAL_RCC_DisableCSS+0xc>)
 8008f0e:	6813      	ldr	r3, [r2, #0]
 8008f10:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008f14:	6013      	str	r3, [r2, #0]
}
 8008f16:	4770      	bx	lr
 8008f18:	58024400 	.word	0x58024400

08008f1c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f1c:	4b74      	ldr	r3, [pc, #464]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	f000 80de 	beq.w	80090e6 <HAL_RCC_GetSysClockFreq+0x1ca>
 8008f2a:	2b18      	cmp	r3, #24
 8008f2c:	d010      	beq.n	8008f50 <HAL_RCC_GetSysClockFreq+0x34>
 8008f2e:	b10b      	cbz	r3, 8008f34 <HAL_RCC_GetSysClockFreq+0x18>
 8008f30:	4870      	ldr	r0, [pc, #448]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8008f32:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f34:	4b6e      	ldr	r3, [pc, #440]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f013 0f20 	tst.w	r3, #32
 8008f3c:	f000 80d5 	beq.w	80090ea <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f40:	4b6b      	ldr	r3, [pc, #428]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008f48:	4b6b      	ldr	r3, [pc, #428]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008f4a:	fa23 f000 	lsr.w	r0, r3, r0
 8008f4e:	4770      	bx	lr
{
 8008f50:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f52:	4a67      	ldr	r2, [pc, #412]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f56:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008f5a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8008f5c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f62:	f003 0c01 	and.w	ip, r3, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f66:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008f68:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008f6c:	fb0c f303 	mul.w	r3, ip, r3
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8008f78:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8008f7c:	f000 8093 	beq.w	80090a6 <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 8008f80:	2901      	cmp	r1, #1
 8008f82:	d065      	beq.n	8009050 <HAL_RCC_GetSysClockFreq+0x134>
 8008f84:	2902      	cmp	r1, #2
 8008f86:	f000 8091 	beq.w	80090ac <HAL_RCC_GetSysClockFreq+0x190>
 8008f8a:	b1e1      	cbz	r1, 8008fc6 <HAL_RCC_GetSysClockFreq+0xaa>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f8c:	ee07 0a10 	vmov	s14, r0
 8008f90:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f94:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80090fc <HAL_RCC_GetSysClockFreq+0x1e0>
 8008f98:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008f9c:	4b54      	ldr	r3, [pc, #336]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa4:	ee06 3a90 	vmov	s13, r3
 8008fa8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008fac:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8009100 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008fb0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8008fc4:	e060      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	f013 0f20 	tst.w	r3, #32
 8008fcc:	d023      	beq.n	8009016 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fce:	4611      	mov	r1, r2
 8008fd0:	6812      	ldr	r2, [r2, #0]
 8008fd2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008fd6:	4b48      	ldr	r3, [pc, #288]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008fd8:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fda:	ee07 3a10 	vmov	s14, r3
 8008fde:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008fe2:	ee07 0a10 	vmov	s14, r0
 8008fe6:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008fea:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008fee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff4:	ee06 3a90 	vmov	s13, r3
 8008ff8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008ffc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009100 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009000:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800900c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009014:	e038      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009016:	ee07 0a10 	vmov	s14, r0
 800901a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800901e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8009104 <HAL_RCC_GetSysClockFreq+0x1e8>
 8009022:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009026:	4b32      	ldr	r3, [pc, #200]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	ee06 3a90 	vmov	s13, r3
 8009032:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009036:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009100 <HAL_RCC_GetSysClockFreq+0x1e4>
 800903a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800904e:	e01b      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009050:	ee07 0a10 	vmov	s14, r0
 8009054:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8009058:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80090fc <HAL_RCC_GetSysClockFreq+0x1e0>
 800905c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009060:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	ee06 3a90 	vmov	s13, r3
 800906c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009070:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8009100 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009074:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009084:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009088:	4b19      	ldr	r3, [pc, #100]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009090:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800909e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80090a2:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80090a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090aa:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090ac:	ee07 0a10 	vmov	s14, r0
 80090b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80090b4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009108 <HAL_RCC_GetSysClockFreq+0x1ec>
 80090b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c4:	ee06 3a90 	vmov	s13, r3
 80090c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80090cc:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8009100 <HAL_RCC_GetSysClockFreq+0x1e4>
 80090d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80090d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e0:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80090e4:	e7d0      	b.n	8009088 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 80090e6:	4809      	ldr	r0, [pc, #36]	; (800910c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090e8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090ea:	4803      	ldr	r0, [pc, #12]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
 80090f4:	003d0900 	.word	0x003d0900
 80090f8:	03d09000 	.word	0x03d09000
 80090fc:	4a742400 	.word	0x4a742400
 8009100:	39000000 	.word	0x39000000
 8009104:	4c742400 	.word	0x4c742400
 8009108:	4af42400 	.word	0x4af42400
 800910c:	007a1200 	.word	0x007a1200

08009110 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009110:	2800      	cmp	r0, #0
 8009112:	f000 8132 	beq.w	800937a <HAL_RCC_ClockConfig+0x26a>
{
 8009116:	b570      	push	{r4, r5, r6, lr}
 8009118:	460d      	mov	r5, r1
 800911a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800911c:	4b9b      	ldr	r3, [pc, #620]	; (800938c <HAL_RCC_ClockConfig+0x27c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 030f 	and.w	r3, r3, #15
 8009124:	428b      	cmp	r3, r1
 8009126:	d20b      	bcs.n	8009140 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009128:	4a98      	ldr	r2, [pc, #608]	; (800938c <HAL_RCC_ClockConfig+0x27c>)
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	f023 030f 	bic.w	r3, r3, #15
 8009130:	430b      	orrs	r3, r1
 8009132:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009134:	6813      	ldr	r3, [r2, #0]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	428b      	cmp	r3, r1
 800913c:	f040 811f 	bne.w	800937e <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	f013 0f04 	tst.w	r3, #4
 8009146:	d00c      	beq.n	8009162 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009148:	6922      	ldr	r2, [r4, #16]
 800914a:	4b91      	ldr	r3, [pc, #580]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009152:	429a      	cmp	r2, r3
 8009154:	d905      	bls.n	8009162 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009156:	498e      	ldr	r1, [pc, #568]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009158:	698b      	ldr	r3, [r1, #24]
 800915a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915e:	431a      	orrs	r2, r3
 8009160:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f013 0f08 	tst.w	r3, #8
 8009168:	d00c      	beq.n	8009184 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800916a:	6962      	ldr	r2, [r4, #20]
 800916c:	4b88      	ldr	r3, [pc, #544]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009174:	429a      	cmp	r2, r3
 8009176:	d905      	bls.n	8009184 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009178:	4985      	ldr	r1, [pc, #532]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800917a:	69cb      	ldr	r3, [r1, #28]
 800917c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009180:	431a      	orrs	r2, r3
 8009182:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	f013 0f10 	tst.w	r3, #16
 800918a:	d00c      	beq.n	80091a6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800918c:	69a2      	ldr	r2, [r4, #24]
 800918e:	4b80      	ldr	r3, [pc, #512]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009196:	429a      	cmp	r2, r3
 8009198:	d905      	bls.n	80091a6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800919a:	497d      	ldr	r1, [pc, #500]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800919c:	69cb      	ldr	r3, [r1, #28]
 800919e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091a2:	431a      	orrs	r2, r3
 80091a4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f013 0f20 	tst.w	r3, #32
 80091ac:	d00c      	beq.n	80091c8 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091ae:	69e2      	ldr	r2, [r4, #28]
 80091b0:	4b77      	ldr	r3, [pc, #476]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d905      	bls.n	80091c8 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091bc:	4974      	ldr	r1, [pc, #464]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80091be:	6a0b      	ldr	r3, [r1, #32]
 80091c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c4:	431a      	orrs	r2, r3
 80091c6:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	f013 0f02 	tst.w	r3, #2
 80091ce:	d00c      	beq.n	80091ea <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091d0:	68e2      	ldr	r2, [r4, #12]
 80091d2:	4b6f      	ldr	r3, [pc, #444]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	429a      	cmp	r2, r3
 80091dc:	d905      	bls.n	80091ea <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091de:	496c      	ldr	r1, [pc, #432]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80091e0:	698b      	ldr	r3, [r1, #24]
 80091e2:	f023 030f 	bic.w	r3, r3, #15
 80091e6:	431a      	orrs	r2, r3
 80091e8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	f013 0f01 	tst.w	r3, #1
 80091f0:	d041      	beq.n	8009276 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091f2:	4a67      	ldr	r2, [pc, #412]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80091f4:	6993      	ldr	r3, [r2, #24]
 80091f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091fa:	68a1      	ldr	r1, [r4, #8]
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d00a      	beq.n	800921c <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009206:	2b03      	cmp	r3, #3
 8009208:	d027      	beq.n	800925a <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800920a:	2b01      	cmp	r3, #1
 800920c:	d02c      	beq.n	8009268 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800920e:	4a60      	ldr	r2, [pc, #384]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	f012 0f04 	tst.w	r2, #4
 8009216:	d106      	bne.n	8009226 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8009218:	2001      	movs	r0, #1
 800921a:	e0ad      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009222:	f000 80ae 	beq.w	8009382 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009226:	495a      	ldr	r1, [pc, #360]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009228:	690a      	ldr	r2, [r1, #16]
 800922a:	f022 0207 	bic.w	r2, r2, #7
 800922e:	4313      	orrs	r3, r2
 8009230:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8009232:	f7f7 ff8f 	bl	8001154 <HAL_GetTick>
 8009236:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009238:	4b55      	ldr	r3, [pc, #340]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009240:	6862      	ldr	r2, [r4, #4]
 8009242:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009246:	d016      	beq.n	8009276 <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009248:	f7f7 ff84 	bl	8001154 <HAL_GetTick>
 800924c:	1b80      	subs	r0, r0, r6
 800924e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009252:	4298      	cmp	r0, r3
 8009254:	d9f0      	bls.n	8009238 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8009256:	2003      	movs	r0, #3
 8009258:	e08e      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800925a:	4a4d      	ldr	r2, [pc, #308]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009262:	d1e0      	bne.n	8009226 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8009264:	2001      	movs	r0, #1
 8009266:	e087      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009268:	4a49      	ldr	r2, [pc, #292]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009270:	d1d9      	bne.n	8009226 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8009272:	2001      	movs	r0, #1
 8009274:	e080      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	f013 0f02 	tst.w	r3, #2
 800927c:	d00c      	beq.n	8009298 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800927e:	68e2      	ldr	r2, [r4, #12]
 8009280:	4b43      	ldr	r3, [pc, #268]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	429a      	cmp	r2, r3
 800928a:	d205      	bcs.n	8009298 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800928c:	4940      	ldr	r1, [pc, #256]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800928e:	698b      	ldr	r3, [r1, #24]
 8009290:	f023 030f 	bic.w	r3, r3, #15
 8009294:	431a      	orrs	r2, r3
 8009296:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009298:	4b3c      	ldr	r3, [pc, #240]	; (800938c <HAL_RCC_ClockConfig+0x27c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	42ab      	cmp	r3, r5
 80092a2:	d90a      	bls.n	80092ba <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092a4:	4a39      	ldr	r2, [pc, #228]	; (800938c <HAL_RCC_ClockConfig+0x27c>)
 80092a6:	6813      	ldr	r3, [r2, #0]
 80092a8:	f023 030f 	bic.w	r3, r3, #15
 80092ac:	432b      	orrs	r3, r5
 80092ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092b0:	6813      	ldr	r3, [r2, #0]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	42ab      	cmp	r3, r5
 80092b8:	d165      	bne.n	8009386 <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	f013 0f04 	tst.w	r3, #4
 80092c0:	d00c      	beq.n	80092dc <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092c2:	6922      	ldr	r2, [r4, #16]
 80092c4:	4b32      	ldr	r3, [pc, #200]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d205      	bcs.n	80092dc <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092d0:	492f      	ldr	r1, [pc, #188]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80092d2:	698b      	ldr	r3, [r1, #24]
 80092d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d8:	431a      	orrs	r2, r3
 80092da:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	f013 0f08 	tst.w	r3, #8
 80092e2:	d00c      	beq.n	80092fe <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092e4:	6962      	ldr	r2, [r4, #20]
 80092e6:	4b2a      	ldr	r3, [pc, #168]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d205      	bcs.n	80092fe <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092f2:	4927      	ldr	r1, [pc, #156]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 80092f4:	69cb      	ldr	r3, [r1, #28]
 80092f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fa:	431a      	orrs	r2, r3
 80092fc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f013 0f10 	tst.w	r3, #16
 8009304:	d00c      	beq.n	8009320 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009306:	69a2      	ldr	r2, [r4, #24]
 8009308:	4b21      	ldr	r3, [pc, #132]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009310:	429a      	cmp	r2, r3
 8009312:	d205      	bcs.n	8009320 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009314:	491e      	ldr	r1, [pc, #120]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009316:	69cb      	ldr	r3, [r1, #28]
 8009318:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800931c:	431a      	orrs	r2, r3
 800931e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	f013 0f20 	tst.w	r3, #32
 8009326:	d00c      	beq.n	8009342 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009328:	69e2      	ldr	r2, [r4, #28]
 800932a:	4b19      	ldr	r3, [pc, #100]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009332:	429a      	cmp	r2, r3
 8009334:	d205      	bcs.n	8009342 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009336:	4916      	ldr	r1, [pc, #88]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009338:	6a0b      	ldr	r3, [r1, #32]
 800933a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933e:	431a      	orrs	r2, r3
 8009340:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009342:	f7ff fdeb 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8009346:	4912      	ldr	r1, [pc, #72]	; (8009390 <HAL_RCC_ClockConfig+0x280>)
 8009348:	698b      	ldr	r3, [r1, #24]
 800934a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <HAL_RCC_ClockConfig+0x284>)
 8009350:	5cd3      	ldrb	r3, [r2, r3]
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009358:	698b      	ldr	r3, [r1, #24]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	5cd3      	ldrb	r3, [r2, r3]
 8009360:	f003 031f 	and.w	r3, r3, #31
 8009364:	fa20 f303 	lsr.w	r3, r0, r3
 8009368:	4a0b      	ldr	r2, [pc, #44]	; (8009398 <HAL_RCC_ClockConfig+0x288>)
 800936a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <HAL_RCC_ClockConfig+0x28c>)
 800936e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <HAL_RCC_ClockConfig+0x290>)
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	f7f7 fe8c 	bl	8001090 <HAL_InitTick>
}
 8009378:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800937a:	2001      	movs	r0, #1
}
 800937c:	4770      	bx	lr
      return HAL_ERROR;
 800937e:	2001      	movs	r0, #1
 8009380:	e7fa      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8009382:	2001      	movs	r0, #1
 8009384:	e7f8      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8009386:	2001      	movs	r0, #1
 8009388:	e7f6      	b.n	8009378 <HAL_RCC_ClockConfig+0x268>
 800938a:	bf00      	nop
 800938c:	52002000 	.word	0x52002000
 8009390:	58024400 	.word	0x58024400
 8009394:	0801179c 	.word	0x0801179c
 8009398:	24000004 	.word	0x24000004
 800939c:	24000000 	.word	0x24000000
 80093a0:	2400037c 	.word	0x2400037c

080093a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093a4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80093a6:	f7ff fdb9 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 80093aa:	4a0b      	ldr	r2, [pc, #44]	; (80093d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80093ac:	6993      	ldr	r3, [r2, #24]
 80093ae:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80093b2:	490a      	ldr	r1, [pc, #40]	; (80093dc <HAL_RCC_GetHCLKFreq+0x38>)
 80093b4:	5ccb      	ldrb	r3, [r1, r3]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093be:	6992      	ldr	r2, [r2, #24]
 80093c0:	f002 020f 	and.w	r2, r2, #15
 80093c4:	5c88      	ldrb	r0, [r1, r2]
 80093c6:	f000 001f 	and.w	r0, r0, #31
 80093ca:	fa23 f000 	lsr.w	r0, r3, r0
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80093d0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093d2:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <HAL_RCC_GetHCLKFreq+0x40>)
 80093d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80093d6:	bd08      	pop	{r3, pc}
 80093d8:	58024400 	.word	0x58024400
 80093dc:	0801179c 	.word	0x0801179c
 80093e0:	24000004 	.word	0x24000004
 80093e4:	24000000 	.word	0x24000000

080093e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093e8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80093ea:	f7ff ffdb 	bl	80093a4 <HAL_RCC_GetHCLKFreq>
 80093ee:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80093f6:	4a04      	ldr	r2, [pc, #16]	; (8009408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093f8:	5cd3      	ldrb	r3, [r2, r3]
 80093fa:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093fe:	40d8      	lsrs	r0, r3
 8009400:	bd08      	pop	{r3, pc}
 8009402:	bf00      	nop
 8009404:	58024400 	.word	0x58024400
 8009408:	0801179c 	.word	0x0801179c

0800940c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800940c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800940e:	f7ff ffc9 	bl	80093a4 <HAL_RCC_GetHCLKFreq>
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800941a:	4a04      	ldr	r2, [pc, #16]	; (800942c <HAL_RCC_GetPCLK2Freq+0x20>)
 800941c:	5cd3      	ldrb	r3, [r2, r3]
 800941e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009422:	40d8      	lsrs	r0, r3
 8009424:	bd08      	pop	{r3, pc}
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
 800942c:	0801179c 	.word	0x0801179c

08009430 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009430:	b510      	push	{r4, lr}
 8009432:	4604      	mov	r4, r0
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
 8009434:	233f      	movs	r3, #63	; 0x3f
 8009436:	6003      	str	r3, [r0, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8009438:	4b51      	ldr	r3, [pc, #324]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009440:	d06c      	beq.n	800951c <HAL_RCC_GetOscConfig+0xec>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8009442:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009446:	6043      	str	r3, [r0, #4]
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#endif /* RCC_CR_HSEEXT */

  /* Get the CSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_CSION) == RCC_CR_CSION)
 8009448:	4b4d      	ldr	r3, [pc, #308]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009450:	d070      	beq.n	8009534 <HAL_RCC_GetOscConfig+0x104>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
 8009452:	2380      	movs	r3, #128	; 0x80
 8009454:	61e3      	str	r3, [r4, #28]
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
 8009456:	f7f7 fecb 	bl	80011f0 <HAL_GetREVID>
 800945a:	f241 0303 	movw	r3, #4099	; 0x1003
 800945e:	4298      	cmp	r0, r3
 8009460:	d86b      	bhi.n	800953a <HAL_RCC_GetOscConfig+0x10a>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
 8009462:	4b47      	ldr	r3, [pc, #284]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800946a:	6223      	str	r3, [r4, #32]
#else
  RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 800946c:	4b44      	ldr	r3, [pc, #272]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f013 0f01 	tst.w	r3, #1
 8009474:	d067      	beq.n	8009546 <HAL_RCC_GetOscConfig+0x116>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8009476:	2301      	movs	r3, #1
 8009478:	60e3      	str	r3, [r4, #12]
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
  }

#if defined(RCC_VER_X)
  if (HAL_GetREVID() <= REV_ID_Y)
 800947a:	f7f7 feb9 	bl	80011f0 <HAL_GetREVID>
 800947e:	f241 0303 	movw	r3, #4099	; 0x1003
 8009482:	4298      	cmp	r0, r3
 8009484:	d862      	bhi.n	800954c <HAL_RCC_GetOscConfig+0x11c>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
 8009486:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f3c3 3305 	ubfx	r3, r3, #12, #6
 800948e:	6123      	str	r3, [r4, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8009490:	4b3b      	ldr	r3, [pc, #236]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 8009492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009494:	f013 0f04 	tst.w	r3, #4
 8009498:	d05e      	beq.n	8009558 <HAL_RCC_GetOscConfig+0x128>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800949a:	2305      	movs	r3, #5
 800949c:	60a3      	str	r3, [r4, #8]
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 800949e:	4b38      	ldr	r3, [pc, #224]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 80094a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a2:	f013 0f01 	tst.w	r3, #1
 80094a6:	d062      	beq.n	800956e <HAL_RCC_GetOscConfig+0x13e>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80094a8:	2301      	movs	r3, #1
 80094aa:	6163      	str	r3, [r4, #20]
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
 80094ac:	4b34      	ldr	r3, [pc, #208]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80094b4:	d05e      	beq.n	8009574 <HAL_RCC_GetOscConfig+0x144>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61a3      	str	r3, [r4, #24]
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 80094ba:	4b31      	ldr	r3, [pc, #196]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80094c2:	d05a      	beq.n	800957a <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80094c4:	2302      	movs	r3, #2
 80094c6:	6263      	str	r3, [r4, #36]	; 0x24
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c8:	4b2d      	ldr	r3, [pc, #180]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 80094ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094cc:	f002 0203 	and.w	r2, r2, #3
 80094d0:	62a2      	str	r2, [r4, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos);
 80094d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094d4:	f3c2 1205 	ubfx	r2, r2, #4, #6
 80094d8:	62e2      	str	r2, [r4, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos) + 1U;
 80094da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e0:	3201      	adds	r2, #1
 80094e2:	6322      	str	r2, [r4, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) + 1U;
 80094e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094e6:	f3c2 6206 	ubfx	r2, r2, #24, #7
 80094ea:	3201      	adds	r2, #1
 80094ec:	63e2      	str	r2, [r4, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) + 1U;
 80094ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094f0:	f3c2 2246 	ubfx	r2, r2, #9, #7
 80094f4:	3201      	adds	r2, #1
 80094f6:	6362      	str	r2, [r4, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) + 1U;
 80094f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094fa:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80094fe:	3201      	adds	r2, #1
 8009500:	63a2      	str	r2, [r4, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	f002 020c 	and.w	r2, r2, #12
 8009508:	6422      	str	r2, [r4, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009510:	6462      	str	r2, [r4, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8009518:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800951a:	bd10      	pop	{r4, pc}
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 800951c:	4b18      	ldr	r3, [pc, #96]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009524:	d003      	beq.n	800952e <HAL_RCC_GetOscConfig+0xfe>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8009526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800952a:	6043      	str	r3, [r0, #4]
 800952c:	e78c      	b.n	8009448 <HAL_RCC_GetOscConfig+0x18>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800952e:	2300      	movs	r3, #0
 8009530:	6043      	str	r3, [r0, #4]
 8009532:	e789      	b.n	8009448 <HAL_RCC_GetOscConfig+0x18>
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
 8009534:	2300      	movs	r3, #0
 8009536:	61e3      	str	r3, [r4, #28]
 8009538:	e78d      	b.n	8009456 <HAL_RCC_GetOscConfig+0x26>
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
 800953a:	4b11      	ldr	r3, [pc, #68]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f3c3 6305 	ubfx	r3, r3, #24, #6
 8009542:	6223      	str	r3, [r4, #32]
 8009544:	e792      	b.n	800946c <HAL_RCC_GetOscConfig+0x3c>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8009546:	2300      	movs	r3, #0
 8009548:	60e3      	str	r3, [r4, #12]
 800954a:	e796      	b.n	800947a <HAL_RCC_GetOscConfig+0x4a>
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009554:	6123      	str	r3, [r4, #16]
 8009556:	e79b      	b.n	8009490 <HAL_RCC_GetOscConfig+0x60>
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <HAL_RCC_GetOscConfig+0x150>)
 800955a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955c:	f013 0f01 	tst.w	r3, #1
 8009560:	d002      	beq.n	8009568 <HAL_RCC_GetOscConfig+0x138>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8009562:	2301      	movs	r3, #1
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	e79a      	b.n	800949e <HAL_RCC_GetOscConfig+0x6e>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8009568:	2300      	movs	r3, #0
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	e797      	b.n	800949e <HAL_RCC_GetOscConfig+0x6e>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800956e:	2300      	movs	r3, #0
 8009570:	6163      	str	r3, [r4, #20]
 8009572:	e79b      	b.n	80094ac <HAL_RCC_GetOscConfig+0x7c>
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8009574:	2300      	movs	r3, #0
 8009576:	61a3      	str	r3, [r4, #24]
 8009578:	e79f      	b.n	80094ba <HAL_RCC_GetOscConfig+0x8a>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800957a:	2301      	movs	r3, #1
 800957c:	6263      	str	r3, [r4, #36]	; 0x24
 800957e:	e7a3      	b.n	80094c8 <HAL_RCC_GetOscConfig+0x98>
 8009580:	58024400 	.word	0x58024400

08009584 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009584:	233f      	movs	r3, #63	; 0x3f
 8009586:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009588:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <HAL_RCC_GetClockConfig+0x4c>)
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	f002 0207 	and.w	r2, r2, #7
 8009590:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009598:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	f002 020f 	and.w	r2, r2, #15
 80095a0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80095a8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80095aa:	69da      	ldr	r2, [r3, #28]
 80095ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80095b0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80095b8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c0:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80095c2:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <HAL_RCC_GetClockConfig+0x50>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	600b      	str	r3, [r1, #0]
}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400
 80095d4:	52002000 	.word	0x52002000

080095d8 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80095d8:	4770      	bx	lr

080095da <HAL_RCC_NMI_IRQHandler>:
{
 80095da:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80095dc:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <HAL_RCC_NMI_IRQHandler+0x1e>)
 80095de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80095e4:	d100      	bne.n	80095e8 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80095e6:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80095e8:	f7ff fff6 	bl	80095d8 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <HAL_RCC_NMI_IRQHandler+0x1e>)
 80095ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80095f4:	e7f7      	b.n	80095e6 <HAL_RCC_NMI_IRQHandler+0xc>
 80095f6:	bf00      	nop
 80095f8:	58024400 	.word	0x58024400

080095fc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095fc:	4b40      	ldr	r3, [pc, #256]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b03      	cmp	r3, #3
 8009606:	d079      	beq.n	80096fc <RCCEx_PLL2_Config+0x100>
{
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	4605      	mov	r5, r0
 800960c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800960e:	4a3c      	ldr	r2, [pc, #240]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 8009610:	6813      	ldr	r3, [r2, #0]
 8009612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009618:	f7f7 fd9c 	bl	8001154 <HAL_GetTick>
 800961c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800961e:	4b38      	ldr	r3, [pc, #224]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009626:	d006      	beq.n	8009636 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009628:	f7f7 fd94 	bl	8001154 <HAL_GetTick>
 800962c:	1b03      	subs	r3, r0, r4
 800962e:	2b02      	cmp	r3, #2
 8009630:	d9f5      	bls.n	800961e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8009632:	2003      	movs	r0, #3

  }


  return status;
}
 8009634:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009636:	4b32      	ldr	r3, [pc, #200]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 8009638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800963a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800963e:	6829      	ldr	r1, [r5, #0]
 8009640:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8009644:	629a      	str	r2, [r3, #40]	; 0x28
 8009646:	686a      	ldr	r2, [r5, #4]
 8009648:	3a01      	subs	r2, #1
 800964a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800964e:	68a9      	ldr	r1, [r5, #8]
 8009650:	3901      	subs	r1, #1
 8009652:	0249      	lsls	r1, r1, #9
 8009654:	b289      	uxth	r1, r1
 8009656:	430a      	orrs	r2, r1
 8009658:	68e9      	ldr	r1, [r5, #12]
 800965a:	3901      	subs	r1, #1
 800965c:	0409      	lsls	r1, r1, #16
 800965e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8009662:	430a      	orrs	r2, r1
 8009664:	6929      	ldr	r1, [r5, #16]
 8009666:	3901      	subs	r1, #1
 8009668:	0609      	lsls	r1, r1, #24
 800966a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800966e:	430a      	orrs	r2, r1
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009674:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009678:	6969      	ldr	r1, [r5, #20]
 800967a:	430a      	orrs	r2, r1
 800967c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	f022 0220 	bic.w	r2, r2, #32
 8009684:	69a9      	ldr	r1, [r5, #24]
 8009686:	430a      	orrs	r2, r1
 8009688:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	f022 0210 	bic.w	r2, r2, #16
 8009690:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009692:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009694:	4a1b      	ldr	r2, [pc, #108]	; (8009704 <RCCEx_PLL2_Config+0x108>)
 8009696:	400a      	ands	r2, r1
 8009698:	69e9      	ldr	r1, [r5, #28]
 800969a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800969e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a2:	f042 0210 	orr.w	r2, r2, #16
 80096a6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80096a8:	b9c6      	cbnz	r6, 80096dc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096aa:	461a      	mov	r2, r3
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80096b4:	4a12      	ldr	r2, [pc, #72]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80096be:	f7f7 fd49 	bl	8001154 <HAL_GetTick>
 80096c2:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80096cc:	d114      	bne.n	80096f8 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096ce:	f7f7 fd41 	bl	8001154 <HAL_GetTick>
 80096d2:	1b00      	subs	r0, r0, r4
 80096d4:	2802      	cmp	r0, #2
 80096d6:	d9f5      	bls.n	80096c4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80096d8:	2003      	movs	r0, #3
 80096da:	e7ab      	b.n	8009634 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 80096dc:	2e01      	cmp	r6, #1
 80096de:	d005      	beq.n	80096ec <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096e0:	4a07      	ldr	r2, [pc, #28]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 80096e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096ea:	e7e3      	b.n	80096b4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096ec:	4a04      	ldr	r2, [pc, #16]	; (8009700 <RCCEx_PLL2_Config+0x104>)
 80096ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f6:	e7dd      	b.n	80096b4 <RCCEx_PLL2_Config+0xb8>
  return status;
 80096f8:	2000      	movs	r0, #0
 80096fa:	e79b      	b.n	8009634 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80096fc:	2001      	movs	r0, #1
}
 80096fe:	4770      	bx	lr
 8009700:	58024400 	.word	0x58024400
 8009704:	ffff0007 	.word	0xffff0007

08009708 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009708:	4b40      	ldr	r3, [pc, #256]	; (800980c <RCCEx_PLL3_Config+0x104>)
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	2b03      	cmp	r3, #3
 8009712:	d079      	beq.n	8009808 <RCCEx_PLL3_Config+0x100>
{
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4605      	mov	r5, r0
 8009718:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800971a:	4a3c      	ldr	r2, [pc, #240]	; (800980c <RCCEx_PLL3_Config+0x104>)
 800971c:	6813      	ldr	r3, [r2, #0]
 800971e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009724:	f7f7 fd16 	bl	8001154 <HAL_GetTick>
 8009728:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800972a:	4b38      	ldr	r3, [pc, #224]	; (800980c <RCCEx_PLL3_Config+0x104>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009732:	d006      	beq.n	8009742 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009734:	f7f7 fd0e 	bl	8001154 <HAL_GetTick>
 8009738:	1b03      	subs	r3, r0, r4
 800973a:	2b02      	cmp	r3, #2
 800973c:	d9f5      	bls.n	800972a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800973e:	2003      	movs	r0, #3

  }


  return status;
}
 8009740:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009742:	4b32      	ldr	r3, [pc, #200]	; (800980c <RCCEx_PLL3_Config+0x104>)
 8009744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009746:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800974a:	6829      	ldr	r1, [r5, #0]
 800974c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009750:	629a      	str	r2, [r3, #40]	; 0x28
 8009752:	686a      	ldr	r2, [r5, #4]
 8009754:	3a01      	subs	r2, #1
 8009756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800975a:	68a9      	ldr	r1, [r5, #8]
 800975c:	3901      	subs	r1, #1
 800975e:	0249      	lsls	r1, r1, #9
 8009760:	b289      	uxth	r1, r1
 8009762:	430a      	orrs	r2, r1
 8009764:	68e9      	ldr	r1, [r5, #12]
 8009766:	3901      	subs	r1, #1
 8009768:	0409      	lsls	r1, r1, #16
 800976a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800976e:	430a      	orrs	r2, r1
 8009770:	6929      	ldr	r1, [r5, #16]
 8009772:	3901      	subs	r1, #1
 8009774:	0609      	lsls	r1, r1, #24
 8009776:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800977a:	430a      	orrs	r2, r1
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009784:	6969      	ldr	r1, [r5, #20]
 8009786:	430a      	orrs	r2, r1
 8009788:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009790:	69a9      	ldr	r1, [r5, #24]
 8009792:	430a      	orrs	r2, r1
 8009794:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800979c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800979e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80097a0:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <RCCEx_PLL3_Config+0x108>)
 80097a2:	400a      	ands	r2, r1
 80097a4:	69e9      	ldr	r1, [r5, #28]
 80097a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80097aa:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097b2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80097b4:	b9c6      	cbnz	r6, 80097e8 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097b6:	461a      	mov	r2, r3
 80097b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097be:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80097c0:	4a12      	ldr	r2, [pc, #72]	; (800980c <RCCEx_PLL3_Config+0x104>)
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80097ca:	f7f7 fcc3 	bl	8001154 <HAL_GetTick>
 80097ce:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <RCCEx_PLL3_Config+0x104>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80097d8:	d114      	bne.n	8009804 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097da:	f7f7 fcbb 	bl	8001154 <HAL_GetTick>
 80097de:	1b00      	subs	r0, r0, r4
 80097e0:	2802      	cmp	r0, #2
 80097e2:	d9f5      	bls.n	80097d0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80097e4:	2003      	movs	r0, #3
 80097e6:	e7ab      	b.n	8009740 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 80097e8:	2e01      	cmp	r6, #1
 80097ea:	d005      	beq.n	80097f8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097ec:	4a07      	ldr	r2, [pc, #28]	; (800980c <RCCEx_PLL3_Config+0x104>)
 80097ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097f6:	e7e3      	b.n	80097c0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097f8:	4a04      	ldr	r2, [pc, #16]	; (800980c <RCCEx_PLL3_Config+0x104>)
 80097fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009800:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009802:	e7dd      	b.n	80097c0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8009804:	2000      	movs	r0, #0
 8009806:	e79b      	b.n	8009740 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8009808:	2001      	movs	r0, #1
}
 800980a:	4770      	bx	lr
 800980c:	58024400 	.word	0x58024400
 8009810:	ffff0007 	.word	0xffff0007

08009814 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009818:	6803      	ldr	r3, [r0, #0]
 800981a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800981e:	d030      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009820:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009826:	d026      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009828:	d80e      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800982a:	b1eb      	cbz	r3, 8009868 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800982c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009830:	d107      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009832:	2102      	movs	r1, #2
 8009834:	3008      	adds	r0, #8
 8009836:	f7ff fee1 	bl	80095fc <RCCEx_PLL2_Config>
 800983a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800983c:	b145      	cbz	r5, 8009850 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800983e:	462e      	mov	r6, r5
 8009840:	e021      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009842:	2601      	movs	r6, #1
 8009844:	4635      	mov	r5, r6
 8009846:	e01e      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800984c:	d109      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800984e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009850:	4a98      	ldr	r2, [pc, #608]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009852:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009854:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009858:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800985a:	430b      	orrs	r3, r1
 800985c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800985e:	2600      	movs	r6, #0
 8009860:	e011      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009862:	2601      	movs	r6, #1
 8009864:	4635      	mov	r5, r6
 8009866:	e00e      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009868:	4a92      	ldr	r2, [pc, #584]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800986a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800986c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009872:	2500      	movs	r5, #0
 8009874:	e7ec      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009876:	2102      	movs	r1, #2
 8009878:	3028      	adds	r0, #40	; 0x28
 800987a:	f7ff ff45 	bl	8009708 <RCCEx_PLL3_Config>
 800987e:	4605      	mov	r5, r0
        break;
 8009880:	e7dc      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009882:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009884:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	f413 7f80 	tst.w	r3, #256	; 0x100
 800988c:	d014      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800988e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009890:	2b04      	cmp	r3, #4
 8009892:	d832      	bhi.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8009894:	e8df f003 	tbb	[pc, r3]
 8009898:	082a2303 	.word	0x082a2303
 800989c:	08          	.byte	0x08
 800989d:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989e:	4a85      	ldr	r2, [pc, #532]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80098a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80098a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80098a8:	bb55      	cbnz	r5, 8009900 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098aa:	4a82      	ldr	r2, [pc, #520]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80098ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80098be:	d031      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
 80098c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80098c2:	2b80      	cmp	r3, #128	; 0x80
 80098c4:	d04c      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80098c6:	d820      	bhi.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d043      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d119      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098d0:	2100      	movs	r1, #0
 80098d2:	f104 0008 	add.w	r0, r4, #8
 80098d6:	f7ff fe91 	bl	80095fc <RCCEx_PLL2_Config>
 80098da:	4605      	mov	r5, r0
        break;
 80098dc:	e01a      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098de:	2100      	movs	r1, #0
 80098e0:	f104 0008 	add.w	r0, r4, #8
 80098e4:	f7ff fe8a 	bl	80095fc <RCCEx_PLL2_Config>
 80098e8:	4605      	mov	r5, r0
        break;
 80098ea:	e7dd      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098ec:	2100      	movs	r1, #0
 80098ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80098f2:	f7ff ff09 	bl	8009708 <RCCEx_PLL3_Config>
 80098f6:	4605      	mov	r5, r0
        break;
 80098f8:	e7d6      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80098fa:	2601      	movs	r6, #1
 80098fc:	4635      	mov	r5, r6
 80098fe:	e7db      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009900:	462e      	mov	r6, r5
 8009902:	e7d9      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009904:	2601      	movs	r6, #1
 8009906:	4635      	mov	r5, r6
 8009908:	e00c      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800990a:	2bc0      	cmp	r3, #192	; 0xc0
 800990c:	d002      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x100>
 800990e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009912:	d11c      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8009914:	bb5d      	cbnz	r5, 800996e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009916:	4a67      	ldr	r2, [pc, #412]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009918:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800991a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800991e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009920:	430b      	orrs	r3, r1
 8009922:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800992a:	d046      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800992c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8009930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009934:	d039      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009936:	d81f      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8009938:	b38b      	cbz	r3, 800999e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800993a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800993e:	d118      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009940:	2100      	movs	r1, #0
 8009942:	f104 0008 	add.w	r0, r4, #8
 8009946:	f7ff fe59 	bl	80095fc <RCCEx_PLL2_Config>
 800994a:	4605      	mov	r5, r0
        break;
 800994c:	e01a      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 800994e:	2601      	movs	r6, #1
 8009950:	4635      	mov	r5, r6
 8009952:	e7e7      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009954:	4a57      	ldr	r2, [pc, #348]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009956:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800995c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800995e:	e7d9      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009960:	2100      	movs	r1, #0
 8009962:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009966:	f7ff fecf 	bl	8009708 <RCCEx_PLL3_Config>
 800996a:	4605      	mov	r5, r0
        break;
 800996c:	e7d2      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x100>
 800996e:	462e      	mov	r6, r5
 8009970:	e7d8      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009972:	2601      	movs	r6, #1
 8009974:	4635      	mov	r5, r6
 8009976:	e020      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009978:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800997c:	d002      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800997e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009982:	d109      	bne.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
 8009984:	b9c5      	cbnz	r5, 80099b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009986:	4a4b      	ldr	r2, [pc, #300]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009988:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800998a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800998e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8009992:	430b      	orrs	r3, r1
 8009994:	6593      	str	r3, [r2, #88]	; 0x58
 8009996:	e010      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009998:	2601      	movs	r6, #1
 800999a:	4635      	mov	r5, r6
 800999c:	e00d      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999e:	4a45      	ldr	r2, [pc, #276]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80099a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80099a8:	e7ec      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099aa:	2100      	movs	r1, #0
 80099ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80099b0:	f7ff feaa 	bl	8009708 <RCCEx_PLL3_Config>
 80099b4:	4605      	mov	r5, r0
        break;
 80099b6:	e7e5      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80099b8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80099c0:	d024      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
 80099c2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80099c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ca:	d042      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80099cc:	d80e      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d039      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80099d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099d6:	d106      	bne.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d8:	2100      	movs	r1, #0
 80099da:	f104 0008 	add.w	r0, r4, #8
 80099de:	f7ff fe0d 	bl	80095fc <RCCEx_PLL2_Config>
 80099e2:	4605      	mov	r5, r0
        break;
 80099e4:	e008      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
 80099e6:	2601      	movs	r6, #1
 80099e8:	4635      	mov	r5, r6
 80099ea:	e00f      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80099ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099f0:	d002      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80099f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099f6:	d123      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	d131      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099fc:	4a2d      	ldr	r2, [pc, #180]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80099fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009a00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009a04:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009a12:	d02e      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
 8009a14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	d040      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009a1a:	d826      	bhi.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8009a1c:	b133      	cbz	r3, 8009a2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d120      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a22:	4a24      	ldr	r2, [pc, #144]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	d13c      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a30:	4a20      	ldr	r2, [pc, #128]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009a38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009a3a:	430b      	orrs	r3, r1
 8009a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a3e:	e018      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a40:	2601      	movs	r6, #1
 8009a42:	4635      	mov	r5, r6
 8009a44:	e7e2      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a46:	4a1b      	ldr	r2, [pc, #108]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009a50:	e7d2      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a52:	2100      	movs	r1, #0
 8009a54:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009a58:	f7ff fe56 	bl	8009708 <RCCEx_PLL3_Config>
 8009a5c:	4605      	mov	r5, r0
        break;
 8009a5e:	e7cb      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009a60:	462e      	mov	r6, r5
 8009a62:	e7d3      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
 8009a64:	2601      	movs	r6, #1
 8009a66:	4635      	mov	r5, r6
 8009a68:	e003      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009a6a:	2b30      	cmp	r3, #48	; 0x30
 8009a6c:	d0de      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009a6e:	2601      	movs	r6, #1
 8009a70:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009a78:	d02d      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009a7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a80:	d04f      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8009a82:	d819      	bhi.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d046      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8009a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8c:	d10f      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f104 0008 	add.w	r0, r4, #8
 8009a94:	f7ff fdb2 	bl	80095fc <RCCEx_PLL2_Config>
 8009a98:	4605      	mov	r5, r0
        break;
 8009a9a:	e013      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a9c:	2102      	movs	r1, #2
 8009a9e:	f104 0008 	add.w	r0, r4, #8
 8009aa2:	f7ff fdab 	bl	80095fc <RCCEx_PLL2_Config>
 8009aa6:	4605      	mov	r5, r0
        break;
 8009aa8:	e7c0      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009aaa:	462e      	mov	r6, r5
 8009aac:	e7e1      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009aae:	2601      	movs	r6, #1
 8009ab0:	4635      	mov	r5, r6
 8009ab2:	e010      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009ab4:	58024400 	.word	0x58024400
 8009ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009abc:	d002      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac2:	d125      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	d133      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ac8:	4a77      	ldr	r2, [pc, #476]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009aca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009adc:	d038      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae4:	d053      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009ae6:	d828      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8009ae8:	b143      	cbz	r3, 8009afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aee:	d121      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009af0:	2101      	movs	r1, #1
 8009af2:	f104 0008 	add.w	r0, r4, #8
 8009af6:	f7ff fd81 	bl	80095fc <RCCEx_PLL2_Config>
 8009afa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d14d      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b00:	4a69      	ldr	r2, [pc, #420]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b02:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b04:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009b08:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	6513      	str	r3, [r2, #80]	; 0x50
 8009b0e:	e01f      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b10:	2601      	movs	r6, #1
 8009b12:	4635      	mov	r5, r6
 8009b14:	e7df      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b16:	4a64      	ldr	r2, [pc, #400]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009b20:	e7d0      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b22:	2100      	movs	r1, #0
 8009b24:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009b28:	f7ff fdee 	bl	8009708 <RCCEx_PLL3_Config>
 8009b2c:	4605      	mov	r5, r0
        break;
 8009b2e:	e7c9      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009b30:	462e      	mov	r6, r5
 8009b32:	e7d0      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009b34:	2601      	movs	r6, #1
 8009b36:	4635      	mov	r5, r6
 8009b38:	e00a      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b3e:	d0dd      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b44:	d0da      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b4a:	d0d7      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009b4c:	2601      	movs	r6, #1
 8009b4e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009b56:	d031      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b58:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b60:	d045      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8009b62:	d820      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009b64:	b143      	cbz	r3, 8009b78 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8009b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b6a:	d119      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	f104 0008 	add.w	r0, r4, #8
 8009b72:	f7ff fd43 	bl	80095fc <RCCEx_PLL2_Config>
 8009b76:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	d13f      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b7c:	4a4a      	ldr	r2, [pc, #296]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b80:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009b84:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b8c:	e016      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b8e:	2101      	movs	r1, #1
 8009b90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009b94:	f7ff fdb8 	bl	8009708 <RCCEx_PLL3_Config>
 8009b98:	4605      	mov	r5, r0
        break;
 8009b9a:	e7af      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009b9c:	462e      	mov	r6, r5
 8009b9e:	e7d7      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ba0:	2601      	movs	r6, #1
 8009ba2:	4635      	mov	r5, r6
 8009ba4:	e00a      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8009ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009baa:	d0e5      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8009bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bb0:	d0e2      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8009bb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bb6:	d0df      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8009bb8:	2601      	movs	r6, #1
 8009bba:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009bc2:	d009      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
 8009bc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bca:	d019      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd0:	d024      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bd2:	b1d3      	cbz	r3, 8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8009bd4:	2601      	movs	r6, #1
 8009bd6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009bde:	d033      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
 8009be0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d85b      	bhi.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009be6:	e8df f003 	tbb	[pc, r3]
 8009bea:	2227      	.short	0x2227
 8009bec:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bee:	2101      	movs	r1, #1
 8009bf0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009bf4:	f7ff fd88 	bl	8009708 <RCCEx_PLL3_Config>
 8009bf8:	4605      	mov	r5, r0
        break;
 8009bfa:	e7bd      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8009bfc:	462e      	mov	r6, r5
 8009bfe:	e7dd      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c00:	4a29      	ldr	r2, [pc, #164]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009c02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009c0a:	b975      	cbnz	r5, 8009c2a <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c0c:	4a26      	ldr	r2, [pc, #152]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009c0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c10:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009c14:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009c16:	430b      	orrs	r3, r1
 8009c18:	6513      	str	r3, [r2, #80]	; 0x50
 8009c1a:	e7dd      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f104 0008 	add.w	r0, r4, #8
 8009c22:	f7ff fceb 	bl	80095fc <RCCEx_PLL2_Config>
 8009c26:	4605      	mov	r5, r0
        break;
 8009c28:	e7ef      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8009c2a:	462e      	mov	r6, r5
 8009c2c:	e7d4      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009c30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009c38:	bba5      	cbnz	r5, 8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c3a:	4a1b      	ldr	r2, [pc, #108]	; (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009c3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c44:	430b      	orrs	r3, r1
 8009c46:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009c4e:	d12d      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f013 0f01 	tst.w	r3, #1
 8009c56:	f000 80a5 	beq.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c5a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009c5c:	2b28      	cmp	r3, #40	; 0x28
 8009c5e:	f200 809f 	bhi.w	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8009c62:	e8df f003 	tbb	[pc, r3]
 8009c66:	9d8d      	.short	0x9d8d
 8009c68:	9d9d9d9d 	.word	0x9d9d9d9d
 8009c6c:	9d879d9d 	.word	0x9d879d9d
 8009c70:	9d9d9d9d 	.word	0x9d9d9d9d
 8009c74:	9d969d9d 	.word	0x9d969d9d
 8009c78:	9d9d9d9d 	.word	0x9d9d9d9d
 8009c7c:	9d8d9d9d 	.word	0x9d8d9d9d
 8009c80:	9d9d9d9d 	.word	0x9d9d9d9d
 8009c84:	9d8d9d9d 	.word	0x9d8d9d9d
 8009c88:	9d9d9d9d 	.word	0x9d9d9d9d
 8009c8c:	9d9d      	.short	0x9d9d
 8009c8e:	8d          	.byte	0x8d
 8009c8f:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c90:	2102      	movs	r1, #2
 8009c92:	f104 0008 	add.w	r0, r4, #8
 8009c96:	f7ff fcb1 	bl	80095fc <RCCEx_PLL2_Config>
 8009c9a:	4605      	mov	r5, r0
        break;
 8009c9c:	e7cc      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
 8009c9e:	2601      	movs	r6, #1
 8009ca0:	4635      	mov	r5, r6
 8009ca2:	e7d1      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009ca4:	462e      	mov	r6, r5
 8009ca6:	e7cf      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009ca8:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cac:	4a91      	ldr	r2, [pc, #580]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 8009cae:	6813      	ldr	r3, [r2, #0]
 8009cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009cb6:	f7f7 fa4d 	bl	8001154 <HAL_GetTick>
 8009cba:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cbc:	4b8d      	ldr	r3, [pc, #564]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009cc4:	d105      	bne.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cc6:	f7f7 fa45 	bl	8001154 <HAL_GetTick>
 8009cca:	1bc0      	subs	r0, r0, r7
 8009ccc:	2864      	cmp	r0, #100	; 0x64
 8009cce:	d9f5      	bls.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
 8009cd0:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	d14a      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009cd6:	4b88      	ldr	r3, [pc, #544]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8009cde:	4053      	eors	r3, r2
 8009ce0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009ce4:	d00c      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ce6:	4b84      	ldr	r3, [pc, #528]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cee:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009cf0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009cf4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cf6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009cf8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009cfc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009cfe:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d00:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d08:	d015      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
 8009d0a:	bb8d      	cbnz	r5, 8009d70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d0c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009d10:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009d14:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009d18:	d01e      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8009d1a:	4a77      	ldr	r2, [pc, #476]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009d1c:	6913      	ldr	r3, [r2, #16]
 8009d1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d22:	6113      	str	r3, [r2, #16]
 8009d24:	4974      	ldr	r1, [pc, #464]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009d26:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8009d28:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8009d2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009d30:	4313      	orrs	r3, r2
 8009d32:	670b      	str	r3, [r1, #112]	; 0x70
 8009d34:	e78c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
 8009d36:	f7f7 fa0d 	bl	8001154 <HAL_GetTick>
 8009d3a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d3c:	4b6e      	ldr	r3, [pc, #440]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	f013 0f02 	tst.w	r3, #2
 8009d44:	d1e1      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d46:	f7f7 fa05 	bl	8001154 <HAL_GetTick>
 8009d4a:	1bc0      	subs	r0, r0, r7
 8009d4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d50:	4298      	cmp	r0, r3
 8009d52:	d9f3      	bls.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
 8009d54:	2503      	movs	r5, #3
 8009d56:	e7d8      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d58:	4867      	ldr	r0, [pc, #412]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009d5a:	6902      	ldr	r2, [r0, #16]
 8009d5c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009d60:	4966      	ldr	r1, [pc, #408]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009d62:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8009d66:	4313      	orrs	r3, r2
 8009d68:	6103      	str	r3, [r0, #16]
 8009d6a:	e7db      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
 8009d6c:	462e      	mov	r6, r5
 8009d6e:	e76f      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
 8009d70:	462e      	mov	r6, r5
 8009d72:	e76d      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d74:	2101      	movs	r1, #1
 8009d76:	f104 0008 	add.w	r0, r4, #8
 8009d7a:	f7ff fc3f 	bl	80095fc <RCCEx_PLL2_Config>
 8009d7e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009d80:	b9e5      	cbnz	r5, 8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d82:	4a5d      	ldr	r2, [pc, #372]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009d84:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009d86:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009d8a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009d8c:	430b      	orrs	r3, r1
 8009d8e:	6553      	str	r3, [r2, #84]	; 0x54
 8009d90:	e008      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d92:	2101      	movs	r1, #1
 8009d94:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009d98:	f7ff fcb6 	bl	8009708 <RCCEx_PLL3_Config>
 8009d9c:	4605      	mov	r5, r0
        break;
 8009d9e:	e7ef      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009da0:	2601      	movs	r6, #1
 8009da2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	f013 0f02 	tst.w	r3, #2
 8009daa:	d017      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009dac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d828      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8009db2:	e8df f003 	tbb	[pc, r3]
 8009db6:	050b      	.short	0x050b
 8009db8:	0b0b0b20 	.word	0x0b0b0b20
 8009dbc:	462e      	mov	r6, r5
 8009dbe:	e7f1      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	f104 0008 	add.w	r0, r4, #8
 8009dc6:	f7ff fc19 	bl	80095fc <RCCEx_PLL2_Config>
 8009dca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009dcc:	b9ed      	cbnz	r5, 8009e0a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009dce:	4a4a      	ldr	r2, [pc, #296]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009dd0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	f013 0f04 	tst.w	r3, #4
 8009de2:	d023      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009de4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d845      	bhi.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009dec:	e8df f003 	tbb	[pc, r3]
 8009df0:	153d0f15 	.word	0x153d0f15
 8009df4:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009df6:	2101      	movs	r1, #1
 8009df8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009dfc:	f7ff fc84 	bl	8009708 <RCCEx_PLL3_Config>
 8009e00:	4605      	mov	r5, r0
        break;
 8009e02:	e7e3      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e04:	2601      	movs	r6, #1
 8009e06:	4635      	mov	r5, r6
 8009e08:	e7e8      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009e0a:	462e      	mov	r6, r5
 8009e0c:	e7e6      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e0e:	2101      	movs	r1, #1
 8009e10:	f104 0008 	add.w	r0, r4, #8
 8009e14:	f7ff fbf2 	bl	80095fc <RCCEx_PLL2_Config>
 8009e18:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009e1a:	bb85      	cbnz	r5, 8009e7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e1c:	4a36      	ldr	r2, [pc, #216]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009e1e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e20:	f023 0307 	bic.w	r3, r3, #7
 8009e24:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	f013 0f20 	tst.w	r3, #32
 8009e32:	d034      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e34:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e3c:	d04e      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8009e3e:	d823      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8009e40:	b143      	cbz	r3, 8009e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e46:	d11c      	bne.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e48:	2100      	movs	r1, #0
 8009e4a:	f104 0008 	add.w	r0, r4, #8
 8009e4e:	f7ff fbd5 	bl	80095fc <RCCEx_PLL2_Config>
 8009e52:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d148      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e58:	4a27      	ldr	r2, [pc, #156]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009e5a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009e5c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009e60:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009e64:	430b      	orrs	r3, r1
 8009e66:	6553      	str	r3, [r2, #84]	; 0x54
 8009e68:	e019      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009e70:	f7ff fc4a 	bl	8009708 <RCCEx_PLL3_Config>
 8009e74:	4605      	mov	r5, r0
        break;
 8009e76:	e7d0      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e78:	2601      	movs	r6, #1
 8009e7a:	4635      	mov	r5, r6
 8009e7c:	e7d6      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8009e7e:	462e      	mov	r6, r5
 8009e80:	e7d4      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e82:	2601      	movs	r6, #1
 8009e84:	4635      	mov	r5, r6
 8009e86:	e00a      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8009e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8c:	d0e2      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e92:	d0df      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e98:	d0dc      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009e9a:	2601      	movs	r6, #1
 8009e9c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ea4:	d037      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ea6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eae:	d053      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8009eb0:	d826      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8009eb2:	b143      	cbz	r3, 8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb8:	d119      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f104 0008 	add.w	r0, r4, #8
 8009ec0:	f7ff fb9c 	bl	80095fc <RCCEx_PLL2_Config>
 8009ec4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	d14d      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009eca:	4a0b      	ldr	r2, [pc, #44]	; (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8009ecc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ece:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009ed2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8009ed6:	430b      	orrs	r3, r1
 8009ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8009eda:	e01c      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009edc:	2102      	movs	r1, #2
 8009ede:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009ee2:	f7ff fc11 	bl	8009708 <RCCEx_PLL3_Config>
 8009ee6:	4605      	mov	r5, r0
        break;
 8009ee8:	e7b4      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009eea:	462e      	mov	r6, r5
 8009eec:	e7d7      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009eee:	2601      	movs	r6, #1
 8009ef0:	4635      	mov	r5, r6
 8009ef2:	e010      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8009ef4:	58024800 	.word	0x58024800
 8009ef8:	58024400 	.word	0x58024400
 8009efc:	00ffffcf 	.word	0x00ffffcf
 8009f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f04:	d0df      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009f06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f0a:	d0dc      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f10:	d0d9      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009f12:	2601      	movs	r6, #1
 8009f14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f1c:	d033      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f1e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f26:	f000 80a3 	beq.w	800a070 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8009f2a:	d821      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009f2c:	b143      	cbz	r3, 8009f40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8009f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f32:	d11a      	bne.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f34:	2100      	movs	r1, #0
 8009f36:	f104 0008 	add.w	r0, r4, #8
 8009f3a:	f7ff fb5f 	bl	80095fc <RCCEx_PLL2_Config>
 8009f3e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8009f40:	2d00      	cmp	r5, #0
 8009f42:	f040 809c 	bne.w	800a07e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009f46:	4a81      	ldr	r2, [pc, #516]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8009f48:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009f4e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6593      	str	r3, [r2, #88]	; 0x58
 8009f56:	e016      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f58:	2102      	movs	r1, #2
 8009f5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009f5e:	f7ff fbd3 	bl	8009708 <RCCEx_PLL3_Config>
 8009f62:	4605      	mov	r5, r0
        break;
 8009f64:	e7af      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009f66:	462e      	mov	r6, r5
 8009f68:	e7d5      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f6a:	2601      	movs	r6, #1
 8009f6c:	4635      	mov	r5, r6
 8009f6e:	e00a      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x772>
 8009f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f74:	d0e4      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8009f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009f7a:	d0e1      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8009f7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009f80:	d0de      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8009f82:	2601      	movs	r6, #1
 8009f84:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	f013 0f08 	tst.w	r3, #8
 8009f8c:	d00c      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009f8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f96:	d074      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009f98:	4a6c      	ldr	r2, [pc, #432]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8009f9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009fa0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	f013 0f10 	tst.w	r3, #16
 8009fae:	d00c      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009fb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb8:	d06c      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fba:	4a64      	ldr	r2, [pc, #400]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8009fbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8009fd0:	d00b      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
 8009fd2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fda:	d074      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8009fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fe0:	d067      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d05f      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8009fe6:	2601      	movs	r6, #1
 8009fe8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009ff0:	d00c      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
 8009ff2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8009ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ffa:	d07c      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a000:	d06f      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d067      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a008:	2601      	movs	r6, #1
 800a00a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a012:	d008      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a014:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a016:	2b00      	cmp	r3, #0
 800a018:	d076      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800a01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a01e:	f000 8081 	beq.w	800a124 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800a022:	2601      	movs	r6, #1
 800a024:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800a02c:	f040 8083 	bne.w	800a136 <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a036:	f000 808e 	beq.w	800a156 <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
 800a03a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	f000 80ec 	beq.w	800a21e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a046:	f240 8083 	bls.w	800a150 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800a04a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04e:	d003      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800a050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a054:	f040 80e1 	bne.w	800a21a <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
 800a058:	2d00      	cmp	r5, #0
 800a05a:	f040 80e6 	bne.w	800a22a <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a05e:	4a3b      	ldr	r2, [pc, #236]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a060:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a066:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a06a:	430b      	orrs	r3, r1
 800a06c:	6553      	str	r3, [r2, #84]	; 0x54
 800a06e:	e072      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a070:	2102      	movs	r1, #2
 800a072:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a076:	f7ff fb47 	bl	8009708 <RCCEx_PLL3_Config>
 800a07a:	4605      	mov	r5, r0
        break;
 800a07c:	e760      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800a07e:	462e      	mov	r6, r5
 800a080:	e781      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a082:	2102      	movs	r1, #2
 800a084:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a088:	f7ff fb3e 	bl	8009708 <RCCEx_PLL3_Config>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d083      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
 800a090:	2601      	movs	r6, #1
 800a092:	e781      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a094:	2102      	movs	r1, #2
 800a096:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a09a:	f7ff fb35 	bl	8009708 <RCCEx_PLL3_Config>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d08b      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	e789      	b.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	f104 0008 	add.w	r0, r4, #8
 800a0ac:	f7ff faa6 	bl	80095fc <RCCEx_PLL2_Config>
 800a0b0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a0b2:	b97d      	cbnz	r5, 800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0b4:	4a25      	ldr	r2, [pc, #148]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a0b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a0bc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	6593      	str	r3, [r2, #88]	; 0x58
 800a0c4:	e791      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a0cc:	f7ff fb1c 	bl	8009708 <RCCEx_PLL3_Config>
 800a0d0:	4605      	mov	r5, r0
        break;
 800a0d2:	e7ee      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800a0d4:	462e      	mov	r6, r5
 800a0d6:	e788      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d8:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a0da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a0dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a0e2:	b97d      	cbnz	r5, 800a104 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0e4:	4a19      	ldr	r2, [pc, #100]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a0e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a0e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a0ec:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6553      	str	r3, [r2, #84]	; 0x54
 800a0f4:	e78a      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a0fc:	f7ff fb04 	bl	8009708 <RCCEx_PLL3_Config>
 800a100:	4605      	mov	r5, r0
        break;
 800a102:	e7ee      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800a104:	462e      	mov	r6, r5
 800a106:	e781      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a108:	4a10      	ldr	r2, [pc, #64]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a10a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a10c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a110:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a112:	b975      	cbnz	r5, 800a132 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a114:	4a0d      	ldr	r2, [pc, #52]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800a116:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a11c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a11e:	430b      	orrs	r3, r1
 800a120:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a122:	e780      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a124:	2102      	movs	r1, #2
 800a126:	f104 0008 	add.w	r0, r4, #8
 800a12a:	f7ff fa67 	bl	80095fc <RCCEx_PLL2_Config>
 800a12e:	4605      	mov	r5, r0
        break;
 800a130:	e7ef      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a132:	462e      	mov	r6, r5
 800a134:	e777      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a136:	2102      	movs	r1, #2
 800a138:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a13c:	f7ff fae4 	bl	8009708 <RCCEx_PLL3_Config>
 800a140:	2800      	cmp	r0, #0
 800a142:	f43f af75 	beq.w	800a030 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
 800a146:	2601      	movs	r6, #1
 800a148:	e772      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 800a150:	2b00      	cmp	r3, #0
 800a152:	d081      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800a154:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a156:	6823      	ldr	r3, [r4, #0]
 800a158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a15c:	d006      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a15e:	4a4f      	ldr	r2, [pc, #316]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a160:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a166:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a168:	430b      	orrs	r3, r1
 800a16a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a172:	d007      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a174:	4a49      	ldr	r2, [pc, #292]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a176:	6913      	ldr	r3, [r2, #16]
 800a178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a17c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800a180:	430b      	orrs	r3, r1
 800a182:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a18a:	d006      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a18c:	4a43      	ldr	r2, [pc, #268]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a18e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a194:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a196:	430b      	orrs	r3, r1
 800a198:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a1a0:	d009      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1a2:	4b3e      	ldr	r3, [pc, #248]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1aa:	611a      	str	r2, [r3, #16]
 800a1ac:	691a      	ldr	r2, [r3, #16]
 800a1ae:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da06      	bge.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1bc:	4a37      	ldr	r2, [pc, #220]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a1c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a1c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a1d0:	d007      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1d2:	4a32      	ldr	r2, [pc, #200]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a1d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a1da:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a1de:	430b      	orrs	r3, r1
 800a1e0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a1e2:	6863      	ldr	r3, [r4, #4]
 800a1e4:	f013 0f01 	tst.w	r3, #1
 800a1e8:	d121      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	f013 0f02 	tst.w	r3, #2
 800a1f0:	d126      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a1f2:	6863      	ldr	r3, [r4, #4]
 800a1f4:	f013 0f04 	tst.w	r3, #4
 800a1f8:	d12b      	bne.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	f013 0f08 	tst.w	r3, #8
 800a200:	d130      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	f013 0f10 	tst.w	r3, #16
 800a208:	d135      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	f013 0f20 	tst.w	r3, #32
 800a210:	d13a      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
 800a212:	b106      	cbz	r6, 800a216 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
 800a214:	2601      	movs	r6, #1
}
 800a216:	4630      	mov	r0, r6
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 800a21a:	2601      	movs	r6, #1
 800a21c:	e79b      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a21e:	4a1f      	ldr	r2, [pc, #124]	; (800a29c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a220:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a226:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a228:	e716      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800a22a:	462e      	mov	r6, r5
 800a22c:	e793      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a22e:	2100      	movs	r1, #0
 800a230:	f104 0008 	add.w	r0, r4, #8
 800a234:	f7ff f9e2 	bl	80095fc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0d6      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
 800a23c:	4606      	mov	r6, r0
 800a23e:	e7d4      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a240:	2101      	movs	r1, #1
 800a242:	f104 0008 	add.w	r0, r4, #8
 800a246:	f7ff f9d9 	bl	80095fc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d0d1      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
 800a24e:	4606      	mov	r6, r0
 800a250:	e7cf      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a252:	2102      	movs	r1, #2
 800a254:	f104 0008 	add.w	r0, r4, #8
 800a258:	f7ff f9d0 	bl	80095fc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d0cc      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
 800a260:	4606      	mov	r6, r0
 800a262:	e7ca      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a264:	2100      	movs	r1, #0
 800a266:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a26a:	f7ff fa4d 	bl	8009708 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0c7      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
 800a272:	4606      	mov	r6, r0
 800a274:	e7c5      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a276:	2101      	movs	r1, #1
 800a278:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a27c:	f7ff fa44 	bl	8009708 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a280:	2800      	cmp	r0, #0
 800a282:	d0c2      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
 800a284:	4606      	mov	r6, r0
 800a286:	e7c0      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a288:	2102      	movs	r1, #2
 800a28a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a28e:	f7ff fa3b 	bl	8009708 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a292:	2800      	cmp	r0, #0
 800a294:	d0bd      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
 800a296:	4606      	mov	r6, r0
 800a298:	e7bb      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400

0800a2a0 <HAL_RCCEx_GetPeriphCLKConfig>:
  PeriphClkInit->PeriphClockSelection =
 800a2a0:	4a77      	ldr	r2, [pc, #476]	; (800a480 <HAL_RCCEx_GetPeriphCLKConfig+0x1e0>)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 800a2a8:	4a76      	ldr	r2, [pc, #472]	; (800a484 <HAL_RCCEx_GetPeriphCLKConfig+0x1e4>)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 800a2b0:	4a75      	ldr	r2, [pc, #468]	; (800a488 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800a2b8:	4a74      	ldr	r2, [pc, #464]	; (800a48c <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800a2c0:	f06f 5258 	mvn.w	r2, #905969664	; 0x36000000
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 800a2ca:	f06f 5250 	mvn.w	r2, #872415232	; 0x34000000
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 800a2d4:	f06f 5210 	mvn.w	r2, #603979776	; 0x24000000
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800a2de:	f06f 6280 	mvn.w	r2, #67108864	; 0x4000000
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e9c0 2300 	strd	r2, r3, [r0]
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 800a2e8:	4b69      	ldr	r3, [pc, #420]	; (800a490 <HAL_RCCEx_GetPeriphCLKConfig+0x1f0>)
 800a2ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2ec:	f3c2 5205 	ubfx	r2, r2, #20, #6
 800a2f0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 800a2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 800a2fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2fe:	f3c2 6206 	ubfx	r2, r2, #24, #7
 800a302:	3201      	adds	r2, #1
 800a304:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 800a306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a308:	f3c2 2246 	ubfx	r2, r2, #9, #7
 800a30c:	3201      	adds	r2, #1
 800a30e:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 800a310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a312:	f3c2 4206 	ubfx	r2, r2, #16, #7
 800a316:	3201      	adds	r2, #1
 800a318:	6342      	str	r2, [r0, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800a320:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800a322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a324:	f3c2 2240 	ubfx	r2, r2, #9, #1
 800a328:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 800a32a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a32c:	f3c2 3205 	ubfx	r2, r2, #12, #6
 800a330:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 800a332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a338:	3201      	adds	r2, #1
 800a33a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 800a33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33e:	f3c2 6206 	ubfx	r2, r2, #24, #7
 800a342:	3201      	adds	r2, #1
 800a344:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 800a346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a348:	f3c2 2246 	ubfx	r2, r2, #9, #7
 800a34c:	3201      	adds	r2, #1
 800a34e:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 800a350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a352:	f3c2 4206 	ubfx	r2, r2, #16, #7
 800a356:	3201      	adds	r2, #1
 800a358:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800a360:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a368:	6202      	str	r2, [r0, #32]
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800a36a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a36c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800a370:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800a372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a374:	f002 0207 	and.w	r2, r2, #7
 800a378:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800a37a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a37c:	f002 0207 	and.w	r2, r2, #7
 800a380:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800a384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a386:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800a38a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a38e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a390:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800a394:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a39a:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800a39e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800a3a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3a4:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 800a3a8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800a3ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3ae:	f002 0207 	and.w	r2, r2, #7
 800a3b2:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 800a3b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3b6:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 800a3ba:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800a3bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3be:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
 800a3c2:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800a3c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3c8:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 800a3cc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800a3d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a3d6:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800a3da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3dc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800a3e0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3e6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800a3ea:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800a3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a3f2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 800a3f6:	691a      	ldr	r2, [r3, #16]
 800a3f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a3fc:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800a400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a402:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800a406:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a40a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a40c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a410:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a414:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800a418:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800a41a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a41c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800a420:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800a422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a424:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800a428:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800a42a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a42c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
 800a430:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800a432:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a434:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800a438:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800a43c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a43e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 800a442:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a446:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800a44a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800a44e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a450:	f002 0203 	and.w	r2, r2, #3
 800a454:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 800a456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a458:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a45c:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800a45e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a460:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 800a464:	6542      	str	r2, [r0, #84]	; 0x54
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a46c:	d103      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKConfig+0x1d6>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800a46e:	2300      	movs	r3, #0
 800a470:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 800a474:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800a476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 800a47e:	4770      	bx	lr
 800a480:	c9fff1f7 	.word	0xc9fff1f7
 800a484:	c9fff1ff 	.word	0xc9fff1ff
 800a488:	c9fff3ff 	.word	0xc9fff3ff
 800a48c:	c9fff7ff 	.word	0xc9fff7ff
 800a490:	58024400 	.word	0x58024400

0800a494 <HAL_RCCEx_GetD1PCLK1Freq>:
{
 800a494:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE) >> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
 800a496:	f7fe ff85 	bl	80093a4 <HAL_RCC_GetHCLKFreq>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <HAL_RCCEx_GetD1PCLK1Freq+0x1c>)
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a4a2:	4a04      	ldr	r2, [pc, #16]	; (800a4b4 <HAL_RCCEx_GetD1PCLK1Freq+0x20>)
 800a4a4:	5cd3      	ldrb	r3, [r2, r3]
 800a4a6:	f003 031f 	and.w	r3, r3, #31
}
 800a4aa:	40d8      	lsrs	r0, r3
 800a4ac:	bd08      	pop	{r3, pc}
 800a4ae:	bf00      	nop
 800a4b0:	58024400 	.word	0x58024400
 800a4b4:	0801179c 	.word	0x0801179c

0800a4b8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800a4b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a4ba:	f7fe ff73 	bl	80093a4 <HAL_RCC_GetHCLKFreq>
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a4c6:	4a04      	ldr	r2, [pc, #16]	; (800a4d8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800a4c8:	5cd3      	ldrb	r3, [r2, r3]
 800a4ca:	f003 031f 	and.w	r3, r3, #31
}
 800a4ce:	40d8      	lsrs	r0, r3
 800a4d0:	bd08      	pop	{r3, pc}
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	0801179c 	.word	0x0801179c

0800a4dc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800a4dc:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4de:	4a77      	ldr	r2, [pc, #476]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a4e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a4e2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800a4e4:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a4ea:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a4f0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a4f4:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 800a4f8:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800a4fc:	f000 80d8 	beq.w	800a6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 800a500:	f001 0103 	and.w	r1, r1, #3
 800a504:	ee07 3a90 	vmov	s15, r3
 800a508:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a50c:	2901      	cmp	r1, #1
 800a50e:	d065      	beq.n	800a5dc <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800a510:	2902      	cmp	r1, #2
 800a512:	f000 80b0 	beq.w	800a676 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800a516:	b1e1      	cbz	r1, 800a552 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a518:	ee07 ea10 	vmov	s14, lr
 800a51c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a520:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800a524:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a528:	4b64      	ldr	r3, [pc, #400]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a530:	ee07 3a10 	vmov	s14, r3
 800a534:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a538:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a53c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a540:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a54c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800a550:	e060      	b.n	800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	f013 0f20 	tst.w	r3, #32
 800a558:	d023      	beq.n	800a5a2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a55a:	4611      	mov	r1, r2
 800a55c:	6812      	ldr	r2, [r2, #0]
 800a55e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a562:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 800a564:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a566:	ee07 3a10 	vmov	s14, r3
 800a56a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a56e:	ee06 ea90 	vmov	s13, lr
 800a572:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800a576:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a57a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a580:	ee07 3a10 	vmov	s14, r3
 800a584:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a588:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a58c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a59c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a5a0:	e038      	b.n	800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5a2:	ee07 ea10 	vmov	s14, lr
 800a5a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a5aa:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 800a5ae:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a5b2:	4b42      	ldr	r3, [pc, #264]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	ee07 3a10 	vmov	s14, r3
 800a5be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a5c2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a5c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a5ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a5da:	e01b      	b.n	800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5dc:	ee07 ea10 	vmov	s14, lr
 800a5e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a5e4:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800a5e8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a5ec:	4b33      	ldr	r3, [pc, #204]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f4:	ee07 3a10 	vmov	s14, r3
 800a5f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a5fc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a600:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a604:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a60c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a610:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a614:	4a29      	ldr	r2, [pc, #164]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a616:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a618:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a61c:	ee07 3a10 	vmov	s14, r3
 800a620:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a624:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a628:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a634:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a638:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a63a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a63e:	ee07 3a10 	vmov	s14, r3
 800a642:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a646:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a64a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a64e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a652:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a656:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a658:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a65c:	ee07 3a90 	vmov	s15, r3
 800a660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a664:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a670:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a674:	bd10      	pop	{r4, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a676:	ee07 ea10 	vmov	s14, lr
 800a67a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a67e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800a682:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800a688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a10 	vmov	s14, r3
 800a692:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a696:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a69a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800a6ae:	e7b1      	b.n	800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6b4:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6b6:	6083      	str	r3, [r0, #8]
}
 800a6b8:	e7dc      	b.n	800a674 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 800a6ba:	bf00      	nop
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	4a742400 	.word	0x4a742400
 800a6c4:	39000000 	.word	0x39000000
 800a6c8:	03d09000 	.word	0x03d09000
 800a6cc:	4c742400 	.word	0x4c742400
 800a6d0:	4af42400 	.word	0x4af42400

0800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800a6d4:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6d6:	4a77      	ldr	r2, [pc, #476]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a6d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a6da:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800a6dc:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a6e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a6e2:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a6e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a6e8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a6ec:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 800a6f0:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 800a6f4:	f000 80d8 	beq.w	800a8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 800a6f8:	f001 0103 	and.w	r1, r1, #3
 800a6fc:	ee07 3a90 	vmov	s15, r3
 800a700:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a704:	2901      	cmp	r1, #1
 800a706:	d065      	beq.n	800a7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800a708:	2902      	cmp	r1, #2
 800a70a:	f000 80b0 	beq.w	800a86e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800a70e:	b1e1      	cbz	r1, 800a74a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a710:	ee07 ea10 	vmov	s14, lr
 800a714:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a718:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800a71c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a720:	4b64      	ldr	r3, [pc, #400]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a728:	ee07 3a10 	vmov	s14, r3
 800a72c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a730:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a734:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a740:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a744:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800a748:	e060      	b.n	800a80c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	f013 0f20 	tst.w	r3, #32
 800a750:	d023      	beq.n	800a79a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a752:	4611      	mov	r1, r2
 800a754:	6812      	ldr	r2, [r2, #0]
 800a756:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a75a:	4b59      	ldr	r3, [pc, #356]	; (800a8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 800a75c:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a75e:	ee07 3a10 	vmov	s14, r3
 800a762:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a766:	ee06 ea90 	vmov	s13, lr
 800a76a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800a76e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a772:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a778:	ee07 3a10 	vmov	s14, r3
 800a77c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a780:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a784:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a790:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a798:	e038      	b.n	800a80c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a79a:	ee07 ea10 	vmov	s14, lr
 800a79e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a7a2:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 800a7a6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a7aa:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b2:	ee07 3a10 	vmov	s14, r3
 800a7b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a7ba:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a7be:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a7c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a7d2:	e01b      	b.n	800a80c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7d4:	ee07 ea10 	vmov	s14, lr
 800a7d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a7dc:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800a7e0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a7e4:	4b33      	ldr	r3, [pc, #204]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ec:	ee07 3a10 	vmov	s14, r3
 800a7f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a7f4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a7f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a7fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a804:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a808:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a80c:	4a29      	ldr	r2, [pc, #164]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a80e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a810:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a814:	ee07 3a10 	vmov	s14, r3
 800a818:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a81c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a820:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a830:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a832:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a836:	ee07 3a10 	vmov	s14, r3
 800a83a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a83e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a84e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a850:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a864:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a868:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800a86c:	bd10      	pop	{r4, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a86e:	ee07 ea10 	vmov	s14, lr
 800a872:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a876:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800a8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800a87a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a87e:	4b0d      	ldr	r3, [pc, #52]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	ee07 3a10 	vmov	s14, r3
 800a88a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a88e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a892:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a89e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800a8a6:	e7b1      	b.n	800a80c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a8ac:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a8ae:	6083      	str	r3, [r0, #8]
}
 800a8b0:	e7dc      	b.n	800a86c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
 800a8b8:	4a742400 	.word	0x4a742400
 800a8bc:	39000000 	.word	0x39000000
 800a8c0:	03d09000 	.word	0x03d09000
 800a8c4:	4c742400 	.word	0x4c742400
 800a8c8:	4af42400 	.word	0x4af42400

0800a8cc <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800a8cc:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8ce:	4a77      	ldr	r2, [pc, #476]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800a8d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a8d2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800a8d4:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a8d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a8da:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a8de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a8e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a8e4:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
 800a8e8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800a8ec:	f000 80d8 	beq.w	800aaa0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
 800a8f0:	f001 0103 	and.w	r1, r1, #3
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a8fc:	2901      	cmp	r1, #1
 800a8fe:	d065      	beq.n	800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800a900:	2902      	cmp	r1, #2
 800a902:	f000 80b0 	beq.w	800aa66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800a906:	b1e1      	cbz	r1, 800a942 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a908:	ee07 ea10 	vmov	s14, lr
 800a90c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a910:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800aab0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 800a914:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a918:	4b64      	ldr	r3, [pc, #400]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800a91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a920:	ee07 3a10 	vmov	s14, r3
 800a924:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a928:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a92c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a930:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a93c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800a940:	e060      	b.n	800aa04 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a942:	6813      	ldr	r3, [r2, #0]
 800a944:	f013 0f20 	tst.w	r3, #32
 800a948:	d023      	beq.n	800a992 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a94a:	4611      	mov	r1, r2
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a952:	4b59      	ldr	r3, [pc, #356]	; (800aab8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 800a954:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a956:	ee07 3a10 	vmov	s14, r3
 800a95a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a95e:	ee06 ea90 	vmov	s13, lr
 800a962:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800a966:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a96a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800a96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a970:	ee07 3a10 	vmov	s14, r3
 800a974:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a978:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a97c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a980:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a98c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a990:	e038      	b.n	800aa04 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a992:	ee07 ea10 	vmov	s14, lr
 800a996:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a99a:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800aab0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 800a99e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a9a2:	4b42      	ldr	r3, [pc, #264]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	ee07 3a10 	vmov	s14, r3
 800a9ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a9b2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a9b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a9ca:	e01b      	b.n	800aa04 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9cc:	ee07 ea10 	vmov	s14, lr
 800a9d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a9d4:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800aabc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 800a9d8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a9dc:	4b33      	ldr	r3, [pc, #204]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	ee07 3a10 	vmov	s14, r3
 800a9e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a9ec:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a9f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a9f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa00:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aa04:	4a29      	ldr	r2, [pc, #164]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800aa06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aa08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800aa0c:	ee07 3a10 	vmov	s14, r3
 800aa10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa18:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aa1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa24:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aa28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aa2a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800aa2e:	ee07 3a10 	vmov	s14, r3
 800aa32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa36:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aa3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa42:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aa48:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa54:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800aa60:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800aa64:	bd10      	pop	{r4, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa66:	ee07 ea10 	vmov	s14, lr
 800aa6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa6e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800aac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 800aa72:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800aa76:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a10 	vmov	s14, r3
 800aa82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa86:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800aa8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aa8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
 800aa9e:	e7b1      	b.n	800aa04 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aaa4:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aaa6:	6083      	str	r3, [r0, #8]
}
 800aaa8:	e7dc      	b.n	800aa64 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 800aaaa:	bf00      	nop
 800aaac:	58024400 	.word	0x58024400
 800aab0:	4c742400 	.word	0x4c742400
 800aab4:	39000000 	.word	0x39000000
 800aab8:	03d09000 	.word	0x03d09000
 800aabc:	4a742400 	.word	0x4a742400
 800aac0:	4af42400 	.word	0x4af42400

0800aac4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800aac4:	b500      	push	{lr}
 800aac6:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aac8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800aacc:	430b      	orrs	r3, r1
 800aace:	d02e      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aad0:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800aad4:	430b      	orrs	r3, r1
 800aad6:	d07e      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aad8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800aadc:	430b      	orrs	r3, r1
 800aade:	f000 80d4 	beq.w	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aae2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800aae6:	430b      	orrs	r3, r1
 800aae8:	f000 812c 	beq.w	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aaec:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	f000 818b 	beq.w	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aaf6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800aafa:	430b      	orrs	r3, r1
 800aafc:	f000 81e3 	beq.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab00:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800ab04:	430b      	orrs	r3, r1
 800ab06:	f000 822c 	beq.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab0a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800ab0e:	430b      	orrs	r3, r1
 800ab10:	f000 826f 	beq.w	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab14:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	f000 8290 	beq.w	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab1e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800ab22:	ea50 0301 	orrs.w	r3, r0, r1
 800ab26:	f000 82d3 	beq.w	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	e301      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab2e:	4b95      	ldr	r3, [pc, #596]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ab30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab32:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	f200 82f2 	bhi.w	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800ab3c:	e8df f003 	tbb	[pc, r3]
 800ab40:	031b1005 	.word	0x031b1005
 800ab44:	26          	.byte	0x26
 800ab45:	00          	.byte	0x00
 800ab46:	4890      	ldr	r0, [pc, #576]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800ab48:	e2f3      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab4a:	4b8e      	ldr	r3, [pc, #568]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ab52:	f000 82ee 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab56:	a807      	add	r0, sp, #28
 800ab58:	f7ff feb8 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab5c:	9808      	ldr	r0, [sp, #32]
 800ab5e:	e2e8      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab60:	4b88      	ldr	r3, [pc, #544]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ab68:	f000 82e3 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6c:	a804      	add	r0, sp, #16
 800ab6e:	f7ff fcb5 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab72:	9804      	ldr	r0, [sp, #16]
 800ab74:	e2dd      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab76:	4b83      	ldr	r3, [pc, #524]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ab7e:	f000 82d8 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab82:	a801      	add	r0, sp, #4
 800ab84:	f7ff fda6 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab88:	9801      	ldr	r0, [sp, #4]
 800ab8a:	e2d2      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab8c:	4a7d      	ldr	r2, [pc, #500]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ab8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ab90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	f012 0f04 	tst.w	r2, #4
 800ab9a:	d007      	beq.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ab9c:	b933      	cbnz	r3, 800abac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab9e:	4b79      	ldr	r3, [pc, #484]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aba6:	4879      	ldr	r0, [pc, #484]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800aba8:	40d8      	lsrs	r0, r3
 800abaa:	e2c2      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abac:	4a75      	ldr	r2, [pc, #468]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800abb4:	d003      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800abb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abba:	f000 82b3 	beq.w	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abbe:	4a71      	ldr	r2, [pc, #452]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800abc6:	f000 82af 	beq.w	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800abca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abce:	f000 82ad 	beq.w	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 800abd2:	2000      	movs	r0, #0
 800abd4:	e2ad      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800abd6:	4b6b      	ldr	r3, [pc, #428]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800abd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800abde:	2b80      	cmp	r3, #128	; 0x80
 800abe0:	d033      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800abe2:	d915      	bls.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800abe4:	2bc0      	cmp	r3, #192	; 0xc0
 800abe6:	f000 82a3 	beq.w	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800abea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abee:	d11f      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abf0:	4a64      	ldr	r2, [pc, #400]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800abf2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800abf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abf8:	6812      	ldr	r2, [r2, #0]
 800abfa:	f012 0f04 	tst.w	r2, #4
 800abfe:	d02f      	beq.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800ac00:	bb73      	cbnz	r3, 800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac02:	4b60      	ldr	r3, [pc, #384]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ac0a:	4860      	ldr	r0, [pc, #384]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800ac0c:	40d8      	lsrs	r0, r3
 800ac0e:	e290      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800ac10:	b183      	cbz	r3, 800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800ac12:	2b40      	cmp	r3, #64	; 0x40
 800ac14:	d10a      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac16:	4b5b      	ldr	r3, [pc, #364]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ac1e:	f000 8288 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac22:	a804      	add	r0, sp, #16
 800ac24:	f7ff fc5a 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac28:	9804      	ldr	r0, [sp, #16]
 800ac2a:	e282      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e280      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ac30:	2000      	movs	r0, #0
 800ac32:	e27e      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac34:	4b53      	ldr	r3, [pc, #332]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ac3c:	f000 8279 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac40:	a807      	add	r0, sp, #28
 800ac42:	f7ff fe43 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac46:	9808      	ldr	r0, [sp, #32]
 800ac48:	e273      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4a:	4b4e      	ldr	r3, [pc, #312]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ac52:	f000 826e 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac56:	a801      	add	r0, sp, #4
 800ac58:	f7ff fd3c 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac5c:	9801      	ldr	r0, [sp, #4]
 800ac5e:	e268      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac60:	4a48      	ldr	r2, [pc, #288]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ac68:	d003      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800ac6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac6e:	f000 8263 	beq.w	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac72:	4a44      	ldr	r2, [pc, #272]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac74:	6812      	ldr	r2, [r2, #0]
 800ac76:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800ac7a:	f000 825f 	beq.w	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 800ac7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac82:	f000 825d 	beq.w	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 800ac86:	2000      	movs	r0, #0
 800ac88:	e253      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac8a:	4b3e      	ldr	r3, [pc, #248]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800ac92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac96:	d035      	beq.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ac98:	d916      	bls.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800ac9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac9e:	f000 8251 	beq.w	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800aca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aca6:	d120      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x226>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aca8:	4a36      	ldr	r2, [pc, #216]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800acaa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800acac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	f012 0f04 	tst.w	r2, #4
 800acb6:	d030      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800acb8:	bb7b      	cbnz	r3, 800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acba:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800acc2:	4832      	ldr	r0, [pc, #200]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800acc4:	40d8      	lsrs	r0, r3
 800acc6:	e234      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800acc8:	b18b      	cbz	r3, 800acee <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800acca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acce:	d10a      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acd0:	4b2c      	ldr	r3, [pc, #176]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800acd8:	f000 822b 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acdc:	a804      	add	r0, sp, #16
 800acde:	f7ff fbfd 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ace2:	9804      	ldr	r0, [sp, #16]
 800ace4:	e225      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800ace6:	2000      	movs	r0, #0
 800ace8:	e223      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800acea:	2000      	movs	r0, #0
 800acec:	e221      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acee:	4b25      	ldr	r3, [pc, #148]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800acf6:	f000 821c 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acfa:	a807      	add	r0, sp, #28
 800acfc:	f7ff fde6 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad00:	9808      	ldr	r0, [sp, #32]
 800ad02:	e216      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad04:	4b1f      	ldr	r3, [pc, #124]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad06:	6818      	ldr	r0, [r3, #0]
 800ad08:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ad0c:	f000 8211 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad10:	a801      	add	r0, sp, #4
 800ad12:	f7ff fcdf 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad16:	9801      	ldr	r0, [sp, #4]
 800ad18:	e20b      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad1a:	4a1a      	ldr	r2, [pc, #104]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad1c:	6812      	ldr	r2, [r2, #0]
 800ad1e:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ad22:	d003      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800ad24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad28:	f000 820e 	beq.w	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad2c:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad2e:	6812      	ldr	r2, [r2, #0]
 800ad30:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800ad34:	f000 820a 	beq.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800ad38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad3c:	f000 8208 	beq.w	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 800ad40:	2000      	movs	r0, #0
 800ad42:	e1f6      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ad44:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800ad4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad50:	d03c      	beq.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800ad52:	d91d      	bls.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800ad54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad58:	f000 81fc 	beq.w	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800ad5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad60:	d127      	bne.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad62:	4a08      	ldr	r2, [pc, #32]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ad66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	f012 0f04 	tst.w	r2, #4
 800ad70:	d037      	beq.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d135      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad76:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ad7e:	4803      	ldr	r0, [pc, #12]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800ad80:	40d8      	lsrs	r0, r3
 800ad82:	e1d6      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ad84:	58024400 	.word	0x58024400
 800ad88:	00bb8000 	.word	0x00bb8000
 800ad8c:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 800ad90:	b18b      	cbz	r3, 800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800ad92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad96:	d10a      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad98:	4b9a      	ldr	r3, [pc, #616]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ada0:	f000 81c7 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada4:	a804      	add	r0, sp, #16
 800ada6:	f7ff fb99 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adaa:	9804      	ldr	r0, [sp, #16]
 800adac:	e1c1      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800adae:	2000      	movs	r0, #0
 800adb0:	e1bf      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e1bd      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adb6:	4b93      	ldr	r3, [pc, #588]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800adbe:	f000 81b8 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adc2:	a807      	add	r0, sp, #28
 800adc4:	f7ff fd82 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adc8:	9808      	ldr	r0, [sp, #32]
 800adca:	e1b2      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adcc:	4b8d      	ldr	r3, [pc, #564]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800add4:	f000 81ad 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add8:	a801      	add	r0, sp, #4
 800adda:	f7ff fc7b 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adde:	9801      	ldr	r0, [sp, #4]
 800ade0:	e1a7      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ade2:	4a88      	ldr	r2, [pc, #544]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	f412 7f80 	tst.w	r2, #256	; 0x100
 800adea:	d003      	beq.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 800adec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf0:	f000 81b2 	beq.w	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adf4:	4a83      	ldr	r2, [pc, #524]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800adf6:	6812      	ldr	r2, [r2, #0]
 800adf8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800adfc:	f000 81ae 	beq.w	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800ae00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae04:	f000 81ac 	beq.w	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e192      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ae0c:	4b7d      	ldr	r3, [pc, #500]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800ae14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae18:	d035      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae1a:	d916      	bls.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800ae1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae20:	f000 81a0 	beq.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800ae24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae28:	d120      	bne.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae2a:	4a76      	ldr	r2, [pc, #472]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ae2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae32:	6812      	ldr	r2, [r2, #0]
 800ae34:	f012 0f04 	tst.w	r2, #4
 800ae38:	d030      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 800ae3a:	bb7b      	cbnz	r3, 800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae3c:	4b71      	ldr	r3, [pc, #452]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae44:	4870      	ldr	r0, [pc, #448]	; (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800ae46:	40d8      	lsrs	r0, r3
 800ae48:	e173      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800ae4a:	b18b      	cbz	r3, 800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800ae4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae50:	d10a      	bne.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae52:	4b6c      	ldr	r3, [pc, #432]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ae5a:	f000 816a 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae5e:	a804      	add	r0, sp, #16
 800ae60:	f7ff fb3c 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae64:	9804      	ldr	r0, [sp, #16]
 800ae66:	e164      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e162      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e160      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae70:	4b64      	ldr	r3, [pc, #400]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ae78:	f000 815b 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae7c:	a807      	add	r0, sp, #28
 800ae7e:	f7ff fd25 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae82:	9808      	ldr	r0, [sp, #32]
 800ae84:	e155      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae86:	4b5f      	ldr	r3, [pc, #380]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ae8e:	f000 8150 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae92:	a801      	add	r0, sp, #4
 800ae94:	f7ff fc1e 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae98:	9801      	ldr	r0, [sp, #4]
 800ae9a:	e14a      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae9c:	4a59      	ldr	r2, [pc, #356]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae9e:	6812      	ldr	r2, [r2, #0]
 800aea0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800aea4:	d003      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800aea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeaa:	f000 815d 	beq.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeae:	4a55      	ldr	r2, [pc, #340]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aeb0:	6812      	ldr	r2, [r2, #0]
 800aeb2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800aeb6:	f000 8159 	beq.w	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 800aeba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aebe:	f000 8157 	beq.w	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 800aec2:	2000      	movs	r0, #0
 800aec4:	e135      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aec6:	4b4f      	ldr	r3, [pc, #316]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800aece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aed2:	d032      	beq.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800aed4:	d816      	bhi.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 800aed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeda:	d023      	beq.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800aedc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aee0:	d10a      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aee2:	4b48      	ldr	r3, [pc, #288]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800aeea:	f000 8122 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeee:	a801      	add	r0, sp, #4
 800aef0:	f7ff fbf0 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aef4:	9802      	ldr	r0, [sp, #8]
 800aef6:	e11c      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800aef8:	b913      	cbnz	r3, 800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800aefa:	f7fe fa75 	bl	80093e8 <HAL_RCC_GetPCLK1Freq>
        break;
 800aefe:	e118      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800af00:	2000      	movs	r0, #0
 800af02:	e116      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800af04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af08:	d023      	beq.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800af0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af0e:	d107      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af10:	4b3c      	ldr	r3, [pc, #240]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800af18:	f000 810b 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800af1c:	483b      	ldr	r0, [pc, #236]	; (800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800af1e:	e108      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800af20:	2000      	movs	r0, #0
 800af22:	e106      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af24:	4b37      	ldr	r3, [pc, #220]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800af2c:	f000 8101 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af30:	a804      	add	r0, sp, #16
 800af32:	f7ff fad3 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	e0fb      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af3a:	4b32      	ldr	r3, [pc, #200]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f010 0004 	ands.w	r0, r0, #4
 800af42:	f000 80f6 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800af4c:	482e      	ldr	r0, [pc, #184]	; (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800af4e:	40d8      	lsrs	r0, r3
 800af50:	e0ef      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af52:	4b2c      	ldr	r3, [pc, #176]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800af5a:	f000 80ea 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800af5e:	482c      	ldr	r0, [pc, #176]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800af60:	e0e7      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af62:	4b28      	ldr	r3, [pc, #160]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800af6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af6e:	d010      	beq.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800af70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af74:	d018      	beq.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800af76:	b10b      	cbz	r3, 800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800af78:	2000      	movs	r0, #0
 800af7a:	e0da      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af7c:	4b21      	ldr	r3, [pc, #132]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800af84:	f000 80d5 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af88:	a804      	add	r0, sp, #16
 800af8a:	f7ff faa7 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af8e:	9804      	ldr	r0, [sp, #16]
 800af90:	e0cf      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800af9a:	f000 80ca 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af9e:	a801      	add	r0, sp, #4
 800afa0:	f7ff fb98 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800afa4:	9803      	ldr	r0, [sp, #12]
 800afa6:	e0c4      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afa8:	4a16      	ldr	r2, [pc, #88]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afaa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800afac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afb0:	6812      	ldr	r2, [r2, #0]
 800afb2:	f012 0f04 	tst.w	r2, #4
 800afb6:	d007      	beq.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afb8:	b933      	cbnz	r3, 800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afba:	4b12      	ldr	r3, [pc, #72]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800afc2:	4811      	ldr	r0, [pc, #68]	; (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800afc4:	40d8      	lsrs	r0, r3
 800afc6:	e0b4      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afc8:	4a0e      	ldr	r2, [pc, #56]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afca:	6812      	ldr	r2, [r2, #0]
 800afcc:	f412 7f80 	tst.w	r2, #256	; 0x100
 800afd0:	d003      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800afd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afd6:	f000 80cd 	beq.w	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afda:	4a0a      	ldr	r2, [pc, #40]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afdc:	6812      	ldr	r2, [r2, #0]
 800afde:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800afe2:	f000 80c9 	beq.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800afe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afea:	f000 80c7 	beq.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 800afee:	2000      	movs	r0, #0
 800aff0:	e09f      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aff2:	4b04      	ldr	r3, [pc, #16]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 800aff6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800affa:	d00b      	beq.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 800affc:	b9ab      	cbnz	r3, 800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800affe:	2000      	movs	r0, #0
 800b000:	e097      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b002:	bf00      	nop
 800b004:	58024400 	.word	0x58024400
 800b008:	03d09000 	.word	0x03d09000
 800b00c:	007a1200 	.word	0x007a1200
 800b010:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b014:	4b5a      	ldr	r3, [pc, #360]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b01c:	f000 8089 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b020:	a807      	add	r0, sp, #28
 800b022:	f7ff fc53 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b026:	9808      	ldr	r0, [sp, #32]
 800b028:	e083      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b02a:	4b55      	ldr	r3, [pc, #340]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b032:	d07e      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b034:	a804      	add	r0, sp, #16
 800b036:	f7ff fa51 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b03a:	9806      	ldr	r0, [sp, #24]
 800b03c:	e079      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b03e:	4b50      	ldr	r3, [pc, #320]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b042:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800b046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b04a:	d02f      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b04c:	d815      	bhi.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 800b04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b052:	d021      	beq.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800b054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b058:	d109      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b05a:	4b49      	ldr	r3, [pc, #292]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b062:	d066      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b064:	a801      	add	r0, sp, #4
 800b066:	f7ff fb35 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b06a:	9802      	ldr	r0, [sp, #8]
 800b06c:	e061      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800b06e:	b913      	cbnz	r3, 800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b070:	f7ff fa22 	bl	800a4b8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800b074:	e05d      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800b076:	2000      	movs	r0, #0
 800b078:	e05b      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07e:	d020      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800b080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b084:	d106      	bne.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b086:	4b3e      	ldr	r3, [pc, #248]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b08e:	d050      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b090:	483c      	ldr	r0, [pc, #240]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b092:	e04e      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800b094:	2000      	movs	r0, #0
 800b096:	e04c      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b098:	4b39      	ldr	r3, [pc, #228]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b0a0:	d047      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a2:	a804      	add	r0, sp, #16
 800b0a4:	f7ff fa1a 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0a8:	9805      	ldr	r0, [sp, #20]
 800b0aa:	e042      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0ac:	4b34      	ldr	r3, [pc, #208]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	f010 0004 	ands.w	r0, r0, #4
 800b0b4:	d03d      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b0bc:	4832      	ldr	r0, [pc, #200]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 800b0be:	40d8      	lsrs	r0, r3
 800b0c0:	e037      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0c2:	4b2f      	ldr	r3, [pc, #188]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b0ca:	d032      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b0cc:	482f      	ldr	r0, [pc, #188]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b0ce:	e030      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b0d0:	4b2b      	ldr	r3, [pc, #172]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800b0d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0dc:	d00c      	beq.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e2:	d013      	beq.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 800b0e4:	b10b      	cbz	r3, 800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b0e6:	2000      	movs	r0, #0
  return frequency;
 800b0e8:	e023      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0ea:	4b25      	ldr	r3, [pc, #148]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b0f2:	d01e      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b0f4:	4823      	ldr	r0, [pc, #140]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b0f6:	e01c      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0f8:	4b21      	ldr	r3, [pc, #132]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b100:	d017      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b102:	a807      	add	r0, sp, #28
 800b104:	f7ff fbe2 	bl	800a8cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b108:	9808      	ldr	r0, [sp, #32]
 800b10a:	e012      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b10c:	4b1c      	ldr	r3, [pc, #112]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800b10e:	6818      	ldr	r0, [r3, #0]
 800b110:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b114:	d00d      	beq.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b116:	a804      	add	r0, sp, #16
 800b118:	f7ff f9e0 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b11c:	9805      	ldr	r0, [sp, #20]
 800b11e:	e008      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800b120:	2000      	movs	r0, #0
 800b122:	e006      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b124:	4819      	ldr	r0, [pc, #100]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b126:	e004      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b128:	2000      	movs	r0, #0
 800b12a:	e002      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b12c:	4815      	ldr	r0, [pc, #84]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b12e:	e000      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800b130:	4817      	ldr	r0, [pc, #92]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 800b132:	b00b      	add	sp, #44	; 0x2c
 800b134:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 800b138:	4814      	ldr	r0, [pc, #80]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b13a:	e7fa      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b13c:	2000      	movs	r0, #0
 800b13e:	e7f8      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b140:	4810      	ldr	r0, [pc, #64]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b142:	e7f6      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800b144:	4812      	ldr	r0, [pc, #72]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800b146:	e7f4      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b148:	4810      	ldr	r0, [pc, #64]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b14a:	e7f2      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b14c:	2000      	movs	r0, #0
 800b14e:	e7f0      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b150:	480c      	ldr	r0, [pc, #48]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b152:	e7ee      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800b154:	480e      	ldr	r0, [pc, #56]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800b156:	e7ec      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b158:	480c      	ldr	r0, [pc, #48]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b15a:	e7ea      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b15c:	2000      	movs	r0, #0
 800b15e:	e7e8      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b160:	4808      	ldr	r0, [pc, #32]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b162:	e7e6      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800b164:	480a      	ldr	r0, [pc, #40]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800b166:	e7e4      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b168:	4808      	ldr	r0, [pc, #32]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b16a:	e7e2      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b16c:	2000      	movs	r0, #0
 800b16e:	e7e0      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b170:	4804      	ldr	r0, [pc, #16]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b172:	e7de      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800b174:	4805      	ldr	r0, [pc, #20]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800b176:	e7dc      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800b178:	2000      	movs	r0, #0
 800b17a:	e7da      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800b17e:	e7d8      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b180:	58024400 	.word	0x58024400
 800b184:	007a1200 	.word	0x007a1200
 800b188:	03d09000 	.word	0x03d09000
 800b18c:	003d0900 	.word	0x003d0900
 800b190:	00bb8000 	.word	0x00bb8000

0800b194 <HAL_RCCEx_GetD1SysClockFreq>:
{
 800b194:	b508      	push	{r3, lr}
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b196:	f7fd fec1 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800b19a:	490b      	ldr	r1, [pc, #44]	; (800b1c8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800b19c:	698b      	ldr	r3, [r1, #24]
 800b19e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b1a2:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <HAL_RCCEx_GetD1SysClockFreq+0x38>)
 800b1a4:	5cd3      	ldrb	r3, [r2, r3]
 800b1a6:	f003 031f 	and.w	r3, r3, #31
 800b1aa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ac:	698b      	ldr	r3, [r1, #24]
 800b1ae:	f003 030f 	and.w	r3, r3, #15
 800b1b2:	5cd3      	ldrb	r3, [r2, r3]
 800b1b4:	f003 031f 	and.w	r3, r3, #31
 800b1b8:	fa20 f303 	lsr.w	r3, r0, r3
 800b1bc:	4a04      	ldr	r2, [pc, #16]	; (800b1d0 <HAL_RCCEx_GetD1SysClockFreq+0x3c>)
 800b1be:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <HAL_RCCEx_GetD1SysClockFreq+0x40>)
 800b1c2:	6018      	str	r0, [r3, #0]
}
 800b1c4:	bd08      	pop	{r3, pc}
 800b1c6:	bf00      	nop
 800b1c8:	58024400 	.word	0x58024400
 800b1cc:	0801179c 	.word	0x0801179c
 800b1d0:	24000004 	.word	0x24000004
 800b1d4:	24000000 	.word	0x24000000

0800b1d8 <HAL_RCCEx_EnableLSECSS>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800b1d8:	4a02      	ldr	r2, [pc, #8]	; (800b1e4 <HAL_RCCEx_EnableLSECSS+0xc>)
 800b1da:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b1dc:	f043 0320 	orr.w	r3, r3, #32
 800b1e0:	6713      	str	r3, [r2, #112]	; 0x70
}
 800b1e2:	4770      	bx	lr
 800b1e4:	58024400 	.word	0x58024400

0800b1e8 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800b1e8:	4b04      	ldr	r3, [pc, #16]	; (800b1fc <HAL_RCCEx_DisableLSECSS+0x14>)
 800b1ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1ec:	f022 0220 	bic.w	r2, r2, #32
 800b1f0:	671a      	str	r2, [r3, #112]	; 0x70
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800b1f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b1f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b1f8:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b1fa:	4770      	bx	lr
 800b1fc:	58024400 	.word	0x58024400

0800b200 <HAL_RCCEx_EnableLSECSS_IT>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 800b202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b204:	f042 0220 	orr.w	r2, r2, #32
 800b208:	671a      	str	r2, [r3, #112]	; 0x70
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800b20a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b210:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800b212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b216:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b21a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b21e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b228:	601a      	str	r2, [r3, #0]
}
 800b22a:	4770      	bx	lr
 800b22c:	58024400 	.word	0x58024400

0800b230 <HAL_RCCEx_WakeUpStopCLKConfig>:
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800b230:	4a03      	ldr	r2, [pc, #12]	; (800b240 <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 800b232:	6913      	ldr	r3, [r2, #16]
 800b234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b238:	4303      	orrs	r3, r0
 800b23a:	6113      	str	r3, [r2, #16]
}
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	58024400 	.word	0x58024400

0800b244 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800b244:	4a03      	ldr	r2, [pc, #12]	; (800b254 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x10>)
 800b246:	6913      	ldr	r3, [r2, #16]
 800b248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b24c:	4303      	orrs	r3, r0
 800b24e:	6113      	str	r3, [r2, #16]
}
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	58024400 	.word	0x58024400

0800b258 <HAL_RCCEx_EnableBootCore>:
  SET_BIT(RCC->GCR, RCC_BootCx) ;
 800b258:	4a03      	ldr	r2, [pc, #12]	; (800b268 <HAL_RCCEx_EnableBootCore+0x10>)
 800b25a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 800b25e:	4303      	orrs	r3, r0
 800b260:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	58024400 	.word	0x58024400

0800b26c <HAL_RCCEx_WWDGxSysResetConfig>:
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
 800b26c:	4a03      	ldr	r2, [pc, #12]	; (800b27c <HAL_RCCEx_WWDGxSysResetConfig+0x10>)
 800b26e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 800b272:	4303      	orrs	r3, r0
 800b274:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	58024400 	.word	0x58024400

0800b280 <HAL_RCCEx_CRSConfig>:
{
 800b280:	b510      	push	{r4, lr}
 800b282:	4604      	mov	r4, r0
  __HAL_RCC_CRS_FORCE_RESET();
 800b284:	4b19      	ldr	r3, [pc, #100]	; (800b2ec <HAL_RCCEx_CRSConfig+0x6c>)
 800b286:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b28a:	f042 0202 	orr.w	r2, r2, #2
 800b28e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800b292:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b296:	f022 0202 	bic.w	r2, r2, #2
 800b29a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800b29e:	f7f5 ffa7 	bl	80011f0 <HAL_GetREVID>
 800b2a2:	f241 0303 	movw	r3, #4099	; 0x1003
 800b2a6:	4298      	cmp	r0, r3
 800b2a8:	d803      	bhi.n	800b2b2 <HAL_RCCEx_CRSConfig+0x32>
 800b2aa:	6863      	ldr	r3, [r4, #4]
 800b2ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b0:	d017      	beq.n	800b2e2 <HAL_RCCEx_CRSConfig+0x62>
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b2b2:	6822      	ldr	r2, [r4, #0]
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	431a      	orrs	r2, r3
  value |= pInit->ReloadValue;
 800b2bc:	68e3      	ldr	r3, [r4, #12]
 800b2be:	4313      	orrs	r3, r2
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b2c0:	6922      	ldr	r2, [r4, #16]
 800b2c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  WRITE_REG(CRS->CFGR, value);
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <HAL_RCCEx_CRSConfig+0x70>)
 800b2c8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800b2d0:	6961      	ldr	r1, [r4, #20]
 800b2d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b2d6:	601a      	str	r2, [r3, #0]
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b2de:	601a      	str	r2, [r3, #0]
}
 800b2e0:	bd10      	pop	{r4, pc}
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	e7e8      	b.n	800b2bc <HAL_RCCEx_CRSConfig+0x3c>
 800b2ea:	bf00      	nop
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	40008400 	.word	0x40008400

0800b2f4 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
 800b2f4:	4a02      	ldr	r2, [pc, #8]	; (800b300 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0xc>)
 800b2f6:	6813      	ldr	r3, [r2, #0]
 800b2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fc:	6013      	str	r3, [r2, #0]
}
 800b2fe:	4770      	bx	lr
 800b300:	40008400 	.word	0x40008400

0800b304 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
 800b304:	4b07      	ldr	r3, [pc, #28]	; (800b324 <HAL_RCCEx_CRSGetSynchronizationInfo+0x20>)
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	b292      	uxth	r2, r2
 800b30a:	6002      	str	r2, [r0, #0]
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	f3c2 2205 	ubfx	r2, r2, #8, #6
 800b312:	6042      	str	r2, [r0, #4]
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	0c12      	lsrs	r2, r2, #16
 800b318:	6082      	str	r2, [r0, #8]
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b320:	60c3      	str	r3, [r0, #12]
}
 800b322:	4770      	bx	lr
 800b324:	40008400 	.word	0x40008400

0800b328 <HAL_RCCEx_CRSWaitSynchronization>:
{
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 800b32c:	f7f5 ff12 	bl	8001154 <HAL_GetTick>
 800b330:	4606      	mov	r6, r0
  uint32_t crsstatus = RCC_CRS_NONE;
 800b332:	2400      	movs	r4, #0
 800b334:	e00e      	b.n	800b354 <HAL_RCCEx_CRSWaitSynchronization+0x2c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b336:	f7f5 ff0d 	bl	8001154 <HAL_GetTick>
 800b33a:	1b80      	subs	r0, r0, r6
 800b33c:	42a8      	cmp	r0, r5
 800b33e:	d802      	bhi.n	800b346 <HAL_RCCEx_CRSWaitSynchronization+0x1e>
 800b340:	b95d      	cbnz	r5, 800b35a <HAL_RCCEx_CRSWaitSynchronization+0x32>
        crsstatus = RCC_CRS_TIMEOUT;
 800b342:	2401      	movs	r4, #1
 800b344:	e009      	b.n	800b35a <HAL_RCCEx_CRSWaitSynchronization+0x32>
 800b346:	2401      	movs	r4, #1
 800b348:	e007      	b.n	800b35a <HAL_RCCEx_CRSWaitSynchronization+0x32>
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 800b34a:	4b21      	ldr	r3, [pc, #132]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b34c:	2208      	movs	r2, #8
 800b34e:	60da      	str	r2, [r3, #12]
  while (RCC_CRS_NONE == crsstatus);
 800b350:	2c00      	cmp	r4, #0
 800b352:	d13a      	bne.n	800b3ca <HAL_RCCEx_CRSWaitSynchronization+0xa2>
    if (Timeout != HAL_MAX_DELAY)
 800b354:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b358:	d1ed      	bne.n	800b336 <HAL_RCCEx_CRSWaitSynchronization+0xe>
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 800b35a:	4b1d      	ldr	r3, [pc, #116]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f013 0f01 	tst.w	r3, #1
 800b362:	d004      	beq.n	800b36e <HAL_RCCEx_CRSWaitSynchronization+0x46>
      crsstatus |= RCC_CRS_SYNCOK;
 800b364:	f044 0402 	orr.w	r4, r4, #2
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 800b368:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	60da      	str	r2, [r3, #12]
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 800b36e:	4b18      	ldr	r3, [pc, #96]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f013 0f02 	tst.w	r3, #2
 800b376:	d004      	beq.n	800b382 <HAL_RCCEx_CRSWaitSynchronization+0x5a>
      crsstatus |= RCC_CRS_SYNCWARN;
 800b378:	f044 0404 	orr.w	r4, r4, #4
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
 800b37c:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b37e:	2202      	movs	r2, #2
 800b380:	60da      	str	r2, [r3, #12]
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 800b382:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b38a:	d004      	beq.n	800b396 <HAL_RCCEx_CRSWaitSynchronization+0x6e>
      crsstatus |= RCC_CRS_TRIMOVF;
 800b38c:	f044 0420 	orr.w	r4, r4, #32
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b392:	2204      	movs	r2, #4
 800b394:	60da      	str	r2, [r3, #12]
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b39e:	d004      	beq.n	800b3aa <HAL_RCCEx_CRSWaitSynchronization+0x82>
      crsstatus |= RCC_CRS_SYNCERR;
 800b3a0:	f044 0408 	orr.w	r4, r4, #8
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	60da      	str	r2, [r3, #12]
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b3b2:	d004      	beq.n	800b3be <HAL_RCCEx_CRSWaitSynchronization+0x96>
      crsstatus |= RCC_CRS_SYNCMISS;
 800b3b4:	f044 0410 	orr.w	r4, r4, #16
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
 800b3b8:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b3ba:	2204      	movs	r2, #4
 800b3bc:	60da      	str	r2, [r3, #12]
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <HAL_RCCEx_CRSWaitSynchronization+0xa8>)
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f013 0f08 	tst.w	r3, #8
 800b3c6:	d0c3      	beq.n	800b350 <HAL_RCCEx_CRSWaitSynchronization+0x28>
 800b3c8:	e7bf      	b.n	800b34a <HAL_RCCEx_CRSWaitSynchronization+0x22>
}
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40008400 	.word	0x40008400

0800b3d4 <HAL_RCCEx_CRS_SyncOkCallback>:
}
 800b3d4:	4770      	bx	lr

0800b3d6 <HAL_RCCEx_CRS_SyncWarnCallback>:
}
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
}
 800b3d8:	4770      	bx	lr

0800b3da <HAL_RCCEx_CRS_ErrorCallback>:
}
 800b3da:	4770      	bx	lr

0800b3dc <HAL_RCCEx_CRS_IRQHandler>:
{
 800b3dc:	b508      	push	{r3, lr}
  uint32_t itflags = READ_REG(CRS->ISR);
 800b3de:	4a20      	ldr	r2, [pc, #128]	; (800b460 <HAL_RCCEx_CRS_IRQHandler+0x84>)
 800b3e0:	6893      	ldr	r3, [r2, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 800b3e2:	6812      	ldr	r2, [r2, #0]
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
 800b3e4:	f013 0f01 	tst.w	r3, #1
 800b3e8:	d002      	beq.n	800b3f0 <HAL_RCCEx_CRS_IRQHandler+0x14>
 800b3ea:	f012 0f01 	tst.w	r2, #1
 800b3ee:	d125      	bne.n	800b43c <HAL_RCCEx_CRS_IRQHandler+0x60>
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
 800b3f0:	f013 0f02 	tst.w	r3, #2
 800b3f4:	d002      	beq.n	800b3fc <HAL_RCCEx_CRS_IRQHandler+0x20>
 800b3f6:	f012 0f02 	tst.w	r2, #2
 800b3fa:	d125      	bne.n	800b448 <HAL_RCCEx_CRS_IRQHandler+0x6c>
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
 800b3fc:	f013 0f08 	tst.w	r3, #8
 800b400:	d002      	beq.n	800b408 <HAL_RCCEx_CRS_IRQHandler+0x2c>
 800b402:	f012 0f08 	tst.w	r2, #8
 800b406:	d125      	bne.n	800b454 <HAL_RCCEx_CRS_IRQHandler+0x78>
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 800b408:	f013 0f04 	tst.w	r3, #4
 800b40c:	d01b      	beq.n	800b446 <HAL_RCCEx_CRS_IRQHandler+0x6a>
 800b40e:	f012 0f04 	tst.w	r2, #4
 800b412:	d018      	beq.n	800b446 <HAL_RCCEx_CRS_IRQHandler+0x6a>
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
 800b414:	f413 7080 	ands.w	r0, r3, #256	; 0x100
 800b418:	d000      	beq.n	800b41c <HAL_RCCEx_CRS_IRQHandler+0x40>
        crserror |= RCC_CRS_SYNCERR;
 800b41a:	2008      	movs	r0, #8
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
 800b41c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b420:	d001      	beq.n	800b426 <HAL_RCCEx_CRS_IRQHandler+0x4a>
        crserror |= RCC_CRS_SYNCMISS;
 800b422:	f040 0010 	orr.w	r0, r0, #16
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
 800b426:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b42a:	d001      	beq.n	800b430 <HAL_RCCEx_CRS_IRQHandler+0x54>
        crserror |= RCC_CRS_TRIMOVF;
 800b42c:	f040 0020 	orr.w	r0, r0, #32
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 800b430:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <HAL_RCCEx_CRS_IRQHandler+0x84>)
 800b432:	2204      	movs	r2, #4
 800b434:	60da      	str	r2, [r3, #12]
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 800b436:	f7ff ffd0 	bl	800b3da <HAL_RCCEx_CRS_ErrorCallback>
}
 800b43a:	e004      	b.n	800b446 <HAL_RCCEx_CRS_IRQHandler+0x6a>
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 800b43c:	4b08      	ldr	r3, [pc, #32]	; (800b460 <HAL_RCCEx_CRS_IRQHandler+0x84>)
 800b43e:	2201      	movs	r2, #1
 800b440:	60da      	str	r2, [r3, #12]
    HAL_RCCEx_CRS_SyncOkCallback();
 800b442:	f7ff ffc7 	bl	800b3d4 <HAL_RCCEx_CRS_SyncOkCallback>
}
 800b446:	bd08      	pop	{r3, pc}
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <HAL_RCCEx_CRS_IRQHandler+0x84>)
 800b44a:	2202      	movs	r2, #2
 800b44c:	60da      	str	r2, [r3, #12]
    HAL_RCCEx_CRS_SyncWarnCallback();
 800b44e:	f7ff ffc2 	bl	800b3d6 <HAL_RCCEx_CRS_SyncWarnCallback>
 800b452:	e7f8      	b.n	800b446 <HAL_RCCEx_CRS_IRQHandler+0x6a>
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 800b454:	4b02      	ldr	r3, [pc, #8]	; (800b460 <HAL_RCCEx_CRS_IRQHandler+0x84>)
 800b456:	2208      	movs	r2, #8
 800b458:	60da      	str	r2, [r3, #12]
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 800b45a:	f7ff ffbd 	bl	800b3d8 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 800b45e:	e7f2      	b.n	800b446 <HAL_RCCEx_CRS_IRQHandler+0x6a>
 800b460:	40008400 	.word	0x40008400

0800b464 <HAL_RCCEx_LSECSS_Callback>:
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
 800b464:	4770      	bx	lr

0800b466 <HAL_RCCEx_LSECSS_IRQHandler>:
{
 800b466:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800b468:	4b06      	ldr	r3, [pc, #24]	; (800b484 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>)
 800b46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b46c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b470:	d100      	bne.n	800b474 <HAL_RCCEx_LSECSS_IRQHandler+0xe>
}
 800b472:	bd08      	pop	{r3, pc}
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800b474:	4b03      	ldr	r3, [pc, #12]	; (800b484 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>)
 800b476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b47a:	669a      	str	r2, [r3, #104]	; 0x68
    HAL_RCCEx_LSECSS_Callback();
 800b47c:	f7ff fff2 	bl	800b464 <HAL_RCCEx_LSECSS_Callback>
}
 800b480:	e7f7      	b.n	800b472 <HAL_RCCEx_LSECSS_IRQHandler+0xc>
 800b482:	bf00      	nop
 800b484:	58024400 	.word	0x58024400

0800b488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b48a:	6a03      	ldr	r3, [r0, #32]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b492:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b494:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b496:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b498:	4a1f      	ldr	r2, [pc, #124]	; (800b518 <TIM_OC1_SetConfig+0x90>)
 800b49a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b49c:	680d      	ldr	r5, [r1, #0]
 800b49e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4a0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4a4:	688c      	ldr	r4, [r1, #8]
 800b4a6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4a8:	4a1c      	ldr	r2, [pc, #112]	; (800b51c <TIM_OC1_SetConfig+0x94>)
 800b4aa:	4c1d      	ldr	r4, [pc, #116]	; (800b520 <TIM_OC1_SetConfig+0x98>)
 800b4ac:	42a0      	cmp	r0, r4
 800b4ae:	bf18      	it	ne
 800b4b0:	4290      	cmpne	r0, r2
 800b4b2:	bf0c      	ite	eq
 800b4b4:	2201      	moveq	r2, #1
 800b4b6:	2200      	movne	r2, #0
 800b4b8:	d00c      	beq.n	800b4d4 <TIM_OC1_SetConfig+0x4c>
 800b4ba:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 800b4be:	42a0      	cmp	r0, r4
 800b4c0:	bf14      	ite	ne
 800b4c2:	2400      	movne	r4, #0
 800b4c4:	2401      	moveq	r4, #1
 800b4c6:	4f17      	ldr	r7, [pc, #92]	; (800b524 <TIM_OC1_SetConfig+0x9c>)
 800b4c8:	42b8      	cmp	r0, r7
 800b4ca:	d003      	beq.n	800b4d4 <TIM_OC1_SetConfig+0x4c>
 800b4cc:	b914      	cbnz	r4, 800b4d4 <TIM_OC1_SetConfig+0x4c>
 800b4ce:	4c16      	ldr	r4, [pc, #88]	; (800b528 <TIM_OC1_SetConfig+0xa0>)
 800b4d0:	42a0      	cmp	r0, r4
 800b4d2:	d105      	bne.n	800b4e0 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4d4:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4d8:	68cc      	ldr	r4, [r1, #12]
 800b4da:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4dc:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e0:	b95a      	cbnz	r2, 800b4fa <TIM_OC1_SetConfig+0x72>
 800b4e2:	4a12      	ldr	r2, [pc, #72]	; (800b52c <TIM_OC1_SetConfig+0xa4>)
 800b4e4:	4290      	cmp	r0, r2
 800b4e6:	bf14      	ite	ne
 800b4e8:	2200      	movne	r2, #0
 800b4ea:	2201      	moveq	r2, #1
 800b4ec:	4c0d      	ldr	r4, [pc, #52]	; (800b524 <TIM_OC1_SetConfig+0x9c>)
 800b4ee:	42a0      	cmp	r0, r4
 800b4f0:	d003      	beq.n	800b4fa <TIM_OC1_SetConfig+0x72>
 800b4f2:	b912      	cbnz	r2, 800b4fa <TIM_OC1_SetConfig+0x72>
 800b4f4:	4a0c      	ldr	r2, [pc, #48]	; (800b528 <TIM_OC1_SetConfig+0xa0>)
 800b4f6:	4290      	cmp	r0, r2
 800b4f8:	d107      	bne.n	800b50a <TIM_OC1_SetConfig+0x82>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4fa:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4fe:	694a      	ldr	r2, [r1, #20]
 800b500:	ea42 0c0c 	orr.w	ip, r2, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b504:	698e      	ldr	r6, [r1, #24]
 800b506:	ea46 060c 	orr.w	r6, r6, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b50a:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50c:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b50e:	684a      	ldr	r2, [r1, #4]
 800b510:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b512:	6203      	str	r3, [r0, #32]
}
 800b514:	bcf0      	pop	{r4, r5, r6, r7}
 800b516:	4770      	bx	lr
 800b518:	fffeff8c 	.word	0xfffeff8c
 800b51c:	40010000 	.word	0x40010000
 800b520:	40010400 	.word	0x40010400
 800b524:	40014000 	.word	0x40014000
 800b528:	40014800 	.word	0x40014800
 800b52c:	40014400 	.word	0x40014400

0800b530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b532:	6a03      	ldr	r3, [r0, #32]
 800b534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b538:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b53c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b53e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b540:	4a1a      	ldr	r2, [pc, #104]	; (800b5ac <TIM_OC3_SetConfig+0x7c>)
 800b542:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b544:	680e      	ldr	r6, [r1, #0]
 800b546:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b54c:	688a      	ldr	r2, [r1, #8]
 800b54e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b552:	4a17      	ldr	r2, [pc, #92]	; (800b5b0 <TIM_OC3_SetConfig+0x80>)
 800b554:	4c17      	ldr	r4, [pc, #92]	; (800b5b4 <TIM_OC3_SetConfig+0x84>)
 800b556:	42a0      	cmp	r0, r4
 800b558:	bf18      	it	ne
 800b55a:	4290      	cmpne	r0, r2
 800b55c:	bf0c      	ite	eq
 800b55e:	2201      	moveq	r2, #1
 800b560:	2200      	movne	r2, #0
 800b562:	d106      	bne.n	800b572 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b568:	68cc      	ldr	r4, [r1, #12]
 800b56a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b56e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b572:	b95a      	cbnz	r2, 800b58c <TIM_OC3_SetConfig+0x5c>
 800b574:	4a10      	ldr	r2, [pc, #64]	; (800b5b8 <TIM_OC3_SetConfig+0x88>)
 800b576:	4290      	cmp	r0, r2
 800b578:	bf14      	ite	ne
 800b57a:	2200      	movne	r2, #0
 800b57c:	2201      	moveq	r2, #1
 800b57e:	4c0f      	ldr	r4, [pc, #60]	; (800b5bc <TIM_OC3_SetConfig+0x8c>)
 800b580:	42a0      	cmp	r0, r4
 800b582:	d003      	beq.n	800b58c <TIM_OC3_SetConfig+0x5c>
 800b584:	b912      	cbnz	r2, 800b58c <TIM_OC3_SetConfig+0x5c>
 800b586:	4a0e      	ldr	r2, [pc, #56]	; (800b5c0 <TIM_OC3_SetConfig+0x90>)
 800b588:	4290      	cmp	r0, r2
 800b58a:	d107      	bne.n	800b59c <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b58c:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b590:	694a      	ldr	r2, [r1, #20]
 800b592:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b596:	698d      	ldr	r5, [r1, #24]
 800b598:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b59c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b59e:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5a0:	684a      	ldr	r2, [r1, #4]
 800b5a2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a4:	6203      	str	r3, [r0, #32]
}
 800b5a6:	bc70      	pop	{r4, r5, r6}
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	fffeff8c 	.word	0xfffeff8c
 800b5b0:	40010000 	.word	0x40010000
 800b5b4:	40010400 	.word	0x40010400
 800b5b8:	40014400 	.word	0x40014400
 800b5bc:	40014000 	.word	0x40014000
 800b5c0:	40014800 	.word	0x40014800

0800b5c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5c6:	6a03      	ldr	r3, [r0, #32]
 800b5c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d2:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5d4:	4a14      	ldr	r2, [pc, #80]	; (800b628 <TIM_OC4_SetConfig+0x64>)
 800b5d6:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5d8:	680d      	ldr	r5, [r1, #0]
 800b5da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5e2:	688d      	ldr	r5, [r1, #8]
 800b5e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5e8:	4e10      	ldr	r6, [pc, #64]	; (800b62c <TIM_OC4_SetConfig+0x68>)
 800b5ea:	4d11      	ldr	r5, [pc, #68]	; (800b630 <TIM_OC4_SetConfig+0x6c>)
 800b5ec:	42a8      	cmp	r0, r5
 800b5ee:	bf18      	it	ne
 800b5f0:	42b0      	cmpne	r0, r6
 800b5f2:	d00d      	beq.n	800b610 <TIM_OC4_SetConfig+0x4c>
 800b5f4:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800b5f8:	42a8      	cmp	r0, r5
 800b5fa:	bf14      	ite	ne
 800b5fc:	2500      	movne	r5, #0
 800b5fe:	2501      	moveq	r5, #1
 800b600:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800b604:	42b0      	cmp	r0, r6
 800b606:	d003      	beq.n	800b610 <TIM_OC4_SetConfig+0x4c>
 800b608:	b915      	cbnz	r5, 800b610 <TIM_OC4_SetConfig+0x4c>
 800b60a:	4d0a      	ldr	r5, [pc, #40]	; (800b634 <TIM_OC4_SetConfig+0x70>)
 800b60c:	42a8      	cmp	r0, r5
 800b60e:	d104      	bne.n	800b61a <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b610:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b614:	694d      	ldr	r5, [r1, #20]
 800b616:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b61c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b61e:	684a      	ldr	r2, [r1, #4]
 800b620:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b622:	6203      	str	r3, [r0, #32]
}
 800b624:	bc70      	pop	{r4, r5, r6}
 800b626:	4770      	bx	lr
 800b628:	feff8cff 	.word	0xfeff8cff
 800b62c:	40010000 	.word	0x40010000
 800b630:	40010400 	.word	0x40010400
 800b634:	40014800 	.word	0x40014800

0800b638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b638:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b63a:	6a03      	ldr	r3, [r0, #32]
 800b63c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b640:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b642:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b644:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b646:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b648:	4c14      	ldr	r4, [pc, #80]	; (800b69c <TIM_OC5_SetConfig+0x64>)
 800b64a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b64c:	680d      	ldr	r5, [r1, #0]
 800b64e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b650:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b654:	688d      	ldr	r5, [r1, #8]
 800b656:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b65a:	4e11      	ldr	r6, [pc, #68]	; (800b6a0 <TIM_OC5_SetConfig+0x68>)
 800b65c:	4d11      	ldr	r5, [pc, #68]	; (800b6a4 <TIM_OC5_SetConfig+0x6c>)
 800b65e:	42a8      	cmp	r0, r5
 800b660:	bf18      	it	ne
 800b662:	42b0      	cmpne	r0, r6
 800b664:	d00d      	beq.n	800b682 <TIM_OC5_SetConfig+0x4a>
 800b666:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800b66a:	42a8      	cmp	r0, r5
 800b66c:	bf14      	ite	ne
 800b66e:	2500      	movne	r5, #0
 800b670:	2501      	moveq	r5, #1
 800b672:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800b676:	42b0      	cmp	r0, r6
 800b678:	d003      	beq.n	800b682 <TIM_OC5_SetConfig+0x4a>
 800b67a:	b915      	cbnz	r5, 800b682 <TIM_OC5_SetConfig+0x4a>
 800b67c:	4d0a      	ldr	r5, [pc, #40]	; (800b6a8 <TIM_OC5_SetConfig+0x70>)
 800b67e:	42a8      	cmp	r0, r5
 800b680:	d104      	bne.n	800b68c <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b682:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b686:	694d      	ldr	r5, [r1, #20]
 800b688:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b68c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b68e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b690:	684a      	ldr	r2, [r1, #4]
 800b692:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b694:	6203      	str	r3, [r0, #32]
}
 800b696:	bc70      	pop	{r4, r5, r6}
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	fffeff8f 	.word	0xfffeff8f
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40010400 	.word	0x40010400
 800b6a8:	40014800 	.word	0x40014800

0800b6ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6ac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6ae:	6a03      	ldr	r3, [r0, #32]
 800b6b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ba:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6bc:	4a14      	ldr	r2, [pc, #80]	; (800b710 <TIM_OC6_SetConfig+0x64>)
 800b6be:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c0:	680d      	ldr	r5, [r1, #0]
 800b6c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6ca:	688d      	ldr	r5, [r1, #8]
 800b6cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d0:	4e10      	ldr	r6, [pc, #64]	; (800b714 <TIM_OC6_SetConfig+0x68>)
 800b6d2:	4d11      	ldr	r5, [pc, #68]	; (800b718 <TIM_OC6_SetConfig+0x6c>)
 800b6d4:	42a8      	cmp	r0, r5
 800b6d6:	bf18      	it	ne
 800b6d8:	42b0      	cmpne	r0, r6
 800b6da:	d00d      	beq.n	800b6f8 <TIM_OC6_SetConfig+0x4c>
 800b6dc:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800b6e0:	42a8      	cmp	r0, r5
 800b6e2:	bf14      	ite	ne
 800b6e4:	2500      	movne	r5, #0
 800b6e6:	2501      	moveq	r5, #1
 800b6e8:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800b6ec:	42b0      	cmp	r0, r6
 800b6ee:	d003      	beq.n	800b6f8 <TIM_OC6_SetConfig+0x4c>
 800b6f0:	b915      	cbnz	r5, 800b6f8 <TIM_OC6_SetConfig+0x4c>
 800b6f2:	4d0a      	ldr	r5, [pc, #40]	; (800b71c <TIM_OC6_SetConfig+0x70>)
 800b6f4:	42a8      	cmp	r0, r5
 800b6f6:	d104      	bne.n	800b702 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6f8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6fc:	694d      	ldr	r5, [r1, #20]
 800b6fe:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b702:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b704:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b706:	684a      	ldr	r2, [r1, #4]
 800b708:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b70a:	6203      	str	r3, [r0, #32]
}
 800b70c:	bc70      	pop	{r4, r5, r6}
 800b70e:	4770      	bx	lr
 800b710:	feff8fff 	.word	0xfeff8fff
 800b714:	40010000 	.word	0x40010000
 800b718:	40010400 	.word	0x40010400
 800b71c:	40014800 	.word	0x40014800

0800b720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b720:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b722:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b724:	6a04      	ldr	r4, [r0, #32]
 800b726:	f024 0401 	bic.w	r4, r4, #1
 800b72a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b72c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b72e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b732:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b736:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800b73a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b73c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b73e:	6203      	str	r3, [r0, #32]
}
 800b740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b746:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b748:	6a04      	ldr	r4, [r0, #32]
 800b74a:	f024 0410 	bic.w	r4, r4, #16
 800b74e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b750:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b752:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b754:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b758:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b75c:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b760:	031b      	lsls	r3, r3, #12
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b768:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b76c:	0109      	lsls	r1, r1, #4
 800b76e:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800b772:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b774:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800b776:	6201      	str	r1, [r0, #32]
}
 800b778:	bc30      	pop	{r4, r5}
 800b77a:	4770      	bx	lr

0800b77c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b77c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b77e:	6a04      	ldr	r4, [r0, #32]
 800b780:	f024 0410 	bic.w	r4, r4, #16
 800b784:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b786:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b788:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b78a:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b78e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800b796:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b79a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b79c:	6203      	str	r3, [r0, #32]
}
 800b79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7a4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7a6:	6a04      	ldr	r4, [r0, #32]
 800b7a8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800b7ac:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b7ae:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800b7b0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b7b2:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800b7b6:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b7ba:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b7c6:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b7ca:	0209      	lsls	r1, r1, #8
 800b7cc:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800b7d0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b7d2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800b7d4:	6201      	str	r1, [r0, #32]
}
 800b7d6:	bc30      	pop	{r4, r5}
 800b7d8:	4770      	bx	lr

0800b7da <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7da:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7dc:	6a04      	ldr	r4, [r0, #32]
 800b7de:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800b7e2:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b7e4:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800b7e6:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b7e8:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b7ec:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b7f0:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b7f4:	031b      	lsls	r3, r3, #12
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b7fc:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b800:	0309      	lsls	r1, r1, #12
 800b802:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 800b806:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b808:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800b80a:	6201      	str	r1, [r0, #32]
}
 800b80c:	bc30      	pop	{r4, r5}
 800b80e:	4770      	bx	lr

0800b810 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b810:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b812:	4b03      	ldr	r3, [pc, #12]	; (800b820 <TIM_ITRx_SetConfig+0x10>)
 800b814:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b816:	430b      	orrs	r3, r1
 800b818:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b81c:	6083      	str	r3, [r0, #8]
}
 800b81e:	4770      	bx	lr
 800b820:	ffcfff8f 	.word	0xffcfff8f
}
 800b824:	4770      	bx	lr
}
 800b826:	4770      	bx	lr

0800b828 <HAL_TIM_Base_DeInit>:
{
 800b828:	b510      	push	{r4, lr}
 800b82a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b82c:	2302      	movs	r3, #2
 800b82e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800b832:	6803      	ldr	r3, [r0, #0]
 800b834:	6a19      	ldr	r1, [r3, #32]
 800b836:	f241 1211 	movw	r2, #4369	; 0x1111
 800b83a:	4211      	tst	r1, r2
 800b83c:	d108      	bne.n	800b850 <HAL_TIM_Base_DeInit+0x28>
 800b83e:	6a19      	ldr	r1, [r3, #32]
 800b840:	f240 4244 	movw	r2, #1092	; 0x444
 800b844:	4211      	tst	r1, r2
 800b846:	d103      	bne.n	800b850 <HAL_TIM_Base_DeInit+0x28>
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	f022 0201 	bic.w	r2, r2, #1
 800b84e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800b850:	4620      	mov	r0, r4
 800b852:	f7f5 fb9f 	bl	8000f94 <HAL_TIM_Base_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b856:	2000      	movs	r0, #0
 800b858:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b85c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800b860:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 800b864:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800b868:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 800b86c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800b870:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b874:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 800b878:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 800b87c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 800b880:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 800b884:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b888:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b88c:	bd10      	pop	{r4, pc}

0800b88e <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b88e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b01      	cmp	r3, #1
 800b896:	d135      	bne.n	800b904 <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	2302      	movs	r3, #2
 800b89a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b89e:	6803      	ldr	r3, [r0, #0]
 800b8a0:	4a1a      	ldr	r2, [pc, #104]	; (800b90c <HAL_TIM_Base_Start+0x7e>)
 800b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a6:	bf18      	it	ne
 800b8a8:	4293      	cmpne	r3, r2
 800b8aa:	d01d      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d019      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d015      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d011      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00d      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8cc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d009      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
 800b8d4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d005      	beq.n	800b8e8 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	f042 0201 	orr.w	r2, r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8e8:	6899      	ldr	r1, [r3, #8]
 800b8ea:	4a09      	ldr	r2, [pc, #36]	; (800b910 <HAL_TIM_Base_Start+0x82>)
 800b8ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ee:	2a06      	cmp	r2, #6
 800b8f0:	bf18      	it	ne
 800b8f2:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800b8f6:	d007      	beq.n	800b908 <HAL_TIM_Base_Start+0x7a>
      __HAL_TIM_ENABLE(htim);
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b900:	2000      	movs	r0, #0
 800b902:	4770      	bx	lr
    return HAL_ERROR;
 800b904:	2001      	movs	r0, #1
 800b906:	4770      	bx	lr
  return HAL_OK;
 800b908:	2000      	movs	r0, #0
}
 800b90a:	4770      	bx	lr
 800b90c:	40010000 	.word	0x40010000
 800b910:	00010007 	.word	0x00010007

0800b914 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 800b914:	6803      	ldr	r3, [r0, #0]
 800b916:	6a19      	ldr	r1, [r3, #32]
 800b918:	f241 1211 	movw	r2, #4369	; 0x1111
 800b91c:	4211      	tst	r1, r2
 800b91e:	d108      	bne.n	800b932 <HAL_TIM_Base_Stop+0x1e>
 800b920:	6a19      	ldr	r1, [r3, #32]
 800b922:	f240 4244 	movw	r2, #1092	; 0x444
 800b926:	4211      	tst	r1, r2
 800b928:	d103      	bne.n	800b932 <HAL_TIM_Base_Stop+0x1e>
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	f022 0201 	bic.w	r2, r2, #1
 800b930:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b932:	2301      	movs	r3, #1
 800b934:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b938:	2000      	movs	r0, #0
 800b93a:	4770      	bx	lr

0800b93c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b93c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b01      	cmp	r3, #1
 800b944:	d13a      	bne.n	800b9bc <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800b946:	2302      	movs	r3, #2
 800b948:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b94c:	6802      	ldr	r2, [r0, #0]
 800b94e:	68d3      	ldr	r3, [r2, #12]
 800b950:	f043 0301 	orr.w	r3, r3, #1
 800b954:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b956:	6803      	ldr	r3, [r0, #0]
 800b958:	4a1a      	ldr	r2, [pc, #104]	; (800b9c4 <HAL_TIM_Base_Start_IT+0x88>)
 800b95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95e:	bf18      	it	ne
 800b960:	4293      	cmpne	r3, r2
 800b962:	d01d      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b964:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b968:	4293      	cmp	r3, r2
 800b96a:	d019      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b96c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b970:	4293      	cmp	r3, r2
 800b972:	d015      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b978:	4293      	cmp	r3, r2
 800b97a:	d011      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b97c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b980:	4293      	cmp	r3, r2
 800b982:	d00d      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b984:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800b988:	4293      	cmp	r3, r2
 800b98a:	d009      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
 800b98c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b990:	4293      	cmp	r3, r2
 800b992:	d005      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	f042 0201 	orr.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b99c:	2000      	movs	r0, #0
 800b99e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9a0:	6899      	ldr	r1, [r3, #8]
 800b9a2:	4a09      	ldr	r2, [pc, #36]	; (800b9c8 <HAL_TIM_Base_Start_IT+0x8c>)
 800b9a4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9a6:	2a06      	cmp	r2, #6
 800b9a8:	bf18      	it	ne
 800b9aa:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800b9ae:	d007      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	f042 0201 	orr.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	4770      	bx	lr
    return HAL_ERROR;
 800b9bc:	2001      	movs	r0, #1
 800b9be:	4770      	bx	lr
  return HAL_OK;
 800b9c0:	2000      	movs	r0, #0
}
 800b9c2:	4770      	bx	lr
 800b9c4:	40010000 	.word	0x40010000
 800b9c8:	00010007 	.word	0x00010007

0800b9cc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b9cc:	6802      	ldr	r2, [r0, #0]
 800b9ce:	68d3      	ldr	r3, [r2, #12]
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800b9d6:	6803      	ldr	r3, [r0, #0]
 800b9d8:	6a19      	ldr	r1, [r3, #32]
 800b9da:	f241 1211 	movw	r2, #4369	; 0x1111
 800b9de:	4211      	tst	r1, r2
 800b9e0:	d108      	bne.n	800b9f4 <HAL_TIM_Base_Stop_IT+0x28>
 800b9e2:	6a19      	ldr	r1, [r3, #32]
 800b9e4:	f240 4244 	movw	r2, #1092	; 0x444
 800b9e8:	4211      	tst	r1, r2
 800b9ea:	d103      	bne.n	800b9f4 <HAL_TIM_Base_Stop_IT+0x28>
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	f022 0201 	bic.w	r2, r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	4770      	bx	lr

0800b9fe <HAL_TIM_Base_Start_DMA>:
{
 800b9fe:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 800ba00:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba04:	b2e4      	uxtb	r4, r4
 800ba06:	2c02      	cmp	r4, #2
 800ba08:	d058      	beq.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
 800ba0a:	4605      	mov	r5, r0
  else if (htim->State == HAL_TIM_STATE_READY)
 800ba0c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800ba10:	b2e4      	uxtb	r4, r4
 800ba12:	2c01      	cmp	r4, #1
 800ba14:	d151      	bne.n	800baba <HAL_TIM_Base_Start_DMA+0xbc>
    if ((pData == NULL) || (Length == 0U))
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	bf18      	it	ne
 800ba1a:	2900      	cmpne	r1, #0
 800ba1c:	d04e      	beq.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
      htim->State = HAL_TIM_STATE_BUSY;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800ba24:	6a03      	ldr	r3, [r0, #32]
 800ba26:	4827      	ldr	r0, [pc, #156]	; (800bac4 <HAL_TIM_Base_Start_DMA+0xc6>)
 800ba28:	63d8      	str	r0, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800ba2a:	6a2b      	ldr	r3, [r5, #32]
 800ba2c:	4826      	ldr	r0, [pc, #152]	; (800bac8 <HAL_TIM_Base_Start_DMA+0xca>)
 800ba2e:	6418      	str	r0, [r3, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800ba30:	6a2b      	ldr	r3, [r5, #32]
 800ba32:	4826      	ldr	r0, [pc, #152]	; (800bacc <HAL_TIM_Base_Start_DMA+0xce>)
 800ba34:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 800ba36:	6828      	ldr	r0, [r5, #0]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 800ba3e:	6a28      	ldr	r0, [r5, #32]
 800ba40:	f7fa fa40 	bl	8005ec4 <HAL_DMA_Start_IT>
 800ba44:	4601      	mov	r1, r0
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d138      	bne.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800ba4a:	682a      	ldr	r2, [r5, #0]
 800ba4c:	68d3      	ldr	r3, [r2, #12]
 800ba4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba52:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <HAL_TIM_Base_Start_DMA+0xd2>)
 800ba58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba5c:	bf18      	it	ne
 800ba5e:	4293      	cmpne	r3, r2
 800ba60:	d01d      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba62:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d019      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d015      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d011      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d00d      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba82:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d009      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
 800ba8a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d005      	beq.n	800ba9e <HAL_TIM_Base_Start_DMA+0xa0>
    __HAL_TIM_ENABLE(htim);
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	f042 0201 	orr.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	e00e      	b.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba9e:	6898      	ldr	r0, [r3, #8]
 800baa0:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <HAL_TIM_Base_Start_DMA+0xd6>)
 800baa2:	4002      	ands	r2, r0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa4:	2a06      	cmp	r2, #6
 800baa6:	bf18      	it	ne
 800baa8:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800baac:	d008      	beq.n	800bac0 <HAL_TIM_Base_Start_DMA+0xc2>
      __HAL_TIM_ENABLE(htim);
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	f042 0201 	orr.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bab6:	460c      	mov	r4, r1
 800bab8:	e000      	b.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
    return HAL_ERROR;
 800baba:	2401      	movs	r4, #1
}
 800babc:	4620      	mov	r0, r4
 800babe:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800bac0:	460c      	mov	r4, r1
 800bac2:	e7fb      	b.n	800babc <HAL_TIM_Base_Start_DMA+0xbe>
 800bac4:	0800c1f9 	.word	0x0800c1f9
 800bac8:	0800c211 	.word	0x0800c211
 800bacc:	0800c551 	.word	0x0800c551
 800bad0:	40010000 	.word	0x40010000
 800bad4:	00010007 	.word	0x00010007

0800bad8 <HAL_TIM_Base_Stop_DMA>:
{
 800bad8:	b510      	push	{r4, lr}
 800bada:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 800badc:	6802      	ldr	r2, [r0, #0]
 800bade:	68d3      	ldr	r3, [r2, #12]
 800bae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bae4:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bae6:	6a00      	ldr	r0, [r0, #32]
 800bae8:	f7fa fcd8 	bl	800649c <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	6a19      	ldr	r1, [r3, #32]
 800baf0:	f241 1211 	movw	r2, #4369	; 0x1111
 800baf4:	4211      	tst	r1, r2
 800baf6:	d108      	bne.n	800bb0a <HAL_TIM_Base_Stop_DMA+0x32>
 800baf8:	6a19      	ldr	r1, [r3, #32]
 800bafa:	f240 4244 	movw	r2, #1092	; 0x444
 800bafe:	4211      	tst	r1, r2
 800bb00:	d103      	bne.n	800bb0a <HAL_TIM_Base_Stop_DMA+0x32>
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	f022 0201 	bic.w	r2, r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bb10:	2000      	movs	r0, #0
 800bb12:	bd10      	pop	{r4, pc}

0800bb14 <HAL_TIM_OC_MspInit>:
}
 800bb14:	4770      	bx	lr

0800bb16 <HAL_TIM_OC_MspDeInit>:
}
 800bb16:	4770      	bx	lr

0800bb18 <HAL_TIM_OC_DeInit>:
{
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bb22:	6803      	ldr	r3, [r0, #0]
 800bb24:	6a19      	ldr	r1, [r3, #32]
 800bb26:	f241 1211 	movw	r2, #4369	; 0x1111
 800bb2a:	4211      	tst	r1, r2
 800bb2c:	d108      	bne.n	800bb40 <HAL_TIM_OC_DeInit+0x28>
 800bb2e:	6a19      	ldr	r1, [r3, #32]
 800bb30:	f240 4244 	movw	r2, #1092	; 0x444
 800bb34:	4211      	tst	r1, r2
 800bb36:	d103      	bne.n	800bb40 <HAL_TIM_OC_DeInit+0x28>
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	f022 0201 	bic.w	r2, r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7ff ffe8 	bl	800bb16 <HAL_TIM_OC_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bb46:	2000      	movs	r0, #0
 800bb48:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bb4c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800bb50:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 800bb54:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800bb58:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 800bb5c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800bb60:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bb64:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 800bb68:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 800bb6c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 800bb70:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 800bb74:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bb78:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <HAL_TIM_PWM_MspInit>:
}
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_TIM_PWM_MspDeInit>:
}
 800bb80:	4770      	bx	lr

0800bb82 <HAL_TIM_PWM_DeInit>:
{
 800bb82:	b510      	push	{r4, lr}
 800bb84:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bb86:	2302      	movs	r3, #2
 800bb88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bb8c:	6803      	ldr	r3, [r0, #0]
 800bb8e:	6a19      	ldr	r1, [r3, #32]
 800bb90:	f241 1211 	movw	r2, #4369	; 0x1111
 800bb94:	4211      	tst	r1, r2
 800bb96:	d108      	bne.n	800bbaa <HAL_TIM_PWM_DeInit+0x28>
 800bb98:	6a19      	ldr	r1, [r3, #32]
 800bb9a:	f240 4244 	movw	r2, #1092	; 0x444
 800bb9e:	4211      	tst	r1, r2
 800bba0:	d103      	bne.n	800bbaa <HAL_TIM_PWM_DeInit+0x28>
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	f022 0201 	bic.w	r2, r2, #1
 800bba8:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff ffe8 	bl	800bb80 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bbb6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800bbba:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 800bbbe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800bbc2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 800bbc6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800bbca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bbce:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 800bbd2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 800bbd6:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 800bbda:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 800bbde:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bbe2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bbe6:	bd10      	pop	{r4, pc}

0800bbe8 <HAL_TIM_IC_MspInit>:
}
 800bbe8:	4770      	bx	lr

0800bbea <HAL_TIM_IC_MspDeInit>:
}
 800bbea:	4770      	bx	lr

0800bbec <HAL_TIM_IC_DeInit>:
{
 800bbec:	b510      	push	{r4, lr}
 800bbee:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bbf6:	6803      	ldr	r3, [r0, #0]
 800bbf8:	6a19      	ldr	r1, [r3, #32]
 800bbfa:	f241 1211 	movw	r2, #4369	; 0x1111
 800bbfe:	4211      	tst	r1, r2
 800bc00:	d108      	bne.n	800bc14 <HAL_TIM_IC_DeInit+0x28>
 800bc02:	6a19      	ldr	r1, [r3, #32]
 800bc04:	f240 4244 	movw	r2, #1092	; 0x444
 800bc08:	4211      	tst	r1, r2
 800bc0a:	d103      	bne.n	800bc14 <HAL_TIM_IC_DeInit+0x28>
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	f022 0201 	bic.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7ff ffe8 	bl	800bbea <HAL_TIM_IC_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bc20:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800bc24:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 800bc28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800bc2c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 800bc30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800bc34:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800bc38:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 800bc3c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 800bc40:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 800bc44:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_RESET;
 800bc48:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bc4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <HAL_TIM_OnePulse_MspInit>:
}
 800bc52:	4770      	bx	lr

0800bc54 <HAL_TIM_OnePulse_MspDeInit>:
}
 800bc54:	4770      	bx	lr

0800bc56 <HAL_TIM_OnePulse_DeInit>:
{
 800bc56:	b510      	push	{r4, lr}
 800bc58:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bc60:	6803      	ldr	r3, [r0, #0]
 800bc62:	6a19      	ldr	r1, [r3, #32]
 800bc64:	f241 1211 	movw	r2, #4369	; 0x1111
 800bc68:	4211      	tst	r1, r2
 800bc6a:	d108      	bne.n	800bc7e <HAL_TIM_OnePulse_DeInit+0x28>
 800bc6c:	6a19      	ldr	r1, [r3, #32]
 800bc6e:	f240 4244 	movw	r2, #1092	; 0x444
 800bc72:	4211      	tst	r1, r2
 800bc74:	d103      	bne.n	800bc7e <HAL_TIM_OnePulse_DeInit+0x28>
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	f022 0201 	bic.w	r2, r2, #1
 800bc7c:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f7ff ffe8 	bl	800bc54 <HAL_TIM_OnePulse_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bc84:	2000      	movs	r0, #0
 800bc86:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bc8a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bc8e:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bc92:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bc96:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_RESET;
 800bc9a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bc9e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <HAL_TIM_Encoder_MspInit>:
}
 800bca4:	4770      	bx	lr

0800bca6 <HAL_TIM_Encoder_MspDeInit>:
}
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIM_Encoder_DeInit>:
{
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bcac:	2302      	movs	r3, #2
 800bcae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800bcb2:	6803      	ldr	r3, [r0, #0]
 800bcb4:	6a19      	ldr	r1, [r3, #32]
 800bcb6:	f241 1211 	movw	r2, #4369	; 0x1111
 800bcba:	4211      	tst	r1, r2
 800bcbc:	d108      	bne.n	800bcd0 <HAL_TIM_Encoder_DeInit+0x28>
 800bcbe:	6a19      	ldr	r1, [r3, #32]
 800bcc0:	f240 4244 	movw	r2, #1092	; 0x444
 800bcc4:	4211      	tst	r1, r2
 800bcc6:	d103      	bne.n	800bcd0 <HAL_TIM_Encoder_DeInit+0x28>
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	f022 0201 	bic.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f7ff ffe8 	bl	800bca6 <HAL_TIM_Encoder_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bcdc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bce0:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bce4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bce8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_RESET;
 800bcec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bcf0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bcf4:	bd10      	pop	{r4, pc}

0800bcf6 <HAL_TIM_DMABurst_MultiWriteStart>:
{
 800bcf6:	b570      	push	{r4, r5, r6, lr}
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	4614      	mov	r4, r2
  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 800bcfc:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 800bd00:	b2d0      	uxtb	r0, r2
 800bd02:	2802      	cmp	r0, #2
 800bd04:	d04c      	beq.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
 800bd06:	460e      	mov	r6, r1
 800bd08:	4619      	mov	r1, r3
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 800bd0a:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800bd0e:	b2d0      	uxtb	r0, r2
 800bd10:	2801      	cmp	r0, #1
 800bd12:	d01c      	beq.n	800bd4e <HAL_TIM_DMABurst_MultiWriteStart+0x58>
  switch (BurstRequestSrc)
 800bd14:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800bd18:	f000 8089 	beq.w	800be2e <HAL_TIM_DMABurst_MultiWriteStart+0x138>
 800bd1c:	d843      	bhi.n	800bda6 <HAL_TIM_DMABurst_MultiWriteStart+0xb0>
 800bd1e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800bd22:	d071      	beq.n	800be08 <HAL_TIM_DMABurst_MultiWriteStart+0x112>
 800bd24:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bd28:	d11d      	bne.n	800bd66 <HAL_TIM_DMABurst_MultiWriteStart+0x70>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bd2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bd2c:	4a54      	ldr	r2, [pc, #336]	; (800be80 <HAL_TIM_DMABurst_MultiWriteStart+0x18a>)
 800bd2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bd30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bd32:	4a54      	ldr	r2, [pc, #336]	; (800be84 <HAL_TIM_DMABurst_MultiWriteStart+0x18e>)
 800bd34:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bd36:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bd38:	4a53      	ldr	r2, [pc, #332]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800bd3a:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800bd3c:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800bd3e:	9b05      	ldr	r3, [sp, #20]
 800bd40:	324c      	adds	r2, #76	; 0x4c
 800bd42:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800bd44:	f7fa f8be 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bd48:	b308      	cbz	r0, 800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	e028      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bd4e:	9a04      	ldr	r2, [sp, #16]
 800bd50:	fab3 f383 	clz	r3, r3
 800bd54:	095b      	lsrs	r3, r3, #5
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	bf08      	it	eq
 800bd5a:	2300      	moveq	r3, #0
 800bd5c:	bb03      	cbnz	r3, 800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 800bd5e:	2302      	movs	r3, #2
 800bd60:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 800bd64:	e7d6      	b.n	800bd14 <HAL_TIM_DMABurst_MultiWriteStart+0x1e>
  switch (BurstRequestSrc)
 800bd66:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800bd6a:	d11a      	bne.n	800bda2 <HAL_TIM_DMABurst_MultiWriteStart+0xac>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bd6c:	6a2b      	ldr	r3, [r5, #32]
 800bd6e:	4a47      	ldr	r2, [pc, #284]	; (800be8c <HAL_TIM_DMABurst_MultiWriteStart+0x196>)
 800bd70:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800bd72:	6a2b      	ldr	r3, [r5, #32]
 800bd74:	4a46      	ldr	r2, [pc, #280]	; (800be90 <HAL_TIM_DMABurst_MultiWriteStart+0x19a>)
 800bd76:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bd78:	6a2b      	ldr	r3, [r5, #32]
 800bd7a:	4a43      	ldr	r2, [pc, #268]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800bd7c:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800bd7e:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 800bd80:	9b05      	ldr	r3, [sp, #20]
 800bd82:	324c      	adds	r2, #76	; 0x4c
 800bd84:	6a28      	ldr	r0, [r5, #32]
 800bd86:	f7fa f89d 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d175      	bne.n	800be7a <HAL_TIM_DMABurst_MultiWriteStart+0x184>
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bd8e:	682b      	ldr	r3, [r5, #0]
 800bd90:	9a04      	ldr	r2, [sp, #16]
 800bd92:	4316      	orrs	r6, r2
 800bd94:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bd96:	682b      	ldr	r3, [r5, #0]
 800bd98:	68da      	ldr	r2, [r3, #12]
 800bd9a:	4314      	orrs	r4, r2
 800bd9c:	60dc      	str	r4, [r3, #12]
 800bd9e:	2000      	movs	r0, #0
}
 800bda0:	bd70      	pop	{r4, r5, r6, pc}
  switch (BurstRequestSrc)
 800bda2:	2001      	movs	r0, #1
 800bda4:	e7fc      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
 800bda6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800bdaa:	d053      	beq.n	800be54 <HAL_TIM_DMABurst_MultiWriteStart+0x15e>
 800bdac:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800bdb0:	d112      	bne.n	800bdd8 <HAL_TIM_DMABurst_MultiWriteStart+0xe2>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bdb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdb4:	4a37      	ldr	r2, [pc, #220]	; (800be94 <HAL_TIM_DMABurst_MultiWriteStart+0x19e>)
 800bdb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800bdb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdba:	4a37      	ldr	r2, [pc, #220]	; (800be98 <HAL_TIM_DMABurst_MultiWriteStart+0x1a2>)
 800bdbc:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800bdbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdc0:	4a31      	ldr	r2, [pc, #196]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800bdc2:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800bdc4:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800bdc6:	9b05      	ldr	r3, [sp, #20]
 800bdc8:	324c      	adds	r2, #76	; 0x4c
 800bdca:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800bdcc:	f7fa f87a 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0dc      	beq.n	800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	e7e3      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
  switch (BurstRequestSrc)
 800bdd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800bddc:	d112      	bne.n	800be04 <HAL_TIM_DMABurst_MultiWriteStart+0x10e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bdde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bde0:	4a27      	ldr	r2, [pc, #156]	; (800be80 <HAL_TIM_DMABurst_MultiWriteStart+0x18a>)
 800bde2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bde4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bde6:	4a27      	ldr	r2, [pc, #156]	; (800be84 <HAL_TIM_DMABurst_MultiWriteStart+0x18e>)
 800bde8:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bdea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bdec:	4a26      	ldr	r2, [pc, #152]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800bdee:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800bdf0:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800bdf2:	9b05      	ldr	r3, [sp, #20]
 800bdf4:	324c      	adds	r2, #76	; 0x4c
 800bdf6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800bdf8:	f7fa f864 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d0c6      	beq.n	800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800be00:	2001      	movs	r0, #1
 800be02:	e7cd      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
  switch (BurstRequestSrc)
 800be04:	2001      	movs	r0, #1
 800be06:	e7cb      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be0a:	4a1d      	ldr	r2, [pc, #116]	; (800be80 <HAL_TIM_DMABurst_MultiWriteStart+0x18a>)
 800be0c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800be0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be10:	4a1c      	ldr	r2, [pc, #112]	; (800be84 <HAL_TIM_DMABurst_MultiWriteStart+0x18e>)
 800be12:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800be14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be16:	4a1c      	ldr	r2, [pc, #112]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800be18:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800be1a:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800be1c:	9b05      	ldr	r3, [sp, #20]
 800be1e:	324c      	adds	r2, #76	; 0x4c
 800be20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800be22:	f7fa f84f 	bl	8005ec4 <HAL_DMA_Start_IT>
 800be26:	2800      	cmp	r0, #0
 800be28:	d0b1      	beq.n	800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800be2a:	2001      	movs	r0, #1
 800be2c:	e7b8      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800be30:	4a13      	ldr	r2, [pc, #76]	; (800be80 <HAL_TIM_DMABurst_MultiWriteStart+0x18a>)
 800be32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800be34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800be36:	4a13      	ldr	r2, [pc, #76]	; (800be84 <HAL_TIM_DMABurst_MultiWriteStart+0x18e>)
 800be38:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800be3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800be3c:	4a12      	ldr	r2, [pc, #72]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800be3e:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800be40:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800be42:	9b05      	ldr	r3, [sp, #20]
 800be44:	324c      	adds	r2, #76	; 0x4c
 800be46:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800be48:	f7fa f83c 	bl	8005ec4 <HAL_DMA_Start_IT>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d09e      	beq.n	800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800be50:	2001      	movs	r0, #1
 800be52:	e7a5      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800be54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800be56:	4a11      	ldr	r2, [pc, #68]	; (800be9c <HAL_TIM_DMABurst_MultiWriteStart+0x1a6>)
 800be58:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800be5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800be5c:	4a10      	ldr	r2, [pc, #64]	; (800bea0 <HAL_TIM_DMABurst_MultiWriteStart+0x1aa>)
 800be5e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800be60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <HAL_TIM_DMABurst_MultiWriteStart+0x192>)
 800be64:	64da      	str	r2, [r3, #76]	; 0x4c
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800be66:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800be68:	9b05      	ldr	r3, [sp, #20]
 800be6a:	324c      	adds	r2, #76	; 0x4c
 800be6c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800be6e:	f7fa f829 	bl	8005ec4 <HAL_DMA_Start_IT>
 800be72:	2800      	cmp	r0, #0
 800be74:	d08b      	beq.n	800bd8e <HAL_TIM_DMABurst_MultiWriteStart+0x98>
        return HAL_ERROR;
 800be76:	2001      	movs	r0, #1
 800be78:	e792      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
        return HAL_ERROR;
 800be7a:	2001      	movs	r0, #1
 800be7c:	e790      	b.n	800bda0 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
 800be7e:	bf00      	nop
 800be80:	0800c2e1 	.word	0x0800c2e1
 800be84:	0800c353 	.word	0x0800c353
 800be88:	0800c551 	.word	0x0800c551
 800be8c:	0800c1f9 	.word	0x0800c1f9
 800be90:	0800c211 	.word	0x0800c211
 800be94:	0800c52d 	.word	0x0800c52d
 800be98:	0800c545 	.word	0x0800c545
 800be9c:	08010f9b 	.word	0x08010f9b
 800bea0:	08010fad 	.word	0x08010fad

0800bea4 <HAL_TIM_DMABurst_WriteStart>:
{
 800bea4:	b530      	push	{r4, r5, lr}
 800bea6:	b083      	sub	sp, #12
 800bea8:	9d06      	ldr	r5, [sp, #24]
                                            ((BurstLength) >> 8U) + 1U);
 800beaa:	0a2c      	lsrs	r4, r5, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 800beac:	3401      	adds	r4, #1
 800beae:	9401      	str	r4, [sp, #4]
 800beb0:	9500      	str	r5, [sp, #0]
 800beb2:	f7ff ff20 	bl	800bcf6 <HAL_TIM_DMABurst_MultiWriteStart>
}
 800beb6:	b003      	add	sp, #12
 800beb8:	bd30      	pop	{r4, r5, pc}

0800beba <HAL_TIM_DMABurst_WriteStop>:
{
 800beba:	b538      	push	{r3, r4, r5, lr}
 800bebc:	4605      	mov	r5, r0
 800bebe:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800bec0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bec4:	d033      	beq.n	800bf2e <HAL_TIM_DMABurst_WriteStop+0x74>
 800bec6:	d81b      	bhi.n	800bf00 <HAL_TIM_DMABurst_WriteStop+0x46>
 800bec8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800becc:	d02b      	beq.n	800bf26 <HAL_TIM_DMABurst_WriteStop+0x6c>
 800bece:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bed2:	d103      	bne.n	800bedc <HAL_TIM_DMABurst_WriteStop+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bed4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bed6:	f7fa fae1 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800beda:	e005      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 800bedc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bee0:	d10c      	bne.n	800befc <HAL_TIM_DMABurst_WriteStop+0x42>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800bee2:	6a00      	ldr	r0, [r0, #32]
 800bee4:	f7fa fada 	bl	800649c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	68d9      	ldr	r1, [r3, #12]
 800beec:	ea21 0404 	bic.w	r4, r1, r4
 800bef0:	60dc      	str	r4, [r3, #12]
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 800bef8:	2000      	movs	r0, #0
}
 800befa:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800befc:	2001      	movs	r0, #1
 800befe:	e7fc      	b.n	800befa <HAL_TIM_DMABurst_WriteStop+0x40>
 800bf00:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bf04:	d017      	beq.n	800bf36 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800bf06:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bf0a:	d103      	bne.n	800bf14 <HAL_TIM_DMABurst_WriteStop+0x5a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800bf0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bf0e:	f7fa fac5 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800bf12:	e7e9      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 800bf14:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bf18:	d103      	bne.n	800bf22 <HAL_TIM_DMABurst_WriteStop+0x68>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800bf1a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bf1c:	f7fa fabe 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800bf20:	e7e2      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 800bf22:	2001      	movs	r0, #1
 800bf24:	e7e9      	b.n	800befa <HAL_TIM_DMABurst_WriteStop+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800bf26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bf28:	f7fa fab8 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800bf2c:	e7dc      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bf2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bf30:	f7fa fab4 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800bf34:	e7d8      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800bf36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bf38:	f7fa fab0 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800bf3c:	e7d4      	b.n	800bee8 <HAL_TIM_DMABurst_WriteStop+0x2e>

0800bf3e <HAL_TIM_DMABurst_MultiReadStart>:
{
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	4605      	mov	r5, r0
  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 800bf42:	f890 c048 	ldrb.w	ip, [r0, #72]	; 0x48
 800bf46:	fa5f f08c 	uxtb.w	r0, ip
 800bf4a:	2802      	cmp	r0, #2
 800bf4c:	d04e      	beq.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
 800bf4e:	460e      	mov	r6, r1
 800bf50:	4614      	mov	r4, r2
 800bf52:	461a      	mov	r2, r3
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 800bf54:	f895 c048 	ldrb.w	ip, [r5, #72]	; 0x48
 800bf58:	fa5f f08c 	uxtb.w	r0, ip
 800bf5c:	2801      	cmp	r0, #1
 800bf5e:	d01c      	beq.n	800bf9a <HAL_TIM_DMABurst_MultiReadStart+0x5c>
  switch (BurstRequestSrc)
 800bf60:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800bf64:	f000 8089 	beq.w	800c07a <HAL_TIM_DMABurst_MultiReadStart+0x13c>
 800bf68:	d843      	bhi.n	800bff2 <HAL_TIM_DMABurst_MultiReadStart+0xb4>
 800bf6a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800bf6e:	d071      	beq.n	800c054 <HAL_TIM_DMABurst_MultiReadStart+0x116>
 800bf70:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bf74:	d11d      	bne.n	800bfb2 <HAL_TIM_DMABurst_MultiReadStart+0x74>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800bf76:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf78:	4954      	ldr	r1, [pc, #336]	; (800c0cc <HAL_TIM_DMABurst_MultiReadStart+0x18e>)
 800bf7a:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bf7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf7e:	4954      	ldr	r1, [pc, #336]	; (800c0d0 <HAL_TIM_DMABurst_MultiReadStart+0x192>)
 800bf80:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bf82:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf84:	4953      	ldr	r1, [pc, #332]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800bf86:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800bf88:	6829      	ldr	r1, [r5, #0]
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	314c      	adds	r1, #76	; 0x4c
 800bf8e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800bf90:	f7f9 ff98 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bf94:	b308      	cbz	r0, 800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800bf96:	2001      	movs	r0, #1
 800bf98:	e028      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800bf9a:	9904      	ldr	r1, [sp, #16]
 800bf9c:	fab3 f383 	clz	r3, r3
 800bfa0:	095b      	lsrs	r3, r3, #5
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	bf08      	it	eq
 800bfa6:	2300      	moveq	r3, #0
 800bfa8:	bb03      	cbnz	r3, 800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 800bfaa:	2302      	movs	r3, #2
 800bfac:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 800bfb0:	e7d6      	b.n	800bf60 <HAL_TIM_DMABurst_MultiReadStart+0x22>
  switch (BurstRequestSrc)
 800bfb2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800bfb6:	d11a      	bne.n	800bfee <HAL_TIM_DMABurst_MultiReadStart+0xb0>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800bfb8:	6a2b      	ldr	r3, [r5, #32]
 800bfba:	4947      	ldr	r1, [pc, #284]	; (800c0d8 <HAL_TIM_DMABurst_MultiReadStart+0x19a>)
 800bfbc:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800bfbe:	6a2b      	ldr	r3, [r5, #32]
 800bfc0:	4946      	ldr	r1, [pc, #280]	; (800c0dc <HAL_TIM_DMABurst_MultiReadStart+0x19e>)
 800bfc2:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800bfc4:	6a2b      	ldr	r3, [r5, #32]
 800bfc6:	4943      	ldr	r1, [pc, #268]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800bfc8:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800bfca:	6829      	ldr	r1, [r5, #0]
 800bfcc:	9b05      	ldr	r3, [sp, #20]
 800bfce:	314c      	adds	r1, #76	; 0x4c
 800bfd0:	6a28      	ldr	r0, [r5, #32]
 800bfd2:	f7f9 ff77 	bl	8005ec4 <HAL_DMA_Start_IT>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d175      	bne.n	800c0c6 <HAL_TIM_DMABurst_MultiReadStart+0x188>
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800bfda:	682b      	ldr	r3, [r5, #0]
 800bfdc:	9a04      	ldr	r2, [sp, #16]
 800bfde:	4316      	orrs	r6, r2
 800bfe0:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800bfe2:	682b      	ldr	r3, [r5, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	4314      	orrs	r4, r2
 800bfe8:	60dc      	str	r4, [r3, #12]
 800bfea:	2000      	movs	r0, #0
}
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
  switch (BurstRequestSrc)
 800bfee:	2001      	movs	r0, #1
 800bff0:	e7fc      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
 800bff2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800bff6:	d053      	beq.n	800c0a0 <HAL_TIM_DMABurst_MultiReadStart+0x162>
 800bff8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800bffc:	d112      	bne.n	800c024 <HAL_TIM_DMABurst_MultiReadStart+0xe6>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800bffe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c000:	4937      	ldr	r1, [pc, #220]	; (800c0e0 <HAL_TIM_DMABurst_MultiReadStart+0x1a2>)
 800c002:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800c004:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c006:	4937      	ldr	r1, [pc, #220]	; (800c0e4 <HAL_TIM_DMABurst_MultiReadStart+0x1a6>)
 800c008:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800c00a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c00c:	4931      	ldr	r1, [pc, #196]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800c00e:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800c010:	6829      	ldr	r1, [r5, #0]
 800c012:	9b05      	ldr	r3, [sp, #20]
 800c014:	314c      	adds	r1, #76	; 0x4c
 800c016:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800c018:	f7f9 ff54 	bl	8005ec4 <HAL_DMA_Start_IT>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0dc      	beq.n	800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800c020:	2001      	movs	r0, #1
 800c022:	e7e3      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
  switch (BurstRequestSrc)
 800c024:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c028:	d112      	bne.n	800c050 <HAL_TIM_DMABurst_MultiReadStart+0x112>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800c02a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c02c:	4927      	ldr	r1, [pc, #156]	; (800c0cc <HAL_TIM_DMABurst_MultiReadStart+0x18e>)
 800c02e:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c030:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c032:	4927      	ldr	r1, [pc, #156]	; (800c0d0 <HAL_TIM_DMABurst_MultiReadStart+0x192>)
 800c034:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c038:	4926      	ldr	r1, [pc, #152]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800c03a:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800c03c:	6829      	ldr	r1, [r5, #0]
 800c03e:	9b05      	ldr	r3, [sp, #20]
 800c040:	314c      	adds	r1, #76	; 0x4c
 800c042:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800c044:	f7f9 ff3e 	bl	8005ec4 <HAL_DMA_Start_IT>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d0c6      	beq.n	800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800c04c:	2001      	movs	r0, #1
 800c04e:	e7cd      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
  switch (BurstRequestSrc)
 800c050:	2001      	movs	r0, #1
 800c052:	e7cb      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800c054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c056:	491d      	ldr	r1, [pc, #116]	; (800c0cc <HAL_TIM_DMABurst_MultiReadStart+0x18e>)
 800c058:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c05a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c05c:	491c      	ldr	r1, [pc, #112]	; (800c0d0 <HAL_TIM_DMABurst_MultiReadStart+0x192>)
 800c05e:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c060:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c062:	491c      	ldr	r1, [pc, #112]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800c064:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800c066:	6829      	ldr	r1, [r5, #0]
 800c068:	9b05      	ldr	r3, [sp, #20]
 800c06a:	314c      	adds	r1, #76	; 0x4c
 800c06c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c06e:	f7f9 ff29 	bl	8005ec4 <HAL_DMA_Start_IT>
 800c072:	2800      	cmp	r0, #0
 800c074:	d0b1      	beq.n	800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800c076:	2001      	movs	r0, #1
 800c078:	e7b8      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800c07a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c07c:	4913      	ldr	r1, [pc, #76]	; (800c0cc <HAL_TIM_DMABurst_MultiReadStart+0x18e>)
 800c07e:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c080:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c082:	4913      	ldr	r1, [pc, #76]	; (800c0d0 <HAL_TIM_DMABurst_MultiReadStart+0x192>)
 800c084:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c086:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c088:	4912      	ldr	r1, [pc, #72]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800c08a:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800c08c:	6829      	ldr	r1, [r5, #0]
 800c08e:	9b05      	ldr	r3, [sp, #20]
 800c090:	314c      	adds	r1, #76	; 0x4c
 800c092:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c094:	f7f9 ff16 	bl	8005ec4 <HAL_DMA_Start_IT>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d09e      	beq.n	800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800c09c:	2001      	movs	r0, #1
 800c09e:	e7a5      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800c0a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c0a2:	4911      	ldr	r1, [pc, #68]	; (800c0e8 <HAL_TIM_DMABurst_MultiReadStart+0x1aa>)
 800c0a4:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800c0a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c0a8:	4910      	ldr	r1, [pc, #64]	; (800c0ec <HAL_TIM_DMABurst_MultiReadStart+0x1ae>)
 800c0aa:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800c0ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c0ae:	4909      	ldr	r1, [pc, #36]	; (800c0d4 <HAL_TIM_DMABurst_MultiReadStart+0x196>)
 800c0b0:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800c0b2:	6829      	ldr	r1, [r5, #0]
 800c0b4:	9b05      	ldr	r3, [sp, #20]
 800c0b6:	314c      	adds	r1, #76	; 0x4c
 800c0b8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c0ba:	f7f9 ff03 	bl	8005ec4 <HAL_DMA_Start_IT>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d08b      	beq.n	800bfda <HAL_TIM_DMABurst_MultiReadStart+0x9c>
        return HAL_ERROR;
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	e792      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
        return HAL_ERROR;
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	e790      	b.n	800bfec <HAL_TIM_DMABurst_MultiReadStart+0xae>
 800c0ca:	bf00      	nop
 800c0cc:	0800c21f 	.word	0x0800c21f
 800c0d0:	0800c2a1 	.word	0x0800c2a1
 800c0d4:	0800c551 	.word	0x0800c551
 800c0d8:	0800c1f9 	.word	0x0800c1f9
 800c0dc:	0800c211 	.word	0x0800c211
 800c0e0:	0800c52d 	.word	0x0800c52d
 800c0e4:	0800c545 	.word	0x0800c545
 800c0e8:	08010f9b 	.word	0x08010f9b
 800c0ec:	08010fad 	.word	0x08010fad

0800c0f0 <HAL_TIM_DMABurst_ReadStart>:
{
 800c0f0:	b530      	push	{r4, r5, lr}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	9d06      	ldr	r5, [sp, #24]
                                           ((BurstLength) >> 8U) + 1U);
 800c0f6:	0a2c      	lsrs	r4, r5, #8
  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	9401      	str	r4, [sp, #4]
 800c0fc:	9500      	str	r5, [sp, #0]
 800c0fe:	f7ff ff1e 	bl	800bf3e <HAL_TIM_DMABurst_MultiReadStart>
}
 800c102:	b003      	add	sp, #12
 800c104:	bd30      	pop	{r4, r5, pc}

0800c106 <HAL_TIM_DMABurst_ReadStop>:
{
 800c106:	b538      	push	{r3, r4, r5, lr}
 800c108:	4605      	mov	r5, r0
 800c10a:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 800c10c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c110:	d033      	beq.n	800c17a <HAL_TIM_DMABurst_ReadStop+0x74>
 800c112:	d81b      	bhi.n	800c14c <HAL_TIM_DMABurst_ReadStop+0x46>
 800c114:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c118:	d02b      	beq.n	800c172 <HAL_TIM_DMABurst_ReadStop+0x6c>
 800c11a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c11e:	d103      	bne.n	800c128 <HAL_TIM_DMABurst_ReadStop+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800c120:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c122:	f7fa f9bb 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c126:	e005      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 800c128:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c12c:	d10c      	bne.n	800c148 <HAL_TIM_DMABurst_ReadStop+0x42>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800c12e:	6a00      	ldr	r0, [r0, #32]
 800c130:	f7fa f9b4 	bl	800649c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	68d9      	ldr	r1, [r3, #12]
 800c138:	ea21 0404 	bic.w	r4, r1, r4
 800c13c:	60dc      	str	r4, [r3, #12]
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c13e:	2301      	movs	r3, #1
 800c140:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 800c144:	2000      	movs	r0, #0
}
 800c146:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800c148:	2001      	movs	r0, #1
 800c14a:	e7fc      	b.n	800c146 <HAL_TIM_DMABurst_ReadStop+0x40>
 800c14c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c150:	d017      	beq.n	800c182 <HAL_TIM_DMABurst_ReadStop+0x7c>
 800c152:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c156:	d103      	bne.n	800c160 <HAL_TIM_DMABurst_ReadStop+0x5a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800c158:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c15a:	f7fa f99f 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c15e:	e7e9      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 800c160:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c164:	d103      	bne.n	800c16e <HAL_TIM_DMABurst_ReadStop+0x68>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800c166:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c168:	f7fa f998 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c16c:	e7e2      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 800c16e:	2001      	movs	r0, #1
 800c170:	e7e9      	b.n	800c146 <HAL_TIM_DMABurst_ReadStop+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800c172:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c174:	f7fa f992 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c178:	e7dc      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800c17a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c17c:	f7fa f98e 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c180:	e7d8      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800c182:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c184:	f7fa f98a 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800c188:	e7d4      	b.n	800c134 <HAL_TIM_DMABurst_ReadStop+0x2e>

0800c18a <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 800c18a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d00e      	beq.n	800c1b0 <HAL_TIM_GenerateEvent+0x26>
 800c192:	2301      	movs	r3, #1
 800c194:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c198:	2202      	movs	r2, #2
 800c19a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 800c19e:	6802      	ldr	r2, [r0, #0]
 800c1a0:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800c1a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 800c1b0:	2002      	movs	r0, #2
}
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 800c1b4:	6802      	ldr	r2, [r0, #0]
 800c1b6:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800c1b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 800c1bc:	430b      	orrs	r3, r1
  htim->Instance->CR2 = tmpcr2;
 800c1be:	6053      	str	r3, [r2, #4]
}
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800c1c4:	290c      	cmp	r1, #12
 800c1c6:	d814      	bhi.n	800c1f2 <HAL_TIM_ReadCapturedValue+0x2e>
 800c1c8:	e8df f001 	tbb	[pc, r1]
 800c1cc:	13131307 	.word	0x13131307
 800c1d0:	1313130a 	.word	0x1313130a
 800c1d4:	1313130d 	.word	0x1313130d
 800c1d8:	10          	.byte	0x10
 800c1d9:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800c1da:	6803      	ldr	r3, [r0, #0]
 800c1dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800c1de:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800c1e0:	6803      	ldr	r3, [r0, #0]
 800c1e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800c1e4:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800c1e6:	6803      	ldr	r3, [r0, #0]
 800c1e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800c1ea:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800c1ec:	6803      	ldr	r3, [r0, #0]
 800c1ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800c1f0:	4770      	bx	lr
  switch (Channel)
 800c1f2:	2000      	movs	r0, #0
}
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_TIM_PeriodElapsedCallback>:
}
 800c1f6:	4770      	bx	lr

0800c1f8 <TIM_DMAPeriodElapsedCplt>:
{
 800c1f8:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 800c1fc:	6a03      	ldr	r3, [r0, #32]
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	b913      	cbnz	r3, 800c208 <TIM_DMAPeriodElapsedCplt+0x10>
    htim->State = HAL_TIM_STATE_READY;
 800c202:	2301      	movs	r3, #1
 800c204:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 800c208:	f7ff fff5 	bl	800c1f6 <HAL_TIM_PeriodElapsedCallback>
}
 800c20c:	bd08      	pop	{r3, pc}

0800c20e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
}
 800c20e:	4770      	bx	lr

0800c210 <TIM_DMAPeriodElapsedHalfCplt>:
{
 800c210:	b508      	push	{r3, lr}
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800c212:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c214:	f7ff fffb 	bl	800c20e <HAL_TIM_PeriodElapsedHalfCpltCallback>
}
 800c218:	bd08      	pop	{r3, pc}

0800c21a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800c21a:	4770      	bx	lr

0800c21c <HAL_TIM_IC_CaptureCallback>:
}
 800c21c:	4770      	bx	lr

0800c21e <TIM_DMACaptureCplt>:
{
 800c21e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c220:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c224:	4283      	cmp	r3, r0
 800c226:	d00e      	beq.n	800c246 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c22a:	4283      	cmp	r3, r0
 800c22c:	d016      	beq.n	800c25c <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c22e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c230:	4283      	cmp	r3, r0
 800c232:	d01e      	beq.n	800c272 <TIM_DMACaptureCplt+0x54>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c236:	4283      	cmp	r3, r0
 800c238:	d026      	beq.n	800c288 <TIM_DMACaptureCplt+0x6a>
  HAL_TIM_IC_CaptureCallback(htim);
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7ff ffee 	bl	800c21c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c240:	2300      	movs	r3, #0
 800c242:	7723      	strb	r3, [r4, #28]
}
 800c244:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c246:	2301      	movs	r3, #1
 800c248:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c24a:	69c3      	ldr	r3, [r0, #28]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1f4      	bne.n	800c23a <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c250:	2301      	movs	r3, #1
 800c252:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c256:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c25a:	e7ee      	b.n	800c23a <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c25c:	2302      	movs	r3, #2
 800c25e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c260:	69c3      	ldr	r3, [r0, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e9      	bne.n	800c23a <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c266:	2301      	movs	r3, #1
 800c268:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c26c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c270:	e7e3      	b.n	800c23a <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c272:	2304      	movs	r3, #4
 800c274:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c276:	69c3      	ldr	r3, [r0, #28]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1de      	bne.n	800c23a <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c27c:	2301      	movs	r3, #1
 800c27e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c282:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c286:	e7d8      	b.n	800c23a <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c288:	2308      	movs	r3, #8
 800c28a:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c28c:	69c3      	ldr	r3, [r0, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1d3      	bne.n	800c23a <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c292:	2301      	movs	r3, #1
 800c294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c298:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800c29c:	e7cd      	b.n	800c23a <TIM_DMACaptureCplt+0x1c>

0800c29e <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 800c29e:	4770      	bx	lr

0800c2a0 <TIM_DMACaptureHalfCplt>:
{
 800c2a0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a6:	4283      	cmp	r3, r0
 800c2a8:	d00b      	beq.n	800c2c2 <TIM_DMACaptureHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c2aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2ac:	4283      	cmp	r3, r0
 800c2ae:	d010      	beq.n	800c2d2 <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c2b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2b2:	4283      	cmp	r3, r0
 800c2b4:	d010      	beq.n	800c2d8 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c2b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2b8:	4283      	cmp	r3, r0
 800c2ba:	d104      	bne.n	800c2c6 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2bc:	2308      	movs	r3, #8
 800c2be:	7723      	strb	r3, [r4, #28]
 800c2c0:	e001      	b.n	800c2c6 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7ff ffe9 	bl	800c29e <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	7723      	strb	r3, [r4, #28]
}
 800c2d0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	7723      	strb	r3, [r4, #28]
 800c2d6:	e7f6      	b.n	800c2c6 <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2d8:	2304      	movs	r3, #4
 800c2da:	7723      	strb	r3, [r4, #28]
 800c2dc:	e7f3      	b.n	800c2c6 <TIM_DMACaptureHalfCplt+0x26>

0800c2de <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800c2de:	4770      	bx	lr

0800c2e0 <TIM_DMADelayPulseCplt>:
{
 800c2e0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c2e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2e6:	4283      	cmp	r3, r0
 800c2e8:	d00e      	beq.n	800c308 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c2ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2ec:	4283      	cmp	r3, r0
 800c2ee:	d014      	beq.n	800c31a <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c2f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2f2:	4283      	cmp	r3, r0
 800c2f4:	d01a      	beq.n	800c32c <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c2f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2f8:	4283      	cmp	r3, r0
 800c2fa:	d020      	beq.n	800c33e <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7ff ffee 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c302:	2300      	movs	r3, #0
 800c304:	7723      	strb	r3, [r4, #28]
}
 800c306:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c308:	2301      	movs	r3, #1
 800c30a:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c30c:	69c3      	ldr	r3, [r0, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1f4      	bne.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c312:	2301      	movs	r3, #1
 800c314:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c318:	e7f0      	b.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c31a:	2302      	movs	r3, #2
 800c31c:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c31e:	69c3      	ldr	r3, [r0, #28]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1eb      	bne.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c324:	2301      	movs	r3, #1
 800c326:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c32a:	e7e7      	b.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c32c:	2304      	movs	r3, #4
 800c32e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c330:	69c3      	ldr	r3, [r0, #28]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e2      	bne.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c336:	2301      	movs	r3, #1
 800c338:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c33c:	e7de      	b.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c33e:	2308      	movs	r3, #8
 800c340:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800c342:	69c3      	ldr	r3, [r0, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1d9      	bne.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c348:	2301      	movs	r3, #1
 800c34a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c34e:	e7d5      	b.n	800c2fc <TIM_DMADelayPulseCplt+0x1c>

0800c350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 800c350:	4770      	bx	lr

0800c352 <TIM_DMADelayPulseHalfCplt>:
{
 800c352:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c354:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c358:	4283      	cmp	r3, r0
 800c35a:	d00b      	beq.n	800c374 <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c35e:	4283      	cmp	r3, r0
 800c360:	d010      	beq.n	800c384 <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c364:	4283      	cmp	r3, r0
 800c366:	d010      	beq.n	800c38a <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c36a:	4283      	cmp	r3, r0
 800c36c:	d104      	bne.n	800c378 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c36e:	2308      	movs	r3, #8
 800c370:	7723      	strb	r3, [r4, #28]
 800c372:	e001      	b.n	800c378 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c374:	2301      	movs	r3, #1
 800c376:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c378:	4620      	mov	r0, r4
 800c37a:	f7ff ffe9 	bl	800c350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c37e:	2300      	movs	r3, #0
 800c380:	7723      	strb	r3, [r4, #28]
}
 800c382:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c384:	2302      	movs	r3, #2
 800c386:	7723      	strb	r3, [r4, #28]
 800c388:	e7f6      	b.n	800c378 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c38a:	2304      	movs	r3, #4
 800c38c:	7723      	strb	r3, [r4, #28]
 800c38e:	e7f3      	b.n	800c378 <TIM_DMADelayPulseHalfCplt+0x26>

0800c390 <HAL_TIM_TriggerCallback>:
}
 800c390:	4770      	bx	lr

0800c392 <HAL_TIM_IRQHandler>:
{
 800c392:	b510      	push	{r4, lr}
 800c394:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c396:	6803      	ldr	r3, [r0, #0]
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	f012 0f02 	tst.w	r2, #2
 800c39e:	d011      	beq.n	800c3c4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	f012 0f02 	tst.w	r2, #2
 800c3a6:	d00d      	beq.n	800c3c4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3a8:	f06f 0202 	mvn.w	r2, #2
 800c3ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3b2:	6803      	ldr	r3, [r0, #0]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f013 0f03 	tst.w	r3, #3
 800c3ba:	d079      	beq.n	800c4b0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c3bc:	f7ff ff2e 	bl	800c21c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	691a      	ldr	r2, [r3, #16]
 800c3c8:	f012 0f04 	tst.w	r2, #4
 800c3cc:	d012      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	f012 0f04 	tst.w	r2, #4
 800c3d4:	d00e      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3d6:	f06f 0204 	mvn.w	r2, #4
 800c3da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c3e8:	d068      	beq.n	800c4bc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7ff ff16 	bl	800c21c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	691a      	ldr	r2, [r3, #16]
 800c3f8:	f012 0f08 	tst.w	r2, #8
 800c3fc:	d012      	beq.n	800c424 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	f012 0f08 	tst.w	r2, #8
 800c404:	d00e      	beq.n	800c424 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c406:	f06f 0208 	mvn.w	r2, #8
 800c40a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c40c:	2304      	movs	r3, #4
 800c40e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	69db      	ldr	r3, [r3, #28]
 800c414:	f013 0f03 	tst.w	r3, #3
 800c418:	d057      	beq.n	800c4ca <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff fefe 	bl	800c21c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c420:	2300      	movs	r3, #0
 800c422:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	691a      	ldr	r2, [r3, #16]
 800c428:	f012 0f10 	tst.w	r2, #16
 800c42c:	d012      	beq.n	800c454 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c42e:	68da      	ldr	r2, [r3, #12]
 800c430:	f012 0f10 	tst.w	r2, #16
 800c434:	d00e      	beq.n	800c454 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c436:	f06f 0210 	mvn.w	r2, #16
 800c43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c43c:	2308      	movs	r3, #8
 800c43e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c448:	d046      	beq.n	800c4d8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff fee6 	bl	800c21c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c450:	2300      	movs	r3, #0
 800c452:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	691a      	ldr	r2, [r3, #16]
 800c458:	f012 0f01 	tst.w	r2, #1
 800c45c:	d003      	beq.n	800c466 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c45e:	68da      	ldr	r2, [r3, #12]
 800c460:	f012 0f01 	tst.w	r2, #1
 800c464:	d13f      	bne.n	800c4e6 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	691a      	ldr	r2, [r3, #16]
 800c46a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c46e:	d003      	beq.n	800c478 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c476:	d13d      	bne.n	800c4f4 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	691a      	ldr	r2, [r3, #16]
 800c47c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800c480:	d003      	beq.n	800c48a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c482:	68da      	ldr	r2, [r3, #12]
 800c484:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c488:	d13b      	bne.n	800c502 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c492:	d003      	beq.n	800c49c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c49a:	d139      	bne.n	800c510 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	691a      	ldr	r2, [r3, #16]
 800c4a0:	f012 0f20 	tst.w	r2, #32
 800c4a4:	d003      	beq.n	800c4ae <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	f012 0f20 	tst.w	r2, #32
 800c4ac:	d137      	bne.n	800c51e <HAL_TIM_IRQHandler+0x18c>
}
 800c4ae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b0:	f7ff feb3 	bl	800c21a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7ff ff12 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
 800c4ba:	e781      	b.n	800c3c0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f7ff feac 	bl	800c21a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ff0b 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
 800c4c8:	e792      	b.n	800c3f0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f7ff fea5 	bl	800c21a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f7ff ff04 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
 800c4d6:	e7a3      	b.n	800c420 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f7ff fe9e 	bl	800c21a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7ff fefd 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
 800c4e4:	e7b4      	b.n	800c450 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4e6:	f06f 0201 	mvn.w	r2, #1
 800c4ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f7ff fe82 	bl	800c1f6 <HAL_TIM_PeriodElapsedCallback>
 800c4f2:	e7b8      	b.n	800c466 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f004 fd5e 	bl	8010fbc <HAL_TIMEx_BreakCallback>
 800c500:	e7ba      	b.n	800c478 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c506:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c508:	4620      	mov	r0, r4
 800c50a:	f004 fd58 	bl	8010fbe <HAL_TIMEx_Break2Callback>
 800c50e:	e7bc      	b.n	800c48a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c514:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c516:	4620      	mov	r0, r4
 800c518:	f7ff ff3a 	bl	800c390 <HAL_TIM_TriggerCallback>
 800c51c:	e7be      	b.n	800c49c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c51e:	f06f 0220 	mvn.w	r2, #32
 800c522:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c524:	4620      	mov	r0, r4
 800c526:	f004 fd37 	bl	8010f98 <HAL_TIMEx_CommutCallback>
}
 800c52a:	e7c0      	b.n	800c4ae <HAL_TIM_IRQHandler+0x11c>

0800c52c <TIM_DMATriggerCplt>:
{
 800c52c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c52e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 800c530:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	b913      	cbnz	r3, 800c53c <TIM_DMATriggerCplt+0x10>
    htim->State = HAL_TIM_STATE_READY;
 800c536:	2301      	movs	r3, #1
 800c538:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 800c53c:	f7ff ff28 	bl	800c390 <HAL_TIM_TriggerCallback>
}
 800c540:	bd08      	pop	{r3, pc}

0800c542 <HAL_TIM_TriggerHalfCpltCallback>:
}
 800c542:	4770      	bx	lr

0800c544 <TIM_DMATriggerHalfCplt>:
{
 800c544:	b508      	push	{r3, lr}
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800c546:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c548:	f7ff fffb 	bl	800c542 <HAL_TIM_TriggerHalfCpltCallback>
}
 800c54c:	bd08      	pop	{r3, pc}

0800c54e <HAL_TIM_ErrorCallback>:
}
 800c54e:	4770      	bx	lr

0800c550 <TIM_DMAError>:
{
 800c550:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c552:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c556:	4283      	cmp	r3, r0
 800c558:	d00c      	beq.n	800c574 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c55a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c55c:	4283      	cmp	r3, r0
 800c55e:	d013      	beq.n	800c588 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c562:	4283      	cmp	r3, r0
 800c564:	d016      	beq.n	800c594 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c566:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c568:	4283      	cmp	r3, r0
 800c56a:	d019      	beq.n	800c5a0 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800c572:	e003      	b.n	800c57c <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c574:	2301      	movs	r3, #1
 800c576:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c578:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800c57c:	4620      	mov	r0, r4
 800c57e:	f7ff ffe6 	bl	800c54e <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c582:	2300      	movs	r3, #0
 800c584:	7723      	strb	r3, [r4, #28]
}
 800c586:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c588:	2302      	movs	r3, #2
 800c58a:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c58c:	2301      	movs	r3, #1
 800c58e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c592:	e7f3      	b.n	800c57c <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c594:	2304      	movs	r3, #4
 800c596:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c598:	2301      	movs	r3, #1
 800c59a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c59e:	e7ed      	b.n	800c57c <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c5aa:	e7e7      	b.n	800c57c <TIM_DMAError+0x2c>

0800c5ac <HAL_TIM_Base_GetState>:
  return htim->State;
 800c5ac:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5b0:	4770      	bx	lr

0800c5b2 <HAL_TIM_OC_GetState>:
  return htim->State;
 800c5b2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_TIM_PWM_GetState>:
  return htim->State;
 800c5b8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5bc:	4770      	bx	lr

0800c5be <HAL_TIM_IC_GetState>:
  return htim->State;
 800c5be:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 800c5c4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_TIM_Encoder_GetState>:
  return htim->State;
 800c5ca:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800c5ce:	4770      	bx	lr

0800c5d0 <HAL_TIM_GetActiveChannel>:
}
 800c5d0:	7f00      	ldrb	r0, [r0, #28]
 800c5d2:	4770      	bx	lr

0800c5d4 <HAL_TIM_GetChannelState>:
  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c5d4:	b919      	cbnz	r1, 800c5de <HAL_TIM_GetChannelState+0xa>
 800c5d6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800c5da:	b2c0      	uxtb	r0, r0
 800c5dc:	4770      	bx	lr
 800c5de:	2904      	cmp	r1, #4
 800c5e0:	d009      	beq.n	800c5f6 <HAL_TIM_GetChannelState+0x22>
 800c5e2:	2908      	cmp	r1, #8
 800c5e4:	d00b      	beq.n	800c5fe <HAL_TIM_GetChannelState+0x2a>
 800c5e6:	290c      	cmp	r1, #12
 800c5e8:	d00d      	beq.n	800c606 <HAL_TIM_GetChannelState+0x32>
 800c5ea:	2910      	cmp	r1, #16
 800c5ec:	d00f      	beq.n	800c60e <HAL_TIM_GetChannelState+0x3a>
 800c5ee:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800c5f2:	b2c0      	uxtb	r0, r0
}
 800c5f4:	4770      	bx	lr
  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c5f6:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800c5fa:	b2c0      	uxtb	r0, r0
 800c5fc:	4770      	bx	lr
 800c5fe:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800c602:	b2c0      	uxtb	r0, r0
 800c604:	4770      	bx	lr
 800c606:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800c60a:	b2c0      	uxtb	r0, r0
 800c60c:	4770      	bx	lr
 800c60e:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800c612:	b2c0      	uxtb	r0, r0
 800c614:	4770      	bx	lr

0800c616 <HAL_TIM_DMABurstState>:
  return htim->DMABurstState;
 800c616:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 800c61a:	4770      	bx	lr

0800c61c <TIM_Base_SetConfig>:
{
 800c61c:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800c61e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c620:	4a39      	ldr	r2, [pc, #228]	; (800c708 <TIM_Base_SetConfig+0xec>)
 800c622:	4290      	cmp	r0, r2
 800c624:	bf14      	ite	ne
 800c626:	f04f 0e00 	movne.w	lr, #0
 800c62a:	f04f 0e01 	moveq.w	lr, #1
 800c62e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c632:	bf14      	ite	ne
 800c634:	4672      	movne	r2, lr
 800c636:	f04e 0201 	orreq.w	r2, lr, #1
 800c63a:	b9aa      	cbnz	r2, 800c668 <TIM_Base_SetConfig+0x4c>
 800c63c:	4c33      	ldr	r4, [pc, #204]	; (800c70c <TIM_Base_SetConfig+0xf0>)
 800c63e:	42a0      	cmp	r0, r4
 800c640:	bf14      	ite	ne
 800c642:	2400      	movne	r4, #0
 800c644:	2401      	moveq	r4, #1
 800c646:	4d32      	ldr	r5, [pc, #200]	; (800c710 <TIM_Base_SetConfig+0xf4>)
 800c648:	42a8      	cmp	r0, r5
 800c64a:	d00d      	beq.n	800c668 <TIM_Base_SetConfig+0x4c>
 800c64c:	b964      	cbnz	r4, 800c668 <TIM_Base_SetConfig+0x4c>
 800c64e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800c652:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800c656:	42a0      	cmp	r0, r4
 800c658:	bf14      	ite	ne
 800c65a:	2400      	movne	r4, #0
 800c65c:	2401      	moveq	r4, #1
 800c65e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800c662:	42a8      	cmp	r0, r5
 800c664:	d000      	beq.n	800c668 <TIM_Base_SetConfig+0x4c>
 800c666:	b11c      	cbz	r4, 800c670 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c66c:	684c      	ldr	r4, [r1, #4]
 800c66e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c670:	bb12      	cbnz	r2, 800c6b8 <TIM_Base_SetConfig+0x9c>
 800c672:	4a26      	ldr	r2, [pc, #152]	; (800c70c <TIM_Base_SetConfig+0xf0>)
 800c674:	4290      	cmp	r0, r2
 800c676:	bf14      	ite	ne
 800c678:	2200      	movne	r2, #0
 800c67a:	2201      	moveq	r2, #1
 800c67c:	4c24      	ldr	r4, [pc, #144]	; (800c710 <TIM_Base_SetConfig+0xf4>)
 800c67e:	42a0      	cmp	r0, r4
 800c680:	d01a      	beq.n	800c6b8 <TIM_Base_SetConfig+0x9c>
 800c682:	b9ca      	cbnz	r2, 800c6b8 <TIM_Base_SetConfig+0x9c>
 800c684:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c688:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800c68c:	4290      	cmp	r0, r2
 800c68e:	bf14      	ite	ne
 800c690:	2200      	movne	r2, #0
 800c692:	2201      	moveq	r2, #1
 800c694:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800c698:	42a0      	cmp	r0, r4
 800c69a:	d00d      	beq.n	800c6b8 <TIM_Base_SetConfig+0x9c>
 800c69c:	b962      	cbnz	r2, 800c6b8 <TIM_Base_SetConfig+0x9c>
 800c69e:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <TIM_Base_SetConfig+0xf8>)
 800c6a0:	4290      	cmp	r0, r2
 800c6a2:	bf14      	ite	ne
 800c6a4:	2200      	movne	r2, #0
 800c6a6:	2201      	moveq	r2, #1
 800c6a8:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800c6ac:	42a0      	cmp	r0, r4
 800c6ae:	d003      	beq.n	800c6b8 <TIM_Base_SetConfig+0x9c>
 800c6b0:	b912      	cbnz	r2, 800c6b8 <TIM_Base_SetConfig+0x9c>
 800c6b2:	4a19      	ldr	r2, [pc, #100]	; (800c718 <TIM_Base_SetConfig+0xfc>)
 800c6b4:	4290      	cmp	r0, r2
 800c6b6:	d104      	bne.n	800c6c2 <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6b8:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6bc:	68cb      	ldr	r3, [r1, #12]
 800c6be:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6c6:	694a      	ldr	r2, [r1, #20]
 800c6c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c6ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6cc:	688a      	ldr	r2, [r1, #8]
 800c6ce:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c6d0:	680a      	ldr	r2, [r1, #0]
 800c6d2:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6d4:	4a11      	ldr	r2, [pc, #68]	; (800c71c <TIM_Base_SetConfig+0x100>)
 800c6d6:	4290      	cmp	r0, r2
 800c6d8:	bf14      	ite	ne
 800c6da:	4673      	movne	r3, lr
 800c6dc:	f04e 0301 	orreq.w	r3, lr, #1
 800c6e0:	b963      	cbnz	r3, 800c6fc <TIM_Base_SetConfig+0xe0>
 800c6e2:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <TIM_Base_SetConfig+0xf8>)
 800c6e4:	4298      	cmp	r0, r3
 800c6e6:	bf14      	ite	ne
 800c6e8:	2300      	movne	r3, #0
 800c6ea:	2301      	moveq	r3, #1
 800c6ec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c6f0:	4290      	cmp	r0, r2
 800c6f2:	d003      	beq.n	800c6fc <TIM_Base_SetConfig+0xe0>
 800c6f4:	b913      	cbnz	r3, 800c6fc <TIM_Base_SetConfig+0xe0>
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <TIM_Base_SetConfig+0xfc>)
 800c6f8:	4298      	cmp	r0, r3
 800c6fa:	d101      	bne.n	800c700 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800c6fc:	690b      	ldr	r3, [r1, #16]
 800c6fe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c700:	2301      	movs	r3, #1
 800c702:	6143      	str	r3, [r0, #20]
}
 800c704:	bd30      	pop	{r4, r5, pc}
 800c706:	bf00      	nop
 800c708:	40010000 	.word	0x40010000
 800c70c:	40000800 	.word	0x40000800
 800c710:	40000400 	.word	0x40000400
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800
 800c71c:	40010400 	.word	0x40010400

0800c720 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c720:	b360      	cbz	r0, 800c77c <HAL_TIM_Base_Init+0x5c>
{
 800c722:	b510      	push	{r4, lr}
 800c724:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c726:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c72a:	b313      	cbz	r3, 800c772 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800c72c:	2302      	movs	r3, #2
 800c72e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c732:	4621      	mov	r1, r4
 800c734:	f851 0b04 	ldr.w	r0, [r1], #4
 800c738:	f7ff ff70 	bl	800c61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c73c:	2301      	movs	r3, #1
 800c73e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c742:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c746:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c74a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c74e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c752:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c75a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c75e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c762:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c766:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c76a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c76e:	2000      	movs	r0, #0
}
 800c770:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c772:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c776:	f7f4 fbe1 	bl	8000f3c <HAL_TIM_Base_MspInit>
 800c77a:	e7d7      	b.n	800c72c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c77c:	2001      	movs	r0, #1
}
 800c77e:	4770      	bx	lr

0800c780 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c780:	b360      	cbz	r0, 800c7dc <HAL_TIM_OC_Init+0x5c>
{
 800c782:	b510      	push	{r4, lr}
 800c784:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c786:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c78a:	b313      	cbz	r3, 800c7d2 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800c78c:	2302      	movs	r3, #2
 800c78e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c792:	4621      	mov	r1, r4
 800c794:	f851 0b04 	ldr.w	r0, [r1], #4
 800c798:	f7ff ff40 	bl	800c61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c7a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c7aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c7ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c7b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c7be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c7c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c7c6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c7ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c7ce:	2000      	movs	r0, #0
}
 800c7d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c7d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c7d6:	f7ff f99d 	bl	800bb14 <HAL_TIM_OC_MspInit>
 800c7da:	e7d7      	b.n	800c78c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800c7dc:	2001      	movs	r0, #1
}
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c7e0:	b360      	cbz	r0, 800c83c <HAL_TIM_PWM_Init+0x5c>
{
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c7ea:	b313      	cbz	r3, 800c832 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	f851 0b04 	ldr.w	r0, [r1], #4
 800c7f8:	f7ff ff10 	bl	800c61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c802:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c806:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c80a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c80e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c81a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c81e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c822:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c826:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c82a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c82e:	2000      	movs	r0, #0
}
 800c830:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c832:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c836:	f7ff f9a2 	bl	800bb7e <HAL_TIM_PWM_MspInit>
 800c83a:	e7d7      	b.n	800c7ec <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800c83c:	2001      	movs	r0, #1
}
 800c83e:	4770      	bx	lr

0800c840 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800c840:	b360      	cbz	r0, 800c89c <HAL_TIM_IC_Init+0x5c>
{
 800c842:	b510      	push	{r4, lr}
 800c844:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c846:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c84a:	b313      	cbz	r3, 800c892 <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800c84c:	2302      	movs	r3, #2
 800c84e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c852:	4621      	mov	r1, r4
 800c854:	f851 0b04 	ldr.w	r0, [r1], #4
 800c858:	f7ff fee0 	bl	800c61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c85c:	2301      	movs	r3, #1
 800c85e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c862:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c866:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c86a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c86e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c87a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c87e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c882:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c886:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c88a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c88e:	2000      	movs	r0, #0
}
 800c890:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c892:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c896:	f7ff f9a7 	bl	800bbe8 <HAL_TIM_IC_MspInit>
 800c89a:	e7d7      	b.n	800c84c <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800c89c:	2001      	movs	r0, #1
}
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800c8a0:	b350      	cbz	r0, 800c8f8 <HAL_TIM_OnePulse_Init+0x58>
{
 800c8a2:	b538      	push	{r3, r4, r5, lr}
 800c8a4:	460d      	mov	r5, r1
 800c8a6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c8a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c8ac:	b1fb      	cbz	r3, 800c8ee <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f851 0b04 	ldr.w	r0, [r1], #4
 800c8ba:	f7ff feaf 	bl	800c61c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	6813      	ldr	r3, [r2, #0]
 800c8c2:	f023 0308 	bic.w	r3, r3, #8
 800c8c6:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	6819      	ldr	r1, [r3, #0]
 800c8cc:	430d      	orrs	r5, r1
 800c8ce:	601d      	str	r5, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c8e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c8ea:	2000      	movs	r0, #0
}
 800c8ec:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c8ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800c8f2:	f7ff f9ae 	bl	800bc52 <HAL_TIM_OnePulse_MspInit>
 800c8f6:	e7da      	b.n	800c8ae <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800c8f8:	2001      	movs	r0, #1
}
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d04f      	beq.n	800c9a0 <HAL_TIM_Encoder_Init+0xa4>
{
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	460d      	mov	r5, r1
 800c904:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c906:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d043      	beq.n	800c996 <HAL_TIM_Encoder_Init+0x9a>
  htim->State = HAL_TIM_STATE_BUSY;
 800c90e:	2302      	movs	r3, #2
 800c910:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c914:	6822      	ldr	r2, [r4, #0]
 800c916:	6891      	ldr	r1, [r2, #8]
 800c918:	4b22      	ldr	r3, [pc, #136]	; (800c9a4 <HAL_TIM_Encoder_Init+0xa8>)
 800c91a:	400b      	ands	r3, r1
 800c91c:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c91e:	4621      	mov	r1, r4
 800c920:	f851 0b04 	ldr.w	r0, [r1], #4
 800c924:	f7ff fe7a 	bl	800c61c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800c928:	6820      	ldr	r0, [r4, #0]
 800c92a:	6881      	ldr	r1, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800c92c:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 800c92e:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800c930:	682e      	ldr	r6, [r5, #0]
 800c932:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c934:	491c      	ldr	r1, [pc, #112]	; (800c9a8 <HAL_TIM_Encoder_Init+0xac>)
 800c936:	4019      	ands	r1, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c938:	68ab      	ldr	r3, [r5, #8]
 800c93a:	69af      	ldr	r7, [r5, #24]
 800c93c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800c940:	ea43 0c01 	orr.w	ip, r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c944:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <HAL_TIM_Encoder_Init+0xb0>)
 800c946:	ea0c 0303 	and.w	r3, ip, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c94a:	68e9      	ldr	r1, [r5, #12]
 800c94c:	69ef      	ldr	r7, [r5, #28]
 800c94e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800c952:	4319      	orrs	r1, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c954:	6a2b      	ldr	r3, [r5, #32]
 800c956:	031b      	lsls	r3, r3, #12
 800c958:	692f      	ldr	r7, [r5, #16]
 800c95a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800c95e:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c960:	f022 01aa 	bic.w	r1, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c964:	686a      	ldr	r2, [r5, #4]
 800c966:	696d      	ldr	r5, [r5, #20]
 800c968:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800c96c:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800c96e:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800c970:	6821      	ldr	r1, [r4, #0]
 800c972:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c978:	2301      	movs	r3, #1
 800c97a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c97e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c982:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c986:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c98a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c98e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c992:	2000      	movs	r0, #0
}
 800c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c996:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c99a:	f7ff f983 	bl	800bca4 <HAL_TIM_Encoder_MspInit>
 800c99e:	e7b6      	b.n	800c90e <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800c9a0:	2001      	movs	r0, #1
}
 800c9a2:	4770      	bx	lr
 800c9a4:	fffebff8 	.word	0xfffebff8
 800c9a8:	fffffcfc 	.word	0xfffffcfc
 800c9ac:	ffff0303 	.word	0xffff0303

0800c9b0 <TIM_OC2_SetConfig>:
{
 800c9b0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9b2:	6a03      	ldr	r3, [r0, #32]
 800c9b4:	f023 0310 	bic.w	r3, r3, #16
 800c9b8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c9ba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c9bc:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c9be:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9c0:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <TIM_OC2_SetConfig+0x7c>)
 800c9c2:	4022      	ands	r2, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c4:	680e      	ldr	r6, [r1, #0]
 800c9c6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800c9ca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9ce:	688a      	ldr	r2, [r1, #8]
 800c9d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9d4:	4a16      	ldr	r2, [pc, #88]	; (800ca30 <TIM_OC2_SetConfig+0x80>)
 800c9d6:	4c17      	ldr	r4, [pc, #92]	; (800ca34 <TIM_OC2_SetConfig+0x84>)
 800c9d8:	42a0      	cmp	r0, r4
 800c9da:	bf18      	it	ne
 800c9dc:	4290      	cmpne	r0, r2
 800c9de:	bf0c      	ite	eq
 800c9e0:	2201      	moveq	r2, #1
 800c9e2:	2200      	movne	r2, #0
 800c9e4:	d106      	bne.n	800c9f4 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9ea:	68cc      	ldr	r4, [r1, #12]
 800c9ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f4:	b95a      	cbnz	r2, 800ca0e <TIM_OC2_SetConfig+0x5e>
 800c9f6:	4a10      	ldr	r2, [pc, #64]	; (800ca38 <TIM_OC2_SetConfig+0x88>)
 800c9f8:	4290      	cmp	r0, r2
 800c9fa:	bf14      	ite	ne
 800c9fc:	2200      	movne	r2, #0
 800c9fe:	2201      	moveq	r2, #1
 800ca00:	4c0e      	ldr	r4, [pc, #56]	; (800ca3c <TIM_OC2_SetConfig+0x8c>)
 800ca02:	42a0      	cmp	r0, r4
 800ca04:	d003      	beq.n	800ca0e <TIM_OC2_SetConfig+0x5e>
 800ca06:	b912      	cbnz	r2, 800ca0e <TIM_OC2_SetConfig+0x5e>
 800ca08:	4a0d      	ldr	r2, [pc, #52]	; (800ca40 <TIM_OC2_SetConfig+0x90>)
 800ca0a:	4290      	cmp	r0, r2
 800ca0c:	d107      	bne.n	800ca1e <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca0e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca12:	694a      	ldr	r2, [r1, #20]
 800ca14:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca18:	698d      	ldr	r5, [r1, #24]
 800ca1a:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800ca1e:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ca20:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ca22:	684a      	ldr	r2, [r1, #4]
 800ca24:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ca26:	6203      	str	r3, [r0, #32]
}
 800ca28:	bc70      	pop	{r4, r5, r6}
 800ca2a:	4770      	bx	lr
 800ca2c:	feff8cff 	.word	0xfeff8cff
 800ca30:	40010000 	.word	0x40010000
 800ca34:	40010400 	.word	0x40010400
 800ca38:	40014400 	.word	0x40014400
 800ca3c:	40014000 	.word	0x40014000
 800ca40:	40014800 	.word	0x40014800

0800ca44 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800ca44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d036      	beq.n	800caba <HAL_TIM_OC_ConfigChannel+0x76>
{
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ca50:	2301      	movs	r3, #1
 800ca52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800ca56:	2a14      	cmp	r2, #20
 800ca58:	d82a      	bhi.n	800cab0 <HAL_TIM_OC_ConfigChannel+0x6c>
 800ca5a:	e8df f002 	tbb	[pc, r2]
 800ca5e:	290b      	.short	0x290b
 800ca60:	29102929 	.word	0x29102929
 800ca64:	29152929 	.word	0x29152929
 800ca68:	291a2929 	.word	0x291a2929
 800ca6c:	291f2929 	.word	0x291f2929
 800ca70:	2929      	.short	0x2929
 800ca72:	24          	.byte	0x24
 800ca73:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca74:	6800      	ldr	r0, [r0, #0]
 800ca76:	f7fe fd07 	bl	800b488 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ca7a:	2000      	movs	r0, #0
      break;
 800ca7c:	e019      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca7e:	6800      	ldr	r0, [r0, #0]
 800ca80:	f7ff ff96 	bl	800c9b0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ca84:	2000      	movs	r0, #0
      break;
 800ca86:	e014      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca88:	6800      	ldr	r0, [r0, #0]
 800ca8a:	f7fe fd51 	bl	800b530 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ca8e:	2000      	movs	r0, #0
      break;
 800ca90:	e00f      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca92:	6800      	ldr	r0, [r0, #0]
 800ca94:	f7fe fd96 	bl	800b5c4 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ca98:	2000      	movs	r0, #0
      break;
 800ca9a:	e00a      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca9c:	6800      	ldr	r0, [r0, #0]
 800ca9e:	f7fe fdcb 	bl	800b638 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800caa2:	2000      	movs	r0, #0
      break;
 800caa4:	e005      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800caa6:	6800      	ldr	r0, [r0, #0]
 800caa8:	f7fe fe00 	bl	800b6ac <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800caac:	2000      	movs	r0, #0
      break;
 800caae:	e000      	b.n	800cab2 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 800cab0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800cab2:	2300      	movs	r3, #0
 800cab4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cab8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800caba:	2002      	movs	r0, #2
}
 800cabc:	4770      	bx	lr

0800cabe <HAL_TIM_PWM_ConfigChannel>:
{
 800cabe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800cac0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	f000 8095 	beq.w	800cbf4 <HAL_TIM_PWM_ConfigChannel+0x136>
 800caca:	4604      	mov	r4, r0
 800cacc:	460d      	mov	r5, r1
 800cace:	2301      	movs	r3, #1
 800cad0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800cad4:	2a14      	cmp	r2, #20
 800cad6:	f200 8088 	bhi.w	800cbea <HAL_TIM_PWM_ConfigChannel+0x12c>
 800cada:	e8df f002 	tbb	[pc, r2]
 800cade:	860b      	.short	0x860b
 800cae0:	861f8686 	.word	0x861f8686
 800cae4:	86348686 	.word	0x86348686
 800cae8:	86488686 	.word	0x86488686
 800caec:	865d8686 	.word	0x865d8686
 800caf0:	8686      	.short	0x8686
 800caf2:	71          	.byte	0x71
 800caf3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800caf4:	6800      	ldr	r0, [r0, #0]
 800caf6:	f7fe fcc7 	bl	800b488 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	6993      	ldr	r3, [r2, #24]
 800cafe:	f043 0308 	orr.w	r3, r3, #8
 800cb02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb04:	6822      	ldr	r2, [r4, #0]
 800cb06:	6993      	ldr	r3, [r2, #24]
 800cb08:	f023 0304 	bic.w	r3, r3, #4
 800cb0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb0e:	6822      	ldr	r2, [r4, #0]
 800cb10:	6993      	ldr	r3, [r2, #24]
 800cb12:	6929      	ldr	r1, [r5, #16]
 800cb14:	430b      	orrs	r3, r1
 800cb16:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800cb18:	2000      	movs	r0, #0
      break;
 800cb1a:	e067      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb1c:	6800      	ldr	r0, [r0, #0]
 800cb1e:	f7ff ff47 	bl	800c9b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb22:	6822      	ldr	r2, [r4, #0]
 800cb24:	6993      	ldr	r3, [r2, #24]
 800cb26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb2c:	6822      	ldr	r2, [r4, #0]
 800cb2e:	6993      	ldr	r3, [r2, #24]
 800cb30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb36:	6822      	ldr	r2, [r4, #0]
 800cb38:	6993      	ldr	r3, [r2, #24]
 800cb3a:	6929      	ldr	r1, [r5, #16]
 800cb3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cb40:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800cb42:	2000      	movs	r0, #0
      break;
 800cb44:	e052      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb46:	6800      	ldr	r0, [r0, #0]
 800cb48:	f7fe fcf2 	bl	800b530 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb4c:	6822      	ldr	r2, [r4, #0]
 800cb4e:	69d3      	ldr	r3, [r2, #28]
 800cb50:	f043 0308 	orr.w	r3, r3, #8
 800cb54:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb56:	6822      	ldr	r2, [r4, #0]
 800cb58:	69d3      	ldr	r3, [r2, #28]
 800cb5a:	f023 0304 	bic.w	r3, r3, #4
 800cb5e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb60:	6822      	ldr	r2, [r4, #0]
 800cb62:	69d3      	ldr	r3, [r2, #28]
 800cb64:	6929      	ldr	r1, [r5, #16]
 800cb66:	430b      	orrs	r3, r1
 800cb68:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800cb6a:	2000      	movs	r0, #0
      break;
 800cb6c:	e03e      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb6e:	6800      	ldr	r0, [r0, #0]
 800cb70:	f7fe fd28 	bl	800b5c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	69d3      	ldr	r3, [r2, #28]
 800cb78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb7c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	69d3      	ldr	r3, [r2, #28]
 800cb82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	69d3      	ldr	r3, [r2, #28]
 800cb8c:	6929      	ldr	r1, [r5, #16]
 800cb8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cb92:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800cb94:	2000      	movs	r0, #0
      break;
 800cb96:	e029      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb98:	6800      	ldr	r0, [r0, #0]
 800cb9a:	f7fe fd4d 	bl	800b638 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cba2:	f043 0308 	orr.w	r3, r3, #8
 800cba6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbac:	f023 0304 	bic.w	r3, r3, #4
 800cbb0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbb6:	6929      	ldr	r1, [r5, #16]
 800cbb8:	430b      	orrs	r3, r1
 800cbba:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800cbbc:	2000      	movs	r0, #0
      break;
 800cbbe:	e015      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbc0:	6800      	ldr	r0, [r0, #0]
 800cbc2:	f7fe fd73 	bl	800b6ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbc6:	6822      	ldr	r2, [r4, #0]
 800cbc8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cbce:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cbd0:	6822      	ldr	r2, [r4, #0]
 800cbd2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbd8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbda:	6822      	ldr	r2, [r4, #0]
 800cbdc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbde:	6929      	ldr	r1, [r5, #16]
 800cbe0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cbe4:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800cbe6:	2000      	movs	r0, #0
      break;
 800cbe8:	e000      	b.n	800cbec <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800cbea:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800cbec:	2300      	movs	r3, #0
 800cbee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800cbf4:	2002      	movs	r0, #2
 800cbf6:	e7fc      	b.n	800cbf2 <HAL_TIM_PWM_ConfigChannel+0x134>

0800cbf8 <TIM_TI1_SetConfig>:
{
 800cbf8:	b470      	push	{r4, r5, r6}
 800cbfa:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbfc:	6a04      	ldr	r4, [r0, #32]
 800cbfe:	f024 0401 	bic.w	r4, r4, #1
 800cc02:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc04:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800cc06:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cc08:	4d1d      	ldr	r5, [pc, #116]	; (800cc80 <TIM_TI1_SetConfig+0x88>)
 800cc0a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cc0e:	bf18      	it	ne
 800cc10:	42a8      	cmpne	r0, r5
 800cc12:	d023      	beq.n	800cc5c <TIM_TI1_SetConfig+0x64>
 800cc14:	4a1b      	ldr	r2, [pc, #108]	; (800cc84 <TIM_TI1_SetConfig+0x8c>)
 800cc16:	4290      	cmp	r0, r2
 800cc18:	bf14      	ite	ne
 800cc1a:	2200      	movne	r2, #0
 800cc1c:	2201      	moveq	r2, #1
 800cc1e:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 800cc22:	42a8      	cmp	r0, r5
 800cc24:	d01a      	beq.n	800cc5c <TIM_TI1_SetConfig+0x64>
 800cc26:	b9ca      	cbnz	r2, 800cc5c <TIM_TI1_SetConfig+0x64>
 800cc28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800cc2c:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800cc30:	4290      	cmp	r0, r2
 800cc32:	bf14      	ite	ne
 800cc34:	2200      	movne	r2, #0
 800cc36:	2201      	moveq	r2, #1
 800cc38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800cc3c:	42a8      	cmp	r0, r5
 800cc3e:	d00d      	beq.n	800cc5c <TIM_TI1_SetConfig+0x64>
 800cc40:	b962      	cbnz	r2, 800cc5c <TIM_TI1_SetConfig+0x64>
 800cc42:	4a11      	ldr	r2, [pc, #68]	; (800cc88 <TIM_TI1_SetConfig+0x90>)
 800cc44:	4290      	cmp	r0, r2
 800cc46:	bf14      	ite	ne
 800cc48:	2200      	movne	r2, #0
 800cc4a:	2201      	moveq	r2, #1
 800cc4c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800cc50:	42a8      	cmp	r0, r5
 800cc52:	d003      	beq.n	800cc5c <TIM_TI1_SetConfig+0x64>
 800cc54:	b912      	cbnz	r2, 800cc5c <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cc56:	f044 0201 	orr.w	r2, r4, #1
 800cc5a:	e003      	b.n	800cc64 <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cc5c:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800cc60:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc6e:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cc72:	f001 010a 	and.w	r1, r1, #10
 800cc76:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800cc78:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800cc7a:	6201      	str	r1, [r0, #32]
}
 800cc7c:	bc70      	pop	{r4, r5, r6}
 800cc7e:	4770      	bx	lr
 800cc80:	40010000 	.word	0x40010000
 800cc84:	40000800 	.word	0x40000800
 800cc88:	40014000 	.word	0x40014000

0800cc8c <HAL_TIM_IC_ConfigChannel>:
{
 800cc8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800cc8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d05a      	beq.n	800cd4c <HAL_TIM_IC_ConfigChannel+0xc0>
 800cc96:	4604      	mov	r4, r0
 800cc98:	460d      	mov	r5, r1
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800cca0:	b152      	cbz	r2, 800ccb8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800cca2:	2a04      	cmp	r2, #4
 800cca4:	d01a      	beq.n	800ccdc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800cca6:	2a08      	cmp	r2, #8
 800cca8:	d02b      	beq.n	800cd02 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800ccaa:	2a0c      	cmp	r2, #12
 800ccac:	d03b      	beq.n	800cd26 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800ccae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800ccb8:	68cb      	ldr	r3, [r1, #12]
 800ccba:	684a      	ldr	r2, [r1, #4]
 800ccbc:	6809      	ldr	r1, [r1, #0]
 800ccbe:	6800      	ldr	r0, [r0, #0]
 800ccc0:	f7ff ff9a 	bl	800cbf8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ccc4:	6822      	ldr	r2, [r4, #0]
 800ccc6:	6993      	ldr	r3, [r2, #24]
 800ccc8:	f023 030c 	bic.w	r3, r3, #12
 800cccc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	6993      	ldr	r3, [r2, #24]
 800ccd2:	68a9      	ldr	r1, [r5, #8]
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800ccd8:	2000      	movs	r0, #0
 800ccda:	e7e9      	b.n	800ccb0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 800ccdc:	68cb      	ldr	r3, [r1, #12]
 800ccde:	684a      	ldr	r2, [r1, #4]
 800cce0:	6809      	ldr	r1, [r1, #0]
 800cce2:	6800      	ldr	r0, [r0, #0]
 800cce4:	f7fe fd2f 	bl	800b746 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cce8:	6822      	ldr	r2, [r4, #0]
 800ccea:	6993      	ldr	r3, [r2, #24]
 800ccec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ccf0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ccf2:	6822      	ldr	r2, [r4, #0]
 800ccf4:	6993      	ldr	r3, [r2, #24]
 800ccf6:	68a9      	ldr	r1, [r5, #8]
 800ccf8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ccfc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800ccfe:	2000      	movs	r0, #0
 800cd00:	e7d6      	b.n	800ccb0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800cd02:	68cb      	ldr	r3, [r1, #12]
 800cd04:	684a      	ldr	r2, [r1, #4]
 800cd06:	6809      	ldr	r1, [r1, #0]
 800cd08:	6800      	ldr	r0, [r0, #0]
 800cd0a:	f7fe fd4b 	bl	800b7a4 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	69d3      	ldr	r3, [r2, #28]
 800cd12:	f023 030c 	bic.w	r3, r3, #12
 800cd16:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	69d3      	ldr	r3, [r2, #28]
 800cd1c:	68a9      	ldr	r1, [r5, #8]
 800cd1e:	430b      	orrs	r3, r1
 800cd20:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800cd22:	2000      	movs	r0, #0
 800cd24:	e7c4      	b.n	800ccb0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 800cd26:	68cb      	ldr	r3, [r1, #12]
 800cd28:	684a      	ldr	r2, [r1, #4]
 800cd2a:	6809      	ldr	r1, [r1, #0]
 800cd2c:	6800      	ldr	r0, [r0, #0]
 800cd2e:	f7fe fd54 	bl	800b7da <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cd32:	6822      	ldr	r2, [r4, #0]
 800cd34:	69d3      	ldr	r3, [r2, #28]
 800cd36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cd3a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cd3c:	6822      	ldr	r2, [r4, #0]
 800cd3e:	69d3      	ldr	r3, [r2, #28]
 800cd40:	68a9      	ldr	r1, [r5, #8]
 800cd42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cd46:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e7b1      	b.n	800ccb0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800cd4c:	2002      	movs	r0, #2
 800cd4e:	e7b2      	b.n	800ccb6 <HAL_TIM_IC_ConfigChannel+0x2a>

0800cd50 <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d076      	beq.n	800ce42 <HAL_TIM_OnePulse_ConfigChannel+0xf2>
{
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	4604      	mov	r4, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	461e      	mov	r6, r3
    __HAL_LOCK(htim);
 800cd5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d06f      	beq.n	800ce46 <HAL_TIM_OnePulse_ConfigChannel+0xf6>
 800cd66:	2301      	movs	r3, #1
 800cd68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    temp1.OCMode = sConfig->OCMode;
 800cd72:	680b      	ldr	r3, [r1, #0]
 800cd74:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800cd76:	684b      	ldr	r3, [r1, #4]
 800cd78:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 800cd7a:	688b      	ldr	r3, [r1, #8]
 800cd7c:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 800cd7e:	68cb      	ldr	r3, [r1, #12]
 800cd80:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800cd82:	690b      	ldr	r3, [r1, #16]
 800cd84:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800cd86:	694b      	ldr	r3, [r1, #20]
 800cd88:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 800cd8a:	b152      	cbz	r2, 800cda2 <HAL_TIM_OnePulse_ConfigChannel+0x52>
 800cd8c:	2a04      	cmp	r2, #4
 800cd8e:	d011      	beq.n	800cdb4 <HAL_TIM_OnePulse_ConfigChannel+0x64>
 800cd90:	2001      	movs	r0, #1
    htim->State = HAL_TIM_STATE_READY;
 800cd92:	2301      	movs	r3, #1
 800cd94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cd9e:	b008      	add	sp, #32
 800cda0:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800cda2:	a901      	add	r1, sp, #4
 800cda4:	6800      	ldr	r0, [r0, #0]
 800cda6:	f7fe fb6f 	bl	800b488 <TIM_OC1_SetConfig>
      switch (InputChannel)
 800cdaa:	b146      	cbz	r6, 800cdbe <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 800cdac:	2e04      	cmp	r6, #4
 800cdae:	d027      	beq.n	800ce00 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	e7ee      	b.n	800cd92 <HAL_TIM_OnePulse_ConfigChannel+0x42>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800cdb4:	a901      	add	r1, sp, #4
 800cdb6:	6800      	ldr	r0, [r0, #0]
 800cdb8:	f7ff fdfa 	bl	800c9b0 <TIM_OC2_SetConfig>
    if (status == HAL_OK)
 800cdbc:	e7f5      	b.n	800cdaa <HAL_TIM_OnePulse_ConfigChannel+0x5a>
          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800cdbe:	6a2b      	ldr	r3, [r5, #32]
 800cdc0:	69ea      	ldr	r2, [r5, #28]
 800cdc2:	69a9      	ldr	r1, [r5, #24]
 800cdc4:	6820      	ldr	r0, [r4, #0]
 800cdc6:	f7ff ff17 	bl	800cbf8 <TIM_TI1_SetConfig>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	6993      	ldr	r3, [r2, #24]
 800cdce:	f023 030c 	bic.w	r3, r3, #12
 800cdd2:	6193      	str	r3, [r2, #24]
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800cdd4:	6822      	ldr	r2, [r4, #0]
 800cdd6:	6891      	ldr	r1, [r2, #8]
 800cdd8:	4b1c      	ldr	r3, [pc, #112]	; (800ce4c <HAL_TIM_OnePulse_ConfigChannel+0xfc>)
 800cdda:	400b      	ands	r3, r1
 800cddc:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800cdde:	6822      	ldr	r2, [r4, #0]
 800cde0:	6893      	ldr	r3, [r2, #8]
 800cde2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800cde6:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800cde8:	6822      	ldr	r2, [r4, #0]
 800cdea:	6891      	ldr	r1, [r2, #8]
 800cdec:	4b18      	ldr	r3, [pc, #96]	; (800ce50 <HAL_TIM_OnePulse_ConfigChannel+0x100>)
 800cdee:	400b      	ands	r3, r1
 800cdf0:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	6893      	ldr	r3, [r2, #8]
 800cdf6:	f043 0306 	orr.w	r3, r3, #6
 800cdfa:	6093      	str	r3, [r2, #8]
          break;
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e7c8      	b.n	800cd92 <HAL_TIM_OnePulse_ConfigChannel+0x42>
          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800ce00:	6a2b      	ldr	r3, [r5, #32]
 800ce02:	69ea      	ldr	r2, [r5, #28]
 800ce04:	69a9      	ldr	r1, [r5, #24]
 800ce06:	6820      	ldr	r0, [r4, #0]
 800ce08:	f7fe fc9d 	bl	800b746 <TIM_TI2_SetConfig>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ce0c:	6822      	ldr	r2, [r4, #0]
 800ce0e:	6993      	ldr	r3, [r2, #24]
 800ce10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ce14:	6193      	str	r3, [r2, #24]
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ce16:	6822      	ldr	r2, [r4, #0]
 800ce18:	6891      	ldr	r1, [r2, #8]
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <HAL_TIM_OnePulse_ConfigChannel+0xfc>)
 800ce1c:	400b      	ands	r3, r1
 800ce1e:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800ce20:	6822      	ldr	r2, [r4, #0]
 800ce22:	6893      	ldr	r3, [r2, #8]
 800ce24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce28:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ce2a:	6822      	ldr	r2, [r4, #0]
 800ce2c:	6891      	ldr	r1, [r2, #8]
 800ce2e:	4b08      	ldr	r3, [pc, #32]	; (800ce50 <HAL_TIM_OnePulse_ConfigChannel+0x100>)
 800ce30:	400b      	ands	r3, r1
 800ce32:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	6893      	ldr	r3, [r2, #8]
 800ce38:	f043 0306 	orr.w	r3, r3, #6
 800ce3c:	6093      	str	r3, [r2, #8]
          break;
 800ce3e:	2000      	movs	r0, #0
 800ce40:	e7a7      	b.n	800cd92 <HAL_TIM_OnePulse_ConfigChannel+0x42>
    return HAL_ERROR;
 800ce42:	2001      	movs	r0, #1
}
 800ce44:	4770      	bx	lr
    __HAL_LOCK(htim);
 800ce46:	2002      	movs	r0, #2
 800ce48:	e7a9      	b.n	800cd9e <HAL_TIM_OnePulse_ConfigChannel+0x4e>
 800ce4a:	bf00      	nop
 800ce4c:	ffcfff8f 	.word	0xffcfff8f
 800ce50:	fffefff8 	.word	0xfffefff8

0800ce54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce54:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce56:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce58:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800ce60:	430a      	orrs	r2, r1
 800ce62:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce66:	6082      	str	r2, [r0, #8]
}
 800ce68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800ce6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	f000 809b 	beq.w	800cfae <HAL_TIM_ConfigOCrefClear+0x140>
{
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 800ce80:	2301      	movs	r3, #1
 800ce82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ce86:	2302      	movs	r3, #2
 800ce88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 800ce8c:	684b      	ldr	r3, [r1, #4]
 800ce8e:	b14b      	cbz	r3, 800cea4 <HAL_TIM_ConfigOCrefClear+0x36>
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d01b      	beq.n	800cecc <HAL_TIM_ConfigOCrefClear+0x5e>
 800ce94:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800ce96:	2301      	movs	r3, #1
 800ce98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800cea4:	6802      	ldr	r2, [r0, #0]
 800cea6:	6893      	ldr	r3, [r2, #8]
 800cea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ceac:	6093      	str	r3, [r2, #8]
    switch (Channel)
 800ceae:	2e14      	cmp	r6, #20
 800ceb0:	d87b      	bhi.n	800cfaa <HAL_TIM_ConfigOCrefClear+0x13c>
 800ceb2:	e8df f006 	tbb	[pc, r6]
 800ceb6:	7a1a      	.short	0x7a1a
 800ceb8:	7a2a7a7a 	.word	0x7a2a7a7a
 800cebc:	7a3a7a7a 	.word	0x7a3a7a7a
 800cec0:	7a4a7a7a 	.word	0x7a4a7a7a
 800cec4:	7a5a7a7a 	.word	0x7a5a7a7a
 800cec8:	7a7a      	.short	0x7a7a
 800ceca:	6a          	.byte	0x6a
 800cecb:	00          	.byte	0x00
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800cecc:	68c9      	ldr	r1, [r1, #12]
 800cece:	b131      	cbz	r1, 800cede <HAL_TIM_ConfigOCrefClear+0x70>
        htim->State = HAL_TIM_STATE_READY;
 800ced0:	2001      	movs	r0, #1
 800ced2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 800ced6:	2300      	movs	r3, #0
 800ced8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800cedc:	e7e1      	b.n	800cea2 <HAL_TIM_ConfigOCrefClear+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800cede:	692b      	ldr	r3, [r5, #16]
 800cee0:	68aa      	ldr	r2, [r5, #8]
 800cee2:	6800      	ldr	r0, [r0, #0]
 800cee4:	f7ff ffb6 	bl	800ce54 <TIM_ETR_SetConfig>
  if (status == HAL_OK)
 800cee8:	e7e1      	b.n	800ceae <HAL_TIM_ConfigOCrefClear+0x40>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800ceea:	682b      	ldr	r3, [r5, #0]
 800ceec:	b133      	cbz	r3, 800cefc <HAL_TIM_ConfigOCrefClear+0x8e>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	6993      	ldr	r3, [r2, #24]
 800cef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef6:	6193      	str	r3, [r2, #24]
 800cef8:	2000      	movs	r0, #0
 800cefa:	e7cc      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800cefc:	6822      	ldr	r2, [r4, #0]
 800cefe:	6993      	ldr	r3, [r2, #24]
 800cf00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf04:	6193      	str	r3, [r2, #24]
 800cf06:	2000      	movs	r0, #0
 800cf08:	e7c5      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cf0a:	682b      	ldr	r3, [r5, #0]
 800cf0c:	b133      	cbz	r3, 800cf1c <HAL_TIM_ConfigOCrefClear+0xae>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cf0e:	6822      	ldr	r2, [r4, #0]
 800cf10:	6993      	ldr	r3, [r2, #24]
 800cf12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf16:	6193      	str	r3, [r2, #24]
 800cf18:	2000      	movs	r0, #0
 800cf1a:	e7bc      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800cf1c:	6822      	ldr	r2, [r4, #0]
 800cf1e:	6993      	ldr	r3, [r2, #24]
 800cf20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf24:	6193      	str	r3, [r2, #24]
 800cf26:	2000      	movs	r0, #0
 800cf28:	e7b5      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cf2a:	682b      	ldr	r3, [r5, #0]
 800cf2c:	b133      	cbz	r3, 800cf3c <HAL_TIM_ConfigOCrefClear+0xce>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cf2e:	6822      	ldr	r2, [r4, #0]
 800cf30:	69d3      	ldr	r3, [r2, #28]
 800cf32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf36:	61d3      	str	r3, [r2, #28]
 800cf38:	2000      	movs	r0, #0
 800cf3a:	e7ac      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800cf3c:	6822      	ldr	r2, [r4, #0]
 800cf3e:	69d3      	ldr	r3, [r2, #28]
 800cf40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf44:	61d3      	str	r3, [r2, #28]
 800cf46:	2000      	movs	r0, #0
 800cf48:	e7a5      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	b133      	cbz	r3, 800cf5c <HAL_TIM_ConfigOCrefClear+0xee>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	69d3      	ldr	r3, [r2, #28]
 800cf52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf56:	61d3      	str	r3, [r2, #28]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e79c      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800cf5c:	6822      	ldr	r2, [r4, #0]
 800cf5e:	69d3      	ldr	r3, [r2, #28]
 800cf60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf64:	61d3      	str	r3, [r2, #28]
 800cf66:	2000      	movs	r0, #0
 800cf68:	e795      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cf6a:	682b      	ldr	r3, [r5, #0]
 800cf6c:	b133      	cbz	r3, 800cf7c <HAL_TIM_ConfigOCrefClear+0x10e>
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cf72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf76:	6553      	str	r3, [r2, #84]	; 0x54
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e78c      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cf80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf84:	6553      	str	r3, [r2, #84]	; 0x54
 800cf86:	2000      	movs	r0, #0
 800cf88:	e785      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800cf8a:	682b      	ldr	r3, [r5, #0]
 800cf8c:	b133      	cbz	r3, 800cf9c <HAL_TIM_ConfigOCrefClear+0x12e>
          SET_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cf8e:	6822      	ldr	r2, [r4, #0]
 800cf90:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cf92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf96:	6553      	str	r3, [r2, #84]	; 0x54
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e77c      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC6CE);
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cfa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfa4:	6553      	str	r3, [r2, #84]	; 0x54
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	e775      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
    switch (Channel)
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e773      	b.n	800ce96 <HAL_TIM_ConfigOCrefClear+0x28>
  __HAL_LOCK(htim);
 800cfae:	2002      	movs	r0, #2
}
 800cfb0:	4770      	bx	lr

0800cfb2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800cfb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	f000 808f 	beq.w	800d0da <HAL_TIM_ConfigClockSource+0x128>
{
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800cfcc:	6802      	ldr	r2, [r0, #0]
 800cfce:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfd0:	4b43      	ldr	r3, [pc, #268]	; (800d0e0 <HAL_TIM_ConfigClockSource+0x12e>)
 800cfd2:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800cfd4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cfd6:	680b      	ldr	r3, [r1, #0]
 800cfd8:	2b70      	cmp	r3, #112	; 0x70
 800cfda:	d055      	beq.n	800d088 <HAL_TIM_ConfigClockSource+0xd6>
 800cfdc:	d831      	bhi.n	800d042 <HAL_TIM_ConfigClockSource+0x90>
 800cfde:	2b50      	cmp	r3, #80	; 0x50
 800cfe0:	d06c      	beq.n	800d0bc <HAL_TIM_ConfigClockSource+0x10a>
 800cfe2:	d90c      	bls.n	800cffe <HAL_TIM_ConfigClockSource+0x4c>
 800cfe4:	2b60      	cmp	r3, #96	; 0x60
 800cfe6:	d12a      	bne.n	800d03e <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfe8:	68ca      	ldr	r2, [r1, #12]
 800cfea:	6849      	ldr	r1, [r1, #4]
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	f7fe fbc5 	bl	800b77c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cff2:	2160      	movs	r1, #96	; 0x60
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	f7fe fc0b 	bl	800b810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800cffa:	2000      	movs	r0, #0
      break;
 800cffc:	e035      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800cffe:	2b40      	cmp	r3, #64	; 0x40
 800d000:	d10a      	bne.n	800d018 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d002:	68ca      	ldr	r2, [r1, #12]
 800d004:	6849      	ldr	r1, [r1, #4]
 800d006:	6820      	ldr	r0, [r4, #0]
 800d008:	f7fe fb8a 	bl	800b720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d00c:	2140      	movs	r1, #64	; 0x40
 800d00e:	6820      	ldr	r0, [r4, #0]
 800d010:	f7fe fbfe 	bl	800b810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800d014:	2000      	movs	r0, #0
      break;
 800d016:	e028      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800d018:	d85b      	bhi.n	800d0d2 <HAL_TIM_ConfigClockSource+0x120>
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	d007      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
 800d01e:	d903      	bls.n	800d028 <HAL_TIM_ConfigClockSource+0x76>
 800d020:	2b30      	cmp	r3, #48	; 0x30
 800d022:	d004      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800d024:	2001      	movs	r0, #1
 800d026:	e020      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800d028:	b10b      	cbz	r3, 800d02e <HAL_TIM_ConfigClockSource+0x7c>
 800d02a:	2b10      	cmp	r3, #16
 800d02c:	d105      	bne.n	800d03a <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d02e:	4619      	mov	r1, r3
 800d030:	6820      	ldr	r0, [r4, #0]
 800d032:	f7fe fbed 	bl	800b810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800d036:	2000      	movs	r0, #0
      break;
 800d038:	e017      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800d03a:	2001      	movs	r0, #1
 800d03c:	e015      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
 800d03e:	2001      	movs	r0, #1
 800d040:	e013      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800d042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d046:	d02c      	beq.n	800d0a2 <HAL_TIM_ConfigClockSource+0xf0>
 800d048:	d90b      	bls.n	800d062 <HAL_TIM_ConfigClockSource+0xb0>
 800d04a:	4a26      	ldr	r2, [pc, #152]	; (800d0e4 <HAL_TIM_ConfigClockSource+0x132>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d0ee      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
 800d050:	d912      	bls.n	800d078 <HAL_TIM_ConfigClockSource+0xc6>
 800d052:	4a25      	ldr	r2, [pc, #148]	; (800d0e8 <HAL_TIM_ConfigClockSource+0x136>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d0ea      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
 800d058:	3210      	adds	r2, #16
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d0e7      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800d05e:	2001      	movs	r0, #1
 800d060:	e003      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800d062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d066:	d136      	bne.n	800d0d6 <HAL_TIM_ConfigClockSource+0x124>
 800d068:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800d06a:	2301      	movs	r3, #1
 800d06c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d070:	2300      	movs	r3, #0
 800d072:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d076:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800d078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d07c:	d0d7      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
 800d07e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d082:	d0d4      	beq.n	800d02e <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800d084:	2001      	movs	r0, #1
 800d086:	e7f0      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800d088:	68cb      	ldr	r3, [r1, #12]
 800d08a:	684a      	ldr	r2, [r1, #4]
 800d08c:	6889      	ldr	r1, [r1, #8]
 800d08e:	6820      	ldr	r0, [r4, #0]
 800d090:	f7ff fee0 	bl	800ce54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d09c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d09e:	2000      	movs	r0, #0
      break;
 800d0a0:	e7e3      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800d0a2:	68cb      	ldr	r3, [r1, #12]
 800d0a4:	684a      	ldr	r2, [r1, #4]
 800d0a6:	6889      	ldr	r1, [r1, #8]
 800d0a8:	6820      	ldr	r0, [r4, #0]
 800d0aa:	f7ff fed3 	bl	800ce54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0ae:	6822      	ldr	r2, [r4, #0]
 800d0b0:	6893      	ldr	r3, [r2, #8]
 800d0b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0b6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d0b8:	2000      	movs	r0, #0
      break;
 800d0ba:	e7d6      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0bc:	68ca      	ldr	r2, [r1, #12]
 800d0be:	6849      	ldr	r1, [r1, #4]
 800d0c0:	6820      	ldr	r0, [r4, #0]
 800d0c2:	f7fe fb2d 	bl	800b720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0c6:	2150      	movs	r1, #80	; 0x50
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	f7fe fba1 	bl	800b810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800d0ce:	2000      	movs	r0, #0
      break;
 800d0d0:	e7cb      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e7c9      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	e7c7      	b.n	800d06a <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800d0da:	2002      	movs	r0, #2
}
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	ffce0088 	.word	0xffce0088
 800d0e4:	00100020 	.word	0x00100020
 800d0e8:	00100030 	.word	0x00100030

0800d0ec <TIM_SlaveTimer_SetConfig>:
{
 800d0ec:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 800d0ee:	6804      	ldr	r4, [r0, #0]
 800d0f0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0f2:	4a4c      	ldr	r2, [pc, #304]	; (800d224 <TIM_SlaveTimer_SetConfig+0x138>)
 800d0f4:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d0f6:	684b      	ldr	r3, [r1, #4]
 800d0f8:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d0fa:	4a4b      	ldr	r2, [pc, #300]	; (800d228 <TIM_SlaveTimer_SetConfig+0x13c>)
 800d0fc:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d0fe:	680b      	ldr	r3, [r1, #0]
 800d100:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800d102:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800d104:	684b      	ldr	r3, [r1, #4]
 800d106:	2b60      	cmp	r3, #96	; 0x60
 800d108:	d068      	beq.n	800d1dc <TIM_SlaveTimer_SetConfig+0xf0>
 800d10a:	d81c      	bhi.n	800d146 <TIM_SlaveTimer_SetConfig+0x5a>
 800d10c:	2b40      	cmp	r3, #64	; 0x40
 800d10e:	d050      	beq.n	800d1b2 <TIM_SlaveTimer_SetConfig+0xc6>
 800d110:	d908      	bls.n	800d124 <TIM_SlaveTimer_SetConfig+0x38>
 800d112:	2b50      	cmp	r3, #80	; 0x50
 800d114:	d115      	bne.n	800d142 <TIM_SlaveTimer_SetConfig+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d116:	690a      	ldr	r2, [r1, #16]
 800d118:	6889      	ldr	r1, [r1, #8]
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	f7fe fb00 	bl	800b720 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800d120:	2000      	movs	r0, #0
      break;
 800d122:	e035      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d124:	2b20      	cmp	r3, #32
 800d126:	d060      	beq.n	800d1ea <TIM_SlaveTimer_SetConfig+0xfe>
 800d128:	d903      	bls.n	800d132 <TIM_SlaveTimer_SetConfig+0x46>
 800d12a:	2b30      	cmp	r3, #48	; 0x30
 800d12c:	d007      	beq.n	800d13e <TIM_SlaveTimer_SetConfig+0x52>
      status = HAL_ERROR;
 800d12e:	2001      	movs	r0, #1
 800d130:	e02e      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d132:	2b00      	cmp	r3, #0
 800d134:	d05b      	beq.n	800d1ee <TIM_SlaveTimer_SetConfig+0x102>
 800d136:	2b10      	cmp	r3, #16
 800d138:	d15b      	bne.n	800d1f2 <TIM_SlaveTimer_SetConfig+0x106>
 800d13a:	2000      	movs	r0, #0
 800d13c:	e028      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d13e:	2000      	movs	r0, #0
 800d140:	e026      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      status = HAL_ERROR;
 800d142:	2001      	movs	r0, #1
 800d144:	e024      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d146:	2b70      	cmp	r3, #112	; 0x70
 800d148:	d02b      	beq.n	800d1a2 <TIM_SlaveTimer_SetConfig+0xb6>
 800d14a:	d201      	bcs.n	800d150 <TIM_SlaveTimer_SetConfig+0x64>
      status = HAL_ERROR;
 800d14c:	2001      	movs	r0, #1
 800d14e:	e01f      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d150:	4a36      	ldr	r2, [pc, #216]	; (800d22c <TIM_SlaveTimer_SetConfig+0x140>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d04f      	beq.n	800d1f6 <TIM_SlaveTimer_SetConfig+0x10a>
 800d156:	d908      	bls.n	800d16a <TIM_SlaveTimer_SetConfig+0x7e>
 800d158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d15c:	d057      	beq.n	800d20e <TIM_SlaveTimer_SetConfig+0x122>
 800d15e:	d918      	bls.n	800d192 <TIM_SlaveTimer_SetConfig+0xa6>
 800d160:	4a33      	ldr	r2, [pc, #204]	; (800d230 <TIM_SlaveTimer_SetConfig+0x144>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d159      	bne.n	800d21a <TIM_SlaveTimer_SetConfig+0x12e>
 800d166:	2000      	movs	r0, #0
 800d168:	e012      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d16a:	3a30      	subs	r2, #48	; 0x30
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d044      	beq.n	800d1fa <TIM_SlaveTimer_SetConfig+0x10e>
 800d170:	d907      	bls.n	800d182 <TIM_SlaveTimer_SetConfig+0x96>
 800d172:	4a30      	ldr	r2, [pc, #192]	; (800d234 <TIM_SlaveTimer_SetConfig+0x148>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d046      	beq.n	800d206 <TIM_SlaveTimer_SetConfig+0x11a>
 800d178:	3210      	adds	r2, #16
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d145      	bne.n	800d20a <TIM_SlaveTimer_SetConfig+0x11e>
 800d17e:	2000      	movs	r0, #0
 800d180:	e006      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d186:	d03a      	beq.n	800d1fe <TIM_SlaveTimer_SetConfig+0x112>
 800d188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d18c:	d139      	bne.n	800d202 <TIM_SlaveTimer_SetConfig+0x116>
 800d18e:	2000      	movs	r0, #0
}
 800d190:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 800d192:	4a29      	ldr	r2, [pc, #164]	; (800d238 <TIM_SlaveTimer_SetConfig+0x14c>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d03c      	beq.n	800d212 <TIM_SlaveTimer_SetConfig+0x126>
 800d198:	3210      	adds	r2, #16
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d13b      	bne.n	800d216 <TIM_SlaveTimer_SetConfig+0x12a>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	e7f6      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 800d1a2:	690b      	ldr	r3, [r1, #16]
 800d1a4:	688a      	ldr	r2, [r1, #8]
 800d1a6:	68c9      	ldr	r1, [r1, #12]
 800d1a8:	6800      	ldr	r0, [r0, #0]
 800d1aa:	f7ff fe53 	bl	800ce54 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800d1ae:	2000      	movs	r0, #0
      break;
 800d1b0:	e7ee      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d1b2:	680b      	ldr	r3, [r1, #0]
 800d1b4:	2b05      	cmp	r3, #5
 800d1b6:	d032      	beq.n	800d21e <TIM_SlaveTimer_SetConfig+0x132>
      tmpccer = htim->Instance->CCER;
 800d1b8:	6803      	ldr	r3, [r0, #0]
 800d1ba:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d1bc:	6a1a      	ldr	r2, [r3, #32]
 800d1be:	f022 0201 	bic.w	r2, r2, #1
 800d1c2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d1c4:	6802      	ldr	r2, [r0, #0]
 800d1c6:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d1cc:	6909      	ldr	r1, [r1, #16]
 800d1ce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800d1d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800d1d4:	6803      	ldr	r3, [r0, #0]
 800d1d6:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d1d8:	2000      	movs	r0, #0
      break;
 800d1da:	e7d9      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1dc:	690a      	ldr	r2, [r1, #16]
 800d1de:	6889      	ldr	r1, [r1, #8]
 800d1e0:	6800      	ldr	r0, [r0, #0]
 800d1e2:	f7fe facb 	bl	800b77c <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800d1e6:	2000      	movs	r0, #0
      break;
 800d1e8:	e7d2      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	e7d0      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e7ce      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      status = HAL_ERROR;
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	e7cc      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	e7ca      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e7c8      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d1fe:	2000      	movs	r0, #0
 800d200:	e7c6      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      status = HAL_ERROR;
 800d202:	2001      	movs	r0, #1
 800d204:	e7c4      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d206:	2000      	movs	r0, #0
 800d208:	e7c2      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      status = HAL_ERROR;
 800d20a:	2001      	movs	r0, #1
 800d20c:	e7c0      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
  switch (sSlaveConfig->InputTrigger)
 800d20e:	2000      	movs	r0, #0
 800d210:	e7be      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d212:	2000      	movs	r0, #0
 800d214:	e7bc      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
      status = HAL_ERROR;
 800d216:	2001      	movs	r0, #1
 800d218:	e7ba      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d21a:	2001      	movs	r0, #1
 800d21c:	e7b8      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
        return HAL_ERROR;
 800d21e:	2001      	movs	r0, #1
 800d220:	e7b6      	b.n	800d190 <TIM_SlaveTimer_SetConfig+0xa4>
 800d222:	bf00      	nop
 800d224:	ffcfff8f 	.word	0xffcfff8f
 800d228:	fffefff8 	.word	0xfffefff8
 800d22c:	00100050 	.word	0x00100050
 800d230:	00200010 	.word	0x00200010
 800d234:	00100030 	.word	0x00100030
 800d238:	00100060 	.word	0x00100060

0800d23c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800d23c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d240:	2b01      	cmp	r3, #1
 800d242:	d022      	beq.n	800d28a <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 800d244:	b510      	push	{r4, lr}
 800d246:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800d248:	2301      	movs	r3, #1
 800d24a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d24e:	2302      	movs	r3, #2
 800d250:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d254:	f7ff ff4a 	bl	800d0ec <TIM_SlaveTimer_SetConfig>
 800d258:	b980      	cbnz	r0, 800d27c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	68d3      	ldr	r3, [r2, #12]
 800d25e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d262:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d264:	6822      	ldr	r2, [r4, #0]
 800d266:	68d3      	ldr	r3, [r2, #12]
 800d268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d26c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800d26e:	2301      	movs	r3, #1
 800d270:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d274:	2300      	movs	r3, #0
 800d276:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d27a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800d27c:	2001      	movs	r0, #1
 800d27e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d282:	2300      	movs	r3, #0
 800d284:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800d288:	e7f7      	b.n	800d27a <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 800d28a:	2002      	movs	r0, #2
}
 800d28c:	4770      	bx	lr

0800d28e <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 800d28e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d292:	2b01      	cmp	r3, #1
 800d294:	d022      	beq.n	800d2dc <HAL_TIM_SlaveConfigSynchro_IT+0x4e>
{
 800d296:	b510      	push	{r4, lr}
 800d298:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800d29a:	2301      	movs	r3, #1
 800d29c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d2a6:	f7ff ff21 	bl	800d0ec <TIM_SlaveTimer_SetConfig>
 800d2aa:	b980      	cbnz	r0, 800d2ce <HAL_TIM_SlaveConfigSynchro_IT+0x40>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800d2ac:	6822      	ldr	r2, [r4, #0]
 800d2ae:	68d3      	ldr	r3, [r2, #12]
 800d2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d2b6:	6822      	ldr	r2, [r4, #0]
 800d2b8:	68d3      	ldr	r3, [r2, #12]
 800d2ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2be:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d2cc:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800d2da:	e7f7      	b.n	800d2cc <HAL_TIM_SlaveConfigSynchro_IT+0x3e>
  __HAL_LOCK(htim);
 800d2dc:	2002      	movs	r0, #2
}
 800d2de:	4770      	bx	lr

0800d2e0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d2e0:	f001 011f 	and.w	r1, r1, #31
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d2ea:	6a03      	ldr	r3, [r0, #32]
 800d2ec:	ea23 030c 	bic.w	r3, r3, ip
 800d2f0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2f2:	6a03      	ldr	r3, [r0, #32]
 800d2f4:	fa02 f101 	lsl.w	r1, r2, r1
 800d2f8:	430b      	orrs	r3, r1
 800d2fa:	6203      	str	r3, [r0, #32]
}
 800d2fc:	4770      	bx	lr

0800d2fe <HAL_TIM_OC_Start>:
{
 800d2fe:	b510      	push	{r4, lr}
 800d300:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d302:	4608      	mov	r0, r1
 800d304:	2900      	cmp	r1, #0
 800d306:	d14e      	bne.n	800d3a6 <HAL_TIM_OC_Start+0xa8>
 800d308:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	3b01      	subs	r3, #1
 800d310:	bf18      	it	ne
 800d312:	2301      	movne	r3, #1
 800d314:	2b00      	cmp	r3, #0
 800d316:	f040 809b 	bne.w	800d450 <HAL_TIM_OC_Start+0x152>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d16e      	bne.n	800d3fc <HAL_TIM_OC_Start+0xfe>
 800d31e:	2302      	movs	r3, #2
 800d320:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d324:	2201      	movs	r2, #1
 800d326:	4601      	mov	r1, r0
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	f7ff ffd9 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	4949      	ldr	r1, [pc, #292]	; (800d458 <HAL_TIM_OC_Start+0x15a>)
 800d332:	4a4a      	ldr	r2, [pc, #296]	; (800d45c <HAL_TIM_OC_Start+0x15e>)
 800d334:	4293      	cmp	r3, r2
 800d336:	bf18      	it	ne
 800d338:	428b      	cmpne	r3, r1
 800d33a:	d00b      	beq.n	800d354 <HAL_TIM_OC_Start+0x56>
 800d33c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d340:	4293      	cmp	r3, r2
 800d342:	d007      	beq.n	800d354 <HAL_TIM_OC_Start+0x56>
 800d344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d348:	4293      	cmp	r3, r2
 800d34a:	d003      	beq.n	800d354 <HAL_TIM_OC_Start+0x56>
 800d34c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d350:	4293      	cmp	r3, r2
 800d352:	d103      	bne.n	800d35c <HAL_TIM_OC_Start+0x5e>
    __HAL_TIM_MOE_ENABLE(htim);
 800d354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d35a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	4a3e      	ldr	r2, [pc, #248]	; (800d458 <HAL_TIM_OC_Start+0x15a>)
 800d360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d364:	bf18      	it	ne
 800d366:	4293      	cmpne	r3, r2
 800d368:	d064      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d36a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d36e:	4293      	cmp	r3, r2
 800d370:	d060      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d376:	4293      	cmp	r3, r2
 800d378:	d05c      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d37a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d37e:	4293      	cmp	r3, r2
 800d380:	d058      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d382:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d386:	4293      	cmp	r3, r2
 800d388:	d054      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d38a:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800d38e:	4293      	cmp	r3, r2
 800d390:	d050      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
 800d392:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d396:	4293      	cmp	r3, r2
 800d398:	d04c      	beq.n	800d434 <HAL_TIM_OC_Start+0x136>
    __HAL_TIM_ENABLE(htim);
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	f042 0201 	orr.w	r2, r2, #1
 800d3a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e055      	b.n	800d452 <HAL_TIM_OC_Start+0x154>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d3a6:	2904      	cmp	r1, #4
 800d3a8:	d00c      	beq.n	800d3c4 <HAL_TIM_OC_Start+0xc6>
 800d3aa:	2908      	cmp	r1, #8
 800d3ac:	d011      	beq.n	800d3d2 <HAL_TIM_OC_Start+0xd4>
 800d3ae:	290c      	cmp	r1, #12
 800d3b0:	d016      	beq.n	800d3e0 <HAL_TIM_OC_Start+0xe2>
 800d3b2:	2910      	cmp	r1, #16
 800d3b4:	d01b      	beq.n	800d3ee <HAL_TIM_OC_Start+0xf0>
 800d3b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	bf18      	it	ne
 800d3c0:	2301      	movne	r3, #1
 800d3c2:	e7a7      	b.n	800d314 <HAL_TIM_OC_Start+0x16>
 800d3c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	bf18      	it	ne
 800d3ce:	2301      	movne	r3, #1
 800d3d0:	e7a0      	b.n	800d314 <HAL_TIM_OC_Start+0x16>
 800d3d2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	bf18      	it	ne
 800d3dc:	2301      	movne	r3, #1
 800d3de:	e799      	b.n	800d314 <HAL_TIM_OC_Start+0x16>
 800d3e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	bf18      	it	ne
 800d3ea:	2301      	movne	r3, #1
 800d3ec:	e792      	b.n	800d314 <HAL_TIM_OC_Start+0x16>
 800d3ee:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	bf18      	it	ne
 800d3f8:	2301      	movne	r3, #1
 800d3fa:	e78b      	b.n	800d314 <HAL_TIM_OC_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3fc:	2804      	cmp	r0, #4
 800d3fe:	d009      	beq.n	800d414 <HAL_TIM_OC_Start+0x116>
 800d400:	2808      	cmp	r0, #8
 800d402:	d00b      	beq.n	800d41c <HAL_TIM_OC_Start+0x11e>
 800d404:	280c      	cmp	r0, #12
 800d406:	d00d      	beq.n	800d424 <HAL_TIM_OC_Start+0x126>
 800d408:	2810      	cmp	r0, #16
 800d40a:	d00f      	beq.n	800d42c <HAL_TIM_OC_Start+0x12e>
 800d40c:	2302      	movs	r3, #2
 800d40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d412:	e787      	b.n	800d324 <HAL_TIM_OC_Start+0x26>
 800d414:	2302      	movs	r3, #2
 800d416:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d41a:	e783      	b.n	800d324 <HAL_TIM_OC_Start+0x26>
 800d41c:	2302      	movs	r3, #2
 800d41e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d422:	e77f      	b.n	800d324 <HAL_TIM_OC_Start+0x26>
 800d424:	2302      	movs	r3, #2
 800d426:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d42a:	e77b      	b.n	800d324 <HAL_TIM_OC_Start+0x26>
 800d42c:	2302      	movs	r3, #2
 800d42e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d432:	e777      	b.n	800d324 <HAL_TIM_OC_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d434:	6899      	ldr	r1, [r3, #8]
 800d436:	4a0a      	ldr	r2, [pc, #40]	; (800d460 <HAL_TIM_OC_Start+0x162>)
 800d438:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d43a:	2a06      	cmp	r2, #6
 800d43c:	bf18      	it	ne
 800d43e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800d442:	d007      	beq.n	800d454 <HAL_TIM_OC_Start+0x156>
      __HAL_TIM_ENABLE(htim);
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	f042 0201 	orr.w	r2, r2, #1
 800d44a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800d44c:	2000      	movs	r0, #0
 800d44e:	e000      	b.n	800d452 <HAL_TIM_OC_Start+0x154>
    return HAL_ERROR;
 800d450:	2001      	movs	r0, #1
}
 800d452:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800d454:	2000      	movs	r0, #0
 800d456:	e7fc      	b.n	800d452 <HAL_TIM_OC_Start+0x154>
 800d458:	40010000 	.word	0x40010000
 800d45c:	40010400 	.word	0x40010400
 800d460:	00010007 	.word	0x00010007

0800d464 <HAL_TIM_OC_Stop>:
{
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d46a:	2200      	movs	r2, #0
 800d46c:	6800      	ldr	r0, [r0, #0]
 800d46e:	f7ff ff37 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	4928      	ldr	r1, [pc, #160]	; (800d518 <HAL_TIM_OC_Stop+0xb4>)
 800d476:	4a29      	ldr	r2, [pc, #164]	; (800d51c <HAL_TIM_OC_Stop+0xb8>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	bf18      	it	ne
 800d47c:	428b      	cmpne	r3, r1
 800d47e:	d00b      	beq.n	800d498 <HAL_TIM_OC_Stop+0x34>
 800d480:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d484:	4293      	cmp	r3, r2
 800d486:	d007      	beq.n	800d498 <HAL_TIM_OC_Stop+0x34>
 800d488:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <HAL_TIM_OC_Stop+0x34>
 800d490:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d494:	4293      	cmp	r3, r2
 800d496:	d10d      	bne.n	800d4b4 <HAL_TIM_OC_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800d498:	6a19      	ldr	r1, [r3, #32]
 800d49a:	f241 1211 	movw	r2, #4369	; 0x1111
 800d49e:	4211      	tst	r1, r2
 800d4a0:	d108      	bne.n	800d4b4 <HAL_TIM_OC_Stop+0x50>
 800d4a2:	6a19      	ldr	r1, [r3, #32]
 800d4a4:	f240 4244 	movw	r2, #1092	; 0x444
 800d4a8:	4211      	tst	r1, r2
 800d4aa:	d103      	bne.n	800d4b4 <HAL_TIM_OC_Stop+0x50>
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4b2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	6a19      	ldr	r1, [r3, #32]
 800d4b8:	f241 1211 	movw	r2, #4369	; 0x1111
 800d4bc:	4211      	tst	r1, r2
 800d4be:	d108      	bne.n	800d4d2 <HAL_TIM_OC_Stop+0x6e>
 800d4c0:	6a19      	ldr	r1, [r3, #32]
 800d4c2:	f240 4244 	movw	r2, #1092	; 0x444
 800d4c6:	4211      	tst	r1, r2
 800d4c8:	d103      	bne.n	800d4d2 <HAL_TIM_OC_Stop+0x6e>
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	f022 0201 	bic.w	r2, r2, #1
 800d4d0:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d4d2:	b925      	cbnz	r5, 800d4de <HAL_TIM_OC_Stop+0x7a>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800d4da:	2000      	movs	r0, #0
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d4de:	2d04      	cmp	r5, #4
 800d4e0:	d009      	beq.n	800d4f6 <HAL_TIM_OC_Stop+0x92>
 800d4e2:	2d08      	cmp	r5, #8
 800d4e4:	d00b      	beq.n	800d4fe <HAL_TIM_OC_Stop+0x9a>
 800d4e6:	2d0c      	cmp	r5, #12
 800d4e8:	d00d      	beq.n	800d506 <HAL_TIM_OC_Stop+0xa2>
 800d4ea:	2d10      	cmp	r5, #16
 800d4ec:	d00f      	beq.n	800d50e <HAL_TIM_OC_Stop+0xaa>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4f4:	e7f1      	b.n	800d4da <HAL_TIM_OC_Stop+0x76>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d4fc:	e7ed      	b.n	800d4da <HAL_TIM_OC_Stop+0x76>
 800d4fe:	2301      	movs	r3, #1
 800d500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d504:	e7e9      	b.n	800d4da <HAL_TIM_OC_Stop+0x76>
 800d506:	2301      	movs	r3, #1
 800d508:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d50c:	e7e5      	b.n	800d4da <HAL_TIM_OC_Stop+0x76>
 800d50e:	2301      	movs	r3, #1
 800d510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d514:	e7e1      	b.n	800d4da <HAL_TIM_OC_Stop+0x76>
 800d516:	bf00      	nop
 800d518:	40010000 	.word	0x40010000
 800d51c:	40010400 	.word	0x40010400

0800d520 <HAL_TIM_OC_Start_IT>:
{
 800d520:	b510      	push	{r4, lr}
 800d522:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d524:	4608      	mov	r0, r1
 800d526:	b9c9      	cbnz	r1, 800d55c <HAL_TIM_OC_Start_IT+0x3c>
 800d528:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	3b01      	subs	r3, #1
 800d530:	bf18      	it	ne
 800d532:	2301      	movne	r3, #1
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 80be 	bne.w	800d6b6 <HAL_TIM_OC_Start_IT+0x196>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d139      	bne.n	800d5b2 <HAL_TIM_OC_Start_IT+0x92>
 800d53e:	2302      	movs	r3, #2
 800d540:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 800d544:	280c      	cmp	r0, #12
 800d546:	f200 80b8 	bhi.w	800d6ba <HAL_TIM_OC_Start_IT+0x19a>
 800d54a:	e8df f000 	tbb	[pc, r0]
 800d54e:	b64e      	.short	0xb64e
 800d550:	b694b6b6 	.word	0xb694b6b6
 800d554:	b69ab6b6 	.word	0xb69ab6b6
 800d558:	b6b6      	.short	0xb6b6
 800d55a:	a0          	.byte	0xa0
 800d55b:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d55c:	2904      	cmp	r1, #4
 800d55e:	d00c      	beq.n	800d57a <HAL_TIM_OC_Start_IT+0x5a>
 800d560:	2908      	cmp	r1, #8
 800d562:	d011      	beq.n	800d588 <HAL_TIM_OC_Start_IT+0x68>
 800d564:	290c      	cmp	r1, #12
 800d566:	d016      	beq.n	800d596 <HAL_TIM_OC_Start_IT+0x76>
 800d568:	2910      	cmp	r1, #16
 800d56a:	d01b      	beq.n	800d5a4 <HAL_TIM_OC_Start_IT+0x84>
 800d56c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d570:	b2db      	uxtb	r3, r3
 800d572:	3b01      	subs	r3, #1
 800d574:	bf18      	it	ne
 800d576:	2301      	movne	r3, #1
 800d578:	e7dc      	b.n	800d534 <HAL_TIM_OC_Start_IT+0x14>
 800d57a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	3b01      	subs	r3, #1
 800d582:	bf18      	it	ne
 800d584:	2301      	movne	r3, #1
 800d586:	e7d5      	b.n	800d534 <HAL_TIM_OC_Start_IT+0x14>
 800d588:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	3b01      	subs	r3, #1
 800d590:	bf18      	it	ne
 800d592:	2301      	movne	r3, #1
 800d594:	e7ce      	b.n	800d534 <HAL_TIM_OC_Start_IT+0x14>
 800d596:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	3b01      	subs	r3, #1
 800d59e:	bf18      	it	ne
 800d5a0:	2301      	movne	r3, #1
 800d5a2:	e7c7      	b.n	800d534 <HAL_TIM_OC_Start_IT+0x14>
 800d5a4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	bf18      	it	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	e7c0      	b.n	800d534 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5b2:	2804      	cmp	r0, #4
 800d5b4:	d009      	beq.n	800d5ca <HAL_TIM_OC_Start_IT+0xaa>
 800d5b6:	2808      	cmp	r0, #8
 800d5b8:	d00b      	beq.n	800d5d2 <HAL_TIM_OC_Start_IT+0xb2>
 800d5ba:	280c      	cmp	r0, #12
 800d5bc:	d00d      	beq.n	800d5da <HAL_TIM_OC_Start_IT+0xba>
 800d5be:	2810      	cmp	r0, #16
 800d5c0:	d00f      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0xc2>
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c8:	e7bc      	b.n	800d544 <HAL_TIM_OC_Start_IT+0x24>
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d5d0:	e7b8      	b.n	800d544 <HAL_TIM_OC_Start_IT+0x24>
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d5d8:	e7b4      	b.n	800d544 <HAL_TIM_OC_Start_IT+0x24>
 800d5da:	2302      	movs	r3, #2
 800d5dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d5e0:	e7b0      	b.n	800d544 <HAL_TIM_OC_Start_IT+0x24>
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5e8:	e7ac      	b.n	800d544 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d5ea:	6822      	ldr	r2, [r4, #0]
 800d5ec:	68d3      	ldr	r3, [r2, #12]
 800d5ee:	f043 0302 	orr.w	r3, r3, #2
 800d5f2:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	4601      	mov	r1, r0
 800d5f8:	6820      	ldr	r0, [r4, #0]
 800d5fa:	f7ff fe71 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	4930      	ldr	r1, [pc, #192]	; (800d6c4 <HAL_TIM_OC_Start_IT+0x1a4>)
 800d602:	4a31      	ldr	r2, [pc, #196]	; (800d6c8 <HAL_TIM_OC_Start_IT+0x1a8>)
 800d604:	4293      	cmp	r3, r2
 800d606:	bf18      	it	ne
 800d608:	428b      	cmpne	r3, r1
 800d60a:	d00b      	beq.n	800d624 <HAL_TIM_OC_Start_IT+0x104>
 800d60c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d610:	4293      	cmp	r3, r2
 800d612:	d007      	beq.n	800d624 <HAL_TIM_OC_Start_IT+0x104>
 800d614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d618:	4293      	cmp	r3, r2
 800d61a:	d003      	beq.n	800d624 <HAL_TIM_OC_Start_IT+0x104>
 800d61c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d620:	4293      	cmp	r3, r2
 800d622:	d103      	bne.n	800d62c <HAL_TIM_OC_Start_IT+0x10c>
      __HAL_TIM_MOE_ENABLE(htim);
 800d624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d62a:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	4a25      	ldr	r2, [pc, #148]	; (800d6c4 <HAL_TIM_OC_Start_IT+0x1a4>)
 800d630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d634:	bf18      	it	ne
 800d636:	4293      	cmpne	r3, r2
 800d638:	d02f      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d63a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d63e:	4293      	cmp	r3, r2
 800d640:	d02b      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d646:	4293      	cmp	r3, r2
 800d648:	d027      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d64a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d64e:	4293      	cmp	r3, r2
 800d650:	d023      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d652:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d656:	4293      	cmp	r3, r2
 800d658:	d01f      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d65a:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800d65e:	4293      	cmp	r3, r2
 800d660:	d01b      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
 800d662:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d666:	4293      	cmp	r3, r2
 800d668:	d017      	beq.n	800d69a <HAL_TIM_OC_Start_IT+0x17a>
      __HAL_TIM_ENABLE(htim);
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	f042 0201 	orr.w	r2, r2, #1
 800d670:	601a      	str	r2, [r3, #0]
 800d672:	2000      	movs	r0, #0
 800d674:	e022      	b.n	800d6bc <HAL_TIM_OC_Start_IT+0x19c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d676:	6822      	ldr	r2, [r4, #0]
 800d678:	68d3      	ldr	r3, [r2, #12]
 800d67a:	f043 0304 	orr.w	r3, r3, #4
 800d67e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d680:	e7b8      	b.n	800d5f4 <HAL_TIM_OC_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	68d3      	ldr	r3, [r2, #12]
 800d686:	f043 0308 	orr.w	r3, r3, #8
 800d68a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d68c:	e7b2      	b.n	800d5f4 <HAL_TIM_OC_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d68e:	6822      	ldr	r2, [r4, #0]
 800d690:	68d3      	ldr	r3, [r2, #12]
 800d692:	f043 0310 	orr.w	r3, r3, #16
 800d696:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d698:	e7ac      	b.n	800d5f4 <HAL_TIM_OC_Start_IT+0xd4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d69a:	6899      	ldr	r1, [r3, #8]
 800d69c:	4a0b      	ldr	r2, [pc, #44]	; (800d6cc <HAL_TIM_OC_Start_IT+0x1ac>)
 800d69e:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6a0:	2a06      	cmp	r2, #6
 800d6a2:	bf18      	it	ne
 800d6a4:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800d6a8:	d009      	beq.n	800d6be <HAL_TIM_OC_Start_IT+0x19e>
        __HAL_TIM_ENABLE(htim);
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	f042 0201 	orr.w	r2, r2, #1
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e002      	b.n	800d6bc <HAL_TIM_OC_Start_IT+0x19c>
    return HAL_ERROR;
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	e000      	b.n	800d6bc <HAL_TIM_OC_Start_IT+0x19c>
  switch (Channel)
 800d6ba:	2001      	movs	r0, #1
}
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e7fc      	b.n	800d6bc <HAL_TIM_OC_Start_IT+0x19c>
 800d6c2:	bf00      	nop
 800d6c4:	40010000 	.word	0x40010000
 800d6c8:	40010400 	.word	0x40010400
 800d6cc:	00010007 	.word	0x00010007

0800d6d0 <HAL_TIM_OC_Stop_IT>:
{
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	460c      	mov	r4, r1
  switch (Channel)
 800d6d6:	290c      	cmp	r1, #12
 800d6d8:	d87b      	bhi.n	800d7d2 <HAL_TIM_OC_Stop_IT+0x102>
 800d6da:	e8df f001 	tbb	[pc, r1]
 800d6de:	7a07      	.short	0x7a07
 800d6e0:	7a477a7a 	.word	0x7a477a7a
 800d6e4:	7a4d7a7a 	.word	0x7a4d7a7a
 800d6e8:	7a7a      	.short	0x7a7a
 800d6ea:	53          	.byte	0x53
 800d6eb:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d6ec:	6802      	ldr	r2, [r0, #0]
 800d6ee:	68d3      	ldr	r3, [r2, #12]
 800d6f0:	f023 0302 	bic.w	r3, r3, #2
 800d6f4:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	6828      	ldr	r0, [r5, #0]
 800d6fc:	f7ff fdf0 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	4935      	ldr	r1, [pc, #212]	; (800d7d8 <HAL_TIM_OC_Stop_IT+0x108>)
 800d704:	4a35      	ldr	r2, [pc, #212]	; (800d7dc <HAL_TIM_OC_Stop_IT+0x10c>)
 800d706:	4293      	cmp	r3, r2
 800d708:	bf18      	it	ne
 800d70a:	428b      	cmpne	r3, r1
 800d70c:	d00b      	beq.n	800d726 <HAL_TIM_OC_Stop_IT+0x56>
 800d70e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d712:	4293      	cmp	r3, r2
 800d714:	d007      	beq.n	800d726 <HAL_TIM_OC_Stop_IT+0x56>
 800d716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d003      	beq.n	800d726 <HAL_TIM_OC_Stop_IT+0x56>
 800d71e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d722:	4293      	cmp	r3, r2
 800d724:	d10d      	bne.n	800d742 <HAL_TIM_OC_Stop_IT+0x72>
      __HAL_TIM_MOE_DISABLE(htim);
 800d726:	6a19      	ldr	r1, [r3, #32]
 800d728:	f241 1211 	movw	r2, #4369	; 0x1111
 800d72c:	4211      	tst	r1, r2
 800d72e:	d108      	bne.n	800d742 <HAL_TIM_OC_Stop_IT+0x72>
 800d730:	6a19      	ldr	r1, [r3, #32]
 800d732:	f240 4244 	movw	r2, #1092	; 0x444
 800d736:	4211      	tst	r1, r2
 800d738:	d103      	bne.n	800d742 <HAL_TIM_OC_Stop_IT+0x72>
 800d73a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d73c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d740:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	6a19      	ldr	r1, [r3, #32]
 800d746:	f241 1211 	movw	r2, #4369	; 0x1111
 800d74a:	4211      	tst	r1, r2
 800d74c:	d108      	bne.n	800d760 <HAL_TIM_OC_Stop_IT+0x90>
 800d74e:	6a19      	ldr	r1, [r3, #32]
 800d750:	f240 4244 	movw	r2, #1092	; 0x444
 800d754:	4211      	tst	r1, r2
 800d756:	d103      	bne.n	800d760 <HAL_TIM_OC_Stop_IT+0x90>
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	f022 0201 	bic.w	r2, r2, #1
 800d75e:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d760:	b9b4      	cbnz	r4, 800d790 <HAL_TIM_OC_Stop_IT+0xc0>
 800d762:	2301      	movs	r3, #1
 800d764:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 800d768:	2000      	movs	r0, #0
 800d76a:	e033      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d76c:	6802      	ldr	r2, [r0, #0]
 800d76e:	68d3      	ldr	r3, [r2, #12]
 800d770:	f023 0304 	bic.w	r3, r3, #4
 800d774:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d776:	e7be      	b.n	800d6f6 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d778:	6802      	ldr	r2, [r0, #0]
 800d77a:	68d3      	ldr	r3, [r2, #12]
 800d77c:	f023 0308 	bic.w	r3, r3, #8
 800d780:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d782:	e7b8      	b.n	800d6f6 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d784:	6802      	ldr	r2, [r0, #0]
 800d786:	68d3      	ldr	r3, [r2, #12]
 800d788:	f023 0310 	bic.w	r3, r3, #16
 800d78c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800d78e:	e7b2      	b.n	800d6f6 <HAL_TIM_OC_Stop_IT+0x26>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d790:	2c04      	cmp	r4, #4
 800d792:	d00a      	beq.n	800d7aa <HAL_TIM_OC_Stop_IT+0xda>
 800d794:	2c08      	cmp	r4, #8
 800d796:	d00d      	beq.n	800d7b4 <HAL_TIM_OC_Stop_IT+0xe4>
 800d798:	2c0c      	cmp	r4, #12
 800d79a:	d010      	beq.n	800d7be <HAL_TIM_OC_Stop_IT+0xee>
 800d79c:	2c10      	cmp	r4, #16
 800d79e:	d013      	beq.n	800d7c8 <HAL_TIM_OC_Stop_IT+0xf8>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	e014      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e00f      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e00a      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e005      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e000      	b.n	800d7d4 <HAL_TIM_OC_Stop_IT+0x104>
  switch (Channel)
 800d7d2:	2001      	movs	r0, #1
}
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40010000 	.word	0x40010000
 800d7dc:	40010400 	.word	0x40010400

0800d7e0 <HAL_TIM_OC_Start_DMA>:
{
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4694      	mov	ip, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	2900      	cmp	r1, #0
 800d7ea:	d132      	bne.n	800d852 <HAL_TIM_OC_Start_DMA+0x72>
 800d7ec:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800d7f0:	b2c0      	uxtb	r0, r0
 800d7f2:	2802      	cmp	r0, #2
 800d7f4:	bf14      	ite	ne
 800d7f6:	2000      	movne	r0, #0
 800d7f8:	2001      	moveq	r0, #1
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	f040 814f 	bne.w	800da9e <HAL_TIM_OC_Start_DMA+0x2be>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d800:	2d00      	cmp	r5, #0
 800d802:	d156      	bne.n	800d8b2 <HAL_TIM_OC_Start_DMA+0xd2>
 800d804:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800d808:	b2d2      	uxtb	r2, r2
 800d80a:	2a01      	cmp	r2, #1
 800d80c:	bf14      	ite	ne
 800d80e:	2200      	movne	r2, #0
 800d810:	2201      	moveq	r2, #1
 800d812:	2a00      	cmp	r2, #0
 800d814:	f000 8145 	beq.w	800daa2 <HAL_TIM_OC_Start_DMA+0x2c2>
    if ((pData == NULL) || (Length == 0U))
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf18      	it	ne
 800d81c:	f1bc 0f00 	cmpne.w	ip, #0
 800d820:	f000 8141 	beq.w	800daa6 <HAL_TIM_OC_Start_DMA+0x2c6>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d824:	2d00      	cmp	r5, #0
 800d826:	d174      	bne.n	800d912 <HAL_TIM_OC_Start_DMA+0x132>
 800d828:	2202      	movs	r2, #2
 800d82a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 800d82e:	2d0c      	cmp	r5, #12
 800d830:	f200 813b 	bhi.w	800daaa <HAL_TIM_OC_Start_DMA+0x2ca>
 800d834:	e8df f015 	tbh	[pc, r5, lsl #1]
 800d838:	01390089 	.word	0x01390089
 800d83c:	01390139 	.word	0x01390139
 800d840:	013900e1 	.word	0x013900e1
 800d844:	01390139 	.word	0x01390139
 800d848:	013900f8 	.word	0x013900f8
 800d84c:	01390139 	.word	0x01390139
 800d850:	010f      	.short	0x010f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d852:	2904      	cmp	r1, #4
 800d854:	d00d      	beq.n	800d872 <HAL_TIM_OC_Start_DMA+0x92>
 800d856:	2908      	cmp	r1, #8
 800d858:	d013      	beq.n	800d882 <HAL_TIM_OC_Start_DMA+0xa2>
 800d85a:	290c      	cmp	r1, #12
 800d85c:	d019      	beq.n	800d892 <HAL_TIM_OC_Start_DMA+0xb2>
 800d85e:	2910      	cmp	r1, #16
 800d860:	d01f      	beq.n	800d8a2 <HAL_TIM_OC_Start_DMA+0xc2>
 800d862:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800d866:	b2c0      	uxtb	r0, r0
 800d868:	2802      	cmp	r0, #2
 800d86a:	bf14      	ite	ne
 800d86c:	2000      	movne	r0, #0
 800d86e:	2001      	moveq	r0, #1
 800d870:	e7c3      	b.n	800d7fa <HAL_TIM_OC_Start_DMA+0x1a>
 800d872:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800d876:	b2c0      	uxtb	r0, r0
 800d878:	2802      	cmp	r0, #2
 800d87a:	bf14      	ite	ne
 800d87c:	2000      	movne	r0, #0
 800d87e:	2001      	moveq	r0, #1
 800d880:	e7bb      	b.n	800d7fa <HAL_TIM_OC_Start_DMA+0x1a>
 800d882:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800d886:	b2c0      	uxtb	r0, r0
 800d888:	2802      	cmp	r0, #2
 800d88a:	bf14      	ite	ne
 800d88c:	2000      	movne	r0, #0
 800d88e:	2001      	moveq	r0, #1
 800d890:	e7b3      	b.n	800d7fa <HAL_TIM_OC_Start_DMA+0x1a>
 800d892:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800d896:	b2c0      	uxtb	r0, r0
 800d898:	2802      	cmp	r0, #2
 800d89a:	bf14      	ite	ne
 800d89c:	2000      	movne	r0, #0
 800d89e:	2001      	moveq	r0, #1
 800d8a0:	e7ab      	b.n	800d7fa <HAL_TIM_OC_Start_DMA+0x1a>
 800d8a2:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800d8a6:	b2c0      	uxtb	r0, r0
 800d8a8:	2802      	cmp	r0, #2
 800d8aa:	bf14      	ite	ne
 800d8ac:	2000      	movne	r0, #0
 800d8ae:	2001      	moveq	r0, #1
 800d8b0:	e7a3      	b.n	800d7fa <HAL_TIM_OC_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d8b2:	2d04      	cmp	r5, #4
 800d8b4:	d00d      	beq.n	800d8d2 <HAL_TIM_OC_Start_DMA+0xf2>
 800d8b6:	2d08      	cmp	r5, #8
 800d8b8:	d013      	beq.n	800d8e2 <HAL_TIM_OC_Start_DMA+0x102>
 800d8ba:	2d0c      	cmp	r5, #12
 800d8bc:	d019      	beq.n	800d8f2 <HAL_TIM_OC_Start_DMA+0x112>
 800d8be:	2d10      	cmp	r5, #16
 800d8c0:	d01f      	beq.n	800d902 <HAL_TIM_OC_Start_DMA+0x122>
 800d8c2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8c6:	b2d2      	uxtb	r2, r2
 800d8c8:	2a01      	cmp	r2, #1
 800d8ca:	bf14      	ite	ne
 800d8cc:	2200      	movne	r2, #0
 800d8ce:	2201      	moveq	r2, #1
 800d8d0:	e79f      	b.n	800d812 <HAL_TIM_OC_Start_DMA+0x32>
 800d8d2:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800d8d6:	b2d2      	uxtb	r2, r2
 800d8d8:	2a01      	cmp	r2, #1
 800d8da:	bf14      	ite	ne
 800d8dc:	2200      	movne	r2, #0
 800d8de:	2201      	moveq	r2, #1
 800d8e0:	e797      	b.n	800d812 <HAL_TIM_OC_Start_DMA+0x32>
 800d8e2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	2a01      	cmp	r2, #1
 800d8ea:	bf14      	ite	ne
 800d8ec:	2200      	movne	r2, #0
 800d8ee:	2201      	moveq	r2, #1
 800d8f0:	e78f      	b.n	800d812 <HAL_TIM_OC_Start_DMA+0x32>
 800d8f2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d8f6:	b2d2      	uxtb	r2, r2
 800d8f8:	2a01      	cmp	r2, #1
 800d8fa:	bf14      	ite	ne
 800d8fc:	2200      	movne	r2, #0
 800d8fe:	2201      	moveq	r2, #1
 800d900:	e787      	b.n	800d812 <HAL_TIM_OC_Start_DMA+0x32>
 800d902:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	2a01      	cmp	r2, #1
 800d90a:	bf14      	ite	ne
 800d90c:	2200      	movne	r2, #0
 800d90e:	2201      	moveq	r2, #1
 800d910:	e77f      	b.n	800d812 <HAL_TIM_OC_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d912:	2d04      	cmp	r5, #4
 800d914:	d009      	beq.n	800d92a <HAL_TIM_OC_Start_DMA+0x14a>
 800d916:	2d08      	cmp	r5, #8
 800d918:	d00b      	beq.n	800d932 <HAL_TIM_OC_Start_DMA+0x152>
 800d91a:	2d0c      	cmp	r5, #12
 800d91c:	d00d      	beq.n	800d93a <HAL_TIM_OC_Start_DMA+0x15a>
 800d91e:	2d10      	cmp	r5, #16
 800d920:	d00f      	beq.n	800d942 <HAL_TIM_OC_Start_DMA+0x162>
 800d922:	2202      	movs	r2, #2
 800d924:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d928:	e781      	b.n	800d82e <HAL_TIM_OC_Start_DMA+0x4e>
 800d92a:	2202      	movs	r2, #2
 800d92c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 800d930:	e77d      	b.n	800d82e <HAL_TIM_OC_Start_DMA+0x4e>
 800d932:	2202      	movs	r2, #2
 800d934:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800d938:	e779      	b.n	800d82e <HAL_TIM_OC_Start_DMA+0x4e>
 800d93a:	2202      	movs	r2, #2
 800d93c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800d940:	e775      	b.n	800d82e <HAL_TIM_OC_Start_DMA+0x4e>
 800d942:	2202      	movs	r2, #2
 800d944:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d948:	e771      	b.n	800d82e <HAL_TIM_OC_Start_DMA+0x4e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d94a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d94c:	495d      	ldr	r1, [pc, #372]	; (800dac4 <HAL_TIM_OC_Start_DMA+0x2e4>)
 800d94e:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d950:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d952:	495d      	ldr	r1, [pc, #372]	; (800dac8 <HAL_TIM_OC_Start_DMA+0x2e8>)
 800d954:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d956:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d958:	495c      	ldr	r1, [pc, #368]	; (800dacc <HAL_TIM_OC_Start_DMA+0x2ec>)
 800d95a:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	3234      	adds	r2, #52	; 0x34
 800d960:	4661      	mov	r1, ip
 800d962:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d964:	f7f8 faae 	bl	8005ec4 <HAL_DMA_Start_IT>
 800d968:	2800      	cmp	r0, #0
 800d96a:	f040 80a0 	bne.w	800daae <HAL_TIM_OC_Start_DMA+0x2ce>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d96e:	6822      	ldr	r2, [r4, #0]
 800d970:	68d3      	ldr	r3, [r2, #12]
 800d972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d976:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d978:	2201      	movs	r2, #1
 800d97a:	4629      	mov	r1, r5
 800d97c:	6820      	ldr	r0, [r4, #0]
 800d97e:	f7ff fcaf 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	4952      	ldr	r1, [pc, #328]	; (800dad0 <HAL_TIM_OC_Start_DMA+0x2f0>)
 800d986:	4a53      	ldr	r2, [pc, #332]	; (800dad4 <HAL_TIM_OC_Start_DMA+0x2f4>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	bf18      	it	ne
 800d98c:	428b      	cmpne	r3, r1
 800d98e:	d00b      	beq.n	800d9a8 <HAL_TIM_OC_Start_DMA+0x1c8>
 800d990:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d994:	4293      	cmp	r3, r2
 800d996:	d007      	beq.n	800d9a8 <HAL_TIM_OC_Start_DMA+0x1c8>
 800d998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d003      	beq.n	800d9a8 <HAL_TIM_OC_Start_DMA+0x1c8>
 800d9a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d103      	bne.n	800d9b0 <HAL_TIM_OC_Start_DMA+0x1d0>
      __HAL_TIM_MOE_ENABLE(htim);
 800d9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9ae:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	4a47      	ldr	r2, [pc, #284]	; (800dad0 <HAL_TIM_OC_Start_DMA+0x2f0>)
 800d9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9b8:	bf18      	it	ne
 800d9ba:	4293      	cmpne	r3, r2
 800d9bc:	d061      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d05d      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d059      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d055      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d051      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9de:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d04d      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
 800d9e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d049      	beq.n	800da82 <HAL_TIM_OC_Start_DMA+0x2a2>
      __HAL_TIM_ENABLE(htim);
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	f042 0201 	orr.w	r2, r2, #1
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	e054      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d9fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d9fc:	4931      	ldr	r1, [pc, #196]	; (800dac4 <HAL_TIM_OC_Start_DMA+0x2e4>)
 800d9fe:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800da00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800da02:	4931      	ldr	r1, [pc, #196]	; (800dac8 <HAL_TIM_OC_Start_DMA+0x2e8>)
 800da04:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800da06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800da08:	4930      	ldr	r1, [pc, #192]	; (800dacc <HAL_TIM_OC_Start_DMA+0x2ec>)
 800da0a:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800da0c:	6822      	ldr	r2, [r4, #0]
 800da0e:	3238      	adds	r2, #56	; 0x38
 800da10:	4661      	mov	r1, ip
 800da12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800da14:	f7f8 fa56 	bl	8005ec4 <HAL_DMA_Start_IT>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d14a      	bne.n	800dab2 <HAL_TIM_OC_Start_DMA+0x2d2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800da1c:	6822      	ldr	r2, [r4, #0]
 800da1e:	68d3      	ldr	r3, [r2, #12]
 800da20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da24:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800da26:	e7a7      	b.n	800d978 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800da28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800da2a:	4926      	ldr	r1, [pc, #152]	; (800dac4 <HAL_TIM_OC_Start_DMA+0x2e4>)
 800da2c:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800da2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800da30:	4925      	ldr	r1, [pc, #148]	; (800dac8 <HAL_TIM_OC_Start_DMA+0x2e8>)
 800da32:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800da34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800da36:	4925      	ldr	r1, [pc, #148]	; (800dacc <HAL_TIM_OC_Start_DMA+0x2ec>)
 800da38:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800da3a:	6822      	ldr	r2, [r4, #0]
 800da3c:	323c      	adds	r2, #60	; 0x3c
 800da3e:	4661      	mov	r1, ip
 800da40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800da42:	f7f8 fa3f 	bl	8005ec4 <HAL_DMA_Start_IT>
 800da46:	2800      	cmp	r0, #0
 800da48:	d135      	bne.n	800dab6 <HAL_TIM_OC_Start_DMA+0x2d6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800da4a:	6822      	ldr	r2, [r4, #0]
 800da4c:	68d3      	ldr	r3, [r2, #12]
 800da4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da52:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800da54:	e790      	b.n	800d978 <HAL_TIM_OC_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800da56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800da58:	491a      	ldr	r1, [pc, #104]	; (800dac4 <HAL_TIM_OC_Start_DMA+0x2e4>)
 800da5a:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800da5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800da5e:	491a      	ldr	r1, [pc, #104]	; (800dac8 <HAL_TIM_OC_Start_DMA+0x2e8>)
 800da60:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800da62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800da64:	4919      	ldr	r1, [pc, #100]	; (800dacc <HAL_TIM_OC_Start_DMA+0x2ec>)
 800da66:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800da68:	6822      	ldr	r2, [r4, #0]
 800da6a:	3240      	adds	r2, #64	; 0x40
 800da6c:	4661      	mov	r1, ip
 800da6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800da70:	f7f8 fa28 	bl	8005ec4 <HAL_DMA_Start_IT>
 800da74:	bb08      	cbnz	r0, 800daba <HAL_TIM_OC_Start_DMA+0x2da>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	68d3      	ldr	r3, [r2, #12]
 800da7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da7e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800da80:	e77a      	b.n	800d978 <HAL_TIM_OC_Start_DMA+0x198>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da82:	6899      	ldr	r1, [r3, #8]
 800da84:	4a14      	ldr	r2, [pc, #80]	; (800dad8 <HAL_TIM_OC_Start_DMA+0x2f8>)
 800da86:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da88:	2a06      	cmp	r2, #6
 800da8a:	bf18      	it	ne
 800da8c:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800da90:	d015      	beq.n	800dabe <HAL_TIM_OC_Start_DMA+0x2de>
        __HAL_TIM_ENABLE(htim);
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	f042 0201 	orr.w	r2, r2, #1
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	2000      	movs	r0, #0
 800da9c:	e002      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
    return HAL_BUSY;
 800da9e:	2002      	movs	r0, #2
 800daa0:	e000      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
    return HAL_ERROR;
 800daa2:	2001      	movs	r0, #1
}
 800daa4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800daa6:	2001      	movs	r0, #1
 800daa8:	e7fc      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
  switch (Channel)
 800daaa:	2001      	movs	r0, #1
 800daac:	e7fa      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
        return HAL_ERROR;
 800daae:	2001      	movs	r0, #1
 800dab0:	e7f8      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
        return HAL_ERROR;
 800dab2:	2001      	movs	r0, #1
 800dab4:	e7f6      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
        return HAL_ERROR;
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7f4      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
        return HAL_ERROR;
 800daba:	2001      	movs	r0, #1
 800dabc:	e7f2      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
 800dabe:	2000      	movs	r0, #0
 800dac0:	e7f0      	b.n	800daa4 <HAL_TIM_OC_Start_DMA+0x2c4>
 800dac2:	bf00      	nop
 800dac4:	0800c2e1 	.word	0x0800c2e1
 800dac8:	0800c353 	.word	0x0800c353
 800dacc:	0800c551 	.word	0x0800c551
 800dad0:	40010000 	.word	0x40010000
 800dad4:	40010400 	.word	0x40010400
 800dad8:	00010007 	.word	0x00010007

0800dadc <HAL_TIM_OC_Stop_DMA>:
{
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4604      	mov	r4, r0
 800dae0:	460d      	mov	r5, r1
  switch (Channel)
 800dae2:	290c      	cmp	r1, #12
 800dae4:	f200 8088 	bhi.w	800dbf8 <HAL_TIM_OC_Stop_DMA+0x11c>
 800dae8:	e8df f001 	tbb	[pc, r1]
 800daec:	86868607 	.word	0x86868607
 800daf0:	8686864a 	.word	0x8686864a
 800daf4:	86868653 	.word	0x86868653
 800daf8:	5c          	.byte	0x5c
 800daf9:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dafa:	6802      	ldr	r2, [r0, #0]
 800dafc:	68d3      	ldr	r3, [r2, #12]
 800dafe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db02:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800db04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800db06:	f7f8 fcc9 	bl	800649c <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800db0a:	2200      	movs	r2, #0
 800db0c:	4629      	mov	r1, r5
 800db0e:	6820      	ldr	r0, [r4, #0]
 800db10:	f7ff fbe6 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	4939      	ldr	r1, [pc, #228]	; (800dbfc <HAL_TIM_OC_Stop_DMA+0x120>)
 800db18:	4a39      	ldr	r2, [pc, #228]	; (800dc00 <HAL_TIM_OC_Stop_DMA+0x124>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	bf18      	it	ne
 800db1e:	428b      	cmpne	r3, r1
 800db20:	d00b      	beq.n	800db3a <HAL_TIM_OC_Stop_DMA+0x5e>
 800db22:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800db26:	4293      	cmp	r3, r2
 800db28:	d007      	beq.n	800db3a <HAL_TIM_OC_Stop_DMA+0x5e>
 800db2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db2e:	4293      	cmp	r3, r2
 800db30:	d003      	beq.n	800db3a <HAL_TIM_OC_Stop_DMA+0x5e>
 800db32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db36:	4293      	cmp	r3, r2
 800db38:	d10d      	bne.n	800db56 <HAL_TIM_OC_Stop_DMA+0x7a>
      __HAL_TIM_MOE_DISABLE(htim);
 800db3a:	6a19      	ldr	r1, [r3, #32]
 800db3c:	f241 1211 	movw	r2, #4369	; 0x1111
 800db40:	4211      	tst	r1, r2
 800db42:	d108      	bne.n	800db56 <HAL_TIM_OC_Stop_DMA+0x7a>
 800db44:	6a19      	ldr	r1, [r3, #32]
 800db46:	f240 4244 	movw	r2, #1092	; 0x444
 800db4a:	4211      	tst	r1, r2
 800db4c:	d103      	bne.n	800db56 <HAL_TIM_OC_Stop_DMA+0x7a>
 800db4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db54:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	6a19      	ldr	r1, [r3, #32]
 800db5a:	f241 1211 	movw	r2, #4369	; 0x1111
 800db5e:	4211      	tst	r1, r2
 800db60:	d108      	bne.n	800db74 <HAL_TIM_OC_Stop_DMA+0x98>
 800db62:	6a19      	ldr	r1, [r3, #32]
 800db64:	f240 4244 	movw	r2, #1092	; 0x444
 800db68:	4211      	tst	r1, r2
 800db6a:	d103      	bne.n	800db74 <HAL_TIM_OC_Stop_DMA+0x98>
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	f022 0201 	bic.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800db74:	b9fd      	cbnz	r5, 800dbb6 <HAL_TIM_OC_Stop_DMA+0xda>
 800db76:	2301      	movs	r3, #1
 800db78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800db7c:	2000      	movs	r0, #0
 800db7e:	e03c      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800db80:	6802      	ldr	r2, [r0, #0]
 800db82:	68d3      	ldr	r3, [r2, #12]
 800db84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db88:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800db8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800db8c:	f7f8 fc86 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800db90:	e7bb      	b.n	800db0a <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800db92:	6802      	ldr	r2, [r0, #0]
 800db94:	68d3      	ldr	r3, [r2, #12]
 800db96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db9a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800db9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800db9e:	f7f8 fc7d 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800dba2:	e7b2      	b.n	800db0a <HAL_TIM_OC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800dba4:	6802      	ldr	r2, [r0, #0]
 800dba6:	68d3      	ldr	r3, [r2, #12]
 800dba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbac:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800dbae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800dbb0:	f7f8 fc74 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800dbb4:	e7a9      	b.n	800db0a <HAL_TIM_OC_Stop_DMA+0x2e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dbb6:	2d04      	cmp	r5, #4
 800dbb8:	d00a      	beq.n	800dbd0 <HAL_TIM_OC_Stop_DMA+0xf4>
 800dbba:	2d08      	cmp	r5, #8
 800dbbc:	d00d      	beq.n	800dbda <HAL_TIM_OC_Stop_DMA+0xfe>
 800dbbe:	2d0c      	cmp	r5, #12
 800dbc0:	d010      	beq.n	800dbe4 <HAL_TIM_OC_Stop_DMA+0x108>
 800dbc2:	2d10      	cmp	r5, #16
 800dbc4:	d013      	beq.n	800dbee <HAL_TIM_OC_Stop_DMA+0x112>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e014      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	e00f      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	e00a      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dbea:	2000      	movs	r0, #0
 800dbec:	e005      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e000      	b.n	800dbfa <HAL_TIM_OC_Stop_DMA+0x11e>
  switch (Channel)
 800dbf8:	2001      	movs	r0, #1
}
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	40010000 	.word	0x40010000
 800dc00:	40010400 	.word	0x40010400

0800dc04 <HAL_TIM_PWM_Start>:
{
 800dc04:	b510      	push	{r4, lr}
 800dc06:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dc08:	4608      	mov	r0, r1
 800dc0a:	2900      	cmp	r1, #0
 800dc0c:	d14e      	bne.n	800dcac <HAL_TIM_PWM_Start+0xa8>
 800dc0e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	3b01      	subs	r3, #1
 800dc16:	bf18      	it	ne
 800dc18:	2301      	movne	r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f040 809b 	bne.w	800dd56 <HAL_TIM_PWM_Start+0x152>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d16e      	bne.n	800dd02 <HAL_TIM_PWM_Start+0xfe>
 800dc24:	2302      	movs	r3, #2
 800dc26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	6820      	ldr	r0, [r4, #0]
 800dc30:	f7ff fb56 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	494a      	ldr	r1, [pc, #296]	; (800dd60 <HAL_TIM_PWM_Start+0x15c>)
 800dc38:	4a4a      	ldr	r2, [pc, #296]	; (800dd64 <HAL_TIM_PWM_Start+0x160>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	bf18      	it	ne
 800dc3e:	428b      	cmpne	r3, r1
 800dc40:	d00b      	beq.n	800dc5a <HAL_TIM_PWM_Start+0x56>
 800dc42:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d007      	beq.n	800dc5a <HAL_TIM_PWM_Start+0x56>
 800dc4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d003      	beq.n	800dc5a <HAL_TIM_PWM_Start+0x56>
 800dc52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d103      	bne.n	800dc62 <HAL_TIM_PWM_Start+0x5e>
    __HAL_TIM_MOE_ENABLE(htim);
 800dc5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc60:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	4a3e      	ldr	r2, [pc, #248]	; (800dd60 <HAL_TIM_PWM_Start+0x15c>)
 800dc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc6a:	bf18      	it	ne
 800dc6c:	4293      	cmpne	r3, r2
 800dc6e:	d064      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc70:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d060      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d05c      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d058      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc88:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d054      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc90:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d050      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
 800dc98:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d04c      	beq.n	800dd3a <HAL_TIM_PWM_Start+0x136>
    __HAL_TIM_ENABLE(htim);
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	f042 0201 	orr.w	r2, r2, #1
 800dca6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e055      	b.n	800dd58 <HAL_TIM_PWM_Start+0x154>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dcac:	2904      	cmp	r1, #4
 800dcae:	d00c      	beq.n	800dcca <HAL_TIM_PWM_Start+0xc6>
 800dcb0:	2908      	cmp	r1, #8
 800dcb2:	d011      	beq.n	800dcd8 <HAL_TIM_PWM_Start+0xd4>
 800dcb4:	290c      	cmp	r1, #12
 800dcb6:	d016      	beq.n	800dce6 <HAL_TIM_PWM_Start+0xe2>
 800dcb8:	2910      	cmp	r1, #16
 800dcba:	d01b      	beq.n	800dcf4 <HAL_TIM_PWM_Start+0xf0>
 800dcbc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	bf18      	it	ne
 800dcc6:	2301      	movne	r3, #1
 800dcc8:	e7a7      	b.n	800dc1a <HAL_TIM_PWM_Start+0x16>
 800dcca:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	bf18      	it	ne
 800dcd4:	2301      	movne	r3, #1
 800dcd6:	e7a0      	b.n	800dc1a <HAL_TIM_PWM_Start+0x16>
 800dcd8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	3b01      	subs	r3, #1
 800dce0:	bf18      	it	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	e799      	b.n	800dc1a <HAL_TIM_PWM_Start+0x16>
 800dce6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	3b01      	subs	r3, #1
 800dcee:	bf18      	it	ne
 800dcf0:	2301      	movne	r3, #1
 800dcf2:	e792      	b.n	800dc1a <HAL_TIM_PWM_Start+0x16>
 800dcf4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	bf18      	it	ne
 800dcfe:	2301      	movne	r3, #1
 800dd00:	e78b      	b.n	800dc1a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd02:	2804      	cmp	r0, #4
 800dd04:	d009      	beq.n	800dd1a <HAL_TIM_PWM_Start+0x116>
 800dd06:	2808      	cmp	r0, #8
 800dd08:	d00b      	beq.n	800dd22 <HAL_TIM_PWM_Start+0x11e>
 800dd0a:	280c      	cmp	r0, #12
 800dd0c:	d00d      	beq.n	800dd2a <HAL_TIM_PWM_Start+0x126>
 800dd0e:	2810      	cmp	r0, #16
 800dd10:	d00f      	beq.n	800dd32 <HAL_TIM_PWM_Start+0x12e>
 800dd12:	2302      	movs	r3, #2
 800dd14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd18:	e787      	b.n	800dc2a <HAL_TIM_PWM_Start+0x26>
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dd20:	e783      	b.n	800dc2a <HAL_TIM_PWM_Start+0x26>
 800dd22:	2302      	movs	r3, #2
 800dd24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dd28:	e77f      	b.n	800dc2a <HAL_TIM_PWM_Start+0x26>
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dd30:	e77b      	b.n	800dc2a <HAL_TIM_PWM_Start+0x26>
 800dd32:	2302      	movs	r3, #2
 800dd34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd38:	e777      	b.n	800dc2a <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd3a:	6899      	ldr	r1, [r3, #8]
 800dd3c:	4a0a      	ldr	r2, [pc, #40]	; (800dd68 <HAL_TIM_PWM_Start+0x164>)
 800dd3e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd40:	2a06      	cmp	r2, #6
 800dd42:	bf18      	it	ne
 800dd44:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800dd48:	d007      	beq.n	800dd5a <HAL_TIM_PWM_Start+0x156>
      __HAL_TIM_ENABLE(htim);
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	f042 0201 	orr.w	r2, r2, #1
 800dd50:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dd52:	2000      	movs	r0, #0
 800dd54:	e000      	b.n	800dd58 <HAL_TIM_PWM_Start+0x154>
    return HAL_ERROR;
 800dd56:	2001      	movs	r0, #1
}
 800dd58:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e7fc      	b.n	800dd58 <HAL_TIM_PWM_Start+0x154>
 800dd5e:	bf00      	nop
 800dd60:	40010000 	.word	0x40010000
 800dd64:	40010400 	.word	0x40010400
 800dd68:	00010007 	.word	0x00010007

0800dd6c <HAL_TIM_PWM_Stop>:
{
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4604      	mov	r4, r0
 800dd70:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dd72:	2200      	movs	r2, #0
 800dd74:	6800      	ldr	r0, [r0, #0]
 800dd76:	f7ff fab3 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	4928      	ldr	r1, [pc, #160]	; (800de20 <HAL_TIM_PWM_Stop+0xb4>)
 800dd7e:	4a29      	ldr	r2, [pc, #164]	; (800de24 <HAL_TIM_PWM_Stop+0xb8>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	bf18      	it	ne
 800dd84:	428b      	cmpne	r3, r1
 800dd86:	d00b      	beq.n	800dda0 <HAL_TIM_PWM_Stop+0x34>
 800dd88:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d007      	beq.n	800dda0 <HAL_TIM_PWM_Stop+0x34>
 800dd90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d003      	beq.n	800dda0 <HAL_TIM_PWM_Stop+0x34>
 800dd98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d10d      	bne.n	800ddbc <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 800dda0:	6a19      	ldr	r1, [r3, #32]
 800dda2:	f241 1211 	movw	r2, #4369	; 0x1111
 800dda6:	4211      	tst	r1, r2
 800dda8:	d108      	bne.n	800ddbc <HAL_TIM_PWM_Stop+0x50>
 800ddaa:	6a19      	ldr	r1, [r3, #32]
 800ddac:	f240 4244 	movw	r2, #1092	; 0x444
 800ddb0:	4211      	tst	r1, r2
 800ddb2:	d103      	bne.n	800ddbc <HAL_TIM_PWM_Stop+0x50>
 800ddb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddba:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	6a19      	ldr	r1, [r3, #32]
 800ddc0:	f241 1211 	movw	r2, #4369	; 0x1111
 800ddc4:	4211      	tst	r1, r2
 800ddc6:	d108      	bne.n	800ddda <HAL_TIM_PWM_Stop+0x6e>
 800ddc8:	6a19      	ldr	r1, [r3, #32]
 800ddca:	f240 4244 	movw	r2, #1092	; 0x444
 800ddce:	4211      	tst	r1, r2
 800ddd0:	d103      	bne.n	800ddda <HAL_TIM_PWM_Stop+0x6e>
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	f022 0201 	bic.w	r2, r2, #1
 800ddd8:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ddda:	b925      	cbnz	r5, 800dde6 <HAL_TIM_PWM_Stop+0x7a>
 800dddc:	2301      	movs	r3, #1
 800ddde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800dde2:	2000      	movs	r0, #0
 800dde4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dde6:	2d04      	cmp	r5, #4
 800dde8:	d009      	beq.n	800ddfe <HAL_TIM_PWM_Stop+0x92>
 800ddea:	2d08      	cmp	r5, #8
 800ddec:	d00b      	beq.n	800de06 <HAL_TIM_PWM_Stop+0x9a>
 800ddee:	2d0c      	cmp	r5, #12
 800ddf0:	d00d      	beq.n	800de0e <HAL_TIM_PWM_Stop+0xa2>
 800ddf2:	2d10      	cmp	r5, #16
 800ddf4:	d00f      	beq.n	800de16 <HAL_TIM_PWM_Stop+0xaa>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddfc:	e7f1      	b.n	800dde2 <HAL_TIM_PWM_Stop+0x76>
 800ddfe:	2301      	movs	r3, #1
 800de00:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800de04:	e7ed      	b.n	800dde2 <HAL_TIM_PWM_Stop+0x76>
 800de06:	2301      	movs	r3, #1
 800de08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800de0c:	e7e9      	b.n	800dde2 <HAL_TIM_PWM_Stop+0x76>
 800de0e:	2301      	movs	r3, #1
 800de10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800de14:	e7e5      	b.n	800dde2 <HAL_TIM_PWM_Stop+0x76>
 800de16:	2301      	movs	r3, #1
 800de18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de1c:	e7e1      	b.n	800dde2 <HAL_TIM_PWM_Stop+0x76>
 800de1e:	bf00      	nop
 800de20:	40010000 	.word	0x40010000
 800de24:	40010400 	.word	0x40010400

0800de28 <HAL_TIM_PWM_Start_IT>:
{
 800de28:	b510      	push	{r4, lr}
 800de2a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de2c:	4608      	mov	r0, r1
 800de2e:	b9c9      	cbnz	r1, 800de64 <HAL_TIM_PWM_Start_IT+0x3c>
 800de30:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800de34:	b2db      	uxtb	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	bf18      	it	ne
 800de3a:	2301      	movne	r3, #1
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f040 80be 	bne.w	800dfbe <HAL_TIM_PWM_Start_IT+0x196>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de42:	2800      	cmp	r0, #0
 800de44:	d139      	bne.n	800deba <HAL_TIM_PWM_Start_IT+0x92>
 800de46:	2302      	movs	r3, #2
 800de48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 800de4c:	280c      	cmp	r0, #12
 800de4e:	f200 80b8 	bhi.w	800dfc2 <HAL_TIM_PWM_Start_IT+0x19a>
 800de52:	e8df f000 	tbb	[pc, r0]
 800de56:	b64e      	.short	0xb64e
 800de58:	b694b6b6 	.word	0xb694b6b6
 800de5c:	b69ab6b6 	.word	0xb69ab6b6
 800de60:	b6b6      	.short	0xb6b6
 800de62:	a0          	.byte	0xa0
 800de63:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de64:	2904      	cmp	r1, #4
 800de66:	d00c      	beq.n	800de82 <HAL_TIM_PWM_Start_IT+0x5a>
 800de68:	2908      	cmp	r1, #8
 800de6a:	d011      	beq.n	800de90 <HAL_TIM_PWM_Start_IT+0x68>
 800de6c:	290c      	cmp	r1, #12
 800de6e:	d016      	beq.n	800de9e <HAL_TIM_PWM_Start_IT+0x76>
 800de70:	2910      	cmp	r1, #16
 800de72:	d01b      	beq.n	800deac <HAL_TIM_PWM_Start_IT+0x84>
 800de74:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	3b01      	subs	r3, #1
 800de7c:	bf18      	it	ne
 800de7e:	2301      	movne	r3, #1
 800de80:	e7dc      	b.n	800de3c <HAL_TIM_PWM_Start_IT+0x14>
 800de82:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800de86:	b2db      	uxtb	r3, r3
 800de88:	3b01      	subs	r3, #1
 800de8a:	bf18      	it	ne
 800de8c:	2301      	movne	r3, #1
 800de8e:	e7d5      	b.n	800de3c <HAL_TIM_PWM_Start_IT+0x14>
 800de90:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800de94:	b2db      	uxtb	r3, r3
 800de96:	3b01      	subs	r3, #1
 800de98:	bf18      	it	ne
 800de9a:	2301      	movne	r3, #1
 800de9c:	e7ce      	b.n	800de3c <HAL_TIM_PWM_Start_IT+0x14>
 800de9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	3b01      	subs	r3, #1
 800dea6:	bf18      	it	ne
 800dea8:	2301      	movne	r3, #1
 800deaa:	e7c7      	b.n	800de3c <HAL_TIM_PWM_Start_IT+0x14>
 800deac:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	3b01      	subs	r3, #1
 800deb4:	bf18      	it	ne
 800deb6:	2301      	movne	r3, #1
 800deb8:	e7c0      	b.n	800de3c <HAL_TIM_PWM_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800deba:	2804      	cmp	r0, #4
 800debc:	d009      	beq.n	800ded2 <HAL_TIM_PWM_Start_IT+0xaa>
 800debe:	2808      	cmp	r0, #8
 800dec0:	d00b      	beq.n	800deda <HAL_TIM_PWM_Start_IT+0xb2>
 800dec2:	280c      	cmp	r0, #12
 800dec4:	d00d      	beq.n	800dee2 <HAL_TIM_PWM_Start_IT+0xba>
 800dec6:	2810      	cmp	r0, #16
 800dec8:	d00f      	beq.n	800deea <HAL_TIM_PWM_Start_IT+0xc2>
 800deca:	2302      	movs	r3, #2
 800decc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded0:	e7bc      	b.n	800de4c <HAL_TIM_PWM_Start_IT+0x24>
 800ded2:	2302      	movs	r3, #2
 800ded4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ded8:	e7b8      	b.n	800de4c <HAL_TIM_PWM_Start_IT+0x24>
 800deda:	2302      	movs	r3, #2
 800dedc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dee0:	e7b4      	b.n	800de4c <HAL_TIM_PWM_Start_IT+0x24>
 800dee2:	2302      	movs	r3, #2
 800dee4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dee8:	e7b0      	b.n	800de4c <HAL_TIM_PWM_Start_IT+0x24>
 800deea:	2302      	movs	r3, #2
 800deec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800def0:	e7ac      	b.n	800de4c <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800def2:	6822      	ldr	r2, [r4, #0]
 800def4:	68d3      	ldr	r3, [r2, #12]
 800def6:	f043 0302 	orr.w	r3, r3, #2
 800defa:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800defc:	2201      	movs	r2, #1
 800defe:	4601      	mov	r1, r0
 800df00:	6820      	ldr	r0, [r4, #0]
 800df02:	f7ff f9ed 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	4930      	ldr	r1, [pc, #192]	; (800dfcc <HAL_TIM_PWM_Start_IT+0x1a4>)
 800df0a:	4a31      	ldr	r2, [pc, #196]	; (800dfd0 <HAL_TIM_PWM_Start_IT+0x1a8>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	bf18      	it	ne
 800df10:	428b      	cmpne	r3, r1
 800df12:	d00b      	beq.n	800df2c <HAL_TIM_PWM_Start_IT+0x104>
 800df14:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800df18:	4293      	cmp	r3, r2
 800df1a:	d007      	beq.n	800df2c <HAL_TIM_PWM_Start_IT+0x104>
 800df1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df20:	4293      	cmp	r3, r2
 800df22:	d003      	beq.n	800df2c <HAL_TIM_PWM_Start_IT+0x104>
 800df24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df28:	4293      	cmp	r3, r2
 800df2a:	d103      	bne.n	800df34 <HAL_TIM_PWM_Start_IT+0x10c>
      __HAL_TIM_MOE_ENABLE(htim);
 800df2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df32:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	4a25      	ldr	r2, [pc, #148]	; (800dfcc <HAL_TIM_PWM_Start_IT+0x1a4>)
 800df38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df3c:	bf18      	it	ne
 800df3e:	4293      	cmpne	r3, r2
 800df40:	d02f      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800df46:	4293      	cmp	r3, r2
 800df48:	d02b      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df4e:	4293      	cmp	r3, r2
 800df50:	d027      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df56:	4293      	cmp	r3, r2
 800df58:	d023      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800df5e:	4293      	cmp	r3, r2
 800df60:	d01f      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df62:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800df66:	4293      	cmp	r3, r2
 800df68:	d01b      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
 800df6a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800df6e:	4293      	cmp	r3, r2
 800df70:	d017      	beq.n	800dfa2 <HAL_TIM_PWM_Start_IT+0x17a>
      __HAL_TIM_ENABLE(htim);
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	f042 0201 	orr.w	r2, r2, #1
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	2000      	movs	r0, #0
 800df7c:	e022      	b.n	800dfc4 <HAL_TIM_PWM_Start_IT+0x19c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800df7e:	6822      	ldr	r2, [r4, #0]
 800df80:	68d3      	ldr	r3, [r2, #12]
 800df82:	f043 0304 	orr.w	r3, r3, #4
 800df86:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800df88:	e7b8      	b.n	800defc <HAL_TIM_PWM_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800df8a:	6822      	ldr	r2, [r4, #0]
 800df8c:	68d3      	ldr	r3, [r2, #12]
 800df8e:	f043 0308 	orr.w	r3, r3, #8
 800df92:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800df94:	e7b2      	b.n	800defc <HAL_TIM_PWM_Start_IT+0xd4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	68d3      	ldr	r3, [r2, #12]
 800df9a:	f043 0310 	orr.w	r3, r3, #16
 800df9e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800dfa0:	e7ac      	b.n	800defc <HAL_TIM_PWM_Start_IT+0xd4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfa2:	6899      	ldr	r1, [r3, #8]
 800dfa4:	4a0b      	ldr	r2, [pc, #44]	; (800dfd4 <HAL_TIM_PWM_Start_IT+0x1ac>)
 800dfa6:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfa8:	2a06      	cmp	r2, #6
 800dfaa:	bf18      	it	ne
 800dfac:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800dfb0:	d009      	beq.n	800dfc6 <HAL_TIM_PWM_Start_IT+0x19e>
        __HAL_TIM_ENABLE(htim);
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	f042 0201 	orr.w	r2, r2, #1
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e002      	b.n	800dfc4 <HAL_TIM_PWM_Start_IT+0x19c>
    return HAL_ERROR;
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	e000      	b.n	800dfc4 <HAL_TIM_PWM_Start_IT+0x19c>
  switch (Channel)
 800dfc2:	2001      	movs	r0, #1
}
 800dfc4:	bd10      	pop	{r4, pc}
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	e7fc      	b.n	800dfc4 <HAL_TIM_PWM_Start_IT+0x19c>
 800dfca:	bf00      	nop
 800dfcc:	40010000 	.word	0x40010000
 800dfd0:	40010400 	.word	0x40010400
 800dfd4:	00010007 	.word	0x00010007

0800dfd8 <HAL_TIM_PWM_Stop_IT>:
{
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4605      	mov	r5, r0
 800dfdc:	460c      	mov	r4, r1
  switch (Channel)
 800dfde:	290c      	cmp	r1, #12
 800dfe0:	d87b      	bhi.n	800e0da <HAL_TIM_PWM_Stop_IT+0x102>
 800dfe2:	e8df f001 	tbb	[pc, r1]
 800dfe6:	7a07      	.short	0x7a07
 800dfe8:	7a477a7a 	.word	0x7a477a7a
 800dfec:	7a4d7a7a 	.word	0x7a4d7a7a
 800dff0:	7a7a      	.short	0x7a7a
 800dff2:	53          	.byte	0x53
 800dff3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800dff4:	6802      	ldr	r2, [r0, #0]
 800dff6:	68d3      	ldr	r3, [r2, #12]
 800dff8:	f023 0302 	bic.w	r3, r3, #2
 800dffc:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dffe:	2200      	movs	r2, #0
 800e000:	4621      	mov	r1, r4
 800e002:	6828      	ldr	r0, [r5, #0]
 800e004:	f7ff f96c 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	4935      	ldr	r1, [pc, #212]	; (800e0e0 <HAL_TIM_PWM_Stop_IT+0x108>)
 800e00c:	4a35      	ldr	r2, [pc, #212]	; (800e0e4 <HAL_TIM_PWM_Stop_IT+0x10c>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	bf18      	it	ne
 800e012:	428b      	cmpne	r3, r1
 800e014:	d00b      	beq.n	800e02e <HAL_TIM_PWM_Stop_IT+0x56>
 800e016:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d007      	beq.n	800e02e <HAL_TIM_PWM_Stop_IT+0x56>
 800e01e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e022:	4293      	cmp	r3, r2
 800e024:	d003      	beq.n	800e02e <HAL_TIM_PWM_Stop_IT+0x56>
 800e026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d10d      	bne.n	800e04a <HAL_TIM_PWM_Stop_IT+0x72>
      __HAL_TIM_MOE_DISABLE(htim);
 800e02e:	6a19      	ldr	r1, [r3, #32]
 800e030:	f241 1211 	movw	r2, #4369	; 0x1111
 800e034:	4211      	tst	r1, r2
 800e036:	d108      	bne.n	800e04a <HAL_TIM_PWM_Stop_IT+0x72>
 800e038:	6a19      	ldr	r1, [r3, #32]
 800e03a:	f240 4244 	movw	r2, #1092	; 0x444
 800e03e:	4211      	tst	r1, r2
 800e040:	d103      	bne.n	800e04a <HAL_TIM_PWM_Stop_IT+0x72>
 800e042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e048:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800e04a:	682b      	ldr	r3, [r5, #0]
 800e04c:	6a19      	ldr	r1, [r3, #32]
 800e04e:	f241 1211 	movw	r2, #4369	; 0x1111
 800e052:	4211      	tst	r1, r2
 800e054:	d108      	bne.n	800e068 <HAL_TIM_PWM_Stop_IT+0x90>
 800e056:	6a19      	ldr	r1, [r3, #32]
 800e058:	f240 4244 	movw	r2, #1092	; 0x444
 800e05c:	4211      	tst	r1, r2
 800e05e:	d103      	bne.n	800e068 <HAL_TIM_PWM_Stop_IT+0x90>
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	f022 0201 	bic.w	r2, r2, #1
 800e066:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e068:	b9b4      	cbnz	r4, 800e098 <HAL_TIM_PWM_Stop_IT+0xc0>
 800e06a:	2301      	movs	r3, #1
 800e06c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 800e070:	2000      	movs	r0, #0
 800e072:	e033      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e074:	6802      	ldr	r2, [r0, #0]
 800e076:	68d3      	ldr	r3, [r2, #12]
 800e078:	f023 0304 	bic.w	r3, r3, #4
 800e07c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e07e:	e7be      	b.n	800dffe <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e080:	6802      	ldr	r2, [r0, #0]
 800e082:	68d3      	ldr	r3, [r2, #12]
 800e084:	f023 0308 	bic.w	r3, r3, #8
 800e088:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e08a:	e7b8      	b.n	800dffe <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e08c:	6802      	ldr	r2, [r0, #0]
 800e08e:	68d3      	ldr	r3, [r2, #12]
 800e090:	f023 0310 	bic.w	r3, r3, #16
 800e094:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e096:	e7b2      	b.n	800dffe <HAL_TIM_PWM_Stop_IT+0x26>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e098:	2c04      	cmp	r4, #4
 800e09a:	d00a      	beq.n	800e0b2 <HAL_TIM_PWM_Stop_IT+0xda>
 800e09c:	2c08      	cmp	r4, #8
 800e09e:	d00d      	beq.n	800e0bc <HAL_TIM_PWM_Stop_IT+0xe4>
 800e0a0:	2c0c      	cmp	r4, #12
 800e0a2:	d010      	beq.n	800e0c6 <HAL_TIM_PWM_Stop_IT+0xee>
 800e0a4:	2c10      	cmp	r4, #16
 800e0a6:	d013      	beq.n	800e0d0 <HAL_TIM_PWM_Stop_IT+0xf8>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	e014      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	e00f      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	e00a      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	e005      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e000      	b.n	800e0dc <HAL_TIM_PWM_Stop_IT+0x104>
  switch (Channel)
 800e0da:	2001      	movs	r0, #1
}
 800e0dc:	bd38      	pop	{r3, r4, r5, pc}
 800e0de:	bf00      	nop
 800e0e0:	40010000 	.word	0x40010000
 800e0e4:	40010400 	.word	0x40010400

0800e0e8 <HAL_TIM_PWM_Start_DMA>:
{
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4694      	mov	ip, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	d132      	bne.n	800e15a <HAL_TIM_PWM_Start_DMA+0x72>
 800e0f4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800e0f8:	b2c0      	uxtb	r0, r0
 800e0fa:	2802      	cmp	r0, #2
 800e0fc:	bf14      	ite	ne
 800e0fe:	2000      	movne	r0, #0
 800e100:	2001      	moveq	r0, #1
 800e102:	2800      	cmp	r0, #0
 800e104:	f040 814f 	bne.w	800e3a6 <HAL_TIM_PWM_Start_DMA+0x2be>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800e108:	2d00      	cmp	r5, #0
 800e10a:	d156      	bne.n	800e1ba <HAL_TIM_PWM_Start_DMA+0xd2>
 800e10c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800e110:	b2d2      	uxtb	r2, r2
 800e112:	2a01      	cmp	r2, #1
 800e114:	bf14      	ite	ne
 800e116:	2200      	movne	r2, #0
 800e118:	2201      	moveq	r2, #1
 800e11a:	2a00      	cmp	r2, #0
 800e11c:	f000 8145 	beq.w	800e3aa <HAL_TIM_PWM_Start_DMA+0x2c2>
    if ((pData == NULL) || (Length == 0U))
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf18      	it	ne
 800e124:	f1bc 0f00 	cmpne.w	ip, #0
 800e128:	f000 8141 	beq.w	800e3ae <HAL_TIM_PWM_Start_DMA+0x2c6>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d174      	bne.n	800e21a <HAL_TIM_PWM_Start_DMA+0x132>
 800e130:	2202      	movs	r2, #2
 800e132:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  switch (Channel)
 800e136:	2d0c      	cmp	r5, #12
 800e138:	f200 813b 	bhi.w	800e3b2 <HAL_TIM_PWM_Start_DMA+0x2ca>
 800e13c:	e8df f015 	tbh	[pc, r5, lsl #1]
 800e140:	01390089 	.word	0x01390089
 800e144:	01390139 	.word	0x01390139
 800e148:	013900e1 	.word	0x013900e1
 800e14c:	01390139 	.word	0x01390139
 800e150:	013900f8 	.word	0x013900f8
 800e154:	01390139 	.word	0x01390139
 800e158:	010f      	.short	0x010f
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800e15a:	2904      	cmp	r1, #4
 800e15c:	d00d      	beq.n	800e17a <HAL_TIM_PWM_Start_DMA+0x92>
 800e15e:	2908      	cmp	r1, #8
 800e160:	d013      	beq.n	800e18a <HAL_TIM_PWM_Start_DMA+0xa2>
 800e162:	290c      	cmp	r1, #12
 800e164:	d019      	beq.n	800e19a <HAL_TIM_PWM_Start_DMA+0xb2>
 800e166:	2910      	cmp	r1, #16
 800e168:	d01f      	beq.n	800e1aa <HAL_TIM_PWM_Start_DMA+0xc2>
 800e16a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800e16e:	b2c0      	uxtb	r0, r0
 800e170:	2802      	cmp	r0, #2
 800e172:	bf14      	ite	ne
 800e174:	2000      	movne	r0, #0
 800e176:	2001      	moveq	r0, #1
 800e178:	e7c3      	b.n	800e102 <HAL_TIM_PWM_Start_DMA+0x1a>
 800e17a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800e17e:	b2c0      	uxtb	r0, r0
 800e180:	2802      	cmp	r0, #2
 800e182:	bf14      	ite	ne
 800e184:	2000      	movne	r0, #0
 800e186:	2001      	moveq	r0, #1
 800e188:	e7bb      	b.n	800e102 <HAL_TIM_PWM_Start_DMA+0x1a>
 800e18a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800e18e:	b2c0      	uxtb	r0, r0
 800e190:	2802      	cmp	r0, #2
 800e192:	bf14      	ite	ne
 800e194:	2000      	movne	r0, #0
 800e196:	2001      	moveq	r0, #1
 800e198:	e7b3      	b.n	800e102 <HAL_TIM_PWM_Start_DMA+0x1a>
 800e19a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800e19e:	b2c0      	uxtb	r0, r0
 800e1a0:	2802      	cmp	r0, #2
 800e1a2:	bf14      	ite	ne
 800e1a4:	2000      	movne	r0, #0
 800e1a6:	2001      	moveq	r0, #1
 800e1a8:	e7ab      	b.n	800e102 <HAL_TIM_PWM_Start_DMA+0x1a>
 800e1aa:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800e1ae:	b2c0      	uxtb	r0, r0
 800e1b0:	2802      	cmp	r0, #2
 800e1b2:	bf14      	ite	ne
 800e1b4:	2000      	movne	r0, #0
 800e1b6:	2001      	moveq	r0, #1
 800e1b8:	e7a3      	b.n	800e102 <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800e1ba:	2d04      	cmp	r5, #4
 800e1bc:	d00d      	beq.n	800e1da <HAL_TIM_PWM_Start_DMA+0xf2>
 800e1be:	2d08      	cmp	r5, #8
 800e1c0:	d013      	beq.n	800e1ea <HAL_TIM_PWM_Start_DMA+0x102>
 800e1c2:	2d0c      	cmp	r5, #12
 800e1c4:	d019      	beq.n	800e1fa <HAL_TIM_PWM_Start_DMA+0x112>
 800e1c6:	2d10      	cmp	r5, #16
 800e1c8:	d01f      	beq.n	800e20a <HAL_TIM_PWM_Start_DMA+0x122>
 800e1ca:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1ce:	b2d2      	uxtb	r2, r2
 800e1d0:	2a01      	cmp	r2, #1
 800e1d2:	bf14      	ite	ne
 800e1d4:	2200      	movne	r2, #0
 800e1d6:	2201      	moveq	r2, #1
 800e1d8:	e79f      	b.n	800e11a <HAL_TIM_PWM_Start_DMA+0x32>
 800e1da:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800e1de:	b2d2      	uxtb	r2, r2
 800e1e0:	2a01      	cmp	r2, #1
 800e1e2:	bf14      	ite	ne
 800e1e4:	2200      	movne	r2, #0
 800e1e6:	2201      	moveq	r2, #1
 800e1e8:	e797      	b.n	800e11a <HAL_TIM_PWM_Start_DMA+0x32>
 800e1ea:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	2a01      	cmp	r2, #1
 800e1f2:	bf14      	ite	ne
 800e1f4:	2200      	movne	r2, #0
 800e1f6:	2201      	moveq	r2, #1
 800e1f8:	e78f      	b.n	800e11a <HAL_TIM_PWM_Start_DMA+0x32>
 800e1fa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e1fe:	b2d2      	uxtb	r2, r2
 800e200:	2a01      	cmp	r2, #1
 800e202:	bf14      	ite	ne
 800e204:	2200      	movne	r2, #0
 800e206:	2201      	moveq	r2, #1
 800e208:	e787      	b.n	800e11a <HAL_TIM_PWM_Start_DMA+0x32>
 800e20a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800e20e:	b2d2      	uxtb	r2, r2
 800e210:	2a01      	cmp	r2, #1
 800e212:	bf14      	ite	ne
 800e214:	2200      	movne	r2, #0
 800e216:	2201      	moveq	r2, #1
 800e218:	e77f      	b.n	800e11a <HAL_TIM_PWM_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e21a:	2d04      	cmp	r5, #4
 800e21c:	d009      	beq.n	800e232 <HAL_TIM_PWM_Start_DMA+0x14a>
 800e21e:	2d08      	cmp	r5, #8
 800e220:	d00b      	beq.n	800e23a <HAL_TIM_PWM_Start_DMA+0x152>
 800e222:	2d0c      	cmp	r5, #12
 800e224:	d00d      	beq.n	800e242 <HAL_TIM_PWM_Start_DMA+0x15a>
 800e226:	2d10      	cmp	r5, #16
 800e228:	d00f      	beq.n	800e24a <HAL_TIM_PWM_Start_DMA+0x162>
 800e22a:	2202      	movs	r2, #2
 800e22c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e230:	e781      	b.n	800e136 <HAL_TIM_PWM_Start_DMA+0x4e>
 800e232:	2202      	movs	r2, #2
 800e234:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 800e238:	e77d      	b.n	800e136 <HAL_TIM_PWM_Start_DMA+0x4e>
 800e23a:	2202      	movs	r2, #2
 800e23c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800e240:	e779      	b.n	800e136 <HAL_TIM_PWM_Start_DMA+0x4e>
 800e242:	2202      	movs	r2, #2
 800e244:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800e248:	e775      	b.n	800e136 <HAL_TIM_PWM_Start_DMA+0x4e>
 800e24a:	2202      	movs	r2, #2
 800e24c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e250:	e771      	b.n	800e136 <HAL_TIM_PWM_Start_DMA+0x4e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e254:	495d      	ldr	r1, [pc, #372]	; (800e3cc <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800e256:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e258:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e25a:	495d      	ldr	r1, [pc, #372]	; (800e3d0 <HAL_TIM_PWM_Start_DMA+0x2e8>)
 800e25c:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e25e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e260:	495c      	ldr	r1, [pc, #368]	; (800e3d4 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800e262:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e264:	6822      	ldr	r2, [r4, #0]
 800e266:	3234      	adds	r2, #52	; 0x34
 800e268:	4661      	mov	r1, ip
 800e26a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e26c:	f7f7 fe2a 	bl	8005ec4 <HAL_DMA_Start_IT>
 800e270:	2800      	cmp	r0, #0
 800e272:	f040 80a0 	bne.w	800e3b6 <HAL_TIM_PWM_Start_DMA+0x2ce>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e276:	6822      	ldr	r2, [r4, #0]
 800e278:	68d3      	ldr	r3, [r2, #12]
 800e27a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e27e:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e280:	2201      	movs	r2, #1
 800e282:	4629      	mov	r1, r5
 800e284:	6820      	ldr	r0, [r4, #0]
 800e286:	f7ff f82b 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	4952      	ldr	r1, [pc, #328]	; (800e3d8 <HAL_TIM_PWM_Start_DMA+0x2f0>)
 800e28e:	4a53      	ldr	r2, [pc, #332]	; (800e3dc <HAL_TIM_PWM_Start_DMA+0x2f4>)
 800e290:	4293      	cmp	r3, r2
 800e292:	bf18      	it	ne
 800e294:	428b      	cmpne	r3, r1
 800e296:	d00b      	beq.n	800e2b0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800e298:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d007      	beq.n	800e2b0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800e2a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d003      	beq.n	800e2b0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800e2a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d103      	bne.n	800e2b8 <HAL_TIM_PWM_Start_DMA+0x1d0>
      __HAL_TIM_MOE_ENABLE(htim);
 800e2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2b6:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	4a47      	ldr	r2, [pc, #284]	; (800e3d8 <HAL_TIM_PWM_Start_DMA+0x2f0>)
 800e2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2c0:	bf18      	it	ne
 800e2c2:	4293      	cmpne	r3, r2
 800e2c4:	d061      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d05d      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d059      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d055      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d051      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2e6:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d04d      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
 800e2ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d049      	beq.n	800e38a <HAL_TIM_PWM_Start_DMA+0x2a2>
      __HAL_TIM_ENABLE(htim);
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	f042 0201 	orr.w	r2, r2, #1
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	2000      	movs	r0, #0
 800e300:	e054      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e302:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e304:	4931      	ldr	r1, [pc, #196]	; (800e3cc <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800e306:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e30a:	4931      	ldr	r1, [pc, #196]	; (800e3d0 <HAL_TIM_PWM_Start_DMA+0x2e8>)
 800e30c:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e30e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e310:	4930      	ldr	r1, [pc, #192]	; (800e3d4 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800e312:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e314:	6822      	ldr	r2, [r4, #0]
 800e316:	3238      	adds	r2, #56	; 0x38
 800e318:	4661      	mov	r1, ip
 800e31a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e31c:	f7f7 fdd2 	bl	8005ec4 <HAL_DMA_Start_IT>
 800e320:	2800      	cmp	r0, #0
 800e322:	d14a      	bne.n	800e3ba <HAL_TIM_PWM_Start_DMA+0x2d2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e324:	6822      	ldr	r2, [r4, #0]
 800e326:	68d3      	ldr	r3, [r2, #12]
 800e328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e32c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e32e:	e7a7      	b.n	800e280 <HAL_TIM_PWM_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e330:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e332:	4926      	ldr	r1, [pc, #152]	; (800e3cc <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800e334:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e338:	4925      	ldr	r1, [pc, #148]	; (800e3d0 <HAL_TIM_PWM_Start_DMA+0x2e8>)
 800e33a:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e33c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e33e:	4925      	ldr	r1, [pc, #148]	; (800e3d4 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800e340:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e342:	6822      	ldr	r2, [r4, #0]
 800e344:	323c      	adds	r2, #60	; 0x3c
 800e346:	4661      	mov	r1, ip
 800e348:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e34a:	f7f7 fdbb 	bl	8005ec4 <HAL_DMA_Start_IT>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d135      	bne.n	800e3be <HAL_TIM_PWM_Start_DMA+0x2d6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	68d3      	ldr	r3, [r2, #12]
 800e356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e35a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e35c:	e790      	b.n	800e280 <HAL_TIM_PWM_Start_DMA+0x198>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e35e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e360:	491a      	ldr	r1, [pc, #104]	; (800e3cc <HAL_TIM_PWM_Start_DMA+0x2e4>)
 800e362:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e364:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e366:	491a      	ldr	r1, [pc, #104]	; (800e3d0 <HAL_TIM_PWM_Start_DMA+0x2e8>)
 800e368:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e36a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e36c:	4919      	ldr	r1, [pc, #100]	; (800e3d4 <HAL_TIM_PWM_Start_DMA+0x2ec>)
 800e36e:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e370:	6822      	ldr	r2, [r4, #0]
 800e372:	3240      	adds	r2, #64	; 0x40
 800e374:	4661      	mov	r1, ip
 800e376:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e378:	f7f7 fda4 	bl	8005ec4 <HAL_DMA_Start_IT>
 800e37c:	bb08      	cbnz	r0, 800e3c2 <HAL_TIM_PWM_Start_DMA+0x2da>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e37e:	6822      	ldr	r2, [r4, #0]
 800e380:	68d3      	ldr	r3, [r2, #12]
 800e382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e386:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e388:	e77a      	b.n	800e280 <HAL_TIM_PWM_Start_DMA+0x198>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e38a:	6899      	ldr	r1, [r3, #8]
 800e38c:	4a14      	ldr	r2, [pc, #80]	; (800e3e0 <HAL_TIM_PWM_Start_DMA+0x2f8>)
 800e38e:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e390:	2a06      	cmp	r2, #6
 800e392:	bf18      	it	ne
 800e394:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800e398:	d015      	beq.n	800e3c6 <HAL_TIM_PWM_Start_DMA+0x2de>
        __HAL_TIM_ENABLE(htim);
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	f042 0201 	orr.w	r2, r2, #1
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e002      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
    return HAL_BUSY;
 800e3a6:	2002      	movs	r0, #2
 800e3a8:	e000      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
    return HAL_ERROR;
 800e3aa:	2001      	movs	r0, #1
}
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	e7fc      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
  switch (Channel)
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	e7fa      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
        return HAL_ERROR;
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	e7f8      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
        return HAL_ERROR;
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	e7f6      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
        return HAL_ERROR;
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e7f4      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
        return HAL_ERROR;
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	e7f2      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	e7f0      	b.n	800e3ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 800e3ca:	bf00      	nop
 800e3cc:	0800c2e1 	.word	0x0800c2e1
 800e3d0:	0800c353 	.word	0x0800c353
 800e3d4:	0800c551 	.word	0x0800c551
 800e3d8:	40010000 	.word	0x40010000
 800e3dc:	40010400 	.word	0x40010400
 800e3e0:	00010007 	.word	0x00010007

0800e3e4 <HAL_TIM_PWM_Stop_DMA>:
{
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
  switch (Channel)
 800e3ea:	290c      	cmp	r1, #12
 800e3ec:	f200 8088 	bhi.w	800e500 <HAL_TIM_PWM_Stop_DMA+0x11c>
 800e3f0:	e8df f001 	tbb	[pc, r1]
 800e3f4:	86868607 	.word	0x86868607
 800e3f8:	8686864a 	.word	0x8686864a
 800e3fc:	86868653 	.word	0x86868653
 800e400:	5c          	.byte	0x5c
 800e401:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e402:	6802      	ldr	r2, [r0, #0]
 800e404:	68d3      	ldr	r3, [r2, #12]
 800e406:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e40a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e40c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e40e:	f7f8 f845 	bl	800649c <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e412:	2200      	movs	r2, #0
 800e414:	4629      	mov	r1, r5
 800e416:	6820      	ldr	r0, [r4, #0]
 800e418:	f7fe ff62 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	4939      	ldr	r1, [pc, #228]	; (800e504 <HAL_TIM_PWM_Stop_DMA+0x120>)
 800e420:	4a39      	ldr	r2, [pc, #228]	; (800e508 <HAL_TIM_PWM_Stop_DMA+0x124>)
 800e422:	4293      	cmp	r3, r2
 800e424:	bf18      	it	ne
 800e426:	428b      	cmpne	r3, r1
 800e428:	d00b      	beq.n	800e442 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800e42a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800e42e:	4293      	cmp	r3, r2
 800e430:	d007      	beq.n	800e442 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800e432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e436:	4293      	cmp	r3, r2
 800e438:	d003      	beq.n	800e442 <HAL_TIM_PWM_Stop_DMA+0x5e>
 800e43a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e43e:	4293      	cmp	r3, r2
 800e440:	d10d      	bne.n	800e45e <HAL_TIM_PWM_Stop_DMA+0x7a>
      __HAL_TIM_MOE_DISABLE(htim);
 800e442:	6a19      	ldr	r1, [r3, #32]
 800e444:	f241 1211 	movw	r2, #4369	; 0x1111
 800e448:	4211      	tst	r1, r2
 800e44a:	d108      	bne.n	800e45e <HAL_TIM_PWM_Stop_DMA+0x7a>
 800e44c:	6a19      	ldr	r1, [r3, #32]
 800e44e:	f240 4244 	movw	r2, #1092	; 0x444
 800e452:	4211      	tst	r1, r2
 800e454:	d103      	bne.n	800e45e <HAL_TIM_PWM_Stop_DMA+0x7a>
 800e456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e45c:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	6a19      	ldr	r1, [r3, #32]
 800e462:	f241 1211 	movw	r2, #4369	; 0x1111
 800e466:	4211      	tst	r1, r2
 800e468:	d108      	bne.n	800e47c <HAL_TIM_PWM_Stop_DMA+0x98>
 800e46a:	6a19      	ldr	r1, [r3, #32]
 800e46c:	f240 4244 	movw	r2, #1092	; 0x444
 800e470:	4211      	tst	r1, r2
 800e472:	d103      	bne.n	800e47c <HAL_TIM_PWM_Stop_DMA+0x98>
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	f022 0201 	bic.w	r2, r2, #1
 800e47a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e47c:	b9fd      	cbnz	r5, 800e4be <HAL_TIM_PWM_Stop_DMA+0xda>
 800e47e:	2301      	movs	r3, #1
 800e480:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800e484:	2000      	movs	r0, #0
 800e486:	e03c      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e488:	6802      	ldr	r2, [r0, #0]
 800e48a:	68d3      	ldr	r3, [r2, #12]
 800e48c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e490:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e492:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e494:	f7f8 f802 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800e498:	e7bb      	b.n	800e412 <HAL_TIM_PWM_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e49a:	6802      	ldr	r2, [r0, #0]
 800e49c:	68d3      	ldr	r3, [r2, #12]
 800e49e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4a2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e4a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e4a6:	f7f7 fff9 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800e4aa:	e7b2      	b.n	800e412 <HAL_TIM_PWM_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	68d3      	ldr	r3, [r2, #12]
 800e4b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4b4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e4b6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e4b8:	f7f7 fff0 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800e4bc:	e7a9      	b.n	800e412 <HAL_TIM_PWM_Stop_DMA+0x2e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e4be:	2d04      	cmp	r5, #4
 800e4c0:	d00a      	beq.n	800e4d8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800e4c2:	2d08      	cmp	r5, #8
 800e4c4:	d00d      	beq.n	800e4e2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800e4c6:	2d0c      	cmp	r5, #12
 800e4c8:	d010      	beq.n	800e4ec <HAL_TIM_PWM_Stop_DMA+0x108>
 800e4ca:	2d10      	cmp	r5, #16
 800e4cc:	d013      	beq.n	800e4f6 <HAL_TIM_PWM_Stop_DMA+0x112>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	e014      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e00f      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	e00a      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	e005      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	e000      	b.n	800e502 <HAL_TIM_PWM_Stop_DMA+0x11e>
  switch (Channel)
 800e500:	2001      	movs	r0, #1
}
 800e502:	bd38      	pop	{r3, r4, r5, pc}
 800e504:	40010000 	.word	0x40010000
 800e508:	40010400 	.word	0x40010400

0800e50c <HAL_TIM_IC_Start>:
{
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e510:	460b      	mov	r3, r1
 800e512:	2900      	cmp	r1, #0
 800e514:	d140      	bne.n	800e598 <HAL_TIM_IC_Start+0x8c>
 800e516:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800e51a:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d157      	bne.n	800e5d0 <HAL_TIM_IC_Start+0xc4>
 800e520:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800e524:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e526:	2a01      	cmp	r2, #1
 800e528:	bf08      	it	eq
 800e52a:	2901      	cmpeq	r1, #1
 800e52c:	f040 809a 	bne.w	800e664 <HAL_TIM_IC_Start+0x158>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e530:	2b00      	cmp	r3, #0
 800e532:	d15d      	bne.n	800e5f0 <HAL_TIM_IC_Start+0xe4>
 800e534:	2202      	movs	r2, #2
 800e536:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d174      	bne.n	800e628 <HAL_TIM_IC_Start+0x11c>
 800e53e:	2202      	movs	r2, #2
 800e540:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e544:	2201      	movs	r2, #1
 800e546:	4619      	mov	r1, r3
 800e548:	6820      	ldr	r0, [r4, #0]
 800e54a:	f7fe fec9 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	4a46      	ldr	r2, [pc, #280]	; (800e66c <HAL_TIM_IC_Start+0x160>)
 800e552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e556:	bf18      	it	ne
 800e558:	4293      	cmpne	r3, r2
 800e55a:	d075      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e55c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e560:	4293      	cmp	r3, r2
 800e562:	d071      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e564:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e568:	4293      	cmp	r3, r2
 800e56a:	d06d      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e56c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e570:	4293      	cmp	r3, r2
 800e572:	d069      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e574:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e578:	4293      	cmp	r3, r2
 800e57a:	d065      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e57c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e580:	4293      	cmp	r3, r2
 800e582:	d061      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
 800e584:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e588:	4293      	cmp	r3, r2
 800e58a:	d05d      	beq.n	800e648 <HAL_TIM_IC_Start+0x13c>
    __HAL_TIM_ENABLE(htim);
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	f042 0201 	orr.w	r2, r2, #1
 800e592:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e594:	2000      	movs	r0, #0
 800e596:	e066      	b.n	800e666 <HAL_TIM_IC_Start+0x15a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e598:	2904      	cmp	r1, #4
 800e59a:	d009      	beq.n	800e5b0 <HAL_TIM_IC_Start+0xa4>
 800e59c:	2908      	cmp	r1, #8
 800e59e:	d00b      	beq.n	800e5b8 <HAL_TIM_IC_Start+0xac>
 800e5a0:	290c      	cmp	r1, #12
 800e5a2:	d00d      	beq.n	800e5c0 <HAL_TIM_IC_Start+0xb4>
 800e5a4:	2910      	cmp	r1, #16
 800e5a6:	d00f      	beq.n	800e5c8 <HAL_TIM_IC_Start+0xbc>
 800e5a8:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 800e5ac:	b2c9      	uxtb	r1, r1
 800e5ae:	e7b5      	b.n	800e51c <HAL_TIM_IC_Start+0x10>
 800e5b0:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 800e5b4:	b2c9      	uxtb	r1, r1
 800e5b6:	e7b1      	b.n	800e51c <HAL_TIM_IC_Start+0x10>
 800e5b8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 800e5bc:	b2c9      	uxtb	r1, r1
 800e5be:	e7ad      	b.n	800e51c <HAL_TIM_IC_Start+0x10>
 800e5c0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800e5c4:	b2c9      	uxtb	r1, r1
 800e5c6:	e7a9      	b.n	800e51c <HAL_TIM_IC_Start+0x10>
 800e5c8:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
 800e5cc:	b2c9      	uxtb	r1, r1
 800e5ce:	e7a5      	b.n	800e51c <HAL_TIM_IC_Start+0x10>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d005      	beq.n	800e5e0 <HAL_TIM_IC_Start+0xd4>
 800e5d4:	2b08      	cmp	r3, #8
 800e5d6:	d007      	beq.n	800e5e8 <HAL_TIM_IC_Start+0xdc>
 800e5d8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	e7a2      	b.n	800e526 <HAL_TIM_IC_Start+0x1a>
 800e5e0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800e5e4:	b2d2      	uxtb	r2, r2
 800e5e6:	e79e      	b.n	800e526 <HAL_TIM_IC_Start+0x1a>
 800e5e8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e5ec:	b2d2      	uxtb	r2, r2
 800e5ee:	e79a      	b.n	800e526 <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e5f0:	2b04      	cmp	r3, #4
 800e5f2:	d009      	beq.n	800e608 <HAL_TIM_IC_Start+0xfc>
 800e5f4:	2b08      	cmp	r3, #8
 800e5f6:	d00b      	beq.n	800e610 <HAL_TIM_IC_Start+0x104>
 800e5f8:	2b0c      	cmp	r3, #12
 800e5fa:	d00d      	beq.n	800e618 <HAL_TIM_IC_Start+0x10c>
 800e5fc:	2b10      	cmp	r3, #16
 800e5fe:	d00f      	beq.n	800e620 <HAL_TIM_IC_Start+0x114>
 800e600:	2202      	movs	r2, #2
 800e602:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e606:	e798      	b.n	800e53a <HAL_TIM_IC_Start+0x2e>
 800e608:	2202      	movs	r2, #2
 800e60a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 800e60e:	e794      	b.n	800e53a <HAL_TIM_IC_Start+0x2e>
 800e610:	2202      	movs	r2, #2
 800e612:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800e616:	e790      	b.n	800e53a <HAL_TIM_IC_Start+0x2e>
 800e618:	2202      	movs	r2, #2
 800e61a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800e61e:	e78c      	b.n	800e53a <HAL_TIM_IC_Start+0x2e>
 800e620:	2202      	movs	r2, #2
 800e622:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e626:	e788      	b.n	800e53a <HAL_TIM_IC_Start+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e628:	2b04      	cmp	r3, #4
 800e62a:	d005      	beq.n	800e638 <HAL_TIM_IC_Start+0x12c>
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d007      	beq.n	800e640 <HAL_TIM_IC_Start+0x134>
 800e630:	2202      	movs	r2, #2
 800e632:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 800e636:	e785      	b.n	800e544 <HAL_TIM_IC_Start+0x38>
 800e638:	2202      	movs	r2, #2
 800e63a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e63e:	e781      	b.n	800e544 <HAL_TIM_IC_Start+0x38>
 800e640:	2202      	movs	r2, #2
 800e642:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
 800e646:	e77d      	b.n	800e544 <HAL_TIM_IC_Start+0x38>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e648:	6899      	ldr	r1, [r3, #8]
 800e64a:	4a09      	ldr	r2, [pc, #36]	; (800e670 <HAL_TIM_IC_Start+0x164>)
 800e64c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e64e:	2a06      	cmp	r2, #6
 800e650:	bf18      	it	ne
 800e652:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800e656:	d007      	beq.n	800e668 <HAL_TIM_IC_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	f042 0201 	orr.w	r2, r2, #1
 800e65e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e660:	2000      	movs	r0, #0
 800e662:	e000      	b.n	800e666 <HAL_TIM_IC_Start+0x15a>
    return HAL_ERROR;
 800e664:	2001      	movs	r0, #1
}
 800e666:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800e668:	2000      	movs	r0, #0
 800e66a:	e7fc      	b.n	800e666 <HAL_TIM_IC_Start+0x15a>
 800e66c:	40010000 	.word	0x40010000
 800e670:	00010007 	.word	0x00010007

0800e674 <HAL_TIM_IC_Stop>:
{
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4605      	mov	r5, r0
 800e678:	460c      	mov	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e67a:	2200      	movs	r2, #0
 800e67c:	6800      	ldr	r0, [r0, #0]
 800e67e:	f7fe fe2f 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	6a19      	ldr	r1, [r3, #32]
 800e686:	f241 1211 	movw	r2, #4369	; 0x1111
 800e68a:	4211      	tst	r1, r2
 800e68c:	d108      	bne.n	800e6a0 <HAL_TIM_IC_Stop+0x2c>
 800e68e:	6a19      	ldr	r1, [r3, #32]
 800e690:	f240 4244 	movw	r2, #1092	; 0x444
 800e694:	4211      	tst	r1, r2
 800e696:	d103      	bne.n	800e6a0 <HAL_TIM_IC_Stop+0x2c>
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	f022 0201 	bic.w	r2, r2, #1
 800e69e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6a0:	b944      	cbnz	r4, 800e6b4 <HAL_TIM_IC_Stop+0x40>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6a8:	bb04      	cbnz	r4, 800e6ec <HAL_TIM_IC_Stop+0x78>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6b4:	2c04      	cmp	r4, #4
 800e6b6:	d009      	beq.n	800e6cc <HAL_TIM_IC_Stop+0x58>
 800e6b8:	2c08      	cmp	r4, #8
 800e6ba:	d00b      	beq.n	800e6d4 <HAL_TIM_IC_Stop+0x60>
 800e6bc:	2c0c      	cmp	r4, #12
 800e6be:	d00d      	beq.n	800e6dc <HAL_TIM_IC_Stop+0x68>
 800e6c0:	2c10      	cmp	r4, #16
 800e6c2:	d00f      	beq.n	800e6e4 <HAL_TIM_IC_Stop+0x70>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800e6ca:	e7ed      	b.n	800e6a8 <HAL_TIM_IC_Stop+0x34>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800e6d2:	e7e9      	b.n	800e6a8 <HAL_TIM_IC_Stop+0x34>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800e6da:	e7e5      	b.n	800e6a8 <HAL_TIM_IC_Stop+0x34>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e6e2:	e7e1      	b.n	800e6a8 <HAL_TIM_IC_Stop+0x34>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800e6ea:	e7dd      	b.n	800e6a8 <HAL_TIM_IC_Stop+0x34>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e6ec:	2c04      	cmp	r4, #4
 800e6ee:	d005      	beq.n	800e6fc <HAL_TIM_IC_Stop+0x88>
 800e6f0:	2c08      	cmp	r4, #8
 800e6f2:	d007      	beq.n	800e704 <HAL_TIM_IC_Stop+0x90>
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 800e6fa:	e7d9      	b.n	800e6b0 <HAL_TIM_IC_Stop+0x3c>
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800e702:	e7d5      	b.n	800e6b0 <HAL_TIM_IC_Stop+0x3c>
 800e704:	2301      	movs	r3, #1
 800e706:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800e70a:	e7d1      	b.n	800e6b0 <HAL_TIM_IC_Stop+0x3c>

0800e70c <HAL_TIM_IC_Start_IT>:
{
 800e70c:	b510      	push	{r4, lr}
 800e70e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e710:	460b      	mov	r3, r1
 800e712:	bb11      	cbnz	r1, 800e75a <HAL_TIM_IC_Start_IT+0x4e>
 800e714:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800e718:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d139      	bne.n	800e792 <HAL_TIM_IC_Start_IT+0x86>
 800e71e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800e722:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e724:	2a01      	cmp	r2, #1
 800e726:	bf08      	it	eq
 800e728:	2901      	cmpeq	r1, #1
 800e72a:	f040 80bd 	bne.w	800e8a8 <HAL_TIM_IC_Start_IT+0x19c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d13f      	bne.n	800e7b2 <HAL_TIM_IC_Start_IT+0xa6>
 800e732:	2202      	movs	r2, #2
 800e734:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d156      	bne.n	800e7ea <HAL_TIM_IC_Start_IT+0xde>
 800e73c:	2202      	movs	r2, #2
 800e73e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  switch (Channel)
 800e742:	2b0c      	cmp	r3, #12
 800e744:	f200 80b2 	bhi.w	800e8ac <HAL_TIM_IC_Start_IT+0x1a0>
 800e748:	e8df f003 	tbb	[pc, r3]
 800e74c:	b0b0b05f 	.word	0xb0b0b05f
 800e750:	b0b0b08e 	.word	0xb0b0b08e
 800e754:	b0b0b094 	.word	0xb0b0b094
 800e758:	9a          	.byte	0x9a
 800e759:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e75a:	2904      	cmp	r1, #4
 800e75c:	d009      	beq.n	800e772 <HAL_TIM_IC_Start_IT+0x66>
 800e75e:	2908      	cmp	r1, #8
 800e760:	d00b      	beq.n	800e77a <HAL_TIM_IC_Start_IT+0x6e>
 800e762:	290c      	cmp	r1, #12
 800e764:	d00d      	beq.n	800e782 <HAL_TIM_IC_Start_IT+0x76>
 800e766:	2910      	cmp	r1, #16
 800e768:	d00f      	beq.n	800e78a <HAL_TIM_IC_Start_IT+0x7e>
 800e76a:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 800e76e:	b2c9      	uxtb	r1, r1
 800e770:	e7d3      	b.n	800e71a <HAL_TIM_IC_Start_IT+0xe>
 800e772:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 800e776:	b2c9      	uxtb	r1, r1
 800e778:	e7cf      	b.n	800e71a <HAL_TIM_IC_Start_IT+0xe>
 800e77a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 800e77e:	b2c9      	uxtb	r1, r1
 800e780:	e7cb      	b.n	800e71a <HAL_TIM_IC_Start_IT+0xe>
 800e782:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800e786:	b2c9      	uxtb	r1, r1
 800e788:	e7c7      	b.n	800e71a <HAL_TIM_IC_Start_IT+0xe>
 800e78a:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
 800e78e:	b2c9      	uxtb	r1, r1
 800e790:	e7c3      	b.n	800e71a <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e792:	2b04      	cmp	r3, #4
 800e794:	d005      	beq.n	800e7a2 <HAL_TIM_IC_Start_IT+0x96>
 800e796:	2b08      	cmp	r3, #8
 800e798:	d007      	beq.n	800e7aa <HAL_TIM_IC_Start_IT+0x9e>
 800e79a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800e79e:	b2d2      	uxtb	r2, r2
 800e7a0:	e7c0      	b.n	800e724 <HAL_TIM_IC_Start_IT+0x18>
 800e7a2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800e7a6:	b2d2      	uxtb	r2, r2
 800e7a8:	e7bc      	b.n	800e724 <HAL_TIM_IC_Start_IT+0x18>
 800e7aa:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800e7ae:	b2d2      	uxtb	r2, r2
 800e7b0:	e7b8      	b.n	800e724 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d009      	beq.n	800e7ca <HAL_TIM_IC_Start_IT+0xbe>
 800e7b6:	2b08      	cmp	r3, #8
 800e7b8:	d00b      	beq.n	800e7d2 <HAL_TIM_IC_Start_IT+0xc6>
 800e7ba:	2b0c      	cmp	r3, #12
 800e7bc:	d00d      	beq.n	800e7da <HAL_TIM_IC_Start_IT+0xce>
 800e7be:	2b10      	cmp	r3, #16
 800e7c0:	d00f      	beq.n	800e7e2 <HAL_TIM_IC_Start_IT+0xd6>
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e7c8:	e7b6      	b.n	800e738 <HAL_TIM_IC_Start_IT+0x2c>
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 800e7d0:	e7b2      	b.n	800e738 <HAL_TIM_IC_Start_IT+0x2c>
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800e7d8:	e7ae      	b.n	800e738 <HAL_TIM_IC_Start_IT+0x2c>
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800e7e0:	e7aa      	b.n	800e738 <HAL_TIM_IC_Start_IT+0x2c>
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e7e8:	e7a6      	b.n	800e738 <HAL_TIM_IC_Start_IT+0x2c>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d005      	beq.n	800e7fa <HAL_TIM_IC_Start_IT+0xee>
 800e7ee:	2b08      	cmp	r3, #8
 800e7f0:	d007      	beq.n	800e802 <HAL_TIM_IC_Start_IT+0xf6>
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 800e7f8:	e7a3      	b.n	800e742 <HAL_TIM_IC_Start_IT+0x36>
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e800:	e79f      	b.n	800e742 <HAL_TIM_IC_Start_IT+0x36>
 800e802:	2202      	movs	r2, #2
 800e804:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
 800e808:	e79b      	b.n	800e742 <HAL_TIM_IC_Start_IT+0x36>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e80a:	6821      	ldr	r1, [r4, #0]
 800e80c:	68ca      	ldr	r2, [r1, #12]
 800e80e:	f042 0202 	orr.w	r2, r2, #2
 800e812:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e814:	2201      	movs	r2, #1
 800e816:	4619      	mov	r1, r3
 800e818:	6820      	ldr	r0, [r4, #0]
 800e81a:	f7fe fd61 	bl	800d2e0 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e81e:	6823      	ldr	r3, [r4, #0]
 800e820:	4a24      	ldr	r2, [pc, #144]	; (800e8b4 <HAL_TIM_IC_Start_IT+0x1a8>)
 800e822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e826:	bf18      	it	ne
 800e828:	4293      	cmpne	r3, r2
 800e82a:	d02f      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e82c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e830:	4293      	cmp	r3, r2
 800e832:	d02b      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e838:	4293      	cmp	r3, r2
 800e83a:	d027      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e83c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e840:	4293      	cmp	r3, r2
 800e842:	d023      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e844:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e848:	4293      	cmp	r3, r2
 800e84a:	d01f      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e84c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e850:	4293      	cmp	r3, r2
 800e852:	d01b      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
 800e854:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e858:	4293      	cmp	r3, r2
 800e85a:	d017      	beq.n	800e88c <HAL_TIM_IC_Start_IT+0x180>
      __HAL_TIM_ENABLE(htim);
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	f042 0201 	orr.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	2000      	movs	r0, #0
 800e866:	e022      	b.n	800e8ae <HAL_TIM_IC_Start_IT+0x1a2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e868:	6821      	ldr	r1, [r4, #0]
 800e86a:	68ca      	ldr	r2, [r1, #12]
 800e86c:	f042 0204 	orr.w	r2, r2, #4
 800e870:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800e872:	e7cf      	b.n	800e814 <HAL_TIM_IC_Start_IT+0x108>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e874:	6821      	ldr	r1, [r4, #0]
 800e876:	68ca      	ldr	r2, [r1, #12]
 800e878:	f042 0208 	orr.w	r2, r2, #8
 800e87c:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800e87e:	e7c9      	b.n	800e814 <HAL_TIM_IC_Start_IT+0x108>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e880:	6821      	ldr	r1, [r4, #0]
 800e882:	68ca      	ldr	r2, [r1, #12]
 800e884:	f042 0210 	orr.w	r2, r2, #16
 800e888:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800e88a:	e7c3      	b.n	800e814 <HAL_TIM_IC_Start_IT+0x108>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e88c:	6899      	ldr	r1, [r3, #8]
 800e88e:	4a0a      	ldr	r2, [pc, #40]	; (800e8b8 <HAL_TIM_IC_Start_IT+0x1ac>)
 800e890:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e892:	2a06      	cmp	r2, #6
 800e894:	bf18      	it	ne
 800e896:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800e89a:	d009      	beq.n	800e8b0 <HAL_TIM_IC_Start_IT+0x1a4>
        __HAL_TIM_ENABLE(htim);
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	f042 0201 	orr.w	r2, r2, #1
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e002      	b.n	800e8ae <HAL_TIM_IC_Start_IT+0x1a2>
    return HAL_ERROR;
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e000      	b.n	800e8ae <HAL_TIM_IC_Start_IT+0x1a2>
  switch (Channel)
 800e8ac:	2001      	movs	r0, #1
}
 800e8ae:	bd10      	pop	{r4, pc}
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7fc      	b.n	800e8ae <HAL_TIM_IC_Start_IT+0x1a2>
 800e8b4:	40010000 	.word	0x40010000
 800e8b8:	00010007 	.word	0x00010007

0800e8bc <HAL_TIM_IC_Stop_IT>:
{
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4605      	mov	r5, r0
 800e8c0:	460c      	mov	r4, r1
  switch (Channel)
 800e8c2:	290c      	cmp	r1, #12
 800e8c4:	d86c      	bhi.n	800e9a0 <HAL_TIM_IC_Stop_IT+0xe4>
 800e8c6:	e8df f001 	tbb	[pc, r1]
 800e8ca:	6b07      	.short	0x6b07
 800e8cc:	6b2a6b6b 	.word	0x6b2a6b6b
 800e8d0:	6b306b6b 	.word	0x6b306b6b
 800e8d4:	6b6b      	.short	0x6b6b
 800e8d6:	36          	.byte	0x36
 800e8d7:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e8d8:	6802      	ldr	r2, [r0, #0]
 800e8da:	68d3      	ldr	r3, [r2, #12]
 800e8dc:	f023 0302 	bic.w	r3, r3, #2
 800e8e0:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	6828      	ldr	r0, [r5, #0]
 800e8e8:	f7fe fcfa 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE(htim);
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	6a19      	ldr	r1, [r3, #32]
 800e8f0:	f241 1211 	movw	r2, #4369	; 0x1111
 800e8f4:	4211      	tst	r1, r2
 800e8f6:	d108      	bne.n	800e90a <HAL_TIM_IC_Stop_IT+0x4e>
 800e8f8:	6a19      	ldr	r1, [r3, #32]
 800e8fa:	f240 4244 	movw	r2, #1092	; 0x444
 800e8fe:	4211      	tst	r1, r2
 800e900:	d103      	bne.n	800e90a <HAL_TIM_IC_Stop_IT+0x4e>
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	f022 0201 	bic.w	r2, r2, #1
 800e908:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e90a:	b9d4      	cbnz	r4, 800e942 <HAL_TIM_IC_Stop_IT+0x86>
 800e90c:	2301      	movs	r3, #1
 800e90e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e912:	bb94      	cbnz	r4, 800e97a <HAL_TIM_IC_Stop_IT+0xbe>
 800e914:	2301      	movs	r3, #1
 800e916:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800e91a:	2000      	movs	r0, #0
 800e91c:	e041      	b.n	800e9a2 <HAL_TIM_IC_Stop_IT+0xe6>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e91e:	6802      	ldr	r2, [r0, #0]
 800e920:	68d3      	ldr	r3, [r2, #12]
 800e922:	f023 0304 	bic.w	r3, r3, #4
 800e926:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e928:	e7db      	b.n	800e8e2 <HAL_TIM_IC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e92a:	6802      	ldr	r2, [r0, #0]
 800e92c:	68d3      	ldr	r3, [r2, #12]
 800e92e:	f023 0308 	bic.w	r3, r3, #8
 800e932:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e934:	e7d5      	b.n	800e8e2 <HAL_TIM_IC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e936:	6802      	ldr	r2, [r0, #0]
 800e938:	68d3      	ldr	r3, [r2, #12]
 800e93a:	f023 0310 	bic.w	r3, r3, #16
 800e93e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800e940:	e7cf      	b.n	800e8e2 <HAL_TIM_IC_Stop_IT+0x26>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e942:	2c04      	cmp	r4, #4
 800e944:	d009      	beq.n	800e95a <HAL_TIM_IC_Stop_IT+0x9e>
 800e946:	2c08      	cmp	r4, #8
 800e948:	d00b      	beq.n	800e962 <HAL_TIM_IC_Stop_IT+0xa6>
 800e94a:	2c0c      	cmp	r4, #12
 800e94c:	d00d      	beq.n	800e96a <HAL_TIM_IC_Stop_IT+0xae>
 800e94e:	2c10      	cmp	r4, #16
 800e950:	d00f      	beq.n	800e972 <HAL_TIM_IC_Stop_IT+0xb6>
 800e952:	2301      	movs	r3, #1
 800e954:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800e958:	e7db      	b.n	800e912 <HAL_TIM_IC_Stop_IT+0x56>
 800e95a:	2301      	movs	r3, #1
 800e95c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800e960:	e7d7      	b.n	800e912 <HAL_TIM_IC_Stop_IT+0x56>
 800e962:	2301      	movs	r3, #1
 800e964:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800e968:	e7d3      	b.n	800e912 <HAL_TIM_IC_Stop_IT+0x56>
 800e96a:	2301      	movs	r3, #1
 800e96c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e970:	e7cf      	b.n	800e912 <HAL_TIM_IC_Stop_IT+0x56>
 800e972:	2301      	movs	r3, #1
 800e974:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800e978:	e7cb      	b.n	800e912 <HAL_TIM_IC_Stop_IT+0x56>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e97a:	2c04      	cmp	r4, #4
 800e97c:	d006      	beq.n	800e98c <HAL_TIM_IC_Stop_IT+0xd0>
 800e97e:	2c08      	cmp	r4, #8
 800e980:	d009      	beq.n	800e996 <HAL_TIM_IC_Stop_IT+0xda>
 800e982:	2301      	movs	r3, #1
 800e984:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 800e988:	2000      	movs	r0, #0
 800e98a:	e00a      	b.n	800e9a2 <HAL_TIM_IC_Stop_IT+0xe6>
 800e98c:	2301      	movs	r3, #1
 800e98e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800e992:	2000      	movs	r0, #0
 800e994:	e005      	b.n	800e9a2 <HAL_TIM_IC_Stop_IT+0xe6>
 800e996:	2301      	movs	r3, #1
 800e998:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800e99c:	2000      	movs	r0, #0
 800e99e:	e000      	b.n	800e9a2 <HAL_TIM_IC_Stop_IT+0xe6>
  switch (Channel)
 800e9a0:	2001      	movs	r0, #1
}
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}

0800e9a4 <HAL_TIM_IC_Start_DMA>:
{
 800e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	4616      	mov	r6, r2
 800e9aa:	461f      	mov	r7, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	d137      	bne.n	800ea22 <HAL_TIM_IC_Start_DMA+0x7e>
 800e9b2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800e9b6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e9b8:	2d00      	cmp	r5, #0
 800e9ba:	d14e      	bne.n	800ea5a <HAL_TIM_IC_Start_DMA+0xb6>
 800e9bc:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800e9c0:	b2c9      	uxtb	r1, r1
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800e9c2:	2902      	cmp	r1, #2
 800e9c4:	bf18      	it	ne
 800e9c6:	2b02      	cmpne	r3, #2
 800e9c8:	f000 8116 	beq.w	800ebf8 <HAL_TIM_IC_Start_DMA+0x254>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	bf08      	it	eq
 800e9d0:	2901      	cmpeq	r1, #1
 800e9d2:	f040 8113 	bne.w	800ebfc <HAL_TIM_IC_Start_DMA+0x258>
    if ((pData == NULL) || (Length == 0U))
 800e9d6:	2f00      	cmp	r7, #0
 800e9d8:	bf18      	it	ne
 800e9da:	2e00      	cmpne	r6, #0
 800e9dc:	f000 8110 	beq.w	800ec00 <HAL_TIM_IC_Start_DMA+0x25c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9e0:	2d00      	cmp	r5, #0
 800e9e2:	d14a      	bne.n	800ea7a <HAL_TIM_IC_Start_DMA+0xd6>
 800e9e4:	2302      	movs	r3, #2
 800e9e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	d161      	bne.n	800eab2 <HAL_TIM_IC_Start_DMA+0x10e>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	f7fe fc71 	bl	800d2e0 <TIM_CCxChannelCmd>
  switch (Channel)
 800e9fe:	2d0c      	cmp	r5, #12
 800ea00:	f200 80c8 	bhi.w	800eb94 <HAL_TIM_IC_Start_DMA+0x1f0>
 800ea04:	e8df f015 	tbh	[pc, r5, lsl #1]
 800ea08:	00c60065 	.word	0x00c60065
 800ea0c:	00c600c6 	.word	0x00c600c6
 800ea10:	00c6007e 	.word	0x00c6007e
 800ea14:	00c600c6 	.word	0x00c600c6
 800ea18:	00c60096 	.word	0x00c60096
 800ea1c:	00c600c6 	.word	0x00c600c6
 800ea20:	00ae      	.short	0x00ae
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ea22:	2904      	cmp	r1, #4
 800ea24:	d009      	beq.n	800ea3a <HAL_TIM_IC_Start_DMA+0x96>
 800ea26:	2908      	cmp	r1, #8
 800ea28:	d00b      	beq.n	800ea42 <HAL_TIM_IC_Start_DMA+0x9e>
 800ea2a:	290c      	cmp	r1, #12
 800ea2c:	d00d      	beq.n	800ea4a <HAL_TIM_IC_Start_DMA+0xa6>
 800ea2e:	2910      	cmp	r1, #16
 800ea30:	d00f      	beq.n	800ea52 <HAL_TIM_IC_Start_DMA+0xae>
 800ea32:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	e7be      	b.n	800e9b8 <HAL_TIM_IC_Start_DMA+0x14>
 800ea3a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	e7ba      	b.n	800e9b8 <HAL_TIM_IC_Start_DMA+0x14>
 800ea42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	e7b6      	b.n	800e9b8 <HAL_TIM_IC_Start_DMA+0x14>
 800ea4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	e7b2      	b.n	800e9b8 <HAL_TIM_IC_Start_DMA+0x14>
 800ea52:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	e7ae      	b.n	800e9b8 <HAL_TIM_IC_Start_DMA+0x14>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ea5a:	2d04      	cmp	r5, #4
 800ea5c:	d005      	beq.n	800ea6a <HAL_TIM_IC_Start_DMA+0xc6>
 800ea5e:	2d08      	cmp	r5, #8
 800ea60:	d007      	beq.n	800ea72 <HAL_TIM_IC_Start_DMA+0xce>
 800ea62:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800ea66:	b2c9      	uxtb	r1, r1
 800ea68:	e7ab      	b.n	800e9c2 <HAL_TIM_IC_Start_DMA+0x1e>
 800ea6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea6e:	b2c9      	uxtb	r1, r1
 800ea70:	e7a7      	b.n	800e9c2 <HAL_TIM_IC_Start_DMA+0x1e>
 800ea72:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 800ea76:	b2c9      	uxtb	r1, r1
 800ea78:	e7a3      	b.n	800e9c2 <HAL_TIM_IC_Start_DMA+0x1e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea7a:	2d04      	cmp	r5, #4
 800ea7c:	d009      	beq.n	800ea92 <HAL_TIM_IC_Start_DMA+0xee>
 800ea7e:	2d08      	cmp	r5, #8
 800ea80:	d00b      	beq.n	800ea9a <HAL_TIM_IC_Start_DMA+0xf6>
 800ea82:	2d0c      	cmp	r5, #12
 800ea84:	d00d      	beq.n	800eaa2 <HAL_TIM_IC_Start_DMA+0xfe>
 800ea86:	2d10      	cmp	r5, #16
 800ea88:	d00f      	beq.n	800eaaa <HAL_TIM_IC_Start_DMA+0x106>
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea90:	e7ab      	b.n	800e9ea <HAL_TIM_IC_Start_DMA+0x46>
 800ea92:	2302      	movs	r3, #2
 800ea94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ea98:	e7a7      	b.n	800e9ea <HAL_TIM_IC_Start_DMA+0x46>
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800eaa0:	e7a3      	b.n	800e9ea <HAL_TIM_IC_Start_DMA+0x46>
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800eaa8:	e79f      	b.n	800e9ea <HAL_TIM_IC_Start_DMA+0x46>
 800eaaa:	2302      	movs	r3, #2
 800eaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eab0:	e79b      	b.n	800e9ea <HAL_TIM_IC_Start_DMA+0x46>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eab2:	2d04      	cmp	r5, #4
 800eab4:	d005      	beq.n	800eac2 <HAL_TIM_IC_Start_DMA+0x11e>
 800eab6:	2d08      	cmp	r5, #8
 800eab8:	d007      	beq.n	800eaca <HAL_TIM_IC_Start_DMA+0x126>
 800eaba:	2302      	movs	r3, #2
 800eabc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800eac0:	e798      	b.n	800e9f4 <HAL_TIM_IC_Start_DMA+0x50>
 800eac2:	2302      	movs	r3, #2
 800eac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eac8:	e794      	b.n	800e9f4 <HAL_TIM_IC_Start_DMA+0x50>
 800eaca:	2302      	movs	r3, #2
 800eacc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ead0:	e790      	b.n	800e9f4 <HAL_TIM_IC_Start_DMA+0x50>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ead2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ead4:	4a4f      	ldr	r2, [pc, #316]	; (800ec14 <HAL_TIM_IC_Start_DMA+0x270>)
 800ead6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ead8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eada:	4a4f      	ldr	r2, [pc, #316]	; (800ec18 <HAL_TIM_IC_Start_DMA+0x274>)
 800eadc:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800eade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae0:	4a4e      	ldr	r2, [pc, #312]	; (800ec1c <HAL_TIM_IC_Start_DMA+0x278>)
 800eae2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800eae4:	6821      	ldr	r1, [r4, #0]
 800eae6:	463b      	mov	r3, r7
 800eae8:	4632      	mov	r2, r6
 800eaea:	3134      	adds	r1, #52	; 0x34
 800eaec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eaee:	f7f7 f9e9 	bl	8005ec4 <HAL_DMA_Start_IT>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	f040 8086 	bne.w	800ec04 <HAL_TIM_IC_Start_DMA+0x260>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800eaf8:	6822      	ldr	r2, [r4, #0]
 800eafa:	68d3      	ldr	r3, [r2, #12]
 800eafc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb00:	60d3      	str	r3, [r2, #12]
      break;
 800eb02:	e048      	b.n	800eb96 <HAL_TIM_IC_Start_DMA+0x1f2>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800eb04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb06:	4a43      	ldr	r2, [pc, #268]	; (800ec14 <HAL_TIM_IC_Start_DMA+0x270>)
 800eb08:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800eb0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb0c:	4a42      	ldr	r2, [pc, #264]	; (800ec18 <HAL_TIM_IC_Start_DMA+0x274>)
 800eb0e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800eb10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb12:	4a42      	ldr	r2, [pc, #264]	; (800ec1c <HAL_TIM_IC_Start_DMA+0x278>)
 800eb14:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800eb16:	6821      	ldr	r1, [r4, #0]
 800eb18:	463b      	mov	r3, r7
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	3138      	adds	r1, #56	; 0x38
 800eb1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eb20:	f7f7 f9d0 	bl	8005ec4 <HAL_DMA_Start_IT>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d16f      	bne.n	800ec08 <HAL_TIM_IC_Start_DMA+0x264>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800eb28:	6822      	ldr	r2, [r4, #0]
 800eb2a:	68d3      	ldr	r3, [r2, #12]
 800eb2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eb30:	60d3      	str	r3, [r2, #12]
      break;
 800eb32:	e030      	b.n	800eb96 <HAL_TIM_IC_Start_DMA+0x1f2>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800eb34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb36:	4a37      	ldr	r2, [pc, #220]	; (800ec14 <HAL_TIM_IC_Start_DMA+0x270>)
 800eb38:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800eb3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb3c:	4a36      	ldr	r2, [pc, #216]	; (800ec18 <HAL_TIM_IC_Start_DMA+0x274>)
 800eb3e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800eb40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb42:	4a36      	ldr	r2, [pc, #216]	; (800ec1c <HAL_TIM_IC_Start_DMA+0x278>)
 800eb44:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800eb46:	6821      	ldr	r1, [r4, #0]
 800eb48:	463b      	mov	r3, r7
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	313c      	adds	r1, #60	; 0x3c
 800eb4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800eb50:	f7f7 f9b8 	bl	8005ec4 <HAL_DMA_Start_IT>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d159      	bne.n	800ec0c <HAL_TIM_IC_Start_DMA+0x268>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	68d3      	ldr	r3, [r2, #12]
 800eb5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eb60:	60d3      	str	r3, [r2, #12]
      break;
 800eb62:	e018      	b.n	800eb96 <HAL_TIM_IC_Start_DMA+0x1f2>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800eb64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb66:	4a2b      	ldr	r2, [pc, #172]	; (800ec14 <HAL_TIM_IC_Start_DMA+0x270>)
 800eb68:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800eb6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb6c:	4a2a      	ldr	r2, [pc, #168]	; (800ec18 <HAL_TIM_IC_Start_DMA+0x274>)
 800eb6e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800eb70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb72:	4a2a      	ldr	r2, [pc, #168]	; (800ec1c <HAL_TIM_IC_Start_DMA+0x278>)
 800eb74:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800eb76:	6821      	ldr	r1, [r4, #0]
 800eb78:	463b      	mov	r3, r7
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	3140      	adds	r1, #64	; 0x40
 800eb7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800eb80:	f7f7 f9a0 	bl	8005ec4 <HAL_DMA_Start_IT>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d143      	bne.n	800ec10 <HAL_TIM_IC_Start_DMA+0x26c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	68d3      	ldr	r3, [r2, #12]
 800eb8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eb90:	60d3      	str	r3, [r2, #12]
      break;
 800eb92:	e000      	b.n	800eb96 <HAL_TIM_IC_Start_DMA+0x1f2>
  switch (Channel)
 800eb94:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	4a21      	ldr	r2, [pc, #132]	; (800ec20 <HAL_TIM_IC_Start_DMA+0x27c>)
 800eb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb9e:	bf18      	it	ne
 800eba0:	4293      	cmpne	r3, r2
 800eba2:	d01c      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800eba4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d018      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800ebac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d014      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800ebb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d010      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800ebbc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d00c      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800ebc4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d008      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
 800ebcc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d004      	beq.n	800ebde <HAL_TIM_IC_Start_DMA+0x23a>
    __HAL_TIM_ENABLE(htim);
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	f042 0201 	orr.w	r2, r2, #1
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	e00f      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebde:	6899      	ldr	r1, [r3, #8]
 800ebe0:	4a10      	ldr	r2, [pc, #64]	; (800ec24 <HAL_TIM_IC_Start_DMA+0x280>)
 800ebe2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebe4:	2a06      	cmp	r2, #6
 800ebe6:	bf18      	it	ne
 800ebe8:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800ebec:	d007      	beq.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
      __HAL_TIM_ENABLE(htim);
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	f042 0201 	orr.w	r2, r2, #1
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	e002      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
    return HAL_BUSY;
 800ebf8:	2002      	movs	r0, #2
 800ebfa:	e000      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
    return HAL_ERROR;
 800ebfc:	2001      	movs	r0, #1
}
 800ebfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800ec00:	2001      	movs	r0, #1
 800ec02:	e7fc      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
        return HAL_ERROR;
 800ec04:	2001      	movs	r0, #1
 800ec06:	e7fa      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
        return HAL_ERROR;
 800ec08:	2001      	movs	r0, #1
 800ec0a:	e7f8      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
        return HAL_ERROR;
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	e7f6      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
        return HAL_ERROR;
 800ec10:	2001      	movs	r0, #1
 800ec12:	e7f4      	b.n	800ebfe <HAL_TIM_IC_Start_DMA+0x25a>
 800ec14:	0800c21f 	.word	0x0800c21f
 800ec18:	0800c2a1 	.word	0x0800c2a1
 800ec1c:	0800c551 	.word	0x0800c551
 800ec20:	40010000 	.word	0x40010000
 800ec24:	00010007 	.word	0x00010007

0800ec28 <HAL_TIM_IC_Stop_DMA>:
{
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	460c      	mov	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec2e:	2200      	movs	r2, #0
 800ec30:	6800      	ldr	r0, [r0, #0]
 800ec32:	f7fe fb55 	bl	800d2e0 <TIM_CCxChannelCmd>
  switch (Channel)
 800ec36:	2c0c      	cmp	r4, #12
 800ec38:	d874      	bhi.n	800ed24 <HAL_TIM_IC_Stop_DMA+0xfc>
 800ec3a:	e8df f004 	tbb	[pc, r4]
 800ec3e:	7307      	.short	0x7307
 800ec40:	73297373 	.word	0x73297373
 800ec44:	73327373 	.word	0x73327373
 800ec48:	7373      	.short	0x7373
 800ec4a:	3b          	.byte	0x3b
 800ec4b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ec4c:	682a      	ldr	r2, [r5, #0]
 800ec4e:	68d3      	ldr	r3, [r2, #12]
 800ec50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec54:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ec56:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec58:	f7f7 fc20 	bl	800649c <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	6a19      	ldr	r1, [r3, #32]
 800ec60:	f241 1211 	movw	r2, #4369	; 0x1111
 800ec64:	4211      	tst	r1, r2
 800ec66:	d108      	bne.n	800ec7a <HAL_TIM_IC_Stop_DMA+0x52>
 800ec68:	6a19      	ldr	r1, [r3, #32]
 800ec6a:	f240 4244 	movw	r2, #1092	; 0x444
 800ec6e:	4211      	tst	r1, r2
 800ec70:	d103      	bne.n	800ec7a <HAL_TIM_IC_Stop_DMA+0x52>
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	f022 0201 	bic.w	r2, r2, #1
 800ec78:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ec7a:	bb24      	cbnz	r4, 800ecc6 <HAL_TIM_IC_Stop_DMA+0x9e>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ec82:	2c00      	cmp	r4, #0
 800ec84:	d13b      	bne.n	800ecfe <HAL_TIM_IC_Stop_DMA+0xd6>
 800ec86:	2301      	movs	r3, #1
 800ec88:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	e04a      	b.n	800ed26 <HAL_TIM_IC_Stop_DMA+0xfe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ec90:	682a      	ldr	r2, [r5, #0]
 800ec92:	68d3      	ldr	r3, [r2, #12]
 800ec94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec98:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ec9a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ec9c:	f7f7 fbfe 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800eca0:	e7dc      	b.n	800ec5c <HAL_TIM_IC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800eca2:	682a      	ldr	r2, [r5, #0]
 800eca4:	68d3      	ldr	r3, [r2, #12]
 800eca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecaa:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ecac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ecae:	f7f7 fbf5 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800ecb2:	e7d3      	b.n	800ec5c <HAL_TIM_IC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ecb4:	682a      	ldr	r2, [r5, #0]
 800ecb6:	68d3      	ldr	r3, [r2, #12]
 800ecb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecbc:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ecbe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ecc0:	f7f7 fbec 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800ecc4:	e7ca      	b.n	800ec5c <HAL_TIM_IC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ecc6:	2c04      	cmp	r4, #4
 800ecc8:	d009      	beq.n	800ecde <HAL_TIM_IC_Stop_DMA+0xb6>
 800ecca:	2c08      	cmp	r4, #8
 800eccc:	d00b      	beq.n	800ece6 <HAL_TIM_IC_Stop_DMA+0xbe>
 800ecce:	2c0c      	cmp	r4, #12
 800ecd0:	d00d      	beq.n	800ecee <HAL_TIM_IC_Stop_DMA+0xc6>
 800ecd2:	2c10      	cmp	r4, #16
 800ecd4:	d00f      	beq.n	800ecf6 <HAL_TIM_IC_Stop_DMA+0xce>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800ecdc:	e7d1      	b.n	800ec82 <HAL_TIM_IC_Stop_DMA+0x5a>
 800ecde:	2301      	movs	r3, #1
 800ece0:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800ece4:	e7cd      	b.n	800ec82 <HAL_TIM_IC_Stop_DMA+0x5a>
 800ece6:	2301      	movs	r3, #1
 800ece8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800ecec:	e7c9      	b.n	800ec82 <HAL_TIM_IC_Stop_DMA+0x5a>
 800ecee:	2301      	movs	r3, #1
 800ecf0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800ecf4:	e7c5      	b.n	800ec82 <HAL_TIM_IC_Stop_DMA+0x5a>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800ecfc:	e7c1      	b.n	800ec82 <HAL_TIM_IC_Stop_DMA+0x5a>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ecfe:	2c04      	cmp	r4, #4
 800ed00:	d006      	beq.n	800ed10 <HAL_TIM_IC_Stop_DMA+0xe8>
 800ed02:	2c08      	cmp	r4, #8
 800ed04:	d009      	beq.n	800ed1a <HAL_TIM_IC_Stop_DMA+0xf2>
 800ed06:	2301      	movs	r3, #1
 800ed08:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	e00a      	b.n	800ed26 <HAL_TIM_IC_Stop_DMA+0xfe>
 800ed10:	2301      	movs	r3, #1
 800ed12:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800ed16:	2000      	movs	r0, #0
 800ed18:	e005      	b.n	800ed26 <HAL_TIM_IC_Stop_DMA+0xfe>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800ed20:	2000      	movs	r0, #0
 800ed22:	e000      	b.n	800ed26 <HAL_TIM_IC_Stop_DMA+0xfe>
  switch (Channel)
 800ed24:	2001      	movs	r0, #1
}
 800ed26:	bd38      	pop	{r3, r4, r5, pc}

0800ed28 <HAL_TIM_OnePulse_Start>:
{
 800ed28:	b510      	push	{r4, lr}
 800ed2a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ed2c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800ed30:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ed32:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800ed36:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ed38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ed3c:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ed3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ed42:	2a01      	cmp	r2, #1
 800ed44:	bf08      	it	eq
 800ed46:	2901      	cmpeq	r1, #1
 800ed48:	d134      	bne.n	800edb4 <HAL_TIM_OnePulse_Start+0x8c>
 800ed4a:	b2db      	uxtb	r3, r3
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	bf18      	it	ne
 800ed50:	2301      	movne	r3, #1
 800ed52:	2801      	cmp	r0, #1
 800ed54:	d130      	bne.n	800edb8 <HAL_TIM_OnePulse_Start+0x90>
 800ed56:	bb7b      	cbnz	r3, 800edb8 <HAL_TIM_OnePulse_Start+0x90>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed58:	2302      	movs	r3, #2
 800ed5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ed66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	6820      	ldr	r0, [r4, #0]
 800ed70:	f7fe fab6 	bl	800d2e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ed74:	2201      	movs	r2, #1
 800ed76:	2104      	movs	r1, #4
 800ed78:	6820      	ldr	r0, [r4, #0]
 800ed7a:	f7fe fab1 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	490e      	ldr	r1, [pc, #56]	; (800edbc <HAL_TIM_OnePulse_Start+0x94>)
 800ed82:	4a0f      	ldr	r2, [pc, #60]	; (800edc0 <HAL_TIM_OnePulse_Start+0x98>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	bf18      	it	ne
 800ed88:	428b      	cmpne	r3, r1
 800ed8a:	d00d      	beq.n	800eda8 <HAL_TIM_OnePulse_Start+0x80>
 800ed8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d009      	beq.n	800eda8 <HAL_TIM_OnePulse_Start+0x80>
 800ed94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d005      	beq.n	800eda8 <HAL_TIM_OnePulse_Start+0x80>
 800ed9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d001      	beq.n	800eda8 <HAL_TIM_OnePulse_Start+0x80>
  return HAL_OK;
 800eda4:	2000      	movs	r0, #0
 800eda6:	e006      	b.n	800edb6 <HAL_TIM_OnePulse_Start+0x8e>
    __HAL_TIM_MOE_ENABLE(htim);
 800eda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800edae:	645a      	str	r2, [r3, #68]	; 0x44
  return HAL_OK;
 800edb0:	2000      	movs	r0, #0
 800edb2:	e000      	b.n	800edb6 <HAL_TIM_OnePulse_Start+0x8e>
    return HAL_ERROR;
 800edb4:	2001      	movs	r0, #1
}
 800edb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800edb8:	2001      	movs	r0, #1
 800edba:	e7fc      	b.n	800edb6 <HAL_TIM_OnePulse_Start+0x8e>
 800edbc:	40010000 	.word	0x40010000
 800edc0:	40010400 	.word	0x40010400

0800edc4 <HAL_TIM_OnePulse_Stop>:
{
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800edc8:	2200      	movs	r2, #0
 800edca:	4611      	mov	r1, r2
 800edcc:	6800      	ldr	r0, [r0, #0]
 800edce:	f7fe fa87 	bl	800d2e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800edd2:	2200      	movs	r2, #0
 800edd4:	2104      	movs	r1, #4
 800edd6:	6820      	ldr	r0, [r4, #0]
 800edd8:	f7fe fa82 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	491d      	ldr	r1, [pc, #116]	; (800ee54 <HAL_TIM_OnePulse_Stop+0x90>)
 800ede0:	4a1d      	ldr	r2, [pc, #116]	; (800ee58 <HAL_TIM_OnePulse_Stop+0x94>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	bf18      	it	ne
 800ede6:	428b      	cmpne	r3, r1
 800ede8:	d00b      	beq.n	800ee02 <HAL_TIM_OnePulse_Stop+0x3e>
 800edea:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800edee:	4293      	cmp	r3, r2
 800edf0:	d007      	beq.n	800ee02 <HAL_TIM_OnePulse_Stop+0x3e>
 800edf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d003      	beq.n	800ee02 <HAL_TIM_OnePulse_Stop+0x3e>
 800edfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d10d      	bne.n	800ee1e <HAL_TIM_OnePulse_Stop+0x5a>
    __HAL_TIM_MOE_DISABLE(htim);
 800ee02:	6a19      	ldr	r1, [r3, #32]
 800ee04:	f241 1211 	movw	r2, #4369	; 0x1111
 800ee08:	4211      	tst	r1, r2
 800ee0a:	d108      	bne.n	800ee1e <HAL_TIM_OnePulse_Stop+0x5a>
 800ee0c:	6a19      	ldr	r1, [r3, #32]
 800ee0e:	f240 4244 	movw	r2, #1092	; 0x444
 800ee12:	4211      	tst	r1, r2
 800ee14:	d103      	bne.n	800ee1e <HAL_TIM_OnePulse_Stop+0x5a>
 800ee16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee1c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	6a19      	ldr	r1, [r3, #32]
 800ee22:	f241 1211 	movw	r2, #4369	; 0x1111
 800ee26:	4211      	tst	r1, r2
 800ee28:	d108      	bne.n	800ee3c <HAL_TIM_OnePulse_Stop+0x78>
 800ee2a:	6a19      	ldr	r1, [r3, #32]
 800ee2c:	f240 4244 	movw	r2, #1092	; 0x444
 800ee30:	4211      	tst	r1, r2
 800ee32:	d103      	bne.n	800ee3c <HAL_TIM_OnePulse_Stop+0x78>
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	f022 0201 	bic.w	r2, r2, #1
 800ee3a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800ee4e:	2000      	movs	r0, #0
 800ee50:	bd10      	pop	{r4, pc}
 800ee52:	bf00      	nop
 800ee54:	40010000 	.word	0x40010000
 800ee58:	40010400 	.word	0x40010400

0800ee5c <HAL_TIM_OnePulse_Start_IT>:
{
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ee60:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800ee64:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ee66:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800ee6a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ee6c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ee70:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ee72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee76:	2a01      	cmp	r2, #1
 800ee78:	bf08      	it	eq
 800ee7a:	2901      	cmpeq	r1, #1
 800ee7c:	d13f      	bne.n	800eefe <HAL_TIM_OnePulse_Start_IT+0xa2>
 800ee7e:	b2db      	uxtb	r3, r3
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee80:	3b01      	subs	r3, #1
 800ee82:	bf18      	it	ne
 800ee84:	2301      	movne	r3, #1
 800ee86:	2801      	cmp	r0, #1
 800ee88:	d13b      	bne.n	800ef02 <HAL_TIM_OnePulse_Start_IT+0xa6>
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d139      	bne.n	800ef02 <HAL_TIM_OnePulse_Start_IT+0xa6>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee8e:	2302      	movs	r3, #2
 800ee90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eea0:	6822      	ldr	r2, [r4, #0]
 800eea2:	68d3      	ldr	r3, [r2, #12]
 800eea4:	f043 0302 	orr.w	r3, r3, #2
 800eea8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eeaa:	6822      	ldr	r2, [r4, #0]
 800eeac:	68d3      	ldr	r3, [r2, #12]
 800eeae:	f043 0304 	orr.w	r3, r3, #4
 800eeb2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	6820      	ldr	r0, [r4, #0]
 800eeba:	f7fe fa11 	bl	800d2e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eebe:	2201      	movs	r2, #1
 800eec0:	2104      	movs	r1, #4
 800eec2:	6820      	ldr	r0, [r4, #0]
 800eec4:	f7fe fa0c 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eec8:	6823      	ldr	r3, [r4, #0]
 800eeca:	490f      	ldr	r1, [pc, #60]	; (800ef08 <HAL_TIM_OnePulse_Start_IT+0xac>)
 800eecc:	4a0f      	ldr	r2, [pc, #60]	; (800ef0c <HAL_TIM_OnePulse_Start_IT+0xb0>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	bf18      	it	ne
 800eed2:	428b      	cmpne	r3, r1
 800eed4:	d00d      	beq.n	800eef2 <HAL_TIM_OnePulse_Start_IT+0x96>
 800eed6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d009      	beq.n	800eef2 <HAL_TIM_OnePulse_Start_IT+0x96>
 800eede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d005      	beq.n	800eef2 <HAL_TIM_OnePulse_Start_IT+0x96>
 800eee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d001      	beq.n	800eef2 <HAL_TIM_OnePulse_Start_IT+0x96>
  return HAL_OK;
 800eeee:	2000      	movs	r0, #0
 800eef0:	e006      	b.n	800ef00 <HAL_TIM_OnePulse_Start_IT+0xa4>
    __HAL_TIM_MOE_ENABLE(htim);
 800eef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eef8:	645a      	str	r2, [r3, #68]	; 0x44
  return HAL_OK;
 800eefa:	2000      	movs	r0, #0
 800eefc:	e000      	b.n	800ef00 <HAL_TIM_OnePulse_Start_IT+0xa4>
    return HAL_ERROR;
 800eefe:	2001      	movs	r0, #1
}
 800ef00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ef02:	2001      	movs	r0, #1
 800ef04:	e7fc      	b.n	800ef00 <HAL_TIM_OnePulse_Start_IT+0xa4>
 800ef06:	bf00      	nop
 800ef08:	40010000 	.word	0x40010000
 800ef0c:	40010400 	.word	0x40010400

0800ef10 <HAL_TIM_OnePulse_Stop_IT>:
{
 800ef10:	b510      	push	{r4, lr}
 800ef12:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ef14:	6802      	ldr	r2, [r0, #0]
 800ef16:	68d3      	ldr	r3, [r2, #12]
 800ef18:	f023 0302 	bic.w	r3, r3, #2
 800ef1c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ef1e:	6802      	ldr	r2, [r0, #0]
 800ef20:	68d3      	ldr	r3, [r2, #12]
 800ef22:	f023 0304 	bic.w	r3, r3, #4
 800ef26:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ef28:	2200      	movs	r2, #0
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	6800      	ldr	r0, [r0, #0]
 800ef2e:	f7fe f9d7 	bl	800d2e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ef32:	2200      	movs	r2, #0
 800ef34:	2104      	movs	r1, #4
 800ef36:	6820      	ldr	r0, [r4, #0]
 800ef38:	f7fe f9d2 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	491d      	ldr	r1, [pc, #116]	; (800efb4 <HAL_TIM_OnePulse_Stop_IT+0xa4>)
 800ef40:	4a1d      	ldr	r2, [pc, #116]	; (800efb8 <HAL_TIM_OnePulse_Stop_IT+0xa8>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	bf18      	it	ne
 800ef46:	428b      	cmpne	r3, r1
 800ef48:	d00b      	beq.n	800ef62 <HAL_TIM_OnePulse_Stop_IT+0x52>
 800ef4a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d007      	beq.n	800ef62 <HAL_TIM_OnePulse_Stop_IT+0x52>
 800ef52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d003      	beq.n	800ef62 <HAL_TIM_OnePulse_Stop_IT+0x52>
 800ef5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d10d      	bne.n	800ef7e <HAL_TIM_OnePulse_Stop_IT+0x6e>
    __HAL_TIM_MOE_DISABLE(htim);
 800ef62:	6a19      	ldr	r1, [r3, #32]
 800ef64:	f241 1211 	movw	r2, #4369	; 0x1111
 800ef68:	4211      	tst	r1, r2
 800ef6a:	d108      	bne.n	800ef7e <HAL_TIM_OnePulse_Stop_IT+0x6e>
 800ef6c:	6a19      	ldr	r1, [r3, #32]
 800ef6e:	f240 4244 	movw	r2, #1092	; 0x444
 800ef72:	4211      	tst	r1, r2
 800ef74:	d103      	bne.n	800ef7e <HAL_TIM_OnePulse_Stop_IT+0x6e>
 800ef76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef7c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800ef7e:	6823      	ldr	r3, [r4, #0]
 800ef80:	6a19      	ldr	r1, [r3, #32]
 800ef82:	f241 1211 	movw	r2, #4369	; 0x1111
 800ef86:	4211      	tst	r1, r2
 800ef88:	d108      	bne.n	800ef9c <HAL_TIM_OnePulse_Stop_IT+0x8c>
 800ef8a:	6a19      	ldr	r1, [r3, #32]
 800ef8c:	f240 4244 	movw	r2, #1092	; 0x444
 800ef90:	4211      	tst	r1, r2
 800ef92:	d103      	bne.n	800ef9c <HAL_TIM_OnePulse_Stop_IT+0x8c>
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	f022 0201 	bic.w	r2, r2, #1
 800ef9a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800efa2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800efa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800efaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800efae:	2000      	movs	r0, #0
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	bf00      	nop
 800efb4:	40010000 	.word	0x40010000
 800efb8:	40010400 	.word	0x40010400

0800efbc <HAL_TIM_Encoder_Start>:
{
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800efc0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800efc4:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800efc6:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800efca:	fa5f fc82 	uxtb.w	ip, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800efce:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 800efd2:	b2d0      	uxtb	r0, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800efd4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 800efd8:	460d      	mov	r5, r1
 800efda:	b9b1      	cbnz	r1, 800f00a <HAL_TIM_Encoder_Start+0x4e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800efdc:	2801      	cmp	r0, #1
 800efde:	bf08      	it	eq
 800efe0:	2b01      	cmpeq	r3, #1
 800efe2:	d147      	bne.n	800f074 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800efe4:	2302      	movs	r3, #2
 800efe6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800efea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 800efee:	b37d      	cbz	r5, 800f050 <HAL_TIM_Encoder_Start+0x94>
 800eff0:	2d04      	cmp	r5, #4
 800eff2:	d039      	beq.n	800f068 <HAL_TIM_Encoder_Start+0xac>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eff4:	2201      	movs	r2, #1
 800eff6:	2100      	movs	r1, #0
 800eff8:	6820      	ldr	r0, [r4, #0]
 800effa:	f7fe f971 	bl	800d2e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800effe:	2201      	movs	r2, #1
 800f000:	2104      	movs	r1, #4
 800f002:	6820      	ldr	r0, [r4, #0]
 800f004:	f7fe f96c 	bl	800d2e0 <TIM_CCxChannelCmd>
      break;
 800f008:	e027      	b.n	800f05a <HAL_TIM_Encoder_Start+0x9e>
 800f00a:	b2d2      	uxtb	r2, r2
  else if (Channel == TIM_CHANNEL_2)
 800f00c:	2904      	cmp	r1, #4
 800f00e:	d014      	beq.n	800f03a <HAL_TIM_Encoder_Start+0x7e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f010:	f1bc 0f01 	cmp.w	ip, #1
 800f014:	bf08      	it	eq
 800f016:	2b01      	cmpeq	r3, #1
 800f018:	d130      	bne.n	800f07c <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f01a:	3a01      	subs	r2, #1
 800f01c:	bf18      	it	ne
 800f01e:	2201      	movne	r2, #1
 800f020:	2801      	cmp	r0, #1
 800f022:	d12d      	bne.n	800f080 <HAL_TIM_Encoder_Start+0xc4>
 800f024:	bb62      	cbnz	r2, 800f080 <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f026:	2302      	movs	r3, #2
 800f028:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f02c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f030:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f034:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f038:	e7d9      	b.n	800efee <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f03a:	2a01      	cmp	r2, #1
 800f03c:	bf08      	it	eq
 800f03e:	f1bc 0f01 	cmpeq.w	ip, #1
 800f042:	d119      	bne.n	800f078 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f044:	2302      	movs	r3, #2
 800f046:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f04a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f04e:	e7ce      	b.n	800efee <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f050:	2201      	movs	r2, #1
 800f052:	2100      	movs	r1, #0
 800f054:	6820      	ldr	r0, [r4, #0]
 800f056:	f7fe f943 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800f05a:	6822      	ldr	r2, [r4, #0]
 800f05c:	6813      	ldr	r3, [r2, #0]
 800f05e:	f043 0301 	orr.w	r3, r3, #1
 800f062:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800f064:	2000      	movs	r0, #0
}
 800f066:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f068:	2201      	movs	r2, #1
 800f06a:	2104      	movs	r1, #4
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	f7fe f937 	bl	800d2e0 <TIM_CCxChannelCmd>
      break;
 800f072:	e7f2      	b.n	800f05a <HAL_TIM_Encoder_Start+0x9e>
      return HAL_ERROR;
 800f074:	2001      	movs	r0, #1
 800f076:	e7f6      	b.n	800f066 <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800f078:	2001      	movs	r0, #1
 800f07a:	e7f4      	b.n	800f066 <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800f07c:	2001      	movs	r0, #1
 800f07e:	e7f2      	b.n	800f066 <HAL_TIM_Encoder_Start+0xaa>
 800f080:	2001      	movs	r0, #1
 800f082:	e7f0      	b.n	800f066 <HAL_TIM_Encoder_Start+0xaa>

0800f084 <HAL_TIM_Encoder_Stop>:
{
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4604      	mov	r4, r0
  switch (Channel)
 800f088:	460d      	mov	r5, r1
 800f08a:	b161      	cbz	r1, 800f0a6 <HAL_TIM_Encoder_Stop+0x22>
 800f08c:	2904      	cmp	r1, #4
 800f08e:	d02b      	beq.n	800f0e8 <HAL_TIM_Encoder_Stop+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f090:	2200      	movs	r2, #0
 800f092:	4611      	mov	r1, r2
 800f094:	6800      	ldr	r0, [r0, #0]
 800f096:	f7fe f923 	bl	800d2e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f09a:	2200      	movs	r2, #0
 800f09c:	2104      	movs	r1, #4
 800f09e:	6820      	ldr	r0, [r4, #0]
 800f0a0:	f7fe f91e 	bl	800d2e0 <TIM_CCxChannelCmd>
      break;
 800f0a4:	e004      	b.n	800f0b0 <HAL_TIM_Encoder_Stop+0x2c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	6800      	ldr	r0, [r0, #0]
 800f0ac:	f7fe f918 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	6a19      	ldr	r1, [r3, #32]
 800f0b4:	f241 1211 	movw	r2, #4369	; 0x1111
 800f0b8:	4211      	tst	r1, r2
 800f0ba:	d108      	bne.n	800f0ce <HAL_TIM_Encoder_Stop+0x4a>
 800f0bc:	6a19      	ldr	r1, [r3, #32]
 800f0be:	f240 4244 	movw	r2, #1092	; 0x444
 800f0c2:	4211      	tst	r1, r2
 800f0c4:	d103      	bne.n	800f0ce <HAL_TIM_Encoder_Stop+0x4a>
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	f022 0201 	bic.w	r2, r2, #1
 800f0cc:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800f0ce:	2d04      	cmp	r5, #4
 800f0d0:	bf18      	it	ne
 800f0d2:	2d00      	cmpne	r5, #0
 800f0d4:	d13a      	bne.n	800f14c <HAL_TIM_Encoder_Stop+0xc8>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f0d6:	b96d      	cbnz	r5, 800f0f4 <HAL_TIM_Encoder_Stop+0x70>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f0de:	bb2d      	cbnz	r5, 800f12c <HAL_TIM_Encoder_Stop+0xa8>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f0e6:	e03a      	b.n	800f15e <HAL_TIM_Encoder_Stop+0xda>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2104      	movs	r1, #4
 800f0ec:	6800      	ldr	r0, [r0, #0]
 800f0ee:	f7fe f8f7 	bl	800d2e0 <TIM_CCxChannelCmd>
      break;
 800f0f2:	e7dd      	b.n	800f0b0 <HAL_TIM_Encoder_Stop+0x2c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f0f4:	2d04      	cmp	r5, #4
 800f0f6:	d009      	beq.n	800f10c <HAL_TIM_Encoder_Stop+0x88>
 800f0f8:	2d08      	cmp	r5, #8
 800f0fa:	d00b      	beq.n	800f114 <HAL_TIM_Encoder_Stop+0x90>
 800f0fc:	2d0c      	cmp	r5, #12
 800f0fe:	d00d      	beq.n	800f11c <HAL_TIM_Encoder_Stop+0x98>
 800f100:	2d10      	cmp	r5, #16
 800f102:	d00f      	beq.n	800f124 <HAL_TIM_Encoder_Stop+0xa0>
 800f104:	2301      	movs	r3, #1
 800f106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f10a:	e7e8      	b.n	800f0de <HAL_TIM_Encoder_Stop+0x5a>
 800f10c:	2301      	movs	r3, #1
 800f10e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f112:	e7e4      	b.n	800f0de <HAL_TIM_Encoder_Stop+0x5a>
 800f114:	2301      	movs	r3, #1
 800f116:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f11a:	e7e0      	b.n	800f0de <HAL_TIM_Encoder_Stop+0x5a>
 800f11c:	2301      	movs	r3, #1
 800f11e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f122:	e7dc      	b.n	800f0de <HAL_TIM_Encoder_Stop+0x5a>
 800f124:	2301      	movs	r3, #1
 800f126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f12a:	e7d8      	b.n	800f0de <HAL_TIM_Encoder_Stop+0x5a>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f12c:	2d04      	cmp	r5, #4
 800f12e:	d005      	beq.n	800f13c <HAL_TIM_Encoder_Stop+0xb8>
 800f130:	2d08      	cmp	r5, #8
 800f132:	d007      	beq.n	800f144 <HAL_TIM_Encoder_Stop+0xc0>
 800f134:	2301      	movs	r3, #1
 800f136:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800f13a:	e010      	b.n	800f15e <HAL_TIM_Encoder_Stop+0xda>
 800f13c:	2301      	movs	r3, #1
 800f13e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f142:	e00c      	b.n	800f15e <HAL_TIM_Encoder_Stop+0xda>
 800f144:	2301      	movs	r3, #1
 800f146:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f14a:	e008      	b.n	800f15e <HAL_TIM_Encoder_Stop+0xda>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f14c:	2301      	movs	r3, #1
 800f14e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f152:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f156:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f15a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800f15e:	2000      	movs	r0, #0
 800f160:	bd38      	pop	{r3, r4, r5, pc}

0800f162 <HAL_TIM_Encoder_Start_IT>:
{
 800f162:	b538      	push	{r3, r4, r5, lr}
 800f164:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f166:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800f16a:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f16c:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800f170:	fa5f fc82 	uxtb.w	ip, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f174:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 800f178:	b2d0      	uxtb	r0, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f17a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 800f17e:	460d      	mov	r5, r1
 800f180:	bb09      	cbnz	r1, 800f1c6 <HAL_TIM_Encoder_Start_IT+0x64>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f182:	2801      	cmp	r0, #1
 800f184:	bf08      	it	eq
 800f186:	2b01      	cmpeq	r3, #1
 800f188:	d15d      	bne.n	800f246 <HAL_TIM_Encoder_Start_IT+0xe4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f18a:	2302      	movs	r3, #2
 800f18c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f190:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 800f194:	2d00      	cmp	r5, #0
 800f196:	d03a      	beq.n	800f20e <HAL_TIM_Encoder_Start_IT+0xac>
 800f198:	2d04      	cmp	r5, #4
 800f19a:	d049      	beq.n	800f230 <HAL_TIM_Encoder_Start_IT+0xce>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f19c:	2201      	movs	r2, #1
 800f19e:	2100      	movs	r1, #0
 800f1a0:	6820      	ldr	r0, [r4, #0]
 800f1a2:	f7fe f89d 	bl	800d2e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	2104      	movs	r1, #4
 800f1aa:	6820      	ldr	r0, [r4, #0]
 800f1ac:	f7fe f898 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	68d3      	ldr	r3, [r2, #12]
 800f1b4:	f043 0302 	orr.w	r3, r3, #2
 800f1b8:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f1ba:	6822      	ldr	r2, [r4, #0]
 800f1bc:	68d3      	ldr	r3, [r2, #12]
 800f1be:	f043 0304 	orr.w	r3, r3, #4
 800f1c2:	60d3      	str	r3, [r2, #12]
      break;
 800f1c4:	e02d      	b.n	800f222 <HAL_TIM_Encoder_Start_IT+0xc0>
 800f1c6:	b2d2      	uxtb	r2, r2
  else if (Channel == TIM_CHANNEL_2)
 800f1c8:	2904      	cmp	r1, #4
 800f1ca:	d015      	beq.n	800f1f8 <HAL_TIM_Encoder_Start_IT+0x96>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f1cc:	f1bc 0f01 	cmp.w	ip, #1
 800f1d0:	bf08      	it	eq
 800f1d2:	2b01      	cmpeq	r3, #1
 800f1d4:	d13b      	bne.n	800f24e <HAL_TIM_Encoder_Start_IT+0xec>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f1d6:	3a01      	subs	r2, #1
 800f1d8:	bf18      	it	ne
 800f1da:	2201      	movne	r2, #1
 800f1dc:	2801      	cmp	r0, #1
 800f1de:	d138      	bne.n	800f252 <HAL_TIM_Encoder_Start_IT+0xf0>
 800f1e0:	2a00      	cmp	r2, #0
 800f1e2:	d136      	bne.n	800f252 <HAL_TIM_Encoder_Start_IT+0xf0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1f6:	e7cd      	b.n	800f194 <HAL_TIM_Encoder_Start_IT+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f1f8:	2a01      	cmp	r2, #1
 800f1fa:	bf08      	it	eq
 800f1fc:	f1bc 0f01 	cmpeq.w	ip, #1
 800f200:	d123      	bne.n	800f24a <HAL_TIM_Encoder_Start_IT+0xe8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f202:	2302      	movs	r3, #2
 800f204:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f20c:	e7c2      	b.n	800f194 <HAL_TIM_Encoder_Start_IT+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f20e:	2201      	movs	r2, #1
 800f210:	2100      	movs	r1, #0
 800f212:	6820      	ldr	r0, [r4, #0]
 800f214:	f7fe f864 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f218:	6822      	ldr	r2, [r4, #0]
 800f21a:	68d3      	ldr	r3, [r2, #12]
 800f21c:	f043 0302 	orr.w	r3, r3, #2
 800f220:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800f222:	6822      	ldr	r2, [r4, #0]
 800f224:	6813      	ldr	r3, [r2, #0]
 800f226:	f043 0301 	orr.w	r3, r3, #1
 800f22a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800f22c:	2000      	movs	r0, #0
}
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f230:	2201      	movs	r2, #1
 800f232:	2104      	movs	r1, #4
 800f234:	6820      	ldr	r0, [r4, #0]
 800f236:	f7fe f853 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f23a:	6822      	ldr	r2, [r4, #0]
 800f23c:	68d3      	ldr	r3, [r2, #12]
 800f23e:	f043 0304 	orr.w	r3, r3, #4
 800f242:	60d3      	str	r3, [r2, #12]
      break;
 800f244:	e7ed      	b.n	800f222 <HAL_TIM_Encoder_Start_IT+0xc0>
      return HAL_ERROR;
 800f246:	2001      	movs	r0, #1
 800f248:	e7f1      	b.n	800f22e <HAL_TIM_Encoder_Start_IT+0xcc>
      return HAL_ERROR;
 800f24a:	2001      	movs	r0, #1
 800f24c:	e7ef      	b.n	800f22e <HAL_TIM_Encoder_Start_IT+0xcc>
      return HAL_ERROR;
 800f24e:	2001      	movs	r0, #1
 800f250:	e7ed      	b.n	800f22e <HAL_TIM_Encoder_Start_IT+0xcc>
 800f252:	2001      	movs	r0, #1
 800f254:	e7eb      	b.n	800f22e <HAL_TIM_Encoder_Start_IT+0xcc>

0800f256 <HAL_TIM_Encoder_Stop_IT>:
{
 800f256:	b538      	push	{r3, r4, r5, lr}
 800f258:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800f25a:	460d      	mov	r5, r1
 800f25c:	2900      	cmp	r1, #0
 800f25e:	d031      	beq.n	800f2c4 <HAL_TIM_Encoder_Stop_IT+0x6e>
  else if (Channel == TIM_CHANNEL_2)
 800f260:	2904      	cmp	r1, #4
 800f262:	d03a      	beq.n	800f2da <HAL_TIM_Encoder_Stop_IT+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f264:	2200      	movs	r2, #0
 800f266:	4611      	mov	r1, r2
 800f268:	6800      	ldr	r0, [r0, #0]
 800f26a:	f7fe f839 	bl	800d2e0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f26e:	2200      	movs	r2, #0
 800f270:	2104      	movs	r1, #4
 800f272:	6820      	ldr	r0, [r4, #0]
 800f274:	f7fe f834 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	68d3      	ldr	r3, [r2, #12]
 800f27c:	f023 0302 	bic.w	r3, r3, #2
 800f280:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f282:	6822      	ldr	r2, [r4, #0]
 800f284:	68d3      	ldr	r3, [r2, #12]
 800f286:	f023 0304 	bic.w	r3, r3, #4
 800f28a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	6a19      	ldr	r1, [r3, #32]
 800f290:	f241 1211 	movw	r2, #4369	; 0x1111
 800f294:	4211      	tst	r1, r2
 800f296:	d108      	bne.n	800f2aa <HAL_TIM_Encoder_Stop_IT+0x54>
 800f298:	6a19      	ldr	r1, [r3, #32]
 800f29a:	f240 4244 	movw	r2, #1092	; 0x444
 800f29e:	4211      	tst	r1, r2
 800f2a0:	d103      	bne.n	800f2aa <HAL_TIM_Encoder_Stop_IT+0x54>
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	f022 0201 	bic.w	r2, r2, #1
 800f2a8:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800f2aa:	2d04      	cmp	r5, #4
 800f2ac:	bf18      	it	ne
 800f2ae:	2d00      	cmpne	r5, #0
 800f2b0:	d14a      	bne.n	800f348 <HAL_TIM_Encoder_Stop_IT+0xf2>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f2b2:	b9ed      	cbnz	r5, 800f2f0 <HAL_TIM_Encoder_Stop_IT+0x9a>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f2ba:	bbad      	cbnz	r5, 800f328 <HAL_TIM_Encoder_Stop_IT+0xd2>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f2c2:	e04a      	b.n	800f35a <HAL_TIM_Encoder_Stop_IT+0x104>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	6800      	ldr	r0, [r0, #0]
 800f2ca:	f7fe f809 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	68d3      	ldr	r3, [r2, #12]
 800f2d2:	f023 0302 	bic.w	r3, r3, #2
 800f2d6:	60d3      	str	r3, [r2, #12]
 800f2d8:	e7d8      	b.n	800f28c <HAL_TIM_Encoder_Stop_IT+0x36>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2104      	movs	r1, #4
 800f2de:	6800      	ldr	r0, [r0, #0]
 800f2e0:	f7fd fffe 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	68d3      	ldr	r3, [r2, #12]
 800f2e8:	f023 0304 	bic.w	r3, r3, #4
 800f2ec:	60d3      	str	r3, [r2, #12]
 800f2ee:	e7cd      	b.n	800f28c <HAL_TIM_Encoder_Stop_IT+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f2f0:	2d04      	cmp	r5, #4
 800f2f2:	d009      	beq.n	800f308 <HAL_TIM_Encoder_Stop_IT+0xb2>
 800f2f4:	2d08      	cmp	r5, #8
 800f2f6:	d00b      	beq.n	800f310 <HAL_TIM_Encoder_Stop_IT+0xba>
 800f2f8:	2d0c      	cmp	r5, #12
 800f2fa:	d00d      	beq.n	800f318 <HAL_TIM_Encoder_Stop_IT+0xc2>
 800f2fc:	2d10      	cmp	r5, #16
 800f2fe:	d00f      	beq.n	800f320 <HAL_TIM_Encoder_Stop_IT+0xca>
 800f300:	2301      	movs	r3, #1
 800f302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f306:	e7d8      	b.n	800f2ba <HAL_TIM_Encoder_Stop_IT+0x64>
 800f308:	2301      	movs	r3, #1
 800f30a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f30e:	e7d4      	b.n	800f2ba <HAL_TIM_Encoder_Stop_IT+0x64>
 800f310:	2301      	movs	r3, #1
 800f312:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f316:	e7d0      	b.n	800f2ba <HAL_TIM_Encoder_Stop_IT+0x64>
 800f318:	2301      	movs	r3, #1
 800f31a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f31e:	e7cc      	b.n	800f2ba <HAL_TIM_Encoder_Stop_IT+0x64>
 800f320:	2301      	movs	r3, #1
 800f322:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f326:	e7c8      	b.n	800f2ba <HAL_TIM_Encoder_Stop_IT+0x64>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f328:	2d04      	cmp	r5, #4
 800f32a:	d005      	beq.n	800f338 <HAL_TIM_Encoder_Stop_IT+0xe2>
 800f32c:	2d08      	cmp	r5, #8
 800f32e:	d007      	beq.n	800f340 <HAL_TIM_Encoder_Stop_IT+0xea>
 800f330:	2301      	movs	r3, #1
 800f332:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800f336:	e010      	b.n	800f35a <HAL_TIM_Encoder_Stop_IT+0x104>
 800f338:	2301      	movs	r3, #1
 800f33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f33e:	e00c      	b.n	800f35a <HAL_TIM_Encoder_Stop_IT+0x104>
 800f340:	2301      	movs	r3, #1
 800f342:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f346:	e008      	b.n	800f35a <HAL_TIM_Encoder_Stop_IT+0x104>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f348:	2301      	movs	r3, #1
 800f34a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f34e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f352:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800f35a:	2000      	movs	r0, #0
 800f35c:	bd38      	pop	{r3, r4, r5, pc}

0800f35e <HAL_TIM_Encoder_Start_DMA>:
{
 800f35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f360:	4604      	mov	r4, r0
 800f362:	461d      	mov	r5, r3
 800f364:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f368:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800f36c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f36e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f372:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
 800f376:	fa5f fc8c 	uxtb.w	ip, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f37a:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
  if (Channel == TIM_CHANNEL_1)
 800f37e:	460f      	mov	r7, r1
 800f380:	bb71      	cbnz	r1, 800f3e0 <HAL_TIM_Encoder_Start_DMA+0x82>
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800f382:	f1bc 0f02 	cmp.w	ip, #2
 800f386:	bf18      	it	ne
 800f388:	2802      	cmpne	r0, #2
 800f38a:	f000 80ee 	beq.w	800f56a <HAL_TIM_Encoder_Start_DMA+0x20c>
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 800f38e:	2801      	cmp	r0, #1
 800f390:	bf08      	it	eq
 800f392:	f1bc 0f01 	cmpeq.w	ip, #1
 800f396:	f040 80ea 	bne.w	800f56e <HAL_TIM_Encoder_Start_DMA+0x210>
      if ((pData1 == NULL) || (Length == 0U))
 800f39a:	2e00      	cmp	r6, #0
 800f39c:	bf18      	it	ne
 800f39e:	2a00      	cmpne	r2, #0
 800f3a0:	f000 80e8 	beq.w	800f574 <HAL_TIM_Encoder_Start_DMA+0x216>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f3aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	d066      	beq.n	800f480 <HAL_TIM_Encoder_Start_DMA+0x122>
 800f3b2:	2f04      	cmp	r7, #4
 800f3b4:	f000 8087 	beq.w	800f4c6 <HAL_TIM_Encoder_Start_DMA+0x168>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800f3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3ba:	4978      	ldr	r1, [pc, #480]	; (800f59c <HAL_TIM_Encoder_Start_DMA+0x23e>)
 800f3bc:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3c0:	4977      	ldr	r1, [pc, #476]	; (800f5a0 <HAL_TIM_Encoder_Start_DMA+0x242>)
 800f3c2:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f3c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3c6:	4977      	ldr	r1, [pc, #476]	; (800f5a4 <HAL_TIM_Encoder_Start_DMA+0x246>)
 800f3c8:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 800f3ca:	6821      	ldr	r1, [r4, #0]
 800f3cc:	4633      	mov	r3, r6
 800f3ce:	3134      	adds	r1, #52	; 0x34
 800f3d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3d2:	f7f6 fd77 	bl	8005ec4 <HAL_DMA_Start_IT>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	f000 8099 	beq.w	800f50e <HAL_TIM_Encoder_Start_DMA+0x1b0>
        return HAL_ERROR;
 800f3dc:	2501      	movs	r5, #1
 800f3de:	e0c7      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	fa5f fe8e 	uxtb.w	lr, lr
  else if (Channel == TIM_CHANNEL_2)
 800f3e6:	2904      	cmp	r1, #4
 800f3e8:	d033      	beq.n	800f452 <HAL_TIM_Encoder_Start_DMA+0xf4>
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	bf18      	it	ne
 800f3ee:	2802      	cmpne	r0, #2
 800f3f0:	f000 80c8 	beq.w	800f584 <HAL_TIM_Encoder_Start_DMA+0x226>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800f3f4:	f1be 0f02 	cmp.w	lr, #2
 800f3f8:	bf14      	ite	ne
 800f3fa:	2100      	movne	r1, #0
 800f3fc:	2101      	moveq	r1, #1
 800f3fe:	f1bc 0f02 	cmp.w	ip, #2
 800f402:	f000 80c1 	beq.w	800f588 <HAL_TIM_Encoder_Start_DMA+0x22a>
 800f406:	2900      	cmp	r1, #0
 800f408:	f040 80be 	bne.w	800f588 <HAL_TIM_Encoder_Start_DMA+0x22a>
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 800f40c:	2801      	cmp	r0, #1
 800f40e:	bf08      	it	eq
 800f410:	2b01      	cmpeq	r3, #1
 800f412:	f040 80bb 	bne.w	800f58c <HAL_TIM_Encoder_Start_DMA+0x22e>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 800f416:	f1be 0f01 	cmp.w	lr, #1
 800f41a:	bf14      	ite	ne
 800f41c:	2300      	movne	r3, #0
 800f41e:	2301      	moveq	r3, #1
 800f420:	f1bc 0f01 	cmp.w	ip, #1
 800f424:	f040 80b4 	bne.w	800f590 <HAL_TIM_Encoder_Start_DMA+0x232>
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f000 80b1 	beq.w	800f590 <HAL_TIM_Encoder_Start_DMA+0x232>
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 800f42e:	2d00      	cmp	r5, #0
 800f430:	bf18      	it	ne
 800f432:	2a00      	cmpne	r2, #0
 800f434:	f000 80ae 	beq.w	800f594 <HAL_TIM_Encoder_Start_DMA+0x236>
 800f438:	2e00      	cmp	r6, #0
 800f43a:	f000 80ad 	beq.w	800f598 <HAL_TIM_Encoder_Start_DMA+0x23a>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f43e:	2302      	movs	r3, #2
 800f440:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f444:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f448:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f44c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 800f450:	e7ad      	b.n	800f3ae <HAL_TIM_Encoder_Start_DMA+0x50>
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800f452:	f1be 0f02 	cmp.w	lr, #2
 800f456:	bf18      	it	ne
 800f458:	2b02      	cmpne	r3, #2
 800f45a:	f000 808d 	beq.w	800f578 <HAL_TIM_Encoder_Start_DMA+0x21a>
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 800f45e:	2b01      	cmp	r3, #1
 800f460:	bf08      	it	eq
 800f462:	f1be 0f01 	cmpeq.w	lr, #1
 800f466:	f040 8089 	bne.w	800f57c <HAL_TIM_Encoder_Start_DMA+0x21e>
      if ((pData2 == NULL) || (Length == 0U))
 800f46a:	2e00      	cmp	r6, #0
 800f46c:	bf18      	it	ne
 800f46e:	2d00      	cmpne	r5, #0
 800f470:	f000 8086 	beq.w	800f580 <HAL_TIM_Encoder_Start_DMA+0x222>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f474:	2302      	movs	r3, #2
 800f476:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f47a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f47e:	e796      	b.n	800f3ae <HAL_TIM_Encoder_Start_DMA+0x50>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800f480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f482:	4946      	ldr	r1, [pc, #280]	; (800f59c <HAL_TIM_Encoder_Start_DMA+0x23e>)
 800f484:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f488:	4945      	ldr	r1, [pc, #276]	; (800f5a0 <HAL_TIM_Encoder_Start_DMA+0x242>)
 800f48a:	6419      	str	r1, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f48e:	4945      	ldr	r1, [pc, #276]	; (800f5a4 <HAL_TIM_Encoder_Start_DMA+0x246>)
 800f490:	64d9      	str	r1, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 800f492:	6821      	ldr	r1, [r4, #0]
 800f494:	4633      	mov	r3, r6
 800f496:	3134      	adds	r1, #52	; 0x34
 800f498:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f49a:	f7f6 fd13 	bl	8005ec4 <HAL_DMA_Start_IT>
 800f49e:	4605      	mov	r5, r0
 800f4a0:	b108      	cbz	r0, 800f4a6 <HAL_TIM_Encoder_Start_DMA+0x148>
        return HAL_ERROR;
 800f4a2:	2501      	movs	r5, #1
 800f4a4:	e064      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f4a6:	6822      	ldr	r2, [r4, #0]
 800f4a8:	68d3      	ldr	r3, [r2, #12]
 800f4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f4ae:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	6820      	ldr	r0, [r4, #0]
 800f4b6:	f7fd ff13 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 800f4ba:	6822      	ldr	r2, [r4, #0]
 800f4bc:	6813      	ldr	r3, [r2, #0]
 800f4be:	f043 0301 	orr.w	r3, r3, #1
 800f4c2:	6013      	str	r3, [r2, #0]
      break;
 800f4c4:	e054      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800f4c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4c8:	4a34      	ldr	r2, [pc, #208]	; (800f59c <HAL_TIM_Encoder_Start_DMA+0x23e>)
 800f4ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f4cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4ce:	4a34      	ldr	r2, [pc, #208]	; (800f5a0 <HAL_TIM_Encoder_Start_DMA+0x242>)
 800f4d0:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800f4d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4d4:	4a33      	ldr	r2, [pc, #204]	; (800f5a4 <HAL_TIM_Encoder_Start_DMA+0x246>)
 800f4d6:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 800f4d8:	6821      	ldr	r1, [r4, #0]
 800f4da:	4633      	mov	r3, r6
 800f4dc:	462a      	mov	r2, r5
 800f4de:	3138      	adds	r1, #56	; 0x38
 800f4e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f4e2:	f7f6 fcef 	bl	8005ec4 <HAL_DMA_Start_IT>
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	b108      	cbz	r0, 800f4ee <HAL_TIM_Encoder_Start_DMA+0x190>
        return HAL_ERROR;
 800f4ea:	2501      	movs	r5, #1
 800f4ec:	e040      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f4ee:	6822      	ldr	r2, [r4, #0]
 800f4f0:	68d3      	ldr	r3, [r2, #12]
 800f4f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f4f6:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	2104      	movs	r1, #4
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	f7fd feef 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	6813      	ldr	r3, [r2, #0]
 800f506:	f043 0301 	orr.w	r3, r3, #1
 800f50a:	6013      	str	r3, [r2, #0]
      break;
 800f50c:	e030      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800f50e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f510:	4a22      	ldr	r2, [pc, #136]	; (800f59c <HAL_TIM_Encoder_Start_DMA+0x23e>)
 800f512:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800f514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f516:	4a22      	ldr	r2, [pc, #136]	; (800f5a0 <HAL_TIM_Encoder_Start_DMA+0x242>)
 800f518:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f51a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f51c:	4a21      	ldr	r2, [pc, #132]	; (800f5a4 <HAL_TIM_Encoder_Start_DMA+0x246>)
 800f51e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 800f520:	6821      	ldr	r1, [r4, #0]
 800f522:	4633      	mov	r3, r6
 800f524:	462a      	mov	r2, r5
 800f526:	3138      	adds	r1, #56	; 0x38
 800f528:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f52a:	f7f6 fccb 	bl	8005ec4 <HAL_DMA_Start_IT>
 800f52e:	4605      	mov	r5, r0
 800f530:	b108      	cbz	r0, 800f536 <HAL_TIM_Encoder_Start_DMA+0x1d8>
        return HAL_ERROR;
 800f532:	2501      	movs	r5, #1
 800f534:	e01c      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f536:	6822      	ldr	r2, [r4, #0]
 800f538:	68d3      	ldr	r3, [r2, #12]
 800f53a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f53e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f540:	6822      	ldr	r2, [r4, #0]
 800f542:	68d3      	ldr	r3, [r2, #12]
 800f544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f548:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f54a:	2201      	movs	r2, #1
 800f54c:	2100      	movs	r1, #0
 800f54e:	6820      	ldr	r0, [r4, #0]
 800f550:	f7fd fec6 	bl	800d2e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f554:	2201      	movs	r2, #1
 800f556:	2104      	movs	r1, #4
 800f558:	6820      	ldr	r0, [r4, #0]
 800f55a:	f7fd fec1 	bl	800d2e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 800f55e:	6822      	ldr	r2, [r4, #0]
 800f560:	6813      	ldr	r3, [r2, #0]
 800f562:	f043 0301 	orr.w	r3, r3, #1
 800f566:	6013      	str	r3, [r2, #0]
      break;
 800f568:	e002      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_BUSY;
 800f56a:	2502      	movs	r5, #2
 800f56c:	e000      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_ERROR;
 800f56e:	2501      	movs	r5, #1
}
 800f570:	4628      	mov	r0, r5
 800f572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800f574:	2501      	movs	r5, #1
 800f576:	e7fb      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_BUSY;
 800f578:	2502      	movs	r5, #2
 800f57a:	e7f9      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_ERROR;
 800f57c:	2501      	movs	r5, #1
 800f57e:	e7f7      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
        return HAL_ERROR;
 800f580:	2501      	movs	r5, #1
 800f582:	e7f5      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_BUSY;
 800f584:	2502      	movs	r5, #2
 800f586:	e7f3      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
 800f588:	2502      	movs	r5, #2
 800f58a:	e7f1      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
      return HAL_ERROR;
 800f58c:	2501      	movs	r5, #1
 800f58e:	e7ef      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
 800f590:	2501      	movs	r5, #1
 800f592:	e7ed      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
        return HAL_ERROR;
 800f594:	2501      	movs	r5, #1
 800f596:	e7eb      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
 800f598:	2501      	movs	r5, #1
 800f59a:	e7e9      	b.n	800f570 <HAL_TIM_Encoder_Start_DMA+0x212>
 800f59c:	0800c21f 	.word	0x0800c21f
 800f5a0:	0800c2a1 	.word	0x0800c2a1
 800f5a4:	0800c551 	.word	0x0800c551

0800f5a8 <HAL_TIM_Encoder_Stop_DMA>:
{
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800f5ac:	460d      	mov	r5, r1
 800f5ae:	2900      	cmp	r1, #0
 800f5b0:	d038      	beq.n	800f624 <HAL_TIM_Encoder_Stop_DMA+0x7c>
  else if (Channel == TIM_CHANNEL_2)
 800f5b2:	2904      	cmp	r1, #4
 800f5b4:	d044      	beq.n	800f640 <HAL_TIM_Encoder_Stop_DMA+0x98>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	6800      	ldr	r0, [r0, #0]
 800f5bc:	f7fd fe90 	bl	800d2e0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2104      	movs	r1, #4
 800f5c4:	6820      	ldr	r0, [r4, #0]
 800f5c6:	f7fd fe8b 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f5ca:	6822      	ldr	r2, [r4, #0]
 800f5cc:	68d3      	ldr	r3, [r2, #12]
 800f5ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5d2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f5d4:	6822      	ldr	r2, [r4, #0]
 800f5d6:	68d3      	ldr	r3, [r2, #12]
 800f5d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5dc:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f5de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5e0:	f7f6 ff5c 	bl	800649c <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f5e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f5e6:	f7f6 ff59 	bl	800649c <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	6a19      	ldr	r1, [r3, #32]
 800f5ee:	f241 1211 	movw	r2, #4369	; 0x1111
 800f5f2:	4211      	tst	r1, r2
 800f5f4:	d108      	bne.n	800f608 <HAL_TIM_Encoder_Stop_DMA+0x60>
 800f5f6:	6a19      	ldr	r1, [r3, #32]
 800f5f8:	f240 4244 	movw	r2, #1092	; 0x444
 800f5fc:	4211      	tst	r1, r2
 800f5fe:	d103      	bne.n	800f608 <HAL_TIM_Encoder_Stop_DMA+0x60>
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	f022 0201 	bic.w	r2, r2, #1
 800f606:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800f608:	2d04      	cmp	r5, #4
 800f60a:	bf18      	it	ne
 800f60c:	2d00      	cmpne	r5, #0
 800f60e:	d151      	bne.n	800f6b4 <HAL_TIM_Encoder_Stop_DMA+0x10c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f610:	bb25      	cbnz	r5, 800f65c <HAL_TIM_Encoder_Stop_DMA+0xb4>
 800f612:	2301      	movs	r3, #1
 800f614:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f618:	2d00      	cmp	r5, #0
 800f61a:	d13b      	bne.n	800f694 <HAL_TIM_Encoder_Stop_DMA+0xec>
 800f61c:	2301      	movs	r3, #1
 800f61e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f622:	e050      	b.n	800f6c6 <HAL_TIM_Encoder_Stop_DMA+0x11e>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f624:	2200      	movs	r2, #0
 800f626:	4611      	mov	r1, r2
 800f628:	6800      	ldr	r0, [r0, #0]
 800f62a:	f7fd fe59 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f62e:	6822      	ldr	r2, [r4, #0]
 800f630:	68d3      	ldr	r3, [r2, #12]
 800f632:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f636:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f638:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f63a:	f7f6 ff2f 	bl	800649c <HAL_DMA_Abort_IT>
 800f63e:	e7d4      	b.n	800f5ea <HAL_TIM_Encoder_Stop_DMA+0x42>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800f640:	2200      	movs	r2, #0
 800f642:	2104      	movs	r1, #4
 800f644:	6800      	ldr	r0, [r0, #0]
 800f646:	f7fd fe4b 	bl	800d2e0 <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f64a:	6822      	ldr	r2, [r4, #0]
 800f64c:	68d3      	ldr	r3, [r2, #12]
 800f64e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f652:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f656:	f7f6 ff21 	bl	800649c <HAL_DMA_Abort_IT>
 800f65a:	e7c6      	b.n	800f5ea <HAL_TIM_Encoder_Stop_DMA+0x42>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f65c:	2d04      	cmp	r5, #4
 800f65e:	d009      	beq.n	800f674 <HAL_TIM_Encoder_Stop_DMA+0xcc>
 800f660:	2d08      	cmp	r5, #8
 800f662:	d00b      	beq.n	800f67c <HAL_TIM_Encoder_Stop_DMA+0xd4>
 800f664:	2d0c      	cmp	r5, #12
 800f666:	d00d      	beq.n	800f684 <HAL_TIM_Encoder_Stop_DMA+0xdc>
 800f668:	2d10      	cmp	r5, #16
 800f66a:	d00f      	beq.n	800f68c <HAL_TIM_Encoder_Stop_DMA+0xe4>
 800f66c:	2301      	movs	r3, #1
 800f66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f672:	e7d1      	b.n	800f618 <HAL_TIM_Encoder_Stop_DMA+0x70>
 800f674:	2301      	movs	r3, #1
 800f676:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f67a:	e7cd      	b.n	800f618 <HAL_TIM_Encoder_Stop_DMA+0x70>
 800f67c:	2301      	movs	r3, #1
 800f67e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f682:	e7c9      	b.n	800f618 <HAL_TIM_Encoder_Stop_DMA+0x70>
 800f684:	2301      	movs	r3, #1
 800f686:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f68a:	e7c5      	b.n	800f618 <HAL_TIM_Encoder_Stop_DMA+0x70>
 800f68c:	2301      	movs	r3, #1
 800f68e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f692:	e7c1      	b.n	800f618 <HAL_TIM_Encoder_Stop_DMA+0x70>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f694:	2d04      	cmp	r5, #4
 800f696:	d005      	beq.n	800f6a4 <HAL_TIM_Encoder_Stop_DMA+0xfc>
 800f698:	2d08      	cmp	r5, #8
 800f69a:	d007      	beq.n	800f6ac <HAL_TIM_Encoder_Stop_DMA+0x104>
 800f69c:	2301      	movs	r3, #1
 800f69e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800f6a2:	e010      	b.n	800f6c6 <HAL_TIM_Encoder_Stop_DMA+0x11e>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6aa:	e00c      	b.n	800f6c6 <HAL_TIM_Encoder_Stop_DMA+0x11e>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f6b2:	e008      	b.n	800f6c6 <HAL_TIM_Encoder_Stop_DMA+0x11e>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f6ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f6be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	bf00      	nop

0800f6cc <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f6cc:	f001 011f 	and.w	r1, r1, #31
 800f6d0:	2304      	movs	r3, #4
 800f6d2:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f6d6:	6a03      	ldr	r3, [r0, #32]
 800f6d8:	ea23 030c 	bic.w	r3, r3, ip
 800f6dc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f6de:	6a03      	ldr	r3, [r0, #32]
 800f6e0:	fa02 f101 	lsl.w	r1, r2, r1
 800f6e4:	430b      	orrs	r3, r1
 800f6e6:	6203      	str	r3, [r0, #32]
}
 800f6e8:	4770      	bx	lr

0800f6ea <TIM_DMAErrorCCxN>:
{
 800f6ea:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6f0:	4283      	cmp	r3, r0
 800f6f2:	d00b      	beq.n	800f70c <TIM_DMAErrorCCxN+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f6f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6f6:	4283      	cmp	r3, r0
 800f6f8:	d00d      	beq.n	800f716 <TIM_DMAErrorCCxN+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f6fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6fc:	4283      	cmp	r3, r0
 800f6fe:	d010      	beq.n	800f722 <TIM_DMAErrorCCxN+0x38>
  HAL_TIM_ErrorCallback(htim);
 800f700:	4620      	mov	r0, r4
 800f702:	f7fc ff24 	bl	800c54e <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f706:	2300      	movs	r3, #0
 800f708:	7723      	strb	r3, [r4, #28]
}
 800f70a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f70c:	2301      	movs	r3, #1
 800f70e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f710:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f714:	e7f4      	b.n	800f700 <TIM_DMAErrorCCxN+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f716:	2302      	movs	r3, #2
 800f718:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f71a:	2301      	movs	r3, #1
 800f71c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f720:	e7ee      	b.n	800f700 <TIM_DMAErrorCCxN+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f722:	2304      	movs	r3, #4
 800f724:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f726:	2301      	movs	r3, #1
 800f728:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f72c:	e7e8      	b.n	800f700 <TIM_DMAErrorCCxN+0x16>

0800f72e <TIM_DMADelayPulseNCplt>:
{
 800f72e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f730:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f734:	4283      	cmp	r3, r0
 800f736:	d00e      	beq.n	800f756 <TIM_DMADelayPulseNCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f73a:	4283      	cmp	r3, r0
 800f73c:	d014      	beq.n	800f768 <TIM_DMADelayPulseNCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f73e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f740:	4283      	cmp	r3, r0
 800f742:	d01a      	beq.n	800f77a <TIM_DMADelayPulseNCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f746:	4283      	cmp	r3, r0
 800f748:	d020      	beq.n	800f78c <TIM_DMADelayPulseNCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f74a:	4620      	mov	r0, r4
 800f74c:	f7fc fdc7 	bl	800c2de <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f750:	2300      	movs	r3, #0
 800f752:	7723      	strb	r3, [r4, #28]
}
 800f754:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f756:	2301      	movs	r3, #1
 800f758:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f75a:	69c3      	ldr	r3, [r0, #28]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1f4      	bne.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f760:	2301      	movs	r3, #1
 800f762:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f766:	e7f0      	b.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f768:	2302      	movs	r3, #2
 800f76a:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f76c:	69c3      	ldr	r3, [r0, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1eb      	bne.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f772:	2301      	movs	r3, #1
 800f774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f778:	e7e7      	b.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f77a:	2304      	movs	r3, #4
 800f77c:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f77e:	69c3      	ldr	r3, [r0, #28]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1e2      	bne.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f784:	2301      	movs	r3, #1
 800f786:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f78a:	e7de      	b.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f78c:	2308      	movs	r3, #8
 800f78e:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800f790:	69c3      	ldr	r3, [r0, #28]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1d9      	bne.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f796:	2301      	movs	r3, #1
 800f798:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800f79c:	e7d5      	b.n	800f74a <TIM_DMADelayPulseNCplt+0x1c>

0800f79e <HAL_TIMEx_HallSensor_MspInit>:
}
 800f79e:	4770      	bx	lr

0800f7a0 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	d065      	beq.n	800f870 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	460e      	mov	r6, r1
 800f7aa:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f7ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d058      	beq.n	800f866 <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	f851 0b04 	ldr.w	r0, [r1], #4
 800f7c0:	f7fc ff2c 	bl	800c61c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800f7c4:	68b3      	ldr	r3, [r6, #8]
 800f7c6:	2203      	movs	r2, #3
 800f7c8:	6831      	ldr	r1, [r6, #0]
 800f7ca:	6820      	ldr	r0, [r4, #0]
 800f7cc:	f7fd fa14 	bl	800cbf8 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f7d0:	6822      	ldr	r2, [r4, #0]
 800f7d2:	6993      	ldr	r3, [r2, #24]
 800f7d4:	f023 030c 	bic.w	r3, r3, #12
 800f7d8:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800f7da:	6822      	ldr	r2, [r4, #0]
 800f7dc:	6993      	ldr	r3, [r2, #24]
 800f7de:	6871      	ldr	r1, [r6, #4]
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800f7e4:	6822      	ldr	r2, [r4, #0]
 800f7e6:	6853      	ldr	r3, [r2, #4]
 800f7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7ec:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800f7ee:	6822      	ldr	r2, [r4, #0]
 800f7f0:	6891      	ldr	r1, [r2, #8]
 800f7f2:	4b20      	ldr	r3, [pc, #128]	; (800f874 <HAL_TIMEx_HallSensor_Init+0xd4>)
 800f7f4:	400b      	ands	r3, r1
 800f7f6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800f7f8:	6822      	ldr	r2, [r4, #0]
 800f7fa:	6893      	ldr	r3, [r2, #8]
 800f7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f800:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800f802:	6822      	ldr	r2, [r4, #0]
 800f804:	6891      	ldr	r1, [r2, #8]
 800f806:	4b1c      	ldr	r3, [pc, #112]	; (800f878 <HAL_TIMEx_HallSensor_Init+0xd8>)
 800f808:	400b      	ands	r3, r1
 800f80a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800f80c:	6822      	ldr	r2, [r4, #0]
 800f80e:	6893      	ldr	r3, [r2, #8]
 800f810:	f043 0304 	orr.w	r3, r3, #4
 800f814:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800f816:	2500      	movs	r5, #0
 800f818:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f81a:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800f81c:	2370      	movs	r3, #112	; 0x70
 800f81e:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f820:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f822:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f824:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800f826:	68f3      	ldr	r3, [r6, #12]
 800f828:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800f82a:	a901      	add	r1, sp, #4
 800f82c:	6820      	ldr	r0, [r4, #0]
 800f82e:	f7fd f8bf 	bl	800c9b0 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800f832:	6822      	ldr	r2, [r4, #0]
 800f834:	6853      	ldr	r3, [r2, #4]
 800f836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f83a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800f83c:	6822      	ldr	r2, [r4, #0]
 800f83e:	6853      	ldr	r3, [r2, #4]
 800f840:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800f844:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f846:	2301      	movs	r3, #1
 800f848:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f84c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f850:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f854:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800f85c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f860:	4628      	mov	r0, r5
}
 800f862:	b008      	add	sp, #32
 800f864:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800f866:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800f86a:	f7ff ff98 	bl	800f79e <HAL_TIMEx_HallSensor_MspInit>
 800f86e:	e7a1      	b.n	800f7b4 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 800f870:	2001      	movs	r0, #1
}
 800f872:	4770      	bx	lr
 800f874:	ffcfff8f 	.word	0xffcfff8f
 800f878:	fffefff8 	.word	0xfffefff8

0800f87c <HAL_TIMEx_HallSensor_MspDeInit>:
}
 800f87c:	4770      	bx	lr

0800f87e <HAL_TIMEx_HallSensor_DeInit>:
{
 800f87e:	b510      	push	{r4, lr}
 800f880:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800f882:	2302      	movs	r3, #2
 800f884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800f888:	6803      	ldr	r3, [r0, #0]
 800f88a:	6a19      	ldr	r1, [r3, #32]
 800f88c:	f241 1211 	movw	r2, #4369	; 0x1111
 800f890:	4211      	tst	r1, r2
 800f892:	d108      	bne.n	800f8a6 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800f894:	6a19      	ldr	r1, [r3, #32]
 800f896:	f240 4244 	movw	r2, #1092	; 0x444
 800f89a:	4211      	tst	r1, r2
 800f89c:	d103      	bne.n	800f8a6 <HAL_TIMEx_HallSensor_DeInit+0x28>
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	f022 0201 	bic.w	r2, r2, #1
 800f8a4:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f7ff ffe8 	bl	800f87c <HAL_TIMEx_HallSensor_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800f8b2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800f8b6:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800f8ba:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800f8be:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_RESET;
 800f8c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f8c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f8ca:	bd10      	pop	{r4, pc}

0800f8cc <HAL_TIMEx_HallSensor_Start>:
{
 800f8cc:	b510      	push	{r4, lr}
 800f8ce:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f8d0:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800f8d4:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f8d6:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800f8da:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f8dc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800f8e0:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f8e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f8e6:	2a01      	cmp	r2, #1
 800f8e8:	bf08      	it	eq
 800f8ea:	2901      	cmpeq	r1, #1
 800f8ec:	d148      	bne.n	800f980 <HAL_TIMEx_HallSensor_Start+0xb4>
 800f8ee:	b2db      	uxtb	r3, r3
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	bf18      	it	ne
 800f8f4:	2301      	movne	r3, #1
 800f8f6:	2801      	cmp	r0, #1
 800f8f8:	d144      	bne.n	800f984 <HAL_TIMEx_HallSensor_Start+0xb8>
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d142      	bne.n	800f984 <HAL_TIMEx_HallSensor_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8fe:	2302      	movs	r3, #2
 800f900:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f904:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f908:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f90c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f910:	2201      	movs	r2, #1
 800f912:	2100      	movs	r1, #0
 800f914:	6820      	ldr	r0, [r4, #0]
 800f916:	f7fd fce3 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	4a1b      	ldr	r2, [pc, #108]	; (800f98c <HAL_TIMEx_HallSensor_Start+0xc0>)
 800f91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f922:	bf18      	it	ne
 800f924:	4293      	cmpne	r3, r2
 800f926:	d01d      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f928:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d019      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f934:	4293      	cmp	r3, r2
 800f936:	d015      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d011      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f940:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800f944:	4293      	cmp	r3, r2
 800f946:	d00d      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f948:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d009      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
 800f950:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800f954:	4293      	cmp	r3, r2
 800f956:	d005      	beq.n	800f964 <HAL_TIMEx_HallSensor_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	f042 0201 	orr.w	r2, r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f960:	2000      	movs	r0, #0
 800f962:	e00e      	b.n	800f982 <HAL_TIMEx_HallSensor_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f964:	6899      	ldr	r1, [r3, #8]
 800f966:	4a0a      	ldr	r2, [pc, #40]	; (800f990 <HAL_TIMEx_HallSensor_Start+0xc4>)
 800f968:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f96a:	2a06      	cmp	r2, #6
 800f96c:	bf18      	it	ne
 800f96e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800f972:	d009      	beq.n	800f988 <HAL_TIMEx_HallSensor_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	f042 0201 	orr.w	r2, r2, #1
 800f97a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f97c:	2000      	movs	r0, #0
 800f97e:	e000      	b.n	800f982 <HAL_TIMEx_HallSensor_Start+0xb6>
    return HAL_ERROR;
 800f980:	2001      	movs	r0, #1
}
 800f982:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f984:	2001      	movs	r0, #1
 800f986:	e7fc      	b.n	800f982 <HAL_TIMEx_HallSensor_Start+0xb6>
  return HAL_OK;
 800f988:	2000      	movs	r0, #0
 800f98a:	e7fa      	b.n	800f982 <HAL_TIMEx_HallSensor_Start+0xb6>
 800f98c:	40010000 	.word	0x40010000
 800f990:	00010007 	.word	0x00010007

0800f994 <HAL_TIMEx_HallSensor_Stop>:
{
 800f994:	b510      	push	{r4, lr}
 800f996:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800f998:	2200      	movs	r2, #0
 800f99a:	4611      	mov	r1, r2
 800f99c:	6800      	ldr	r0, [r0, #0]
 800f99e:	f7fd fc9f 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	6a19      	ldr	r1, [r3, #32]
 800f9a6:	f241 1211 	movw	r2, #4369	; 0x1111
 800f9aa:	4211      	tst	r1, r2
 800f9ac:	d108      	bne.n	800f9c0 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800f9ae:	6a19      	ldr	r1, [r3, #32]
 800f9b0:	f240 4244 	movw	r2, #1092	; 0x444
 800f9b4:	4211      	tst	r1, r2
 800f9b6:	d103      	bne.n	800f9c0 <HAL_TIMEx_HallSensor_Stop+0x2c>
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	f022 0201 	bic.w	r2, r2, #1
 800f9be:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f9c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f9ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <HAL_TIMEx_HallSensor_Start_IT>:
{
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f9da:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800f9de:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f9e0:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800f9e4:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f9e6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800f9ea:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f9ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f9f0:	2a01      	cmp	r2, #1
 800f9f2:	bf08      	it	eq
 800f9f4:	2901      	cmpeq	r1, #1
 800f9f6:	d14d      	bne.n	800fa94 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
 800f9f8:	b2db      	uxtb	r3, r3
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	bf18      	it	ne
 800f9fe:	2301      	movne	r3, #1
 800fa00:	2801      	cmp	r0, #1
 800fa02:	d149      	bne.n	800fa98 <HAL_TIMEx_HallSensor_Start_IT+0xc2>
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d147      	bne.n	800fa98 <HAL_TIMEx_HallSensor_Start_IT+0xc2>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa08:	2302      	movs	r3, #2
 800fa0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fa1a:	6822      	ldr	r2, [r4, #0]
 800fa1c:	68d3      	ldr	r3, [r2, #12]
 800fa1e:	f043 0302 	orr.w	r3, r3, #2
 800fa22:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fa24:	2201      	movs	r2, #1
 800fa26:	2100      	movs	r1, #0
 800fa28:	6820      	ldr	r0, [r4, #0]
 800fa2a:	f7fd fc59 	bl	800d2e0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	4a1b      	ldr	r2, [pc, #108]	; (800faa0 <HAL_TIMEx_HallSensor_Start_IT+0xca>)
 800fa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa36:	bf18      	it	ne
 800fa38:	4293      	cmpne	r3, r2
 800fa3a:	d01d      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa3c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d019      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d015      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d011      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa54:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d00d      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa5c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d009      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
 800fa64:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d005      	beq.n	800fa78 <HAL_TIMEx_HallSensor_Start_IT+0xa2>
    __HAL_TIM_ENABLE(htim);
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	f042 0201 	orr.w	r2, r2, #1
 800fa72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800fa74:	2000      	movs	r0, #0
 800fa76:	e00e      	b.n	800fa96 <HAL_TIMEx_HallSensor_Start_IT+0xc0>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa78:	6899      	ldr	r1, [r3, #8]
 800fa7a:	4a0a      	ldr	r2, [pc, #40]	; (800faa4 <HAL_TIMEx_HallSensor_Start_IT+0xce>)
 800fa7c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa7e:	2a06      	cmp	r2, #6
 800fa80:	bf18      	it	ne
 800fa82:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800fa86:	d009      	beq.n	800fa9c <HAL_TIMEx_HallSensor_Start_IT+0xc6>
      __HAL_TIM_ENABLE(htim);
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	f042 0201 	orr.w	r2, r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800fa90:	2000      	movs	r0, #0
 800fa92:	e000      	b.n	800fa96 <HAL_TIMEx_HallSensor_Start_IT+0xc0>
    return HAL_ERROR;
 800fa94:	2001      	movs	r0, #1
}
 800fa96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800fa98:	2001      	movs	r0, #1
 800fa9a:	e7fc      	b.n	800fa96 <HAL_TIMEx_HallSensor_Start_IT+0xc0>
  return HAL_OK;
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	e7fa      	b.n	800fa96 <HAL_TIMEx_HallSensor_Start_IT+0xc0>
 800faa0:	40010000 	.word	0x40010000
 800faa4:	00010007 	.word	0x00010007

0800faa8 <HAL_TIMEx_HallSensor_Stop_IT>:
{
 800faa8:	b510      	push	{r4, lr}
 800faaa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800faac:	2200      	movs	r2, #0
 800faae:	4611      	mov	r1, r2
 800fab0:	6800      	ldr	r0, [r0, #0]
 800fab2:	f7fd fc15 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fab6:	6822      	ldr	r2, [r4, #0]
 800fab8:	68d3      	ldr	r3, [r2, #12]
 800faba:	f023 0302 	bic.w	r3, r3, #2
 800fabe:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	6a19      	ldr	r1, [r3, #32]
 800fac4:	f241 1211 	movw	r2, #4369	; 0x1111
 800fac8:	4211      	tst	r1, r2
 800faca:	d108      	bne.n	800fade <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800facc:	6a19      	ldr	r1, [r3, #32]
 800face:	f240 4244 	movw	r2, #1092	; 0x444
 800fad2:	4211      	tst	r1, r2
 800fad4:	d103      	bne.n	800fade <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	f022 0201 	bic.w	r2, r2, #1
 800fadc:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fade:	2301      	movs	r3, #1
 800fae0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fae4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fae8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800faec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800faf0:	2000      	movs	r0, #0
 800faf2:	bd10      	pop	{r4, pc}

0800faf4 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800faf8:	f890 c03e 	ldrb.w	ip, [r0, #62]	; 0x3e
 800fafc:	fa5f fc8c 	uxtb.w	ip, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800fb00:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800fb04:	b2c0      	uxtb	r0, r0
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800fb06:	2802      	cmp	r0, #2
 800fb08:	bf18      	it	ne
 800fb0a:	f1bc 0f02 	cmpne.w	ip, #2
 800fb0e:	d05e      	beq.n	800fbce <HAL_TIMEx_HallSensor_Start_DMA+0xda>
 800fb10:	460e      	mov	r6, r1
 800fb12:	4615      	mov	r5, r2
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 800fb14:	f1bc 0f01 	cmp.w	ip, #1
 800fb18:	bf08      	it	eq
 800fb1a:	2801      	cmpeq	r0, #1
 800fb1c:	d159      	bne.n	800fbd2 <HAL_TIMEx_HallSensor_Start_DMA+0xde>
    if ((pData == NULL) || (Length == 0U))
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	bf18      	it	ne
 800fb22:	2900      	cmpne	r1, #0
 800fb24:	d101      	bne.n	800fb2a <HAL_TIMEx_HallSensor_Start_DMA+0x36>
      return HAL_ERROR;
 800fb26:	2001      	movs	r0, #1
 800fb28:	e054      	b.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fb34:	2201      	movs	r2, #1
 800fb36:	2100      	movs	r1, #0
 800fb38:	6820      	ldr	r0, [r4, #0]
 800fb3a:	f7fd fbd1 	bl	800d2e0 <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800fb3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb40:	4a26      	ldr	r2, [pc, #152]	; (800fbdc <HAL_TIMEx_HallSensor_Start_DMA+0xe8>)
 800fb42:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800fb44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb46:	4a26      	ldr	r2, [pc, #152]	; (800fbe0 <HAL_TIMEx_HallSensor_Start_DMA+0xec>)
 800fb48:	641a      	str	r2, [r3, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fb4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb4c:	4a25      	ldr	r2, [pc, #148]	; (800fbe4 <HAL_TIMEx_HallSensor_Start_DMA+0xf0>)
 800fb4e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800fb50:	6821      	ldr	r1, [r4, #0]
 800fb52:	462b      	mov	r3, r5
 800fb54:	4632      	mov	r2, r6
 800fb56:	3134      	adds	r1, #52	; 0x34
 800fb58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fb5a:	f7f6 f9b3 	bl	8005ec4 <HAL_DMA_Start_IT>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d139      	bne.n	800fbd6 <HAL_TIMEx_HallSensor_Start_DMA+0xe2>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fb62:	6822      	ldr	r2, [r4, #0]
 800fb64:	68d3      	ldr	r3, [r2, #12]
 800fb66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb6a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb6c:	6823      	ldr	r3, [r4, #0]
 800fb6e:	4a1e      	ldr	r2, [pc, #120]	; (800fbe8 <HAL_TIMEx_HallSensor_Start_DMA+0xf4>)
 800fb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb74:	bf18      	it	ne
 800fb76:	4293      	cmpne	r3, r2
 800fb78:	d01c      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fb7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d018      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fb82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d014      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fb8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d010      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fb92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d00c      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fb9a:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d008      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
 800fba2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d004      	beq.n	800fbb4 <HAL_TIMEx_HallSensor_Start_DMA+0xc0>
    __HAL_TIM_ENABLE(htim);
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	f042 0201 	orr.w	r2, r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	e00f      	b.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbb4:	6899      	ldr	r1, [r3, #8]
 800fbb6:	4a0d      	ldr	r2, [pc, #52]	; (800fbec <HAL_TIMEx_HallSensor_Start_DMA+0xf8>)
 800fbb8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbba:	2a06      	cmp	r2, #6
 800fbbc:	bf18      	it	ne
 800fbbe:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800fbc2:	d007      	beq.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
      __HAL_TIM_ENABLE(htim);
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	f042 0201 	orr.w	r2, r2, #1
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	e002      	b.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
    return HAL_BUSY;
 800fbce:	2002      	movs	r0, #2
 800fbd0:	e000      	b.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
    return HAL_ERROR;
 800fbd2:	2001      	movs	r0, #1
}
 800fbd4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800fbd6:	2001      	movs	r0, #1
 800fbd8:	e7fc      	b.n	800fbd4 <HAL_TIMEx_HallSensor_Start_DMA+0xe0>
 800fbda:	bf00      	nop
 800fbdc:	0800c21f 	.word	0x0800c21f
 800fbe0:	0800c2a1 	.word	0x0800c2a1
 800fbe4:	0800c551 	.word	0x0800c551
 800fbe8:	40010000 	.word	0x40010000
 800fbec:	00010007 	.word	0x00010007

0800fbf0 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	6800      	ldr	r0, [r0, #0]
 800fbfa:	f7fd fb71 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800fbfe:	6822      	ldr	r2, [r4, #0]
 800fc00:	68d3      	ldr	r3, [r2, #12]
 800fc02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc06:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800fc08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc0a:	f7f6 fc47 	bl	800649c <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6a19      	ldr	r1, [r3, #32]
 800fc12:	f241 1211 	movw	r2, #4369	; 0x1111
 800fc16:	4211      	tst	r1, r2
 800fc18:	d108      	bne.n	800fc2c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800fc1a:	6a19      	ldr	r1, [r3, #32]
 800fc1c:	f240 4244 	movw	r2, #1092	; 0x444
 800fc20:	4211      	tst	r1, r2
 800fc22:	d103      	bne.n	800fc2c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	f022 0201 	bic.w	r2, r2, #1
 800fc2a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800fc36:	2000      	movs	r0, #0
 800fc38:	bd10      	pop	{r4, pc}

0800fc3a <HAL_TIMEx_OCN_Start>:
{
 800fc3a:	b510      	push	{r4, lr}
 800fc3c:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc3e:	4608      	mov	r0, r1
 800fc40:	2900      	cmp	r1, #0
 800fc42:	d13b      	bne.n	800fcbc <HAL_TIMEx_OCN_Start+0x82>
 800fc44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	bf18      	it	ne
 800fc4e:	2301      	movne	r3, #1
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d16a      	bne.n	800fd2a <HAL_TIMEx_OCN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d14a      	bne.n	800fcee <HAL_TIMEx_OCN_Start+0xb4>
 800fc58:	2302      	movs	r3, #2
 800fc5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fc5e:	2204      	movs	r2, #4
 800fc60:	4601      	mov	r1, r0
 800fc62:	6820      	ldr	r0, [r4, #0]
 800fc64:	f7ff fd32 	bl	800f6cc <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800fc68:	6822      	ldr	r2, [r4, #0]
 800fc6a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fc6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc70:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	4a2f      	ldr	r2, [pc, #188]	; (800fd34 <HAL_TIMEx_OCN_Start+0xfa>)
 800fc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc7a:	bf18      	it	ne
 800fc7c:	4293      	cmpne	r3, r2
 800fc7e:	d046      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fc80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d042      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fc88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d03e      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fc90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d03a      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fc98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d036      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fca0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d032      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
 800fca8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d02e      	beq.n	800fd0e <HAL_TIMEx_OCN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	f042 0201 	orr.w	r2, r2, #1
 800fcb6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800fcb8:	2000      	movs	r0, #0
 800fcba:	e037      	b.n	800fd2c <HAL_TIMEx_OCN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fcbc:	2904      	cmp	r1, #4
 800fcbe:	d008      	beq.n	800fcd2 <HAL_TIMEx_OCN_Start+0x98>
 800fcc0:	2908      	cmp	r1, #8
 800fcc2:	d00d      	beq.n	800fce0 <HAL_TIMEx_OCN_Start+0xa6>
 800fcc4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	3b01      	subs	r3, #1
 800fccc:	bf18      	it	ne
 800fcce:	2301      	movne	r3, #1
 800fcd0:	e7be      	b.n	800fc50 <HAL_TIMEx_OCN_Start+0x16>
 800fcd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	bf18      	it	ne
 800fcdc:	2301      	movne	r3, #1
 800fcde:	e7b7      	b.n	800fc50 <HAL_TIMEx_OCN_Start+0x16>
 800fce0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	3b01      	subs	r3, #1
 800fce8:	bf18      	it	ne
 800fcea:	2301      	movne	r3, #1
 800fcec:	e7b0      	b.n	800fc50 <HAL_TIMEx_OCN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcee:	2804      	cmp	r0, #4
 800fcf0:	d005      	beq.n	800fcfe <HAL_TIMEx_OCN_Start+0xc4>
 800fcf2:	2808      	cmp	r0, #8
 800fcf4:	d007      	beq.n	800fd06 <HAL_TIMEx_OCN_Start+0xcc>
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fcfc:	e7af      	b.n	800fc5e <HAL_TIMEx_OCN_Start+0x24>
 800fcfe:	2302      	movs	r3, #2
 800fd00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd04:	e7ab      	b.n	800fc5e <HAL_TIMEx_OCN_Start+0x24>
 800fd06:	2302      	movs	r3, #2
 800fd08:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fd0c:	e7a7      	b.n	800fc5e <HAL_TIMEx_OCN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd0e:	6899      	ldr	r1, [r3, #8]
 800fd10:	4a09      	ldr	r2, [pc, #36]	; (800fd38 <HAL_TIMEx_OCN_Start+0xfe>)
 800fd12:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd14:	2a06      	cmp	r2, #6
 800fd16:	bf18      	it	ne
 800fd18:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800fd1c:	d007      	beq.n	800fd2e <HAL_TIMEx_OCN_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	f042 0201 	orr.w	r2, r2, #1
 800fd24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800fd26:	2000      	movs	r0, #0
 800fd28:	e000      	b.n	800fd2c <HAL_TIMEx_OCN_Start+0xf2>
    return HAL_ERROR;
 800fd2a:	2001      	movs	r0, #1
}
 800fd2c:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800fd2e:	2000      	movs	r0, #0
 800fd30:	e7fc      	b.n	800fd2c <HAL_TIMEx_OCN_Start+0xf2>
 800fd32:	bf00      	nop
 800fd34:	40010000 	.word	0x40010000
 800fd38:	00010007 	.word	0x00010007

0800fd3c <HAL_TIMEx_OCN_Stop>:
{
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4604      	mov	r4, r0
 800fd40:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800fd42:	2200      	movs	r2, #0
 800fd44:	6800      	ldr	r0, [r0, #0]
 800fd46:	f7ff fcc1 	bl	800f6cc <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	6a19      	ldr	r1, [r3, #32]
 800fd4e:	f241 1211 	movw	r2, #4369	; 0x1111
 800fd52:	4211      	tst	r1, r2
 800fd54:	d108      	bne.n	800fd68 <HAL_TIMEx_OCN_Stop+0x2c>
 800fd56:	6a19      	ldr	r1, [r3, #32]
 800fd58:	f240 4244 	movw	r2, #1092	; 0x444
 800fd5c:	4211      	tst	r1, r2
 800fd5e:	d103      	bne.n	800fd68 <HAL_TIMEx_OCN_Stop+0x2c>
 800fd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fd66:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	6a19      	ldr	r1, [r3, #32]
 800fd6c:	f241 1211 	movw	r2, #4369	; 0x1111
 800fd70:	4211      	tst	r1, r2
 800fd72:	d108      	bne.n	800fd86 <HAL_TIMEx_OCN_Stop+0x4a>
 800fd74:	6a19      	ldr	r1, [r3, #32]
 800fd76:	f240 4244 	movw	r2, #1092	; 0x444
 800fd7a:	4211      	tst	r1, r2
 800fd7c:	d103      	bne.n	800fd86 <HAL_TIMEx_OCN_Stop+0x4a>
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	f022 0201 	bic.w	r2, r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fd86:	b925      	cbnz	r5, 800fd92 <HAL_TIMEx_OCN_Stop+0x56>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800fd8e:	2000      	movs	r0, #0
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fd92:	2d04      	cmp	r5, #4
 800fd94:	d005      	beq.n	800fda2 <HAL_TIMEx_OCN_Stop+0x66>
 800fd96:	2d08      	cmp	r5, #8
 800fd98:	d007      	beq.n	800fdaa <HAL_TIMEx_OCN_Stop+0x6e>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fda0:	e7f5      	b.n	800fd8e <HAL_TIMEx_OCN_Stop+0x52>
 800fda2:	2301      	movs	r3, #1
 800fda4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fda8:	e7f1      	b.n	800fd8e <HAL_TIMEx_OCN_Stop+0x52>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fdb0:	e7ed      	b.n	800fd8e <HAL_TIMEx_OCN_Stop+0x52>

0800fdb2 <HAL_TIMEx_OCN_Start_IT>:
{
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fdb6:	4608      	mov	r0, r1
 800fdb8:	b999      	cbnz	r1, 800fde2 <HAL_TIMEx_OCN_Start_IT+0x30>
 800fdba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	bf18      	it	ne
 800fdc4:	2301      	movne	r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f040 8087 	bne.w	800feda <HAL_TIMEx_OCN_Start_IT+0x128>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fdcc:	bb10      	cbnz	r0, 800fe14 <HAL_TIMEx_OCN_Start_IT+0x62>
 800fdce:	2302      	movs	r3, #2
 800fdd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 800fdd4:	2804      	cmp	r0, #4
 800fdd6:	d066      	beq.n	800fea6 <HAL_TIMEx_OCN_Start_IT+0xf4>
 800fdd8:	2808      	cmp	r0, #8
 800fdda:	d06a      	beq.n	800feb2 <HAL_TIMEx_OCN_Start_IT+0x100>
 800fddc:	b350      	cbz	r0, 800fe34 <HAL_TIMEx_OCN_Start_IT+0x82>
 800fdde:	2001      	movs	r0, #1
}
 800fde0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fde2:	2904      	cmp	r1, #4
 800fde4:	d008      	beq.n	800fdf8 <HAL_TIMEx_OCN_Start_IT+0x46>
 800fde6:	2908      	cmp	r1, #8
 800fde8:	d00d      	beq.n	800fe06 <HAL_TIMEx_OCN_Start_IT+0x54>
 800fdea:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	bf18      	it	ne
 800fdf4:	2301      	movne	r3, #1
 800fdf6:	e7e6      	b.n	800fdc6 <HAL_TIMEx_OCN_Start_IT+0x14>
 800fdf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	bf18      	it	ne
 800fe02:	2301      	movne	r3, #1
 800fe04:	e7df      	b.n	800fdc6 <HAL_TIMEx_OCN_Start_IT+0x14>
 800fe06:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	bf18      	it	ne
 800fe10:	2301      	movne	r3, #1
 800fe12:	e7d8      	b.n	800fdc6 <HAL_TIMEx_OCN_Start_IT+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fe14:	2804      	cmp	r0, #4
 800fe16:	d005      	beq.n	800fe24 <HAL_TIMEx_OCN_Start_IT+0x72>
 800fe18:	2808      	cmp	r0, #8
 800fe1a:	d007      	beq.n	800fe2c <HAL_TIMEx_OCN_Start_IT+0x7a>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fe22:	e7d7      	b.n	800fdd4 <HAL_TIMEx_OCN_Start_IT+0x22>
 800fe24:	2302      	movs	r3, #2
 800fe26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe2a:	e7d3      	b.n	800fdd4 <HAL_TIMEx_OCN_Start_IT+0x22>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fe32:	e7cf      	b.n	800fdd4 <HAL_TIMEx_OCN_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fe34:	6822      	ldr	r2, [r4, #0]
 800fe36:	68d3      	ldr	r3, [r2, #12]
 800fe38:	f043 0302 	orr.w	r3, r3, #2
 800fe3c:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800fe3e:	6822      	ldr	r2, [r4, #0]
 800fe40:	68d3      	ldr	r3, [r2, #12]
 800fe42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe46:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fe48:	2204      	movs	r2, #4
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	6820      	ldr	r0, [r4, #0]
 800fe4e:	f7ff fc3d 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 800fe52:	6822      	ldr	r2, [r4, #0]
 800fe54:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fe56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe5a:	6453      	str	r3, [r2, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe5c:	6823      	ldr	r3, [r4, #0]
 800fe5e:	4a21      	ldr	r2, [pc, #132]	; (800fee4 <HAL_TIMEx_OCN_Start_IT+0x132>)
 800fe60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe64:	bf18      	it	ne
 800fe66:	4293      	cmpne	r3, r2
 800fe68:	d029      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d025      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d021      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d01d      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe82:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d019      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe8a:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d015      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
 800fe92:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d011      	beq.n	800febe <HAL_TIMEx_OCN_Start_IT+0x10c>
      __HAL_TIM_ENABLE(htim);
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	f042 0201 	orr.w	r2, r2, #1
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	2000      	movs	r0, #0
 800fea4:	e79c      	b.n	800fde0 <HAL_TIMEx_OCN_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	68d3      	ldr	r3, [r2, #12]
 800feaa:	f043 0304 	orr.w	r3, r3, #4
 800feae:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800feb0:	e7c5      	b.n	800fe3e <HAL_TIMEx_OCN_Start_IT+0x8c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	68d3      	ldr	r3, [r2, #12]
 800feb6:	f043 0308 	orr.w	r3, r3, #8
 800feba:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800febc:	e7bf      	b.n	800fe3e <HAL_TIMEx_OCN_Start_IT+0x8c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800febe:	6899      	ldr	r1, [r3, #8]
 800fec0:	4a09      	ldr	r2, [pc, #36]	; (800fee8 <HAL_TIMEx_OCN_Start_IT+0x136>)
 800fec2:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fec4:	2a06      	cmp	r2, #6
 800fec6:	bf18      	it	ne
 800fec8:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800fecc:	d007      	beq.n	800fede <HAL_TIMEx_OCN_Start_IT+0x12c>
        __HAL_TIM_ENABLE(htim);
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	f042 0201 	orr.w	r2, r2, #1
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	2000      	movs	r0, #0
 800fed8:	e782      	b.n	800fde0 <HAL_TIMEx_OCN_Start_IT+0x2e>
    return HAL_ERROR;
 800feda:	2001      	movs	r0, #1
 800fedc:	e780      	b.n	800fde0 <HAL_TIMEx_OCN_Start_IT+0x2e>
 800fede:	2000      	movs	r0, #0
 800fee0:	e77e      	b.n	800fde0 <HAL_TIMEx_OCN_Start_IT+0x2e>
 800fee2:	bf00      	nop
 800fee4:	40010000 	.word	0x40010000
 800fee8:	00010007 	.word	0x00010007

0800feec <HAL_TIMEx_OCN_Stop_IT>:
{
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4605      	mov	r5, r0
 800fef0:	460c      	mov	r4, r1
  switch (Channel)
 800fef2:	2904      	cmp	r1, #4
 800fef4:	d03c      	beq.n	800ff70 <HAL_TIMEx_OCN_Stop_IT+0x84>
 800fef6:	2908      	cmp	r1, #8
 800fef8:	d040      	beq.n	800ff7c <HAL_TIMEx_OCN_Stop_IT+0x90>
 800fefa:	b109      	cbz	r1, 800ff00 <HAL_TIMEx_OCN_Stop_IT+0x14>
 800fefc:	2001      	movs	r0, #1
}
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ff00:	6802      	ldr	r2, [r0, #0]
 800ff02:	68d3      	ldr	r3, [r2, #12]
 800ff04:	f023 0302 	bic.w	r3, r3, #2
 800ff08:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	6828      	ldr	r0, [r5, #0]
 800ff10:	f7ff fbdc 	bl	800f6cc <TIM_CCxNChannelCmd>
    tmpccer = htim->Instance->CCER;
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	6a19      	ldr	r1, [r3, #32]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800ff18:	f240 4244 	movw	r2, #1092	; 0x444
 800ff1c:	4211      	tst	r1, r2
 800ff1e:	d103      	bne.n	800ff28 <HAL_TIMEx_OCN_Stop_IT+0x3c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800ff20:	68da      	ldr	r2, [r3, #12]
 800ff22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff26:	60da      	str	r2, [r3, #12]
    __HAL_TIM_MOE_DISABLE(htim);
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	6a19      	ldr	r1, [r3, #32]
 800ff2c:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff30:	4211      	tst	r1, r2
 800ff32:	d108      	bne.n	800ff46 <HAL_TIMEx_OCN_Stop_IT+0x5a>
 800ff34:	6a19      	ldr	r1, [r3, #32]
 800ff36:	f240 4244 	movw	r2, #1092	; 0x444
 800ff3a:	4211      	tst	r1, r2
 800ff3c:	d103      	bne.n	800ff46 <HAL_TIMEx_OCN_Stop_IT+0x5a>
 800ff3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ff44:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 800ff46:	682b      	ldr	r3, [r5, #0]
 800ff48:	6a19      	ldr	r1, [r3, #32]
 800ff4a:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff4e:	4211      	tst	r1, r2
 800ff50:	d108      	bne.n	800ff64 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800ff52:	6a19      	ldr	r1, [r3, #32]
 800ff54:	f240 4244 	movw	r2, #1092	; 0x444
 800ff58:	4211      	tst	r1, r2
 800ff5a:	d103      	bne.n	800ff64 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	f022 0201 	bic.w	r2, r2, #1
 800ff62:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff64:	b984      	cbnz	r4, 800ff88 <HAL_TIMEx_OCN_Stop_IT+0x9c>
 800ff66:	2301      	movs	r3, #1
 800ff68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	e7c6      	b.n	800fefe <HAL_TIMEx_OCN_Stop_IT+0x12>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ff70:	6802      	ldr	r2, [r0, #0]
 800ff72:	68d3      	ldr	r3, [r2, #12]
 800ff74:	f023 0304 	bic.w	r3, r3, #4
 800ff78:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800ff7a:	e7c6      	b.n	800ff0a <HAL_TIMEx_OCN_Stop_IT+0x1e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ff7c:	6802      	ldr	r2, [r0, #0]
 800ff7e:	68d3      	ldr	r3, [r2, #12]
 800ff80:	f023 0308 	bic.w	r3, r3, #8
 800ff84:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800ff86:	e7c0      	b.n	800ff0a <HAL_TIMEx_OCN_Stop_IT+0x1e>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff88:	2c04      	cmp	r4, #4
 800ff8a:	d006      	beq.n	800ff9a <HAL_TIMEx_OCN_Stop_IT+0xae>
 800ff8c:	2c08      	cmp	r4, #8
 800ff8e:	d009      	beq.n	800ffa4 <HAL_TIMEx_OCN_Stop_IT+0xb8>
 800ff90:	2301      	movs	r3, #1
 800ff92:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 800ff96:	2000      	movs	r0, #0
 800ff98:	e7b1      	b.n	800fefe <HAL_TIMEx_OCN_Stop_IT+0x12>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e7ac      	b.n	800fefe <HAL_TIMEx_OCN_Stop_IT+0x12>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 800ffaa:	2000      	movs	r0, #0
 800ffac:	e7a7      	b.n	800fefe <HAL_TIMEx_OCN_Stop_IT+0x12>

0800ffae <HAL_TIMEx_OCN_Start_DMA>:
{
 800ffae:	b538      	push	{r3, r4, r5, lr}
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	4694      	mov	ip, r2
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ffb4:	460d      	mov	r5, r1
 800ffb6:	bb51      	cbnz	r1, 801000e <HAL_TIMEx_OCN_Start_DMA+0x60>
 800ffb8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800ffbc:	b2c0      	uxtb	r0, r0
 800ffbe:	2802      	cmp	r0, #2
 800ffc0:	bf14      	ite	ne
 800ffc2:	2000      	movne	r0, #0
 800ffc4:	2001      	moveq	r0, #1
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	f040 80e9 	bne.w	801019e <HAL_TIMEx_OCN_Start_DMA+0x1f0>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ffcc:	2d00      	cmp	r5, #0
 800ffce:	d13a      	bne.n	8010046 <HAL_TIMEx_OCN_Start_DMA+0x98>
 800ffd0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ffd4:	b2d2      	uxtb	r2, r2
 800ffd6:	2a01      	cmp	r2, #1
 800ffd8:	bf14      	ite	ne
 800ffda:	2200      	movne	r2, #0
 800ffdc:	2201      	moveq	r2, #1
 800ffde:	2a00      	cmp	r2, #0
 800ffe0:	f000 80df 	beq.w	80101a2 <HAL_TIMEx_OCN_Start_DMA+0x1f4>
    if ((pData == NULL) || (Length == 0U))
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	bf18      	it	ne
 800ffe8:	f1bc 0f00 	cmpne.w	ip, #0
 800ffec:	f000 80db 	beq.w	80101a6 <HAL_TIMEx_OCN_Start_DMA+0x1f8>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	d144      	bne.n	801007e <HAL_TIMEx_OCN_Start_DMA+0xd0>
 800fff4:	2202      	movs	r2, #2
 800fff6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  switch (Channel)
 800fffa:	2d04      	cmp	r5, #4
 800fffc:	f000 8094 	beq.w	8010128 <HAL_TIMEx_OCN_Start_DMA+0x17a>
 8010000:	2d08      	cmp	r5, #8
 8010002:	f000 80a8 	beq.w	8010156 <HAL_TIMEx_OCN_Start_DMA+0x1a8>
 8010006:	2d00      	cmp	r5, #0
 8010008:	d049      	beq.n	801009e <HAL_TIMEx_OCN_Start_DMA+0xf0>
 801000a:	2001      	movs	r0, #1
 801000c:	e0ca      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801000e:	2904      	cmp	r1, #4
 8010010:	d009      	beq.n	8010026 <HAL_TIMEx_OCN_Start_DMA+0x78>
 8010012:	2908      	cmp	r1, #8
 8010014:	d00f      	beq.n	8010036 <HAL_TIMEx_OCN_Start_DMA+0x88>
 8010016:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 801001a:	b2c0      	uxtb	r0, r0
 801001c:	2802      	cmp	r0, #2
 801001e:	bf14      	ite	ne
 8010020:	2000      	movne	r0, #0
 8010022:	2001      	moveq	r0, #1
 8010024:	e7cf      	b.n	800ffc6 <HAL_TIMEx_OCN_Start_DMA+0x18>
 8010026:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 801002a:	b2c0      	uxtb	r0, r0
 801002c:	2802      	cmp	r0, #2
 801002e:	bf14      	ite	ne
 8010030:	2000      	movne	r0, #0
 8010032:	2001      	moveq	r0, #1
 8010034:	e7c7      	b.n	800ffc6 <HAL_TIMEx_OCN_Start_DMA+0x18>
 8010036:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 801003a:	b2c0      	uxtb	r0, r0
 801003c:	2802      	cmp	r0, #2
 801003e:	bf14      	ite	ne
 8010040:	2000      	movne	r0, #0
 8010042:	2001      	moveq	r0, #1
 8010044:	e7bf      	b.n	800ffc6 <HAL_TIMEx_OCN_Start_DMA+0x18>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010046:	2d04      	cmp	r5, #4
 8010048:	d009      	beq.n	801005e <HAL_TIMEx_OCN_Start_DMA+0xb0>
 801004a:	2d08      	cmp	r5, #8
 801004c:	d00f      	beq.n	801006e <HAL_TIMEx_OCN_Start_DMA+0xc0>
 801004e:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8010052:	b2d2      	uxtb	r2, r2
 8010054:	2a01      	cmp	r2, #1
 8010056:	bf14      	ite	ne
 8010058:	2200      	movne	r2, #0
 801005a:	2201      	moveq	r2, #1
 801005c:	e7bf      	b.n	800ffde <HAL_TIMEx_OCN_Start_DMA+0x30>
 801005e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8010062:	b2d2      	uxtb	r2, r2
 8010064:	2a01      	cmp	r2, #1
 8010066:	bf14      	ite	ne
 8010068:	2200      	movne	r2, #0
 801006a:	2201      	moveq	r2, #1
 801006c:	e7b7      	b.n	800ffde <HAL_TIMEx_OCN_Start_DMA+0x30>
 801006e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	2a01      	cmp	r2, #1
 8010076:	bf14      	ite	ne
 8010078:	2200      	movne	r2, #0
 801007a:	2201      	moveq	r2, #1
 801007c:	e7af      	b.n	800ffde <HAL_TIMEx_OCN_Start_DMA+0x30>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801007e:	2d04      	cmp	r5, #4
 8010080:	d005      	beq.n	801008e <HAL_TIMEx_OCN_Start_DMA+0xe0>
 8010082:	2d08      	cmp	r5, #8
 8010084:	d007      	beq.n	8010096 <HAL_TIMEx_OCN_Start_DMA+0xe8>
 8010086:	2202      	movs	r2, #2
 8010088:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 801008c:	e7b5      	b.n	800fffa <HAL_TIMEx_OCN_Start_DMA+0x4c>
 801008e:	2202      	movs	r2, #2
 8010090:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010094:	e7b1      	b.n	800fffa <HAL_TIMEx_OCN_Start_DMA+0x4c>
 8010096:	2202      	movs	r2, #2
 8010098:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
 801009c:	e7ad      	b.n	800fffa <HAL_TIMEx_OCN_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 801009e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80100a0:	4946      	ldr	r1, [pc, #280]	; (80101bc <HAL_TIMEx_OCN_Start_DMA+0x20e>)
 80100a2:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80100a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80100a6:	4946      	ldr	r1, [pc, #280]	; (80101c0 <HAL_TIMEx_OCN_Start_DMA+0x212>)
 80100a8:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80100aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80100ac:	4945      	ldr	r1, [pc, #276]	; (80101c4 <HAL_TIMEx_OCN_Start_DMA+0x216>)
 80100ae:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80100b0:	6822      	ldr	r2, [r4, #0]
 80100b2:	3234      	adds	r2, #52	; 0x34
 80100b4:	4661      	mov	r1, ip
 80100b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80100b8:	f7f5 ff04 	bl	8005ec4 <HAL_DMA_Start_IT>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d174      	bne.n	80101aa <HAL_TIMEx_OCN_Start_DMA+0x1fc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	68d3      	ldr	r3, [r2, #12]
 80100c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80100c8:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80100ca:	2204      	movs	r2, #4
 80100cc:	4629      	mov	r1, r5
 80100ce:	6820      	ldr	r0, [r4, #0]
 80100d0:	f7ff fafc 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 80100d4:	6822      	ldr	r2, [r4, #0]
 80100d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80100d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100dc:	6453      	str	r3, [r2, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	4a39      	ldr	r2, [pc, #228]	; (80101c8 <HAL_TIMEx_OCN_Start_DMA+0x21a>)
 80100e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100e6:	bf18      	it	ne
 80100e8:	4293      	cmpne	r3, r2
 80100ea:	d04a      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 80100ec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d046      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 80100f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d042      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 80100fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010100:	4293      	cmp	r3, r2
 8010102:	d03e      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 8010104:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010108:	4293      	cmp	r3, r2
 801010a:	d03a      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 801010c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8010110:	4293      	cmp	r3, r2
 8010112:	d036      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
 8010114:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8010118:	4293      	cmp	r3, r2
 801011a:	d032      	beq.n	8010182 <HAL_TIMEx_OCN_Start_DMA+0x1d4>
      __HAL_TIM_ENABLE(htim);
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	f042 0201 	orr.w	r2, r2, #1
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	2000      	movs	r0, #0
 8010126:	e03d      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8010128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801012a:	4924      	ldr	r1, [pc, #144]	; (80101bc <HAL_TIMEx_OCN_Start_DMA+0x20e>)
 801012c:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801012e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010130:	4923      	ldr	r1, [pc, #140]	; (80101c0 <HAL_TIMEx_OCN_Start_DMA+0x212>)
 8010132:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8010134:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010136:	4923      	ldr	r1, [pc, #140]	; (80101c4 <HAL_TIMEx_OCN_Start_DMA+0x216>)
 8010138:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 801013a:	6822      	ldr	r2, [r4, #0]
 801013c:	3238      	adds	r2, #56	; 0x38
 801013e:	4661      	mov	r1, ip
 8010140:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010142:	f7f5 febf 	bl	8005ec4 <HAL_DMA_Start_IT>
 8010146:	2800      	cmp	r0, #0
 8010148:	d131      	bne.n	80101ae <HAL_TIMEx_OCN_Start_DMA+0x200>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801014a:	6822      	ldr	r2, [r4, #0]
 801014c:	68d3      	ldr	r3, [r2, #12]
 801014e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010152:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8010154:	e7b9      	b.n	80100ca <HAL_TIMEx_OCN_Start_DMA+0x11c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8010156:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010158:	4918      	ldr	r1, [pc, #96]	; (80101bc <HAL_TIMEx_OCN_Start_DMA+0x20e>)
 801015a:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801015c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801015e:	4918      	ldr	r1, [pc, #96]	; (80101c0 <HAL_TIMEx_OCN_Start_DMA+0x212>)
 8010160:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8010162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010164:	4917      	ldr	r1, [pc, #92]	; (80101c4 <HAL_TIMEx_OCN_Start_DMA+0x216>)
 8010166:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	323c      	adds	r2, #60	; 0x3c
 801016c:	4661      	mov	r1, ip
 801016e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010170:	f7f5 fea8 	bl	8005ec4 <HAL_DMA_Start_IT>
 8010174:	b9e8      	cbnz	r0, 80101b2 <HAL_TIMEx_OCN_Start_DMA+0x204>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010176:	6822      	ldr	r2, [r4, #0]
 8010178:	68d3      	ldr	r3, [r2, #12]
 801017a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801017e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8010180:	e7a3      	b.n	80100ca <HAL_TIMEx_OCN_Start_DMA+0x11c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010182:	6899      	ldr	r1, [r3, #8]
 8010184:	4a11      	ldr	r2, [pc, #68]	; (80101cc <HAL_TIMEx_OCN_Start_DMA+0x21e>)
 8010186:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010188:	2a06      	cmp	r2, #6
 801018a:	bf18      	it	ne
 801018c:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8010190:	d011      	beq.n	80101b6 <HAL_TIMEx_OCN_Start_DMA+0x208>
        __HAL_TIM_ENABLE(htim);
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	f042 0201 	orr.w	r2, r2, #1
 8010198:	601a      	str	r2, [r3, #0]
 801019a:	2000      	movs	r0, #0
 801019c:	e002      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
    return HAL_BUSY;
 801019e:	2002      	movs	r0, #2
 80101a0:	e000      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
    return HAL_ERROR;
 80101a2:	2001      	movs	r0, #1
}
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80101a6:	2001      	movs	r0, #1
 80101a8:	e7fc      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
        return HAL_ERROR;
 80101aa:	2001      	movs	r0, #1
 80101ac:	e7fa      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
        return HAL_ERROR;
 80101ae:	2001      	movs	r0, #1
 80101b0:	e7f8      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
        return HAL_ERROR;
 80101b2:	2001      	movs	r0, #1
 80101b4:	e7f6      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
 80101b6:	2000      	movs	r0, #0
 80101b8:	e7f4      	b.n	80101a4 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
 80101ba:	bf00      	nop
 80101bc:	0800f72f 	.word	0x0800f72f
 80101c0:	0800c353 	.word	0x0800c353
 80101c4:	0800f6eb 	.word	0x0800f6eb
 80101c8:	40010000 	.word	0x40010000
 80101cc:	00010007 	.word	0x00010007

080101d0 <HAL_TIMEx_OCN_Stop_DMA>:
{
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4605      	mov	r5, r0
 80101d4:	460c      	mov	r4, r1
  switch (Channel)
 80101d6:	2904      	cmp	r1, #4
 80101d8:	d035      	beq.n	8010246 <HAL_TIMEx_OCN_Stop_DMA+0x76>
 80101da:	2908      	cmp	r1, #8
 80101dc:	d03c      	beq.n	8010258 <HAL_TIMEx_OCN_Stop_DMA+0x88>
 80101de:	b109      	cbz	r1, 80101e4 <HAL_TIMEx_OCN_Stop_DMA+0x14>
 80101e0:	2001      	movs	r0, #1
}
 80101e2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80101e4:	6802      	ldr	r2, [r0, #0]
 80101e6:	68d3      	ldr	r3, [r2, #12]
 80101e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101ec:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80101ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80101f0:	f7f6 f954 	bl	800649c <HAL_DMA_Abort_IT>
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80101f4:	2200      	movs	r2, #0
 80101f6:	4621      	mov	r1, r4
 80101f8:	6828      	ldr	r0, [r5, #0]
 80101fa:	f7ff fa67 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_DISABLE(htim);
 80101fe:	682b      	ldr	r3, [r5, #0]
 8010200:	6a19      	ldr	r1, [r3, #32]
 8010202:	f241 1211 	movw	r2, #4369	; 0x1111
 8010206:	4211      	tst	r1, r2
 8010208:	d108      	bne.n	801021c <HAL_TIMEx_OCN_Stop_DMA+0x4c>
 801020a:	6a19      	ldr	r1, [r3, #32]
 801020c:	f240 4244 	movw	r2, #1092	; 0x444
 8010210:	4211      	tst	r1, r2
 8010212:	d103      	bne.n	801021c <HAL_TIMEx_OCN_Stop_DMA+0x4c>
 8010214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801021a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 801021c:	682b      	ldr	r3, [r5, #0]
 801021e:	6a19      	ldr	r1, [r3, #32]
 8010220:	f241 1211 	movw	r2, #4369	; 0x1111
 8010224:	4211      	tst	r1, r2
 8010226:	d108      	bne.n	801023a <HAL_TIMEx_OCN_Stop_DMA+0x6a>
 8010228:	6a19      	ldr	r1, [r3, #32]
 801022a:	f240 4244 	movw	r2, #1092	; 0x444
 801022e:	4211      	tst	r1, r2
 8010230:	d103      	bne.n	801023a <HAL_TIMEx_OCN_Stop_DMA+0x6a>
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	f022 0201 	bic.w	r2, r2, #1
 8010238:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801023a:	b9b4      	cbnz	r4, 801026a <HAL_TIMEx_OCN_Stop_DMA+0x9a>
 801023c:	2301      	movs	r3, #1
 801023e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8010242:	2000      	movs	r0, #0
 8010244:	e7cd      	b.n	80101e2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010246:	6802      	ldr	r2, [r0, #0]
 8010248:	68d3      	ldr	r3, [r2, #12]
 801024a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801024e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010250:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010252:	f7f6 f923 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8010256:	e7cd      	b.n	80101f4 <HAL_TIMEx_OCN_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010258:	6802      	ldr	r2, [r0, #0]
 801025a:	68d3      	ldr	r3, [r2, #12]
 801025c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010260:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010262:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010264:	f7f6 f91a 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8010268:	e7c4      	b.n	80101f4 <HAL_TIMEx_OCN_Stop_DMA+0x24>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801026a:	2c04      	cmp	r4, #4
 801026c:	d006      	beq.n	801027c <HAL_TIMEx_OCN_Stop_DMA+0xac>
 801026e:	2c08      	cmp	r4, #8
 8010270:	d009      	beq.n	8010286 <HAL_TIMEx_OCN_Stop_DMA+0xb6>
 8010272:	2301      	movs	r3, #1
 8010274:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 8010278:	2000      	movs	r0, #0
 801027a:	e7b2      	b.n	80101e2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
 801027c:	2301      	movs	r3, #1
 801027e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8010282:	2000      	movs	r0, #0
 8010284:	e7ad      	b.n	80101e2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
 8010286:	2301      	movs	r3, #1
 8010288:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 801028c:	2000      	movs	r0, #0
 801028e:	e7a8      	b.n	80101e2 <HAL_TIMEx_OCN_Stop_DMA+0x12>

08010290 <HAL_TIMEx_PWMN_Start>:
{
 8010290:	b510      	push	{r4, lr}
 8010292:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010294:	4608      	mov	r0, r1
 8010296:	2900      	cmp	r1, #0
 8010298:	d13b      	bne.n	8010312 <HAL_TIMEx_PWMN_Start+0x82>
 801029a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	3b01      	subs	r3, #1
 80102a2:	bf18      	it	ne
 80102a4:	2301      	movne	r3, #1
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d16a      	bne.n	8010380 <HAL_TIMEx_PWMN_Start+0xf0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d14a      	bne.n	8010344 <HAL_TIMEx_PWMN_Start+0xb4>
 80102ae:	2302      	movs	r3, #2
 80102b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80102b4:	2204      	movs	r2, #4
 80102b6:	4601      	mov	r1, r0
 80102b8:	6820      	ldr	r0, [r4, #0]
 80102ba:	f7ff fa07 	bl	800f6cc <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80102be:	6822      	ldr	r2, [r4, #0]
 80102c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80102c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102c6:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	4a2f      	ldr	r2, [pc, #188]	; (8010388 <HAL_TIMEx_PWMN_Start+0xf8>)
 80102cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102d0:	bf18      	it	ne
 80102d2:	4293      	cmpne	r3, r2
 80102d4:	d046      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80102da:	4293      	cmp	r3, r2
 80102dc:	d042      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d03e      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d03a      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d036      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102f6:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d032      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
 80102fe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8010302:	4293      	cmp	r3, r2
 8010304:	d02e      	beq.n	8010364 <HAL_TIMEx_PWMN_Start+0xd4>
    __HAL_TIM_ENABLE(htim);
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	f042 0201 	orr.w	r2, r2, #1
 801030c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801030e:	2000      	movs	r0, #0
 8010310:	e037      	b.n	8010382 <HAL_TIMEx_PWMN_Start+0xf2>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010312:	2904      	cmp	r1, #4
 8010314:	d008      	beq.n	8010328 <HAL_TIMEx_PWMN_Start+0x98>
 8010316:	2908      	cmp	r1, #8
 8010318:	d00d      	beq.n	8010336 <HAL_TIMEx_PWMN_Start+0xa6>
 801031a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 801031e:	b2db      	uxtb	r3, r3
 8010320:	3b01      	subs	r3, #1
 8010322:	bf18      	it	ne
 8010324:	2301      	movne	r3, #1
 8010326:	e7be      	b.n	80102a6 <HAL_TIMEx_PWMN_Start+0x16>
 8010328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801032c:	b2db      	uxtb	r3, r3
 801032e:	3b01      	subs	r3, #1
 8010330:	bf18      	it	ne
 8010332:	2301      	movne	r3, #1
 8010334:	e7b7      	b.n	80102a6 <HAL_TIMEx_PWMN_Start+0x16>
 8010336:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801033a:	b2db      	uxtb	r3, r3
 801033c:	3b01      	subs	r3, #1
 801033e:	bf18      	it	ne
 8010340:	2301      	movne	r3, #1
 8010342:	e7b0      	b.n	80102a6 <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010344:	2804      	cmp	r0, #4
 8010346:	d005      	beq.n	8010354 <HAL_TIMEx_PWMN_Start+0xc4>
 8010348:	2808      	cmp	r0, #8
 801034a:	d007      	beq.n	801035c <HAL_TIMEx_PWMN_Start+0xcc>
 801034c:	2302      	movs	r3, #2
 801034e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8010352:	e7af      	b.n	80102b4 <HAL_TIMEx_PWMN_Start+0x24>
 8010354:	2302      	movs	r3, #2
 8010356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801035a:	e7ab      	b.n	80102b4 <HAL_TIMEx_PWMN_Start+0x24>
 801035c:	2302      	movs	r3, #2
 801035e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010362:	e7a7      	b.n	80102b4 <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010364:	6899      	ldr	r1, [r3, #8]
 8010366:	4a09      	ldr	r2, [pc, #36]	; (801038c <HAL_TIMEx_PWMN_Start+0xfc>)
 8010368:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801036a:	2a06      	cmp	r2, #6
 801036c:	bf18      	it	ne
 801036e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8010372:	d007      	beq.n	8010384 <HAL_TIMEx_PWMN_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	f042 0201 	orr.w	r2, r2, #1
 801037a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801037c:	2000      	movs	r0, #0
 801037e:	e000      	b.n	8010382 <HAL_TIMEx_PWMN_Start+0xf2>
    return HAL_ERROR;
 8010380:	2001      	movs	r0, #1
}
 8010382:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8010384:	2000      	movs	r0, #0
 8010386:	e7fc      	b.n	8010382 <HAL_TIMEx_PWMN_Start+0xf2>
 8010388:	40010000 	.word	0x40010000
 801038c:	00010007 	.word	0x00010007

08010390 <HAL_TIMEx_PWMN_Stop>:
{
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	4604      	mov	r4, r0
 8010394:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010396:	2200      	movs	r2, #0
 8010398:	6800      	ldr	r0, [r0, #0]
 801039a:	f7ff f997 	bl	800f6cc <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	6a19      	ldr	r1, [r3, #32]
 80103a2:	f241 1211 	movw	r2, #4369	; 0x1111
 80103a6:	4211      	tst	r1, r2
 80103a8:	d108      	bne.n	80103bc <HAL_TIMEx_PWMN_Stop+0x2c>
 80103aa:	6a19      	ldr	r1, [r3, #32]
 80103ac:	f240 4244 	movw	r2, #1092	; 0x444
 80103b0:	4211      	tst	r1, r2
 80103b2:	d103      	bne.n	80103bc <HAL_TIMEx_PWMN_Stop+0x2c>
 80103b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103ba:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	6a19      	ldr	r1, [r3, #32]
 80103c0:	f241 1211 	movw	r2, #4369	; 0x1111
 80103c4:	4211      	tst	r1, r2
 80103c6:	d108      	bne.n	80103da <HAL_TIMEx_PWMN_Stop+0x4a>
 80103c8:	6a19      	ldr	r1, [r3, #32]
 80103ca:	f240 4244 	movw	r2, #1092	; 0x444
 80103ce:	4211      	tst	r1, r2
 80103d0:	d103      	bne.n	80103da <HAL_TIMEx_PWMN_Stop+0x4a>
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	f022 0201 	bic.w	r2, r2, #1
 80103d8:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80103da:	b925      	cbnz	r5, 80103e6 <HAL_TIMEx_PWMN_Stop+0x56>
 80103dc:	2301      	movs	r3, #1
 80103de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80103e2:	2000      	movs	r0, #0
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80103e6:	2d04      	cmp	r5, #4
 80103e8:	d005      	beq.n	80103f6 <HAL_TIMEx_PWMN_Stop+0x66>
 80103ea:	2d08      	cmp	r5, #8
 80103ec:	d007      	beq.n	80103fe <HAL_TIMEx_PWMN_Stop+0x6e>
 80103ee:	2301      	movs	r3, #1
 80103f0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80103f4:	e7f5      	b.n	80103e2 <HAL_TIMEx_PWMN_Stop+0x52>
 80103f6:	2301      	movs	r3, #1
 80103f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103fc:	e7f1      	b.n	80103e2 <HAL_TIMEx_PWMN_Stop+0x52>
 80103fe:	2301      	movs	r3, #1
 8010400:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010404:	e7ed      	b.n	80103e2 <HAL_TIMEx_PWMN_Stop+0x52>

08010406 <HAL_TIMEx_PWMN_Start_IT>:
{
 8010406:	b510      	push	{r4, lr}
 8010408:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801040a:	4608      	mov	r0, r1
 801040c:	b999      	cbnz	r1, 8010436 <HAL_TIMEx_PWMN_Start_IT+0x30>
 801040e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010412:	b2db      	uxtb	r3, r3
 8010414:	3b01      	subs	r3, #1
 8010416:	bf18      	it	ne
 8010418:	2301      	movne	r3, #1
 801041a:	2b00      	cmp	r3, #0
 801041c:	f040 8087 	bne.w	801052e <HAL_TIMEx_PWMN_Start_IT+0x128>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010420:	bb10      	cbnz	r0, 8010468 <HAL_TIMEx_PWMN_Start_IT+0x62>
 8010422:	2302      	movs	r3, #2
 8010424:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  switch (Channel)
 8010428:	2804      	cmp	r0, #4
 801042a:	d066      	beq.n	80104fa <HAL_TIMEx_PWMN_Start_IT+0xf4>
 801042c:	2808      	cmp	r0, #8
 801042e:	d06a      	beq.n	8010506 <HAL_TIMEx_PWMN_Start_IT+0x100>
 8010430:	b350      	cbz	r0, 8010488 <HAL_TIMEx_PWMN_Start_IT+0x82>
 8010432:	2001      	movs	r0, #1
}
 8010434:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010436:	2904      	cmp	r1, #4
 8010438:	d008      	beq.n	801044c <HAL_TIMEx_PWMN_Start_IT+0x46>
 801043a:	2908      	cmp	r1, #8
 801043c:	d00d      	beq.n	801045a <HAL_TIMEx_PWMN_Start_IT+0x54>
 801043e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8010442:	b2db      	uxtb	r3, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	bf18      	it	ne
 8010448:	2301      	movne	r3, #1
 801044a:	e7e6      	b.n	801041a <HAL_TIMEx_PWMN_Start_IT+0x14>
 801044c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010450:	b2db      	uxtb	r3, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	bf18      	it	ne
 8010456:	2301      	movne	r3, #1
 8010458:	e7df      	b.n	801041a <HAL_TIMEx_PWMN_Start_IT+0x14>
 801045a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801045e:	b2db      	uxtb	r3, r3
 8010460:	3b01      	subs	r3, #1
 8010462:	bf18      	it	ne
 8010464:	2301      	movne	r3, #1
 8010466:	e7d8      	b.n	801041a <HAL_TIMEx_PWMN_Start_IT+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010468:	2804      	cmp	r0, #4
 801046a:	d005      	beq.n	8010478 <HAL_TIMEx_PWMN_Start_IT+0x72>
 801046c:	2808      	cmp	r0, #8
 801046e:	d007      	beq.n	8010480 <HAL_TIMEx_PWMN_Start_IT+0x7a>
 8010470:	2302      	movs	r3, #2
 8010472:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8010476:	e7d7      	b.n	8010428 <HAL_TIMEx_PWMN_Start_IT+0x22>
 8010478:	2302      	movs	r3, #2
 801047a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801047e:	e7d3      	b.n	8010428 <HAL_TIMEx_PWMN_Start_IT+0x22>
 8010480:	2302      	movs	r3, #2
 8010482:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010486:	e7cf      	b.n	8010428 <HAL_TIMEx_PWMN_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010488:	6822      	ldr	r2, [r4, #0]
 801048a:	68d3      	ldr	r3, [r2, #12]
 801048c:	f043 0302 	orr.w	r3, r3, #2
 8010490:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010492:	6822      	ldr	r2, [r4, #0]
 8010494:	68d3      	ldr	r3, [r2, #12]
 8010496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801049a:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801049c:	2204      	movs	r2, #4
 801049e:	4601      	mov	r1, r0
 80104a0:	6820      	ldr	r0, [r4, #0]
 80104a2:	f7ff f913 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 80104a6:	6822      	ldr	r2, [r4, #0]
 80104a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80104aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ae:	6453      	str	r3, [r2, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	4a21      	ldr	r2, [pc, #132]	; (8010538 <HAL_TIMEx_PWMN_Start_IT+0x132>)
 80104b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104b8:	bf18      	it	ne
 80104ba:	4293      	cmpne	r3, r2
 80104bc:	d029      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d025      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d021      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d01d      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80104da:	4293      	cmp	r3, r2
 80104dc:	d019      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104de:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d015      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
 80104e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d011      	beq.n	8010512 <HAL_TIMEx_PWMN_Start_IT+0x10c>
      __HAL_TIM_ENABLE(htim);
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	f042 0201 	orr.w	r2, r2, #1
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	2000      	movs	r0, #0
 80104f8:	e79c      	b.n	8010434 <HAL_TIMEx_PWMN_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80104fa:	6822      	ldr	r2, [r4, #0]
 80104fc:	68d3      	ldr	r3, [r2, #12]
 80104fe:	f043 0304 	orr.w	r3, r3, #4
 8010502:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8010504:	e7c5      	b.n	8010492 <HAL_TIMEx_PWMN_Start_IT+0x8c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010506:	6822      	ldr	r2, [r4, #0]
 8010508:	68d3      	ldr	r3, [r2, #12]
 801050a:	f043 0308 	orr.w	r3, r3, #8
 801050e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8010510:	e7bf      	b.n	8010492 <HAL_TIMEx_PWMN_Start_IT+0x8c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010512:	6899      	ldr	r1, [r3, #8]
 8010514:	4a09      	ldr	r2, [pc, #36]	; (801053c <HAL_TIMEx_PWMN_Start_IT+0x136>)
 8010516:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010518:	2a06      	cmp	r2, #6
 801051a:	bf18      	it	ne
 801051c:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8010520:	d007      	beq.n	8010532 <HAL_TIMEx_PWMN_Start_IT+0x12c>
        __HAL_TIM_ENABLE(htim);
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	f042 0201 	orr.w	r2, r2, #1
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	2000      	movs	r0, #0
 801052c:	e782      	b.n	8010434 <HAL_TIMEx_PWMN_Start_IT+0x2e>
    return HAL_ERROR;
 801052e:	2001      	movs	r0, #1
 8010530:	e780      	b.n	8010434 <HAL_TIMEx_PWMN_Start_IT+0x2e>
 8010532:	2000      	movs	r0, #0
 8010534:	e77e      	b.n	8010434 <HAL_TIMEx_PWMN_Start_IT+0x2e>
 8010536:	bf00      	nop
 8010538:	40010000 	.word	0x40010000
 801053c:	00010007 	.word	0x00010007

08010540 <HAL_TIMEx_PWMN_Stop_IT>:
{
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4605      	mov	r5, r0
 8010544:	460c      	mov	r4, r1
  switch (Channel)
 8010546:	2904      	cmp	r1, #4
 8010548:	d03c      	beq.n	80105c4 <HAL_TIMEx_PWMN_Stop_IT+0x84>
 801054a:	2908      	cmp	r1, #8
 801054c:	d040      	beq.n	80105d0 <HAL_TIMEx_PWMN_Stop_IT+0x90>
 801054e:	b109      	cbz	r1, 8010554 <HAL_TIMEx_PWMN_Stop_IT+0x14>
 8010550:	2001      	movs	r0, #1
}
 8010552:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010554:	6802      	ldr	r2, [r0, #0]
 8010556:	68d3      	ldr	r3, [r2, #12]
 8010558:	f023 0302 	bic.w	r3, r3, #2
 801055c:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801055e:	2200      	movs	r2, #0
 8010560:	4621      	mov	r1, r4
 8010562:	6828      	ldr	r0, [r5, #0]
 8010564:	f7ff f8b2 	bl	800f6cc <TIM_CCxNChannelCmd>
    tmpccer = htim->Instance->CCER;
 8010568:	682b      	ldr	r3, [r5, #0]
 801056a:	6a19      	ldr	r1, [r3, #32]
    if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801056c:	f240 4244 	movw	r2, #1092	; 0x444
 8010570:	4211      	tst	r1, r2
 8010572:	d103      	bne.n	801057c <HAL_TIMEx_PWMN_Stop_IT+0x3c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010574:	68da      	ldr	r2, [r3, #12]
 8010576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801057a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_MOE_DISABLE(htim);
 801057c:	682b      	ldr	r3, [r5, #0]
 801057e:	6a19      	ldr	r1, [r3, #32]
 8010580:	f241 1211 	movw	r2, #4369	; 0x1111
 8010584:	4211      	tst	r1, r2
 8010586:	d108      	bne.n	801059a <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 8010588:	6a19      	ldr	r1, [r3, #32]
 801058a:	f240 4244 	movw	r2, #1092	; 0x444
 801058e:	4211      	tst	r1, r2
 8010590:	d103      	bne.n	801059a <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 8010592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010598:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 801059a:	682b      	ldr	r3, [r5, #0]
 801059c:	6a19      	ldr	r1, [r3, #32]
 801059e:	f241 1211 	movw	r2, #4369	; 0x1111
 80105a2:	4211      	tst	r1, r2
 80105a4:	d108      	bne.n	80105b8 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 80105a6:	6a19      	ldr	r1, [r3, #32]
 80105a8:	f240 4244 	movw	r2, #1092	; 0x444
 80105ac:	4211      	tst	r1, r2
 80105ae:	d103      	bne.n	80105b8 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	f022 0201 	bic.w	r2, r2, #1
 80105b6:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80105b8:	b984      	cbnz	r4, 80105dc <HAL_TIMEx_PWMN_Stop_IT+0x9c>
 80105ba:	2301      	movs	r3, #1
 80105bc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80105c0:	2000      	movs	r0, #0
 80105c2:	e7c6      	b.n	8010552 <HAL_TIMEx_PWMN_Stop_IT+0x12>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80105c4:	6802      	ldr	r2, [r0, #0]
 80105c6:	68d3      	ldr	r3, [r2, #12]
 80105c8:	f023 0304 	bic.w	r3, r3, #4
 80105cc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80105ce:	e7c6      	b.n	801055e <HAL_TIMEx_PWMN_Stop_IT+0x1e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80105d0:	6802      	ldr	r2, [r0, #0]
 80105d2:	68d3      	ldr	r3, [r2, #12]
 80105d4:	f023 0308 	bic.w	r3, r3, #8
 80105d8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80105da:	e7c0      	b.n	801055e <HAL_TIMEx_PWMN_Stop_IT+0x1e>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80105dc:	2c04      	cmp	r4, #4
 80105de:	d006      	beq.n	80105ee <HAL_TIMEx_PWMN_Stop_IT+0xae>
 80105e0:	2c08      	cmp	r4, #8
 80105e2:	d009      	beq.n	80105f8 <HAL_TIMEx_PWMN_Stop_IT+0xb8>
 80105e4:	2301      	movs	r3, #1
 80105e6:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 80105ea:	2000      	movs	r0, #0
 80105ec:	e7b1      	b.n	8010552 <HAL_TIMEx_PWMN_Stop_IT+0x12>
 80105ee:	2301      	movs	r3, #1
 80105f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80105f4:	2000      	movs	r0, #0
 80105f6:	e7ac      	b.n	8010552 <HAL_TIMEx_PWMN_Stop_IT+0x12>
 80105f8:	2301      	movs	r3, #1
 80105fa:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 80105fe:	2000      	movs	r0, #0
 8010600:	e7a7      	b.n	8010552 <HAL_TIMEx_PWMN_Stop_IT+0x12>

08010602 <HAL_TIMEx_PWMN_Start_DMA>:
{
 8010602:	b538      	push	{r3, r4, r5, lr}
 8010604:	4604      	mov	r4, r0
 8010606:	4694      	mov	ip, r2
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010608:	460d      	mov	r5, r1
 801060a:	bb51      	cbnz	r1, 8010662 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 801060c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8010610:	b2c0      	uxtb	r0, r0
 8010612:	2802      	cmp	r0, #2
 8010614:	bf14      	ite	ne
 8010616:	2000      	movne	r0, #0
 8010618:	2001      	moveq	r0, #1
 801061a:	2800      	cmp	r0, #0
 801061c:	f040 80e9 	bne.w	80107f2 <HAL_TIMEx_PWMN_Start_DMA+0x1f0>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010620:	2d00      	cmp	r5, #0
 8010622:	d13a      	bne.n	801069a <HAL_TIMEx_PWMN_Start_DMA+0x98>
 8010624:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8010628:	b2d2      	uxtb	r2, r2
 801062a:	2a01      	cmp	r2, #1
 801062c:	bf14      	ite	ne
 801062e:	2200      	movne	r2, #0
 8010630:	2201      	moveq	r2, #1
 8010632:	2a00      	cmp	r2, #0
 8010634:	f000 80df 	beq.w	80107f6 <HAL_TIMEx_PWMN_Start_DMA+0x1f4>
    if ((pData == NULL) || (Length == 0U))
 8010638:	2b00      	cmp	r3, #0
 801063a:	bf18      	it	ne
 801063c:	f1bc 0f00 	cmpne.w	ip, #0
 8010640:	f000 80db 	beq.w	80107fa <HAL_TIMEx_PWMN_Start_DMA+0x1f8>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010644:	2d00      	cmp	r5, #0
 8010646:	d144      	bne.n	80106d2 <HAL_TIMEx_PWMN_Start_DMA+0xd0>
 8010648:	2202      	movs	r2, #2
 801064a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  switch (Channel)
 801064e:	2d04      	cmp	r5, #4
 8010650:	f000 8094 	beq.w	801077c <HAL_TIMEx_PWMN_Start_DMA+0x17a>
 8010654:	2d08      	cmp	r5, #8
 8010656:	f000 80a8 	beq.w	80107aa <HAL_TIMEx_PWMN_Start_DMA+0x1a8>
 801065a:	2d00      	cmp	r5, #0
 801065c:	d049      	beq.n	80106f2 <HAL_TIMEx_PWMN_Start_DMA+0xf0>
 801065e:	2001      	movs	r0, #1
 8010660:	e0ca      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8010662:	2904      	cmp	r1, #4
 8010664:	d009      	beq.n	801067a <HAL_TIMEx_PWMN_Start_DMA+0x78>
 8010666:	2908      	cmp	r1, #8
 8010668:	d00f      	beq.n	801068a <HAL_TIMEx_PWMN_Start_DMA+0x88>
 801066a:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 801066e:	b2c0      	uxtb	r0, r0
 8010670:	2802      	cmp	r0, #2
 8010672:	bf14      	ite	ne
 8010674:	2000      	movne	r0, #0
 8010676:	2001      	moveq	r0, #1
 8010678:	e7cf      	b.n	801061a <HAL_TIMEx_PWMN_Start_DMA+0x18>
 801067a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 801067e:	b2c0      	uxtb	r0, r0
 8010680:	2802      	cmp	r0, #2
 8010682:	bf14      	ite	ne
 8010684:	2000      	movne	r0, #0
 8010686:	2001      	moveq	r0, #1
 8010688:	e7c7      	b.n	801061a <HAL_TIMEx_PWMN_Start_DMA+0x18>
 801068a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 801068e:	b2c0      	uxtb	r0, r0
 8010690:	2802      	cmp	r0, #2
 8010692:	bf14      	ite	ne
 8010694:	2000      	movne	r0, #0
 8010696:	2001      	moveq	r0, #1
 8010698:	e7bf      	b.n	801061a <HAL_TIMEx_PWMN_Start_DMA+0x18>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801069a:	2d04      	cmp	r5, #4
 801069c:	d009      	beq.n	80106b2 <HAL_TIMEx_PWMN_Start_DMA+0xb0>
 801069e:	2d08      	cmp	r5, #8
 80106a0:	d00f      	beq.n	80106c2 <HAL_TIMEx_PWMN_Start_DMA+0xc0>
 80106a2:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80106a6:	b2d2      	uxtb	r2, r2
 80106a8:	2a01      	cmp	r2, #1
 80106aa:	bf14      	ite	ne
 80106ac:	2200      	movne	r2, #0
 80106ae:	2201      	moveq	r2, #1
 80106b0:	e7bf      	b.n	8010632 <HAL_TIMEx_PWMN_Start_DMA+0x30>
 80106b2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80106b6:	b2d2      	uxtb	r2, r2
 80106b8:	2a01      	cmp	r2, #1
 80106ba:	bf14      	ite	ne
 80106bc:	2200      	movne	r2, #0
 80106be:	2201      	moveq	r2, #1
 80106c0:	e7b7      	b.n	8010632 <HAL_TIMEx_PWMN_Start_DMA+0x30>
 80106c2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80106c6:	b2d2      	uxtb	r2, r2
 80106c8:	2a01      	cmp	r2, #1
 80106ca:	bf14      	ite	ne
 80106cc:	2200      	movne	r2, #0
 80106ce:	2201      	moveq	r2, #1
 80106d0:	e7af      	b.n	8010632 <HAL_TIMEx_PWMN_Start_DMA+0x30>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106d2:	2d04      	cmp	r5, #4
 80106d4:	d005      	beq.n	80106e2 <HAL_TIMEx_PWMN_Start_DMA+0xe0>
 80106d6:	2d08      	cmp	r5, #8
 80106d8:	d007      	beq.n	80106ea <HAL_TIMEx_PWMN_Start_DMA+0xe8>
 80106da:	2202      	movs	r2, #2
 80106dc:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 80106e0:	e7b5      	b.n	801064e <HAL_TIMEx_PWMN_Start_DMA+0x4c>
 80106e2:	2202      	movs	r2, #2
 80106e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80106e8:	e7b1      	b.n	801064e <HAL_TIMEx_PWMN_Start_DMA+0x4c>
 80106ea:	2202      	movs	r2, #2
 80106ec:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
 80106f0:	e7ad      	b.n	801064e <HAL_TIMEx_PWMN_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80106f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80106f4:	4946      	ldr	r1, [pc, #280]	; (8010810 <HAL_TIMEx_PWMN_Start_DMA+0x20e>)
 80106f6:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80106f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80106fa:	4946      	ldr	r1, [pc, #280]	; (8010814 <HAL_TIMEx_PWMN_Start_DMA+0x212>)
 80106fc:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80106fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010700:	4945      	ldr	r1, [pc, #276]	; (8010818 <HAL_TIMEx_PWMN_Start_DMA+0x216>)
 8010702:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010704:	6822      	ldr	r2, [r4, #0]
 8010706:	3234      	adds	r2, #52	; 0x34
 8010708:	4661      	mov	r1, ip
 801070a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801070c:	f7f5 fbda 	bl	8005ec4 <HAL_DMA_Start_IT>
 8010710:	2800      	cmp	r0, #0
 8010712:	d174      	bne.n	80107fe <HAL_TIMEx_PWMN_Start_DMA+0x1fc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010714:	6822      	ldr	r2, [r4, #0]
 8010716:	68d3      	ldr	r3, [r2, #12]
 8010718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801071c:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801071e:	2204      	movs	r2, #4
 8010720:	4629      	mov	r1, r5
 8010722:	6820      	ldr	r0, [r4, #0]
 8010724:	f7fe ffd2 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 8010728:	6822      	ldr	r2, [r4, #0]
 801072a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010730:	6453      	str	r3, [r2, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	4a39      	ldr	r2, [pc, #228]	; (801081c <HAL_TIMEx_PWMN_Start_DMA+0x21a>)
 8010736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801073a:	bf18      	it	ne
 801073c:	4293      	cmpne	r3, r2
 801073e:	d04a      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010740:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010744:	4293      	cmp	r3, r2
 8010746:	d046      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801074c:	4293      	cmp	r3, r2
 801074e:	d042      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010754:	4293      	cmp	r3, r2
 8010756:	d03e      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010758:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801075c:	4293      	cmp	r3, r2
 801075e:	d03a      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010760:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8010764:	4293      	cmp	r3, r2
 8010766:	d036      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
 8010768:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801076c:	4293      	cmp	r3, r2
 801076e:	d032      	beq.n	80107d6 <HAL_TIMEx_PWMN_Start_DMA+0x1d4>
      __HAL_TIM_ENABLE(htim);
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	f042 0201 	orr.w	r2, r2, #1
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	2000      	movs	r0, #0
 801077a:	e03d      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 801077c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801077e:	4924      	ldr	r1, [pc, #144]	; (8010810 <HAL_TIMEx_PWMN_Start_DMA+0x20e>)
 8010780:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010782:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010784:	4923      	ldr	r1, [pc, #140]	; (8010814 <HAL_TIMEx_PWMN_Start_DMA+0x212>)
 8010786:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8010788:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801078a:	4923      	ldr	r1, [pc, #140]	; (8010818 <HAL_TIMEx_PWMN_Start_DMA+0x216>)
 801078c:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 801078e:	6822      	ldr	r2, [r4, #0]
 8010790:	3238      	adds	r2, #56	; 0x38
 8010792:	4661      	mov	r1, ip
 8010794:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010796:	f7f5 fb95 	bl	8005ec4 <HAL_DMA_Start_IT>
 801079a:	2800      	cmp	r0, #0
 801079c:	d131      	bne.n	8010802 <HAL_TIMEx_PWMN_Start_DMA+0x200>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801079e:	6822      	ldr	r2, [r4, #0]
 80107a0:	68d3      	ldr	r3, [r2, #12]
 80107a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80107a6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80107a8:	e7b9      	b.n	801071e <HAL_TIMEx_PWMN_Start_DMA+0x11c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80107aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107ac:	4918      	ldr	r1, [pc, #96]	; (8010810 <HAL_TIMEx_PWMN_Start_DMA+0x20e>)
 80107ae:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107b2:	4918      	ldr	r1, [pc, #96]	; (8010814 <HAL_TIMEx_PWMN_Start_DMA+0x212>)
 80107b4:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80107b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107b8:	4917      	ldr	r1, [pc, #92]	; (8010818 <HAL_TIMEx_PWMN_Start_DMA+0x216>)
 80107ba:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80107bc:	6822      	ldr	r2, [r4, #0]
 80107be:	323c      	adds	r2, #60	; 0x3c
 80107c0:	4661      	mov	r1, ip
 80107c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80107c4:	f7f5 fb7e 	bl	8005ec4 <HAL_DMA_Start_IT>
 80107c8:	b9e8      	cbnz	r0, 8010806 <HAL_TIMEx_PWMN_Start_DMA+0x204>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80107ca:	6822      	ldr	r2, [r4, #0]
 80107cc:	68d3      	ldr	r3, [r2, #12]
 80107ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80107d2:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80107d4:	e7a3      	b.n	801071e <HAL_TIMEx_PWMN_Start_DMA+0x11c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107d6:	6899      	ldr	r1, [r3, #8]
 80107d8:	4a11      	ldr	r2, [pc, #68]	; (8010820 <HAL_TIMEx_PWMN_Start_DMA+0x21e>)
 80107da:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107dc:	2a06      	cmp	r2, #6
 80107de:	bf18      	it	ne
 80107e0:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 80107e4:	d011      	beq.n	801080a <HAL_TIMEx_PWMN_Start_DMA+0x208>
        __HAL_TIM_ENABLE(htim);
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	f042 0201 	orr.w	r2, r2, #1
 80107ec:	601a      	str	r2, [r3, #0]
 80107ee:	2000      	movs	r0, #0
 80107f0:	e002      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
    return HAL_BUSY;
 80107f2:	2002      	movs	r0, #2
 80107f4:	e000      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
    return HAL_ERROR;
 80107f6:	2001      	movs	r0, #1
}
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80107fa:	2001      	movs	r0, #1
 80107fc:	e7fc      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
        return HAL_ERROR;
 80107fe:	2001      	movs	r0, #1
 8010800:	e7fa      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
        return HAL_ERROR;
 8010802:	2001      	movs	r0, #1
 8010804:	e7f8      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
        return HAL_ERROR;
 8010806:	2001      	movs	r0, #1
 8010808:	e7f6      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
 801080a:	2000      	movs	r0, #0
 801080c:	e7f4      	b.n	80107f8 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
 801080e:	bf00      	nop
 8010810:	0800f72f 	.word	0x0800f72f
 8010814:	0800c353 	.word	0x0800c353
 8010818:	0800f6eb 	.word	0x0800f6eb
 801081c:	40010000 	.word	0x40010000
 8010820:	00010007 	.word	0x00010007

08010824 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	4605      	mov	r5, r0
 8010828:	460c      	mov	r4, r1
  switch (Channel)
 801082a:	2904      	cmp	r1, #4
 801082c:	d035      	beq.n	801089a <HAL_TIMEx_PWMN_Stop_DMA+0x76>
 801082e:	2908      	cmp	r1, #8
 8010830:	d03c      	beq.n	80108ac <HAL_TIMEx_PWMN_Stop_DMA+0x88>
 8010832:	b109      	cbz	r1, 8010838 <HAL_TIMEx_PWMN_Stop_DMA+0x14>
 8010834:	2001      	movs	r0, #1
}
 8010836:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010838:	6802      	ldr	r2, [r0, #0]
 801083a:	68d3      	ldr	r3, [r2, #12]
 801083c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010840:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010842:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010844:	f7f5 fe2a 	bl	800649c <HAL_DMA_Abort_IT>
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010848:	2200      	movs	r2, #0
 801084a:	4621      	mov	r1, r4
 801084c:	6828      	ldr	r0, [r5, #0]
 801084e:	f7fe ff3d 	bl	800f6cc <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_DISABLE(htim);
 8010852:	682b      	ldr	r3, [r5, #0]
 8010854:	6a19      	ldr	r1, [r3, #32]
 8010856:	f241 1211 	movw	r2, #4369	; 0x1111
 801085a:	4211      	tst	r1, r2
 801085c:	d108      	bne.n	8010870 <HAL_TIMEx_PWMN_Stop_DMA+0x4c>
 801085e:	6a19      	ldr	r1, [r3, #32]
 8010860:	f240 4244 	movw	r2, #1092	; 0x444
 8010864:	4211      	tst	r1, r2
 8010866:	d103      	bne.n	8010870 <HAL_TIMEx_PWMN_Stop_DMA+0x4c>
 8010868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801086a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801086e:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	6a19      	ldr	r1, [r3, #32]
 8010874:	f241 1211 	movw	r2, #4369	; 0x1111
 8010878:	4211      	tst	r1, r2
 801087a:	d108      	bne.n	801088e <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
 801087c:	6a19      	ldr	r1, [r3, #32]
 801087e:	f240 4244 	movw	r2, #1092	; 0x444
 8010882:	4211      	tst	r1, r2
 8010884:	d103      	bne.n	801088e <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
 8010886:	681a      	ldr	r2, [r3, #0]
 8010888:	f022 0201 	bic.w	r2, r2, #1
 801088c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801088e:	b9b4      	cbnz	r4, 80108be <HAL_TIMEx_PWMN_Stop_DMA+0x9a>
 8010890:	2301      	movs	r3, #1
 8010892:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8010896:	2000      	movs	r0, #0
 8010898:	e7cd      	b.n	8010836 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 801089a:	6802      	ldr	r2, [r0, #0]
 801089c:	68d3      	ldr	r3, [r2, #12]
 801089e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80108a2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80108a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80108a6:	f7f5 fdf9 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80108aa:	e7cd      	b.n	8010848 <HAL_TIMEx_PWMN_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80108ac:	6802      	ldr	r2, [r0, #0]
 80108ae:	68d3      	ldr	r3, [r2, #12]
 80108b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80108b4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80108b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80108b8:	f7f5 fdf0 	bl	800649c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80108bc:	e7c4      	b.n	8010848 <HAL_TIMEx_PWMN_Stop_DMA+0x24>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80108be:	2c04      	cmp	r4, #4
 80108c0:	d006      	beq.n	80108d0 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 80108c2:	2c08      	cmp	r4, #8
 80108c4:	d009      	beq.n	80108da <HAL_TIMEx_PWMN_Stop_DMA+0xb6>
 80108c6:	2301      	movs	r3, #1
 80108c8:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 80108cc:	2000      	movs	r0, #0
 80108ce:	e7b2      	b.n	8010836 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
 80108d0:	2301      	movs	r3, #1
 80108d2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 80108d6:	2000      	movs	r0, #0
 80108d8:	e7ad      	b.n	8010836 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
 80108da:	2301      	movs	r3, #1
 80108dc:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
 80108e0:	2000      	movs	r0, #0
 80108e2:	e7a8      	b.n	8010836 <HAL_TIMEx_PWMN_Stop_DMA+0x12>

080108e4 <HAL_TIMEx_OnePulseN_Start>:
{
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 80108e8:	468e      	mov	lr, r1
 80108ea:	bb91      	cbnz	r1, 8010952 <HAL_TIMEx_OnePulseN_Start+0x6e>
 80108ec:	2504      	movs	r5, #4
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80108ee:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 80108f2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80108f4:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80108f8:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80108fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80108fe:	fa5f fc83 	uxtb.w	ip, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010902:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010906:	b2db      	uxtb	r3, r3
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010908:	2a01      	cmp	r2, #1
 801090a:	bf08      	it	eq
 801090c:	2801      	cmpeq	r0, #1
 801090e:	d122      	bne.n	8010956 <HAL_TIMEx_OnePulseN_Start+0x72>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010910:	3b01      	subs	r3, #1
 8010912:	bf18      	it	ne
 8010914:	2301      	movne	r3, #1
 8010916:	f1bc 0f01 	cmp.w	ip, #1
 801091a:	d11e      	bne.n	801095a <HAL_TIMEx_OnePulseN_Start+0x76>
 801091c:	b9eb      	cbnz	r3, 801095a <HAL_TIMEx_OnePulseN_Start+0x76>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801091e:	2302      	movs	r3, #2
 8010920:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010924:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010928:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801092c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8010930:	2204      	movs	r2, #4
 8010932:	4671      	mov	r1, lr
 8010934:	6820      	ldr	r0, [r4, #0]
 8010936:	f7fe fec9 	bl	800f6cc <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 801093a:	2201      	movs	r2, #1
 801093c:	4629      	mov	r1, r5
 801093e:	6820      	ldr	r0, [r4, #0]
 8010940:	f7fc fcce 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010944:	6822      	ldr	r2, [r4, #0]
 8010946:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801094c:	6453      	str	r3, [r2, #68]	; 0x44
  return HAL_OK;
 801094e:	2000      	movs	r0, #0
 8010950:	e002      	b.n	8010958 <HAL_TIMEx_OnePulseN_Start+0x74>
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8010952:	2500      	movs	r5, #0
 8010954:	e7cb      	b.n	80108ee <HAL_TIMEx_OnePulseN_Start+0xa>
    return HAL_ERROR;
 8010956:	2001      	movs	r0, #1
}
 8010958:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801095a:	2001      	movs	r0, #1
 801095c:	e7fc      	b.n	8010958 <HAL_TIMEx_OnePulseN_Start+0x74>

0801095e <HAL_TIMEx_OnePulseN_Stop>:
{
 801095e:	b538      	push	{r3, r4, r5, lr}
 8010960:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8010962:	2900      	cmp	r1, #0
 8010964:	d132      	bne.n	80109cc <HAL_TIMEx_OnePulseN_Stop+0x6e>
 8010966:	2504      	movs	r5, #4
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8010968:	2200      	movs	r2, #0
 801096a:	6820      	ldr	r0, [r4, #0]
 801096c:	f7fe feae 	bl	800f6cc <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8010970:	2200      	movs	r2, #0
 8010972:	4629      	mov	r1, r5
 8010974:	6820      	ldr	r0, [r4, #0]
 8010976:	f7fc fcb3 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	6a19      	ldr	r1, [r3, #32]
 801097e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010982:	4211      	tst	r1, r2
 8010984:	d108      	bne.n	8010998 <HAL_TIMEx_OnePulseN_Stop+0x3a>
 8010986:	6a19      	ldr	r1, [r3, #32]
 8010988:	f240 4244 	movw	r2, #1092	; 0x444
 801098c:	4211      	tst	r1, r2
 801098e:	d103      	bne.n	8010998 <HAL_TIMEx_OnePulseN_Stop+0x3a>
 8010990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010996:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010998:	6823      	ldr	r3, [r4, #0]
 801099a:	6a19      	ldr	r1, [r3, #32]
 801099c:	f241 1211 	movw	r2, #4369	; 0x1111
 80109a0:	4211      	tst	r1, r2
 80109a2:	d108      	bne.n	80109b6 <HAL_TIMEx_OnePulseN_Stop+0x58>
 80109a4:	6a19      	ldr	r1, [r3, #32]
 80109a6:	f240 4244 	movw	r2, #1092	; 0x444
 80109aa:	4211      	tst	r1, r2
 80109ac:	d103      	bne.n	80109b6 <HAL_TIMEx_OnePulseN_Stop+0x58>
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	f022 0201 	bic.w	r2, r2, #1
 80109b4:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80109b6:	2301      	movs	r3, #1
 80109b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80109bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80109c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80109c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80109c8:	2000      	movs	r0, #0
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 80109cc:	2500      	movs	r5, #0
 80109ce:	e7cb      	b.n	8010968 <HAL_TIMEx_OnePulseN_Stop+0xa>

080109d0 <HAL_TIMEx_OnePulseN_Start_IT>:
{
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 80109d4:	468e      	mov	lr, r1
 80109d6:	2900      	cmp	r1, #0
 80109d8:	d13c      	bne.n	8010a54 <HAL_TIMEx_OnePulseN_Start_IT+0x84>
 80109da:	2504      	movs	r5, #4
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80109dc:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 80109e0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80109e2:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80109e6:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80109e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80109ec:	fa5f fc83 	uxtb.w	ip, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80109f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80109f4:	b2db      	uxtb	r3, r3
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80109f6:	2a01      	cmp	r2, #1
 80109f8:	bf08      	it	eq
 80109fa:	2801      	cmpeq	r0, #1
 80109fc:	d12c      	bne.n	8010a58 <HAL_TIMEx_OnePulseN_Start_IT+0x88>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80109fe:	3b01      	subs	r3, #1
 8010a00:	bf18      	it	ne
 8010a02:	2301      	movne	r3, #1
 8010a04:	f1bc 0f01 	cmp.w	ip, #1
 8010a08:	d128      	bne.n	8010a5c <HAL_TIMEx_OnePulseN_Start_IT+0x8c>
 8010a0a:	bb3b      	cbnz	r3, 8010a5c <HAL_TIMEx_OnePulseN_Start_IT+0x8c>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a0c:	2302      	movs	r3, #2
 8010a0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010a1e:	6822      	ldr	r2, [r4, #0]
 8010a20:	68d3      	ldr	r3, [r2, #12]
 8010a22:	f043 0302 	orr.w	r3, r3, #2
 8010a26:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	68d3      	ldr	r3, [r2, #12]
 8010a2c:	f043 0304 	orr.w	r3, r3, #4
 8010a30:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8010a32:	2204      	movs	r2, #4
 8010a34:	4671      	mov	r1, lr
 8010a36:	6820      	ldr	r0, [r4, #0]
 8010a38:	f7fe fe48 	bl	800f6cc <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	4629      	mov	r1, r5
 8010a40:	6820      	ldr	r0, [r4, #0]
 8010a42:	f7fc fc4d 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8010a46:	6822      	ldr	r2, [r4, #0]
 8010a48:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a4e:	6453      	str	r3, [r2, #68]	; 0x44
  return HAL_OK;
 8010a50:	2000      	movs	r0, #0
 8010a52:	e002      	b.n	8010a5a <HAL_TIMEx_OnePulseN_Start_IT+0x8a>
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8010a54:	2500      	movs	r5, #0
 8010a56:	e7c1      	b.n	80109dc <HAL_TIMEx_OnePulseN_Start_IT+0xc>
    return HAL_ERROR;
 8010a58:	2001      	movs	r0, #1
}
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	e7fc      	b.n	8010a5a <HAL_TIMEx_OnePulseN_Start_IT+0x8a>

08010a60 <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 8010a60:	b538      	push	{r3, r4, r5, lr}
 8010a62:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8010a64:	2900      	cmp	r1, #0
 8010a66:	d13c      	bne.n	8010ae2 <HAL_TIMEx_OnePulseN_Stop_IT+0x82>
 8010a68:	2504      	movs	r5, #4
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010a6a:	6822      	ldr	r2, [r4, #0]
 8010a6c:	68d3      	ldr	r3, [r2, #12]
 8010a6e:	f023 0302 	bic.w	r3, r3, #2
 8010a72:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010a74:	6822      	ldr	r2, [r4, #0]
 8010a76:	68d3      	ldr	r3, [r2, #12]
 8010a78:	f023 0304 	bic.w	r3, r3, #4
 8010a7c:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8010a7e:	2200      	movs	r2, #0
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	f7fe fe23 	bl	800f6cc <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8010a86:	2200      	movs	r2, #0
 8010a88:	4629      	mov	r1, r5
 8010a8a:	6820      	ldr	r0, [r4, #0]
 8010a8c:	f7fc fc28 	bl	800d2e0 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	6a19      	ldr	r1, [r3, #32]
 8010a94:	f241 1211 	movw	r2, #4369	; 0x1111
 8010a98:	4211      	tst	r1, r2
 8010a9a:	d108      	bne.n	8010aae <HAL_TIMEx_OnePulseN_Stop_IT+0x4e>
 8010a9c:	6a19      	ldr	r1, [r3, #32]
 8010a9e:	f240 4244 	movw	r2, #1092	; 0x444
 8010aa2:	4211      	tst	r1, r2
 8010aa4:	d103      	bne.n	8010aae <HAL_TIMEx_OnePulseN_Stop_IT+0x4e>
 8010aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010aac:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	6a19      	ldr	r1, [r3, #32]
 8010ab2:	f241 1211 	movw	r2, #4369	; 0x1111
 8010ab6:	4211      	tst	r1, r2
 8010ab8:	d108      	bne.n	8010acc <HAL_TIMEx_OnePulseN_Stop_IT+0x6c>
 8010aba:	6a19      	ldr	r1, [r3, #32]
 8010abc:	f240 4244 	movw	r2, #1092	; 0x444
 8010ac0:	4211      	tst	r1, r2
 8010ac2:	d103      	bne.n	8010acc <HAL_TIMEx_OnePulseN_Stop_IT+0x6c>
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	f022 0201 	bic.w	r2, r2, #1
 8010aca:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010acc:	2301      	movs	r3, #1
 8010ace:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010ad2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ad6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010ade:	2000      	movs	r0, #0
 8010ae0:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	e7c1      	b.n	8010a6a <HAL_TIMEx_OnePulseN_Stop_IT+0xa>

08010ae6 <HAL_TIMEx_ConfigCommutEvent>:
  __HAL_LOCK(htim);
 8010ae6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d03e      	beq.n	8010b6c <HAL_TIMEx_ConfigCommutEvent+0x86>
{
 8010aee:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8010af0:	2301      	movs	r3, #1
 8010af2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 8010af6:	2910      	cmp	r1, #16
 8010af8:	bf18      	it	ne
 8010afa:	2900      	cmpne	r1, #0
 8010afc:	d00f      	beq.n	8010b1e <HAL_TIMEx_ConfigCommutEvent+0x38>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 8010afe:	2930      	cmp	r1, #48	; 0x30
 8010b00:	bf14      	ite	ne
 8010b02:	2300      	movne	r3, #0
 8010b04:	2301      	moveq	r3, #1
 8010b06:	2920      	cmp	r1, #32
 8010b08:	d009      	beq.n	8010b1e <HAL_TIMEx_ConfigCommutEvent+0x38>
 8010b0a:	b943      	cbnz	r3, 8010b1e <HAL_TIMEx_ConfigCommutEvent+0x38>
      (InputTrigger == TIM_TS_ITR12)  || (InputTrigger == TIM_TS_ITR13))
 8010b0c:	4b18      	ldr	r3, [pc, #96]	; (8010b70 <HAL_TIMEx_ConfigCommutEvent+0x8a>)
 8010b0e:	4299      	cmp	r1, r3
 8010b10:	bf14      	ite	ne
 8010b12:	2300      	movne	r3, #0
 8010b14:	2301      	moveq	r3, #1
 8010b16:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010b1a:	d000      	beq.n	8010b1e <HAL_TIMEx_ConfigCommutEvent+0x38>
 8010b1c:	b143      	cbz	r3, 8010b30 <HAL_TIMEx_ConfigCommutEvent+0x4a>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8010b1e:	6804      	ldr	r4, [r0, #0]
 8010b20:	68a5      	ldr	r5, [r4, #8]
 8010b22:	4b14      	ldr	r3, [pc, #80]	; (8010b74 <HAL_TIMEx_ConfigCommutEvent+0x8e>)
 8010b24:	402b      	ands	r3, r5
 8010b26:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8010b28:	6804      	ldr	r4, [r0, #0]
 8010b2a:	68a3      	ldr	r3, [r4, #8]
 8010b2c:	4319      	orrs	r1, r3
 8010b2e:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8010b30:	6801      	ldr	r1, [r0, #0]
 8010b32:	684b      	ldr	r3, [r1, #4]
 8010b34:	f043 0301 	orr.w	r3, r3, #1
 8010b38:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8010b3a:	6801      	ldr	r1, [r0, #0]
 8010b3c:	684b      	ldr	r3, [r1, #4]
 8010b3e:	f023 0304 	bic.w	r3, r3, #4
 8010b42:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8010b44:	6801      	ldr	r1, [r0, #0]
 8010b46:	684b      	ldr	r3, [r1, #4]
 8010b48:	431a      	orrs	r2, r3
 8010b4a:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8010b4c:	6802      	ldr	r2, [r0, #0]
 8010b4e:	68d3      	ldr	r3, [r2, #12]
 8010b50:	f023 0320 	bic.w	r3, r3, #32
 8010b54:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8010b56:	6802      	ldr	r2, [r0, #0]
 8010b58:	68d3      	ldr	r3, [r2, #12]
 8010b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b5e:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8010b60:	2300      	movs	r3, #0
 8010b62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010b66:	4618      	mov	r0, r3
}
 8010b68:	bc30      	pop	{r4, r5}
 8010b6a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010b6c:	2002      	movs	r0, #2
}
 8010b6e:	4770      	bx	lr
 8010b70:	00200010 	.word	0x00200010
 8010b74:	ffcfff8f 	.word	0xffcfff8f

08010b78 <HAL_TIMEx_ConfigCommutEvent_IT>:
  __HAL_LOCK(htim);
 8010b78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d03e      	beq.n	8010bfe <HAL_TIMEx_ConfigCommutEvent_IT+0x86>
{
 8010b80:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8010b82:	2301      	movs	r3, #1
 8010b84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 8010b88:	2910      	cmp	r1, #16
 8010b8a:	bf18      	it	ne
 8010b8c:	2900      	cmpne	r1, #0
 8010b8e:	d00f      	beq.n	8010bb0 <HAL_TIMEx_ConfigCommutEvent_IT+0x38>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 8010b90:	2930      	cmp	r1, #48	; 0x30
 8010b92:	bf14      	ite	ne
 8010b94:	2300      	movne	r3, #0
 8010b96:	2301      	moveq	r3, #1
 8010b98:	2920      	cmp	r1, #32
 8010b9a:	d009      	beq.n	8010bb0 <HAL_TIMEx_ConfigCommutEvent_IT+0x38>
 8010b9c:	b943      	cbnz	r3, 8010bb0 <HAL_TIMEx_ConfigCommutEvent_IT+0x38>
      (InputTrigger == TIM_TS_ITR12)  || (InputTrigger == TIM_TS_ITR13))
 8010b9e:	4b19      	ldr	r3, [pc, #100]	; (8010c04 <HAL_TIMEx_ConfigCommutEvent_IT+0x8c>)
 8010ba0:	4299      	cmp	r1, r3
 8010ba2:	bf14      	ite	ne
 8010ba4:	2300      	movne	r3, #0
 8010ba6:	2301      	moveq	r3, #1
 8010ba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010bac:	d000      	beq.n	8010bb0 <HAL_TIMEx_ConfigCommutEvent_IT+0x38>
 8010bae:	b143      	cbz	r3, 8010bc2 <HAL_TIMEx_ConfigCommutEvent_IT+0x4a>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8010bb0:	6804      	ldr	r4, [r0, #0]
 8010bb2:	68a5      	ldr	r5, [r4, #8]
 8010bb4:	4b14      	ldr	r3, [pc, #80]	; (8010c08 <HAL_TIMEx_ConfigCommutEvent_IT+0x90>)
 8010bb6:	402b      	ands	r3, r5
 8010bb8:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8010bba:	6804      	ldr	r4, [r0, #0]
 8010bbc:	68a3      	ldr	r3, [r4, #8]
 8010bbe:	4319      	orrs	r1, r3
 8010bc0:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8010bc2:	6801      	ldr	r1, [r0, #0]
 8010bc4:	684b      	ldr	r3, [r1, #4]
 8010bc6:	f043 0301 	orr.w	r3, r3, #1
 8010bca:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8010bcc:	6801      	ldr	r1, [r0, #0]
 8010bce:	684b      	ldr	r3, [r1, #4]
 8010bd0:	f023 0304 	bic.w	r3, r3, #4
 8010bd4:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8010bd6:	6801      	ldr	r1, [r0, #0]
 8010bd8:	684b      	ldr	r3, [r1, #4]
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	604a      	str	r2, [r1, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8010bde:	6802      	ldr	r2, [r0, #0]
 8010be0:	68d3      	ldr	r3, [r2, #12]
 8010be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010be6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8010be8:	6802      	ldr	r2, [r0, #0]
 8010bea:	68d3      	ldr	r3, [r2, #12]
 8010bec:	f043 0320 	orr.w	r3, r3, #32
 8010bf0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010bf8:	4618      	mov	r0, r3
}
 8010bfa:	bc30      	pop	{r4, r5}
 8010bfc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010bfe:	2002      	movs	r0, #2
}
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	00200010 	.word	0x00200010
 8010c08:	ffcfff8f 	.word	0xffcfff8f

08010c0c <HAL_TIMEx_ConfigCommutEvent_DMA>:
  __HAL_LOCK(htim);
 8010c0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d047      	beq.n	8010ca4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x98>
{
 8010c14:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8010c16:	2301      	movs	r3, #1
 8010c18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0)  || (InputTrigger == TIM_TS_ITR1) ||
 8010c1c:	2910      	cmp	r1, #16
 8010c1e:	bf18      	it	ne
 8010c20:	2900      	cmpne	r1, #0
 8010c22:	d00f      	beq.n	8010c44 <HAL_TIMEx_ConfigCommutEvent_DMA+0x38>
      (InputTrigger == TIM_TS_ITR2)  || (InputTrigger == TIM_TS_ITR3) ||
 8010c24:	2930      	cmp	r1, #48	; 0x30
 8010c26:	bf14      	ite	ne
 8010c28:	2300      	movne	r3, #0
 8010c2a:	2301      	moveq	r3, #1
 8010c2c:	2920      	cmp	r1, #32
 8010c2e:	d009      	beq.n	8010c44 <HAL_TIMEx_ConfigCommutEvent_DMA+0x38>
 8010c30:	b943      	cbnz	r3, 8010c44 <HAL_TIMEx_ConfigCommutEvent_DMA+0x38>
      (InputTrigger == TIM_TS_ITR12)  || (InputTrigger == TIM_TS_ITR13))
 8010c32:	4b1d      	ldr	r3, [pc, #116]	; (8010ca8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x9c>)
 8010c34:	4299      	cmp	r1, r3
 8010c36:	bf14      	ite	ne
 8010c38:	2300      	movne	r3, #0
 8010c3a:	2301      	moveq	r3, #1
 8010c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010c40:	d000      	beq.n	8010c44 <HAL_TIMEx_ConfigCommutEvent_DMA+0x38>
 8010c42:	b143      	cbz	r3, 8010c56 <HAL_TIMEx_ConfigCommutEvent_DMA+0x4a>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8010c44:	6804      	ldr	r4, [r0, #0]
 8010c46:	68a5      	ldr	r5, [r4, #8]
 8010c48:	4b18      	ldr	r3, [pc, #96]	; (8010cac <HAL_TIMEx_ConfigCommutEvent_DMA+0xa0>)
 8010c4a:	402b      	ands	r3, r5
 8010c4c:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8010c4e:	6804      	ldr	r4, [r0, #0]
 8010c50:	68a3      	ldr	r3, [r4, #8]
 8010c52:	4319      	orrs	r1, r3
 8010c54:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8010c56:	6801      	ldr	r1, [r0, #0]
 8010c58:	684b      	ldr	r3, [r1, #4]
 8010c5a:	f043 0301 	orr.w	r3, r3, #1
 8010c5e:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8010c60:	6801      	ldr	r1, [r0, #0]
 8010c62:	684b      	ldr	r3, [r1, #4]
 8010c64:	f023 0304 	bic.w	r3, r3, #4
 8010c68:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8010c6a:	6801      	ldr	r1, [r0, #0]
 8010c6c:	684b      	ldr	r3, [r1, #4]
 8010c6e:	431a      	orrs	r2, r3
 8010c70:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8010c72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c74:	4a0e      	ldr	r2, [pc, #56]	; (8010cb0 <HAL_TIMEx_ConfigCommutEvent_DMA+0xa4>)
 8010c76:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 8010c78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c7a:	4a0e      	ldr	r2, [pc, #56]	; (8010cb4 <HAL_TIMEx_ConfigCommutEvent_DMA+0xa8>)
 8010c7c:	641a      	str	r2, [r3, #64]	; 0x40
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8010c7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c80:	4a0d      	ldr	r2, [pc, #52]	; (8010cb8 <HAL_TIMEx_ConfigCommutEvent_DMA+0xac>)
 8010c82:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8010c84:	6802      	ldr	r2, [r0, #0]
 8010c86:	68d3      	ldr	r3, [r2, #12]
 8010c88:	f023 0320 	bic.w	r3, r3, #32
 8010c8c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8010c8e:	6802      	ldr	r2, [r0, #0]
 8010c90:	68d3      	ldr	r3, [r2, #12]
 8010c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010c96:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010c9e:	4618      	mov	r0, r3
}
 8010ca0:	bc30      	pop	{r4, r5}
 8010ca2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010ca4:	2002      	movs	r0, #2
}
 8010ca6:	4770      	bx	lr
 8010ca8:	00200010 	.word	0x00200010
 8010cac:	ffcfff8f 	.word	0xffcfff8f
 8010cb0:	08010f9b 	.word	0x08010f9b
 8010cb4:	08010fad 	.word	0x08010fad
 8010cb8:	0800c551 	.word	0x0800c551

08010cbc <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8010cbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d045      	beq.n	8010d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 8010cc4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010ccc:	2302      	movs	r3, #2
 8010cce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8010cd2:	6803      	ldr	r3, [r0, #0]
 8010cd4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8010cd6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010cd8:	4e1e      	ldr	r6, [pc, #120]	; (8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8010cda:	4d1f      	ldr	r5, [pc, #124]	; (8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8010cdc:	42ab      	cmp	r3, r5
 8010cde:	bf18      	it	ne
 8010ce0:	42b3      	cmpne	r3, r6
 8010ce2:	d103      	bne.n	8010cec <HAL_TIMEx_MasterConfigSynchronization+0x30>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ce4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ce8:	684d      	ldr	r5, [r1, #4]
 8010cea:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8010cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010cf0:	680d      	ldr	r5, [r1, #0]
 8010cf2:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8010cf4:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cf6:	6803      	ldr	r3, [r0, #0]
 8010cf8:	4a16      	ldr	r2, [pc, #88]	; (8010d54 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8010cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cfe:	bf18      	it	ne
 8010d00:	4293      	cmpne	r3, r2
 8010d02:	d017      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d013      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d00f      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d00b      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d007      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d24:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d003      	beq.n	8010d34 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8010d2c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d104      	bne.n	8010d3e <HAL_TIMEx_MasterConfigSynchronization+0x82>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010d34:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010d38:	688a      	ldr	r2, [r1, #8]
 8010d3a:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8010d3c:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010d44:	2300      	movs	r3, #0
 8010d46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010d4a:	4618      	mov	r0, r3
}
 8010d4c:	bc70      	pop	{r4, r5, r6}
 8010d4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010d50:	2002      	movs	r0, #2
}
 8010d52:	4770      	bx	lr
 8010d54:	40010000 	.word	0x40010000
 8010d58:	40010400 	.word	0x40010400

08010d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8010d5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d03c      	beq.n	8010dde <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8010d64:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8010d66:	2301      	movs	r3, #1
 8010d68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010d6c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d72:	688a      	ldr	r2, [r1, #8]
 8010d74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d7a:	684a      	ldr	r2, [r1, #4]
 8010d7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d82:	680a      	ldr	r2, [r1, #0]
 8010d84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d8a:	690a      	ldr	r2, [r1, #16]
 8010d8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d92:	694a      	ldr	r2, [r1, #20]
 8010d94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d9a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8010d9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010d9e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8010da2:	698a      	ldr	r2, [r1, #24]
 8010da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010da8:	6802      	ldr	r2, [r0, #0]
 8010daa:	4d0e      	ldr	r5, [pc, #56]	; (8010de4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8010dac:	4c0e      	ldr	r4, [pc, #56]	; (8010de8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8010dae:	42a2      	cmp	r2, r4
 8010db0:	bf18      	it	ne
 8010db2:	42aa      	cmpne	r2, r5
 8010db4:	d10c      	bne.n	8010dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010dba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8010dbc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010dc4:	69cc      	ldr	r4, [r1, #28]
 8010dc6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010dc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8010dcc:	6a09      	ldr	r1, [r1, #32]
 8010dce:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8010dd0:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010dd8:	4618      	mov	r0, r3
}
 8010dda:	bc30      	pop	{r4, r5}
 8010ddc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010dde:	2002      	movs	r0, #2
}
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	40010000 	.word	0x40010000
 8010de8:	40010400 	.word	0x40010400

08010dec <HAL_TIMEx_ConfigBreakInput>:
{
 8010dec:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8010dee:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8010df2:	2801      	cmp	r0, #1
 8010df4:	d061      	beq.n	8010eba <HAL_TIMEx_ConfigBreakInput+0xce>
{
 8010df6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8010df8:	2001      	movs	r0, #1
 8010dfa:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 8010dfe:	6814      	ldr	r4, [r2, #0]
 8010e00:	1e60      	subs	r0, r4, #1
 8010e02:	2807      	cmp	r0, #7
 8010e04:	d822      	bhi.n	8010e4c <HAL_TIMEx_ConfigBreakInput+0x60>
 8010e06:	e8df f000 	tbb	[pc, r0]
 8010e0a:	2704      	.short	0x2704
 8010e0c:	21210b21 	.word	0x21210b21
 8010e10:	1a21      	.short	0x1a21
 8010e12:	4626      	mov	r6, r4
 8010e14:	f04f 0c09 	mov.w	ip, #9
 8010e18:	2700      	movs	r7, #0
 8010e1a:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8010e1e:	e005      	b.n	8010e2c <HAL_TIMEx_ConfigBreakInput+0x40>
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8010e20:	4626      	mov	r6, r4
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8010e22:	f04f 0c0b 	mov.w	ip, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8010e26:	2702      	movs	r7, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8010e28:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  switch (BreakInput)
 8010e2c:	2901      	cmp	r1, #1
 8010e2e:	d01a      	beq.n	8010e66 <HAL_TIMEx_ConfigBreakInput+0x7a>
 8010e30:	2902      	cmp	r1, #2
 8010e32:	d02d      	beq.n	8010e90 <HAL_TIMEx_ConfigBreakInput+0xa4>
 8010e34:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010e36:	2200      	movs	r2, #0
 8010e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8010e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 8010e3e:	4627      	mov	r7, r4
      bkin_polarity_bitpos = 0U;
 8010e40:	f04f 0c00 	mov.w	ip, #0
      bkin_polarity_mask = 0U;
 8010e44:	46e6      	mov	lr, ip
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 8010e46:	f44f 7680 	mov.w	r6, #256	; 0x100
      break;
 8010e4a:	e7ef      	b.n	8010e2c <HAL_TIMEx_ConfigBreakInput+0x40>
      bkin_polarity_bitpos = 0U;
 8010e4c:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = 0U;
 8010e50:	4667      	mov	r7, ip
      bkin_polarity_mask = 0U;
 8010e52:	46e6      	mov	lr, ip
      bkin_enable_mask = 0U;
 8010e54:	4666      	mov	r6, ip
      break;
 8010e56:	e7e9      	b.n	8010e2c <HAL_TIMEx_ConfigBreakInput+0x40>
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8010e58:	4626      	mov	r6, r4
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8010e5a:	f04f 0c0a 	mov.w	ip, #10
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8010e5e:	2701      	movs	r7, #1
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8010e60:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8010e64:	e7e2      	b.n	8010e2c <HAL_TIMEx_ConfigBreakInput+0x40>
      tmporx = htim->Instance->AF1;
 8010e66:	681d      	ldr	r5, [r3, #0]
 8010e68:	6e28      	ldr	r0, [r5, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8010e6a:	6851      	ldr	r1, [r2, #4]
 8010e6c:	40b9      	lsls	r1, r7
 8010e6e:	4041      	eors	r1, r0
 8010e70:	4031      	ands	r1, r6
 8010e72:	4041      	eors	r1, r0
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8010e74:	2c08      	cmp	r4, #8
 8010e76:	d008      	beq.n	8010e8a <HAL_TIMEx_ConfigBreakInput+0x9e>
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8010e78:	6892      	ldr	r2, [r2, #8]
 8010e7a:	fa02 fc0c 	lsl.w	ip, r2, ip
 8010e7e:	ea8c 0c01 	eor.w	ip, ip, r1
 8010e82:	ea0c 0e0e 	and.w	lr, ip, lr
 8010e86:	ea81 010e 	eor.w	r1, r1, lr
      htim->Instance->AF1 = tmporx;
 8010e8a:	6629      	str	r1, [r5, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8010e8c:	2000      	movs	r0, #0
      break;
 8010e8e:	e7d2      	b.n	8010e36 <HAL_TIMEx_ConfigBreakInput+0x4a>
      tmporx = htim->Instance->AF2;
 8010e90:	681d      	ldr	r5, [r3, #0]
 8010e92:	6e68      	ldr	r0, [r5, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8010e94:	6851      	ldr	r1, [r2, #4]
 8010e96:	40b9      	lsls	r1, r7
 8010e98:	4041      	eors	r1, r0
 8010e9a:	4031      	ands	r1, r6
 8010e9c:	4041      	eors	r1, r0
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8010e9e:	2c08      	cmp	r4, #8
 8010ea0:	d008      	beq.n	8010eb4 <HAL_TIMEx_ConfigBreakInput+0xc8>
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8010ea2:	6892      	ldr	r2, [r2, #8]
 8010ea4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8010ea8:	ea8c 0c01 	eor.w	ip, ip, r1
 8010eac:	ea0c 0e0e 	and.w	lr, ip, lr
 8010eb0:	ea81 010e 	eor.w	r1, r1, lr
      htim->Instance->AF2 = tmporx;
 8010eb4:	6669      	str	r1, [r5, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8010eb6:	2000      	movs	r0, #0
      break;
 8010eb8:	e7bd      	b.n	8010e36 <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8010eba:	2002      	movs	r0, #2
}
 8010ebc:	4770      	bx	lr

08010ebe <HAL_TIMEx_RemapConfig>:
  __HAL_LOCK(htim);
 8010ebe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d00d      	beq.n	8010ee2 <HAL_TIMEx_RemapConfig+0x24>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8010ecc:	6802      	ldr	r2, [r0, #0]
 8010ece:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8010ed0:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 8010ed4:	4319      	orrs	r1, r3
 8010ed6:	6611      	str	r1, [r2, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010ede:	4618      	mov	r0, r3
 8010ee0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010ee2:	2002      	movs	r0, #2
}
 8010ee4:	4770      	bx	lr

08010ee6 <HAL_TIMEx_TISelection>:
{
 8010ee6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8010ee8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8010eec:	2801      	cmp	r0, #1
 8010eee:	d032      	beq.n	8010f56 <HAL_TIMEx_TISelection+0x70>
 8010ef0:	2001      	movs	r0, #1
 8010ef2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8010ef6:	2a0c      	cmp	r2, #12
 8010ef8:	d828      	bhi.n	8010f4c <HAL_TIMEx_TISelection+0x66>
 8010efa:	e8df f002 	tbb	[pc, r2]
 8010efe:	2707      	.short	0x2707
 8010f00:	270f2727 	.word	0x270f2727
 8010f04:	27172727 	.word	0x27172727
 8010f08:	2727      	.short	0x2727
 8010f0a:	1f          	.byte	0x1f
 8010f0b:	00          	.byte	0x00
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8010f0c:	6818      	ldr	r0, [r3, #0]
 8010f0e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8010f10:	f022 020f 	bic.w	r2, r2, #15
 8010f14:	4311      	orrs	r1, r2
 8010f16:	6681      	str	r1, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8010f18:	2000      	movs	r0, #0
      break;
 8010f1a:	e018      	b.n	8010f4e <HAL_TIMEx_TISelection+0x68>
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8010f1c:	6818      	ldr	r0, [r3, #0]
 8010f1e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8010f20:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8010f24:	4311      	orrs	r1, r2
 8010f26:	6681      	str	r1, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8010f28:	2000      	movs	r0, #0
      break;
 8010f2a:	e010      	b.n	8010f4e <HAL_TIMEx_TISelection+0x68>
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8010f30:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8010f34:	4311      	orrs	r1, r2
 8010f36:	6681      	str	r1, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8010f38:	2000      	movs	r0, #0
      break;
 8010f3a:	e008      	b.n	8010f4e <HAL_TIMEx_TISelection+0x68>
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8010f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010f44:	4311      	orrs	r1, r2
 8010f46:	6681      	str	r1, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8010f48:	2000      	movs	r0, #0
      break;
 8010f4a:	e000      	b.n	8010f4e <HAL_TIMEx_TISelection+0x68>
  switch (Channel)
 8010f4c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return status;
 8010f54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010f56:	2002      	movs	r0, #2
}
 8010f58:	4770      	bx	lr

08010f5a <HAL_TIMEx_GroupChannel5>:
  __HAL_LOCK(htim);
 8010f5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d018      	beq.n	8010f94 <HAL_TIMEx_GroupChannel5+0x3a>
{
 8010f62:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8010f64:	2201      	movs	r2, #1
 8010f66:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CCR5 &= ~(TIM_CCR5_GC5C3 | TIM_CCR5_GC5C2 | TIM_CCR5_GC5C1);
 8010f70:	6804      	ldr	r4, [r0, #0]
 8010f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f74:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8010f78:	65a3      	str	r3, [r4, #88]	; 0x58
  htim->Instance->CCR5 |= Channels;
 8010f7a:	6804      	ldr	r4, [r0, #0]
 8010f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f7e:	4319      	orrs	r1, r3
 8010f80:	65a1      	str	r1, [r4, #88]	; 0x58
  htim->State = HAL_TIM_STATE_READY;
 8010f82:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010f86:	2300      	movs	r3, #0
 8010f88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8010f8c:	4618      	mov	r0, r3
}
 8010f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f92:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010f94:	2002      	movs	r0, #2
}
 8010f96:	4770      	bx	lr

08010f98 <HAL_TIMEx_CommutCallback>:
}
 8010f98:	4770      	bx	lr

08010f9a <TIMEx_DMACommutationCplt>:
{
 8010f9a:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutCallback(htim);
 8010fa4:	f7ff fff8 	bl	8010f98 <HAL_TIMEx_CommutCallback>
}
 8010fa8:	bd08      	pop	{r3, pc}

08010faa <HAL_TIMEx_CommutHalfCpltCallback>:
}
 8010faa:	4770      	bx	lr

08010fac <TIMEx_DMACommutationHalfCplt>:
{
 8010fac:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8010fb6:	f7ff fff8 	bl	8010faa <HAL_TIMEx_CommutHalfCpltCallback>
}
 8010fba:	bd08      	pop	{r3, pc}

08010fbc <HAL_TIMEx_BreakCallback>:
}
 8010fbc:	4770      	bx	lr

08010fbe <HAL_TIMEx_Break2Callback>:
}
 8010fbe:	4770      	bx	lr

08010fc0 <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 8010fc0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8010fc4:	4770      	bx	lr

08010fc6 <HAL_TIMEx_GetChannelNState>:
  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 8010fc6:	b919      	cbnz	r1, 8010fd0 <HAL_TIMEx_GetChannelNState+0xa>
 8010fc8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8010fcc:	b2c0      	uxtb	r0, r0
 8010fce:	4770      	bx	lr
 8010fd0:	2904      	cmp	r1, #4
 8010fd2:	d005      	beq.n	8010fe0 <HAL_TIMEx_GetChannelNState+0x1a>
 8010fd4:	2908      	cmp	r1, #8
 8010fd6:	d007      	beq.n	8010fe8 <HAL_TIMEx_GetChannelNState+0x22>
 8010fd8:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 8010fdc:	b2c0      	uxtb	r0, r0
}
 8010fde:	4770      	bx	lr
  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 8010fe0:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8010fe4:	b2c0      	uxtb	r0, r0
 8010fe6:	4770      	bx	lr
 8010fe8:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 8010fec:	b2c0      	uxtb	r0, r0
 8010fee:	4770      	bx	lr

08010ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8010ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8010ff4:	f7ef f970 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010ff8:	480c      	ldr	r0, [pc, #48]	; (801102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010ffa:	490d      	ldr	r1, [pc, #52]	; (8011030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010ffc:	4a0d      	ldr	r2, [pc, #52]	; (8011034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011000:	e002      	b.n	8011008 <LoopCopyDataInit>

08011002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011006:	3304      	adds	r3, #4

08011008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801100c:	d3f9      	bcc.n	8011002 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801100e:	4a0a      	ldr	r2, [pc, #40]	; (8011038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011010:	4c0a      	ldr	r4, [pc, #40]	; (801103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8011012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011014:	e001      	b.n	801101a <LoopFillZerobss>

08011016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011018:	3204      	adds	r2, #4

0801101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801101c:	d3fb      	bcc.n	8011016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801101e:	f000 fb85 	bl	801172c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011022:	f7ef fd7f 	bl	8000b24 <main>
  bx  lr
 8011026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011028:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801102c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8011030:	24000380 	.word	0x24000380
  ldr r2, =_sidata
 8011034:	080117bc 	.word	0x080117bc
  ldr r2, =_sbss
 8011038:	24000380 	.word	0x24000380
  ldr r4, =_ebss
 801103c:	24000dac 	.word	0x24000dac

08011040 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011040:	e7fe      	b.n	8011040 <ADC3_IRQHandler>

08011042 <arm_biquad_cascade_df2T_f32>:
 8011042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011046:	7807      	ldrb	r7, [r0, #0]
 8011048:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 801104c:	6885      	ldr	r5, [r0, #8]
 801104e:	3514      	adds	r5, #20
 8011050:	6846      	ldr	r6, [r0, #4]
 8011052:	3608      	adds	r6, #8
 8011054:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8011058:	eb02 0b09 	add.w	fp, r2, r9
 801105c:	f003 080f 	and.w	r8, r3, #15
 8011060:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8011064:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8011068:	ed15 7a04 	vldr	s14, [r5, #-16]
 801106c:	ed55 6a03 	vldr	s13, [r5, #-12]
 8011070:	ed15 6a02 	vldr	s12, [r5, #-8]
 8011074:	ed55 5a01 	vldr	s11, [r5, #-4]
 8011078:	46b4      	mov	ip, r6
 801107a:	ed56 3a02 	vldr	s7, [r6, #-8]
 801107e:	ed16 4a01 	vldr	s8, [r6, #-4]
 8011082:	f1be 0f00 	cmp.w	lr, #0
 8011086:	f000 8195 	beq.w	80113b4 <arm_biquad_cascade_df2T_f32+0x372>
 801108a:	f101 0040 	add.w	r0, r1, #64	; 0x40
 801108e:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8011092:	4674      	mov	r4, lr
 8011094:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8011098:	ee27 5a83 	vmul.f32	s10, s15, s6
 801109c:	ee35 5a23 	vadd.f32	s10, s10, s7
 80110a0:	ee67 4a03 	vmul.f32	s9, s14, s6
 80110a4:	ee34 4a84 	vadd.f32	s8, s9, s8
 80110a8:	ee66 4a05 	vmul.f32	s9, s12, s10
 80110ac:	ee34 4a84 	vadd.f32	s8, s9, s8
 80110b0:	ee26 3a83 	vmul.f32	s6, s13, s6
 80110b4:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 80110b8:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 80110bc:	ee67 4aa3 	vmul.f32	s9, s15, s7
 80110c0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80110c4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80110c8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80110cc:	ee27 4a23 	vmul.f32	s8, s14, s7
 80110d0:	ee35 5a04 	vadd.f32	s10, s10, s8
 80110d4:	ee26 3a24 	vmul.f32	s6, s12, s9
 80110d8:	ee33 3a05 	vadd.f32	s6, s6, s10
 80110dc:	ee66 3aa3 	vmul.f32	s7, s13, s7
 80110e0:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 80110e4:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 80110e8:	ee27 5a84 	vmul.f32	s10, s15, s8
 80110ec:	ee35 5a03 	vadd.f32	s10, s10, s6
 80110f0:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80110f4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80110f8:	ee67 3a04 	vmul.f32	s7, s14, s8
 80110fc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011100:	ee26 3a05 	vmul.f32	s6, s12, s10
 8011104:	ee33 3a24 	vadd.f32	s6, s6, s9
 8011108:	ee66 3a84 	vmul.f32	s7, s13, s8
 801110c:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8011110:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8011114:	ee67 4a84 	vmul.f32	s9, s15, s8
 8011118:	ee74 4a83 	vadd.f32	s9, s9, s6
 801111c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011120:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011124:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011128:	ee35 5a23 	vadd.f32	s10, s10, s7
 801112c:	ee26 3a24 	vmul.f32	s6, s12, s9
 8011130:	ee33 3a05 	vadd.f32	s6, s6, s10
 8011134:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011138:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 801113c:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8011140:	ee27 5a84 	vmul.f32	s10, s15, s8
 8011144:	ee35 5a03 	vadd.f32	s10, s10, s6
 8011148:	ee65 4aa4 	vmul.f32	s9, s11, s9
 801114c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011150:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011154:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011158:	ee26 3a05 	vmul.f32	s6, s12, s10
 801115c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8011160:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011164:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8011168:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 801116c:	ee67 4a84 	vmul.f32	s9, s15, s8
 8011170:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011174:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011178:	ee35 5a23 	vadd.f32	s10, s10, s7
 801117c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011180:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011184:	ee26 3a24 	vmul.f32	s6, s12, s9
 8011188:	ee33 3a05 	vadd.f32	s6, s6, s10
 801118c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011190:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8011194:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8011198:	ee27 5a84 	vmul.f32	s10, s15, s8
 801119c:	ee35 5a03 	vadd.f32	s10, s10, s6
 80111a0:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80111a4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80111a8:	ee67 3a04 	vmul.f32	s7, s14, s8
 80111ac:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80111b0:	ee26 3a05 	vmul.f32	s6, s12, s10
 80111b4:	ee33 3a24 	vadd.f32	s6, s6, s9
 80111b8:	ee66 3a84 	vmul.f32	s7, s13, s8
 80111bc:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 80111c0:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 80111c4:	ee67 4a84 	vmul.f32	s9, s15, s8
 80111c8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80111cc:	ee25 5a85 	vmul.f32	s10, s11, s10
 80111d0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80111d4:	ee67 3a04 	vmul.f32	s7, s14, s8
 80111d8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80111dc:	ee26 3a24 	vmul.f32	s6, s12, s9
 80111e0:	ee33 3a05 	vadd.f32	s6, s6, s10
 80111e4:	ee66 3a84 	vmul.f32	s7, s13, s8
 80111e8:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 80111ec:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 80111f0:	ee27 5a84 	vmul.f32	s10, s15, s8
 80111f4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80111f8:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80111fc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011200:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011204:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011208:	ee26 3a05 	vmul.f32	s6, s12, s10
 801120c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8011210:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011214:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8011218:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 801121c:	ee67 4a84 	vmul.f32	s9, s15, s8
 8011220:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011224:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011228:	ee35 5a23 	vadd.f32	s10, s10, s7
 801122c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011230:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011234:	ee26 3a24 	vmul.f32	s6, s12, s9
 8011238:	ee33 3a05 	vadd.f32	s6, s6, s10
 801123c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011240:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8011244:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8011248:	ee27 5a84 	vmul.f32	s10, s15, s8
 801124c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8011250:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8011254:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011258:	ee67 3a04 	vmul.f32	s7, s14, s8
 801125c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011260:	ee26 3a05 	vmul.f32	s6, s12, s10
 8011264:	ee33 3a24 	vadd.f32	s6, s6, s9
 8011268:	ee66 3a84 	vmul.f32	s7, s13, s8
 801126c:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8011270:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8011274:	ee67 4a84 	vmul.f32	s9, s15, s8
 8011278:	ee74 4a83 	vadd.f32	s9, s9, s6
 801127c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011280:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011284:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011288:	ee35 5a23 	vadd.f32	s10, s10, s7
 801128c:	ee26 3a24 	vmul.f32	s6, s12, s9
 8011290:	ee33 3a05 	vadd.f32	s6, s6, s10
 8011294:	ee66 3a84 	vmul.f32	s7, s13, s8
 8011298:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 801129c:	ed10 4a04 	vldr	s8, [r0, #-16]
 80112a0:	ee27 5a84 	vmul.f32	s10, s15, s8
 80112a4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80112a8:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80112ac:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80112b0:	ee67 3a04 	vmul.f32	s7, s14, s8
 80112b4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80112b8:	ee26 3a05 	vmul.f32	s6, s12, s10
 80112bc:	ee33 3a24 	vadd.f32	s6, s6, s9
 80112c0:	ee66 3a84 	vmul.f32	s7, s13, s8
 80112c4:	ed03 5a04 	vstr	s10, [r3, #-16]
 80112c8:	ed10 4a03 	vldr	s8, [r0, #-12]
 80112cc:	ee67 4a84 	vmul.f32	s9, s15, s8
 80112d0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80112d4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80112d8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80112dc:	ee67 3a04 	vmul.f32	s7, s14, s8
 80112e0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80112e4:	ee26 3a24 	vmul.f32	s6, s12, s9
 80112e8:	ee33 3a05 	vadd.f32	s6, s6, s10
 80112ec:	ee66 3a84 	vmul.f32	s7, s13, s8
 80112f0:	ed43 4a03 	vstr	s9, [r3, #-12]
 80112f4:	ed10 4a02 	vldr	s8, [r0, #-8]
 80112f8:	ee27 5a84 	vmul.f32	s10, s15, s8
 80112fc:	ee35 5a03 	vadd.f32	s10, s10, s6
 8011300:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8011304:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011308:	ee67 3a04 	vmul.f32	s7, s14, s8
 801130c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011310:	ee26 3a05 	vmul.f32	s6, s12, s10
 8011314:	ee33 3a24 	vadd.f32	s6, s6, s9
 8011318:	ee66 3a84 	vmul.f32	s7, s13, s8
 801131c:	ed03 5a02 	vstr	s10, [r3, #-8]
 8011320:	ed10 4a01 	vldr	s8, [r0, #-4]
 8011324:	ee67 4a84 	vmul.f32	s9, s15, s8
 8011328:	ee74 4a83 	vadd.f32	s9, s9, s6
 801132c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011330:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011334:	ee67 3a04 	vmul.f32	s7, s14, s8
 8011338:	ee35 5a23 	vadd.f32	s10, s10, s7
 801133c:	ee66 3a24 	vmul.f32	s7, s12, s9
 8011340:	ee73 3a85 	vadd.f32	s7, s7, s10
 8011344:	ee26 5a84 	vmul.f32	s10, s13, s8
 8011348:	ee25 4aa4 	vmul.f32	s8, s11, s9
 801134c:	ee34 4a05 	vadd.f32	s8, s8, s10
 8011350:	ed43 4a01 	vstr	s9, [r3, #-4]
 8011354:	3040      	adds	r0, #64	; 0x40
 8011356:	3340      	adds	r3, #64	; 0x40
 8011358:	3c01      	subs	r4, #1
 801135a:	f47f ae9b 	bne.w	8011094 <arm_biquad_cascade_df2T_f32+0x52>
 801135e:	4449      	add	r1, r9
 8011360:	465b      	mov	r3, fp
 8011362:	f1b8 0f00 	cmp.w	r8, #0
 8011366:	d019      	beq.n	801139c <arm_biquad_cascade_df2T_f32+0x35a>
 8011368:	eb01 000a 	add.w	r0, r1, sl
 801136c:	ecf1 2a01 	vldmia	r1!, {s5}
 8011370:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8011374:	ee33 3a23 	vadd.f32	s6, s6, s7
 8011378:	ee67 3a22 	vmul.f32	s7, s14, s5
 801137c:	ee33 4a84 	vadd.f32	s8, s7, s8
 8011380:	ee26 5a03 	vmul.f32	s10, s12, s6
 8011384:	ee75 3a04 	vadd.f32	s7, s10, s8
 8011388:	ee66 2aa2 	vmul.f32	s5, s13, s5
 801138c:	ee25 4a83 	vmul.f32	s8, s11, s6
 8011390:	ee34 4a22 	vadd.f32	s8, s8, s5
 8011394:	eca3 3a01 	vstmia	r3!, {s6}
 8011398:	4281      	cmp	r1, r0
 801139a:	d1e7      	bne.n	801136c <arm_biquad_cascade_df2T_f32+0x32a>
 801139c:	ed4c 3a02 	vstr	s7, [ip, #-8]
 80113a0:	ed0c 4a01 	vstr	s8, [ip, #-4]
 80113a4:	3514      	adds	r5, #20
 80113a6:	3608      	adds	r6, #8
 80113a8:	4611      	mov	r1, r2
 80113aa:	3f01      	subs	r7, #1
 80113ac:	f47f ae5a 	bne.w	8011064 <arm_biquad_cascade_df2T_f32+0x22>
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	4613      	mov	r3, r2
 80113b6:	e7d4      	b.n	8011362 <arm_biquad_cascade_df2T_f32+0x320>

080113b8 <arm_biquad_cascade_df2T_init_f32>:
 80113b8:	b510      	push	{r4, lr}
 80113ba:	4604      	mov	r4, r0
 80113bc:	4608      	mov	r0, r1
 80113be:	2100      	movs	r1, #0
 80113c0:	60a2      	str	r2, [r4, #8]
 80113c2:	00c2      	lsls	r2, r0, #3
 80113c4:	7020      	strb	r0, [r4, #0]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f000 f9d4 	bl	8011774 <memset>
 80113cc:	6060      	str	r0, [r4, #4]
 80113ce:	bd10      	pop	{r4, pc}

080113d0 <arm_sub_f32>:
 80113d0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80113d4:	b4f0      	push	{r4, r5, r6, r7}
 80113d6:	d033      	beq.n	8011440 <arm_sub_f32+0x70>
 80113d8:	f100 0610 	add.w	r6, r0, #16
 80113dc:	f101 0510 	add.w	r5, r1, #16
 80113e0:	f102 0410 	add.w	r4, r2, #16
 80113e4:	4667      	mov	r7, ip
 80113e6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80113ea:	3f01      	subs	r7, #1
 80113ec:	ed56 7a04 	vldr	s15, [r6, #-16]
 80113f0:	f105 0510 	add.w	r5, r5, #16
 80113f4:	f106 0610 	add.w	r6, r6, #16
 80113f8:	f104 0410 	add.w	r4, r4, #16
 80113fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011400:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8011404:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8011408:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 801140c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011410:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8011414:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8011418:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801141c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011420:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8011424:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8011428:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011430:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011434:	d1d7      	bne.n	80113e6 <arm_sub_f32+0x16>
 8011436:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801143a:	4420      	add	r0, r4
 801143c:	4421      	add	r1, r4
 801143e:	4422      	add	r2, r4
 8011440:	f013 0303 	ands.w	r3, r3, #3
 8011444:	d01b      	beq.n	801147e <arm_sub_f32+0xae>
 8011446:	edd0 7a00 	vldr	s15, [r0]
 801144a:	3b01      	subs	r3, #1
 801144c:	ed91 7a00 	vldr	s14, [r1]
 8011450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011454:	edc2 7a00 	vstr	s15, [r2]
 8011458:	d011      	beq.n	801147e <arm_sub_f32+0xae>
 801145a:	edd0 7a01 	vldr	s15, [r0, #4]
 801145e:	2b01      	cmp	r3, #1
 8011460:	ed91 7a01 	vldr	s14, [r1, #4]
 8011464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011468:	edc2 7a01 	vstr	s15, [r2, #4]
 801146c:	d007      	beq.n	801147e <arm_sub_f32+0xae>
 801146e:	edd0 7a02 	vldr	s15, [r0, #8]
 8011472:	ed91 7a02 	vldr	s14, [r1, #8]
 8011476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801147a:	edc2 7a02 	vstr	s15, [r2, #8]
 801147e:	bcf0      	pop	{r4, r5, r6, r7}
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop

08011484 <arm_mult_f32>:
 8011484:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8011488:	b4f0      	push	{r4, r5, r6, r7}
 801148a:	d033      	beq.n	80114f4 <arm_mult_f32+0x70>
 801148c:	f100 0610 	add.w	r6, r0, #16
 8011490:	f101 0510 	add.w	r5, r1, #16
 8011494:	f102 0410 	add.w	r4, r2, #16
 8011498:	4667      	mov	r7, ip
 801149a:	ed15 7a04 	vldr	s14, [r5, #-16]
 801149e:	3f01      	subs	r7, #1
 80114a0:	ed56 7a04 	vldr	s15, [r6, #-16]
 80114a4:	f105 0510 	add.w	r5, r5, #16
 80114a8:	f106 0610 	add.w	r6, r6, #16
 80114ac:	f104 0410 	add.w	r4, r4, #16
 80114b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114b4:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80114b8:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80114bc:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80114c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114c4:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80114c8:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80114cc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80114d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114d4:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80114d8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80114dc:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80114e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114e4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80114e8:	d1d7      	bne.n	801149a <arm_mult_f32+0x16>
 80114ea:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80114ee:	4420      	add	r0, r4
 80114f0:	4421      	add	r1, r4
 80114f2:	4422      	add	r2, r4
 80114f4:	f013 0303 	ands.w	r3, r3, #3
 80114f8:	d01b      	beq.n	8011532 <arm_mult_f32+0xae>
 80114fa:	edd1 7a00 	vldr	s15, [r1]
 80114fe:	3b01      	subs	r3, #1
 8011500:	ed90 7a00 	vldr	s14, [r0]
 8011504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011508:	edc2 7a00 	vstr	s15, [r2]
 801150c:	d011      	beq.n	8011532 <arm_mult_f32+0xae>
 801150e:	edd0 7a01 	vldr	s15, [r0, #4]
 8011512:	2b01      	cmp	r3, #1
 8011514:	ed91 7a01 	vldr	s14, [r1, #4]
 8011518:	ee67 7a87 	vmul.f32	s15, s15, s14
 801151c:	edc2 7a01 	vstr	s15, [r2, #4]
 8011520:	d007      	beq.n	8011532 <arm_mult_f32+0xae>
 8011522:	edd0 7a02 	vldr	s15, [r0, #8]
 8011526:	ed91 7a02 	vldr	s14, [r1, #8]
 801152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801152e:	edc2 7a02 	vstr	s15, [r2, #8]
 8011532:	bcf0      	pop	{r4, r5, r6, r7}
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop

08011538 <arm_dot_prod_f32>:
 8011538:	b4f0      	push	{r4, r5, r6, r7}
 801153a:	0897      	lsrs	r7, r2, #2
 801153c:	d052      	beq.n	80115e4 <arm_dot_prod_f32+0xac>
 801153e:	f100 0510 	add.w	r5, r0, #16
 8011542:	f101 0410 	add.w	r4, r1, #16
 8011546:	463e      	mov	r6, r7
 8011548:	eddf 7a28 	vldr	s15, [pc, #160]	; 80115ec <arm_dot_prod_f32+0xb4>
 801154c:	ed14 7a04 	vldr	s14, [r4, #-16]
 8011550:	3e01      	subs	r6, #1
 8011552:	ed15 6a04 	vldr	s12, [r5, #-16]
 8011556:	f104 0410 	add.w	r4, r4, #16
 801155a:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 801155e:	f105 0510 	add.w	r5, r5, #16
 8011562:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011566:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 801156a:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 801156e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011572:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8011576:	ee36 6a27 	vadd.f32	s12, s12, s15
 801157a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 801157e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011582:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8011586:	ee76 6a86 	vadd.f32	s13, s13, s12
 801158a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801158e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011596:	d1d9      	bne.n	801154c <arm_dot_prod_f32+0x14>
 8011598:	013f      	lsls	r7, r7, #4
 801159a:	4438      	add	r0, r7
 801159c:	4439      	add	r1, r7
 801159e:	f012 0203 	ands.w	r2, r2, #3
 80115a2:	d01b      	beq.n	80115dc <arm_dot_prod_f32+0xa4>
 80115a4:	ed91 7a00 	vldr	s14, [r1]
 80115a8:	3a01      	subs	r2, #1
 80115aa:	edd0 6a00 	vldr	s13, [r0]
 80115ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80115b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115b6:	d011      	beq.n	80115dc <arm_dot_prod_f32+0xa4>
 80115b8:	ed91 7a01 	vldr	s14, [r1, #4]
 80115bc:	2a01      	cmp	r2, #1
 80115be:	edd0 6a01 	vldr	s13, [r0, #4]
 80115c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80115c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115ca:	d007      	beq.n	80115dc <arm_dot_prod_f32+0xa4>
 80115cc:	ed90 7a02 	vldr	s14, [r0, #8]
 80115d0:	edd1 6a02 	vldr	s13, [r1, #8]
 80115d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80115d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115dc:	edc3 7a00 	vstr	s15, [r3]
 80115e0:	bcf0      	pop	{r4, r5, r6, r7}
 80115e2:	4770      	bx	lr
 80115e4:	eddf 7a01 	vldr	s15, [pc, #4]	; 80115ec <arm_dot_prod_f32+0xb4>
 80115e8:	e7d9      	b.n	801159e <arm_dot_prod_f32+0x66>
 80115ea:	bf00      	nop
 80115ec:	00000000 	.word	0x00000000

080115f0 <arm_add_f32>:
 80115f0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80115f4:	b4f0      	push	{r4, r5, r6, r7}
 80115f6:	d033      	beq.n	8011660 <arm_add_f32+0x70>
 80115f8:	f100 0610 	add.w	r6, r0, #16
 80115fc:	f101 0510 	add.w	r5, r1, #16
 8011600:	f102 0410 	add.w	r4, r2, #16
 8011604:	4667      	mov	r7, ip
 8011606:	ed15 7a04 	vldr	s14, [r5, #-16]
 801160a:	3f01      	subs	r7, #1
 801160c:	ed56 7a04 	vldr	s15, [r6, #-16]
 8011610:	f105 0510 	add.w	r5, r5, #16
 8011614:	f106 0610 	add.w	r6, r6, #16
 8011618:	f104 0410 	add.w	r4, r4, #16
 801161c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011620:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8011624:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8011628:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 801162c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011630:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8011634:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8011638:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801163c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011640:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8011644:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8011648:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801164c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011650:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011654:	d1d7      	bne.n	8011606 <arm_add_f32+0x16>
 8011656:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801165a:	4420      	add	r0, r4
 801165c:	4421      	add	r1, r4
 801165e:	4422      	add	r2, r4
 8011660:	f013 0303 	ands.w	r3, r3, #3
 8011664:	d01b      	beq.n	801169e <arm_add_f32+0xae>
 8011666:	edd1 7a00 	vldr	s15, [r1]
 801166a:	3b01      	subs	r3, #1
 801166c:	ed90 7a00 	vldr	s14, [r0]
 8011670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011674:	edc2 7a00 	vstr	s15, [r2]
 8011678:	d011      	beq.n	801169e <arm_add_f32+0xae>
 801167a:	edd0 7a01 	vldr	s15, [r0, #4]
 801167e:	2b01      	cmp	r3, #1
 8011680:	ed91 7a01 	vldr	s14, [r1, #4]
 8011684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011688:	edc2 7a01 	vstr	s15, [r2, #4]
 801168c:	d007      	beq.n	801169e <arm_add_f32+0xae>
 801168e:	edd0 7a02 	vldr	s15, [r0, #8]
 8011692:	ed91 7a02 	vldr	s14, [r1, #8]
 8011696:	ee77 7a87 	vadd.f32	s15, s15, s14
 801169a:	edc2 7a02 	vstr	s15, [r2, #8]
 801169e:	bcf0      	pop	{r4, r5, r6, r7}
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop

080116a4 <arm_abs_f32>:
 80116a4:	b470      	push	{r4, r5, r6}
 80116a6:	0896      	lsrs	r6, r2, #2
 80116a8:	d025      	beq.n	80116f6 <arm_abs_f32+0x52>
 80116aa:	f100 0410 	add.w	r4, r0, #16
 80116ae:	f101 0310 	add.w	r3, r1, #16
 80116b2:	4635      	mov	r5, r6
 80116b4:	ed54 7a04 	vldr	s15, [r4, #-16]
 80116b8:	3d01      	subs	r5, #1
 80116ba:	f104 0410 	add.w	r4, r4, #16
 80116be:	f103 0310 	add.w	r3, r3, #16
 80116c2:	eef0 7ae7 	vabs.f32	s15, s15
 80116c6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80116ca:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80116ce:	eef0 7ae7 	vabs.f32	s15, s15
 80116d2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80116d6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80116da:	eef0 7ae7 	vabs.f32	s15, s15
 80116de:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80116e2:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80116e6:	eef0 7ae7 	vabs.f32	s15, s15
 80116ea:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80116ee:	d1e1      	bne.n	80116b4 <arm_abs_f32+0x10>
 80116f0:	0136      	lsls	r6, r6, #4
 80116f2:	4430      	add	r0, r6
 80116f4:	4431      	add	r1, r6
 80116f6:	f012 0203 	ands.w	r2, r2, #3
 80116fa:	d015      	beq.n	8011728 <arm_abs_f32+0x84>
 80116fc:	edd0 7a00 	vldr	s15, [r0]
 8011700:	3a01      	subs	r2, #1
 8011702:	eef0 7ae7 	vabs.f32	s15, s15
 8011706:	edc1 7a00 	vstr	s15, [r1]
 801170a:	d00d      	beq.n	8011728 <arm_abs_f32+0x84>
 801170c:	edd0 7a01 	vldr	s15, [r0, #4]
 8011710:	2a01      	cmp	r2, #1
 8011712:	eef0 7ae7 	vabs.f32	s15, s15
 8011716:	edc1 7a01 	vstr	s15, [r1, #4]
 801171a:	d005      	beq.n	8011728 <arm_abs_f32+0x84>
 801171c:	edd0 7a02 	vldr	s15, [r0, #8]
 8011720:	eef0 7ae7 	vabs.f32	s15, s15
 8011724:	edc1 7a02 	vstr	s15, [r1, #8]
 8011728:	bc70      	pop	{r4, r5, r6}
 801172a:	4770      	bx	lr

0801172c <__libc_init_array>:
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	4d0d      	ldr	r5, [pc, #52]	; (8011764 <__libc_init_array+0x38>)
 8011730:	4c0d      	ldr	r4, [pc, #52]	; (8011768 <__libc_init_array+0x3c>)
 8011732:	1b64      	subs	r4, r4, r5
 8011734:	10a4      	asrs	r4, r4, #2
 8011736:	2600      	movs	r6, #0
 8011738:	42a6      	cmp	r6, r4
 801173a:	d109      	bne.n	8011750 <__libc_init_array+0x24>
 801173c:	4d0b      	ldr	r5, [pc, #44]	; (801176c <__libc_init_array+0x40>)
 801173e:	4c0c      	ldr	r4, [pc, #48]	; (8011770 <__libc_init_array+0x44>)
 8011740:	f000 f820 	bl	8011784 <_init>
 8011744:	1b64      	subs	r4, r4, r5
 8011746:	10a4      	asrs	r4, r4, #2
 8011748:	2600      	movs	r6, #0
 801174a:	42a6      	cmp	r6, r4
 801174c:	d105      	bne.n	801175a <__libc_init_array+0x2e>
 801174e:	bd70      	pop	{r4, r5, r6, pc}
 8011750:	f855 3b04 	ldr.w	r3, [r5], #4
 8011754:	4798      	blx	r3
 8011756:	3601      	adds	r6, #1
 8011758:	e7ee      	b.n	8011738 <__libc_init_array+0xc>
 801175a:	f855 3b04 	ldr.w	r3, [r5], #4
 801175e:	4798      	blx	r3
 8011760:	3601      	adds	r6, #1
 8011762:	e7f2      	b.n	801174a <__libc_init_array+0x1e>
 8011764:	080117b4 	.word	0x080117b4
 8011768:	080117b4 	.word	0x080117b4
 801176c:	080117b4 	.word	0x080117b4
 8011770:	080117b8 	.word	0x080117b8

08011774 <memset>:
 8011774:	4402      	add	r2, r0
 8011776:	4603      	mov	r3, r0
 8011778:	4293      	cmp	r3, r2
 801177a:	d100      	bne.n	801177e <memset+0xa>
 801177c:	4770      	bx	lr
 801177e:	f803 1b01 	strb.w	r1, [r3], #1
 8011782:	e7f9      	b.n	8011778 <memset+0x4>

08011784 <_init>:
 8011784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011786:	bf00      	nop
 8011788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801178a:	bc08      	pop	{r3}
 801178c:	469e      	mov	lr, r3
 801178e:	4770      	bx	lr

08011790 <_fini>:
 8011790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011792:	bf00      	nop
 8011794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011796:	bc08      	pop	{r3}
 8011798:	469e      	mov	lr, r3
 801179a:	4770      	bx	lr
