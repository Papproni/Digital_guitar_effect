
stm32_ili9341_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800461c  0800461c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800461c  0800461c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800461c  0800461c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08004624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  24000014  08004638  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000e0  08004638  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d52f  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002025  00000000  00000000  0002d571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00030080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003998a  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0b3  00000000  00000000  0006a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178a0e  00000000  00000000  000784ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  001f0f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080045f4 	.word	0x080045f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080045f4 	.word	0x080045f4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <ILI9341_SPI_Init+0x14>)
 800040e:	f001 f921 	bl	8001654 <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	58020c00 	.word	0x58020c00

0800041c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000426:	1df9      	adds	r1, r7, #7
 8000428:	2301      	movs	r3, #1
 800042a:	2201      	movs	r2, #1
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <ILI9341_SPI_Send+0x20>)
 800042e:	f003 fdcf 	bl	8003fd0 <HAL_SPI_Transmit>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000054 	.word	0x24000054

08000440 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <ILI9341_Write_Command+0x38>)
 8000450:	f001 f900 	bl	8001654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000454:	2200      	movs	r2, #0
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <ILI9341_Write_Command+0x38>)
 800045a:	f001 f8fb 	bl	8001654 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffdb 	bl	800041c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000466:	2201      	movs	r2, #1
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <ILI9341_Write_Command+0x38>)
 800046c:	f001 f8f2 	bl	8001654 <HAL_GPIO_WritePin>
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	58020c00 	.word	0x58020c00

0800047c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <ILI9341_Write_Data+0x38>)
 800048c:	f001 f8e2 	bl	8001654 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <ILI9341_Write_Data+0x38>)
 8000496:	f001 f8dd 	bl	8001654 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ffbd 	bl	800041c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	4803      	ldr	r0, [pc, #12]	; (80004b4 <ILI9341_Write_Data+0x38>)
 80004a8:	f001 f8d4 	bl	8001654 <HAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	58020c00 	.word	0x58020c00

080004b8 <ILI9341_Reset>:
ILI9341_Write_Command(0x2C);
}

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2120      	movs	r1, #32
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <ILI9341_Reset+0x34>)
 80004c2:	f001 f8c7 	bl	8001654 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80004c6:	20c8      	movs	r0, #200	; 0xc8
 80004c8:	f000 fd0e 	bl	8000ee8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <ILI9341_Reset+0x34>)
 80004d2:	f001 f8bf 	bl	8001654 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80004d6:	20c8      	movs	r0, #200	; 0xc8
 80004d8:	f000 fd06 	bl	8000ee8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80004dc:	2201      	movs	r2, #1
 80004de:	2120      	movs	r1, #32
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <ILI9341_Reset+0x34>)
 80004e2:	f001 f8b7 	bl	8001654 <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	58020c00 	.word	0x58020c00

080004f0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80004fe:	2036      	movs	r0, #54	; 0x36
 8000500:	f7ff ff9e 	bl	8000440 <ILI9341_Write_Command>
HAL_Delay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f000 fcef 	bl	8000ee8 <HAL_Delay>
	
switch(screen_rotation) 
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d837      	bhi.n	8000580 <ILI9341_Set_Rotation+0x90>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <ILI9341_Set_Rotation+0x28>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	08000529 	.word	0x08000529
 800051c:	0800053f 	.word	0x0800053f
 8000520:	08000555 	.word	0x08000555
 8000524:	0800056b 	.word	0x0800056b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000528:	2048      	movs	r0, #72	; 0x48
 800052a:	f7ff ffa7 	bl	800047c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <ILI9341_Set_Rotation+0x9c>)
 8000530:	22f0      	movs	r2, #240	; 0xf0
 8000532:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <ILI9341_Set_Rotation+0xa0>)
 8000536:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800053a:	801a      	strh	r2, [r3, #0]
			break;
 800053c:	e021      	b.n	8000582 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800053e:	2028      	movs	r0, #40	; 0x28
 8000540:	f7ff ff9c 	bl	800047c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <ILI9341_Set_Rotation+0x9c>)
 8000546:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800054a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <ILI9341_Set_Rotation+0xa0>)
 800054e:	22f0      	movs	r2, #240	; 0xf0
 8000550:	801a      	strh	r2, [r3, #0]
			break;
 8000552:	e016      	b.n	8000582 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000554:	2088      	movs	r0, #136	; 0x88
 8000556:	f7ff ff91 	bl	800047c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <ILI9341_Set_Rotation+0x9c>)
 800055c:	22f0      	movs	r2, #240	; 0xf0
 800055e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <ILI9341_Set_Rotation+0xa0>)
 8000562:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000566:	801a      	strh	r2, [r3, #0]
			break;
 8000568:	e00b      	b.n	8000582 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800056a:	20e8      	movs	r0, #232	; 0xe8
 800056c:	f7ff ff86 	bl	800047c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <ILI9341_Set_Rotation+0x9c>)
 8000572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000576:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <ILI9341_Set_Rotation+0xa0>)
 800057a:	22f0      	movs	r2, #240	; 0xf0
 800057c:	801a      	strh	r2, [r3, #0]
			break;
 800057e:	e000      	b.n	8000582 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000580:	bf00      	nop
	}
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2400000a 	.word	0x2400000a
 8000590:	24000008 	.word	0x24000008

08000594 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2120      	movs	r1, #32
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <ILI9341_Enable+0x14>)
 800059e:	f001 f859 	bl	8001654 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58020c00 	.word	0x58020c00

080005ac <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80005b0:	f7ff fff0 	bl	8000594 <ILI9341_Enable>
ILI9341_SPI_Init();
 80005b4:	f7ff ff26 	bl	8000404 <ILI9341_SPI_Init>
ILI9341_Reset();
 80005b8:	f7ff ff7e 	bl	80004b8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ff3f 	bl	8000440 <ILI9341_Write_Command>
HAL_Delay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f000 fc8f 	bl	8000ee8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80005ca:	20cb      	movs	r0, #203	; 0xcb
 80005cc:	f7ff ff38 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80005d0:	2039      	movs	r0, #57	; 0x39
 80005d2:	f7ff ff53 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80005d6:	202c      	movs	r0, #44	; 0x2c
 80005d8:	f7ff ff50 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ff4d 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80005e2:	2034      	movs	r0, #52	; 0x34
 80005e4:	f7ff ff4a 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f7ff ff47 	bl	800047c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80005ee:	20cf      	movs	r0, #207	; 0xcf
 80005f0:	f7ff ff26 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff41 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80005fa:	20c1      	movs	r0, #193	; 0xc1
 80005fc:	f7ff ff3e 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000600:	2030      	movs	r0, #48	; 0x30
 8000602:	f7ff ff3b 	bl	800047c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000606:	20e8      	movs	r0, #232	; 0xe8
 8000608:	f7ff ff1a 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800060c:	2085      	movs	r0, #133	; 0x85
 800060e:	f7ff ff35 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff ff32 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000618:	2078      	movs	r0, #120	; 0x78
 800061a:	f7ff ff2f 	bl	800047c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800061e:	20ea      	movs	r0, #234	; 0xea
 8000620:	f7ff ff0e 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ff29 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ff26 	bl	800047c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000630:	20ed      	movs	r0, #237	; 0xed
 8000632:	f7ff ff05 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f7ff ff20 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800063c:	2003      	movs	r0, #3
 800063e:	f7ff ff1d 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000642:	2012      	movs	r0, #18
 8000644:	f7ff ff1a 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000648:	2081      	movs	r0, #129	; 0x81
 800064a:	f7ff ff17 	bl	800047c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800064e:	20f7      	movs	r0, #247	; 0xf7
 8000650:	f7ff fef6 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000654:	2020      	movs	r0, #32
 8000656:	f7ff ff11 	bl	800047c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800065a:	20c0      	movs	r0, #192	; 0xc0
 800065c:	f7ff fef0 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000660:	2023      	movs	r0, #35	; 0x23
 8000662:	f7ff ff0b 	bl	800047c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000666:	20c1      	movs	r0, #193	; 0xc1
 8000668:	f7ff feea 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800066c:	2010      	movs	r0, #16
 800066e:	f7ff ff05 	bl	800047c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000672:	20c5      	movs	r0, #197	; 0xc5
 8000674:	f7ff fee4 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000678:	203e      	movs	r0, #62	; 0x3e
 800067a:	f7ff feff 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800067e:	2028      	movs	r0, #40	; 0x28
 8000680:	f7ff fefc 	bl	800047c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000684:	20c7      	movs	r0, #199	; 0xc7
 8000686:	f7ff fedb 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800068a:	2086      	movs	r0, #134	; 0x86
 800068c:	f7ff fef6 	bl	800047c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000690:	2036      	movs	r0, #54	; 0x36
 8000692:	f7ff fed5 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000696:	2048      	movs	r0, #72	; 0x48
 8000698:	f7ff fef0 	bl	800047c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800069c:	203a      	movs	r0, #58	; 0x3a
 800069e:	f7ff fecf 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80006a2:	2055      	movs	r0, #85	; 0x55
 80006a4:	f7ff feea 	bl	800047c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80006a8:	20b1      	movs	r0, #177	; 0xb1
 80006aa:	f7ff fec9 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff fee4 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80006b4:	2018      	movs	r0, #24
 80006b6:	f7ff fee1 	bl	800047c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80006ba:	20b6      	movs	r0, #182	; 0xb6
 80006bc:	f7ff fec0 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80006c0:	2008      	movs	r0, #8
 80006c2:	f7ff fedb 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80006c6:	2082      	movs	r0, #130	; 0x82
 80006c8:	f7ff fed8 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80006cc:	2027      	movs	r0, #39	; 0x27
 80006ce:	f7ff fed5 	bl	800047c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80006d2:	20f2      	movs	r0, #242	; 0xf2
 80006d4:	f7ff feb4 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fecf 	bl	800047c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80006de:	2026      	movs	r0, #38	; 0x26
 80006e0:	f7ff feae 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fec9 	bl	800047c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80006ea:	20e0      	movs	r0, #224	; 0xe0
 80006ec:	f7ff fea8 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80006f0:	200f      	movs	r0, #15
 80006f2:	f7ff fec3 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80006f6:	2031      	movs	r0, #49	; 0x31
 80006f8:	f7ff fec0 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80006fc:	202b      	movs	r0, #43	; 0x2b
 80006fe:	f7ff febd 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff feba 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000708:	200e      	movs	r0, #14
 800070a:	f7ff feb7 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800070e:	2008      	movs	r0, #8
 8000710:	f7ff feb4 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000714:	204e      	movs	r0, #78	; 0x4e
 8000716:	f7ff feb1 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800071a:	20f1      	movs	r0, #241	; 0xf1
 800071c:	f7ff feae 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000720:	2037      	movs	r0, #55	; 0x37
 8000722:	f7ff feab 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000726:	2007      	movs	r0, #7
 8000728:	f7ff fea8 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff fea5 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000732:	2003      	movs	r0, #3
 8000734:	f7ff fea2 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000738:	200e      	movs	r0, #14
 800073a:	f7ff fe9f 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800073e:	2009      	movs	r0, #9
 8000740:	f7ff fe9c 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fe99 	bl	800047c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800074a:	20e1      	movs	r0, #225	; 0xe1
 800074c:	f7ff fe78 	bl	8000440 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fe93 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000756:	200e      	movs	r0, #14
 8000758:	f7ff fe90 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800075c:	2014      	movs	r0, #20
 800075e:	f7ff fe8d 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000762:	2003      	movs	r0, #3
 8000764:	f7ff fe8a 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000768:	2011      	movs	r0, #17
 800076a:	f7ff fe87 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800076e:	2007      	movs	r0, #7
 8000770:	f7ff fe84 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000774:	2031      	movs	r0, #49	; 0x31
 8000776:	f7ff fe81 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800077a:	20c1      	movs	r0, #193	; 0xc1
 800077c:	f7ff fe7e 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000780:	2048      	movs	r0, #72	; 0x48
 8000782:	f7ff fe7b 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000786:	2008      	movs	r0, #8
 8000788:	f7ff fe78 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800078c:	200f      	movs	r0, #15
 800078e:	f7ff fe75 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000792:	200c      	movs	r0, #12
 8000794:	f7ff fe72 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000798:	2031      	movs	r0, #49	; 0x31
 800079a:	f7ff fe6f 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800079e:	2036      	movs	r0, #54	; 0x36
 80007a0:	f7ff fe6c 	bl	800047c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80007a4:	200f      	movs	r0, #15
 80007a6:	f7ff fe69 	bl	800047c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff fe48 	bl	8000440 <ILI9341_Write_Command>
HAL_Delay(120);
 80007b0:	2078      	movs	r0, #120	; 0x78
 80007b2:	f000 fb99 	bl	8000ee8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80007b6:	2029      	movs	r0, #41	; 0x29
 80007b8:	f7ff fe42 	bl	8000440 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fe97 	bl	80004f0 <ILI9341_Set_Rotation>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007d4:	bf00      	nop
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <main+0xa4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d004      	beq.n	80007ec <main+0x24>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dcf4      	bgt.n	80007d6 <main+0xe>
  if ( timeout < 0 )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da01      	bge.n	80007f6 <main+0x2e>
  {
  Error_Handler();
 80007f2:	f000 f9b1 	bl	8000b58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fae5 	bl	8000dc4 <HAL_Init>
//  TouchCalibrate();
//  GraphicsClear(BLUE);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f839 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0xa4>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <main+0xa4>)
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <main+0xa4>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 ff33 	bl	8001688 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000822:	2100      	movs	r1, #0
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ff49 	bl	80016bc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800082a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000830:	bf00      	nop
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <main+0xa4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d104      	bne.n	8000848 <main+0x80>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dcf4      	bgt.n	8000832 <main+0x6a>
if ( timeout < 0 )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	da01      	bge.n	8000852 <main+0x8a>
{
Error_Handler();
 800084e:	f000 f983 	bl	8000b58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f90b 	bl	8000a6c <MX_GPIO_Init>
  MX_SPI3_Init();
 8000856:	f000 f8b3 	bl	80009c0 <MX_SPI3_Init>
  MX_CRC_Init();
 800085a:	f000 f88f 	bl	800097c <MX_CRC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ILI9341_Init();
 800085e:	f7ff fea5 	bl	80005ac <ILI9341_Init>
//	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
//	  		HAL_Delay(10000);
//	  MX_TouchGFX_Process();


	  HAL_Delay(2000);
 8000862:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000866:	f000 fb3f 	bl	8000ee8 <HAL_Delay>
 800086a:	e7fa      	b.n	8000862 <main+0x9a>
 800086c:	58024400 	.word	0x58024400

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	224c      	movs	r2, #76	; 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 feb0 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 feaa 	bl	80045e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f000 ff27 	bl	80016e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <SystemClock_Config+0x100>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	4a34      	ldr	r2, [pc, #208]	; (8000970 <SystemClock_Config+0x100>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008a6:	4b32      	ldr	r3, [pc, #200]	; (8000970 <SystemClock_Config+0x100>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <SystemClock_Config+0x104>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b8:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <SystemClock_Config+0x104>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <SystemClock_Config+0x104>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008cc:	bf00      	nop
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemClock_Config+0x104>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008da:	d1f8      	bne.n	80008ce <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <SystemClock_Config+0x108>)
 80008de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <SystemClock_Config+0x108>)
 80008e2:	f023 0303 	bic.w	r3, r3, #3
 80008e6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000900:	2309      	movs	r3, #9
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 120;
 8000908:	2378      	movs	r3, #120	; 0x78
 800090a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000910:	230c      	movs	r3, #12
 8000912:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000914:	2302      	movs	r3, #2
 8000916:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ff38 	bl	8001798 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092e:	f000 f913 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2101      	movs	r1, #1
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fb78 	bl	800204c <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000962:	f000 f8f9 	bl	8000b58 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3770      	adds	r7, #112	; 0x70
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	58000400 	.word	0x58000400
 8000974:	58024800 	.word	0x58024800
 8000978:	58024400 	.word	0x58024400

0800097c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <MX_CRC_Init+0x40>)
 8000984:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000988:	2200      	movs	r2, #0
 800098a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_CRC_Init+0x3c>)
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_CRC_Init+0x3c>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_CRC_Init+0x3c>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_CRC_Init+0x3c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_CRC_Init+0x3c>)
 80009a6:	f000 fbb3 	bl	8001110 <HAL_CRC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009b0:	f000 f8d2 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000030 	.word	0x24000030
 80009bc:	58024c00 	.word	0x58024c00

080009c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009c6:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <MX_SPI3_Init+0xa8>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009da:	2207      	movs	r2, #7
 80009dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_SPI3_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_SPI3_Init+0xa4>)
 8000a50:	f003 f99a 	bl	8003d88 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 f87d 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000054 	.word	0x24000054
 8000a68:	40003c00 	.word	0x40003c00

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_GPIO_Init+0xe4>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_RESET_Pin|DISPLAY_CS_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	21a0      	movs	r1, #160	; 0xa0
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000b1e:	f000 fd99 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000b28:	f000 fd94 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_RESET_Pin DISPLAY_DC_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RESET_Pin|DISPLAY_DC_Pin|DISPLAY_CS_Pin;
 8000b2c:	23e0      	movs	r3, #224	; 0xe0
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0xe8>)
 8000b44:	f000 fbd6 	bl	80012f4 <HAL_GPIO_Init>

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020c00 	.word	0x58020c00

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_MspInit+0x30>)
 8000b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x30>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	58024400 	.word	0x58024400

08000b98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_CRC_MspInit+0x3c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_CRC_MspInit+0x40>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_CRC_MspInit+0x40>)
 8000bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_CRC_MspInit+0x40>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58024c00 	.word	0x58024c00
 8000bd8:	58024400 	.word	0x58024400

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0bc      	sub	sp, #240	; 0xf0
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	22c0      	movs	r2, #192	; 0xc0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 fcf1 	bl	80045e4 <memset>
  if(hspi->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <HAL_SPI_MspInit+0x130>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d17a      	bne.n	8000d02 <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 27;
 8000c18:	231b      	movs	r3, #27
 8000c1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 72;
 8000c1c:	2348      	movs	r3, #72	; 0x48
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000c20:	2305      	movs	r3, #5
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c30:	2320      	movs	r3, #32
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fd32 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8000c4e:	f7ff ff83 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_SPI_MspInit+0x134>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <HAL_SPI_MspInit+0x138>)
 8000cd2:	f000 fb0f 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_SPI_MspInit+0x13c>)
 8000cfe:	f000 faf9 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37f0      	adds	r7, #240	; 0xf0
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40003c00 	.word	0x40003c00
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58020800 	.word	0x58020800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f89e 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d74:	f7ff fab0 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fbfd 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fd11 	bl	80007c8 <main>
  bx  lr
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000db4:	08004624 	.word	0x08004624
  ldr r2, =_sbss
 8000db8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000dbc:	240000e0 	.word	0x240000e0

08000dc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC3_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f96e 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dd0:	f001 faf2 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_Init+0x68>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	0a1b      	lsrs	r3, r3, #8
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	4913      	ldr	r1, [pc, #76]	; (8000e30 <HAL_Init+0x6c>)
 8000de2:	5ccb      	ldrb	r3, [r1, r3]
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_Init+0x68>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_Init+0x6c>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_Init+0x70>)
 8000e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_Init+0x74>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f814 	bl	8000e3c <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e002      	b.n	8000e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1e:	f7ff fea1 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	0800460c 	.word	0x0800460c
 8000e34:	24000004 	.word	0x24000004
 8000e38:	24000000 	.word	0x24000000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e021      	b.n	8000e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_InitTick+0x64>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f945 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f91d 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x68>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	24000010 	.word	0x24000010
 8000ea0:	24000000 	.word	0x24000000
 8000ea4:	2400000c 	.word	0x2400000c

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	24000010 	.word	0x24000010
 8000ecc:	240000dc 	.word	0x240000dc

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	240000dc 	.word	0x240000dc

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	24000010 	.word	0x24000010

08000f30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetREVID+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0c1b      	lsrs	r3, r3, #16
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	5c001000 	.word	0x5c001000

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	05fa0000 	.word	0x05fa0000

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff5e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffb2 	bl	8001068 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e054      	b.n	80011cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7f5b      	ldrb	r3, [r3, #29]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fd30 	bl	8000b98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_CRC_Init+0xc4>)
 800114c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0218 	bic.w	r2, r2, #24
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	e00c      	b.n	800117a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6899      	ldr	r1, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	461a      	mov	r2, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f834 	bl	80011d8 <HAL_CRCEx_Polynomial_Set>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e028      	b.n	80011cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 32ff 	mov.w	r2, #4294967295
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	e004      	b.n	8001198 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6912      	ldr	r2, [r2, #16]
 8001196:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	04c11db7 	.word	0x04c11db7

080011d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011e8:	231f      	movs	r3, #31
 80011ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
 80011fa:	e063      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011fc:	bf00      	nop
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	613a      	str	r2, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_CRCEx_Polynomial_Set+0x44>
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b18      	cmp	r3, #24
 8001220:	d846      	bhi.n	80012b0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012b7 	.word	0x080012b7
 800122c:	080012b1 	.word	0x080012b1
 8001230:	080012b1 	.word	0x080012b1
 8001234:	080012b1 	.word	0x080012b1
 8001238:	080012b1 	.word	0x080012b1
 800123c:	080012b1 	.word	0x080012b1
 8001240:	080012b1 	.word	0x080012b1
 8001244:	080012b1 	.word	0x080012b1
 8001248:	080012a5 	.word	0x080012a5
 800124c:	080012b1 	.word	0x080012b1
 8001250:	080012b1 	.word	0x080012b1
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012b1 	.word	0x080012b1
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012b1 	.word	0x080012b1
 8001268:	08001299 	.word	0x08001299
 800126c:	080012b1 	.word	0x080012b1
 8001270:	080012b1 	.word	0x080012b1
 8001274:	080012b1 	.word	0x080012b1
 8001278:	080012b1 	.word	0x080012b1
 800127c:	080012b1 	.word	0x080012b1
 8001280:	080012b1 	.word	0x080012b1
 8001284:	080012b1 	.word	0x080012b1
 8001288:	0800128d 	.word	0x0800128d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d913      	bls.n	80012ba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001296:	e010      	b.n	80012ba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d90f      	bls.n	80012be <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012a2:	e00c      	b.n	80012be <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	d90b      	bls.n	80012c2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012ae:	e008      	b.n	80012c2 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
        break;
 80012b4:	e006      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012b6:	bf00      	nop
 80012b8:	e004      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012ba:	bf00      	nop
 80012bc:	e002      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012be:	bf00      	nop
 80012c0:	e000      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012c2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 0118 	bic.w	r1, r3, #24
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_GPIO_Init+0x234>)
 8001304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001306:	e194      	b.n	8001632 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8186 	beq.w	800162c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x44>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d017      	beq.n	80013d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d123      	bne.n	800142a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	69b9      	ldr	r1, [r7, #24]
 8001426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0203 	and.w	r2, r3, #3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80e0 	beq.w	800162c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_GPIO_Init+0x238>)
 800146e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <HAL_GPIO_Init+0x238>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_GPIO_Init+0x238>)
 800147e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_GPIO_Init+0x23c>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_GPIO_Init+0x240>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d052      	beq.n	800155c <HAL_GPIO_Init+0x268>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_GPIO_Init+0x244>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d031      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_GPIO_Init+0x248>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02b      	beq.n	800151e <HAL_GPIO_Init+0x22a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_GPIO_Init+0x24c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d025      	beq.n	800151a <HAL_GPIO_Init+0x226>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_GPIO_Init+0x250>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01f      	beq.n	8001516 <HAL_GPIO_Init+0x222>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_GPIO_Init+0x254>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d019      	beq.n	8001512 <HAL_GPIO_Init+0x21e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x258>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x21a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_GPIO_Init+0x25c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x216>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_GPIO_Init+0x260>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x212>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_GPIO_Init+0x264>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x20e>
 80014fe:	2309      	movs	r3, #9
 8001500:	e02d      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001502:	230a      	movs	r3, #10
 8001504:	e02b      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001506:	2308      	movs	r3, #8
 8001508:	e029      	b.n	800155e <HAL_GPIO_Init+0x26a>
 800150a:	2307      	movs	r3, #7
 800150c:	e027      	b.n	800155e <HAL_GPIO_Init+0x26a>
 800150e:	2306      	movs	r3, #6
 8001510:	e025      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001512:	2305      	movs	r3, #5
 8001514:	e023      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001516:	2304      	movs	r3, #4
 8001518:	e021      	b.n	800155e <HAL_GPIO_Init+0x26a>
 800151a:	2303      	movs	r3, #3
 800151c:	e01f      	b.n	800155e <HAL_GPIO_Init+0x26a>
 800151e:	2302      	movs	r3, #2
 8001520:	e01d      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001522:	2301      	movs	r3, #1
 8001524:	e01b      	b.n	800155e <HAL_GPIO_Init+0x26a>
 8001526:	bf00      	nop
 8001528:	58000080 	.word	0x58000080
 800152c:	58024400 	.word	0x58024400
 8001530:	58000400 	.word	0x58000400
 8001534:	58020000 	.word	0x58020000
 8001538:	58020400 	.word	0x58020400
 800153c:	58020800 	.word	0x58020800
 8001540:	58020c00 	.word	0x58020c00
 8001544:	58021000 	.word	0x58021000
 8001548:	58021400 	.word	0x58021400
 800154c:	58021800 	.word	0x58021800
 8001550:	58021c00 	.word	0x58021c00
 8001554:	58022000 	.word	0x58022000
 8001558:	58022400 	.word	0x58022400
 800155c:	2300      	movs	r3, #0
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156e:	4938      	ldr	r1, [pc, #224]	; (8001650 <HAL_GPIO_Init+0x35c>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f ae63 	bne.w	8001308 <HAL_GPIO_Init+0x14>
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3724      	adds	r7, #36	; 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	58000400 	.word	0x58000400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	619a      	str	r2, [r3, #24]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_HSEM_FastTake+0x2c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3320      	adds	r3, #32
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_HSEM_FastTake+0x30>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	58026400 	.word	0x58026400
 80016b8:	80000300 	.word	0x80000300

080016bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016c6:	4906      	ldr	r1, [pc, #24]	; (80016e0 <HAL_HSEM_Release+0x24>)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58026400 	.word	0x58026400

080016e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d00a      	beq.n	800170e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e040      	b.n	800178c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e03e      	b.n	800178c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001716:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800171e:	f7ff fbd7 	bl	8000ed0 <HAL_GetTick>
 8001722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001724:	e009      	b.n	800173a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001726:	f7ff fbd3 	bl	8000ed0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001734:	d901      	bls.n	800173a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e028      	b.n	800178c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001746:	d1ee      	bne.n	8001726 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b1e      	cmp	r3, #30
 800174c:	d008      	beq.n	8001760 <HAL_PWREx_ConfigSupply+0x7c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b2e      	cmp	r3, #46	; 0x2e
 8001752:	d005      	beq.n	8001760 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b1d      	cmp	r3, #29
 8001758:	d002      	beq.n	8001760 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b2d      	cmp	r3, #45	; 0x2d
 800175e:	d114      	bne.n	800178a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001760:	f7ff fbb6 	bl	8000ed0 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001766:	e009      	b.n	800177c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001768:	f7ff fbb2 	bl	8000ed0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001776:	d901      	bls.n	800177c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e007      	b.n	800178c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_PWREx_ConfigSupply+0xb0>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d1ee      	bne.n	8001768 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58024800 	.word	0x58024800

08001798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f000 bc48 	b.w	800203c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8088 	beq.w	80018ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b99      	ldr	r3, [pc, #612]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d007      	beq.n	80017e0 <HAL_RCC_OscConfig+0x48>
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d111      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b8f      	ldr	r3, [pc, #572]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d06d      	beq.n	80018c8 <HAL_RCC_OscConfig+0x130>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d169      	bne.n	80018c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f000 bc21 	b.w	800203c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x7a>
 8001804:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a85      	ldr	r2, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x9c>
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a80      	ldr	r2, [pc, #512]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7d      	ldr	r2, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0xc0>
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a77      	ldr	r2, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a74      	ldr	r2, [pc, #464]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xd8>
 8001858:	4b71      	ldr	r3, [pc, #452]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a70      	ldr	r2, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6d      	ldr	r2, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fb2a 	bl	8000ed0 <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fb26 	bl	8000ed0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e3d4      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xe8>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb16 	bl	8000ed0 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb12 	bl	8000ed0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e3c0      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x110>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ca 	beq.w	8001a6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e2:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_OscConfig+0x166>
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	2b18      	cmp	r3, #24
 80018f2:	d156      	bne.n	80019a2 <HAL_RCC_OscConfig+0x20a>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d151      	bne.n	80019a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fe:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x17e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e392      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0219 	bic.w	r2, r3, #25
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	493f      	ldr	r1, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fad2 	bl	8000ed0 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff face 	bl	8000ed0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e37c      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	f7ff faef 	bl	8000f30 <HAL_GetREVID>
 8001952:	4603      	mov	r3, r0
 8001954:	f241 0203 	movw	r2, #4099	; 0x1003
 8001958:	4293      	cmp	r3, r2
 800195a:	d817      	bhi.n	800198c <HAL_RCC_OscConfig+0x1f4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b40      	cmp	r3, #64	; 0x40
 8001962:	d108      	bne.n	8001976 <HAL_RCC_OscConfig+0x1de>
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800196c:	4a2c      	ldr	r2, [pc, #176]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800196e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001972:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001974:	e07a      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	031b      	lsls	r3, r3, #12
 8001984:	4926      	ldr	r1, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198a:	e06f      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	4921      	ldr	r1, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a0:	e064      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d047      	beq.n	8001a3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0219 	bic.w	r2, r3, #25
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	491a      	ldr	r1, [pc, #104]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa88 	bl	8000ed0 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa84 	bl	8000ed0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e332      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	f7ff faa5 	bl	8000f30 <HAL_GetREVID>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d819      	bhi.n	8001a24 <HAL_RCC_OscConfig+0x28c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d108      	bne.n	8001a0a <HAL_RCC_OscConfig+0x272>
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a06:	6053      	str	r3, [r2, #4]
 8001a08:	e030      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	031b      	lsls	r3, r3, #12
 8001a18:	4901      	ldr	r1, [pc, #4]	; (8001a20 <HAL_RCC_OscConfig+0x288>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
 8001a1e:	e025      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
 8001a20:	58024400 	.word	0x58024400
 8001a24:	4b9a      	ldr	r3, [pc, #616]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	4997      	ldr	r1, [pc, #604]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	e018      	b.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b95      	ldr	r3, [pc, #596]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fa43 	bl	8000ed0 <HAL_GetTick>
 8001a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fa3f 	bl	8000ed0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e2ed      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a60:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a9 	beq.w	8001bcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a84:	4b82      	ldr	r3, [pc, #520]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d007      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x308>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b18      	cmp	r3, #24
 8001a94:	d13a      	bne.n	8001b0c <HAL_RCC_OscConfig+0x374>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d135      	bne.n	8001b0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa0:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x320>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e2c1      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab8:	f7ff fa3a 	bl	8000f30 <HAL_GetREVID>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d817      	bhi.n	8001af6 <HAL_RCC_OscConfig+0x35e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x348>
 8001ace:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ad6:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001adc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ade:	e075      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	069b      	lsls	r3, r3, #26
 8001aee:	4968      	ldr	r1, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af4:	e06a      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	061b      	lsls	r3, r3, #24
 8001b04:	4962      	ldr	r1, [pc, #392]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0a:	e05f      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d042      	beq.n	8001b9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b14:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9d6 	bl	8000ed0 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b28:	f7ff f9d2 	bl	8000ed0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e280      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3a:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b46:	f7ff f9f3 	bl	8000f30 <HAL_GetREVID>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d817      	bhi.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d108      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3d6>
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b64:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b6a:	6053      	str	r3, [r2, #4]
 8001b6c:	e02e      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
 8001b6e:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	4944      	ldr	r1, [pc, #272]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
 8001b82:	e023      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	493f      	ldr	r1, [pc, #252]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f993 	bl	8000ed0 <HAL_GetTick>
 8001baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bae:	f7ff f98f 	bl	8000ed0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e23d      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d036      	beq.n	8001c46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d019      	beq.n	8001c14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f970 	bl	8000ed0 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff f96c 	bl	8000ed0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e21a      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x45c>
 8001c12:	e018      	b.n	8001c46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f956 	bl	8000ed0 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff f952 	bl	8000ed0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e200      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d039      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c66:	f7ff f933 	bl	8000ed0 <HAL_GetTick>
 8001c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6e:	f7ff f92f 	bl	8000ed0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1dd      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
 8001c8c:	e01b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a9a      	ldr	r2, [pc, #616]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f916 	bl	8000ed0 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca8:	f7ff f912 	bl	8000ed0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1c0      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cba:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8081 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd4:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a8b      	ldr	r2, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x770>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff f8f6 	bl	8000ed0 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7ff f8f2 	bl	8000ed0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1a0      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x770>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d106      	bne.n	8001d1c <HAL_RCC_OscConfig+0x584>
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a7c      	ldr	r2, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	e02d      	b.n	8001d78 <HAL_RCC_OscConfig+0x5e0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5a6>
 8001d24:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a76      	ldr	r2, [pc, #472]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d30:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a73      	ldr	r2, [pc, #460]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d36:	f023 0304 	bic.w	r3, r3, #4
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x5e0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5c8>
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
 8001d52:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a6b      	ldr	r2, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x5e0>
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a64      	ldr	r2, [pc, #400]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d015      	beq.n	8001dac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f8a6 	bl	8000ed0 <HAL_GetTick>
 8001d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7ff f8a2 	bl	8000ed0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e14e      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9e:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ee      	beq.n	8001d88 <HAL_RCC_OscConfig+0x5f0>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f890 	bl	8000ed0 <HAL_GetTick>
 8001db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f88c 	bl	8000ed0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e138      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dca:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ee      	bne.n	8001db4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 812d 	beq.w	800203a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de8:	2b18      	cmp	r3, #24
 8001dea:	f000 80bd 	beq.w	8001f68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 809e 	bne.w	8001f34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a41      	ldr	r2, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f864 	bl	8000ed0 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f860 	bl	8000ed0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e10e      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_OscConfig+0x774>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	4931      	ldr	r1, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	628b      	str	r3, [r1, #40]	; 0x28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	3b01      	subs	r3, #1
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	061b      	lsls	r3, r3, #24
 8001e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e74:	4923      	ldr	r1, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e92:	00d2      	lsls	r2, r2, #3
 8001e94:	491b      	ldr	r1, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f023 020c 	bic.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4917      	ldr	r1, [pc, #92]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f023 0202 	bic.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	4912      	ldr	r1, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe ffe9 	bl	8000ed0 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	e011      	b.n	8001f26 <HAL_RCC_OscConfig+0x78e>
 8001f02:	bf00      	nop
 8001f04:	58024400 	.word	0x58024400
 8001f08:	58024800 	.word	0x58024800
 8001f0c:	fffffc0c 	.word	0xfffffc0c
 8001f10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ffdc 	bl	8000ed0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e08a      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x77c>
 8001f32:	e082      	b.n	800203a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a42      	ldr	r2, [pc, #264]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe ffc6 	bl	8000ed0 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe ffc2 	bl	8000ed0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e070      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x7b0>
 8001f66:	e068      	b.n	800203a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d031      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0203 	and.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d12a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d122      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0a5b      	lsrs	r3, r3, #9
 8001fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d111      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0e1b      	lsrs	r3, r3, #24
 8001fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e02b      	b.n	800203c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d01f      	beq.n	800203a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002006:	f7fe ff63 	bl	8000ed0 <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800200c:	bf00      	nop
 800200e:	f7fe ff5f 	bl	8000ed0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	4293      	cmp	r3, r2
 8002018:	d0f9      	beq.n	800200e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 800201c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x8b0>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002026:	00d2      	lsls	r2, r2, #3
 8002028:	4906      	ldr	r1, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 800202a:	4313      	orrs	r3, r2
 800202c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_RCC_OscConfig+0x8ac>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	58024400 	.word	0x58024400
 8002048:	ffff0007 	.word	0xffff0007

0800204c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e19c      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	4985      	ldr	r1, [pc, #532]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e184      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4975      	ldr	r1, [pc, #468]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	496a      	ldr	r1, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	429a      	cmp	r2, r3
 8002106:	d908      	bls.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	495e      	ldr	r1, [pc, #376]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d908      	bls.n	8002148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4953      	ldr	r1, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	429a      	cmp	r2, r3
 8002162:	d908      	bls.n	8002176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f023 020f 	bic.w	r2, r3, #15
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4947      	ldr	r1, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002172:	4313      	orrs	r3, r2
 8002174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d055      	beq.n	800222e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4940      	ldr	r1, [pc, #256]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002190:	4313      	orrs	r3, r2
 8002192:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ea      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0de      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0d6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 0207 	bic.w	r2, r3, #7
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fe:	f7fe fe67 	bl	8000ed0 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	e00a      	b.n	800221c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe fe63 	bl	8000ed0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0be      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	429a      	cmp	r2, r3
 800222c:	d1eb      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	429a      	cmp	r2, r3
 8002248:	d208      	bcs.n	800225c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002258:	4313      	orrs	r3, r2
 800225a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d214      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e086      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
 800228c:	52002000 	.word	0x52002000
 8002290:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4939      	ldr	r1, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	492e      	ldr	r1, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002308:	429a      	cmp	r2, r3
 800230a:	d208      	bcs.n	800231e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800231a:	4313      	orrs	r3, r2
 800231c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4917      	ldr	r1, [pc, #92]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002348:	4313      	orrs	r3, r2
 800234a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800234c:	f000 f834 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	4912      	ldr	r1, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 8002374:	5cd3      	ldrb	r3, [r2, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x360>)
 8002382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x364>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x368>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fd54 	bl	8000e3c <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
 80023a8:	0800460c 	.word	0x0800460c
 80023ac:	24000004 	.word	0x24000004
 80023b0:	24000000 	.word	0x24000000
 80023b4:	2400000c 	.word	0x2400000c

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4bb3      	ldr	r3, [pc, #716]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	f200 8155 	bhi.w	8002676 <HAL_RCC_GetSysClockFreq+0x2be>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002439 	.word	0x08002439
 80023d8:	08002677 	.word	0x08002677
 80023dc:	08002677 	.word	0x08002677
 80023e0:	08002677 	.word	0x08002677
 80023e4:	08002677 	.word	0x08002677
 80023e8:	08002677 	.word	0x08002677
 80023ec:	08002677 	.word	0x08002677
 80023f0:	08002677 	.word	0x08002677
 80023f4:	0800245f 	.word	0x0800245f
 80023f8:	08002677 	.word	0x08002677
 80023fc:	08002677 	.word	0x08002677
 8002400:	08002677 	.word	0x08002677
 8002404:	08002677 	.word	0x08002677
 8002408:	08002677 	.word	0x08002677
 800240c:	08002677 	.word	0x08002677
 8002410:	08002677 	.word	0x08002677
 8002414:	08002465 	.word	0x08002465
 8002418:	08002677 	.word	0x08002677
 800241c:	08002677 	.word	0x08002677
 8002420:	08002677 	.word	0x08002677
 8002424:	08002677 	.word	0x08002677
 8002428:	08002677 	.word	0x08002677
 800242c:	08002677 	.word	0x08002677
 8002430:	08002677 	.word	0x08002677
 8002434:	0800246b 	.word	0x0800246b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002444:	4b91      	ldr	r3, [pc, #580]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	4a90      	ldr	r2, [pc, #576]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002456:	e111      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002458:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800245a:	61bb      	str	r3, [r7, #24]
      break;
 800245c:	e10e      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800245e:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002460:	61bb      	str	r3, [r7, #24]
      break;
 8002462:	e10b      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002464:	4b8c      	ldr	r3, [pc, #560]	; (8002698 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002466:	61bb      	str	r3, [r7, #24]
      break;
 8002468:	e108      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002474:	4b85      	ldr	r3, [pc, #532]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002480:	4b82      	ldr	r3, [pc, #520]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800248a:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80e1 	beq.w	8002670 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f000 8083 	beq.w	80025bc <HAL_RCC_GetSysClockFreq+0x204>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f200 80a1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x248>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x114>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d056      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ca:	e099      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02d      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	4a6b      	ldr	r2, [pc, #428]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002512:	ed97 6a02 	vldr	s12, [r7, #8]
 8002516:	eddf 5a61 	vldr	s11, [pc, #388]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800251a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002532:	e087      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002556:	ed97 6a02 	vldr	s12, [r7, #8]
 800255a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800255e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002576:	e065      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259a:	ed97 6a02 	vldr	s12, [r7, #8]
 800259e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ba:	e043      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025de:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025fe:	e021      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800260e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002622:	ed97 6a02 	vldr	s12, [r7, #8]
 8002626:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800262a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002642:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	0a5b      	lsrs	r3, r3, #9
 800264a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264e:	3301      	adds	r3, #1
 8002650:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800265c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800266e:	e005      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
      break;
 8002674:	e002      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002678:	61bb      	str	r3, [r7, #24]
      break;
 800267a:	bf00      	nop
  }

  return sysclockfreq;
 800267c:	69bb      	ldr	r3, [r7, #24]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	58024400 	.word	0x58024400
 8002690:	03d09000 	.word	0x03d09000
 8002694:	003d0900 	.word	0x003d0900
 8002698:	017d7840 	.word	0x017d7840
 800269c:	46000000 	.word	0x46000000
 80026a0:	4c742400 	.word	0x4c742400
 80026a4:	4a742400 	.word	0x4a742400
 80026a8:	4bbebc20 	.word	0x4bbebc20

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0ca      	sub	sp, #296	; 0x128
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80026d0:	2500      	movs	r5, #0
 80026d2:	ea54 0305 	orrs.w	r3, r4, r5
 80026d6:	d049      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026e2:	d02f      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026e8:	d828      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ee:	d01a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f4:	d822      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fe:	d007      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002700:	e01c      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002702:	4bb8      	ldr	r3, [pc, #736]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	4ab7      	ldr	r2, [pc, #732]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800270e:	e01a      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002714:	3308      	adds	r3, #8
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f9d1 	bl	8003ac0 <RCCEx_PLL2_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002724:	e00f      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800272a:	3328      	adds	r3, #40	; 0x28
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fa78 	bl	8003c24 <RCCEx_PLL3_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800274e:	4ba5      	ldr	r3, [pc, #660]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275c:	4aa1      	ldr	r2, [pc, #644]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275e:	430b      	orrs	r3, r1
 8002760:	6513      	str	r3, [r2, #80]	; 0x50
 8002762:	e003      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002778:	f04f 0900 	mov.w	r9, #0
 800277c:	ea58 0309 	orrs.w	r3, r8, r9
 8002780:	d047      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	2b04      	cmp	r3, #4
 800278a:	d82a      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a9 	.word	0x080027a9
 8002798:	080027b7 	.word	0x080027b7
 800279c:	080027cd 	.word	0x080027cd
 80027a0:	080027eb 	.word	0x080027eb
 80027a4:	080027eb 	.word	0x080027eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a8:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4a8d      	ldr	r2, [pc, #564]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b4:	e01a      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ba:	3308      	adds	r3, #8
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f97e 	bl	8003ac0 <RCCEx_PLL2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ca:	e00f      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d0:	3328      	adds	r3, #40	; 0x28
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fa25 	bl	8003c24 <RCCEx_PLL3_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027e0:	e004      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027e8:	e000      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b7b      	ldr	r3, [pc, #492]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	f023 0107 	bic.w	r1, r3, #7
 80027fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002804:	430b      	orrs	r3, r1
 8002806:	6513      	str	r3, [r2, #80]	; 0x50
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800280e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800281e:	f04f 0b00 	mov.w	fp, #0
 8002822:	ea5a 030b 	orrs.w	r3, sl, fp
 8002826:	d04c      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	d030      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d829      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800283a:	2bc0      	cmp	r3, #192	; 0xc0
 800283c:	d02d      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800283e:	2bc0      	cmp	r3, #192	; 0xc0
 8002840:	d825      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d018      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d821      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d007      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002852:	e01c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002860:	e01c      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002866:	3308      	adds	r3, #8
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f001 f928 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287c:	3328      	adds	r3, #40	; 0x28
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f9cf 	bl	8003c24 <RCCEx_PLL3_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002894:	e002      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800289a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800289c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028a4:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80028ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	4a4c      	ldr	r2, [pc, #304]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6513      	str	r3, [r2, #80]	; 0x50
 80028b8:	e003      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80028dc:	460b      	mov	r3, r1
 80028de:	4313      	orrs	r3, r2
 80028e0:	d053      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ee:	d035      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80028f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f4:	d82e      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028fa:	d031      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002900:	d828      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002906:	d01a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290c:	d822      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002916:	d007      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002918:	e01c      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291a:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002926:	e01c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800292c:	3308      	adds	r3, #8
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f8c5 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800293c:	e011      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002942:	3328      	adds	r3, #40	; 0x28
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f001 f96c 	bl	8003c24 <RCCEx_PLL3_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002952:	e006      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800295a:	e002      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800297c:	430b      	orrs	r3, r1
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	e003      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002996:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80029a4:	460b      	mov	r3, r1
 80029a6:	4313      	orrs	r3, r2
 80029a8:	d056      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b6:	d038      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029bc:	d831      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c2:	d034      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80029c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c8:	d82b      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ce:	d01d      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029d4:	d825      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029e0:	e01f      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029e2:	bf00      	nop
 80029e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4ba2      	ldr	r3, [pc, #648]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4aa1      	ldr	r2, [pc, #644]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029f4:	e01c      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029fa:	3308      	adds	r3, #8
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f85e 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a10:	3328      	adds	r3, #40	; 0x28
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f905 	bl	8003c24 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a38:	4b8e      	ldr	r3, [pc, #568]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a48:	4a8a      	ldr	r2, [pc, #552]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002a72:	460b      	mov	r3, r1
 8002a74:	4313      	orrs	r3, r2
 8002a76:	d03a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	2b30      	cmp	r3, #48	; 0x30
 8002a80:	d01f      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a82:	2b30      	cmp	r3, #48	; 0x30
 8002a84:	d819      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d815      	bhi.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d111      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	4a76      	ldr	r2, [pc, #472]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002aa2:	e011      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f807 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ab8:	e006      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae4:	e003      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	d051      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b18:	d035      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1e:	d82e      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b24:	d031      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b2a:	d828      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b30:	d01a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b36:	d822      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b40:	d007      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b42:	e01c      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b50:	e01c      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b56:	3308      	adds	r3, #8
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ffb0 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b66:	e011      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6c:	3328      	adds	r3, #40	; 0x28
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f857 	bl	8003c24 <RCCEx_PLL3_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ba8:	e003      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002bc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	d056      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d033      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be2:	d82c      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be8:	d02f      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bee:	d826      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf4:	d02b      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bfa:	d820      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c00:	d012      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c06:	d81a      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d115      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c16:	3308      	adds	r3, #8
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 ff50 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c26:	e015      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2c:	3328      	adds	r3, #40	; 0x28
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fff7 	bl	8003c24 <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6a:	4a02      	ldr	r2, [pc, #8]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6513      	str	r3, [r2, #80]	; 0x50
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d055      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d033      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb2:	d82c      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d02f      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d826      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc4:	d02b      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cca:	d820      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d012      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd6:	d81a      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce0:	d115      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fee8 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cf6:	e015      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	3328      	adds	r3, #40	; 0x28
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 ff8f 	bl	8003c24 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d2c:	4ba3      	ldr	r3, [pc, #652]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d3c:	4a9f      	ldr	r2, [pc, #636]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	d037      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d76:	d00e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7c:	d816      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d86:	d111      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4a8b      	ldr	r2, [pc, #556]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d94:	e00f      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fe8e 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002daa:	e004      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002df2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d039      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d81c      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e49 	.word	0x08002e49
 8002e10:	08002e1d 	.word	0x08002e1d
 8002e14:	08002e2b 	.word	0x08002e2b
 8002e18:	08002e49 	.word	0x08002e49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e28:	e00f      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e2e:	3308      	adds	r3, #8
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fe44 	bl	8003ac0 <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e3e:	e004      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e46:	e000      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e52:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f023 0103 	bic.w	r1, r3, #3
 8002e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e66:	e003      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f000 809f 	beq.w	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe f817 	bl	8000ed0 <HAL_GetTick>
 8002ea2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe f812 	bl	8000ed0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	; 0x64
 8002eb6:	d903      	bls.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ebe:	e005      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ed      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d179      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee0:	4053      	eors	r3, r2
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef6:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f0e:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d118      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd ffd4 	bl	8000ed0 <HAL_GetTick>
 8002f28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2c:	e00d      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fd ffcf 	bl	8000ed0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d903      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002f48:	e005      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0eb      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d129      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f6e:	d10e      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f80:	091a      	lsrs	r2, r3, #4
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6113      	str	r3, [r2, #16]
 8002f8c:	e005      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f98:	6113      	str	r3, [r2, #16]
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	e00e      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58024800 	.word	0x58024800
 8002fc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f002 0301 	and.w	r3, r2, #1
 8002fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f000 8089 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff8:	2b28      	cmp	r3, #40	; 0x28
 8002ffa:	d86b      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	080030dd 	.word	0x080030dd
 8003008:	080030d5 	.word	0x080030d5
 800300c:	080030d5 	.word	0x080030d5
 8003010:	080030d5 	.word	0x080030d5
 8003014:	080030d5 	.word	0x080030d5
 8003018:	080030d5 	.word	0x080030d5
 800301c:	080030d5 	.word	0x080030d5
 8003020:	080030d5 	.word	0x080030d5
 8003024:	080030a9 	.word	0x080030a9
 8003028:	080030d5 	.word	0x080030d5
 800302c:	080030d5 	.word	0x080030d5
 8003030:	080030d5 	.word	0x080030d5
 8003034:	080030d5 	.word	0x080030d5
 8003038:	080030d5 	.word	0x080030d5
 800303c:	080030d5 	.word	0x080030d5
 8003040:	080030d5 	.word	0x080030d5
 8003044:	080030bf 	.word	0x080030bf
 8003048:	080030d5 	.word	0x080030d5
 800304c:	080030d5 	.word	0x080030d5
 8003050:	080030d5 	.word	0x080030d5
 8003054:	080030d5 	.word	0x080030d5
 8003058:	080030d5 	.word	0x080030d5
 800305c:	080030d5 	.word	0x080030d5
 8003060:	080030d5 	.word	0x080030d5
 8003064:	080030dd 	.word	0x080030dd
 8003068:	080030d5 	.word	0x080030d5
 800306c:	080030d5 	.word	0x080030d5
 8003070:	080030d5 	.word	0x080030d5
 8003074:	080030d5 	.word	0x080030d5
 8003078:	080030d5 	.word	0x080030d5
 800307c:	080030d5 	.word	0x080030d5
 8003080:	080030d5 	.word	0x080030d5
 8003084:	080030dd 	.word	0x080030dd
 8003088:	080030d5 	.word	0x080030d5
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030d5 	.word	0x080030d5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030d5 	.word	0x080030d5
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030dd 	.word	0x080030dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ac:	3308      	adds	r3, #8
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fd05 	bl	8003ac0 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c2:	3328      	adds	r3, #40	; 0x28
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fdac 	bl	8003c24 <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030e6:	4bbf      	ldr	r3, [pc, #764]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f4:	4abb      	ldr	r2, [pc, #748]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6553      	str	r3, [r2, #84]	; 0x54
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0302 	and.w	r3, r2, #2
 8003110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800311a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d041      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312a:	2b05      	cmp	r3, #5
 800312c:	d824      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003181 	.word	0x08003181
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003163 	.word	0x08003163
 8003140:	08003181 	.word	0x08003181
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003150:	3308      	adds	r3, #8
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fcb3 	bl	8003ac0 <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003160:	e00f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003166:	3328      	adds	r3, #40	; 0x28
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fd5a 	bl	8003c24 <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800318a:	4b96      	ldr	r3, [pc, #600]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f023 0107 	bic.w	r1, r3, #7
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003198:	4a92      	ldr	r2, [pc, #584]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6553      	str	r3, [r2, #84]	; 0x54
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 0304 	and.w	r3, r2, #4
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	d044      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d825      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003229 	.word	0x08003229
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003229 	.word	0x08003229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f8:	3308      	adds	r3, #8
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fc5f 	bl	8003ac0 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320e:	3328      	adds	r3, #40	; 0x28
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fd06 	bl	8003c24 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f023 0107 	bic.w	r1, r3, #7
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003242:	4a68      	ldr	r2, [pc, #416]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6593      	str	r3, [r2, #88]	; 0x58
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f002 0320 	and.w	r3, r2, #32
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d055      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800327e:	d033      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d82c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d826      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003296:	d02b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800329c:	d820      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a2:	d012      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a8:	d81a      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80032ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032b2:	d115      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b8:	3308      	adds	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fbff 	bl	8003ac0 <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fca6 	bl	8003c24 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032e8:	bf00      	nop
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6553      	str	r3, [r2, #84]	; 0x54
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d058      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800334a:	d033      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800334c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003350:	d82c      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d02f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d826      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800335e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003368:	d820      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d012      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	d81a      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d115      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fb99 	bl	8003ac0 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003394:	e015      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339a:	3328      	adds	r3, #40	; 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fc40 	bl	8003c24 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033aa:	e00a      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033b2:	e006      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033da:	4a02      	ldr	r2, [pc, #8]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033dc:	430b      	orrs	r3, r1
 80033de:	6593      	str	r3, [r2, #88]	; 0x58
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d055      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003418:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800341c:	d033      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800341e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003422:	d82c      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003428:	d02f      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d826      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003430:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003434:	d02b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800343a:	d820      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003440:	d012      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003446:	d81a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d115      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003456:	3308      	adds	r3, #8
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fb30 	bl	8003ac0 <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003466:	e015      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346c:	3328      	adds	r3, #40	; 0x28
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fbd7 	bl	8003c24 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800349c:	4ba1      	ldr	r3, [pc, #644]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034ac:	4a9d      	ldr	r2, [pc, #628]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0308 	and.w	r3, r2, #8
 80034c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d01e      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ee:	3328      	adds	r3, #40	; 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fb96 	bl	8003c24 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003504:	4b87      	ldr	r3, [pc, #540]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f002 0310 	and.w	r3, r2, #16
 8003526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	d01e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	3328      	adds	r3, #40	; 0x28
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fb67 	bl	8003c24 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003562:	4b70      	ldr	r3, [pc, #448]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003572:	4a6c      	ldr	r2, [pc, #432]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800358e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d03e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a4:	d022      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035aa:	d81b      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d00b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80035b6:	e015      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035bc:	3308      	adds	r3, #8
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa7d 	bl	8003ac0 <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035cc:	e00f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d2:	3328      	adds	r3, #40	; 0x28
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fb24 	bl	8003c24 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f6:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003606:	4a47      	ldr	r2, [pc, #284]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003608:	430b      	orrs	r3, r1
 800360a:	6593      	str	r3, [r2, #88]	; 0x58
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003622:	67bb      	str	r3, [r7, #120]	; 0x78
 8003624:	2300      	movs	r3, #0
 8003626:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800363e:	d01f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003644:	d818      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800364c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003650:	d007      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4a32      	ldr	r2, [pc, #200]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003660:	e00f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003666:	3328      	adds	r3, #40	; 0x28
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fada 	bl	8003c24 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	4a22      	ldr	r2, [pc, #136]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6553      	str	r3, [r2, #84]	; 0x54
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80036b6:	673b      	str	r3, [r7, #112]	; 0x70
 80036b8:	2300      	movs	r3, #0
 80036ba:	677b      	str	r3, [r7, #116]	; 0x74
 80036bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80036c0:	460b      	mov	r3, r1
 80036c2:	4313      	orrs	r3, r2
 80036c4:	d034      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036e4:	e00e      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9e6 	bl	8003ac0 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	4a02      	ldr	r2, [pc, #8]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371c:	430b      	orrs	r3, r1
 800371e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800373c:	66bb      	str	r3, [r7, #104]	; 0x68
 800373e:	2300      	movs	r3, #0
 8003740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d00c      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	3328      	adds	r3, #40	; 0x28
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa65 	bl	8003c24 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003772:	663b      	str	r3, [r7, #96]	; 0x60
 8003774:	2300      	movs	r3, #0
 8003776:	667b      	str	r3, [r7, #100]	; 0x64
 8003778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d038      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378e:	d018      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003794:	d811      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379a:	d014      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d80b      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037aa:	d106      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4bc3      	ldr	r3, [pc, #780]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4ac2      	ldr	r2, [pc, #776]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037c0:	e004      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d4:	4bb9      	ldr	r3, [pc, #740]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e4:	4ab5      	ldr	r2, [pc, #724]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6553      	str	r3, [r2, #84]	; 0x54
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003800:	65bb      	str	r3, [r7, #88]	; 0x58
 8003802:	2300      	movs	r3, #0
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4baa      	ldr	r3, [pc, #680]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4aa7      	ldr	r2, [pc, #668]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
 8003832:	2300      	movs	r3, #0
 8003834:	657b      	str	r3, [r7, #84]	; 0x54
 8003836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003840:	4b9e      	ldr	r3, [pc, #632]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003850:	4a9a      	ldr	r2, [pc, #616]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
 8003864:	2300      	movs	r3, #0
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003872:	4b92      	ldr	r3, [pc, #584]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	4a8e      	ldr	r2, [pc, #568]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	2300      	movs	r3, #0
 8003896:	647b      	str	r3, [r7, #68]	; 0x44
 8003898:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a2:	4b86      	ldr	r3, [pc, #536]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	4a85      	ldr	r2, [pc, #532]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ac:	6113      	str	r3, [r2, #16]
 80038ae:	4b83      	ldr	r3, [pc, #524]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b0:	6919      	ldr	r1, [r3, #16]
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80038ba:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ce:	2300      	movs	r3, #0
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038dc:	4b77      	ldr	r3, [pc, #476]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	4a74      	ldr	r2, [pc, #464]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800390c:	4b6b      	ldr	r3, [pc, #428]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	4a67      	ldr	r2, [pc, #412]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	2100      	movs	r1, #0
 800392c:	62b9      	str	r1, [r7, #40]	; 0x28
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d011      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	3308      	adds	r3, #8
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f8ba 	bl	8003ac0 <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	2100      	movs	r1, #0
 800396c:	6239      	str	r1, [r7, #32]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d011      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	3308      	adds	r3, #8
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f89a 	bl	8003ac0 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	2100      	movs	r1, #0
 80039ac:	61b9      	str	r1, [r7, #24]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d011      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2102      	movs	r1, #2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f87a 	bl	8003ac0 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	2100      	movs	r1, #0
 80039ec:	6139      	str	r1, [r7, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	3328      	adds	r3, #40	; 0x28
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f90c 	bl	8003c24 <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d011      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a42:	3328      	adds	r3, #40	; 0x28
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f8ec 	bl	8003c24 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f8cc 	bl	8003c24 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003aa2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abc:	58024400 	.word	0x58024400

08003ac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d101      	bne.n	8003ade <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e099      	b.n	8003c12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ade:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4e      	ldr	r2, [pc, #312]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aea:	f7fd f9f1 	bl	8000ed0 <HAL_GetTick>
 8003aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003af2:	f7fd f9ed 	bl	8000ed0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e086      	b.n	8003c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b04:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b10:	4b42      	ldr	r3, [pc, #264]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	493f      	ldr	r1, [pc, #252]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	628b      	str	r3, [r1, #40]	; 0x28
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	025b      	lsls	r3, r3, #9
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b54:	4931      	ldr	r1, [pc, #196]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	492d      	ldr	r1, [pc, #180]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	f023 0220 	bic.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	4928      	ldr	r1, [pc, #160]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b84:	f023 0310 	bic.w	r3, r3, #16
 8003b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <RCCEx_PLL2_Config+0x160>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	69d2      	ldr	r2, [r2, #28]
 8003b96:	00d2      	lsls	r2, r2, #3
 8003b98:	4920      	ldr	r1, [pc, #128]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	f043 0310 	orr.w	r3, r3, #16
 8003ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bbc:	e00f      	b.n	8003bde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bd0:	e005      	b.n	8003bde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003be4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bea:	f7fd f971 	bl	8000ed0 <HAL_GetTick>
 8003bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bf0:	e008      	b.n	8003c04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bf2:	f7fd f96d 	bl	8000ed0 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e006      	b.n	8003c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <RCCEx_PLL2_Config+0x15c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	ffff0007 	.word	0xffff0007

08003c24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c32:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d101      	bne.n	8003c42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e099      	b.n	8003d76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c42:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4e:	f7fd f93f 	bl	8000ed0 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c56:	f7fd f93b 	bl	8000ed0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e086      	b.n	8003d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c68:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	051b      	lsls	r3, r3, #20
 8003c82:	493f      	ldr	r1, [pc, #252]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	628b      	str	r3, [r1, #40]	; 0x28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	025b      	lsls	r3, r3, #9
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cb8:	4931      	ldr	r1, [pc, #196]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	492d      	ldr	r1, [pc, #180]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	4928      	ldr	r1, [pc, #160]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <RCCEx_PLL3_Config+0x160>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	69d2      	ldr	r2, [r2, #28]
 8003cfa:	00d2      	lsls	r2, r2, #3
 8003cfc:	4920      	ldr	r1, [pc, #128]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d20:	e00f      	b.n	8003d42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d34:	e005      	b.n	8003d42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4e:	f7fd f8bf 	bl	8000ed0 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d56:	f7fd f8bb 	bl	8000ed0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e006      	b.n	8003d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <RCCEx_PLL3_Config+0x15c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	ffff0007 	.word	0xffff0007

08003d88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e10f      	b.n	8003fba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a87      	ldr	r2, [pc, #540]	; (8003fc4 <HAL_SPI_Init+0x23c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <HAL_SPI_Init+0x42>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a86      	ldr	r2, [pc, #536]	; (8003fc8 <HAL_SPI_Init+0x240>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00a      	beq.n	8003dca <HAL_SPI_Init+0x42>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a84      	ldr	r2, [pc, #528]	; (8003fcc <HAL_SPI_Init+0x244>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d005      	beq.n	8003dca <HAL_SPI_Init+0x42>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d901      	bls.n	8003dca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0f7      	b.n	8003fba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fbca 	bl	8004564 <SPI_GetPacketSize>
 8003dd0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7b      	ldr	r2, [pc, #492]	; (8003fc4 <HAL_SPI_Init+0x23c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00c      	beq.n	8003df6 <HAL_SPI_Init+0x6e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a79      	ldr	r2, [pc, #484]	; (8003fc8 <HAL_SPI_Init+0x240>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <HAL_SPI_Init+0x6e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a78      	ldr	r2, [pc, #480]	; (8003fcc <HAL_SPI_Init+0x244>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Init+0x6e>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d811      	bhi.n	8003e1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003dfa:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_SPI_Init+0x23c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a70      	ldr	r2, [pc, #448]	; (8003fc8 <HAL_SPI_Init+0x240>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_SPI_Init+0x8c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a6f      	ldr	r2, [pc, #444]	; (8003fcc <HAL_SPI_Init+0x244>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d104      	bne.n	8003e1e <HAL_SPI_Init+0x96>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d901      	bls.n	8003e1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0cd      	b.n	8003fba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fed2 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003e5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e64:	d119      	bne.n	8003e9a <HAL_SPI_Init+0x112>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6e:	d103      	bne.n	8003e78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10c      	bne.n	8003e9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e88:	d107      	bne.n	8003e9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00f      	beq.n	8003ec6 <HAL_SPI_Init+0x13e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d90b      	bls.n	8003ec6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	ea42 0103 	orr.w	r1, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	ea42 0103 	orr.w	r1, r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40013000 	.word	0x40013000
 8003fc8:	40003800 	.word	0x40003800
 8003fcc:	40003c00 	.word	0x40003c00

08003fd0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_SPI_Transmit+0x2a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e1e1      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004002:	f7fc ff65 	bl	8000ed0 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004020:	7efb      	ldrb	r3, [r7, #27]
 8004022:	e1cc      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_SPI_Transmit+0x60>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800403c:	7efb      	ldrb	r3, [r7, #27]
 800403e:	e1be      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2203      	movs	r2, #3
 8004044:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004090:	d108      	bne.n	80040a4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e009      	b.n	80040b8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4b96      	ldr	r3, [pc, #600]	; (8004318 <HAL_SPI_Transmit+0x348>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	88f9      	ldrh	r1, [r7, #6]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e4:	d107      	bne.n	80040f6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d947      	bls.n	800418e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80040fe:	e03f      	b.n	8004180 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d114      	bne.n	8004138 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004136:	e023      	b.n	8004180 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004138:	f7fc feca 	bl	8000ed0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d803      	bhi.n	8004150 <HAL_SPI_Transmit+0x180>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Transmit+0x186>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f936 	bl	80043c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e11e      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1b9      	bne.n	8004100 <HAL_SPI_Transmit+0x130>
 800418c:	e0f1      	b.n	8004372 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b07      	cmp	r3, #7
 8004194:	f240 80e6 	bls.w	8004364 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004198:	e05d      	b.n	8004256 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d132      	bne.n	800420e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d918      	bls.n	80041e6 <HAL_SPI_Transmit+0x216>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	1d1a      	adds	r2, r3, #4
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b02      	subs	r3, #2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80041e4:	e037      	b.n	8004256 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800420c:	e023      	b.n	8004256 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fc fe5f 	bl	8000ed0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_Transmit+0x256>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_Transmit+0x25c>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d114      	bne.n	8004256 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f8cb 	bl	80043c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0b3      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d19b      	bne.n	800419a <HAL_SPI_Transmit+0x1ca>
 8004262:	e086      	b.n	8004372 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d154      	bne.n	800431c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b03      	cmp	r3, #3
 800427c:	d918      	bls.n	80042b0 <HAL_SPI_Transmit+0x2e0>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d914      	bls.n	80042b0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b04      	subs	r3, #4
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80042ae:	e059      	b.n	8004364 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d917      	bls.n	80042ec <HAL_SPI_Transmit+0x31c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b02      	subs	r3, #2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80042ea:	e03b      	b.n	8004364 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3320      	adds	r3, #32
 80042f6:	7812      	ldrb	r2, [r2, #0]
 80042f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004316:	e025      	b.n	8004364 <HAL_SPI_Transmit+0x394>
 8004318:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431c:	f7fc fdd8 	bl	8000ed0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d803      	bhi.n	8004334 <HAL_SPI_Transmit+0x364>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d102      	bne.n	800433a <HAL_SPI_Transmit+0x36a>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d114      	bne.n	8004364 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f844 	bl	80043c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e02c      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f af79 	bne.w	8004264 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2200      	movs	r2, #0
 800437a:	2108      	movs	r1, #8
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f8c3 	bl	8004508 <SPI_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f815 	bl	80043c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80043bc:	7efb      	ldrb	r3, [r7, #27]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop

080043c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0208 	orr.w	r2, r2, #8
 80043e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0210 	orr.w	r2, r2, #16
 80043f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6919      	ldr	r1, [r3, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b3c      	ldr	r3, [pc, #240]	; (8004504 <SPI_CloseTransfer+0x13c>)
 8004414:	400b      	ands	r3, r1
 8004416:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004426:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b04      	cmp	r3, #4
 8004432:	d014      	beq.n	800445e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00f      	beq.n	800445e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0220 	orr.w	r2, r2, #32
 800445c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d014      	beq.n	8004494 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004492:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00f      	beq.n	80044be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00f      	beq.n	80044e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	f043 0208 	orr.w	r2, r3, #8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	fffffc90 	.word	0xfffffc90

08004508 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004518:	e010      	b.n	800453c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fc fcd9 	bl	8000ed0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d102      	bne.n	8004538 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e00f      	b.n	800455c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	429a      	cmp	r2, r3
 8004558:	d0df      	beq.n	800451a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3307      	adds	r3, #7
 8004582:	08db      	lsrs	r3, r3, #3
 8004584:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 f820 	bl	80045f4 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	0800461c 	.word	0x0800461c
 80045d8:	0800461c 	.word	0x0800461c
 80045dc:	0800461c 	.word	0x0800461c
 80045e0:	08004620 	.word	0x08004620

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <_init>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr

08004600 <_fini>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr
