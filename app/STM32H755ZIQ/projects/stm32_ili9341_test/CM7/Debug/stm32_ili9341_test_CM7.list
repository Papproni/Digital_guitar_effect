
stm32_ili9341_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025a80  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a7ec  0802a7ec  00040014  2**0
                  CONTENTS
  4 .ARM          00000000  0802a7ec  0802a7ec  00040014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802a7ec  0802a7ec  00040014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a7ec  0802a7ec  0003a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a7f0  0802a7f0  0003a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0802a7f4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  24000014  0802a808  00040014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000bc  0802a808  000400bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d911  00000000  00000000  00040042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f50  00000000  00000000  0004d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0004f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00050338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000395f5  00000000  00000000  00050ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3db  00000000  00000000  0008a2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177d33  00000000  00000000  000976b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020f3e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  0020f434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d54 	.word	0x08004d54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08004d54 	.word	0x08004d54

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af02      	add	r7, sp, #8
 800040a:	4604      	mov	r4, r0
 800040c:	4608      	mov	r0, r1
 800040e:	4611      	mov	r1, r2
 8000410:	461a      	mov	r2, r3
 8000412:	4623      	mov	r3, r4
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	4603      	mov	r3, r0
 8000418:	71bb      	strb	r3, [r7, #6]
 800041a:	460b      	mov	r3, r1
 800041c:	717b      	strb	r3, [r7, #5]
 800041e:	4613      	mov	r3, r2
 8000420:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000426:	7dfb      	ldrb	r3, [r7, #23]
 8000428:	2b1f      	cmp	r3, #31
 800042a:	d802      	bhi.n	8000432 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	e002      	b.n	8000438 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	3b20      	subs	r3, #32
 8000436:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000438:	2300      	movs	r3, #0
 800043a:	753b      	strb	r3, [r7, #20]
 800043c:	e012      	b.n	8000464 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800043e:	7dfa      	ldrb	r2, [r7, #23]
 8000440:	7d38      	ldrb	r0, [r7, #20]
 8000442:	7d39      	ldrb	r1, [r7, #20]
 8000444:	4c3b      	ldr	r4, [pc, #236]	; (8000534 <ILI9341_Draw_Char+0x130>)
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	4423      	add	r3, r4
 8000450:	4403      	add	r3, r0
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	f101 0318 	add.w	r3, r1, #24
 8000458:	443b      	add	r3, r7
 800045a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800045e:	7d3b      	ldrb	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	753b      	strb	r3, [r7, #20]
 8000464:	7d3b      	ldrb	r3, [r7, #20]
 8000466:	2b05      	cmp	r3, #5
 8000468:	d9e9      	bls.n	800043e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	b298      	uxth	r0, r3
 800046e:	797b      	ldrb	r3, [r7, #5]
 8000470:	b299      	uxth	r1, r3
 8000472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000474:	461a      	mov	r2, r3
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	4413      	add	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	b29a      	uxth	r2, r3
 800047e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	b29c      	uxth	r4, r3
 8000484:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	4623      	mov	r3, r4
 800048a:	f000 fddf 	bl	800104c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800048e:	2300      	movs	r3, #0
 8000490:	757b      	strb	r3, [r7, #21]
 8000492:	e047      	b.n	8000524 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000494:	2300      	movs	r3, #0
 8000496:	75bb      	strb	r3, [r7, #22]
 8000498:	e03e      	b.n	8000518 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800049a:	7d7b      	ldrb	r3, [r7, #21]
 800049c:	3318      	adds	r3, #24
 800049e:	443b      	add	r3, r7
 80004a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80004a4:	461a      	mov	r2, r3
 80004a6:	7dbb      	ldrb	r3, [r7, #22]
 80004a8:	fa42 f303 	asr.w	r3, r2, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d02e      	beq.n	8000512 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80004b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d110      	bne.n	80004dc <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	7d7b      	ldrb	r3, [r7, #21]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	4413      	add	r3, r2
 80004c4:	b298      	uxth	r0, r3
 80004c6:	797b      	ldrb	r3, [r7, #5]
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	7dbb      	ldrb	r3, [r7, #22]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	4413      	add	r3, r2
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	887a      	ldrh	r2, [r7, #2]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f000 fcf1 	bl	8000ebc <ILI9341_Draw_Pixel>
 80004da:	e01a      	b.n	8000512 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	7d7b      	ldrb	r3, [r7, #21]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80004e6:	fb11 f303 	smulbb	r3, r1, r3
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4413      	add	r3, r2
 80004ee:	b298      	uxth	r0, r3
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	7dbb      	ldrb	r3, [r7, #22]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80004fa:	fb11 f303 	smulbb	r3, r1, r3
 80004fe:	b29b      	uxth	r3, r3
 8000500:	4413      	add	r3, r2
 8000502:	b299      	uxth	r1, r3
 8000504:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000506:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000508:	887b      	ldrh	r3, [r7, #2]
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	4623      	mov	r3, r4
 800050e:	f000 fd9d 	bl	800104c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000512:	7dbb      	ldrb	r3, [r7, #22]
 8000514:	3301      	adds	r3, #1
 8000516:	75bb      	strb	r3, [r7, #22]
 8000518:	7dbb      	ldrb	r3, [r7, #22]
 800051a:	2b07      	cmp	r3, #7
 800051c:	d9bd      	bls.n	800049a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800051e:	7d7b      	ldrb	r3, [r7, #21]
 8000520:	3301      	adds	r3, #1
 8000522:	757b      	strb	r3, [r7, #21]
 8000524:	7d7b      	ldrb	r3, [r7, #21]
 8000526:	2b05      	cmp	r3, #5
 8000528:	d9b4      	bls.n	8000494 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	371c      	adds	r7, #28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}
 8000534:	08004dac 	.word	0x08004dac

08000538 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af02      	add	r7, sp, #8
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	70fb      	strb	r3, [r7, #3]
 800054a:	460b      	mov	r3, r1
 800054c:	70bb      	strb	r3, [r7, #2]
 800054e:	4613      	mov	r3, r2
 8000550:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000552:	e017      	b.n	8000584 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	7818      	ldrb	r0, [r3, #0]
 800055c:	883c      	ldrh	r4, [r7, #0]
 800055e:	78ba      	ldrb	r2, [r7, #2]
 8000560:	78f9      	ldrb	r1, [r7, #3]
 8000562:	8bbb      	ldrh	r3, [r7, #28]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	8b3b      	ldrh	r3, [r7, #24]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	4623      	mov	r3, r4
 800056c:	f7ff ff4a 	bl	8000404 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000570:	8b3b      	ldrh	r3, [r7, #24]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	4413      	add	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	4413      	add	r3, r2
 8000582:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1e3      	bne.n	8000554 <ILI9341_Draw_Text+0x1c>
    }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
	...

08000598 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800059e:	af00      	add	r7, sp, #0
 80005a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80005a4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	460a      	mov	r2, r1
 80005ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80005b0:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80005b4:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 80005b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80005ba:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d15b      	bne.n	800067c <ILI9341_Draw_Image+0xe4>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fa4d 	bl	8000a64 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 80005ca:	23f0      	movs	r3, #240	; 0xf0
 80005cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005d0:	2100      	movs	r1, #0
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f9de 	bl	8000994 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	48be      	ldr	r0, [pc, #760]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 80005de:	f001 fbe9 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	48bc      	ldr	r0, [pc, #752]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 80005e8:	f001 fbe4 	bl	8001db4 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80005f8:	e035      	b.n	8000666 <ILI9341_Draw_Image+0xce>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000600:	e019      	b.n	8000636 <ILI9341_Draw_Image+0x9e>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000602:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8000606:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800060a:	4413      	add	r3, r2
 800060c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000610:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	4413      	add	r3, r2
 8000618:	7819      	ldrb	r1, [r3, #0]
 800061a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800061e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000622:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000626:	4413      	add	r3, r2
 8000628:	460a      	mov	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800062c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000630:	3301      	adds	r3, #1
 8000632:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000636:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800063a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800063e:	d3e0      	bcc.n	8000602 <ILI9341_Draw_Image+0x6a>
				}						
				HAL_SPI_Transmit(&hspi3, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000640:	f107 010c 	add.w	r1, r7, #12
 8000644:	230a      	movs	r3, #10
 8000646:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800064a:	48a4      	ldr	r0, [pc, #656]	; (80008dc <ILI9341_Draw_Image+0x344>)
 800064c:	f004 f870 	bl	8004730 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000650:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000654:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000658:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800065c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000660:	3301      	adds	r3, #1
 8000662:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8000666:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800066a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800066e:	d9c4      	bls.n	80005fa <ILI9341_Draw_Image+0x62>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	4898      	ldr	r0, [pc, #608]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 8000676:	f001 fb9d 	bl	8001db4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi3, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 800067a:	e127      	b.n	80008cc <ILI9341_Draw_Image+0x334>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 800067c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000680:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d15b      	bne.n	8000742 <ILI9341_Draw_Image+0x1aa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f9ea 	bl	8000a64 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000690:	23f0      	movs	r3, #240	; 0xf0
 8000692:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f97b 	bl	8000994 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	488d      	ldr	r0, [pc, #564]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 80006a4:	f001 fb86 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	488a      	ldr	r0, [pc, #552]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 80006ae:	f001 fb81 	bl	8001db4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80006be:	e035      	b.n	800072c <ILI9341_Draw_Image+0x194>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80006c6:	e019      	b.n	80006fc <ILI9341_Draw_Image+0x164>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80006c8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80006cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80006d0:	4413      	add	r3, r2
 80006d2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80006d6:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	7819      	ldrb	r1, [r3, #0]
 80006e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80006e4:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80006e8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80006ec:	4413      	add	r3, r2
 80006ee:	460a      	mov	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80006f2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80006f6:	3301      	adds	r3, #1
 80006f8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80006fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000700:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000704:	d3e0      	bcc.n	80006c8 <ILI9341_Draw_Image+0x130>
				HAL_SPI_Transmit(&hspi3, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000706:	f107 010c 	add.w	r1, r7, #12
 800070a:	230a      	movs	r3, #10
 800070c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000710:	4872      	ldr	r0, [pc, #456]	; (80008dc <ILI9341_Draw_Image+0x344>)
 8000712:	f004 f80d 	bl	8004730 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8000716:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800071a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800071e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000722:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000726:	3301      	adds	r3, #1
 8000728:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800072c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000730:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000734:	d9c4      	bls.n	80006c0 <ILI9341_Draw_Image+0x128>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	4867      	ldr	r0, [pc, #412]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 800073c:	f001 fb3a 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000740:	e0c4      	b.n	80008cc <ILI9341_Draw_Image+0x334>
	else if(Orientation == SCREEN_VERTICAL_2)
 8000742:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000746:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d15b      	bne.n	8000808 <ILI9341_Draw_Image+0x270>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8000750:	2002      	movs	r0, #2
 8000752:	f000 f987 	bl	8000a64 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000756:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800075a:	22f0      	movs	r2, #240	; 0xf0
 800075c:	2100      	movs	r1, #0
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f918 	bl	8000994 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	485b      	ldr	r0, [pc, #364]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 800076a:	f001 fb23 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	4859      	ldr	r0, [pc, #356]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 8000774:	f001 fb1e 	bl	8001db4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000784:	e035      	b.n	80007f2 <ILI9341_Draw_Image+0x25a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800078c:	e019      	b.n	80007c2 <ILI9341_Draw_Image+0x22a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800078e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000792:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000796:	4413      	add	r3, r2
 8000798:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800079c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	7819      	ldrb	r1, [r3, #0]
 80007a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80007aa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80007ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007b2:	4413      	add	r3, r2
 80007b4:	460a      	mov	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80007b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007bc:	3301      	adds	r3, #1
 80007be:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80007c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ca:	d3e0      	bcc.n	800078e <ILI9341_Draw_Image+0x1f6>
				HAL_SPI_Transmit(&hspi3, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80007cc:	f107 010c 	add.w	r1, r7, #12
 80007d0:	230a      	movs	r3, #10
 80007d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007d6:	4841      	ldr	r0, [pc, #260]	; (80008dc <ILI9341_Draw_Image+0x344>)
 80007d8:	f003 ffaa 	bl	8004730 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80007dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80007e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80007e4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80007e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007ec:	3301      	adds	r3, #1
 80007ee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80007f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80007fa:	d9c4      	bls.n	8000786 <ILI9341_Draw_Image+0x1ee>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4835      	ldr	r0, [pc, #212]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 8000802:	f001 fad7 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000806:	e061      	b.n	80008cc <ILI9341_Draw_Image+0x334>
	else if(Orientation == SCREEN_VERTICAL_1)
 8000808:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800080c:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d15a      	bne.n	80008cc <ILI9341_Draw_Image+0x334>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f924 	bl	8000a64 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800081c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000820:	22f0      	movs	r2, #240	; 0xf0
 8000822:	2100      	movs	r1, #0
 8000824:	2000      	movs	r0, #0
 8000826:	f000 f8b5 	bl	8000994 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	482a      	ldr	r0, [pc, #168]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 8000830:	f001 fac0 	bl	8001db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	4827      	ldr	r0, [pc, #156]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 800083a:	f001 fabb 	bl	8001db4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800084a:	e035      	b.n	80008b8 <ILI9341_Draw_Image+0x320>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000852:	e019      	b.n	8000888 <ILI9341_Draw_Image+0x2f0>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8000854:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800085c:	4413      	add	r3, r2
 800085e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8000862:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8000866:	6812      	ldr	r2, [r2, #0]
 8000868:	4413      	add	r3, r2
 800086a:	7819      	ldrb	r1, [r3, #0]
 800086c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000870:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000878:	4413      	add	r3, r2
 800087a:	460a      	mov	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800087e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000882:	3301      	adds	r3, #1
 8000884:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000888:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800088c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000890:	d3e0      	bcc.n	8000854 <ILI9341_Draw_Image+0x2bc>
				HAL_SPI_Transmit(&hspi3, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000892:	f107 010c 	add.w	r1, r7, #12
 8000896:	230a      	movs	r3, #10
 8000898:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <ILI9341_Draw_Image+0x344>)
 800089e:	f003 ff47 	bl	8004730 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80008a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80008a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008aa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80008ae:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80008b8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80008bc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80008c0:	d9c4      	bls.n	800084c <ILI9341_Draw_Image+0x2b4>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <ILI9341_Draw_Image+0x340>)
 80008c8:	f001 fa74 	bl	8001db4 <HAL_GPIO_WritePin>
}
 80008cc:	bf00      	nop
 80008ce:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58020c00 	.word	0x58020c00
 80008dc:	24000030 	.word	0x24000030

080008e0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <ILI9341_SPI_Init+0x14>)
 80008ea:	f001 fa63 	bl	8001db4 <HAL_GPIO_WritePin>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	58020c00 	.word	0x58020c00

080008f8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000902:	1df9      	adds	r1, r7, #7
 8000904:	2301      	movs	r3, #1
 8000906:	2201      	movs	r2, #1
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <ILI9341_SPI_Send+0x20>)
 800090a:	f003 ff11 	bl	8004730 <HAL_SPI_Transmit>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24000030 	.word	0x24000030

0800091c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	480a      	ldr	r0, [pc, #40]	; (8000954 <ILI9341_Write_Command+0x38>)
 800092c:	f001 fa42 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000930:	2200      	movs	r2, #0
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <ILI9341_Write_Command+0x38>)
 8000936:	f001 fa3d 	bl	8001db4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ffdb 	bl	80008f8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000942:	2201      	movs	r2, #1
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <ILI9341_Write_Command+0x38>)
 8000948:	f001 fa34 	bl	8001db4 <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58020c00 	.word	0x58020c00

08000958 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000962:	2201      	movs	r2, #1
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <ILI9341_Write_Data+0x38>)
 8000968:	f001 fa24 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <ILI9341_Write_Data+0x38>)
 8000972:	f001 fa1f 	bl	8001db4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffbd 	bl	80008f8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <ILI9341_Write_Data+0x38>)
 8000984:	f001 fa16 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58020c00 	.word	0x58020c00

08000994 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80009b2:	202a      	movs	r0, #42	; 0x2a
 80009b4:	f7ff ffb2 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffc9 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffc4 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffbd 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffb8 	bl	8000958 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80009e8:	202b      	movs	r0, #43	; 0x2b
 80009ea:	f7ff ff97 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffae 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffa9 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffa2 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000a14:	883b      	ldrh	r3, [r7, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff9d 	bl	8000958 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000a1e:	202c      	movs	r0, #44	; 0x2c
 8000a20:	f7ff ff7c 	bl	800091c <ILI9341_Write_Command>
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <ILI9341_Reset+0x34>)
 8000a36:	f001 f9bd 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000a3a:	20c8      	movs	r0, #200	; 0xc8
 8000a3c:	f000 fef6 	bl	800182c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <ILI9341_Reset+0x34>)
 8000a46:	f001 f9b5 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000a4a:	20c8      	movs	r0, #200	; 0xc8
 8000a4c:	f000 feee 	bl	800182c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <ILI9341_Reset+0x34>)
 8000a56:	f001 f9ad 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58020c00 	.word	0x58020c00

08000a64 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000a72:	2036      	movs	r0, #54	; 0x36
 8000a74:	f7ff ff52 	bl	800091c <ILI9341_Write_Command>
HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fed7 	bl	800182c <HAL_Delay>
	
switch(screen_rotation) 
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d837      	bhi.n	8000af4 <ILI9341_Set_Rotation+0x90>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <ILI9341_Set_Rotation+0x28>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000a9d 	.word	0x08000a9d
 8000a90:	08000ab3 	.word	0x08000ab3
 8000a94:	08000ac9 	.word	0x08000ac9
 8000a98:	08000adf 	.word	0x08000adf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000a9c:	2048      	movs	r0, #72	; 0x48
 8000a9e:	f7ff ff5b 	bl	8000958 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <ILI9341_Set_Rotation+0x9c>)
 8000aa4:	22f0      	movs	r2, #240	; 0xf0
 8000aa6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <ILI9341_Set_Rotation+0xa0>)
 8000aaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000aae:	801a      	strh	r2, [r3, #0]
			break;
 8000ab0:	e021      	b.n	8000af6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000ab2:	2028      	movs	r0, #40	; 0x28
 8000ab4:	f7ff ff50 	bl	8000958 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ILI9341_Set_Rotation+0x9c>)
 8000aba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000abe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <ILI9341_Set_Rotation+0xa0>)
 8000ac2:	22f0      	movs	r2, #240	; 0xf0
 8000ac4:	801a      	strh	r2, [r3, #0]
			break;
 8000ac6:	e016      	b.n	8000af6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000ac8:	2088      	movs	r0, #136	; 0x88
 8000aca:	f7ff ff45 	bl	8000958 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <ILI9341_Set_Rotation+0x9c>)
 8000ad0:	22f0      	movs	r2, #240	; 0xf0
 8000ad2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <ILI9341_Set_Rotation+0xa0>)
 8000ad6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ada:	801a      	strh	r2, [r3, #0]
			break;
 8000adc:	e00b      	b.n	8000af6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ade:	20e8      	movs	r0, #232	; 0xe8
 8000ae0:	f7ff ff3a 	bl	8000958 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <ILI9341_Set_Rotation+0x9c>)
 8000ae6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000aea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <ILI9341_Set_Rotation+0xa0>)
 8000aee:	22f0      	movs	r2, #240	; 0xf0
 8000af0:	801a      	strh	r2, [r3, #0]
			break;
 8000af2:	e000      	b.n	8000af6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000af4:	bf00      	nop
	}
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2400000a 	.word	0x2400000a
 8000b04:	24000008 	.word	0x24000008

08000b08 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <ILI9341_Enable+0x14>)
 8000b12:	f001 f94f 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	58020c00 	.word	0x58020c00

08000b20 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000b24:	f7ff fff0 	bl	8000b08 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000b28:	f7ff feda 	bl	80008e0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000b2c:	f7ff ff7e 	bl	8000a2c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fef3 	bl	800091c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f000 fe77 	bl	800182c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000b3e:	20cb      	movs	r0, #203	; 0xcb
 8000b40:	f7ff feec 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000b44:	2039      	movs	r0, #57	; 0x39
 8000b46:	f7ff ff07 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000b4a:	202c      	movs	r0, #44	; 0x2c
 8000b4c:	f7ff ff04 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ff01 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000b56:	2034      	movs	r0, #52	; 0x34
 8000b58:	f7ff fefe 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fefb 	bl	8000958 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000b62:	20cf      	movs	r0, #207	; 0xcf
 8000b64:	f7ff feda 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fef5 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b6e:	20c1      	movs	r0, #193	; 0xc1
 8000b70:	f7ff fef2 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000b74:	2030      	movs	r0, #48	; 0x30
 8000b76:	f7ff feef 	bl	8000958 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000b7a:	20e8      	movs	r0, #232	; 0xe8
 8000b7c:	f7ff fece 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000b80:	2085      	movs	r0, #133	; 0x85
 8000b82:	f7ff fee9 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fee6 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000b8c:	2078      	movs	r0, #120	; 0x78
 8000b8e:	f7ff fee3 	bl	8000958 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000b92:	20ea      	movs	r0, #234	; 0xea
 8000b94:	f7ff fec2 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fedd 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff feda 	bl	8000958 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000ba4:	20ed      	movs	r0, #237	; 0xed
 8000ba6:	f7ff feb9 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f7ff fed4 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f7ff fed1 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000bb6:	2012      	movs	r0, #18
 8000bb8:	f7ff fece 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000bbc:	2081      	movs	r0, #129	; 0x81
 8000bbe:	f7ff fecb 	bl	8000958 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000bc2:	20f7      	movs	r0, #247	; 0xf7
 8000bc4:	f7ff feaa 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000bc8:	2020      	movs	r0, #32
 8000bca:	f7ff fec5 	bl	8000958 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000bce:	20c0      	movs	r0, #192	; 0xc0
 8000bd0:	f7ff fea4 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000bd4:	2023      	movs	r0, #35	; 0x23
 8000bd6:	f7ff febf 	bl	8000958 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000bda:	20c1      	movs	r0, #193	; 0xc1
 8000bdc:	f7ff fe9e 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f7ff feb9 	bl	8000958 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000be6:	20c5      	movs	r0, #197	; 0xc5
 8000be8:	f7ff fe98 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000bec:	203e      	movs	r0, #62	; 0x3e
 8000bee:	f7ff feb3 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f7ff feb0 	bl	8000958 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000bf8:	20c7      	movs	r0, #199	; 0xc7
 8000bfa:	f7ff fe8f 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000bfe:	2086      	movs	r0, #134	; 0x86
 8000c00:	f7ff feaa 	bl	8000958 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f7ff fe89 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000c0a:	2048      	movs	r0, #72	; 0x48
 8000c0c:	f7ff fea4 	bl	8000958 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000c10:	203a      	movs	r0, #58	; 0x3a
 8000c12:	f7ff fe83 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000c16:	2055      	movs	r0, #85	; 0x55
 8000c18:	f7ff fe9e 	bl	8000958 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000c1c:	20b1      	movs	r0, #177	; 0xb1
 8000c1e:	f7ff fe7d 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fe98 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000c28:	2018      	movs	r0, #24
 8000c2a:	f7ff fe95 	bl	8000958 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000c2e:	20b6      	movs	r0, #182	; 0xb6
 8000c30:	f7ff fe74 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000c34:	2008      	movs	r0, #8
 8000c36:	f7ff fe8f 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000c3a:	2082      	movs	r0, #130	; 0x82
 8000c3c:	f7ff fe8c 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000c40:	2027      	movs	r0, #39	; 0x27
 8000c42:	f7ff fe89 	bl	8000958 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000c46:	20f2      	movs	r0, #242	; 0xf2
 8000c48:	f7ff fe68 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fe83 	bl	8000958 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000c52:	2026      	movs	r0, #38	; 0x26
 8000c54:	f7ff fe62 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fe7d 	bl	8000958 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000c5e:	20e0      	movs	r0, #224	; 0xe0
 8000c60:	f7ff fe5c 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f7ff fe77 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000c6a:	2031      	movs	r0, #49	; 0x31
 8000c6c:	f7ff fe74 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000c70:	202b      	movs	r0, #43	; 0x2b
 8000c72:	f7ff fe71 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000c76:	200c      	movs	r0, #12
 8000c78:	f7ff fe6e 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c7c:	200e      	movs	r0, #14
 8000c7e:	f7ff fe6b 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000c82:	2008      	movs	r0, #8
 8000c84:	f7ff fe68 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000c88:	204e      	movs	r0, #78	; 0x4e
 8000c8a:	f7ff fe65 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000c8e:	20f1      	movs	r0, #241	; 0xf1
 8000c90:	f7ff fe62 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000c94:	2037      	movs	r0, #55	; 0x37
 8000c96:	f7ff fe5f 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f7ff fe5c 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000ca0:	2010      	movs	r0, #16
 8000ca2:	f7ff fe59 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f7ff fe56 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000cac:	200e      	movs	r0, #14
 8000cae:	f7ff fe53 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000cb2:	2009      	movs	r0, #9
 8000cb4:	f7ff fe50 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fe4d 	bl	8000958 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000cbe:	20e1      	movs	r0, #225	; 0xe1
 8000cc0:	f7ff fe2c 	bl	800091c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fe47 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000cca:	200e      	movs	r0, #14
 8000ccc:	f7ff fe44 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000cd0:	2014      	movs	r0, #20
 8000cd2:	f7ff fe41 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff fe3e 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000cdc:	2011      	movs	r0, #17
 8000cde:	f7ff fe3b 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f7ff fe38 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ce8:	2031      	movs	r0, #49	; 0x31
 8000cea:	f7ff fe35 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000cee:	20c1      	movs	r0, #193	; 0xc1
 8000cf0:	f7ff fe32 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000cf4:	2048      	movs	r0, #72	; 0x48
 8000cf6:	f7ff fe2f 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f7ff fe2c 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d00:	200f      	movs	r0, #15
 8000d02:	f7ff fe29 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d06:	200c      	movs	r0, #12
 8000d08:	f7ff fe26 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d0c:	2031      	movs	r0, #49	; 0x31
 8000d0e:	f7ff fe23 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000d12:	2036      	movs	r0, #54	; 0x36
 8000d14:	f7ff fe20 	bl	8000958 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000d18:	200f      	movs	r0, #15
 8000d1a:	f7ff fe1d 	bl	8000958 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000d1e:	2011      	movs	r0, #17
 8000d20:	f7ff fdfc 	bl	800091c <ILI9341_Write_Command>
HAL_Delay(120);
 8000d24:	2078      	movs	r0, #120	; 0x78
 8000d26:	f000 fd81 	bl	800182c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000d2a:	2029      	movs	r0, #41	; 0x29
 8000d2c:	f7ff fdf6 	bl	800091c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fe97 	bl	8000a64 <ILI9341_Set_Rotation>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d40:	b08d      	sub	sp, #52	; 0x34
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	6039      	str	r1, [r7, #0]
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	466b      	mov	r3, sp
 8000d4c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d5a:	d202      	bcs.n	8000d62 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d60:	e002      	b.n	8000d68 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000d62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	483e      	ldr	r0, [pc, #248]	; (8000e68 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000d6e:	f001 f821 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	483c      	ldr	r0, [pc, #240]	; (8000e68 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000d78:	f001 f81c 	bl	8001db4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d88:	460b      	mov	r3, r1
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4688      	mov	r8, r1
 8000d92:	4699      	mov	r9, r3
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000da0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000da4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da8:	2300      	movs	r3, #0
 8000daa:	460c      	mov	r4, r1
 8000dac:	461d      	mov	r5, r3
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	00eb      	lsls	r3, r5, #3
 8000db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dbc:	00e2      	lsls	r2, r4, #3
 8000dbe:	1dcb      	adds	r3, r1, #7
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc8:	466b      	mov	r3, sp
 8000dca:	3300      	adds	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd2:	e00e      	b.n	8000df2 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd8:	4413      	add	r3, r2
 8000dda:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dde:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	3301      	adds	r3, #1
 8000de4:	88fa      	ldrh	r2, [r7, #6]
 8000de6:	b2d1      	uxtb	r1, r2
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	3302      	adds	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3ec      	bcc.n	8000dd4 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e14:	fb01 f202 	mul.w	r2, r1, r2
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d010      	beq.n	8000e44 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e26:	e009      	b.n	8000e3c <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <ILI9341_Draw_Colour_Burst+0x130>)
 8000e32:	f003 fc7d 	bl	8004730 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	3301      	adds	r3, #1
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3f1      	bcc.n	8000e28 <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	230a      	movs	r3, #10
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <ILI9341_Draw_Colour_Burst+0x130>)
 8000e4e:	f003 fc6f 	bl	8004730 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000e58:	f000 ffac 	bl	8001db4 <HAL_GPIO_WritePin>
 8000e5c:	46b5      	mov	sp, r6
}
 8000e5e:	bf00      	nop
 8000e60:	3734      	adds	r7, #52	; 0x34
 8000e62:	46bd      	mov	sp, r7
 8000e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e68:	58020c00 	.word	0x58020c00
 8000e6c:	24000030 	.word	0x24000030

08000e70 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <ILI9341_Fill_Screen+0x44>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <ILI9341_Fill_Screen+0x48>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fd83 	bl	8000994 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <ILI9341_Fill_Screen+0x44>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <ILI9341_Fill_Screen+0x48>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff48 	bl	8000d3c <ILI9341_Draw_Colour_Burst>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2400000a 	.word	0x2400000a
 8000eb8:	24000008 	.word	0x24000008

08000ebc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	80bb      	strh	r3, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <ILI9341_Draw_Pixel+0x180>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	f080 80ac 	bcs.w	8001034 <ILI9341_Draw_Pixel+0x178>
 8000edc:	4b58      	ldr	r3, [pc, #352]	; (8001040 <ILI9341_Draw_Pixel+0x184>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	88ba      	ldrh	r2, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f080 80a5 	bcs.w	8001034 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000eea:	2200      	movs	r2, #0
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4855      	ldr	r0, [pc, #340]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000ef0:	f000 ff60 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	4852      	ldr	r0, [pc, #328]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000efa:	f000 ff5b 	bl	8001db4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000efe:	202a      	movs	r0, #42	; 0x2a
 8000f00:	f7ff fcfa 	bl	80008f8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000f04:	2201      	movs	r2, #1
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	484e      	ldr	r0, [pc, #312]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f0a:	f000 ff53 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	484c      	ldr	r0, [pc, #304]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f14:	f000 ff4e 	bl	8001db4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	4849      	ldr	r0, [pc, #292]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f1e:	f000 ff49 	bl	8001db4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	753b      	strb	r3, [r7, #20]
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	757b      	strb	r3, [r7, #21]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	3301      	adds	r3, #1
 8000f36:	121b      	asrs	r3, r3, #8
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	75bb      	strb	r3, [r7, #22]
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000f46:	f107 0114 	add.w	r1, r7, #20
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	483e      	ldr	r0, [pc, #248]	; (8001048 <ILI9341_Draw_Pixel+0x18c>)
 8000f50:	f003 fbee 	bl	8004730 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f5a:	f000 ff2b 	bl	8001db4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4838      	ldr	r0, [pc, #224]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f64:	f000 ff26 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f6e:	f000 ff21 	bl	8001db4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000f72:	202b      	movs	r0, #43	; 0x2b
 8000f74:	f7ff fcc0 	bl	80008f8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	4831      	ldr	r0, [pc, #196]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f7e:	f000 ff19 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000f82:	2201      	movs	r2, #1
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f88:	f000 ff14 	bl	8001db4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000f92:	f000 ff0f 	bl	8001db4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	743b      	strb	r3, [r7, #16]
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	747b      	strb	r3, [r7, #17]
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	121b      	asrs	r3, r3, #8
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	74bb      	strb	r3, [r7, #18]
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000fba:	f107 0110 	add.w	r1, r7, #16
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <ILI9341_Draw_Pixel+0x18c>)
 8000fc4:	f003 fbb4 	bl	8004730 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000fce:	f000 fef1 	bl	8001db4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000fd8:	f000 feec 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000fe2:	f000 fee7 	bl	8001db4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000fe6:	202c      	movs	r0, #44	; 0x2c
 8000fe8:	f7ff fc86 	bl	80008f8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000fec:	2201      	movs	r2, #1
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000ff2:	f000 fedf 	bl	8001db4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8000ffc:	f000 feda 	bl	8001db4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 8001006:	f000 fed5 	bl	8001db4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	733b      	strb	r3, [r7, #12]
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800101a:	f107 010c 	add.w	r1, r7, #12
 800101e:	2301      	movs	r3, #1
 8001020:	2202      	movs	r2, #2
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <ILI9341_Draw_Pixel+0x18c>)
 8001024:	f003 fb84 	bl	8004730 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <ILI9341_Draw_Pixel+0x188>)
 800102e:	f000 fec1 	bl	8001db4 <HAL_GPIO_WritePin>
 8001032:	e000      	b.n	8001036 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001034:	bf00      	nop
	
}
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2400000a 	.word	0x2400000a
 8001040:	24000008 	.word	0x24000008
 8001044:	58020c00 	.word	0x58020c00
 8001048:	24000030 	.word	0x24000030

0800104c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <ILI9341_Draw_Rectangle+0xb0>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	429a      	cmp	r2, r3
 8001074:	d23d      	bcs.n	80010f2 <ILI9341_Draw_Rectangle+0xa6>
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <ILI9341_Draw_Rectangle+0xb4>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	88ba      	ldrh	r2, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d237      	bcs.n	80010f2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	4413      	add	r3, r2
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <ILI9341_Draw_Rectangle+0xb0>)
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	b292      	uxth	r2, r2
 800108e:	4293      	cmp	r3, r2
 8001090:	dd05      	ble.n	800109e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <ILI9341_Draw_Rectangle+0xb0>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b29a      	uxth	r2, r3
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800109e:	88ba      	ldrh	r2, [r7, #4]
 80010a0:	883b      	ldrh	r3, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <ILI9341_Draw_Rectangle+0xb4>)
 80010a6:	8812      	ldrh	r2, [r2, #0]
 80010a8:	b292      	uxth	r2, r2
 80010aa:	4293      	cmp	r3, r2
 80010ac:	dd05      	ble.n	80010ba <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <ILI9341_Draw_Rectangle+0xb4>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80010ba:	88fa      	ldrh	r2, [r7, #6]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4413      	add	r3, r2
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	88ba      	ldrh	r2, [r7, #4]
 80010c8:	883b      	ldrh	r3, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	88b9      	ldrh	r1, [r7, #4]
 80010d4:	88f8      	ldrh	r0, [r7, #6]
 80010d6:	4622      	mov	r2, r4
 80010d8:	f7ff fc5c 	bl	8000994 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80010dc:	883b      	ldrh	r3, [r7, #0]
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	8b3b      	ldrh	r3, [r7, #24]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe26 	bl	8000d3c <ILI9341_Draw_Colour_Burst>
 80010f0:	e000      	b.n	80010f4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80010f2:	bf00      	nop
}
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400000a 	.word	0x2400000a
 8001100:	24000008 	.word	0x24000008

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001110:	bf00      	nop
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <main+0x124>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <main+0x24>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dcf4      	bgt.n	8001112 <main+0xe>
  if ( timeout < 0 )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <main+0x2e>
  {
  Error_Handler();
 800112e:	f000 f9d7 	bl	80014e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fae9 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f881 	bl	800123c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <main+0x124>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a39      	ldr	r2, [pc, #228]	; (8001228 <main+0x124>)
 8001142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <main+0x124>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001158:	2000      	movs	r0, #0
 800115a:	f000 fe45 	bl	8001de8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fe5b 	bl	8001e1c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800116c:	bf00      	nop
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <main+0x124>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d104      	bne.n	8001184 <main+0x80>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dcf4      	bgt.n	800116e <main+0x6a>
if ( timeout < 0 )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da01      	bge.n	800118e <main+0x8a>
{
Error_Handler();
 800118a:	f000 f9a9 	bl	80014e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 f931 	bl	80013f4 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001192:	f000 f8d9 	bl	8001348 <MX_SPI3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ILI9341_Init();
 8001196:	f7ff fcc3 	bl	8000b20 <ILI9341_Init>
//  uint8_t rect[10] ={ color,color,color,color,color,color,color,color,color,color};
//  uint8_t status_u8=0;
//  status_u8 = BSP_LCD_FillRGBRect(my_display, 0, rect, 100, 100, 10, 1);
  while (1)
  {
	  ILI9341_Fill_Screen(WHITE);
 800119a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800119e:	f7ff fe67 	bl	8000e70 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff fc5e 	bl	8000a64 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 80011a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	220a      	movs	r2, #10
 80011b6:	210a      	movs	r1, #10
 80011b8:	481c      	ldr	r0, [pc, #112]	; (800122c <main+0x128>)
 80011ba:	f7ff f9bd 	bl	8000538 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80011be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c2:	f000 fb33 	bl	800182c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80011c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ca:	f7ff fe51 	bl	8000e70 <ILI9341_Fill_Screen>


	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  		ILI9341_Fill_Screen(WHITE);
 80011ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011d2:	f7ff fe4d 	bl	8000e70 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f7ff fc44 	bl	8000a64 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	220a      	movs	r2, #10
 80011ea:	210a      	movs	r1, #10
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <main+0x12c>)
 80011ee:	f7ff f9a3 	bl	8000538 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 80011f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	2214      	movs	r2, #20
 8001200:	210a      	movs	r1, #10
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <main+0x130>)
 8001204:	f7ff f998 	bl	8000538 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800120c:	f000 fb0e 	bl	800182c <HAL_Delay>
	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 8001210:	2102      	movs	r1, #2
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <main+0x134>)
 8001214:	f7ff f9c0 	bl	8000598 <ILI9341_Draw_Image>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fc23 	bl	8000a64 <ILI9341_Set_Rotation>
	  		HAL_Delay(10000);
 800121e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001222:	f000 fb03 	bl	800182c <HAL_Delay>
	  ILI9341_Fill_Screen(WHITE);
 8001226:	e7b8      	b.n	800119a <main+0x96>
 8001228:	58024400 	.word	0x58024400
 800122c:	08004d6c 	.word	0x08004d6c
 8001230:	08004d88 	.word	0x08004d88
 8001234:	08004d94 	.word	0x08004d94
 8001238:	08004fec 	.word	0x08004fec

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09c      	sub	sp, #112	; 0x70
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	224c      	movs	r2, #76	; 0x4c
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fd7a 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2220      	movs	r2, #32
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fd74 	bl	8004d44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800125c:	2004      	movs	r0, #4
 800125e:	f000 fdf1 	bl	8001e44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b35      	ldr	r3, [pc, #212]	; (800133c <SystemClock_Config+0x100>)
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <SystemClock_Config+0x100>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001272:	4b32      	ldr	r3, [pc, #200]	; (800133c <SystemClock_Config+0x100>)
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <SystemClock_Config+0x104>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <SystemClock_Config+0x104>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <SystemClock_Config+0x104>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001298:	bf00      	nop
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <SystemClock_Config+0x104>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012a6:	d1f8      	bne.n	800129a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <SystemClock_Config+0x108>)
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	4a25      	ldr	r2, [pc, #148]	; (8001344 <SystemClock_Config+0x108>)
 80012ae:	f023 0303 	bic.w	r3, r3, #3
 80012b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80012cc:	2309      	movs	r3, #9
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 120;
 80012d4:	2378      	movs	r3, #120	; 0x78
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012dc:	230c      	movs	r3, #12
 80012de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80012e0:	2302      	movs	r3, #2
 80012e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80012e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fe02 	bl	8001ef8 <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012fa:	f000 f8f1 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	233f      	movs	r3, #63	; 0x3f
 8001300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2303      	movs	r3, #3
 8001304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fa42 	bl	80027ac <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800132e:	f000 f8d7 	bl	80014e0 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3770      	adds	r7, #112	; 0x70
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	58000400 	.word	0x58000400
 8001340:	58024800 	.word	0x58024800
 8001344:	58024400 	.word	0x58024400

08001348 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <MX_SPI3_Init+0xa4>)
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <MX_SPI3_Init+0xa8>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001354:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001358:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_SPI3_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001362:	2207      	movs	r2, #7
 8001364:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_SPI3_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001374:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001378:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_SPI3_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI3_Init+0xa4>)
 8001394:	2207      	movs	r2, #7
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI3_Init+0xa4>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_SPI3_Init+0xa4>)
 80013d8:	f003 f886 	bl	80044e8 <HAL_SPI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80013e2:	f000 f87d 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000030 	.word	0x24000030
 80013f0:	40003c00 	.word	0x40003c00

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <MX_GPIO_Init+0xe4>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_GPIO_Init+0xe4>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_RESET_Pin|DISPLAY_CS_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	21a0      	movs	r1, #160	; 0xa0
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_GPIO_Init+0xe8>)
 80014a6:	f000 fc85 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_DC_GPIO_Port, DISPLAY_DC_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <MX_GPIO_Init+0xe8>)
 80014b0:	f000 fc80 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_RESET_Pin DISPLAY_DC_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RESET_Pin|DISPLAY_DC_Pin|DISPLAY_CS_Pin;
 80014b4:	23e0      	movs	r3, #224	; 0xe0
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_GPIO_Init+0xe8>)
 80014cc:	f000 fac2 	bl	8001a54 <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020c00 	.word	0x58020c00

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_MspInit+0x30>)
 80014f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x30>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x30>)
 8001504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	58024400 	.word	0x58024400

08001520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0bc      	sub	sp, #240	; 0xf0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	22c0      	movs	r2, #192	; 0xc0
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fbff 	bl	8004d44 <memset>
  if(hspi->Instance==SPI3)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a41      	ldr	r2, [pc, #260]	; (8001650 <HAL_SPI_MspInit+0x130>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d17a      	bne.n	8001646 <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 27;
 800155c:	231b      	movs	r3, #27
 800155e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 72;
 8001560:	2348      	movs	r3, #72	; 0x48
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001564:	2305      	movs	r3, #5
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001574:	2320      	movs	r3, #32
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fc40 	bl	8002e0c <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8001592:	f7ff ffa5 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_SPI_MspInit+0x134>)
 8001598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <HAL_SPI_MspInit+0x134>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_SPI_MspInit+0x134>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f0:	2304      	movs	r3, #4
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001612:	4619      	mov	r1, r3
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <HAL_SPI_MspInit+0x138>)
 8001616:	f000 fa1d 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800161e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001634:	2306      	movs	r3, #6
 8001636:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800163e:	4619      	mov	r1, r3
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_SPI_MspInit+0x13c>)
 8001642:	f000 fa07 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	37f0      	adds	r7, #240	; 0xf0
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40003c00 	.word	0x40003c00
 8001654:	58024400 	.word	0x58024400
 8001658:	58020400 	.word	0x58020400
 800165c:	58020800 	.word	0x58020800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f89e 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7fe fe0e 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f003 fb0b 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fd0d 	bl	8001104 <main>
  bx  lr
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80016f8:	0802a7f4 	.word	0x0802a7f4
  ldr r2, =_sbss
 80016fc:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001700:	240000bc 	.word	0x240000bc

08001704 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC3_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170e:	2003      	movs	r0, #3
 8001710:	f000 f96e 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001714:	f001 fa00 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	4913      	ldr	r1, [pc, #76]	; (8001774 <HAL_Init+0x6c>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_Init+0x6c>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x70>)
 800174a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_Init+0x74>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f814 	bl	8001780 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e002      	b.n	8001768 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001762:	f7ff fec3 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024400 	.word	0x58024400
 8001774:	08004d9c 	.word	0x08004d9c
 8001778:	24000004 	.word	0x24000004
 800177c:	24000000 	.word	0x24000000

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e021      	b.n	80017d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_InitTick+0x64>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_InitTick+0x60>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f945 	bl	8001a3a <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f91d 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x68>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	24000010 	.word	0x24000010
 80017e4:	24000000 	.word	0x24000000
 80017e8:	2400000c 	.word	0x2400000c

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	24000010 	.word	0x24000010
 8001810:	240000b8 	.word	0x240000b8

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	240000b8 	.word	0x240000b8

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	24000010 	.word	0x24000010

08001874 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetREVID+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0c1b      	lsrs	r3, r3, #16
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	5c001000 	.word	0x5c001000

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x40>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	05fa0000 	.word	0x05fa0000

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff47 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff5e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffb2 	bl	80019ac <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_GPIO_Init+0x234>)
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a66:	e194      	b.n	8001d92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8186 	beq.w	8001d8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x44>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	69b9      	ldr	r1, [r7, #24]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80e0 	beq.w	8001d8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bd2:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_GPIO_Init+0x238>)
 8001bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_GPIO_Init+0x23c>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_GPIO_Init+0x240>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d052      	beq.n	8001cbc <HAL_GPIO_Init+0x268>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_GPIO_Init+0x244>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d031      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x248>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_GPIO_Init+0x24c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_GPIO_Init+0x250>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x254>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x258>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x25c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x260>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_GPIO_Init+0x264>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c5e:	2309      	movs	r3, #9
 8001c60:	e02d      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c62:	230a      	movs	r3, #10
 8001c64:	e02b      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e029      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e027      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c6e:	2306      	movs	r3, #6
 8001c70:	e025      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e023      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e021      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e01f      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e01d      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01b      	b.n	8001cbe <HAL_GPIO_Init+0x26a>
 8001c86:	bf00      	nop
 8001c88:	58000080 	.word	0x58000080
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58000400 	.word	0x58000400
 8001c94:	58020000 	.word	0x58020000
 8001c98:	58020400 	.word	0x58020400
 8001c9c:	58020800 	.word	0x58020800
 8001ca0:	58020c00 	.word	0x58020c00
 8001ca4:	58021000 	.word	0x58021000
 8001ca8:	58021400 	.word	0x58021400
 8001cac:	58021800 	.word	0x58021800
 8001cb0:	58021c00 	.word	0x58021c00
 8001cb4:	58022000 	.word	0x58022000
 8001cb8:	58022400 	.word	0x58022400
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	f002 0203 	and.w	r2, r2, #3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cce:	4938      	ldr	r1, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x35c>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f ae63 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	58000400 	.word	0x58000400

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_HSEM_FastTake+0x2c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3320      	adds	r3, #32
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_HSEM_FastTake+0x30>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e000      	b.n	8001e06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	58026400 	.word	0x58026400
 8001e18:	80000300 	.word	0x80000300

08001e1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e26:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_HSEM_Release+0x24>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	58026400 	.word	0x58026400

08001e44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d00a      	beq.n	8001e6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e040      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e03e      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e76:	491f      	ldr	r1, [pc, #124]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e7e:	f7ff fcc9 	bl	8001814 <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e84:	e009      	b.n	8001e9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e86:	f7ff fcc5 	bl	8001814 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e94:	d901      	bls.n	8001e9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e028      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b1e      	cmp	r3, #30
 8001eac:	d008      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8001eb2:	d005      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b1d      	cmp	r3, #29
 8001eb8:	d002      	beq.n	8001ec0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ebe:	d114      	bne.n	8001eea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ec0:	f7ff fca8 	bl	8001814 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ec6:	e009      	b.n	8001edc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ec8:	f7ff fca4 	bl	8001814 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed6:	d901      	bls.n	8001edc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024800 	.word	0x58024800

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f000 bc48 	b.w	800279c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8088 	beq.w	800202a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d007      	beq.n	8001f40 <HAL_RCC_OscConfig+0x48>
 8001f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	d111      	bne.n	8001f5a <HAL_RCC_OscConfig+0x62>
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d06d      	beq.n	8002028 <HAL_RCC_OscConfig+0x130>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d169      	bne.n	8002028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f000 bc21 	b.w	800279c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x7a>
 8001f64:	4b86      	ldr	r3, [pc, #536]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a85      	ldr	r2, [pc, #532]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e02e      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x9c>
 8001f7a:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7d      	ldr	r2, [pc, #500]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
 8001f9e:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a74      	ldr	r2, [pc, #464]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd8>
 8001fb8:	4b71      	ldr	r3, [pc, #452]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a70      	ldr	r2, [pc, #448]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b6e      	ldr	r3, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6d      	ldr	r2, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fc1c 	bl	8001814 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fc18 	bl	8001814 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e3d4      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe8>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fc08 	bl	8001814 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fc04 	bl	8001814 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e3c0      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800201a:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x110>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80ca 	beq.w	80021cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002038:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002040:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002042:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_RCC_OscConfig+0x166>
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	2b18      	cmp	r3, #24
 8002052:	d156      	bne.n	8002102 <HAL_RCC_OscConfig+0x20a>
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d151      	bne.n	8002102 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205e:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e392      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002076:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0219 	bic.w	r2, r3, #25
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	493f      	ldr	r1, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fbc4 	bl	8001814 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fbc0 	bl	8001814 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e37c      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	f7ff fbe1 	bl	8001874 <HAL_GetREVID>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d817      	bhi.n	80020ec <HAL_RCC_OscConfig+0x1f4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d108      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1de>
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020cc:	4a2c      	ldr	r2, [pc, #176]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d4:	e07a      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	4926      	ldr	r1, [pc, #152]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ea:	e06f      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	4921      	ldr	r1, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002100:	e064      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d047      	beq.n	800219a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0219 	bic.w	r2, r3, #25
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	491a      	ldr	r1, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fb7a 	bl	8001814 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff fb76 	bl	8001814 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e332      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	f7ff fb97 	bl	8001874 <HAL_GetREVID>
 8002146:	4603      	mov	r3, r0
 8002148:	f241 0203 	movw	r2, #4099	; 0x1003
 800214c:	4293      	cmp	r3, r2
 800214e:	d819      	bhi.n	8002184 <HAL_RCC_OscConfig+0x28c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d108      	bne.n	800216a <HAL_RCC_OscConfig+0x272>
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6053      	str	r3, [r2, #4]
 8002168:	e030      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	031b      	lsls	r3, r3, #12
 8002178:	4901      	ldr	r1, [pc, #4]	; (8002180 <HAL_RCC_OscConfig+0x288>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
 800217e:	e025      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
 8002180:	58024400 	.word	0x58024400
 8002184:	4b9a      	ldr	r3, [pc, #616]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	4997      	ldr	r1, [pc, #604]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e018      	b.n	80021cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a94      	ldr	r2, [pc, #592]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff fb35 	bl	8001814 <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fb31 	bl	8001814 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e2ed      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021c0:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a9 	beq.w	800232c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021e4:	4b82      	ldr	r3, [pc, #520]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d007      	beq.n	8002200 <HAL_RCC_OscConfig+0x308>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b18      	cmp	r3, #24
 80021f4:	d13a      	bne.n	800226c <HAL_RCC_OscConfig+0x374>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d135      	bne.n	800226c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002200:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x320>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e2c1      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002218:	f7ff fb2c 	bl	8001874 <HAL_GetREVID>
 800221c:	4603      	mov	r3, r0
 800221e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002222:	4293      	cmp	r3, r2
 8002224:	d817      	bhi.n	8002256 <HAL_RCC_OscConfig+0x35e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x348>
 800222e:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800223c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800223e:	e075      	b.n	800232c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	069b      	lsls	r3, r3, #26
 800224e:	4968      	ldr	r1, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002254:	e06a      	b.n	800232c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	061b      	lsls	r3, r3, #24
 8002264:	4962      	ldr	r1, [pc, #392]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002266:	4313      	orrs	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800226a:	e05f      	b.n	800232c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d042      	beq.n	80022fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fac8 	bl	8001814 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002288:	f7ff fac4 	bl	8001814 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e280      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022a6:	f7ff fae5 	bl	8001874 <HAL_GetREVID>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d817      	bhi.n	80022e4 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d108      	bne.n	80022ce <HAL_RCC_OscConfig+0x3d6>
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022c4:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022ca:	6053      	str	r3, [r2, #4]
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0x434>
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	069b      	lsls	r3, r3, #26
 80022dc:	4944      	ldr	r1, [pc, #272]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
 80022e2:	e023      	b.n	800232c <HAL_RCC_OscConfig+0x434>
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	493f      	ldr	r1, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
 80022f8:	e018      	b.n	800232c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff fa85 	bl	8001814 <HAL_GetTick>
 800230a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800230e:	f7ff fa81 	bl	8001814 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e23d      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d036      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d019      	beq.n	8002374 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff fa62 	bl	8001814 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fa5e 	bl	8001814 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e21a      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x45c>
 8002372:	e018      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff fa48 	bl	8001814 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff fa44 	bl	8001814 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e200      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d039      	beq.n	8002426 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fa25 	bl	8001814 <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7ff fa21 	bl	8001814 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1dd      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x4d6>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x52e>
 80023ee:	bf00      	nop
 80023f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023f4:	4b9b      	ldr	r3, [pc, #620]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a9a      	ldr	r2, [pc, #616]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80023fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002400:	f7ff fa08 	bl	8001814 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002408:	f7ff fa04 	bl	8001814 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1c0      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800241a:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8081 	beq.w	8002536 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002434:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x770>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8b      	ldr	r2, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x770>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002440:	f7ff f9e8 	bl	8001814 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7ff f9e4 	bl	8001814 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1a0      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800245a:	4b83      	ldr	r3, [pc, #524]	; (8002668 <HAL_RCC_OscConfig+0x770>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x584>
 800246e:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	e02d      	b.n	80024d8 <HAL_RCC_OscConfig+0x5e0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x5a6>
 8002484:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a76      	ldr	r2, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a73      	ldr	r2, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x5e0>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c8>
 80024a6:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x5e0>
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a67      	ldr	r2, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80024d2:	f023 0304 	bic.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff f998 	bl	8001814 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7ff f994 	bl	8001814 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e14e      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024fe:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ee      	beq.n	80024e8 <HAL_RCC_OscConfig+0x5f0>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff f982 	bl	8001814 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7ff f97e 	bl	8001814 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e138      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ee      	bne.n	8002514 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 812d 	beq.w	800279a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002540:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002548:	2b18      	cmp	r3, #24
 800254a:	f000 80bd 	beq.w	80026c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b02      	cmp	r3, #2
 8002554:	f040 809e 	bne.w	8002694 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff f956 	bl	8001814 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff f952 	bl	8001814 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e10e      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800258c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCC_OscConfig+0x774>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	430a      	orrs	r2, r1
 800259e:	4931      	ldr	r1, [pc, #196]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	628b      	str	r3, [r1, #40]	; 0x28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	3b01      	subs	r3, #1
 80025aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	3b01      	subs	r3, #1
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	3b01      	subs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	3b01      	subs	r3, #1
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025d4:	4923      	ldr	r1, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x778>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025f2:	00d2      	lsls	r2, r2, #3
 80025f4:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f023 020c 	bic.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4917      	ldr	r1, [pc, #92]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	f023 0202 	bic.w	r2, r3, #2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	4912      	ldr	r1, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_RCC_OscConfig+0x76c>)
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff f8db 	bl	8001814 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002660:	e011      	b.n	8002686 <HAL_RCC_OscConfig+0x78e>
 8002662:	bf00      	nop
 8002664:	58024400 	.word	0x58024400
 8002668:	58024800 	.word	0x58024800
 800266c:	fffffc0c 	.word	0xfffffc0c
 8002670:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff f8ce 	bl	8001814 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e08a      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x77c>
 8002692:	e082      	b.n	800279a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a42      	ldr	r2, [pc, #264]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff f8b8 	bl	8001814 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff f8b4 	bl	8001814 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e070      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x7b0>
 80026c6:	e068      	b.n	800279a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d031      	beq.n	8002740 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0203 	and.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d12a      	bne.n	8002740 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d122      	bne.n	8002740 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d11a      	bne.n	8002740 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	0a5b      	lsrs	r3, r3, #9
 800270e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d111      	bne.n	8002740 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0e1b      	lsrs	r3, r3, #24
 8002732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e02b      	b.n	800279c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800274e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d01f      	beq.n	800279a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002766:	f7ff f855 	bl	8001814 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800276c:	bf00      	nop
 800276e:	f7ff f851 	bl	8001814 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	4293      	cmp	r3, r2
 8002778:	d0f9      	beq.n	800276e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 800277c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_RCC_OscConfig+0x8b0>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002786:	00d2      	lsls	r2, r2, #3
 8002788:	4906      	ldr	r1, [pc, #24]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 800278a:	4313      	orrs	r3, r2
 800278c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <HAL_RCC_OscConfig+0x8ac>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3730      	adds	r7, #48	; 0x30
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	58024400 	.word	0x58024400
 80027a8:	ffff0007 	.word	0xffff0007

080027ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e19c      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b8a      	ldr	r3, [pc, #552]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b87      	ldr	r3, [pc, #540]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	4985      	ldr	r1, [pc, #532]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b83      	ldr	r3, [pc, #524]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e184      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002808:	429a      	cmp	r2, r3
 800280a:	d908      	bls.n	800281e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800280c:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4975      	ldr	r1, [pc, #468]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800281a:	4313      	orrs	r3, r2
 800281c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002836:	429a      	cmp	r2, r3
 8002838:	d908      	bls.n	800284c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800283a:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	496a      	ldr	r1, [pc, #424]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002848:	4313      	orrs	r3, r2
 800284a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	4b64      	ldr	r3, [pc, #400]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002864:	429a      	cmp	r2, r3
 8002866:	d908      	bls.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002868:	4b61      	ldr	r3, [pc, #388]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	495e      	ldr	r1, [pc, #376]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002876:	4313      	orrs	r3, r2
 8002878:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002892:	429a      	cmp	r2, r3
 8002894:	d908      	bls.n	80028a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002896:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4953      	ldr	r1, [pc, #332]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b4d      	ldr	r3, [pc, #308]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d908      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f023 020f 	bic.w	r2, r3, #15
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4947      	ldr	r1, [pc, #284]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d055      	beq.n	800298e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4940      	ldr	r1, [pc, #256]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d107      	bne.n	800290c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fc:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d121      	bne.n	800294c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0f6      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d115      	bne.n	800294c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0ea      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d107      	bne.n	800293c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0de      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d6      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4925      	ldr	r1, [pc, #148]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800295a:	4313      	orrs	r3, r2
 800295c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295e:	f7fe ff59 	bl	8001814 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002964:	e00a      	b.n	800297c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002966:	f7fe ff55 	bl	8001814 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0be      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	429a      	cmp	r2, r3
 800298c:	d1eb      	bne.n	8002966 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d208      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f023 020f 	bic.w	r2, r3, #15
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d214      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 020f 	bic.w	r2, r3, #15
 80029d2:	4906      	ldr	r1, [pc, #24]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_RCC_ClockConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e086      	b.n	8002afa <HAL_RCC_ClockConfig+0x34e>
 80029ec:	52002000 	.word	0x52002000
 80029f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d208      	bcs.n	8002a22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a10:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d208      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	492e      	ldr	r1, [pc, #184]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d208      	bcs.n	8002a7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4922      	ldr	r1, [pc, #136]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d208      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4917      	ldr	r1, [pc, #92]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aac:	f000 f834 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4912      	ldr	r1, [pc, #72]	; (8002b08 <HAL_RCC_ClockConfig+0x35c>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_RCC_ClockConfig+0x358>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_RCC_ClockConfig+0x35c>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x360>)
 8002ae2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x364>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x368>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fe46 	bl	8001780 <HAL_InitTick>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	58024400 	.word	0x58024400
 8002b08:	08004d9c 	.word	0x08004d9c
 8002b0c:	24000004 	.word	0x24000004
 8002b10:	24000000 	.word	0x24000000
 8002b14:	2400000c 	.word	0x2400000c

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1e:	4bb3      	ldr	r3, [pc, #716]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b26:	2b18      	cmp	r3, #24
 8002b28:	f200 8155 	bhi.w	8002dd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b99 	.word	0x08002b99
 8002b38:	08002dd7 	.word	0x08002dd7
 8002b3c:	08002dd7 	.word	0x08002dd7
 8002b40:	08002dd7 	.word	0x08002dd7
 8002b44:	08002dd7 	.word	0x08002dd7
 8002b48:	08002dd7 	.word	0x08002dd7
 8002b4c:	08002dd7 	.word	0x08002dd7
 8002b50:	08002dd7 	.word	0x08002dd7
 8002b54:	08002bbf 	.word	0x08002bbf
 8002b58:	08002dd7 	.word	0x08002dd7
 8002b5c:	08002dd7 	.word	0x08002dd7
 8002b60:	08002dd7 	.word	0x08002dd7
 8002b64:	08002dd7 	.word	0x08002dd7
 8002b68:	08002dd7 	.word	0x08002dd7
 8002b6c:	08002dd7 	.word	0x08002dd7
 8002b70:	08002dd7 	.word	0x08002dd7
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002dd7 	.word	0x08002dd7
 8002b7c:	08002dd7 	.word	0x08002dd7
 8002b80:	08002dd7 	.word	0x08002dd7
 8002b84:	08002dd7 	.word	0x08002dd7
 8002b88:	08002dd7 	.word	0x08002dd7
 8002b8c:	08002dd7 	.word	0x08002dd7
 8002b90:	08002dd7 	.word	0x08002dd7
 8002b94:	08002bcb 	.word	0x08002bcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ba4:	4b91      	ldr	r3, [pc, #580]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	4a90      	ldr	r2, [pc, #576]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002bb6:	e111      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bb8:	4b8d      	ldr	r3, [pc, #564]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bba:	61bb      	str	r3, [r7, #24]
      break;
 8002bbc:	e10e      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bc0:	61bb      	str	r3, [r7, #24]
      break;
 8002bc2:	e10b      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002bc6:	61bb      	str	r3, [r7, #24]
      break;
 8002bc8:	e108      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002bd4:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002be0:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002bea:	4b80      	ldr	r3, [pc, #512]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80e1 	beq.w	8002dd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	f000 8083 	beq.w	8002d1c <HAL_RCC_GetSysClockFreq+0x204>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	f200 80a1 	bhi.w	8002d60 <HAL_RCC_GetSysClockFreq+0x248>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x114>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d056      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c2a:	e099      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02d      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c38:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	4a6b      	ldr	r2, [pc, #428]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c62:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c92:	e087      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca6:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cd6:	e065      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d1a:	e043      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d5e:	e021      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002dfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002da2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	0a5b      	lsrs	r3, r3, #9
 8002daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc8:	ee17 3a90 	vmov	r3, s15
 8002dcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002dce:	e005      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
      break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dd8:	61bb      	str	r3, [r7, #24]
      break;
 8002dda:	bf00      	nop
  }

  return sysclockfreq;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58024400 	.word	0x58024400
 8002df0:	03d09000 	.word	0x03d09000
 8002df4:	003d0900 	.word	0x003d0900
 8002df8:	017d7840 	.word	0x017d7840
 8002dfc:	46000000 	.word	0x46000000
 8002e00:	4c742400 	.word	0x4c742400
 8002e04:	4a742400 	.word	0x4a742400
 8002e08:	4bbebc20 	.word	0x4bbebc20

08002e0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b0ca      	sub	sp, #296	; 0x128
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002e30:	2500      	movs	r5, #0
 8002e32:	ea54 0305 	orrs.w	r3, r4, r5
 8002e36:	d049      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e42:	d02f      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e48:	d828      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e4e:	d01a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e54:	d822      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5e:	d007      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e60:	e01c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e62:	4bb8      	ldr	r3, [pc, #736]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	4ab7      	ldr	r2, [pc, #732]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e6e:	e01a      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e74:	3308      	adds	r3, #8
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f9d1 	bl	8004220 <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e84:	e00f      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8a:	3328      	adds	r3, #40	; 0x28
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 fa78 	bl	8004384 <RCCEx_PLL3_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002eae:	4ba5      	ldr	r3, [pc, #660]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebc:	4aa1      	ldr	r2, [pc, #644]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ec2:	e003      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002ed8:	f04f 0900 	mov.w	r9, #0
 8002edc:	ea58 0309 	orrs.w	r3, r8, r9
 8002ee0:	d047      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d82a      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f09 	.word	0x08002f09
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f2d 	.word	0x08002f2d
 8002f00:	08002f4b 	.word	0x08002f4b
 8002f04:	08002f4b 	.word	0x08002f4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f08:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	4a8d      	ldr	r2, [pc, #564]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f14:	e01a      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f97e 	bl	8004220 <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 fa25 	bl	8004384 <RCCEx_PLL3_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f40:	e004      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	f023 0107 	bic.w	r1, r3, #7
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a78      	ldr	r2, [pc, #480]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6513      	str	r3, [r2, #80]	; 0x50
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002f7e:	f04f 0b00 	mov.w	fp, #0
 8002f82:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f86:	d04c      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f92:	d030      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f98:	d829      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f9c:	d02d      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa0:	d825      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d018      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d821      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d007      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002fb2:	e01c      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a62      	ldr	r2, [pc, #392]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f928 	bl	8004220 <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fdc:	3328      	adds	r3, #40	; 0x28
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f9cf 	bl	8004384 <RCCEx_PLL3_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	4a4c      	ldr	r2, [pc, #304]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6513      	str	r3, [r2, #80]	; 0x50
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800301e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800302e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003038:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800303c:	460b      	mov	r3, r1
 800303e:	4313      	orrs	r3, r2
 8003040:	d053      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003046:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800304a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800304e:	d035      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003050:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003054:	d82e      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003056:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800305a:	d031      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800305c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003060:	d828      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003066:	d01a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d822      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003076:	d007      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003078:	e01c      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307a:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003086:	e01c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800308c:	3308      	adds	r3, #8
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f8c5 	bl	8004220 <RCCEx_PLL2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800309c:	e011      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a2:	3328      	adds	r3, #40	; 0x28
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f96c 	bl	8004384 <RCCEx_PLL3_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80030d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030da:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80030f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003100:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003104:	460b      	mov	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	d056      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003116:	d038      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311c:	d831      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800311e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003122:	d034      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003128:	d82b      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800312a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312e:	d01d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003134:	d825      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800313a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003140:	e01f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003148:	4ba2      	ldr	r3, [pc, #648]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4aa1      	ldr	r2, [pc, #644]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003154:	e01c      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315a:	3308      	adds	r3, #8
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f85e 	bl	8004220 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800316a:	e011      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003170:	3328      	adds	r3, #40	; 0x28
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f001 f905 	bl	8004384 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003188:	e002      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800318e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031a8:	4a8a      	ldr	r2, [pc, #552]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
 80031ae:	e003      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80031c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80031d2:	460b      	mov	r3, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	d03a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d01f      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80031e2:	2b30      	cmp	r3, #48	; 0x30
 80031e4:	d819      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d00c      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d815      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d111      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f6:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	4a76      	ldr	r2, [pc, #472]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003202:	e011      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003208:	3308      	adds	r3, #8
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f807 	bl	8004220 <RCCEx_PLL2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003218:	e006      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003220:	e002      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4a65      	ldr	r2, [pc, #404]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003240:	430b      	orrs	r3, r1
 8003242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800325a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003264:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003268:	460b      	mov	r3, r1
 800326a:	4313      	orrs	r3, r2
 800326c:	d051      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003278:	d035      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800327a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327e:	d82e      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003280:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003284:	d031      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003286:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800328a:	d828      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d01a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	d822      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800329c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a0:	d007      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80032a2:	e01c      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a4:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032b0:	e01c      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b6:	3308      	adds	r3, #8
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ffb0 	bl	8004220 <RCCEx_PLL2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c6:	e011      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032cc:	3328      	adds	r3, #40	; 0x28
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 f857 	bl	8004384 <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032dc:	e006      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032e4:	e002      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032e6:	bf00      	nop
 80032e8:	e000      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003304:	430b      	orrs	r3, r1
 8003306:	6513      	str	r3, [r2, #80]	; 0x50
 8003308:	e003      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800330e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800331e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003328:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800332c:	460b      	mov	r3, r1
 800332e:	4313      	orrs	r3, r2
 8003330:	d056      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d033      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800333e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003342:	d82c      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003348:	d02f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800334a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800334e:	d826      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003354:	d02b      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003356:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800335a:	d820      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800335c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003360:	d012      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003366:	d81a      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d115      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003376:	3308      	adds	r3, #8
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f000 ff50 	bl	8004220 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003386:	e015      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fff7 	bl	8004384 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800339c:	e00a      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033a6:	bf00      	nop
 80033a8:	e004      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033aa:	bf00      	nop
 80033ac:	e002      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033ae:	bf00      	nop
 80033b0:	e000      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ca:	4a02      	ldr	r2, [pc, #8]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6513      	str	r3, [r2, #80]	; 0x50
 80033d0:	e006      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4313      	orrs	r3, r2
 80033fe:	d055      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340c:	d033      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003412:	d82c      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d02f      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d826      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003424:	d02b      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800342a:	d820      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d012      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003436:	d81a      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d022      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800343c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003440:	d115      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	3308      	adds	r3, #8
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fee8 	bl	8004220 <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003456:	e015      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345c:	3328      	adds	r3, #40	; 0x28
 800345e:	2101      	movs	r1, #1
 8003460:	4618      	mov	r0, r3
 8003462:	f000 ff8f 	bl	8004384 <RCCEx_PLL3_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800346c:	e00a      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003476:	bf00      	nop
 8003478:	e004      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800348c:	4ba3      	ldr	r3, [pc, #652]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800349c:	4a9f      	ldr	r2, [pc, #636]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
 80034a2:	e003      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d037      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d6:	d00e      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034dc:	d816      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80034e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e6:	d111      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a8b      	ldr	r2, [pc, #556]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034f4:	e00f      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fa:	3308      	adds	r3, #8
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fe8e 	bl	8004220 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800350a:	e004      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800351e:	4b7f      	ldr	r3, [pc, #508]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003522:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a7b      	ldr	r2, [pc, #492]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352e:	430b      	orrs	r3, r1
 8003530:	6513      	str	r3, [r2, #80]	; 0x50
 8003532:	e003      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003552:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003556:	460b      	mov	r3, r1
 8003558:	4313      	orrs	r3, r2
 800355a:	d039      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b03      	cmp	r3, #3
 8003564:	d81c      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	080035a9 	.word	0x080035a9
 8003570:	0800357d 	.word	0x0800357d
 8003574:	0800358b 	.word	0x0800358b
 8003578:	080035a9 	.word	0x080035a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4a66      	ldr	r2, [pc, #408]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fe44 	bl	8004220 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035b2:	4b5a      	ldr	r3, [pc, #360]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	f023 0103 	bic.w	r1, r3, #3
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	4a56      	ldr	r2, [pc, #344]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f000 809f 	beq.w	8003730 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a4a      	ldr	r2, [pc, #296]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035fe:	f7fe f909 	bl	8001814 <HAL_GetTick>
 8003602:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	e00b      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fe f904 	bl	8001814 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d903      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800361e:	e005      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003620:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ed      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800362c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003630:	2b00      	cmp	r3, #0
 8003632:	d179      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003640:	4053      	eors	r3, r2
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a30      	ldr	r2, [pc, #192]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a2d      	ldr	r2, [pc, #180]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800366e:	4a2b      	ldr	r2, [pc, #172]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003670:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800367e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003682:	d118      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f8c6 	bl	8001814 <HAL_GetTick>
 8003688:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368c:	e00d      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe f8c1 	bl	8001814 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003698:	1ad2      	subs	r2, r2, r3
 800369a:	f241 3388 	movw	r3, #5000	; 0x1388
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0eb      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d129      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d10e      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036e0:	091a      	lsrs	r2, r3, #4
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6113      	str	r3, [r2, #16]
 80036ec:	e005      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036f8:	6113      	str	r3, [r2, #16]
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370a:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800370c:	430b      	orrs	r3, r1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00e      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800371a:	e009      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800371c:	58024400 	.word	0x58024400
 8003720:	58024800 	.word	0x58024800
 8003724:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 0301 	and.w	r3, r2, #1
 800373c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003746:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	f000 8089 	beq.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003758:	2b28      	cmp	r3, #40	; 0x28
 800375a:	d86b      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	0800383d 	.word	0x0800383d
 8003768:	08003835 	.word	0x08003835
 800376c:	08003835 	.word	0x08003835
 8003770:	08003835 	.word	0x08003835
 8003774:	08003835 	.word	0x08003835
 8003778:	08003835 	.word	0x08003835
 800377c:	08003835 	.word	0x08003835
 8003780:	08003835 	.word	0x08003835
 8003784:	08003809 	.word	0x08003809
 8003788:	08003835 	.word	0x08003835
 800378c:	08003835 	.word	0x08003835
 8003790:	08003835 	.word	0x08003835
 8003794:	08003835 	.word	0x08003835
 8003798:	08003835 	.word	0x08003835
 800379c:	08003835 	.word	0x08003835
 80037a0:	08003835 	.word	0x08003835
 80037a4:	0800381f 	.word	0x0800381f
 80037a8:	08003835 	.word	0x08003835
 80037ac:	08003835 	.word	0x08003835
 80037b0:	08003835 	.word	0x08003835
 80037b4:	08003835 	.word	0x08003835
 80037b8:	08003835 	.word	0x08003835
 80037bc:	08003835 	.word	0x08003835
 80037c0:	08003835 	.word	0x08003835
 80037c4:	0800383d 	.word	0x0800383d
 80037c8:	08003835 	.word	0x08003835
 80037cc:	08003835 	.word	0x08003835
 80037d0:	08003835 	.word	0x08003835
 80037d4:	08003835 	.word	0x08003835
 80037d8:	08003835 	.word	0x08003835
 80037dc:	08003835 	.word	0x08003835
 80037e0:	08003835 	.word	0x08003835
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	08003835 	.word	0x08003835
 80037ec:	08003835 	.word	0x08003835
 80037f0:	08003835 	.word	0x08003835
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003835 	.word	0x08003835
 8003804:	0800383d 	.word	0x0800383d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380c:	3308      	adds	r3, #8
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fd05 	bl	8004220 <RCCEx_PLL2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800381c:	e00f      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	3328      	adds	r3, #40	; 0x28
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fdac 	bl	8004384 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003832:	e004      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800383a:	e000      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800383c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003846:	4bbf      	ldr	r3, [pc, #764]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003854:	4abb      	ldr	r2, [pc, #748]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003856:	430b      	orrs	r3, r1
 8003858:	6553      	str	r3, [r2, #84]	; 0x54
 800385a:	e003      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f002 0302 	and.w	r3, r2, #2
 8003870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800387a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800387e:	460b      	mov	r3, r1
 8003880:	4313      	orrs	r3, r2
 8003882:	d041      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388a:	2b05      	cmp	r3, #5
 800388c:	d824      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038e1 	.word	0x080038e1
 8003898:	080038ad 	.word	0x080038ad
 800389c:	080038c3 	.word	0x080038c3
 80038a0:	080038e1 	.word	0x080038e1
 80038a4:	080038e1 	.word	0x080038e1
 80038a8:	080038e1 	.word	0x080038e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b0:	3308      	adds	r3, #8
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fcb3 	bl	8004220 <RCCEx_PLL2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038c0:	e00f      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c6:	3328      	adds	r3, #40	; 0x28
 80038c8:	2101      	movs	r1, #1
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fd5a 	bl	8004384 <RCCEx_PLL3_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038d6:	e004      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038ea:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f023 0107 	bic.w	r1, r3, #7
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f8:	4a92      	ldr	r2, [pc, #584]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6553      	str	r3, [r2, #84]	; 0x54
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f002 0304 	and.w	r3, r2, #4
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800391e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d044      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	2b05      	cmp	r3, #5
 8003932:	d825      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003989 	.word	0x08003989
 8003940:	08003955 	.word	0x08003955
 8003944:	0800396b 	.word	0x0800396b
 8003948:	08003989 	.word	0x08003989
 800394c:	08003989 	.word	0x08003989
 8003950:	08003989 	.word	0x08003989
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003958:	3308      	adds	r3, #8
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fc5f 	bl	8004220 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003968:	e00f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396e:	3328      	adds	r3, #40	; 0x28
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd06 	bl	8004384 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f023 0107 	bic.w	r1, r3, #7
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a2:	4a68      	ldr	r2, [pc, #416]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	e003      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f002 0320 	and.w	r3, r2, #32
 80039be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039cc:	460b      	mov	r3, r1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	d055      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039de:	d033      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e4:	d82c      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d02f      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d826      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f6:	d02b      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80039f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039fc:	d820      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a02:	d012      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a08:	d81a      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d022      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a12:	d115      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fbff 	bl	8004220 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a28:	e015      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2e:	3328      	adds	r3, #40	; 0x28
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fca6 	bl	8004384 <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a46:	e006      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e004      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e002      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6553      	str	r3, [r2, #84]	; 0x54
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	d058      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003aaa:	d033      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003aac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ab0:	d82c      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	d02f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	d826      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac2:	d02b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac8:	d820      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ace:	d012      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad4:	d81a      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d022      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d115      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fb99 	bl	8004220 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003af4:	e015      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	3328      	adds	r3, #40	; 0x28
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fc40 	bl	8004384 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b12:	e006      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b14:	bf00      	nop
 8003b16:	e004      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e002      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3a:	4a02      	ldr	r2, [pc, #8]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d055      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b7c:	d033      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b82:	d82c      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	d02f      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d826      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b94:	d02b      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b9a:	d820      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba0:	d012      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d81a      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d115      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fb30 	bl	8004220 <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bc6:	e015      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bcc:	3328      	adds	r3, #40	; 0x28
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fbd7 	bl	8004384 <RCCEx_PLL3_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bfc:	4ba1      	ldr	r3, [pc, #644]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c0c:	4a9d      	ldr	r2, [pc, #628]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 0308 	and.w	r3, r2, #8
 8003c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	d01e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb96 	bl	8004384 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c64:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c74:	4a83      	ldr	r2, [pc, #524]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f002 0310 	and.w	r3, r2, #16
 8003c86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d01e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d10c      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	3328      	adds	r3, #40	; 0x28
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb67 	bl	8004384 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cc2:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd2:	4a6c      	ldr	r2, [pc, #432]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d03e      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d04:	d022      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0a:	d81b      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003d16:	e015      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fa7d 	bl	8004220 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d32:	3328      	adds	r3, #40	; 0x28
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fb24 	bl	8004384 <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d56:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d66:	4a47      	ldr	r2, [pc, #284]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d84:	2300      	movs	r3, #0
 8003d86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d03b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d9e:	d01f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003da0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003da4:	d818      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003db0:	d007      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003db2:	e011      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a32      	ldr	r2, [pc, #200]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	3328      	adds	r3, #40	; 0x28
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fada 	bl	8004384 <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6553      	str	r3, [r2, #84]	; 0x54
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e16:	673b      	str	r3, [r7, #112]	; 0x70
 8003e18:	2300      	movs	r3, #0
 8003e1a:	677b      	str	r3, [r7, #116]	; 0x74
 8003e1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003e20:	460b      	mov	r3, r1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	d034      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d007      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e36:	e011      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a11      	ldr	r2, [pc, #68]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e44:	e00e      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f9e6 	bl	8004220 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10d      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	4a02      	ldr	r2, [pc, #8]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e80:	e006      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e82:	bf00      	nop
 8003e84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	d00c      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb0:	3328      	adds	r3, #40	; 0x28
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fa65 	bl	8004384 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d038      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d018      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef4:	d811      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d014      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d80b      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d011      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0c:	4bc3      	ldr	r3, [pc, #780]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4ac2      	ldr	r2, [pc, #776]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f34:	4bb9      	ldr	r3, [pc, #740]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f44:	4ab5      	ldr	r2, [pc, #724]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6553      	str	r3, [r2, #84]	; 0x54
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f62:	2300      	movs	r3, #0
 8003f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f70:	4baa      	ldr	r3, [pc, #680]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	4aa7      	ldr	r2, [pc, #668]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003f90:	653b      	str	r3, [r7, #80]	; 0x50
 8003f92:	2300      	movs	r3, #0
 8003f94:	657b      	str	r3, [r7, #84]	; 0x54
 8003f96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fa0:	4b9e      	ldr	r3, [pc, #632]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fb0:	4a9a      	ldr	r2, [pc, #616]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd2:	4b92      	ldr	r3, [pc, #584]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe0:	4a8e      	ldr	r2, [pc, #568]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004002:	4b86      	ldr	r3, [pc, #536]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	4a85      	ldr	r2, [pc, #532]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800400c:	6113      	str	r3, [r2, #16]
 800400e:	4b83      	ldr	r3, [pc, #524]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800401a:	4a80      	ldr	r2, [pc, #512]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
 800402e:	2300      	movs	r3, #0
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004032:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d009      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800403c:	4b77      	ldr	r3, [pc, #476]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800403e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004040:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800404c:	430b      	orrs	r3, r1
 800404e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
 8004062:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800406c:	4b6b      	ldr	r3, [pc, #428]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407c:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800407e:	430b      	orrs	r3, r1
 8004080:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	2100      	movs	r1, #0
 800408c:	62b9      	str	r1, [r7, #40]	; 0x28
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004094:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d011      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f8ba 	bl	8004220 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80040b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	2100      	movs	r1, #0
 80040cc:	6239      	str	r1, [r7, #32]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d011      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e2:	3308      	adds	r3, #8
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f89a 	bl	8004220 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80040f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	2100      	movs	r1, #0
 800410c:	61b9      	str	r1, [r7, #24]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d011      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	3308      	adds	r3, #8
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f87a 	bl	8004220 <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800413e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	2100      	movs	r1, #0
 800414c:	6139      	str	r1, [r7, #16]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004158:	460b      	mov	r3, r1
 800415a:	4313      	orrs	r3, r2
 800415c:	d011      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004162:	3328      	adds	r3, #40	; 0x28
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f90c 	bl	8004384 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800417e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	2100      	movs	r1, #0
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004198:	460b      	mov	r3, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	3328      	adds	r3, #40	; 0x28
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f8ec 	bl	8004384 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	2100      	movs	r1, #0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d011      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3328      	adds	r3, #40	; 0x28
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f8cc 	bl	8004384 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004202:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
}
 8004210:	4618      	mov	r0, r3
 8004212:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421c:	58024400 	.word	0x58024400

08004220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800422e:	4b53      	ldr	r3, [pc, #332]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d101      	bne.n	800423e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e099      	b.n	8004372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800423e:	4b4f      	ldr	r3, [pc, #316]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a4e      	ldr	r2, [pc, #312]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424a:	f7fd fae3 	bl	8001814 <HAL_GetTick>
 800424e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004250:	e008      	b.n	8004264 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004252:	f7fd fadf 	bl	8001814 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e086      	b.n	8004372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004264:	4b45      	ldr	r3, [pc, #276]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f0      	bne.n	8004252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004270:	4b42      	ldr	r3, [pc, #264]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	031b      	lsls	r3, r3, #12
 800427e:	493f      	ldr	r1, [pc, #252]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	628b      	str	r3, [r1, #40]	; 0x28
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	3b01      	subs	r3, #1
 800428a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	3b01      	subs	r3, #1
 8004294:	025b      	lsls	r3, r3, #9
 8004296:	b29b      	uxth	r3, r3
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	3b01      	subs	r3, #1
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042b4:	4931      	ldr	r1, [pc, #196]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	492d      	ldr	r1, [pc, #180]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042cc:	4b2b      	ldr	r3, [pc, #172]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f023 0220 	bic.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4928      	ldr	r1, [pc, #160]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	4a26      	ldr	r2, [pc, #152]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042e4:	f023 0310 	bic.w	r3, r3, #16
 80042e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <RCCEx_PLL2_Config+0x160>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	69d2      	ldr	r2, [r2, #28]
 80042f6:	00d2      	lsls	r2, r2, #3
 80042f8:	4920      	ldr	r1, [pc, #128]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042fe:	4b1f      	ldr	r3, [pc, #124]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	4a1e      	ldr	r2, [pc, #120]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004304:	f043 0310 	orr.w	r3, r3, #16
 8004308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800431c:	e00f      	b.n	800433e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004324:	4b15      	ldr	r3, [pc, #84]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004330:	e005      	b.n	800433e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4a11      	ldr	r2, [pc, #68]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800433c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fd fa63 	bl	8001814 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004350:	e008      	b.n	8004364 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004352:	f7fd fa5f 	bl	8001814 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <RCCEx_PLL2_Config+0x15c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	58024400 	.word	0x58024400
 8004380:	ffff0007 	.word	0xffff0007

08004384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004392:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d101      	bne.n	80043a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e099      	b.n	80044d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043a2:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a4e      	ldr	r2, [pc, #312]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fd fa31 	bl	8001814 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043b6:	f7fd fa2d 	bl	8001814 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e086      	b.n	80044d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043c8:	4b45      	ldr	r3, [pc, #276]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043d4:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	051b      	lsls	r3, r3, #20
 80043e2:	493f      	ldr	r1, [pc, #252]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	628b      	str	r3, [r1, #40]	; 0x28
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	3b01      	subs	r3, #1
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004418:	4931      	ldr	r1, [pc, #196]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	492d      	ldr	r1, [pc, #180]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800442c:	4313      	orrs	r3, r2
 800442e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004430:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	4928      	ldr	r1, [pc, #160]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004442:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <RCCEx_PLL3_Config+0x160>)
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	69d2      	ldr	r2, [r2, #28]
 800445a:	00d2      	lsls	r2, r2, #3
 800445c:	4920      	ldr	r1, [pc, #128]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004462:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800447a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004480:	e00f      	b.n	80044a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800448e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004494:	e005      	b.n	80044a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 800449c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ae:	f7fd f9b1 	bl	8001814 <HAL_GetTick>
 80044b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044b6:	f7fd f9ad 	bl	8001814 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e006      	b.n	80044d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <RCCEx_PLL3_Config+0x15c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
 80044e4:	ffff0007 	.word	0xffff0007

080044e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e10f      	b.n	800471a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a87      	ldr	r2, [pc, #540]	; (8004724 <HAL_SPI_Init+0x23c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00f      	beq.n	800452a <HAL_SPI_Init+0x42>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a86      	ldr	r2, [pc, #536]	; (8004728 <HAL_SPI_Init+0x240>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00a      	beq.n	800452a <HAL_SPI_Init+0x42>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a84      	ldr	r2, [pc, #528]	; (800472c <HAL_SPI_Init+0x244>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d005      	beq.n	800452a <HAL_SPI_Init+0x42>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2b0f      	cmp	r3, #15
 8004524:	d901      	bls.n	800452a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0f7      	b.n	800471a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fbca 	bl	8004cc4 <SPI_GetPacketSize>
 8004530:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7b      	ldr	r2, [pc, #492]	; (8004724 <HAL_SPI_Init+0x23c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00c      	beq.n	8004556 <HAL_SPI_Init+0x6e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a79      	ldr	r2, [pc, #484]	; (8004728 <HAL_SPI_Init+0x240>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <HAL_SPI_Init+0x6e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a78      	ldr	r2, [pc, #480]	; (800472c <HAL_SPI_Init+0x244>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d002      	beq.n	8004556 <HAL_SPI_Init+0x6e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b08      	cmp	r3, #8
 8004554:	d811      	bhi.n	800457a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800455a:	4a72      	ldr	r2, [pc, #456]	; (8004724 <HAL_SPI_Init+0x23c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a70      	ldr	r2, [pc, #448]	; (8004728 <HAL_SPI_Init+0x240>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_SPI_Init+0x8c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6f      	ldr	r2, [pc, #444]	; (800472c <HAL_SPI_Init+0x244>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d104      	bne.n	800457e <HAL_SPI_Init+0x96>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b10      	cmp	r3, #16
 8004578:	d901      	bls.n	800457e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0cd      	b.n	800471a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc ffc4 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80045ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c4:	d119      	bne.n	80045fa <HAL_SPI_Init+0x112>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d103      	bne.n	80045d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10c      	bne.n	80045fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80045e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e8:	d107      	bne.n	80045fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00f      	beq.n	8004626 <HAL_SPI_Init+0x13e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b06      	cmp	r3, #6
 800460c:	d90b      	bls.n	8004626 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e007      	b.n	8004636 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d113      	bne.n	80046d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40013000 	.word	0x40013000
 8004728:	40003800 	.word	0x40003800
 800472c:	40003c00 	.word	0x40003c00

08004730 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3320      	adds	r3, #32
 8004746:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_SPI_Transmit+0x2a>
 8004756:	2302      	movs	r3, #2
 8004758:	e1e1      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004762:	f7fd f857 	bl	8001814 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d007      	beq.n	8004784 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004774:	2302      	movs	r3, #2
 8004776:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004780:	7efb      	ldrb	r3, [r7, #27]
 8004782:	e1cc      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_Transmit+0x60>
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800479c:	7efb      	ldrb	r3, [r7, #27]
 800479e:	e1be      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80047f0:	d108      	bne.n	8004804 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e009      	b.n	8004818 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004816:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4b96      	ldr	r3, [pc, #600]	; (8004a78 <HAL_SPI_Transmit+0x348>)
 8004820:	4013      	ands	r3, r2
 8004822:	88f9      	ldrh	r1, [r7, #6]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004844:	d107      	bne.n	8004856 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b0f      	cmp	r3, #15
 800485c:	d947      	bls.n	80048ee <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800485e:	e03f      	b.n	80048e0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d114      	bne.n	8004898 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004896:	e023      	b.n	80048e0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004898:	f7fc ffbc 	bl	8001814 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d803      	bhi.n	80048b0 <HAL_SPI_Transmit+0x180>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d102      	bne.n	80048b6 <HAL_SPI_Transmit+0x186>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f936 	bl	8004b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e11e      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1b9      	bne.n	8004860 <HAL_SPI_Transmit+0x130>
 80048ec:	e0f1      	b.n	8004ad2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b07      	cmp	r3, #7
 80048f4:	f240 80e6 	bls.w	8004ac4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80048f8:	e05d      	b.n	80049b6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d132      	bne.n	800496e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d918      	bls.n	8004946 <HAL_SPI_Transmit+0x216>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d014      	beq.n	8004946 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	1d1a      	adds	r2, r3, #4
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b02      	subs	r3, #2
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004944:	e037      	b.n	80049b6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800496c:	e023      	b.n	80049b6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496e:	f7fc ff51 	bl	8001814 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d803      	bhi.n	8004986 <HAL_SPI_Transmit+0x256>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d102      	bne.n	800498c <HAL_SPI_Transmit+0x25c>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d114      	bne.n	80049b6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f8cb 	bl	8004b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b3      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d19b      	bne.n	80048fa <HAL_SPI_Transmit+0x1ca>
 80049c2:	e086      	b.n	8004ad2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d154      	bne.n	8004a7c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d918      	bls.n	8004a10 <HAL_SPI_Transmit+0x2e0>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d914      	bls.n	8004a10 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b04      	subs	r3, #4
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004a0e:	e059      	b.n	8004ac4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d917      	bls.n	8004a4c <HAL_SPI_Transmit+0x31c>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b02      	subs	r3, #2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004a4a:	e03b      	b.n	8004ac4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3320      	adds	r3, #32
 8004a56:	7812      	ldrb	r2, [r2, #0]
 8004a58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004a76:	e025      	b.n	8004ac4 <HAL_SPI_Transmit+0x394>
 8004a78:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7c:	f7fc feca 	bl	8001814 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d803      	bhi.n	8004a94 <HAL_SPI_Transmit+0x364>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d102      	bne.n	8004a9a <HAL_SPI_Transmit+0x36a>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d114      	bne.n	8004ac4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f844 	bl	8004b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e02c      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af79 	bne.w	80049c4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2108      	movs	r1, #8
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f8c3 	bl	8004c68 <SPI_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f815 	bl	8004b28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004b1c:	7efb      	ldrb	r3, [r7, #27]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0210 	orr.w	r2, r2, #16
 8004b56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6919      	ldr	r1, [r3, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <SPI_CloseTransfer+0x13c>)
 8004b74:	400b      	ands	r3, r1
 8004b76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004b86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d014      	beq.n	8004bbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00f      	beq.n	8004bbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0220 	orr.w	r2, r2, #32
 8004bbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d014      	beq.n	8004bf4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00f      	beq.n	8004bf4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	fffffc90 	.word	0xfffffc90

08004c68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004c78:	e010      	b.n	8004c9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7a:	f7fc fdcb 	bl	8001814 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d803      	bhi.n	8004c92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d102      	bne.n	8004c98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00f      	b.n	8004cbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d0df      	beq.n	8004c7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3307      	adds	r3, #7
 8004ce2:	08db      	lsrs	r3, r3, #3
 8004ce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f820 	bl	8004d54 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	0802a7ec 	.word	0x0802a7ec
 8004d38:	0802a7ec 	.word	0x0802a7ec
 8004d3c:	0802a7ec 	.word	0x0802a7ec
 8004d40:	0802a7f0 	.word	0x0802a7f0

08004d44 <memset>:
 8004d44:	4402      	add	r2, r0
 8004d46:	4603      	mov	r3, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <_init>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr

08004d60 <_fini>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr
