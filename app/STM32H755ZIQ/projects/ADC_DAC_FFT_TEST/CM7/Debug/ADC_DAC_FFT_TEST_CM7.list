
ADC_DAC_FFT_TEST_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8e4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000131d8  0800bb80  0800bb80  0001bb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed58  0801ed58  00030018  2**0
                  CONTENTS
  4 .ARM          00000000  0801ed58  0801ed58  00030018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ed58  0801ed58  00030018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed58  0801ed58  0002ed58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ed5c  0801ed5c  0002ed5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  0801ed60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  24000018  0801ed78  00030018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000270  0801ed78  00030270  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4f3  00000000  00000000  00030046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e2  00000000  00000000  0004e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00051d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  000530d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb09  00000000  00000000  000542f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab50  00000000  00000000  00090df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001987df  00000000  00000000  000ab949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00244128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  002441f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035dd  00000000  00000000  002495f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bb64 	.word	0x0800bb64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800bb64 	.word	0x0800bb64

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t ADC_buffer_is_full=0;
volatile uint8_t ADC_buffer_is_half_full=0;
volatile uint8_t DAC_buffer_is_full=0;
volatile uint8_t DAC_buffer_is_half_full=0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	ADC_buffer_is_full=1;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]

}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	24000268 	.word	0x24000268

08000424 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	ADC_buffer_is_half_full=1;
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <HAL_ADC_ConvCpltCallback+0x1c>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	24000269 	.word	0x24000269

08000444 <HAL_DACEx_ConvCpltCallbackCh2>:



void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	DAC_buffer_is_full=1;
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <HAL_DACEx_ConvCpltCallbackCh2+0x1c>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	2400026a 	.word	0x2400026a

08000464 <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	DAC_buffer_is_half_full=1;
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x1c>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	2400026b 	.word	0x2400026b
 8000484:	00000000 	.word	0x00000000

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	f5ad 4de1 	sub.w	sp, sp, #28800	; 0x7080
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000492:	f000 ff3b 	bl	800130c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000496:	4b7f      	ldr	r3, [pc, #508]	; (8000694 <main+0x20c>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d11b      	bne.n	80004da <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004a2:	f3bf 8f4f 	dsb	sy
}
 80004a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a8:	f3bf 8f6f 	isb	sy
}
 80004ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ae:	4b79      	ldr	r3, [pc, #484]	; (8000694 <main+0x20c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004b6:	f3bf 8f4f 	dsb	sy
}
 80004ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004bc:	f3bf 8f6f 	isb	sy
}
 80004c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004c2:	4b74      	ldr	r3, [pc, #464]	; (8000694 <main+0x20c>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a73      	ldr	r2, [pc, #460]	; (8000694 <main+0x20c>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ce:	f3bf 8f4f 	dsb	sy
}
 80004d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d4:	f3bf 8f6f 	isb	sy
}
 80004d8:	e000      	b.n	80004dc <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004dc:	4b6d      	ldr	r3, [pc, #436]	; (8000694 <main+0x20c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d159      	bne.n	800059c <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004e8:	4b6a      	ldr	r3, [pc, #424]	; (8000694 <main+0x20c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004f0:	f3bf 8f4f 	dsb	sy
}
 80004f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004f6:	4b67      	ldr	r3, [pc, #412]	; (8000694 <main+0x20c>)
 80004f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004fc:	f247 0238 	movw	r2, #28728	; 0x7038
 8000500:	443a      	add	r2, r7
 8000502:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000504:	f247 0338 	movw	r3, #28728	; 0x7038
 8000508:	443b      	add	r3, r7
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	0b5b      	lsrs	r3, r3, #13
 800050e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000512:	f247 0234 	movw	r2, #28724	; 0x7034
 8000516:	443a      	add	r2, r7
 8000518:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800051a:	f247 0338 	movw	r3, #28728	; 0x7038
 800051e:	443b      	add	r3, r7
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000528:	f247 0230 	movw	r2, #28720	; 0x7030
 800052c:	443a      	add	r2, r7
 800052e:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000530:	f247 0334 	movw	r3, #28724	; 0x7034
 8000534:	443b      	add	r3, r7
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	015a      	lsls	r2, r3, #5
 800053a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800053e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000540:	f247 0230 	movw	r2, #28720	; 0x7030
 8000544:	443a      	add	r2, r7
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800054a:	4952      	ldr	r1, [pc, #328]	; (8000694 <main+0x20c>)
 800054c:	4313      	orrs	r3, r2
 800054e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000552:	f247 0330 	movw	r3, #28720	; 0x7030
 8000556:	443b      	add	r3, r7
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1e5a      	subs	r2, r3, #1
 800055c:	f247 0130 	movw	r1, #28720	; 0x7030
 8000560:	4439      	add	r1, r7
 8000562:	600a      	str	r2, [r1, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1e3      	bne.n	8000530 <main+0xa8>
    } while(sets-- != 0U);
 8000568:	f247 0334 	movw	r3, #28724	; 0x7034
 800056c:	443b      	add	r3, r7
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	f247 0134 	movw	r1, #28724	; 0x7034
 8000576:	4439      	add	r1, r7
 8000578:	600a      	str	r2, [r1, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1cd      	bne.n	800051a <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 800057e:	f3bf 8f4f 	dsb	sy
}
 8000582:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000584:	4b43      	ldr	r3, [pc, #268]	; (8000694 <main+0x20c>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a42      	ldr	r2, [pc, #264]	; (8000694 <main+0x20c>)
 800058a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000596:	f3bf 8f6f 	isb	sy
}
 800059a:	e000      	b.n	800059e <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800059c:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	f247 0248 	movw	r2, #28744	; 0x7048
 80005a6:	443a      	add	r2, r7
 80005a8:	6013      	str	r3, [r2, #0]
  //while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
  if ( timeout < 0 )
 80005aa:	f247 0348 	movw	r3, #28744	; 0x7048
 80005ae:	443b      	add	r3, r7
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da01      	bge.n	80005ba <main+0x132>
  {
  Error_Handler();
 80005b6:	f000 fed5 	bl	8001364 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f8f1 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 fc45 	bl	8000e4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <main+0x210>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c8:	4a33      	ldr	r2, [pc, #204]	; (8000698 <main+0x210>)
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <main+0x210>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80005e0:	f842 3c80 	str.w	r3, [r2, #-128]
 80005e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005e8:	f853 3c80 	ldr.w	r3, [r3, #-128]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f005 fa59 	bl	8005aa4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005f2:	2100      	movs	r1, #0
 80005f4:	2000      	movs	r0, #0
 80005f6:	f005 fa6f 	bl	8005ad8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	f247 0248 	movw	r2, #28744	; 0x7048
 8000602:	443a      	add	r2, r7
 8000604:	6013      	str	r3, [r2, #0]
//while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
if ( timeout < 0 )
 8000606:	f247 0348 	movw	r3, #28744	; 0x7048
 800060a:	443b      	add	r3, r7
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da01      	bge.n	8000616 <main+0x18e>
{
Error_Handler();
 8000612:	f000 fea7 	bl	8001364 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fe31 	bl	800127c <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 fdf7 	bl	800120c <MX_DMA_Init>
  MX_DAC1_Init();
 800061e:	f000 fd01 	bl	8001024 <MX_DAC1_Init>
  MX_TIM5_Init();
 8000622:	f000 fd51 	bl	80010c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000626:	f000 fd9d 	bl	8001164 <MX_TIM8_Init>
  MX_ADC2_Init();
 800062a:	f000 fc93 	bl	8000f54 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800062e:	f000 fd2b 	bl	8001088 <MX_OPAMP1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  GPIO_InitTypeDef GPIO_InitStruct={0};
 8000632:	f247 031c 	movw	r3, #28700	; 0x701c
 8000636:	443b      	add	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin=GPIO_PIN_8;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	f247 021c 	movw	r2, #28700	; 0x701c
 800064c:	443a      	add	r2, r7
 800064e:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	f247 0220 	movw	r2, #28704	; 0x7020
 8000656:	443a      	add	r2, r7
 8000658:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	f247 0228 	movw	r2, #28712	; 0x7028
 8000660:	443a      	add	r2, r7
 8000662:	6013      	str	r3, [r2, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f247 031c 	movw	r3, #28700	; 0x701c
 8000668:	443b      	add	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <main+0x214>)
 800066e:	f005 f84f 	bl	8005710 <HAL_GPIO_Init>

  // init ADC and DAC buffers
  uint16_t data_ADC[inputBufferSize*2]={0};
 8000672:	f507 43e1 	add.w	r3, r7, #28800	; 0x7080
 8000676:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800067a:	4618      	mov	r0, r3
 800067c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000680:	461a      	mov	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f00a fc70 	bl	800af68 <memset>
  uint16_t data_DAC_saved[sampleSize];
  uint16_t data_DAC_saved_LAST[sampleSize];
  uint16_t data_DAC_saved_LAST_saved[sampleSize];
  float32_t HANN_windowsfunction[sampleSize];

  for(int i=0;i<sampleSize;i++){
 8000688:	2300      	movs	r3, #0
 800068a:	f247 027c 	movw	r2, #28796	; 0x707c
 800068e:	443a      	add	r2, r7
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e03a      	b.n	800070a <main+0x282>
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	58024400 	.word	0x58024400
 800069c:	58020000 	.word	0x58020000
	  HANN_windowsfunction[i]=0.5 * (1.0 - cos(2.0 * M_PI * (double)i / (double)sampleSize));
 80006a0:	f247 037c 	movw	r3, #28796	; 0x707c
 80006a4:	443b      	add	r3, r7
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006b0:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8000990 <main+0x508>
 80006b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006b8:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 8000998 <main+0x510>
 80006bc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006c0:	eeb0 0b46 	vmov.f64	d0, d6
 80006c4:	f00a fc58 	bl	800af78 <cos>
 80006c8:	eeb0 7b40 	vmov.f64	d7, d0
 80006cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80006d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006d4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80006d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006e0:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80006e4:	461a      	mov	r2, r3
 80006e6:	f247 037c 	movw	r3, #28796	; 0x707c
 80006ea:	443b      	add	r3, r7
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	3b64      	subs	r3, #100	; 0x64
 80006f4:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<sampleSize;i++){
 80006f8:	f247 037c 	movw	r3, #28796	; 0x707c
 80006fc:	443b      	add	r3, r7
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	f247 027c 	movw	r2, #28796	; 0x707c
 8000706:	443a      	add	r2, r7
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	f247 037c 	movw	r3, #28796	; 0x707c
 800070e:	443b      	add	r3, r7
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000716:	dbc3      	blt.n	80006a0 <main+0x218>
  }

  // start DMA for ADC and DAC
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data_ADC, inputBufferSize*2);
 8000718:	f646 031c 	movw	r3, #26652	; 0x681c
 800071c:	443b      	add	r3, r7
 800071e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000722:	4619      	mov	r1, r3
 8000724:	489e      	ldr	r0, [pc, #632]	; (80009a0 <main+0x518>)
 8000726:	f001 fc87 	bl	8002038 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)data_DAC, outputBufferSize*2, DAC_ALIGN_12B_R);
 800072a:	4a9e      	ldr	r2, [pc, #632]	; (80009a4 <main+0x51c>)
 800072c:	f502 43e1 	add.w	r3, r2, #28800	; 0x7080
 8000730:	19da      	adds	r2, r3, r7
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	2110      	movs	r1, #16
 800073c:	489a      	ldr	r0, [pc, #616]	; (80009a8 <main+0x520>)
 800073e:	f002 fc71 	bl	8003024 <HAL_DAC_Start_DMA>
  uint32_t adc_buffer_counter=0;
 8000742:	2300      	movs	r3, #0
 8000744:	f247 0244 	movw	r2, #28740	; 0x7044
 8000748:	443a      	add	r2, r7
 800074a:	6013      	str	r3, [r2, #0]
  uint32_t dac_buffer_counter=0;
 800074c:	2300      	movs	r3, #0
 800074e:	f247 0240 	movw	r2, #28736	; 0x7040
 8000752:	443a      	add	r2, r7
 8000754:	6013      	str	r3, [r2, #0]

  HAL_OPAMP_Start(&hopamp1);
 8000756:	4895      	ldr	r0, [pc, #596]	; (80009ac <main+0x524>)
 8000758:	f005 fa9a 	bl	8005c90 <HAL_OPAMP_Start>
  // start Timers for ADC and DAC
  HAL_TIM_Base_Start(&htim8);
 800075c:	4894      	ldr	r0, [pc, #592]	; (80009b0 <main+0x528>)
 800075e:	f009 f849 	bl	80097f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000762:	4894      	ldr	r0, [pc, #592]	; (80009b4 <main+0x52c>)
 8000764:	f009 f846 	bl	80097f4 <HAL_TIM_Base_Start>

 // fft helping variables
  float32_t data_ADC_f[sampleSize];
  float32_t FFT_cmplx_output[sampleSize];
  float32_t FFT_amplitude[sampleSize/2];
  float32_t FFT_cmplx_output_copy[sampleSize/2]={0};
 8000768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800076c:	3b64      	subs	r3, #100	; 0x64
 800076e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00a fbf7 	bl	800af68 <memset>

	arm_rfft_fast_instance_f32  f32instancec;
	arm_rfft_fast_init_f32(&f32instancec, sampleSize);
 800077a:	4b8f      	ldr	r3, [pc, #572]	; (80009b8 <main+0x530>)
 800077c:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 8000780:	443b      	add	r3, r7
 8000782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fc2e 	bl	8009fe8 <arm_rfft_fast_init_f32>
	uint8_t state;
	uint8_t DAC_data_rdy=0;
 800078c:	2300      	movs	r3, #0
 800078e:	f247 027a 	movw	r2, #28794	; 0x707a
 8000792:	443a      	add	r2, r7
 8000794:	7013      	strb	r3, [r2, #0]


	uint32_t timeADC=HAL_GetTick();
 8000796:	f001 f889 	bl	80018ac <HAL_GetTick>
 800079a:	f247 033c 	movw	r3, #28732	; 0x703c
 800079e:	443b      	add	r3, r7
 80007a0:	6018      	str	r0, [r3, #0]
  while (1)
  {

	  if(DAC_data_rdy){
 80007a2:	f247 037a 	movw	r3, #28794	; 0x707a
 80007a6:	443b      	add	r3, r7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d042      	beq.n	8000834 <main+0x3ac>
		  if(DAC_buffer_is_full){
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <main+0x534>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d01d      	beq.n	80007f4 <main+0x36c>

			  memcpy(&(data_DAC[outputBufferSize]),data_DAC_saved,outputBufferSize*sizeof(data_DAC_saved[0]));
 80007b8:	4981      	ldr	r1, [pc, #516]	; (80009c0 <main+0x538>)
 80007ba:	f501 43e1 	add.w	r3, r1, #28800	; 0x7080
 80007be:	19d9      	adds	r1, r3, r7
 80007c0:	4b78      	ldr	r3, [pc, #480]	; (80009a4 <main+0x51c>)
 80007c2:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 80007c6:	443b      	add	r3, r7
 80007c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00a fbbb 	bl	800af4c <memcpy>

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007dc:	4879      	ldr	r0, [pc, #484]	; (80009c4 <main+0x53c>)
 80007de:	f005 f947 	bl	8005a70 <HAL_GPIO_WritePin>
			  DAC_buffer_is_full=0;
 80007e2:	4b76      	ldr	r3, [pc, #472]	; (80009bc <main+0x534>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			  DAC_data_rdy=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f247 027a 	movw	r2, #28794	; 0x707a
 80007ee:	443a      	add	r2, r7
 80007f0:	7013      	strb	r3, [r2, #0]
 80007f2:	e01f      	b.n	8000834 <main+0x3ac>
		  }
		  else if(DAC_buffer_is_half_full){
 80007f4:	4b74      	ldr	r3, [pc, #464]	; (80009c8 <main+0x540>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01a      	beq.n	8000834 <main+0x3ac>

			  memcpy(data_DAC,data_DAC_saved,outputBufferSize*sizeof(data_DAC_saved[0]));
 80007fe:	4970      	ldr	r1, [pc, #448]	; (80009c0 <main+0x538>)
 8000800:	f501 43e1 	add.w	r3, r1, #28800	; 0x7080
 8000804:	19d9      	adds	r1, r3, r7
 8000806:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <main+0x51c>)
 8000808:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 800080c:	443b      	add	r3, r7
 800080e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000812:	4618      	mov	r0, r3
 8000814:	f00a fb9a 	bl	800af4c <memcpy>

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	4869      	ldr	r0, [pc, #420]	; (80009c4 <main+0x53c>)
 8000820:	f005 f926 	bl	8005a70 <HAL_GPIO_WritePin>
			  DAC_buffer_is_half_full=0;
 8000824:	4b68      	ldr	r3, [pc, #416]	; (80009c8 <main+0x540>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
			  DAC_data_rdy=0;
 800082a:	2300      	movs	r3, #0
 800082c:	f247 027a 	movw	r2, #28794	; 0x707a
 8000830:	443a      	add	r2, r7
 8000832:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  if(ADC_buffer_is_full){
 8000834:	4b65      	ldr	r3, [pc, #404]	; (80009cc <main+0x544>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d048      	beq.n	80008d0 <main+0x448>

		  //shift adc buffer to get the new data space

		  // data_ADC_Buffer[0] =  data_ADC_buffer[inputBufferSize]
		  // data_ADC_Buffer[1] =  data_ADC_buffer[inputBufferSize+1]
		  for(int i=inputBufferSize; i<sampleSize;i++){
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	f247 0274 	movw	r2, #28788	; 0x7074
 8000846:	443a      	add	r2, r7
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e021      	b.n	8000890 <main+0x408>
			  data_ADC_buffer[i-inputBufferSize]=data_ADC_buffer[i];
 800084c:	f247 0374 	movw	r3, #28788	; 0x7074
 8000850:	443b      	add	r3, r7
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8000858:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 800085c:	4619      	mov	r1, r3
 800085e:	f247 0374 	movw	r3, #28788	; 0x7074
 8000862:	443b      	add	r3, r7
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	f833 1c64 	ldrh.w	r1, [r3, #-100]
 800086e:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8000872:	4618      	mov	r0, r3
 8000874:	0053      	lsls	r3, r2, #1
 8000876:	4403      	add	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	f823 2c64 	strh.w	r2, [r3, #-100]
		  for(int i=inputBufferSize; i<sampleSize;i++){
 800087e:	f247 0374 	movw	r3, #28788	; 0x7074
 8000882:	443b      	add	r3, r7
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	f247 0274 	movw	r2, #28788	; 0x7074
 800088c:	443a      	add	r2, r7
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	f247 0374 	movw	r3, #28788	; 0x7074
 8000894:	443b      	add	r3, r7
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089c:	dbd6      	blt.n	800084c <main+0x3c4>
		  }
		  //save ADC data to ADC buffer
		  memcpy(&(data_ADC_buffer[sampleSize-inputBufferSize]),&(data_ADC[inputBufferSize]),inputBufferSize*sizeof(data_ADC[0]));
 800089e:	f646 031c 	movw	r3, #26652	; 0x681c
 80008a2:	443b      	add	r3, r7
 80008a4:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 80008a8:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <main+0x548>)
 80008aa:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 80008ae:	443b      	add	r3, r7
 80008b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00a fb47 	bl	800af4c <memcpy>
		  //memcpy(data_DAC,data_DAC_saved,sampleSize*sizeof(data_DAC_saved[0]));

		  ADC_buffer_is_full=0;
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <main+0x544>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
		  state=1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f247 027b 	movw	r2, #28795	; 0x707b
 80008ca:	443a      	add	r2, r7
 80008cc:	7013      	strb	r3, [r2, #0]
 80008ce:	e04a      	b.n	8000966 <main+0x4de>
	  }else if(ADC_buffer_is_half_full){
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <main+0x54c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d045      	beq.n	8000966 <main+0x4de>

		  //shift adc buffer to get the new data space
		  for(int i=inputBufferSize; i<sampleSize;i++){
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	f247 0270 	movw	r2, #28784	; 0x7070
 80008e2:	443a      	add	r2, r7
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e021      	b.n	800092c <main+0x4a4>
			  data_ADC_buffer[i-inputBufferSize]=data_ADC_buffer[i];
 80008e8:	f247 0370 	movw	r3, #28784	; 0x7070
 80008ec:	443b      	add	r3, r7
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80008f4:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80008f8:	4619      	mov	r1, r3
 80008fa:	f247 0370 	movw	r3, #28784	; 0x7070
 80008fe:	443b      	add	r3, r7
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	440b      	add	r3, r1
 8000906:	f833 1c64 	ldrh.w	r1, [r3, #-100]
 800090a:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 800090e:	4618      	mov	r0, r3
 8000910:	0053      	lsls	r3, r2, #1
 8000912:	4403      	add	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	f823 2c64 	strh.w	r2, [r3, #-100]
		  for(int i=inputBufferSize; i<sampleSize;i++){
 800091a:	f247 0370 	movw	r3, #28784	; 0x7070
 800091e:	443b      	add	r3, r7
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	f247 0270 	movw	r2, #28784	; 0x7070
 8000928:	443a      	add	r2, r7
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	f247 0370 	movw	r3, #28784	; 0x7070
 8000930:	443b      	add	r3, r7
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000938:	dbd6      	blt.n	80008e8 <main+0x460>
		  }
		 //save ADC data to ADC buffer
		 memcpy(&(data_ADC_buffer[sampleSize-inputBufferSize]),data_ADC,inputBufferSize*sizeof(data_ADC[0]));
 800093a:	f646 011c 	movw	r1, #26652	; 0x681c
 800093e:	4439      	add	r1, r7
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <main+0x548>)
 8000942:	f503 43e1 	add.w	r3, r3, #28800	; 0x7080
 8000946:	443b      	add	r3, r7
 8000948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	4618      	mov	r0, r3
 8000952:	f00a fafb 	bl	800af4c <memcpy>
		  //memcpy(data_DAC,data_DAC_saved,sampleSize*sizeof(data_DAC_saved[0]));

		  ADC_buffer_is_half_full=0;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <main+0x54c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
		  state=1;
 800095c:	2301      	movs	r3, #1
 800095e:	f247 027b 	movw	r2, #28795	; 0x707b
 8000962:	443a      	add	r2, r7
 8000964:	7013      	strb	r3, [r2, #0]
	  }

//	  HAL_Delay(50);
//	  memcpy(data_ADC_buffer,&(data_ADC[sampleSize]),sampleSize*sizeof(data_ADC[0]));
	  //state=1;
	  if(state){
 8000966:	f247 037b 	movw	r3, #28795	; 0x707b
 800096a:	443b      	add	r3, r7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f43f af17 	beq.w	80007a2 <main+0x31a>

		  timeADC=HAL_GetTick();
 8000974:	f000 ff9a 	bl	80018ac <HAL_GetTick>
 8000978:	f247 033c 	movw	r3, #28732	; 0x703c
 800097c:	443b      	add	r3, r7
 800097e:	6018      	str	r0, [r3, #0]
		  //transform ADC data to float
		  for(int i=0; i<sampleSize;i++){
 8000980:	2300      	movs	r3, #0
 8000982:	f247 026c 	movw	r2, #28780	; 0x706c
 8000986:	443a      	add	r2, r7
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e04b      	b.n	8000a24 <main+0x59c>
 800098c:	f3af 8000 	nop.w
 8000990:	54442d18 	.word	0x54442d18
 8000994:	401921fb 	.word	0x401921fb
 8000998:	00000000 	.word	0x00000000
 800099c:	40900000 	.word	0x40900000
 80009a0:	24000034 	.word	0x24000034
 80009a4:	ffffe79c 	.word	0xffffe79c
 80009a8:	24000110 	.word	0x24000110
 80009ac:	2400019c 	.word	0x2400019c
 80009b0:	2400021c 	.word	0x2400021c
 80009b4:	240001d0 	.word	0x240001d0
 80009b8:	ffff8f84 	.word	0xffff8f84
 80009bc:	2400026a 	.word	0x2400026a
 80009c0:	ffffdf9c 	.word	0xffffdf9c
 80009c4:	58020000 	.word	0x58020000
 80009c8:	2400026b 	.word	0x2400026b
 80009cc:	24000268 	.word	0x24000268
 80009d0:	ffffef9c 	.word	0xffffef9c
 80009d4:	24000269 	.word	0x24000269
			  data_ADC_f[i]=data_ADC_buffer[i]-2048;
 80009d8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80009dc:	461a      	mov	r2, r3
 80009de:	f247 036c 	movw	r3, #28780	; 0x706c
 80009e2:	443b      	add	r3, r7
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80009ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80009fe:	461a      	mov	r2, r3
 8000a00:	f247 036c 	movw	r3, #28780	; 0x706c
 8000a04:	443b      	add	r3, r7
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3b64      	subs	r3, #100	; 0x64
 8000a0e:	edc3 7a00 	vstr	s15, [r3]
		  for(int i=0; i<sampleSize;i++){
 8000a12:	f247 036c 	movw	r3, #28780	; 0x706c
 8000a16:	443b      	add	r3, r7
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f247 026c 	movw	r2, #28780	; 0x706c
 8000a20:	443a      	add	r2, r7
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	f247 036c 	movw	r3, #28780	; 0x706c
 8000a28:	443b      	add	r3, r7
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a30:	dbd2      	blt.n	80009d8 <main+0x550>
		  }
		  for(int i=0;i<sampleSize;i++){
 8000a32:	2300      	movs	r3, #0
 8000a34:	f247 0268 	movw	r2, #28776	; 0x7068
 8000a38:	443a      	add	r2, r7
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e02e      	b.n	8000a9c <main+0x614>
			  data_ADC_f[i]=data_ADC_f[i]*HANN_windowsfunction[i];
 8000a3e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a42:	461a      	mov	r2, r3
 8000a44:	f247 0368 	movw	r3, #28776	; 0x7068
 8000a48:	443b      	add	r3, r7
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b64      	subs	r3, #100	; 0x64
 8000a52:	ed93 7a00 	vldr	s14, [r3]
 8000a56:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f247 0368 	movw	r3, #28776	; 0x7068
 8000a60:	443b      	add	r3, r7
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	3b64      	subs	r3, #100	; 0x64
 8000a6a:	edd3 7a00 	vldr	s15, [r3]
 8000a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a72:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a76:	461a      	mov	r2, r3
 8000a78:	f247 0368 	movw	r3, #28776	; 0x7068
 8000a7c:	443b      	add	r3, r7
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b64      	subs	r3, #100	; 0x64
 8000a86:	edc3 7a00 	vstr	s15, [r3]
		  for(int i=0;i<sampleSize;i++){
 8000a8a:	f247 0368 	movw	r3, #28776	; 0x7068
 8000a8e:	443b      	add	r3, r7
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	f247 0268 	movw	r2, #28776	; 0x7068
 8000a98:	443a      	add	r2, r7
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	f247 0368 	movw	r3, #28776	; 0x7068
 8000aa0:	443b      	add	r3, r7
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa8:	dbc9      	blt.n	8000a3e <main+0x5b6>
		  }

		  // FFT: time domain -> cmplx_freq
		  arm_rfft_fast_f32(&f32instancec, data_ADC_f, FFT_cmplx_output, 0);
 8000aaa:	4abb      	ldr	r2, [pc, #748]	; (8000d98 <main+0x910>)
 8000aac:	f502 43e1 	add.w	r3, r2, #28800	; 0x7080
 8000ab0:	19da      	adds	r2, r3, r7
 8000ab2:	49ba      	ldr	r1, [pc, #744]	; (8000d9c <main+0x914>)
 8000ab4:	f501 43e1 	add.w	r3, r1, #28800	; 0x7080
 8000ab8:	19d9      	adds	r1, r3, r7
 8000aba:	48b9      	ldr	r0, [pc, #740]	; (8000da0 <main+0x918>)
 8000abc:	f500 43e1 	add.w	r3, r0, #28800	; 0x7080
 8000ac0:	19d8      	adds	r0, r3, r7
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f009 fb76 	bl	800a1b4 <arm_rfft_fast_f32>

		  // do frequency modulation
		  //[TODO]
		  // copy complex fft to buffer

		  for(uint32_t i=0; i<sampleSize/2;i++){
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f247 0264 	movw	r2, #28772	; 0x7064
 8000ace:	443a      	add	r2, r7
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e01e      	b.n	8000b12 <main+0x68a>
			  FFT_cmplx_output_copy[i]=FFT_cmplx_output[i];
 8000ad4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f247 0364 	movw	r3, #28772	; 0x7064
 8000ade:	443b      	add	r3, r7
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3b64      	subs	r3, #100	; 0x64
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aee:	4619      	mov	r1, r3
 8000af0:	f247 0364 	movw	r3, #28772	; 0x7064
 8000af4:	443b      	add	r3, r7
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3b64      	subs	r3, #100	; 0x64
 8000afe:	601a      	str	r2, [r3, #0]
		  for(uint32_t i=0; i<sampleSize/2;i++){
 8000b00:	f247 0364 	movw	r3, #28772	; 0x7064
 8000b04:	443b      	add	r3, r7
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f247 0264 	movw	r2, #28772	; 0x7064
 8000b0e:	443a      	add	r2, r7
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	f247 0364 	movw	r3, #28772	; 0x7064
 8000b16:	443b      	add	r3, r7
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b1e:	d3d9      	bcc.n	8000ad4 <main+0x64c>

		  }

		  // make an octaveUP shift by adding frequencys that are 2 times as fast
		  for(uint32_t i=2; i<sampleSize/2;i=i+2){
 8000b20:	2302      	movs	r3, #2
 8000b22:	f247 0260 	movw	r2, #28768	; 0x7060
 8000b26:	443a      	add	r2, r7
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e03a      	b.n	8000ba2 <main+0x71a>
			  // octave UP 1
			  if(i<sampleSize/2){
 8000b2c:	f247 0360 	movw	r3, #28768	; 0x7060
 8000b30:	443b      	add	r3, r7
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b38:	d22a      	bcs.n	8000b90 <main+0x708>
				  FFT_cmplx_output[i+i]=FFT_cmplx_output_copy[i]*octave_up1_blend; 			// shift real
 8000b3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f247 0360 	movw	r3, #28768	; 0x7060
 8000b44:	443b      	add	r3, r7
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b64      	subs	r3, #100	; 0x64
 8000b4e:	ed93 7a00 	vldr	s14, [r3]
 8000b52:	4b94      	ldr	r3, [pc, #592]	; (8000da4 <main+0x91c>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	f247 0360 	movw	r3, #28768	; 0x7060
 8000b5c:	443b      	add	r3, r7
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b66:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3b64      	subs	r3, #100	; 0x64
 8000b70:	edc3 7a00 	vstr	s15, [r3]
				  FFT_cmplx_output[i+i+1]=0;//FFT_cmplx_output_copy[i+1]*octave_up1_blend; 		// shift cmplx
 8000b74:	f247 0360 	movw	r3, #28768	; 0x7060
 8000b78:	443b      	add	r3, r7
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	3b64      	subs	r3, #100	; 0x64
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
		  for(uint32_t i=2; i<sampleSize/2;i=i+2){
 8000b90:	f247 0360 	movw	r3, #28768	; 0x7060
 8000b94:	443b      	add	r3, r7
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	f247 0260 	movw	r2, #28768	; 0x7060
 8000b9e:	443a      	add	r2, r7
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	f247 0360 	movw	r3, #28768	; 0x7060
 8000ba6:	443b      	add	r3, r7
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bae:	d3bd      	bcc.n	8000b2c <main+0x6a4>
				//  FFT_cmplx_output[i/2]+=FFT_cmplx_output_copy[i]*octave_down1_blend; 			// shift real
				  //FFT_cmplx_output[i/2+1]+=FFT_cmplx_output_copy[i+1]*octave_down1_blend; 		// shift cmplx
			  //}
		  }
		  // add original sound
		  for(uint32_t i=0; i<sampleSize/2+1;i++){
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f247 025c 	movw	r2, #28764	; 0x705c
 8000bb6:	443a      	add	r2, r7
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e033      	b.n	8000c24 <main+0x79c>
			  FFT_cmplx_output[i]=FFT_cmplx_output[i]+FFT_cmplx_output_copy[i]*original_blend;
 8000bbc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f247 035c 	movw	r3, #28764	; 0x705c
 8000bc6:	443b      	add	r3, r7
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	3b64      	subs	r3, #100	; 0x64
 8000bd0:	ed93 7a00 	vldr	s14, [r3]
 8000bd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f247 035c 	movw	r3, #28764	; 0x705c
 8000bde:	443b      	add	r3, r7
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	3b64      	subs	r3, #100	; 0x64
 8000be8:	edd3 6a00 	vldr	s13, [r3]
 8000bec:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <main+0x920>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f247 035c 	movw	r3, #28764	; 0x705c
 8000c04:	443b      	add	r3, r7
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3b64      	subs	r3, #100	; 0x64
 8000c0e:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i=0; i<sampleSize/2+1;i++){
 8000c12:	f247 035c 	movw	r3, #28764	; 0x705c
 8000c16:	443b      	add	r3, r7
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f247 025c 	movw	r2, #28764	; 0x705c
 8000c20:	443a      	add	r2, r7
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	f247 035c 	movw	r3, #28764	; 0x705c
 8000c28:	443b      	add	r3, r7
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c30:	d9c4      	bls.n	8000bbc <main+0x734>
		  }



		  // FFT: cmplx_freq -> time domain
		  arm_rfft_fast_f32(&f32instancec, FFT_cmplx_output,data_ADC_f,1);
 8000c32:	4a5a      	ldr	r2, [pc, #360]	; (8000d9c <main+0x914>)
 8000c34:	f502 43e1 	add.w	r3, r2, #28800	; 0x7080
 8000c38:	19da      	adds	r2, r3, r7
 8000c3a:	4957      	ldr	r1, [pc, #348]	; (8000d98 <main+0x910>)
 8000c3c:	f501 43e1 	add.w	r3, r1, #28800	; 0x7080
 8000c40:	19d9      	adds	r1, r3, r7
 8000c42:	4857      	ldr	r0, [pc, #348]	; (8000da0 <main+0x918>)
 8000c44:	f500 43e1 	add.w	r3, r0, #28800	; 0x7080
 8000c48:	19d8      	adds	r0, r3, r7
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f009 fab2 	bl	800a1b4 <arm_rfft_fast_f32>

      // inverse fft time domain w/ window function on it
		  for(int i=0; i<sampleSize; i++){
 8000c50:	2300      	movs	r3, #0
 8000c52:	f247 0258 	movw	r2, #28760	; 0x7058
 8000c56:	443a      	add	r2, r7
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e028      	b.n	8000cae <main+0x826>
			  data_DAC_saved[i]=data_ADC_f[i]+2048;
 8000c5c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000c60:	461a      	mov	r2, r3
 8000c62:	f247 0358 	movw	r3, #28760	; 0x7058
 8000c66:	443b      	add	r3, r7
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3b64      	subs	r3, #100	; 0x64
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000dac <main+0x924>
 8000c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c80:	ee17 3a90 	vmov	r3, s15
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f247 0358 	movw	r3, #28760	; 0x7058
 8000c90:	443b      	add	r3, r7
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	f823 2c64 	strh.w	r2, [r3, #-100]
		  for(int i=0; i<sampleSize; i++){
 8000c9c:	f247 0358 	movw	r3, #28760	; 0x7058
 8000ca0:	443b      	add	r3, r7
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f247 0258 	movw	r2, #28760	; 0x7058
 8000caa:	443a      	add	r2, r7
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	f247 0358 	movw	r3, #28760	; 0x7058
 8000cb2:	443b      	add	r3, r7
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cba:	dbcf      	blt.n	8000c5c <main+0x7d4>
		  }
      // save this reconstructed signal
      for(int i=0; i<sampleSize; i++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f247 0254 	movw	r2, #28756	; 0x7054
 8000cc2:	443a      	add	r2, r7
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e01e      	b.n	8000d06 <main+0x87e>
			  data_DAC_saved_LAST_saved[i]=data_DAC_saved[i];
 8000cc8:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000ccc:	461a      	mov	r2, r3
 8000cce:	f247 0354 	movw	r3, #28756	; 0x7054
 8000cd2:	443b      	add	r3, r7
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 8000cde:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f247 0354 	movw	r3, #28756	; 0x7054
 8000ce8:	443b      	add	r3, r7
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	440b      	add	r3, r1
 8000cf0:	f823 2c64 	strh.w	r2, [r3, #-100]
      for(int i=0; i<sampleSize; i++){
 8000cf4:	f247 0354 	movw	r3, #28756	; 0x7054
 8000cf8:	443b      	add	r3, r7
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f247 0254 	movw	r2, #28756	; 0x7054
 8000d02:	443a      	add	r2, r7
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	f247 0354 	movw	r3, #28756	; 0x7054
 8000d0a:	443b      	add	r3, r7
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d12:	dbd9      	blt.n	8000cc8 <main+0x840>
		  }
      
      // 50 % overlap
      // add previoues windowed reconstructed signal with 50% overlap
      for(int i=sampleSize/2; i<sampleSize; i++){
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	f247 0250 	movw	r2, #28752	; 0x7050
 8000d1c:	443a      	add	r2, r7
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e02c      	b.n	8000d7c <main+0x8f4>
			  data_DAC_saved[i]+=data_DAC_saved_LAST[sampleSize/2+i];
 8000d22:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000d26:	461a      	mov	r2, r3
 8000d28:	f247 0350 	movw	r3, #28752	; 0x7050
 8000d2c:	443b      	add	r3, r7
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 8000d38:	f247 0350 	movw	r3, #28752	; 0x7050
 8000d3c:	443b      	add	r3, r7
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8000d44:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000d48:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8000d4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d50:	4413      	add	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f247 0350 	movw	r3, #28752	; 0x7050
 8000d5e:	443b      	add	r3, r7
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	440b      	add	r3, r1
 8000d66:	f823 2c64 	strh.w	r2, [r3, #-100]
      for(int i=sampleSize/2; i<sampleSize; i++){
 8000d6a:	f247 0350 	movw	r3, #28752	; 0x7050
 8000d6e:	443b      	add	r3, r7
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	f247 0250 	movw	r2, #28752	; 0x7050
 8000d78:	443a      	add	r2, r7
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	f247 0350 	movw	r3, #28752	; 0x7050
 8000d80:	443b      	add	r3, r7
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d88:	dbcb      	blt.n	8000d22 <main+0x89a>
		  }
      // save this data
      for(int i=0; i<sampleSize; i++){
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f247 024c 	movw	r2, #28748	; 0x704c
 8000d90:	443a      	add	r2, r7
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e036      	b.n	8000e04 <main+0x97c>
 8000d96:	bf00      	nop
 8000d98:	ffff9f9c 	.word	0xffff9f9c
 8000d9c:	ffffaf9c 	.word	0xffffaf9c
 8000da0:	ffff8f84 	.word	0xffff8f84
 8000da4:	24000008 	.word	0x24000008
 8000da8:	2400000c 	.word	0x2400000c
 8000dac:	45000000 	.word	0x45000000
			  data_DAC_saved_LAST[i]+=data_DAC_saved_LAST_saved[i];
 8000db0:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000db4:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8000db8:	f247 024c 	movw	r2, #28748	; 0x704c
 8000dbc:	443a      	add	r2, r7
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dc4:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f247 034c 	movw	r3, #28748	; 0x704c
 8000dce:	443b      	add	r3, r7
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8000de2:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8000de6:	f247 024c 	movw	r2, #28748	; 0x704c
 8000dea:	443a      	add	r2, r7
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(int i=0; i<sampleSize; i++){
 8000df2:	f247 034c 	movw	r3, #28748	; 0x704c
 8000df6:	443b      	add	r3, r7
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f247 024c 	movw	r2, #28748	; 0x704c
 8000e00:	443a      	add	r2, r7
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	f247 034c 	movw	r3, #28748	; 0x704c
 8000e08:	443b      	add	r3, r7
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e10:	dbce      	blt.n	8000db0 <main+0x928>
		  }

      

		  //HAL_GPIO_TogglePin(GPIO_InitStruct, GPIO_Pin)
		  timeADC=HAL_GetTick()-timeADC;
 8000e12:	f000 fd4b 	bl	80018ac <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f247 033c 	movw	r3, #28732	; 0x703c
 8000e1c:	443b      	add	r3, r7
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f247 023c 	movw	r2, #28732	; 0x703c
 8000e26:	443a      	add	r2, r7
 8000e28:	6013      	str	r3, [r2, #0]
		  timeADC=HAL_GetTick();
 8000e2a:	f000 fd3f 	bl	80018ac <HAL_GetTick>
 8000e2e:	f247 033c 	movw	r3, #28732	; 0x703c
 8000e32:	443b      	add	r3, r7
 8000e34:	6018      	str	r0, [r3, #0]
		  state=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f247 027b 	movw	r2, #28795	; 0x707b
 8000e3c:	443a      	add	r2, r7
 8000e3e:	7013      	strb	r3, [r2, #0]
		  DAC_data_rdy=1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f247 027a 	movw	r2, #28794	; 0x707a
 8000e46:	443a      	add	r2, r7
 8000e48:	7013      	strb	r3, [r2, #0]
	  if(DAC_data_rdy){
 8000e4a:	e4aa      	b.n	80007a2 <main+0x31a>

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09c      	sub	sp, #112	; 0x70
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	224c      	movs	r2, #76	; 0x4c
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00a f884 	bl	800af68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2220      	movs	r2, #32
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00a f87e 	bl	800af68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f004 ff41 	bl	8005cf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <SystemClock_Config+0xfc>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <SystemClock_Config+0xfc>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <SystemClock_Config+0xfc>)
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <SystemClock_Config+0x100>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <SystemClock_Config+0x100>)
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <SystemClock_Config+0x100>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea4:	bf00      	nop
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <SystemClock_Config+0x100>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb2:	d1f8      	bne.n	8000ea6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <SystemClock_Config+0x104>)
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f023 0303 	bic.w	r3, r3, #3
 8000ebc:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <SystemClock_Config+0x104>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000eda:	23f0      	movs	r3, #240	; 0xf0
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000eea:	2304      	movs	r3, #4
 8000eec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 ff54 	bl	8005da8 <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f06:	f000 fa2d 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	233f      	movs	r3, #63	; 0x3f
 8000f0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f16:	2308      	movs	r3, #8
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fb93 	bl	800665c <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f3c:	f000 fa12 	bl	8001364 <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3770      	adds	r7, #112	; 0x70
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58000400 	.word	0x58000400
 8000f4c:	58024800 	.word	0x58024800
 8000f50:	58024400 	.word	0x58024400

08000f54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f6e:	4a2b      	ldr	r2, [pc, #172]	; (800101c <MX_ADC2_Init+0xc8>)
 8000f70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f74:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f78:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fa6:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000fd0:	f000 fe90 	bl	8001cf4 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fda:	f000 f9c3 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_ADC2_Init+0xcc>)
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_ADC2_Init+0xc4>)
 8001002:	f001 f8e7 	bl	80021d4 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 800100c:	f000 f9aa 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000034 	.word	0x24000034
 800101c:	40022100 	.word	0x40022100
 8001020:	10c00010 	.word	0x10c00010

08001024 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2224      	movs	r2, #36	; 0x24
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f009 ff99 	bl	800af68 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_DAC1_Init+0x5c>)
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_DAC1_Init+0x60>)
 800103a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800103c:	4810      	ldr	r0, [pc, #64]	; (8001080 <MX_DAC1_Init+0x5c>)
 800103e:	f001 ffcf 	bl	8002fe0 <HAL_DAC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001048:	f000 f98c 	bl	8001364 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001050:	2312      	movs	r3, #18
 8001052:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2210      	movs	r2, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_DAC1_Init+0x5c>)
 8001068:	f002 f8c6 	bl	80031f8 <HAL_DAC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001072:	f000 f977 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000110 	.word	0x24000110
 8001084:	40007400 	.word	0x40007400

08001088 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <MX_OPAMP1_Init+0x3c>)
 8001090:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 8001094:	2260      	movs	r2, #96	; 0x60
 8001096:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_OPAMP1_Init+0x38>)
 80010ac:	f004 fd28 	bl	8005b00 <HAL_OPAMP_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 80010b6:	f000 f955 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2400019c 	.word	0x2400019c
 80010c4:	40009000 	.word	0x40009000

080010c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_TIM5_Init+0x94>)
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <MX_TIM5_Init+0x98>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_TIM5_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_TIM5_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIME_PERIOD;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_TIM5_Init+0x94>)
 80010fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_TIM5_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM5_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_TIM5_Init+0x94>)
 800110e:	f008 fb19 	bl	8009744 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001118:	f000 f924 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_TIM5_Init+0x94>)
 800112a:	f008 fbd3 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 f916 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001138:	2320      	movs	r3, #32
 800113a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM5_Init+0x94>)
 8001146:	f008 fdf5 	bl	8009d34 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001150:	f000 f908 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	240001d0 	.word	0x240001d0
 8001160:	40000c00 	.word	0x40000c00

08001164 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_TIM8_Init+0xa0>)
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <MX_TIM8_Init+0xa4>)
 8001186:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_TIM8_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_TIM8_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIME_PERIOD;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM8_Init+0xa0>)
 8001196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_TIM8_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_TIM8_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_TIM8_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011ae:	4815      	ldr	r0, [pc, #84]	; (8001204 <MX_TIM8_Init+0xa0>)
 80011b0:	f008 fac8 	bl	8009744 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80011ba:	f000 f8d3 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_TIM8_Init+0xa0>)
 80011cc:	f008 fb82 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80011d6:	f000 f8c5 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011da:	2320      	movs	r3, #32
 80011dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM8_Init+0xa0>)
 80011ec:	f008 fda2 	bl	8009d34 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 f8b5 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2400021c 	.word	0x2400021c
 8001208:	40010400 	.word	0x40010400

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_DMA_Init+0x6c>)
 8001214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_DMA_Init+0x6c>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_DMA_Init+0x6c>)
 8001224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_DMA_Init+0x6c>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <MX_DMA_Init+0x6c>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_DMA_Init+0x6c>)
 8001242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	200c      	movs	r0, #12
 8001254:	f001 fe13 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001258:	200c      	movs	r0, #12
 800125a:	f001 fe2a 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2038      	movs	r0, #56	; 0x38
 8001264:	f001 fe0b 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001268:	2038      	movs	r0, #56	; 0x38
 800126a:	f001 fe22 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	58024400 	.word	0x58024400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_GPIO_Init+0x8c>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <MX_GPIO_Init+0x8c>)
 800128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_GPIO_Init+0x8c>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_GPIO_Init+0x8c>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400

0800130c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800131e:	f001 fde3 	bl	8002ee8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001322:	2301      	movs	r3, #1
 8001324:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001326:	2300      	movs	r3, #0
 8001328:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800132e:	231f      	movs	r3, #31
 8001330:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001332:	2387      	movs	r3, #135	; 0x87
 8001334:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001336:	2300      	movs	r3, #0
 8001338:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800133a:	2300      	movs	r3, #0
 800133c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800133e:	2301      	movs	r3, #1
 8001340:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001342:	2301      	movs	r3, #1
 8001344:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800134e:	463b      	mov	r3, r7
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fe01 	bl	8002f58 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001356:	2004      	movs	r0, #4
 8001358:	f001 fdde 	bl	8002f18 <HAL_MPU_Enable>

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x30>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x30>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58024400 	.word	0x58024400

080013a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b4      	sub	sp, #208	; 0xd0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	22c0      	movs	r2, #192	; 0xc0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f009 fdd7 	bl	800af68 <memset>
  if(hadc->Instance==ADC2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a35      	ldr	r2, [pc, #212]	; (8001494 <HAL_ADC_MspInit+0xf0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d162      	bne.n	800148a <HAL_ADC_MspInit+0xe6>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 80013d4:	2350      	movs	r3, #80	; 0x50
 80013d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013dc:	2302      	movs	r3, #2
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013e8:	2320      	movs	r3, #32
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fca4 	bl	8006d48 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001406:	f7ff ffad 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_ADC_MspInit+0xf4>)
 800140c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <HAL_ADC_MspInit+0xf4>)
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_ADC_MspInit+0xf4>)
 800141c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_ADC_MspInit+0xf8>)
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_ADC_MspInit+0xfc>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001430:	220a      	movs	r2, #10
 8001432:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_ADC_MspInit+0xf8>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_ADC_MspInit+0xf8>)
 800144a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001456:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_ADC_MspInit+0xf8>)
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001466:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_ADC_MspInit+0xf8>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001470:	f002 f876 	bl	8003560 <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 800147a:	f7ff ff73 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_ADC_MspInit+0xf8>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	37d0      	adds	r7, #208	; 0xd0
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022100 	.word	0x40022100
 8001498:	58024400 	.word	0x58024400
 800149c:	24000098 	.word	0x24000098
 80014a0:	40020410 	.word	0x40020410

080014a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_DAC_MspInit+0xe0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d15a      	bne.n	800157c <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014cc:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_DAC_MspInit+0xe4>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	481d      	ldr	r0, [pc, #116]	; (800158c <HAL_DAC_MspInit+0xe8>)
 8001516:	f004 f8fb 	bl	8005710 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_DAC_MspInit+0xec>)
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_DAC_MspInit+0xf0>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001522:	2244      	movs	r2, #68	; 0x44
 8001524:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_DAC_MspInit+0xec>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001538:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_DAC_MspInit+0xec>)
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001540:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001548:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_DAC_MspInit+0xec>)
 800154c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001550:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001554:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001558:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_DAC_MspInit+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001562:	f001 fffd 	bl	8003560 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 800156c:	f7ff fefa 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_DAC_MspInit+0xec>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40007400 	.word	0x40007400
 8001588:	58024400 	.word	0x58024400
 800158c:	58020000 	.word	0x58020000
 8001590:	24000124 	.word	0x24000124
 8001594:	40020028 	.word	0x40020028

08001598 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <HAL_OPAMP_MspInit+0xb4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d144      	bne.n	8001644 <HAL_OPAMP_MspInit+0xac>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_OPAMP_MspInit+0xb8>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    PB0     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001614:	2310      	movs	r3, #16
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_OPAMP_MspInit+0xbc>)
 8001628:	f004 f872 	bl	8005710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <HAL_OPAMP_MspInit+0xc0>)
 8001640:	f004 f866 	bl	8005710 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40009000 	.word	0x40009000
 8001650:	58024400 	.word	0x58024400
 8001654:	58020800 	.word	0x58020800
 8001658:	58020400 	.word	0x58020400

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10f      	bne.n	800168e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800168c:	e013      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_TIM_Base_MspInit+0x70>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d10e      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 800169a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 80016aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40000c00 	.word	0x40000c00
 80016c8:	58024400 	.word	0x58024400
 80016cc:	40010400 	.word	0x40010400

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f8b2 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Stream1_IRQHandler+0x10>)
 800172a:	f002 fcdf 	bl	80040ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000124 	.word	0x24000124

08001738 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA2_Stream0_IRQHandler+0x10>)
 800173e:	f002 fcd5 	bl	80040ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000098 	.word	0x24000098

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001750:	f7fe fdc2 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f009 fbc3 	bl	800af04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7fe fe83 	bl	8000488 <main>
  bx  lr
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001788:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800178c:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001790:	0801ed60 	.word	0x0801ed60
  ldr r2, =_sbss
 8001794:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001798:	24000270 	.word	0x24000270

0800179c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC3_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a6:	2003      	movs	r0, #3
 80017a8:	f001 fb5e 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017ac:	f005 f90c 	bl	80069c8 <HAL_RCC_GetSysClockFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	4913      	ldr	r1, [pc, #76]	; (800180c <HAL_Init+0x6c>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_Init+0x6c>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_Init+0x70>)
 80017e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_Init+0x74>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f814 	bl	8001818 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e002      	b.n	8001800 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fdb9 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024400 	.word	0x58024400
 800180c:	0800bb80 	.word	0x0800bb80
 8001810:	24000004 	.word	0x24000004
 8001814:	24000000 	.word	0x24000000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_InitTick+0x60>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e021      	b.n	8001870 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_InitTick+0x64>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_InitTick+0x60>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fb43 	bl	8002ece <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f001 fb0d 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x68>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24000014 	.word	0x24000014
 800187c:	24000000 	.word	0x24000000
 8001880:	24000010 	.word	0x24000010

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	24000014 	.word	0x24000014
 80018a8:	2400026c 	.word	0x2400026c

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2400026c 	.word	0x2400026c

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	24000014 	.word	0x24000014

0800190c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetREVID+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0c1b      	lsrs	r3, r3, #16
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	5c001000 	.word	0x5c001000

08001924 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3360      	adds	r3, #96	; 0x60
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3360      	adds	r3, #96	; 0x60
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]
  }
}
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3330      	adds	r3, #48	; 0x30
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	211f      	movs	r1, #31
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 011f 	and.w	r1, r3, #31
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f023 0203 	bic.w	r2, r3, #3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3314      	adds	r3, #20
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	0e5b      	lsrs	r3, r3, #25
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0d1b      	lsrs	r3, r3, #20
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2107      	movs	r1, #7
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0d1b      	lsrs	r3, r3, #20
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0318 	and.w	r3, r3, #24
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b54:	40d9      	lsrs	r1, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	400b      	ands	r3, r1
 8001b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	000fffff 	.word	0x000fffff

08001b78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 031f 	and.w	r3, r3, #31
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6093      	str	r3, [r2, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	5fffffc0 	.word	0x5fffffc0

08001bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	6fffffc0 	.word	0x6fffffc0

08001c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <LL_ADC_Enable+0x24>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	7fffffc0 	.word	0x7fffffc0

08001c58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_IsEnabled+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_IsEnabled+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <LL_ADC_REG_StartConversion+0x24>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	7fffffc0 	.word	0x7fffffc0

08001ca8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e18f      	b.n	800202e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fb41 	bl	80013a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff3f 	bl	8001bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff25 	bl	8001b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff5a 	bl	8001c08 <LL_ADC_IsInternalRegulatorEnabled>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d114      	bne.n	8001d84 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff3e 	bl	8001be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4b87      	ldr	r3, [pc, #540]	; (8001f84 <HAL_ADC_Init+0x290>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a87      	ldr	r2, [pc, #540]	; (8001f88 <HAL_ADC_Init+0x294>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff3d 	bl	8001c08 <LL_ADC_IsInternalRegulatorEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff77 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8001dba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 8129 	bne.w	800201c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 8125 	bne.w	800201c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff36 	bl	8001c58 <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d136      	bne.n	8001e60 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_ADC_Init+0x298>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Init+0x112>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_ADC_Init+0x29c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_ADC_Init+0x130>
 8001e06:	4861      	ldr	r0, [pc, #388]	; (8001f8c <HAL_ADC_Init+0x298>)
 8001e08:	f7ff ff26 	bl	8001c58 <LL_ADC_IsEnabled>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4860      	ldr	r0, [pc, #384]	; (8001f90 <HAL_ADC_Init+0x29c>)
 8001e10:	f7ff ff22 	bl	8001c58 <LL_ADC_IsEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4323      	orrs	r3, r4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e008      	b.n	8001e36 <HAL_ADC_Init+0x142>
 8001e24:	485b      	ldr	r0, [pc, #364]	; (8001f94 <HAL_ADC_Init+0x2a0>)
 8001e26:	f7ff ff17 	bl	8001c58 <LL_ADC_IsEnabled>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a53      	ldr	r2, [pc, #332]	; (8001f8c <HAL_ADC_Init+0x298>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_Init+0x15a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_ADC_Init+0x29c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x15e>
 8001e4e:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_ADC_Init+0x2a4>)
 8001e50:	e000      	b.n	8001e54 <HAL_ADC_Init+0x160>
 8001e52:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_ADC_Init+0x2a8>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7ff fd62 	bl	8001924 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e60:	f7ff fd54 	bl	800190c <HAL_GetREVID>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d914      	bls.n	8001e98 <HAL_ADC_Init+0x1a4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d110      	bne.n	8001e98 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7d5b      	ldrb	r3, [r3, #21]
 8001e7a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e80:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7f1b      	ldrb	r3, [r3, #28]
 8001e8c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e8e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e90:	f043 030c 	orr.w	r3, r3, #12
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	e00d      	b.n	8001eb4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7d5b      	ldrb	r3, [r3, #21]
 8001e9c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ea8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7f1b      	ldrb	r3, [r3, #28]
 8001eae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7f1b      	ldrb	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_ADC_Init+0x2ac>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	69b9      	ldr	r1, [r7, #24]
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fed2 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8001f04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fedf 	bl	8001cce <LL_ADC_INJ_IsConversionOngoing>
 8001f10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d15f      	bne.n	8001fd8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d15c      	bne.n	8001fd8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7d1b      	ldrb	r3, [r3, #20]
 8001f22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_ADC_Init+0x2b0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d130      	bne.n	8001fac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_ADC_Init+0x2b4>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0411      	lsls	r1, r2, #16
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f72:	430a      	orrs	r2, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	e01c      	b.n	8001fbc <HAL_ADC_Init+0x2c8>
 8001f82:	bf00      	nop
 8001f84:	24000000 	.word	0x24000000
 8001f88:	053e2d63 	.word	0x053e2d63
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40022100 	.word	0x40022100
 8001f94:	58026000 	.word	0x58026000
 8001f98:	40022300 	.word	0x40022300
 8001f9c:	58026300 	.word	0x58026300
 8001fa0:	fff0c003 	.word	0xfff0c003
 8001fa4:	ffffbffc 	.word	0xffffbffc
 8001fa8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fd6c 	bl	8002ab0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f023 010f 	bic.w	r1, r3, #15
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020f 	bic.w	r2, r2, #15
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	; 0x54
 800201a:	e007      	b.n	800202c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800202c:	7ffb      	ldrb	r3, [r7, #31]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}
 8002036:	bf00      	nop

08002038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a55      	ldr	r2, [pc, #340]	; (80021a0 <HAL_ADC_Start_DMA+0x168>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_ADC_Start_DMA+0x20>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a54      	ldr	r2, [pc, #336]	; (80021a4 <HAL_ADC_Start_DMA+0x16c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_ADC_Start_DMA+0x24>
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_ADC_Start_DMA+0x170>)
 800205a:	e000      	b.n	800205e <HAL_ADC_Start_DMA+0x26>
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_ADC_Start_DMA+0x174>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fd8a 	bl	8001b78 <LL_ADC_GetMultimode>
 8002064:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe1c 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 808c 	bne.w	8002190 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Start_DMA+0x4e>
 8002082:	2302      	movs	r3, #2
 8002084:	e087      	b.n	8002196 <HAL_ADC_Start_DMA+0x15e>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b09      	cmp	r3, #9
 800209e:	d170      	bne.n	8002182 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fbe7 	bl	8002874 <ADC_Enable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d163      	bne.n	8002178 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_ADC_Start_DMA+0x178>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_ADC_Start_DMA+0x16c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d002      	beq.n	80020d0 <HAL_ADC_Start_DMA+0x98>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Start_DMA+0x9a>
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_ADC_Start_DMA+0x168>)
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d002      	beq.n	80020e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f023 0206 	bic.w	r2, r3, #6
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58
 8002104:	e002      	b.n	800210c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_ADC_Start_DMA+0x17c>)
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <HAL_ADC_Start_DMA+0x180>)
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_ADC_Start_DMA+0x184>)
 8002122:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	221c      	movs	r2, #28
 800212a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0210 	orr.w	r2, r2, #16
 8002142:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fcaf 	bl	8001ab2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3340      	adds	r3, #64	; 0x40
 800215e:	4619      	mov	r1, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f001 fd58 	bl	8003c18 <HAL_DMA_Start_IT>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fd85 	bl	8001c80 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002176:	e00d      	b.n	8002194 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002180:	e008      	b.n	8002194 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800218e:	e001      	b.n	8002194 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002194:	7dfb      	ldrb	r3, [r7, #23]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40022100 	.word	0x40022100
 80021a8:	40022300 	.word	0x40022300
 80021ac:	58026300 	.word	0x58026300
 80021b0:	fffff0fe 	.word	0xfffff0fe
 80021b4:	08002989 	.word	0x08002989
 80021b8:	08002a61 	.word	0x08002a61
 80021bc:	08002a7d 	.word	0x08002a7d

080021c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b0a1      	sub	sp, #132	; 0x84
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a9d      	ldr	r2, [pc, #628]	; (8002464 <HAL_ADC_ConfigChannel+0x290>)
 80021ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x2a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e321      	b.n	8002842 <HAL_ADC_ConfigChannel+0x66e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fd4c 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 8306 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d108      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x62>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2201      	movs	r2, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	e016      	b.n	8002264 <HAL_ADC_ConfigChannel+0x90>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800224e:	2320      	movs	r3, #32
 8002250:	e003      	b.n	800225a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2201      	movs	r2, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	69d1      	ldr	r1, [r2, #28]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	430b      	orrs	r3, r1
 8002270:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f7ff fbeb 	bl	8001a5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fd0d 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 800228e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fd1a 	bl	8001cce <LL_ADC_INJ_IsConversionOngoing>
 800229a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 80b3 	bne.w	800240a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 80af 	bne.w	800240a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f7ff fc0d 	bl	8001ad8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022be:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_ADC_ConfigChannel+0x294>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80022c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x110>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	e01d      	b.n	8002320 <HAL_ADC_ConfigChannel+0x14c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_ConfigChannel+0x136>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	e00a      	b.n	8002320 <HAL_ADC_ConfigChannel+0x14c>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b04      	cmp	r3, #4
 8002328:	d027      	beq.n	800237a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002338:	f7ff fb28 	bl	800198c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7e5b      	ldrb	r3, [r3, #25]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d102      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x17e>
 800234c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002350:	e000      	b.n	8002354 <HAL_ADC_ConfigChannel+0x180>
 8002352:	2300      	movs	r3, #0
 8002354:	461a      	mov	r2, r3
 8002356:	f7ff fb52 	bl	80019fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7e1b      	ldrb	r3, [r3, #24]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x19c>
 800236a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800236e:	e000      	b.n	8002372 <HAL_ADC_ConfigChannel+0x19e>
 8002370:	2300      	movs	r3, #0
 8002372:	461a      	mov	r2, r3
 8002374:	f7ff fb2a 	bl	80019cc <LL_ADC_SetDataRightShift>
 8002378:	e047      	b.n	800240a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	069b      	lsls	r3, r3, #26
 800238a:	429a      	cmp	r2, r3
 800238c:	d107      	bne.n	800239e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800239c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	069b      	lsls	r3, r3, #26
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d107      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023c0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d107      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	069b      	lsls	r3, r3, #26
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d107      	bne.n	800240a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002408:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fc22 	bl	8001c58 <LL_ADC_IsEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 820d 	bne.w	8002836 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f7ff fb81 	bl	8001b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_ADC_ConfigChannel+0x290>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f040 8133 	bne.w	80026a0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002446:	2b00      	cmp	r3, #0
 8002448:	d110      	bne.n	800246c <HAL_ADC_ConfigChannel+0x298>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b09      	cmp	r3, #9
 8002458:	bf94      	ite	ls
 800245a:	2301      	movls	r3, #1
 800245c:	2300      	movhi	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e01e      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x2cc>
 8002462:	bf00      	nop
 8002464:	47ff0000 	.word	0x47ff0000
 8002468:	5c001000 	.word	0x5c001000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800247a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2b09      	cmp	r3, #9
 8002498:	bf94      	ite	ls
 800249a:	2301      	movls	r3, #1
 800249c:	2300      	movhi	r3, #0
 800249e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d079      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x2ec>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	069b      	lsls	r3, r3, #26
 80024ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024be:	e015      	b.n	80024ec <HAL_ADC_ConfigChannel+0x318>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_ConfigChannel+0x338>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	e017      	b.n	800253c <HAL_ADC_ConfigChannel+0x368>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	ea42 0103 	orr.w	r1, r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x38e>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	051b      	lsls	r3, r3, #20
 8002560:	e018      	b.n	8002594 <HAL_ADC_ConfigChannel+0x3c0>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e003      	b.n	8002586 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
 8002596:	e07e      	b.n	8002696 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x3e0>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b2:	e015      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x40c>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	069b      	lsls	r3, r3, #26
 80025dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x42c>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	e017      	b.n	8002630 <HAL_ADC_ConfigChannel+0x45c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	61bb      	str	r3, [r7, #24]
  return result;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e003      	b.n	8002624 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	ea42 0103 	orr.w	r1, r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10d      	bne.n	800265c <HAL_ADC_ConfigChannel+0x488>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	3b1e      	subs	r3, #30
 8002654:	051b      	lsls	r3, r3, #20
 8002656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800265a:	e01b      	b.n	8002694 <HAL_ADC_ConfigChannel+0x4c0>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	60fb      	str	r3, [r7, #12]
  return result;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	f003 021f 	and.w	r2, r3, #31
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	3b1e      	subs	r3, #30
 800268e:	051b      	lsls	r3, r3, #20
 8002690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002694:	430b      	orrs	r3, r1
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6892      	ldr	r2, [r2, #8]
 800269a:	4619      	mov	r1, r3
 800269c:	f7ff fa1c 	bl	8001ad8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f280 80c6 	bge.w	8002836 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_ADC_ConfigChannel+0x4ea>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x4ee>
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_ADC_ConfigChannel+0x680>)
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x4f0>
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_ADC_ConfigChannel+0x684>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f953 	bl	8001970 <LL_ADC_GetCommonPathInternalCh>
 80026ca:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x50c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10e      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x52a>
 80026e0:	485a      	ldr	r0, [pc, #360]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 80026e2:	f7ff fab9 	bl	8001c58 <LL_ADC_IsEnabled>
 80026e6:	4604      	mov	r4, r0
 80026e8:	4859      	ldr	r0, [pc, #356]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 80026ea:	f7ff fab5 	bl	8001c58 <LL_ADC_IsEnabled>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4323      	orrs	r3, r4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e008      	b.n	8002710 <HAL_ADC_ConfigChannel+0x53c>
 80026fe:	4857      	ldr	r0, [pc, #348]	; (800285c <HAL_ADC_ConfigChannel+0x688>)
 8002700:	f7ff faaa 	bl	8001c58 <LL_ADC_IsEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d07d      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_ADC_ConfigChannel+0x68c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d130      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x5ac>
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12b      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_ADC_ConfigChannel+0x688>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 8081 	bne.w	8002836 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_ADC_ConfigChannel+0x574>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a43      	ldr	r2, [pc, #268]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x578>
 8002748:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_ADC_ConfigChannel+0x680>)
 800274a:	e000      	b.n	800274e <HAL_ADC_ConfigChannel+0x57a>
 800274c:	4a42      	ldr	r2, [pc, #264]	; (8002858 <HAL_ADC_ConfigChannel+0x684>)
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7ff f8f7 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_ADC_ConfigChannel+0x690>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a41      	ldr	r2, [pc, #260]	; (8002868 <HAL_ADC_ConfigChannel+0x694>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800277e:	e05a      	b.n	8002836 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a39      	ldr	r2, [pc, #228]	; (800286c <HAL_ADC_ConfigChannel+0x698>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d11e      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5f4>
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d119      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_ADC_ConfigChannel+0x688>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d14b      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2a      	ldr	r2, [pc, #168]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x5de>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a28      	ldr	r2, [pc, #160]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x5e2>
 80027b2:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_ADC_ConfigChannel+0x680>)
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x5e4>
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_ADC_ConfigChannel+0x684>)
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7ff f8c2 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	e036      	b.n	8002836 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_ADC_ConfigChannel+0x69c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d131      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x662>
 80027d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d12c      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_ADC_ConfigChannel+0x688>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d127      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_ADC_ConfigChannel+0x678>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x626>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_ADC_ConfigChannel+0x67c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x62a>
 80027fa:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_ADC_ConfigChannel+0x680>)
 80027fc:	e000      	b.n	8002800 <HAL_ADC_ConfigChannel+0x62c>
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_ADC_ConfigChannel+0x684>)
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f7ff f89e 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 800280e:	e012      	b.n	8002836 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002822:	e008      	b.n	8002836 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800283e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002842:	4618      	mov	r0, r3
 8002844:	3784      	adds	r7, #132	; 0x84
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	40022000 	.word	0x40022000
 8002850:	40022100 	.word	0x40022100
 8002854:	40022300 	.word	0x40022300
 8002858:	58026300 	.word	0x58026300
 800285c:	58026000 	.word	0x58026000
 8002860:	cb840000 	.word	0xcb840000
 8002864:	24000000 	.word	0x24000000
 8002868:	053e2d63 	.word	0x053e2d63
 800286c:	c7520000 	.word	0xc7520000
 8002870:	cfb80000 	.word	0xcfb80000

08002874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f9e9 	bl	8001c58 <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d16e      	bne.n	800296a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b38      	ldr	r3, [pc, #224]	; (8002974 <ADC_Enable+0x100>)
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e05a      	b.n	800296c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f9b8 	bl	8001c30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fff4 	bl	80018ac <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <ADC_Enable+0x104>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <ADC_Enable+0x66>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <ADC_Enable+0x108>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <ADC_Enable+0x6a>
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <ADC_Enable+0x10c>)
 80028dc:	e000      	b.n	80028e0 <ADC_Enable+0x6c>
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <ADC_Enable+0x110>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f949 	bl	8001b78 <LL_ADC_GetMultimode>
 80028e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <ADC_Enable+0x108>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d002      	beq.n	80028f8 <ADC_Enable+0x84>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e000      	b.n	80028fa <ADC_Enable+0x86>
 80028f8:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <ADC_Enable+0x104>)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d130      	bne.n	800296a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002908:	e028      	b.n	800295c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f9a2 	bl	8001c58 <LL_ADC_IsEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f986 	bl	8001c30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002924:	f7fe ffc2 	bl	80018ac <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d914      	bls.n	800295c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d00d      	beq.n	800295c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e007      	b.n	800296c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d1cf      	bne.n	800290a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	8000003f 	.word	0x8000003f
 8002978:	40022000 	.word	0x40022000
 800297c:	40022100 	.word	0x40022100
 8002980:	40022300 	.word	0x40022300
 8002984:	58026300 	.word	0x58026300

08002988 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14b      	bne.n	8002a3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f837 	bl	8001a34 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d032      	beq.n	8002a32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d12b      	bne.n	8002a32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
 80029fe:	e018      	b.n	8002a32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d111      	bne.n	8002a32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7fd fcf6 	bl	8000424 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a38:	e00e      	b.n	8002a58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff fbba 	bl	80021c0 <HAL_ADC_ErrorCallback>
}
 8002a4c:	e004      	b.n	8002a58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fd fcc8 	bl	8000404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff fb8c 	bl	80021c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <ADC_ConfigureBoostMode+0x1f8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <ADC_ConfigureBoostMode+0x1c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a79      	ldr	r2, [pc, #484]	; (8002cac <ADC_ConfigureBoostMode+0x1fc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d109      	bne.n	8002ae0 <ADC_ConfigureBoostMode+0x30>
 8002acc:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <ADC_ConfigureBoostMode+0x200>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e008      	b.n	8002af2 <ADC_ConfigureBoostMode+0x42>
 8002ae0:	4b74      	ldr	r3, [pc, #464]	; (8002cb4 <ADC_ConfigureBoostMode+0x204>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01c      	beq.n	8002b30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002af6:	f004 f8e1 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8002afa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b04:	d010      	beq.n	8002b28 <ADC_ConfigureBoostMode+0x78>
 8002b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b0a:	d873      	bhi.n	8002bf4 <ADC_ConfigureBoostMode+0x144>
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d002      	beq.n	8002b18 <ADC_ConfigureBoostMode+0x68>
 8002b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b16:	d16d      	bne.n	8002bf4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60fb      	str	r3, [r7, #12]
        break;
 8002b26:	e068      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	60fb      	str	r3, [r7, #12]
        break;
 8002b2e:	e064      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	f005 fb10 	bl	800815c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b3c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b46:	d051      	beq.n	8002bec <ADC_ConfigureBoostMode+0x13c>
 8002b48:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b4c:	d854      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b4e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b52:	d047      	beq.n	8002be4 <ADC_ConfigureBoostMode+0x134>
 8002b54:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b58:	d84e      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b5a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b5e:	d03d      	beq.n	8002bdc <ADC_ConfigureBoostMode+0x12c>
 8002b60:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b64:	d848      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6a:	d033      	beq.n	8002bd4 <ADC_ConfigureBoostMode+0x124>
 8002b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b70:	d842      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b72:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b76:	d029      	beq.n	8002bcc <ADC_ConfigureBoostMode+0x11c>
 8002b78:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b7c:	d83c      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b7e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b82:	d01a      	beq.n	8002bba <ADC_ConfigureBoostMode+0x10a>
 8002b84:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b88:	d836      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b8a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b8e:	d014      	beq.n	8002bba <ADC_ConfigureBoostMode+0x10a>
 8002b90:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b94:	d830      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9a:	d00e      	beq.n	8002bba <ADC_ConfigureBoostMode+0x10a>
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d82a      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba6:	d008      	beq.n	8002bba <ADC_ConfigureBoostMode+0x10a>
 8002ba8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bac:	d824      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
 8002bae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb2:	d002      	beq.n	8002bba <ADC_ConfigureBoostMode+0x10a>
 8002bb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bb8:	d11e      	bne.n	8002bf8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0c9b      	lsrs	r3, r3, #18
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
        break;
 8002bca:	e016      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
        break;
 8002bd2:	e012      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	60fb      	str	r3, [r7, #12]
        break;
 8002bda:	e00e      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	60fb      	str	r3, [r7, #12]
        break;
 8002be2:	e00a      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	09db      	lsrs	r3, r3, #7
 8002be8:	60fb      	str	r3, [r7, #12]
        break;
 8002bea:	e006      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	60fb      	str	r3, [r7, #12]
        break;
 8002bf2:	e002      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
        break;
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bf8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bfa:	f7fe fe87 	bl	800190c <HAL_GetREVID>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d815      	bhi.n	8002c34 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <ADC_ConfigureBoostMode+0x208>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d908      	bls.n	8002c22 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c20:	e03e      	b.n	8002ca0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	e035      	b.n	8002ca0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <ADC_ConfigureBoostMode+0x20c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d808      	bhi.n	8002c54 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c50:	609a      	str	r2, [r3, #8]
}
 8002c52:	e025      	b.n	8002ca0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <ADC_ConfigureBoostMode+0x210>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d80a      	bhi.n	8002c72 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	e016      	b.n	8002ca0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <ADC_ConfigureBoostMode+0x214>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d80a      	bhi.n	8002c90 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	e007      	b.n	8002ca0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022100 	.word	0x40022100
 8002cb0:	40022300 	.word	0x40022300
 8002cb4:	58026300 	.word	0x58026300
 8002cb8:	01312d00 	.word	0x01312d00
 8002cbc:	005f5e10 	.word	0x005f5e10
 8002cc0:	00bebc20 	.word	0x00bebc20
 8002cc4:	017d7840 	.word	0x017d7840

08002cc8 <__NVIC_SetPriorityGrouping>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <__NVIC_SetPriorityGrouping+0x40>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	05fa0000 	.word	0x05fa0000

08002d10 <__NVIC_GetPriorityGrouping>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff29 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff40 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff90 	bl	8002dbc <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5f 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff33 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa4 	bl	8002e24 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002eec:	f3bf 8f5f 	dmb	sy
}
 8002ef0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_MPU_Disable+0x28>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_MPU_Disable+0x28>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_MPU_Disable+0x2c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00
 8002f14:	e000ed90 	.word	0xe000ed90

08002f18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f20:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_MPU_Enable+0x38>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_MPU_Enable+0x3c>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_MPU_Enable+0x3c>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f36:	f3bf 8f4f 	dsb	sy
}
 8002f3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f3c:	f3bf 8f6f 	isb	sy
}
 8002f40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed90 	.word	0xe000ed90
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	785a      	ldrb	r2, [r3, #1]
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_MPU_ConfigRegion+0x84>)
 8002f66:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d029      	beq.n	8002fc4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_MPU_ConfigRegion+0x84>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7b1b      	ldrb	r3, [r3, #12]
 8002f7c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7adb      	ldrb	r3, [r3, #11]
 8002f82:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a9b      	ldrb	r3, [r3, #10]
 8002f8a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7b5b      	ldrb	r3, [r3, #13]
 8002f92:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7b9b      	ldrb	r3, [r3, #14]
 8002f9a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7bdb      	ldrb	r3, [r3, #15]
 8002fa2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7a5b      	ldrb	r3, [r3, #9]
 8002faa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7a1b      	ldrb	r3, [r3, #8]
 8002fb2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002fb4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fbc:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fbe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fc0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002fc2:	e005      	b.n	8002fd0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_MPU_ConfigRegion+0x84>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_MPU_ConfigRegion+0x84>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed90 	.word	0xe000ed90

08002fe0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e014      	b.n	800301c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fa4e 	bl	80014a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	795b      	ldrb	r3, [r3, #5]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_DAC_Start_DMA+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ab      	b.n	800319a <HAL_DAC_Start_DMA+0x176>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2202      	movs	r2, #2
 800304c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d12f      	bne.n	80030b4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_DAC_Start_DMA+0x180>)
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_DAC_Start_DMA+0x184>)
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_DAC_Start_DMA+0x188>)
 800306a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800307a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2b08      	cmp	r3, #8
 8003080:	d013      	beq.n	80030aa <HAL_DAC_Start_DMA+0x86>
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d845      	bhi.n	8003114 <HAL_DAC_Start_DMA+0xf0>
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_DAC_Start_DMA+0x72>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003094:	e03e      	b.n	8003114 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	613b      	str	r3, [r7, #16]
        break;
 800309e:	e03c      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
        break;
 80030a8:	e037      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3310      	adds	r3, #16
 80030b0:	613b      	str	r3, [r7, #16]
        break;
 80030b2:	e032      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <HAL_DAC_Start_DMA+0x18c>)
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_DAC_Start_DMA+0x190>)
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a3b      	ldr	r2, [pc, #236]	; (80031b8 <HAL_DAC_Start_DMA+0x194>)
 80030ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d013      	beq.n	800310a <HAL_DAC_Start_DMA+0xe6>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d817      	bhi.n	8003118 <HAL_DAC_Start_DMA+0xf4>
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_DAC_Start_DMA+0xd2>
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d005      	beq.n	8003100 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80030f4:	e010      	b.n	8003118 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	613b      	str	r3, [r7, #16]
        break;
 80030fe:	e00c      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3318      	adds	r3, #24
 8003106:	613b      	str	r3, [r7, #16]
        break;
 8003108:	e007      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	331c      	adds	r3, #28
 8003110:	613b      	str	r3, [r7, #16]
        break;
 8003112:	e002      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003118:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6898      	ldr	r0, [r3, #8]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	f000 fd6d 	bl	8003c18 <HAL_DMA_Start_IT>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]
 8003142:	e010      	b.n	8003166 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003152:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68d8      	ldr	r0, [r3, #12]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	f000 fd5b 	bl	8003c18 <HAL_DMA_Start_IT>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2201      	movs	r2, #1
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e005      	b.n	8003198 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	08003475 	.word	0x08003475
 80031a8:	08003497 	.word	0x08003497
 80031ac:	080034b3 	.word	0x080034b3
 80031b0:	080034f5 	.word	0x080034f5
 80031b4:	08003517 	.word	0x08003517
 80031b8:	08003533 	.word	0x08003533

080031bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	795b      	ldrb	r3, [r3, #5]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_DAC_ConfigChannel+0x18>
 800320c:	2302      	movs	r3, #2
 800320e:	e12a      	b.n	8003466 <HAL_DAC_ConfigChannel+0x26e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	f040 8081 	bne.w	8003328 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003226:	f7fe fb41 	bl	80018ac <HAL_GetTick>
 800322a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d140      	bne.n	80032b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003232:	e018      	b.n	8003266 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003234:	f7fe fb3a 	bl	80018ac <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d911      	bls.n	8003266 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_DAC_ConfigChannel+0x278>)
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f043 0208 	orr.w	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2203      	movs	r2, #3
 8003260:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0ff      	b.n	8003466 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326c:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_DAC_ConfigChannel+0x278>)
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1df      	bne.n	8003234 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f7fe fb25 	bl	80018c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	6992      	ldr	r2, [r2, #24]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
 8003284:	e023      	b.n	80032ce <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003286:	f7fe fb11 	bl	80018ac <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d90f      	bls.n	80032b4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2b00      	cmp	r3, #0
 800329c:	da0a      	bge.n	80032b4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0d8      	b.n	8003466 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	dbe3      	blt.n	8003286 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80032be:	2001      	movs	r0, #1
 80032c0:	f7fe fb00 	bl	80018c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	6992      	ldr	r2, [r2, #24]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	ea02 0103 	and.w	r1, r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	21ff      	movs	r1, #255	; 0xff
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	ea02 0103 	and.w	r1, r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d11d      	bne.n	800336c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	221f      	movs	r2, #31
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2207      	movs	r2, #7
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e00f      	b.n	80033b6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d102      	bne.n	80033a4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e008      	b.n	80033b6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80033ac:	2301      	movs	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e001      	b.n	80033b6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	22c0      	movs	r2, #192	; 0xc0
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	400a      	ands	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20008000 	.word	0x20008000

08003474 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fe9a 	bl	80031bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	711a      	strb	r2, [r3, #4]
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fe93 	bl	80031d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff fe89 	bl	80031e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	711a      	strb	r2, [r3, #4]
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7fc ff9e 	bl	8000444 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	711a      	strb	r2, [r3, #4]
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7fc ff9d 	bl	8000464 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff ffc7 	bl	80034e0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	711a      	strb	r2, [r3, #4]
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7fe f9a0 	bl	80018ac <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e316      	b.n	8003ba6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a66      	ldr	r2, [pc, #408]	; (8003718 <HAL_DMA_Init+0x1b8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04a      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_DMA_Init+0x1bc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d045      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a63      	ldr	r2, [pc, #396]	; (8003720 <HAL_DMA_Init+0x1c0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d040      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a62      	ldr	r2, [pc, #392]	; (8003724 <HAL_DMA_Init+0x1c4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03b      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a60      	ldr	r2, [pc, #384]	; (8003728 <HAL_DMA_Init+0x1c8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d036      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5f      	ldr	r2, [pc, #380]	; (800372c <HAL_DMA_Init+0x1cc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_DMA_Init+0x1d0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02c      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5c      	ldr	r2, [pc, #368]	; (8003734 <HAL_DMA_Init+0x1d4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d027      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5a      	ldr	r2, [pc, #360]	; (8003738 <HAL_DMA_Init+0x1d8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a59      	ldr	r2, [pc, #356]	; (800373c <HAL_DMA_Init+0x1dc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01d      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_DMA_Init+0x1e0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_DMA_Init+0x1e4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a54      	ldr	r2, [pc, #336]	; (8003748 <HAL_DMA_Init+0x1e8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a53      	ldr	r2, [pc, #332]	; (800374c <HAL_DMA_Init+0x1ec>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a51      	ldr	r2, [pc, #324]	; (8003750 <HAL_DMA_Init+0x1f0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_DMA_Init+0xb8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a50      	ldr	r2, [pc, #320]	; (8003754 <HAL_DMA_Init+0x1f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_DMA_Init+0xbc>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_DMA_Init+0xbe>
 800361c:	2300      	movs	r3, #0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 813b 	beq.w	800389a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a37      	ldr	r2, [pc, #220]	; (8003718 <HAL_DMA_Init+0x1b8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d04a      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_DMA_Init+0x1bc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d045      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_DMA_Init+0x1c0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d040      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a33      	ldr	r2, [pc, #204]	; (8003724 <HAL_DMA_Init+0x1c4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d03b      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_DMA_Init+0x1c8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d036      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a30      	ldr	r2, [pc, #192]	; (800372c <HAL_DMA_Init+0x1cc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_DMA_Init+0x1d0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02c      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_DMA_Init+0x1d4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d027      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_DMA_Init+0x1d8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_DMA_Init+0x1dc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01d      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_DMA_Init+0x1e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_DMA_Init+0x1e4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_DMA_Init+0x1e8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_DMA_Init+0x1ec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_DMA_Init+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_Init+0x174>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_DMA_Init+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <HAL_DMA_Init+0x186>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e007      	b.n	80036f6 <HAL_DMA_Init+0x196>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036f6:	e02f      	b.n	8003758 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f8:	f7fe f8d8 	bl	80018ac <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b05      	cmp	r3, #5
 8003704:	d928      	bls.n	8003758 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e246      	b.n	8003ba6 <HAL_DMA_Init+0x646>
 8003718:	40020010 	.word	0x40020010
 800371c:	40020028 	.word	0x40020028
 8003720:	40020040 	.word	0x40020040
 8003724:	40020058 	.word	0x40020058
 8003728:	40020070 	.word	0x40020070
 800372c:	40020088 	.word	0x40020088
 8003730:	400200a0 	.word	0x400200a0
 8003734:	400200b8 	.word	0x400200b8
 8003738:	40020410 	.word	0x40020410
 800373c:	40020428 	.word	0x40020428
 8003740:	40020440 	.word	0x40020440
 8003744:	40020458 	.word	0x40020458
 8003748:	40020470 	.word	0x40020470
 800374c:	40020488 	.word	0x40020488
 8003750:	400204a0 	.word	0x400204a0
 8003754:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1c8      	bne.n	80036f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4b83      	ldr	r3, [pc, #524]	; (8003980 <HAL_DMA_Init+0x420>)
 8003772:	4013      	ands	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800377e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003796:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80037bc:	4b71      	ldr	r3, [pc, #452]	; (8003984 <HAL_DMA_Init+0x424>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b71      	ldr	r3, [pc, #452]	; (8003988 <HAL_DMA_Init+0x428>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c8:	d328      	bcc.n	800381c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b28      	cmp	r3, #40	; 0x28
 80037d0:	d903      	bls.n	80037da <HAL_DMA_Init+0x27a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b2e      	cmp	r3, #46	; 0x2e
 80037d8:	d917      	bls.n	800380a <HAL_DMA_Init+0x2aa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b3e      	cmp	r3, #62	; 0x3e
 80037e0:	d903      	bls.n	80037ea <HAL_DMA_Init+0x28a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b42      	cmp	r3, #66	; 0x42
 80037e8:	d90f      	bls.n	800380a <HAL_DMA_Init+0x2aa>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b46      	cmp	r3, #70	; 0x46
 80037f0:	d903      	bls.n	80037fa <HAL_DMA_Init+0x29a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b48      	cmp	r3, #72	; 0x48
 80037f8:	d907      	bls.n	800380a <HAL_DMA_Init+0x2aa>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b4e      	cmp	r3, #78	; 0x4e
 8003800:	d905      	bls.n	800380e <HAL_DMA_Init+0x2ae>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b52      	cmp	r3, #82	; 0x52
 8003808:	d801      	bhi.n	800380e <HAL_DMA_Init+0x2ae>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_DMA_Init+0x2b0>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0307 	bic.w	r3, r3, #7
 8003832:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b04      	cmp	r3, #4
 8003844:	d117      	bne.n	8003876 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 fdcf 	bl	80053fc <DMA_CheckFifoParam>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e197      	b.n	8003ba6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f001 fd0a 	bl	8005298 <DMA_CalcBaseAndBitshift>
 8003884:	4603      	mov	r3, r0
 8003886:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	223f      	movs	r2, #63	; 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e0cd      	b.n	8003a36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3b      	ldr	r2, [pc, #236]	; (800398c <HAL_DMA_Init+0x42c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a39      	ldr	r2, [pc, #228]	; (8003990 <HAL_DMA_Init+0x430>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01d      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a38      	ldr	r2, [pc, #224]	; (8003994 <HAL_DMA_Init+0x434>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a36      	ldr	r2, [pc, #216]	; (8003998 <HAL_DMA_Init+0x438>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a35      	ldr	r2, [pc, #212]	; (800399c <HAL_DMA_Init+0x43c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <HAL_DMA_Init+0x440>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a32      	ldr	r2, [pc, #200]	; (80039a4 <HAL_DMA_Init+0x444>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_DMA_Init+0x38a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <HAL_DMA_Init+0x448>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_Init+0x38e>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_DMA_Init+0x390>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8097 	beq.w	8003a24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a24      	ldr	r2, [pc, #144]	; (800398c <HAL_DMA_Init+0x42c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d021      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_DMA_Init+0x430>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01c      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_DMA_Init+0x434>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d017      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_DMA_Init+0x438>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d012      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_DMA_Init+0x43c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00d      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_DMA_Init+0x440>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_DMA_Init+0x444>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <HAL_DMA_Init+0x3e4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_DMA_Init+0x448>)
 8003942:	4293      	cmp	r3, r2
 8003944:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_DMA_Init+0x44c>)
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d020      	beq.n	80039b0 <HAL_DMA_Init+0x450>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d102      	bne.n	800397c <HAL_DMA_Init+0x41c>
 8003976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800397a:	e01a      	b.n	80039b2 <HAL_DMA_Init+0x452>
 800397c:	2300      	movs	r3, #0
 800397e:	e018      	b.n	80039b2 <HAL_DMA_Init+0x452>
 8003980:	fe10803f 	.word	0xfe10803f
 8003984:	5c001000 	.word	0x5c001000
 8003988:	ffff0000 	.word	0xffff0000
 800398c:	58025408 	.word	0x58025408
 8003990:	5802541c 	.word	0x5802541c
 8003994:	58025430 	.word	0x58025430
 8003998:	58025444 	.word	0x58025444
 800399c:	58025458 	.word	0x58025458
 80039a0:	5802546c 	.word	0x5802546c
 80039a4:	58025480 	.word	0x58025480
 80039a8:	58025494 	.word	0x58025494
 80039ac:	fffe000f 	.word	0xfffe000f
 80039b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b6e      	ldr	r3, [pc, #440]	; (8003bb0 <HAL_DMA_Init+0x650>)
 80039f8:	4413      	add	r3, r2
 80039fa:	4a6e      	ldr	r2, [pc, #440]	; (8003bb4 <HAL_DMA_Init+0x654>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f001 fc45 	bl	8005298 <DMA_CalcBaseAndBitshift>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	e008      	b.n	8003a36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0b7      	b.n	8003ba6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5f      	ldr	r2, [pc, #380]	; (8003bb8 <HAL_DMA_Init+0x658>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d072      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5d      	ldr	r2, [pc, #372]	; (8003bbc <HAL_DMA_Init+0x65c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d06d      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5c      	ldr	r2, [pc, #368]	; (8003bc0 <HAL_DMA_Init+0x660>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d068      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5a      	ldr	r2, [pc, #360]	; (8003bc4 <HAL_DMA_Init+0x664>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d063      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a59      	ldr	r2, [pc, #356]	; (8003bc8 <HAL_DMA_Init+0x668>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d05e      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a57      	ldr	r2, [pc, #348]	; (8003bcc <HAL_DMA_Init+0x66c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d059      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a56      	ldr	r2, [pc, #344]	; (8003bd0 <HAL_DMA_Init+0x670>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d054      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a54      	ldr	r2, [pc, #336]	; (8003bd4 <HAL_DMA_Init+0x674>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04f      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a53      	ldr	r2, [pc, #332]	; (8003bd8 <HAL_DMA_Init+0x678>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04a      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a51      	ldr	r2, [pc, #324]	; (8003bdc <HAL_DMA_Init+0x67c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d045      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a50      	ldr	r2, [pc, #320]	; (8003be0 <HAL_DMA_Init+0x680>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d040      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a4e      	ldr	r2, [pc, #312]	; (8003be4 <HAL_DMA_Init+0x684>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d03b      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4d      	ldr	r2, [pc, #308]	; (8003be8 <HAL_DMA_Init+0x688>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d036      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4b      	ldr	r2, [pc, #300]	; (8003bec <HAL_DMA_Init+0x68c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d031      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_DMA_Init+0x690>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d02c      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a48      	ldr	r2, [pc, #288]	; (8003bf4 <HAL_DMA_Init+0x694>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d027      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a47      	ldr	r2, [pc, #284]	; (8003bf8 <HAL_DMA_Init+0x698>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a45      	ldr	r2, [pc, #276]	; (8003bfc <HAL_DMA_Init+0x69c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <HAL_DMA_Init+0x6a0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a42      	ldr	r2, [pc, #264]	; (8003c04 <HAL_DMA_Init+0x6a4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <HAL_DMA_Init+0x6a8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <HAL_DMA_Init+0x6ac>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <HAL_DMA_Init+0x6b0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_Init+0x5c6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <HAL_DMA_Init+0x6b4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Init+0x5ca>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_DMA_Init+0x5cc>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d032      	beq.n	8003b96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 fcdf 	bl	80054f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	d102      	bne.n	8003b44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_DMA_Init+0x624>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d80c      	bhi.n	8003b84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f001 fd5c 	bl	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e008      	b.n	8003b96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	a7fdabf8 	.word	0xa7fdabf8
 8003bb4:	cccccccd 	.word	0xcccccccd
 8003bb8:	40020010 	.word	0x40020010
 8003bbc:	40020028 	.word	0x40020028
 8003bc0:	40020040 	.word	0x40020040
 8003bc4:	40020058 	.word	0x40020058
 8003bc8:	40020070 	.word	0x40020070
 8003bcc:	40020088 	.word	0x40020088
 8003bd0:	400200a0 	.word	0x400200a0
 8003bd4:	400200b8 	.word	0x400200b8
 8003bd8:	40020410 	.word	0x40020410
 8003bdc:	40020428 	.word	0x40020428
 8003be0:	40020440 	.word	0x40020440
 8003be4:	40020458 	.word	0x40020458
 8003be8:	40020470 	.word	0x40020470
 8003bec:	40020488 	.word	0x40020488
 8003bf0:	400204a0 	.word	0x400204a0
 8003bf4:	400204b8 	.word	0x400204b8
 8003bf8:	58025408 	.word	0x58025408
 8003bfc:	5802541c 	.word	0x5802541c
 8003c00:	58025430 	.word	0x58025430
 8003c04:	58025444 	.word	0x58025444
 8003c08:	58025458 	.word	0x58025458
 8003c0c:	5802546c 	.word	0x5802546c
 8003c10:	58025480 	.word	0x58025480
 8003c14:	58025494 	.word	0x58025494

08003c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e226      	b.n	8004082 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_DMA_Start_IT+0x2a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e21f      	b.n	8004082 <HAL_DMA_Start_IT+0x46a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	f040 820a 	bne.w	800406c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a68      	ldr	r2, [pc, #416]	; (8003e0c <HAL_DMA_Start_IT+0x1f4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_DMA_Start_IT+0x1f8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_DMA_Start_IT+0x1fc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <HAL_DMA_Start_IT+0x200>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a62      	ldr	r2, [pc, #392]	; (8003e1c <HAL_DMA_Start_IT+0x204>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a60      	ldr	r2, [pc, #384]	; (8003e20 <HAL_DMA_Start_IT+0x208>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a5f      	ldr	r2, [pc, #380]	; (8003e24 <HAL_DMA_Start_IT+0x20c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_DMA_Start_IT+0x210>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5c      	ldr	r2, [pc, #368]	; (8003e2c <HAL_DMA_Start_IT+0x214>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_DMA_Start_IT+0x218>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a59      	ldr	r2, [pc, #356]	; (8003e34 <HAL_DMA_Start_IT+0x21c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_DMA_Start_IT+0x220>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a56      	ldr	r2, [pc, #344]	; (8003e3c <HAL_DMA_Start_IT+0x224>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a54      	ldr	r2, [pc, #336]	; (8003e40 <HAL_DMA_Start_IT+0x228>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a53      	ldr	r2, [pc, #332]	; (8003e44 <HAL_DMA_Start_IT+0x22c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_Start_IT+0xee>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a51      	ldr	r2, [pc, #324]	; (8003e48 <HAL_DMA_Start_IT+0x230>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_DMA_Start_IT+0x100>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e007      	b.n	8003d28 <HAL_DMA_Start_IT+0x110>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f001 f906 	bl	8004f40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a34      	ldr	r2, [pc, #208]	; (8003e0c <HAL_DMA_Start_IT+0x1f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a33      	ldr	r2, [pc, #204]	; (8003e10 <HAL_DMA_Start_IT+0x1f8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d045      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a31      	ldr	r2, [pc, #196]	; (8003e14 <HAL_DMA_Start_IT+0x1fc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d040      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_DMA_Start_IT+0x200>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03b      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2e      	ldr	r2, [pc, #184]	; (8003e1c <HAL_DMA_Start_IT+0x204>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d036      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <HAL_DMA_Start_IT+0x208>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d031      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <HAL_DMA_Start_IT+0x20c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02c      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <HAL_DMA_Start_IT+0x210>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d027      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <HAL_DMA_Start_IT+0x214>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <HAL_DMA_Start_IT+0x218>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d01d      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <HAL_DMA_Start_IT+0x21c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d018      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <HAL_DMA_Start_IT+0x220>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <HAL_DMA_Start_IT+0x224>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <HAL_DMA_Start_IT+0x228>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_DMA_Start_IT+0x22c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x1bc>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_DMA_Start_IT+0x230>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_DMA_Start_IT+0x1c0>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_DMA_Start_IT+0x1c2>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d036      	beq.n	8003e4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 021e 	bic.w	r2, r3, #30
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0216 	orr.w	r2, r2, #22
 8003df0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03e      	beq.n	8003e78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0208 	orr.w	r2, r2, #8
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e035      	b.n	8003e78 <HAL_DMA_Start_IT+0x260>
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020e 	bic.w	r2, r3, #14
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 020a 	orr.w	r2, r2, #10
 8003e5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0204 	orr.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a83      	ldr	r2, [pc, #524]	; (800408c <HAL_DMA_Start_IT+0x474>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d072      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a82      	ldr	r2, [pc, #520]	; (8004090 <HAL_DMA_Start_IT+0x478>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d06d      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a80      	ldr	r2, [pc, #512]	; (8004094 <HAL_DMA_Start_IT+0x47c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d068      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7f      	ldr	r2, [pc, #508]	; (8004098 <HAL_DMA_Start_IT+0x480>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d063      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7d      	ldr	r2, [pc, #500]	; (800409c <HAL_DMA_Start_IT+0x484>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d05e      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7c      	ldr	r2, [pc, #496]	; (80040a0 <HAL_DMA_Start_IT+0x488>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d059      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7a      	ldr	r2, [pc, #488]	; (80040a4 <HAL_DMA_Start_IT+0x48c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d054      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a79      	ldr	r2, [pc, #484]	; (80040a8 <HAL_DMA_Start_IT+0x490>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04f      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a77      	ldr	r2, [pc, #476]	; (80040ac <HAL_DMA_Start_IT+0x494>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a76      	ldr	r2, [pc, #472]	; (80040b0 <HAL_DMA_Start_IT+0x498>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <HAL_DMA_Start_IT+0x49c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a73      	ldr	r2, [pc, #460]	; (80040b8 <HAL_DMA_Start_IT+0x4a0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a71      	ldr	r2, [pc, #452]	; (80040bc <HAL_DMA_Start_IT+0x4a4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <HAL_DMA_Start_IT+0x4a8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <HAL_DMA_Start_IT+0x4ac>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6d      	ldr	r2, [pc, #436]	; (80040c8 <HAL_DMA_Start_IT+0x4b0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6b      	ldr	r2, [pc, #428]	; (80040cc <HAL_DMA_Start_IT+0x4b4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6a      	ldr	r2, [pc, #424]	; (80040d0 <HAL_DMA_Start_IT+0x4b8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_DMA_Start_IT+0x4bc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_DMA_Start_IT+0x4c0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_DMA_Start_IT+0x4c4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <HAL_DMA_Start_IT+0x4c8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_DMA_Start_IT+0x4cc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_Start_IT+0x350>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a61      	ldr	r2, [pc, #388]	; (80040e8 <HAL_DMA_Start_IT+0x4d0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_DMA_Start_IT+0x354>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_DMA_Start_IT+0x356>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a37      	ldr	r2, [pc, #220]	; (800408c <HAL_DMA_Start_IT+0x474>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d04a      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a36      	ldr	r2, [pc, #216]	; (8004090 <HAL_DMA_Start_IT+0x478>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d045      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a34      	ldr	r2, [pc, #208]	; (8004094 <HAL_DMA_Start_IT+0x47c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d040      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_DMA_Start_IT+0x480>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d03b      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_DMA_Start_IT+0x484>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d036      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a30      	ldr	r2, [pc, #192]	; (80040a0 <HAL_DMA_Start_IT+0x488>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d031      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	; (80040a4 <HAL_DMA_Start_IT+0x48c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02c      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <HAL_DMA_Start_IT+0x490>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d027      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_DMA_Start_IT+0x494>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_DMA_Start_IT+0x498>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d01d      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_DMA_Start_IT+0x49c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_DMA_Start_IT+0x4a0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a25      	ldr	r2, [pc, #148]	; (80040bc <HAL_DMA_Start_IT+0x4a4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <HAL_DMA_Start_IT+0x4a8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_DMA_Start_IT+0x4ac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_Start_IT+0x430>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <HAL_DMA_Start_IT+0x4b0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d108      	bne.n	800405a <HAL_DMA_Start_IT+0x442>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e012      	b.n	8004080 <HAL_DMA_Start_IT+0x468>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e009      	b.n	8004080 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40020010 	.word	0x40020010
 8004090:	40020028 	.word	0x40020028
 8004094:	40020040 	.word	0x40020040
 8004098:	40020058 	.word	0x40020058
 800409c:	40020070 	.word	0x40020070
 80040a0:	40020088 	.word	0x40020088
 80040a4:	400200a0 	.word	0x400200a0
 80040a8:	400200b8 	.word	0x400200b8
 80040ac:	40020410 	.word	0x40020410
 80040b0:	40020428 	.word	0x40020428
 80040b4:	40020440 	.word	0x40020440
 80040b8:	40020458 	.word	0x40020458
 80040bc:	40020470 	.word	0x40020470
 80040c0:	40020488 	.word	0x40020488
 80040c4:	400204a0 	.word	0x400204a0
 80040c8:	400204b8 	.word	0x400204b8
 80040cc:	58025408 	.word	0x58025408
 80040d0:	5802541c 	.word	0x5802541c
 80040d4:	58025430 	.word	0x58025430
 80040d8:	58025444 	.word	0x58025444
 80040dc:	58025458 	.word	0x58025458
 80040e0:	5802546c 	.word	0x5802546c
 80040e4:	58025480 	.word	0x58025480
 80040e8:	58025494 	.word	0x58025494

080040ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040f8:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_DMA_IRQHandler+0x1ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a67      	ldr	r2, [pc, #412]	; (800429c <HAL_DMA_IRQHandler+0x1b0>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0a9b      	lsrs	r3, r3, #10
 8004104:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5f      	ldr	r2, [pc, #380]	; (80042a0 <HAL_DMA_IRQHandler+0x1b4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d04a      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <HAL_DMA_IRQHandler+0x1b8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d045      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5c      	ldr	r2, [pc, #368]	; (80042a8 <HAL_DMA_IRQHandler+0x1bc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d040      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5a      	ldr	r2, [pc, #360]	; (80042ac <HAL_DMA_IRQHandler+0x1c0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03b      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <HAL_DMA_IRQHandler+0x1c4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d036      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a57      	ldr	r2, [pc, #348]	; (80042b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d031      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d02c      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a54      	ldr	r2, [pc, #336]	; (80042bc <HAL_DMA_IRQHandler+0x1d0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d027      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a53      	ldr	r2, [pc, #332]	; (80042c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <HAL_DMA_IRQHandler+0x1d8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a50      	ldr	r2, [pc, #320]	; (80042c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_DMA_IRQHandler+0x1e0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_DMA_IRQHandler+0x1e4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <HAL_DMA_IRQHandler+0x1e8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <HAL_DMA_IRQHandler+0x1ec>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_DMA_IRQHandler+0xd2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a48      	ldr	r2, [pc, #288]	; (80042dc <HAL_DMA_IRQHandler+0x1f0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_DMA_IRQHandler+0xd6>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_DMA_IRQHandler+0xd8>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 842b 	beq.w	8004a20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2208      	movs	r2, #8
 80041d4:	409a      	lsls	r2, r3
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a2 	beq.w	8004324 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2e      	ldr	r2, [pc, #184]	; (80042a0 <HAL_DMA_IRQHandler+0x1b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04a      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <HAL_DMA_IRQHandler+0x1b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d045      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <HAL_DMA_IRQHandler+0x1bc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <HAL_DMA_IRQHandler+0x1c0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d03b      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a28      	ldr	r2, [pc, #160]	; (80042b0 <HAL_DMA_IRQHandler+0x1c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d036      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d031      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02c      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_DMA_IRQHandler+0x1d0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d027      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d022      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d01d      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <HAL_DMA_IRQHandler+0x1dc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d018      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_DMA_IRQHandler+0x1e0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d013      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_DMA_IRQHandler+0x1e4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_DMA_IRQHandler+0x1ec>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_DMA_IRQHandler+0x194>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_DMA_IRQHandler+0x1f0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d12f      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x1f4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e02e      	b.n	80042f4 <HAL_DMA_IRQHandler+0x208>
 8004296:	bf00      	nop
 8004298:	24000000 	.word	0x24000000
 800429c:	1b4e81b5 	.word	0x1b4e81b5
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d015      	beq.n	8004324 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0204 	bic.w	r2, r2, #4
 8004306:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2208      	movs	r2, #8
 8004312:	409a      	lsls	r2, r3
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d06e      	beq.n	8004418 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04a      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a67      	ldr	r2, [pc, #412]	; (80044e8 <HAL_DMA_IRQHandler+0x3fc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d045      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a66      	ldr	r2, [pc, #408]	; (80044ec <HAL_DMA_IRQHandler+0x400>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d040      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a64      	ldr	r2, [pc, #400]	; (80044f0 <HAL_DMA_IRQHandler+0x404>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d03b      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a63      	ldr	r2, [pc, #396]	; (80044f4 <HAL_DMA_IRQHandler+0x408>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d036      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a61      	ldr	r2, [pc, #388]	; (80044f8 <HAL_DMA_IRQHandler+0x40c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a60      	ldr	r2, [pc, #384]	; (80044fc <HAL_DMA_IRQHandler+0x410>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d02c      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5e      	ldr	r2, [pc, #376]	; (8004500 <HAL_DMA_IRQHandler+0x414>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d027      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5d      	ldr	r2, [pc, #372]	; (8004504 <HAL_DMA_IRQHandler+0x418>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5b      	ldr	r2, [pc, #364]	; (8004508 <HAL_DMA_IRQHandler+0x41c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5a      	ldr	r2, [pc, #360]	; (800450c <HAL_DMA_IRQHandler+0x420>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a58      	ldr	r2, [pc, #352]	; (8004510 <HAL_DMA_IRQHandler+0x424>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a57      	ldr	r2, [pc, #348]	; (8004514 <HAL_DMA_IRQHandler+0x428>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a55      	ldr	r2, [pc, #340]	; (8004518 <HAL_DMA_IRQHandler+0x42c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a54      	ldr	r2, [pc, #336]	; (800451c <HAL_DMA_IRQHandler+0x430>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_DMA_IRQHandler+0x2ee>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_DMA_IRQHandler+0x434>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10a      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x304>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e003      	b.n	80043f8 <HAL_DMA_IRQHandler+0x30c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	2201      	movs	r2, #1
 8004406:	409a      	lsls	r2, r3
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f043 0202 	orr.w	r2, r3, #2
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2204      	movs	r2, #4
 8004422:	409a      	lsls	r2, r3
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 808f 	beq.w	800454c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2c      	ldr	r2, [pc, #176]	; (80044e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d04a      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2a      	ldr	r2, [pc, #168]	; (80044e8 <HAL_DMA_IRQHandler+0x3fc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d045      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <HAL_DMA_IRQHandler+0x400>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d040      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <HAL_DMA_IRQHandler+0x404>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d03b      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <HAL_DMA_IRQHandler+0x408>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d036      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <HAL_DMA_IRQHandler+0x40c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d031      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a23      	ldr	r2, [pc, #140]	; (80044fc <HAL_DMA_IRQHandler+0x410>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02c      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <HAL_DMA_IRQHandler+0x414>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d027      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a20      	ldr	r2, [pc, #128]	; (8004504 <HAL_DMA_IRQHandler+0x418>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_DMA_IRQHandler+0x41c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1d      	ldr	r2, [pc, #116]	; (800450c <HAL_DMA_IRQHandler+0x420>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_DMA_IRQHandler+0x424>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <HAL_DMA_IRQHandler+0x428>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_DMA_IRQHandler+0x42c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_DMA_IRQHandler+0x430>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_IRQHandler+0x3e2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <HAL_DMA_IRQHandler+0x434>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d12a      	bne.n	8004524 <HAL_DMA_IRQHandler+0x438>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e023      	b.n	800452c <HAL_DMA_IRQHandler+0x440>
 80044e4:	40020010 	.word	0x40020010
 80044e8:	40020028 	.word	0x40020028
 80044ec:	40020040 	.word	0x40020040
 80044f0:	40020058 	.word	0x40020058
 80044f4:	40020070 	.word	0x40020070
 80044f8:	40020088 	.word	0x40020088
 80044fc:	400200a0 	.word	0x400200a0
 8004500:	400200b8 	.word	0x400200b8
 8004504:	40020410 	.word	0x40020410
 8004508:	40020428 	.word	0x40020428
 800450c:	40020440 	.word	0x40020440
 8004510:	40020458 	.word	0x40020458
 8004514:	40020470 	.word	0x40020470
 8004518:	40020488 	.word	0x40020488
 800451c:	400204a0 	.word	0x400204a0
 8004520:	400204b8 	.word	0x400204b8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2204      	movs	r2, #4
 800453a:	409a      	lsls	r2, r3
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2210      	movs	r2, #16
 8004556:	409a      	lsls	r2, r3
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a6 	beq.w	80046ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a85      	ldr	r2, [pc, #532]	; (800477c <HAL_DMA_IRQHandler+0x690>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a83      	ldr	r2, [pc, #524]	; (8004780 <HAL_DMA_IRQHandler+0x694>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a82      	ldr	r2, [pc, #520]	; (8004784 <HAL_DMA_IRQHandler+0x698>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a80      	ldr	r2, [pc, #512]	; (8004788 <HAL_DMA_IRQHandler+0x69c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7f      	ldr	r2, [pc, #508]	; (800478c <HAL_DMA_IRQHandler+0x6a0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7d      	ldr	r2, [pc, #500]	; (8004790 <HAL_DMA_IRQHandler+0x6a4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7c      	ldr	r2, [pc, #496]	; (8004794 <HAL_DMA_IRQHandler+0x6a8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_DMA_IRQHandler+0x6ac>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a79      	ldr	r2, [pc, #484]	; (800479c <HAL_DMA_IRQHandler+0x6b0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a77      	ldr	r2, [pc, #476]	; (80047a0 <HAL_DMA_IRQHandler+0x6b4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a76      	ldr	r2, [pc, #472]	; (80047a4 <HAL_DMA_IRQHandler+0x6b8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a74      	ldr	r2, [pc, #464]	; (80047a8 <HAL_DMA_IRQHandler+0x6bc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a73      	ldr	r2, [pc, #460]	; (80047ac <HAL_DMA_IRQHandler+0x6c0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a71      	ldr	r2, [pc, #452]	; (80047b0 <HAL_DMA_IRQHandler+0x6c4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a70      	ldr	r2, [pc, #448]	; (80047b4 <HAL_DMA_IRQHandler+0x6c8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_IRQHandler+0x516>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6e      	ldr	r2, [pc, #440]	; (80047b8 <HAL_DMA_IRQHandler+0x6cc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10a      	bne.n	8004618 <HAL_DMA_IRQHandler+0x52c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e009      	b.n	800462c <HAL_DMA_IRQHandler+0x540>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d03e      	beq.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2210      	movs	r2, #16
 800463a:	409a      	lsls	r2, r3
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d024      	beq.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
 800466c:	e01f      	b.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01b      	beq.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
 800467e:	e016      	b.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0208 	bic.w	r2, r2, #8
 800469c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2220      	movs	r2, #32
 80046b8:	409a      	lsls	r2, r3
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8110 	beq.w	80048e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2c      	ldr	r2, [pc, #176]	; (800477c <HAL_DMA_IRQHandler+0x690>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <HAL_DMA_IRQHandler+0x694>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <HAL_DMA_IRQHandler+0x698>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_DMA_IRQHandler+0x69c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a26      	ldr	r2, [pc, #152]	; (800478c <HAL_DMA_IRQHandler+0x6a0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <HAL_DMA_IRQHandler+0x6a4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_DMA_IRQHandler+0x6a8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <HAL_DMA_IRQHandler+0x6ac>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_DMA_IRQHandler+0x6b0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <HAL_DMA_IRQHandler+0x6b4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_DMA_IRQHandler+0x6b8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_DMA_IRQHandler+0x6bc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_DMA_IRQHandler+0x6c0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_DMA_IRQHandler+0x6c4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_DMA_IRQHandler+0x6c8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_IRQHandler+0x678>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_DMA_IRQHandler+0x6cc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d12b      	bne.n	80047bc <HAL_DMA_IRQHandler+0x6d0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e02a      	b.n	80047d0 <HAL_DMA_IRQHandler+0x6e4>
 800477a:	bf00      	nop
 800477c:	40020010 	.word	0x40020010
 8004780:	40020028 	.word	0x40020028
 8004784:	40020040 	.word	0x40020040
 8004788:	40020058 	.word	0x40020058
 800478c:	40020070 	.word	0x40020070
 8004790:	40020088 	.word	0x40020088
 8004794:	400200a0 	.word	0x400200a0
 8004798:	400200b8 	.word	0x400200b8
 800479c:	40020410 	.word	0x40020410
 80047a0:	40020428 	.word	0x40020428
 80047a4:	40020440 	.word	0x40020440
 80047a8:	40020458 	.word	0x40020458
 80047ac:	40020470 	.word	0x40020470
 80047b0:	40020488 	.word	0x40020488
 80047b4:	400204a0 	.word	0x400204a0
 80047b8:	400204b8 	.word	0x400204b8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8087 	beq.w	80048e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2220      	movs	r2, #32
 80047e0:	409a      	lsls	r2, r3
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d139      	bne.n	8004866 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0216 	bic.w	r2, r2, #22
 8004800:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004810:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_DMA_IRQHandler+0x736>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0208 	bic.w	r2, r2, #8
 8004830:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	223f      	movs	r2, #63	; 0x3f
 800483c:	409a      	lsls	r2, r3
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 834a 	beq.w	8004ef0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
          }
          return;
 8004864:	e344      	b.n	8004ef0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d018      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02c      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	e027      	b.n	80048e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d023      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
 80048a4:	e01e      	b.n	80048e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0210 	bic.w	r2, r2, #16
 80048c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8306 	beq.w	8004efa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8088 	beq.w	8004a0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2204      	movs	r2, #4
 8004900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7a      	ldr	r2, [pc, #488]	; (8004af4 <HAL_DMA_IRQHandler+0xa08>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d04a      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a79      	ldr	r2, [pc, #484]	; (8004af8 <HAL_DMA_IRQHandler+0xa0c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d045      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a77      	ldr	r2, [pc, #476]	; (8004afc <HAL_DMA_IRQHandler+0xa10>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d040      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a76      	ldr	r2, [pc, #472]	; (8004b00 <HAL_DMA_IRQHandler+0xa14>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d03b      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a74      	ldr	r2, [pc, #464]	; (8004b04 <HAL_DMA_IRQHandler+0xa18>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d036      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	; (8004b08 <HAL_DMA_IRQHandler+0xa1c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d031      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a71      	ldr	r2, [pc, #452]	; (8004b0c <HAL_DMA_IRQHandler+0xa20>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02c      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a70      	ldr	r2, [pc, #448]	; (8004b10 <HAL_DMA_IRQHandler+0xa24>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d027      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	; (8004b14 <HAL_DMA_IRQHandler+0xa28>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d022      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6d      	ldr	r2, [pc, #436]	; (8004b18 <HAL_DMA_IRQHandler+0xa2c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d01d      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6b      	ldr	r2, [pc, #428]	; (8004b1c <HAL_DMA_IRQHandler+0xa30>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <HAL_DMA_IRQHandler+0xa34>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a68      	ldr	r2, [pc, #416]	; (8004b24 <HAL_DMA_IRQHandler+0xa38>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a67      	ldr	r2, [pc, #412]	; (8004b28 <HAL_DMA_IRQHandler+0xa3c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a65      	ldr	r2, [pc, #404]	; (8004b2c <HAL_DMA_IRQHandler+0xa40>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x8b8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a64      	ldr	r2, [pc, #400]	; (8004b30 <HAL_DMA_IRQHandler+0xa44>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <HAL_DMA_IRQHandler+0x8ca>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e007      	b.n	80049c6 <HAL_DMA_IRQHandler+0x8da>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d307      	bcc.n	80049e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f2      	bne.n	80049c6 <HAL_DMA_IRQHandler+0x8da>
 80049e0:	e000      	b.n	80049e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2203      	movs	r2, #3
 80049f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049fa:	e003      	b.n	8004a04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8272 	beq.w	8004efa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
 8004a1e:	e26c      	b.n	8004efa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <HAL_DMA_IRQHandler+0xa48>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a42      	ldr	r2, [pc, #264]	; (8004b38 <HAL_DMA_IRQHandler+0xa4c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01d      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <HAL_DMA_IRQHandler+0xa50>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3f      	ldr	r2, [pc, #252]	; (8004b40 <HAL_DMA_IRQHandler+0xa54>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <HAL_DMA_IRQHandler+0xa58>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <HAL_DMA_IRQHandler+0xa5c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3a      	ldr	r2, [pc, #232]	; (8004b4c <HAL_DMA_IRQHandler+0xa60>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x984>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <HAL_DMA_IRQHandler+0xa64>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x988>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_DMA_IRQHandler+0x98a>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 823f 	beq.w	8004efa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80cd 	beq.w	8004c34 <HAL_DMA_IRQHandler+0xb48>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80c7 	beq.w	8004c34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2204      	movs	r2, #4
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d049      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8210 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004adc:	e20a      	b.n	8004ef4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8206 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af0:	e200      	b.n	8004ef4 <HAL_DMA_IRQHandler+0xe08>
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d160      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	; (8004d60 <HAL_DMA_IRQHandler+0xc74>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d04a      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	; (8004d64 <HAL_DMA_IRQHandler+0xc78>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d045      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7c      	ldr	r2, [pc, #496]	; (8004d68 <HAL_DMA_IRQHandler+0xc7c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d040      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7a      	ldr	r2, [pc, #488]	; (8004d6c <HAL_DMA_IRQHandler+0xc80>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d03b      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a79      	ldr	r2, [pc, #484]	; (8004d70 <HAL_DMA_IRQHandler+0xc84>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d036      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a77      	ldr	r2, [pc, #476]	; (8004d74 <HAL_DMA_IRQHandler+0xc88>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d031      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a76      	ldr	r2, [pc, #472]	; (8004d78 <HAL_DMA_IRQHandler+0xc8c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d02c      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a74      	ldr	r2, [pc, #464]	; (8004d7c <HAL_DMA_IRQHandler+0xc90>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d027      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	; (8004d80 <HAL_DMA_IRQHandler+0xc94>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a71      	ldr	r2, [pc, #452]	; (8004d84 <HAL_DMA_IRQHandler+0xc98>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01d      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a70      	ldr	r2, [pc, #448]	; (8004d88 <HAL_DMA_IRQHandler+0xc9c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <HAL_DMA_IRQHandler+0xca0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6d      	ldr	r2, [pc, #436]	; (8004d90 <HAL_DMA_IRQHandler+0xca4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6b      	ldr	r2, [pc, #428]	; (8004d94 <HAL_DMA_IRQHandler+0xca8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6a      	ldr	r2, [pc, #424]	; (8004d98 <HAL_DMA_IRQHandler+0xcac>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_DMA_IRQHandler+0xb12>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a68      	ldr	r2, [pc, #416]	; (8004d9c <HAL_DMA_IRQHandler+0xcb0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <HAL_DMA_IRQHandler+0xb24>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0208 	bic.w	r2, r2, #8
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e007      	b.n	8004c20 <HAL_DMA_IRQHandler+0xb34>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8165 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c32:	e15f      	b.n	8004ef4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80c5 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0xce8>
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80bf 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2202      	movs	r2, #2
 8004c60:	409a      	lsls	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 813a 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c8c:	e134      	b.n	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8130 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca0:	e12a      	b.n	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f040 8089 	bne.w	8004dc0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_DMA_IRQHandler+0xc74>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d04a      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <HAL_DMA_IRQHandler+0xc78>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d045      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <HAL_DMA_IRQHandler+0xc7c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d040      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <HAL_DMA_IRQHandler+0xc80>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d03b      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_DMA_IRQHandler+0xc84>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d036      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_DMA_IRQHandler+0xc88>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d031      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_DMA_IRQHandler+0xc8c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d02c      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_DMA_IRQHandler+0xc90>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d027      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_DMA_IRQHandler+0xc94>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_DMA_IRQHandler+0xc98>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01d      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_DMA_IRQHandler+0xc9c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <HAL_DMA_IRQHandler+0xca0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_DMA_IRQHandler+0xca4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_DMA_IRQHandler+0xca8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <HAL_DMA_IRQHandler+0xcac>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xc62>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <HAL_DMA_IRQHandler+0xcb0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d128      	bne.n	8004da0 <HAL_DMA_IRQHandler+0xcb4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0214 	bic.w	r2, r2, #20
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e027      	b.n	8004db0 <HAL_DMA_IRQHandler+0xcc4>
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 020a 	bic.w	r2, r2, #10
 8004dae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8097 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd2:	e091      	b.n	8004ef8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2208      	movs	r2, #8
 8004dde:	409a      	lsls	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8088 	beq.w	8004efa <HAL_DMA_IRQHandler+0xe0e>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8082 	beq.w	8004efa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a41      	ldr	r2, [pc, #260]	; (8004f00 <HAL_DMA_IRQHandler+0xe14>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d04a      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_DMA_IRQHandler+0xe18>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d045      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a3e      	ldr	r2, [pc, #248]	; (8004f08 <HAL_DMA_IRQHandler+0xe1c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d040      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <HAL_DMA_IRQHandler+0xe20>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d03b      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a3b      	ldr	r2, [pc, #236]	; (8004f10 <HAL_DMA_IRQHandler+0xe24>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d036      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <HAL_DMA_IRQHandler+0xe28>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d031      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <HAL_DMA_IRQHandler+0xe2c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d02c      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <HAL_DMA_IRQHandler+0xe30>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d027      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <HAL_DMA_IRQHandler+0xe34>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <HAL_DMA_IRQHandler+0xe38>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <HAL_DMA_IRQHandler+0xe3c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <HAL_DMA_IRQHandler+0xe40>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <HAL_DMA_IRQHandler+0xe44>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <HAL_DMA_IRQHandler+0xe48>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <HAL_DMA_IRQHandler+0xe4c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xdaa>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_DMA_IRQHandler+0xe50>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0xdbc>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 021c 	bic.w	r2, r2, #28
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e007      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xdcc>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 020e 	bic.w	r2, r2, #14
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
 8004eee:	e004      	b.n	8004efa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ef0:	bf00      	nop
 8004ef2:	e002      	b.n	8004efa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40020010 	.word	0x40020010
 8004f04:	40020028 	.word	0x40020028
 8004f08:	40020040 	.word	0x40020040
 8004f0c:	40020058 	.word	0x40020058
 8004f10:	40020070 	.word	0x40020070
 8004f14:	40020088 	.word	0x40020088
 8004f18:	400200a0 	.word	0x400200a0
 8004f1c:	400200b8 	.word	0x400200b8
 8004f20:	40020410 	.word	0x40020410
 8004f24:	40020428 	.word	0x40020428
 8004f28:	40020440 	.word	0x40020440
 8004f2c:	40020458 	.word	0x40020458
 8004f30:	40020470 	.word	0x40020470
 8004f34:	40020488 	.word	0x40020488
 8004f38:	400204a0 	.word	0x400204a0
 8004f3c:	400204b8 	.word	0x400204b8

08004f40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7f      	ldr	r2, [pc, #508]	; (800515c <DMA_SetConfig+0x21c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d072      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a7d      	ldr	r2, [pc, #500]	; (8005160 <DMA_SetConfig+0x220>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d06d      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7c      	ldr	r2, [pc, #496]	; (8005164 <DMA_SetConfig+0x224>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d068      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a7a      	ldr	r2, [pc, #488]	; (8005168 <DMA_SetConfig+0x228>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d063      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a79      	ldr	r2, [pc, #484]	; (800516c <DMA_SetConfig+0x22c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d05e      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a77      	ldr	r2, [pc, #476]	; (8005170 <DMA_SetConfig+0x230>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d059      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a76      	ldr	r2, [pc, #472]	; (8005174 <DMA_SetConfig+0x234>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d054      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a74      	ldr	r2, [pc, #464]	; (8005178 <DMA_SetConfig+0x238>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d04f      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a73      	ldr	r2, [pc, #460]	; (800517c <DMA_SetConfig+0x23c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d04a      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a71      	ldr	r2, [pc, #452]	; (8005180 <DMA_SetConfig+0x240>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d045      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a70      	ldr	r2, [pc, #448]	; (8005184 <DMA_SetConfig+0x244>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d040      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a6e      	ldr	r2, [pc, #440]	; (8005188 <DMA_SetConfig+0x248>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d03b      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6d      	ldr	r2, [pc, #436]	; (800518c <DMA_SetConfig+0x24c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d036      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6b      	ldr	r2, [pc, #428]	; (8005190 <DMA_SetConfig+0x250>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d031      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6a      	ldr	r2, [pc, #424]	; (8005194 <DMA_SetConfig+0x254>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d02c      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a68      	ldr	r2, [pc, #416]	; (8005198 <DMA_SetConfig+0x258>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d027      	beq.n	800504a <DMA_SetConfig+0x10a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a67      	ldr	r2, [pc, #412]	; (800519c <DMA_SetConfig+0x25c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <DMA_SetConfig+0x10a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a65      	ldr	r2, [pc, #404]	; (80051a0 <DMA_SetConfig+0x260>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01d      	beq.n	800504a <DMA_SetConfig+0x10a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a64      	ldr	r2, [pc, #400]	; (80051a4 <DMA_SetConfig+0x264>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <DMA_SetConfig+0x10a>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a62      	ldr	r2, [pc, #392]	; (80051a8 <DMA_SetConfig+0x268>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <DMA_SetConfig+0x10a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a61      	ldr	r2, [pc, #388]	; (80051ac <DMA_SetConfig+0x26c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <DMA_SetConfig+0x10a>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5f      	ldr	r2, [pc, #380]	; (80051b0 <DMA_SetConfig+0x270>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <DMA_SetConfig+0x10a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5e      	ldr	r2, [pc, #376]	; (80051b4 <DMA_SetConfig+0x274>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <DMA_SetConfig+0x10a>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5c      	ldr	r2, [pc, #368]	; (80051b8 <DMA_SetConfig+0x278>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <DMA_SetConfig+0x10e>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <DMA_SetConfig+0x110>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00d      	beq.n	8005070 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800505c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800506e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a39      	ldr	r2, [pc, #228]	; (800515c <DMA_SetConfig+0x21c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d04a      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <DMA_SetConfig+0x220>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d045      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <DMA_SetConfig+0x224>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d040      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a35      	ldr	r2, [pc, #212]	; (8005168 <DMA_SetConfig+0x228>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d03b      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a33      	ldr	r2, [pc, #204]	; (800516c <DMA_SetConfig+0x22c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d036      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a32      	ldr	r2, [pc, #200]	; (8005170 <DMA_SetConfig+0x230>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d031      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a30      	ldr	r2, [pc, #192]	; (8005174 <DMA_SetConfig+0x234>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02c      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <DMA_SetConfig+0x238>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d027      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <DMA_SetConfig+0x23c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <DMA_SetConfig+0x240>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01d      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <DMA_SetConfig+0x244>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a29      	ldr	r2, [pc, #164]	; (8005188 <DMA_SetConfig+0x248>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a27      	ldr	r2, [pc, #156]	; (800518c <DMA_SetConfig+0x24c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <DMA_SetConfig+0x250>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <DMA_SetConfig+0x254>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <DMA_SetConfig+0x1d0>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a23      	ldr	r2, [pc, #140]	; (8005198 <DMA_SetConfig+0x258>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <DMA_SetConfig+0x1d4>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <DMA_SetConfig+0x1d6>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d059      	beq.n	80051ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	223f      	movs	r2, #63	; 0x3f
 8005124:	409a      	lsls	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005138:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d138      	bne.n	80051bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800515a:	e086      	b.n	800526a <DMA_SetConfig+0x32a>
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
 800519c:	58025408 	.word	0x58025408
 80051a0:	5802541c 	.word	0x5802541c
 80051a4:	58025430 	.word	0x58025430
 80051a8:	58025444 	.word	0x58025444
 80051ac:	58025458 	.word	0x58025458
 80051b0:	5802546c 	.word	0x5802546c
 80051b4:	58025480 	.word	0x58025480
 80051b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
}
 80051cc:	e04d      	b.n	800526a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a29      	ldr	r2, [pc, #164]	; (8005278 <DMA_SetConfig+0x338>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <DMA_SetConfig+0x2de>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a27      	ldr	r2, [pc, #156]	; (800527c <DMA_SetConfig+0x33c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01d      	beq.n	800521e <DMA_SetConfig+0x2de>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a26      	ldr	r2, [pc, #152]	; (8005280 <DMA_SetConfig+0x340>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d018      	beq.n	800521e <DMA_SetConfig+0x2de>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a24      	ldr	r2, [pc, #144]	; (8005284 <DMA_SetConfig+0x344>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <DMA_SetConfig+0x2de>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a23      	ldr	r2, [pc, #140]	; (8005288 <DMA_SetConfig+0x348>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <DMA_SetConfig+0x2de>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <DMA_SetConfig+0x34c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <DMA_SetConfig+0x2de>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a20      	ldr	r2, [pc, #128]	; (8005290 <DMA_SetConfig+0x350>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <DMA_SetConfig+0x2de>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <DMA_SetConfig+0x354>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <DMA_SetConfig+0x2e2>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <DMA_SetConfig+0x2e4>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d108      	bne.n	800525a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	60da      	str	r2, [r3, #12]
}
 8005258:	e007      	b.n	800526a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	58025408 	.word	0x58025408
 800527c:	5802541c 	.word	0x5802541c
 8005280:	58025430 	.word	0x58025430
 8005284:	58025444 	.word	0x58025444
 8005288:	58025458 	.word	0x58025458
 800528c:	5802546c 	.word	0x5802546c
 8005290:	58025480 	.word	0x58025480
 8005294:	58025494 	.word	0x58025494

08005298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <DMA_CalcBaseAndBitshift+0x118>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04a      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d045      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <DMA_CalcBaseAndBitshift+0x120>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d040      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <DMA_CalcBaseAndBitshift+0x124>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d03b      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <DMA_CalcBaseAndBitshift+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d036      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d031      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a39      	ldr	r2, [pc, #228]	; (80053c8 <DMA_CalcBaseAndBitshift+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02c      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a38      	ldr	r2, [pc, #224]	; (80053cc <DMA_CalcBaseAndBitshift+0x134>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d027      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <DMA_CalcBaseAndBitshift+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a35      	ldr	r2, [pc, #212]	; (80053d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d01d      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <DMA_CalcBaseAndBitshift+0x140>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a32      	ldr	r2, [pc, #200]	; (80053dc <DMA_CalcBaseAndBitshift+0x144>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <DMA_CalcBaseAndBitshift+0x148>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <DMA_CalcBaseAndBitshift+0x150>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <DMA_CalcBaseAndBitshift+0xa8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <DMA_CalcBaseAndBitshift+0x154>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <DMA_CalcBaseAndBitshift+0xac>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <DMA_CalcBaseAndBitshift+0xae>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d024      	beq.n	8005394 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	3b10      	subs	r3, #16
 8005352:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <DMA_CalcBaseAndBitshift+0x158>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005364:	5cd3      	ldrb	r3, [r2, r3]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b03      	cmp	r3, #3
 8005370:	d908      	bls.n	8005384 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <DMA_CalcBaseAndBitshift+0x160>)
 800537a:	4013      	ands	r3, r2
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	659a      	str	r2, [r3, #88]	; 0x58
 8005382:	e00d      	b.n	80053a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <DMA_CalcBaseAndBitshift+0x160>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6593      	str	r3, [r2, #88]	; 0x58
 8005392:	e005      	b.n	80053a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40020010 	.word	0x40020010
 80053b4:	40020028 	.word	0x40020028
 80053b8:	40020040 	.word	0x40020040
 80053bc:	40020058 	.word	0x40020058
 80053c0:	40020070 	.word	0x40020070
 80053c4:	40020088 	.word	0x40020088
 80053c8:	400200a0 	.word	0x400200a0
 80053cc:	400200b8 	.word	0x400200b8
 80053d0:	40020410 	.word	0x40020410
 80053d4:	40020428 	.word	0x40020428
 80053d8:	40020440 	.word	0x40020440
 80053dc:	40020458 	.word	0x40020458
 80053e0:	40020470 	.word	0x40020470
 80053e4:	40020488 	.word	0x40020488
 80053e8:	400204a0 	.word	0x400204a0
 80053ec:	400204b8 	.word	0x400204b8
 80053f0:	aaaaaaab 	.word	0xaaaaaaab
 80053f4:	0800bb90 	.word	0x0800bb90
 80053f8:	fffffc00 	.word	0xfffffc00

080053fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d120      	bne.n	8005452 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b03      	cmp	r3, #3
 8005416:	d858      	bhi.n	80054ca <DMA_CheckFifoParam+0xce>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <DMA_CheckFifoParam+0x24>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005443 	.word	0x08005443
 8005428:	08005431 	.word	0x08005431
 800542c:	080054cb 	.word	0x080054cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d048      	beq.n	80054ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005440:	e045      	b.n	80054ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800544a:	d142      	bne.n	80054d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005450:	e03f      	b.n	80054d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	d123      	bne.n	80054a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	2b03      	cmp	r3, #3
 8005462:	d838      	bhi.n	80054d6 <DMA_CheckFifoParam+0xda>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <DMA_CheckFifoParam+0x70>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800547d 	.word	0x0800547d
 8005470:	08005483 	.word	0x08005483
 8005474:	0800547d 	.word	0x0800547d
 8005478:	08005495 	.word	0x08005495
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
        break;
 8005480:	e030      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d025      	beq.n	80054da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005492:	e022      	b.n	80054da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800549c:	d11f      	bne.n	80054de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054a2:	e01c      	b.n	80054de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d902      	bls.n	80054b2 <DMA_CheckFifoParam+0xb6>
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d003      	beq.n	80054b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80054b0:	e018      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
        break;
 80054b6:	e015      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00e      	beq.n	80054e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
    break;
 80054c8:	e00b      	b.n	80054e2 <DMA_CheckFifoParam+0xe6>
        break;
 80054ca:	bf00      	nop
 80054cc:	e00a      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        break;
 80054ce:	bf00      	nop
 80054d0:	e008      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        break;
 80054d2:	bf00      	nop
 80054d4:	e006      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        break;
 80054d6:	bf00      	nop
 80054d8:	e004      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        break;
 80054da:	bf00      	nop
 80054dc:	e002      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
        break;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <DMA_CheckFifoParam+0xe8>
    break;
 80054e2:	bf00      	nop
    }
  }

  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a38      	ldr	r2, [pc, #224]	; (80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a36      	ldr	r2, [pc, #216]	; (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a35      	ldr	r2, [pc, #212]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a32      	ldr	r2, [pc, #200]	; (80055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a30      	ldr	r2, [pc, #192]	; (80055fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01a      	beq.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	3b08      	subs	r3, #8
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4b26      	ldr	r3, [pc, #152]	; (800560c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a24      	ldr	r2, [pc, #144]	; (8005610 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005580:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005590:	e024      	b.n	80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	3b10      	subs	r3, #16
 800559a:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d806      	bhi.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a1b      	ldr	r2, [pc, #108]	; (800561c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d902      	bls.n	80055ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3308      	adds	r3, #8
 80055b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a16      	ldr	r2, [pc, #88]	; (8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80055cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2201      	movs	r2, #1
 80055d6:	409a      	lsls	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	58025408 	.word	0x58025408
 80055ec:	5802541c 	.word	0x5802541c
 80055f0:	58025430 	.word	0x58025430
 80055f4:	58025444 	.word	0x58025444
 80055f8:	58025458 	.word	0x58025458
 80055fc:	5802546c 	.word	0x5802546c
 8005600:	58025480 	.word	0x58025480
 8005604:	58025494 	.word	0x58025494
 8005608:	cccccccd 	.word	0xcccccccd
 800560c:	16009600 	.word	0x16009600
 8005610:	58025880 	.word	0x58025880
 8005614:	aaaaaaab 	.word	0xaaaaaaab
 8005618:	400204b8 	.word	0x400204b8
 800561c:	4002040f 	.word	0x4002040f
 8005620:	10008200 	.word	0x10008200
 8005624:	40020880 	.word	0x40020880

08005628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d04a      	beq.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d847      	bhi.n	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a25      	ldr	r2, [pc, #148]	; (80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a24      	ldr	r2, [pc, #144]	; (80056e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d01d      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4b17      	ldr	r3, [pc, #92]	; (8005700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80056b0:	671a      	str	r2, [r3, #112]	; 0x70
 80056b2:	e009      	b.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a11      	ldr	r2, [pc, #68]	; (800570c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80056c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	58025408 	.word	0x58025408
 80056e4:	5802541c 	.word	0x5802541c
 80056e8:	58025430 	.word	0x58025430
 80056ec:	58025444 	.word	0x58025444
 80056f0:	58025458 	.word	0x58025458
 80056f4:	5802546c 	.word	0x5802546c
 80056f8:	58025480 	.word	0x58025480
 80056fc:	58025494 	.word	0x58025494
 8005700:	1600963f 	.word	0x1600963f
 8005704:	58025940 	.word	0x58025940
 8005708:	1000823f 	.word	0x1000823f
 800570c:	40020940 	.word	0x40020940

08005710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_GPIO_Init+0x234>)
 8005720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005722:	e194      	b.n	8005a4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8186 	beq.w	8005a48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d005      	beq.n	8005754 <HAL_GPIO_Init+0x44>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d130      	bne.n	80057b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	2203      	movs	r2, #3
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4013      	ands	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800578a:	2201      	movs	r2, #1
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 0201 	and.w	r2, r3, #1
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d017      	beq.n	80057f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2203      	movs	r2, #3
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d123      	bne.n	8005846 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	08da      	lsrs	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3208      	adds	r2, #8
 8005806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	220f      	movs	r2, #15
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4013      	ands	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4313      	orrs	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2203      	movs	r2, #3
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 0203 	and.w	r2, r3, #3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80e0 	beq.w	8005a48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_GPIO_Init+0x238>)
 800588a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800588e:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_GPIO_Init+0x238>)
 8005890:	f043 0302 	orr.w	r3, r3, #2
 8005894:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005898:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_GPIO_Init+0x238>)
 800589a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a6:	4a29      	ldr	r2, [pc, #164]	; (800594c <HAL_GPIO_Init+0x23c>)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	3302      	adds	r3, #2
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_GPIO_Init+0x240>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d052      	beq.n	8005978 <HAL_GPIO_Init+0x268>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_GPIO_Init+0x244>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d031      	beq.n	800593e <HAL_GPIO_Init+0x22e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1e      	ldr	r2, [pc, #120]	; (8005958 <HAL_GPIO_Init+0x248>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d02b      	beq.n	800593a <HAL_GPIO_Init+0x22a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_GPIO_Init+0x24c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d025      	beq.n	8005936 <HAL_GPIO_Init+0x226>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_GPIO_Init+0x250>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01f      	beq.n	8005932 <HAL_GPIO_Init+0x222>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <HAL_GPIO_Init+0x254>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d019      	beq.n	800592e <HAL_GPIO_Init+0x21e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <HAL_GPIO_Init+0x258>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_GPIO_Init+0x21a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <HAL_GPIO_Init+0x25c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00d      	beq.n	8005926 <HAL_GPIO_Init+0x216>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <HAL_GPIO_Init+0x260>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <HAL_GPIO_Init+0x212>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a17      	ldr	r2, [pc, #92]	; (8005974 <HAL_GPIO_Init+0x264>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_GPIO_Init+0x20e>
 800591a:	2309      	movs	r3, #9
 800591c:	e02d      	b.n	800597a <HAL_GPIO_Init+0x26a>
 800591e:	230a      	movs	r3, #10
 8005920:	e02b      	b.n	800597a <HAL_GPIO_Init+0x26a>
 8005922:	2308      	movs	r3, #8
 8005924:	e029      	b.n	800597a <HAL_GPIO_Init+0x26a>
 8005926:	2307      	movs	r3, #7
 8005928:	e027      	b.n	800597a <HAL_GPIO_Init+0x26a>
 800592a:	2306      	movs	r3, #6
 800592c:	e025      	b.n	800597a <HAL_GPIO_Init+0x26a>
 800592e:	2305      	movs	r3, #5
 8005930:	e023      	b.n	800597a <HAL_GPIO_Init+0x26a>
 8005932:	2304      	movs	r3, #4
 8005934:	e021      	b.n	800597a <HAL_GPIO_Init+0x26a>
 8005936:	2303      	movs	r3, #3
 8005938:	e01f      	b.n	800597a <HAL_GPIO_Init+0x26a>
 800593a:	2302      	movs	r3, #2
 800593c:	e01d      	b.n	800597a <HAL_GPIO_Init+0x26a>
 800593e:	2301      	movs	r3, #1
 8005940:	e01b      	b.n	800597a <HAL_GPIO_Init+0x26a>
 8005942:	bf00      	nop
 8005944:	58000080 	.word	0x58000080
 8005948:	58024400 	.word	0x58024400
 800594c:	58000400 	.word	0x58000400
 8005950:	58020000 	.word	0x58020000
 8005954:	58020400 	.word	0x58020400
 8005958:	58020800 	.word	0x58020800
 800595c:	58020c00 	.word	0x58020c00
 8005960:	58021000 	.word	0x58021000
 8005964:	58021400 	.word	0x58021400
 8005968:	58021800 	.word	0x58021800
 800596c:	58021c00 	.word	0x58021c00
 8005970:	58022000 	.word	0x58022000
 8005974:	58022400 	.word	0x58022400
 8005978:	2300      	movs	r3, #0
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	f002 0203 	and.w	r2, r2, #3
 8005980:	0092      	lsls	r2, r2, #2
 8005982:	4093      	lsls	r3, r2
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800598a:	4938      	ldr	r1, [pc, #224]	; (8005a6c <HAL_GPIO_Init+0x35c>)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	3302      	adds	r3, #2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f ae63 	bne.w	8005724 <HAL_GPIO_Init+0x14>
  }
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	3724      	adds	r7, #36	; 0x24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	58000400 	.word	0x58000400

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <HAL_HSEM_FastTake+0x2c>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3320      	adds	r3, #32
 8005ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <HAL_HSEM_FastTake+0x30>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d101      	bne.n	8005ac0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e000      	b.n	8005ac2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58026400 	.word	0x58026400
 8005ad4:	80000300 	.word	0x80000300

08005ad8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005ae2:	4906      	ldr	r1, [pc, #24]	; (8005afc <HAL_HSEM_Release+0x24>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	58026400 	.word	0x58026400

08005b00 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{ 
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0b1      	b.n	8005c7a <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d101      	bne.n	8005b26 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0a9      	b.n	8005c7a <HAL_OPAMP_Init+0x17a>
  }  
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d101      	bne.n	8005b36 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0a1      	b.n	8005c7a <HAL_OPAMP_Init+0x17a>
    }
    

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming)); 

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }
     
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);    
#else    
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb fd20 	bl	8001598 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b66:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */                                          
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d119      	bne.n	8005ba4 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b43      	ldr	r3, [pc, #268]	; (8005c84 <HAL_OPAMP_Init+0x184>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6851      	ldr	r1, [r2, #4]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6892      	ldr	r2, [r2, #8]
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6952      	ldr	r2, [r2, #20]
 8005b88:	4311      	orrs	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6992      	ldr	r2, [r2, #24]
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6912      	ldr	r2, [r2, #16]
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	69d2      	ldr	r2, [r2, #28]
 8005b9a:	4311      	orrs	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }
    
    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b60      	cmp	r3, #96	; 0x60
 8005baa:	d113      	bne.n	8005bd4 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <HAL_OPAMP_Init+0x188>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6851      	ldr	r1, [r2, #4]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6912      	ldr	r2, [r2, #16]
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	69d2      	ldr	r2, [r2, #28]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);     
    }     
    
    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <HAL_OPAMP_Init+0x188>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6851      	ldr	r1, [r2, #4]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6892      	ldr	r2, [r2, #8]
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68d2      	ldr	r2, [r2, #12]
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6912      	ldr	r2, [r2, #16]
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	69d2      	ldr	r2, [r2, #28]
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    } 
    
    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c12:	d127      	bne.n	8005c64 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1c:	d011      	beq.n	8005c42 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN)); 
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <HAL_OPAMP_Init+0x18c>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6053      	str	r3, [r2, #4]
 8005c40:	e010      	b.n	8005c64 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed)); 
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);     
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <HAL_OPAMP_Init+0x18c>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]
      }
    } 
   
    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	fff83e93 	.word	0xfff83e93
 8005c88:	fffbfe93 	.word	0xfffbfe93
 8005c8c:	ffffe0e0 	.word	0xffffe0e0

08005c90 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{ 
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
 8005ca6:	e01d      	b.n	8005ce4 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b05      	cmp	r3, #5
 8005cb2:	d102      	bne.n	8005cba <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	e014      	b.n	8005ce4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
    
    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/     
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005cde:	e001      	b.n	8005ce4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
    }
    
   }
  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005cfc:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d00a      	beq.n	8005d1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d08:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d001      	beq.n	8005d1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e040      	b.n	8005d9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e03e      	b.n	8005d9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d1e:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005d26:	491f      	ldr	r1, [pc, #124]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d2e:	f7fb fdbd 	bl	80018ac <HAL_GetTick>
 8005d32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d34:	e009      	b.n	8005d4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d36:	f7fb fdb9 	bl	80018ac <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d44:	d901      	bls.n	8005d4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e028      	b.n	8005d9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d56:	d1ee      	bne.n	8005d36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b1e      	cmp	r3, #30
 8005d5c:	d008      	beq.n	8005d70 <HAL_PWREx_ConfigSupply+0x7c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b2e      	cmp	r3, #46	; 0x2e
 8005d62:	d005      	beq.n	8005d70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b1d      	cmp	r3, #29
 8005d68:	d002      	beq.n	8005d70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b2d      	cmp	r3, #45	; 0x2d
 8005d6e:	d114      	bne.n	8005d9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005d70:	f7fb fd9c 	bl	80018ac <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d76:	e009      	b.n	8005d8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d78:	f7fb fd98 	bl	80018ac <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d86:	d901      	bls.n	8005d8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e007      	b.n	8005d9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d1ee      	bne.n	8005d78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	58024800 	.word	0x58024800

08005da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f000 bc48 	b.w	800664c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8088 	beq.w	8005eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dca:	4b99      	ldr	r3, [pc, #612]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dd4:	4b96      	ldr	r3, [pc, #600]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d007      	beq.n	8005df0 <HAL_RCC_OscConfig+0x48>
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	2b18      	cmp	r3, #24
 8005de4:	d111      	bne.n	8005e0a <HAL_RCC_OscConfig+0x62>
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df0:	4b8f      	ldr	r3, [pc, #572]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d06d      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x130>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d169      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f000 bc21 	b.w	800664c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e12:	d106      	bne.n	8005e22 <HAL_RCC_OscConfig+0x7a>
 8005e14:	4b86      	ldr	r3, [pc, #536]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a85      	ldr	r2, [pc, #532]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e02e      	b.n	8005e80 <HAL_RCC_OscConfig+0xd8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCC_OscConfig+0x9c>
 8005e2a:	4b81      	ldr	r3, [pc, #516]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a80      	ldr	r2, [pc, #512]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b7e      	ldr	r3, [pc, #504]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7d      	ldr	r2, [pc, #500]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e01d      	b.n	8005e80 <HAL_RCC_OscConfig+0xd8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0xc0>
 8005e4e:	4b78      	ldr	r3, [pc, #480]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a77      	ldr	r2, [pc, #476]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4b75      	ldr	r3, [pc, #468]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a74      	ldr	r2, [pc, #464]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0xd8>
 8005e68:	4b71      	ldr	r3, [pc, #452]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a70      	ldr	r2, [pc, #448]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b6e      	ldr	r3, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a6d      	ldr	r2, [pc, #436]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fb fd10 	bl	80018ac <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fb fd0c 	bl	80018ac <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e3d4      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea2:	4b63      	ldr	r3, [pc, #396]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0xe8>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fcfc 	bl	80018ac <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fcf8 	bl	80018ac <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e3c0      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eca:	4b59      	ldr	r3, [pc, #356]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x110>
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80ca 	beq.w	800607c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee8:	4b51      	ldr	r3, [pc, #324]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef2:	4b4f      	ldr	r3, [pc, #316]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_RCC_OscConfig+0x166>
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b18      	cmp	r3, #24
 8005f02:	d156      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x20a>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d151      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0e:	4b48      	ldr	r3, [pc, #288]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_RCC_OscConfig+0x17e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e392      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f26:	4b42      	ldr	r3, [pc, #264]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 0219 	bic.w	r2, r3, #25
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	493f      	ldr	r1, [pc, #252]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fb fcb8 	bl	80018ac <HAL_GetTick>
 8005f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f40:	f7fb fcb4 	bl	80018ac <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e37c      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f52:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	f7fb fcd5 	bl	800190c <HAL_GetREVID>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d817      	bhi.n	8005f9c <HAL_RCC_OscConfig+0x1f4>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d108      	bne.n	8005f86 <HAL_RCC_OscConfig+0x1de>
 8005f74:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f7c:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	e07a      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	031b      	lsls	r3, r3, #12
 8005f94:	4926      	ldr	r1, [pc, #152]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f9a:	e06f      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b24      	ldr	r3, [pc, #144]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	4921      	ldr	r1, [pc, #132]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb0:	e064      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d047      	beq.n	800604a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 0219 	bic.w	r2, r3, #25
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	491a      	ldr	r1, [pc, #104]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fb fc6e 	bl	80018ac <HAL_GetTick>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd4:	f7fb fc6a 	bl	80018ac <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e332      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff2:	f7fb fc8b 	bl	800190c <HAL_GetREVID>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d819      	bhi.n	8006034 <HAL_RCC_OscConfig+0x28c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d108      	bne.n	800601a <HAL_RCC_OscConfig+0x272>
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006010:	4a07      	ldr	r2, [pc, #28]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006016:	6053      	str	r3, [r2, #4]
 8006018:	e030      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	031b      	lsls	r3, r3, #12
 8006028:	4901      	ldr	r1, [pc, #4]	; (8006030 <HAL_RCC_OscConfig+0x288>)
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
 800602e:	e025      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
 8006030:	58024400 	.word	0x58024400
 8006034:	4b9a      	ldr	r3, [pc, #616]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	4997      	ldr	r1, [pc, #604]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]
 8006048:	e018      	b.n	800607c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800604a:	4b95      	ldr	r3, [pc, #596]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a94      	ldr	r2, [pc, #592]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fb fc29 	bl	80018ac <HAL_GetTick>
 800605a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605e:	f7fb fc25 	bl	80018ac <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e2ed      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006070:	4b8b      	ldr	r3, [pc, #556]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a9 	beq.w	80061dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608a:	4b85      	ldr	r3, [pc, #532]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006094:	4b82      	ldr	r3, [pc, #520]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d007      	beq.n	80060b0 <HAL_RCC_OscConfig+0x308>
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b18      	cmp	r3, #24
 80060a4:	d13a      	bne.n	800611c <HAL_RCC_OscConfig+0x374>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d135      	bne.n	800611c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060b0:	4b7b      	ldr	r3, [pc, #492]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_RCC_OscConfig+0x320>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e2c1      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c8:	f7fb fc20 	bl	800190c <HAL_GetREVID>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d817      	bhi.n	8006106 <HAL_RCC_OscConfig+0x35e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d108      	bne.n	80060f0 <HAL_RCC_OscConfig+0x348>
 80060de:	4b70      	ldr	r3, [pc, #448]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060e6:	4a6e      	ldr	r2, [pc, #440]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060ee:	e075      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060f0:	4b6b      	ldr	r3, [pc, #428]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	069b      	lsls	r3, r3, #26
 80060fe:	4968      	ldr	r1, [pc, #416]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006100:	4313      	orrs	r3, r2
 8006102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006104:	e06a      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006106:	4b66      	ldr	r3, [pc, #408]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	4962      	ldr	r1, [pc, #392]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006116:	4313      	orrs	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800611a:	e05f      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d042      	beq.n	80061aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006124:	4b5e      	ldr	r3, [pc, #376]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a5d      	ldr	r2, [pc, #372]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fb fbbc 	bl	80018ac <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006138:	f7fb fbb8 	bl	80018ac <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e280      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800614a:	4b55      	ldr	r3, [pc, #340]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f0      	beq.n	8006138 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006156:	f7fb fbd9 	bl	800190c <HAL_GetREVID>
 800615a:	4603      	mov	r3, r0
 800615c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006160:	4293      	cmp	r3, r2
 8006162:	d817      	bhi.n	8006194 <HAL_RCC_OscConfig+0x3ec>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	2b20      	cmp	r3, #32
 800616a:	d108      	bne.n	800617e <HAL_RCC_OscConfig+0x3d6>
 800616c:	4b4c      	ldr	r3, [pc, #304]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006174:	4a4a      	ldr	r2, [pc, #296]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800617a:	6053      	str	r3, [r2, #4]
 800617c:	e02e      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
 800617e:	4b48      	ldr	r3, [pc, #288]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	069b      	lsls	r3, r3, #26
 800618c:	4944      	ldr	r1, [pc, #272]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
 8006192:	e023      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
 8006194:	4b42      	ldr	r3, [pc, #264]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	493f      	ldr	r1, [pc, #252]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60cb      	str	r3, [r1, #12]
 80061a8:	e018      	b.n	80061dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061aa:	4b3d      	ldr	r3, [pc, #244]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a3c      	ldr	r2, [pc, #240]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fb fb79 	bl	80018ac <HAL_GetTick>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061be:	f7fb fb75 	bl	80018ac <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e23d      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061d0:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d036      	beq.n	8006256 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d019      	beq.n	8006224 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f4:	4a2a      	ldr	r2, [pc, #168]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fc:	f7fb fb56 	bl	80018ac <HAL_GetTick>
 8006200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006204:	f7fb fb52 	bl	80018ac <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e21a      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006216:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x45c>
 8006222:	e018      	b.n	8006256 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006224:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fb fb3c 	bl	80018ac <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006238:	f7fb fb38 	bl	80018ac <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e200      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800624a:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800624c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d039      	beq.n	80062d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01c      	beq.n	80062a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006276:	f7fb fb19 	bl	80018ac <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627e:	f7fb fb15 	bl	80018ac <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e1dd      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_RCC_OscConfig+0x4f8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x4d6>
 800629c:	e01b      	b.n	80062d6 <HAL_RCC_OscConfig+0x52e>
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062a4:	4b9b      	ldr	r3, [pc, #620]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a9a      	ldr	r2, [pc, #616]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062b0:	f7fb fafc 	bl	80018ac <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b8:	f7fb faf8 	bl	80018ac <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e1c0      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062ca:	4b92      	ldr	r3, [pc, #584]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8081 	beq.w	80063e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062e4:	4b8c      	ldr	r3, [pc, #560]	; (8006518 <HAL_RCC_OscConfig+0x770>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a8b      	ldr	r2, [pc, #556]	; (8006518 <HAL_RCC_OscConfig+0x770>)
 80062ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f0:	f7fb fadc 	bl	80018ac <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f8:	f7fb fad8 	bl	80018ac <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	; 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e1a0      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800630a:	4b83      	ldr	r3, [pc, #524]	; (8006518 <HAL_RCC_OscConfig+0x770>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x584>
 800631e:	4b7d      	ldr	r3, [pc, #500]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	4a7c      	ldr	r2, [pc, #496]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6713      	str	r3, [r2, #112]	; 0x70
 800632a:	e02d      	b.n	8006388 <HAL_RCC_OscConfig+0x5e0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <HAL_RCC_OscConfig+0x5a6>
 8006334:	4b77      	ldr	r3, [pc, #476]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	4a76      	ldr	r2, [pc, #472]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	6713      	str	r3, [r2, #112]	; 0x70
 8006340:	4b74      	ldr	r3, [pc, #464]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	4a73      	ldr	r2, [pc, #460]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006346:	f023 0304 	bic.w	r3, r3, #4
 800634a:	6713      	str	r3, [r2, #112]	; 0x70
 800634c:	e01c      	b.n	8006388 <HAL_RCC_OscConfig+0x5e0>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b05      	cmp	r3, #5
 8006354:	d10c      	bne.n	8006370 <HAL_RCC_OscConfig+0x5c8>
 8006356:	4b6f      	ldr	r3, [pc, #444]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	4a6e      	ldr	r2, [pc, #440]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	6713      	str	r3, [r2, #112]	; 0x70
 8006362:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a6b      	ldr	r2, [pc, #428]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	e00b      	b.n	8006388 <HAL_RCC_OscConfig+0x5e0>
 8006370:	4b68      	ldr	r3, [pc, #416]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a67      	ldr	r2, [pc, #412]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a64      	ldr	r2, [pc, #400]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006382:	f023 0304 	bic.w	r3, r3, #4
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fb fa8c 	bl	80018ac <HAL_GetTick>
 8006394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006396:	e00a      	b.n	80063ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006398:	f7fb fa88 	bl	80018ac <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e14e      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ae:	4b59      	ldr	r3, [pc, #356]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0ee      	beq.n	8006398 <HAL_RCC_OscConfig+0x5f0>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fb fa76 	bl	80018ac <HAL_GetTick>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c4:	f7fb fa72 	bl	80018ac <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e138      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063da:	4b4e      	ldr	r3, [pc, #312]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ee      	bne.n	80063c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 812d 	beq.w	800664a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063f0:	4b48      	ldr	r3, [pc, #288]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f8:	2b18      	cmp	r3, #24
 80063fa:	f000 80bd 	beq.w	8006578 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b02      	cmp	r3, #2
 8006404:	f040 809e 	bne.w	8006544 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006408:	4b42      	ldr	r3, [pc, #264]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a41      	ldr	r2, [pc, #260]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800640e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb fa4a 	bl	80018ac <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641c:	f7fb fa46 	bl	80018ac <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e10e      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800642e:	4b39      	ldr	r3, [pc, #228]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643a:	4b36      	ldr	r3, [pc, #216]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800643e:	4b37      	ldr	r3, [pc, #220]	; (800651c <HAL_RCC_OscConfig+0x774>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	430a      	orrs	r2, r1
 800644e:	4931      	ldr	r1, [pc, #196]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	628b      	str	r3, [r1, #40]	; 0x28
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	3b01      	subs	r3, #1
 800645a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	3b01      	subs	r3, #1
 8006464:	025b      	lsls	r3, r3, #9
 8006466:	b29b      	uxth	r3, r3
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	3b01      	subs	r3, #1
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	3b01      	subs	r3, #1
 800647e:	061b      	lsls	r3, r3, #24
 8006480:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006484:	4923      	ldr	r1, [pc, #140]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006486:	4313      	orrs	r3, r2
 8006488:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800648a:	4b22      	ldr	r3, [pc, #136]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a21      	ldr	r2, [pc, #132]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006496:	4b1f      	ldr	r3, [pc, #124]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649a:	4b21      	ldr	r3, [pc, #132]	; (8006520 <HAL_RCC_OscConfig+0x778>)
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064a2:	00d2      	lsls	r2, r2, #3
 80064a4:	491b      	ldr	r1, [pc, #108]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064aa:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	f023 020c 	bic.w	r2, r3, #12
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4917      	ldr	r1, [pc, #92]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064bc:	4b15      	ldr	r3, [pc, #84]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	f023 0202 	bic.w	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c8:	4912      	ldr	r1, [pc, #72]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	4a07      	ldr	r2, [pc, #28]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a04      	ldr	r2, [pc, #16]	; (8006514 <HAL_RCC_OscConfig+0x76c>)
 8006504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650a:	f7fb f9cf 	bl	80018ac <HAL_GetTick>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006510:	e011      	b.n	8006536 <HAL_RCC_OscConfig+0x78e>
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	58024800 	.word	0x58024800
 800651c:	fffffc0c 	.word	0xfffffc0c
 8006520:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7fb f9c2 	bl	80018ac <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e08a      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006536:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x77c>
 8006542:	e082      	b.n	800664a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006544:	4b43      	ldr	r3, [pc, #268]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a42      	ldr	r2, [pc, #264]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800654a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800654e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006550:	f7fb f9ac 	bl	80018ac <HAL_GetTick>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006558:	f7fb f9a8 	bl	80018ac <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e070      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800656a:	4b3a      	ldr	r3, [pc, #232]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f0      	bne.n	8006558 <HAL_RCC_OscConfig+0x7b0>
 8006576:	e068      	b.n	800664a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006578:	4b36      	ldr	r3, [pc, #216]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800657e:	4b35      	ldr	r3, [pc, #212]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	d031      	beq.n	80065f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f003 0203 	and.w	r2, r3, #3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d12a      	bne.n	80065f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d122      	bne.n	80065f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d11a      	bne.n	80065f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	0a5b      	lsrs	r3, r3, #9
 80065be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d111      	bne.n	80065f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065da:	429a      	cmp	r2, r3
 80065dc:	d108      	bne.n	80065f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	0e1b      	lsrs	r3, r3, #24
 80065e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d001      	beq.n	80065f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e02b      	b.n	800664c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	08db      	lsrs	r3, r3, #3
 80065fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d01f      	beq.n	800664a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006616:	f7fb f949 	bl	80018ac <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800661c:	bf00      	nop
 800661e:	f7fb f945 	bl	80018ac <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	4293      	cmp	r3, r2
 8006628:	d0f9      	beq.n	800661e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800662c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <HAL_RCC_OscConfig+0x8b0>)
 8006630:	4013      	ands	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006636:	00d2      	lsls	r2, r2, #3
 8006638:	4906      	ldr	r1, [pc, #24]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 800663a:	4313      	orrs	r3, r2
 800663c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	4a04      	ldr	r2, [pc, #16]	; (8006654 <HAL_RCC_OscConfig+0x8ac>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3730      	adds	r7, #48	; 0x30
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	58024400 	.word	0x58024400
 8006658:	ffff0007 	.word	0xffff0007

0800665c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e19c      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006670:	4b8a      	ldr	r3, [pc, #552]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d910      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667e:	4b87      	ldr	r3, [pc, #540]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 020f 	bic.w	r2, r3, #15
 8006686:	4985      	ldr	r1, [pc, #532]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668e:	4b83      	ldr	r3, [pc, #524]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e184      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d908      	bls.n	80066ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066bc:	4b78      	ldr	r3, [pc, #480]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	4975      	ldr	r1, [pc, #468]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d010      	beq.n	80066fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	4b70      	ldr	r3, [pc, #448]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d908      	bls.n	80066fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ea:	4b6d      	ldr	r3, [pc, #436]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	496a      	ldr	r1, [pc, #424]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d010      	beq.n	800672a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	4b64      	ldr	r3, [pc, #400]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006714:	429a      	cmp	r2, r3
 8006716:	d908      	bls.n	800672a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006718:	4b61      	ldr	r3, [pc, #388]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	495e      	ldr	r1, [pc, #376]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006726:	4313      	orrs	r3, r2
 8006728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d010      	beq.n	8006758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	4b59      	ldr	r3, [pc, #356]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006742:	429a      	cmp	r2, r3
 8006744:	d908      	bls.n	8006758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006746:	4b56      	ldr	r3, [pc, #344]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4953      	ldr	r1, [pc, #332]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006754:	4313      	orrs	r3, r2
 8006756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	4b4d      	ldr	r3, [pc, #308]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	429a      	cmp	r2, r3
 8006772:	d908      	bls.n	8006786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006774:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f023 020f 	bic.w	r2, r3, #15
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4947      	ldr	r1, [pc, #284]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006782:	4313      	orrs	r3, r2
 8006784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d055      	beq.n	800683e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006792:	4b43      	ldr	r3, [pc, #268]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	4940      	ldr	r1, [pc, #256]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067ac:	4b3c      	ldr	r3, [pc, #240]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d121      	bne.n	80067fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0f6      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067c4:	4b36      	ldr	r3, [pc, #216]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d115      	bne.n	80067fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0ea      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067dc:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0de      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067ec:	4b2c      	ldr	r3, [pc, #176]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0d6      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067fc:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f023 0207 	bic.w	r2, r3, #7
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4925      	ldr	r1, [pc, #148]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800680a:	4313      	orrs	r3, r2
 800680c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680e:	f7fb f84d 	bl	80018ac <HAL_GetTick>
 8006812:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006814:	e00a      	b.n	800682c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006816:	f7fb f849 	bl	80018ac <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	f241 3288 	movw	r2, #5000	; 0x1388
 8006824:	4293      	cmp	r3, r2
 8006826:	d901      	bls.n	800682c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e0be      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682c:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	429a      	cmp	r2, r3
 800683c:	d1eb      	bne.n	8006816 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d010      	beq.n	800686c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	429a      	cmp	r2, r3
 8006858:	d208      	bcs.n	800686c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f023 020f 	bic.w	r2, r3, #15
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	490e      	ldr	r1, [pc, #56]	; (80068a0 <HAL_RCC_ClockConfig+0x244>)
 8006868:	4313      	orrs	r3, r2
 800686a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d214      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 020f 	bic.w	r2, r3, #15
 8006882:	4906      	ldr	r1, [pc, #24]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	4313      	orrs	r3, r2
 8006888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_RCC_ClockConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d005      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e086      	b.n	80069aa <HAL_RCC_ClockConfig+0x34e>
 800689c:	52002000 	.word	0x52002000
 80068a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	4b3f      	ldr	r3, [pc, #252]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068bc:	429a      	cmp	r2, r3
 80068be:	d208      	bcs.n	80068d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068c0:	4b3c      	ldr	r3, [pc, #240]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	4939      	ldr	r1, [pc, #228]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d208      	bcs.n	8006900 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ee:	4b31      	ldr	r3, [pc, #196]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	492e      	ldr	r1, [pc, #184]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006918:	429a      	cmp	r2, r3
 800691a:	d208      	bcs.n	800692e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800691c:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	4922      	ldr	r1, [pc, #136]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 800692a:	4313      	orrs	r3, r2
 800692c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d010      	beq.n	800695c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006946:	429a      	cmp	r2, r3
 8006948:	d208      	bcs.n	800695c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	4917      	ldr	r1, [pc, #92]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 8006958:	4313      	orrs	r3, r2
 800695a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800695c:	f000 f834 	bl	80069c8 <HAL_RCC_GetSysClockFreq>
 8006960:	4602      	mov	r2, r0
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	4912      	ldr	r1, [pc, #72]	; (80069b8 <HAL_RCC_ClockConfig+0x35c>)
 800696e:	5ccb      	ldrb	r3, [r1, r3]
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <HAL_RCC_ClockConfig+0x358>)
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	4a0d      	ldr	r2, [pc, #52]	; (80069b8 <HAL_RCC_ClockConfig+0x35c>)
 8006984:	5cd3      	ldrb	r3, [r2, r3]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <HAL_RCC_ClockConfig+0x360>)
 8006992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006994:	4a0a      	ldr	r2, [pc, #40]	; (80069c0 <HAL_RCC_ClockConfig+0x364>)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCC_ClockConfig+0x368>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fa ff3a 	bl	8001818 <HAL_InitTick>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	58024400 	.word	0x58024400
 80069b8:	0800bb80 	.word	0x0800bb80
 80069bc:	24000004 	.word	0x24000004
 80069c0:	24000000 	.word	0x24000000
 80069c4:	24000010 	.word	0x24000010

080069c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	; 0x24
 80069cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ce:	4bb3      	ldr	r3, [pc, #716]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d6:	2b18      	cmp	r3, #24
 80069d8:	f200 8155 	bhi.w	8006c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a49 	.word	0x08006a49
 80069e8:	08006c87 	.word	0x08006c87
 80069ec:	08006c87 	.word	0x08006c87
 80069f0:	08006c87 	.word	0x08006c87
 80069f4:	08006c87 	.word	0x08006c87
 80069f8:	08006c87 	.word	0x08006c87
 80069fc:	08006c87 	.word	0x08006c87
 8006a00:	08006c87 	.word	0x08006c87
 8006a04:	08006a6f 	.word	0x08006a6f
 8006a08:	08006c87 	.word	0x08006c87
 8006a0c:	08006c87 	.word	0x08006c87
 8006a10:	08006c87 	.word	0x08006c87
 8006a14:	08006c87 	.word	0x08006c87
 8006a18:	08006c87 	.word	0x08006c87
 8006a1c:	08006c87 	.word	0x08006c87
 8006a20:	08006c87 	.word	0x08006c87
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006c87 	.word	0x08006c87
 8006a2c:	08006c87 	.word	0x08006c87
 8006a30:	08006c87 	.word	0x08006c87
 8006a34:	08006c87 	.word	0x08006c87
 8006a38:	08006c87 	.word	0x08006c87
 8006a3c:	08006c87 	.word	0x08006c87
 8006a40:	08006c87 	.word	0x08006c87
 8006a44:	08006a7b 	.word	0x08006a7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a48:	4b94      	ldr	r3, [pc, #592]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a54:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	08db      	lsrs	r3, r3, #3
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	4a90      	ldr	r2, [pc, #576]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
 8006a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a66:	e111      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a68:	4b8d      	ldr	r3, [pc, #564]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a6a:	61bb      	str	r3, [r7, #24]
      break;
 8006a6c:	e10e      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a70:	61bb      	str	r3, [r7, #24]
      break;
 8006a72:	e10b      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a74:	4b8c      	ldr	r3, [pc, #560]	; (8006ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a76:	61bb      	str	r3, [r7, #24]
      break;
 8006a78:	e108      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a84:	4b85      	ldr	r3, [pc, #532]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a90:	4b82      	ldr	r3, [pc, #520]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a9a:	4b80      	ldr	r3, [pc, #512]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80e1 	beq.w	8006c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	f000 8083 	beq.w	8006bcc <HAL_RCC_GetSysClockFreq+0x204>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	f200 80a1 	bhi.w	8006c10 <HAL_RCC_GetSysClockFreq+0x248>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0x114>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d056      	beq.n	8006b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ada:	e099      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006adc:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02d      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae8:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	08db      	lsrs	r3, r3, #3
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	4a6b      	ldr	r2, [pc, #428]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b62      	ldr	r3, [pc, #392]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b42:	e087      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b86:	e065      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bca:	e043      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c0e:	e021      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c54:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	0a5b      	lsrs	r3, r3, #9
 8006c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5e:	3301      	adds	r3, #1
 8006c60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c78:	ee17 3a90 	vmov	r3, s15
 8006c7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c7e:	e005      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
      break;
 8006c84:	e002      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c88:	61bb      	str	r3, [r7, #24]
      break;
 8006c8a:	bf00      	nop
  }

  return sysclockfreq;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3724      	adds	r7, #36	; 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	003d0900 	.word	0x003d0900
 8006ca8:	007a1200 	.word	0x007a1200
 8006cac:	46000000 	.word	0x46000000
 8006cb0:	4c742400 	.word	0x4c742400
 8006cb4:	4a742400 	.word	0x4a742400
 8006cb8:	4af42400 	.word	0x4af42400

08006cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006cc2:	f7ff fe81 	bl	80069c8 <HAL_RCC_GetSysClockFreq>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	490f      	ldr	r1, [pc, #60]	; (8006d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cd4:	5ccb      	ldrb	r3, [r1, r3]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	fa22 f303 	lsr.w	r3, r2, r3
 8006cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cfa:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d00:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d02:	681b      	ldr	r3, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	0800bb80 	.word	0x0800bb80
 8006d14:	24000004 	.word	0x24000004
 8006d18:	24000000 	.word	0x24000000

08006d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d20:	f7ff ffcc 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8006d24:	4602      	mov	r2, r0
 8006d26:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	091b      	lsrs	r3, r3, #4
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	4904      	ldr	r1, [pc, #16]	; (8006d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d32:	5ccb      	ldrb	r3, [r1, r3]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	58024400 	.word	0x58024400
 8006d44:	0800bb80 	.word	0x0800bb80

08006d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d4c:	b0ca      	sub	sp, #296	; 0x128
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8006d72:	d049      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d7e:	d02f      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d84:	d828      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8a:	d01a      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d90:	d822      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d007      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d9c:	e01c      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d9e:	4bb8      	ldr	r3, [pc, #736]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	4ab7      	ldr	r2, [pc, #732]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006daa:	e01a      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db0:	3308      	adds	r3, #8
 8006db2:	2102      	movs	r1, #2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f002 fb61 	bl	800947c <RCCEx_PLL2_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dc0:	e00f      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc6:	3328      	adds	r3, #40	; 0x28
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f002 fc08 	bl	80095e0 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dd6:	e004      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dea:	4ba5      	ldr	r3, [pc, #660]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df8:	4aa1      	ldr	r2, [pc, #644]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	6513      	str	r3, [r2, #80]	; 0x50
 8006dfe:	e003      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006e14:	f04f 0900 	mov.w	r9, #0
 8006e18:	ea58 0309 	orrs.w	r3, r8, r9
 8006e1c:	d047      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d82a      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e53 	.word	0x08006e53
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e87 	.word	0x08006e87
 8006e40:	08006e87 	.word	0x08006e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e44:	4b8e      	ldr	r3, [pc, #568]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	4a8d      	ldr	r2, [pc, #564]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e50:	e01a      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e56:	3308      	adds	r3, #8
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 fb0e 	bl	800947c <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e66:	e00f      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6c:	3328      	adds	r3, #40	; 0x28
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 fbb5 	bl	80095e0 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e7c:	e004      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e90:	4b7b      	ldr	r3, [pc, #492]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e94:	f023 0107 	bic.w	r1, r3, #7
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	4a78      	ldr	r2, [pc, #480]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006eba:	f04f 0b00 	mov.w	fp, #0
 8006ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ec2:	d04c      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	d030      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed4:	d829      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ed8:	d02d      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006eda:	2bc0      	cmp	r3, #192	; 0xc0
 8006edc:	d825      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ede:	2b80      	cmp	r3, #128	; 0x80
 8006ee0:	d018      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d821      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d007      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006eee:	e01c      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef0:	4b63      	ldr	r3, [pc, #396]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a62      	ldr	r2, [pc, #392]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006efc:	e01c      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f02:	3308      	adds	r3, #8
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 fab8 	bl	800947c <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f12:	e011      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 fb5f 	bl	80095e0 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f28:	e006      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f40:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f44:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	4a4c      	ldr	r2, [pc, #304]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6513      	str	r3, [r2, #80]	; 0x50
 8006f54:	e003      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006f6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	d053      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f8a:	d035      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f90:	d82e      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f96:	d031      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f9c:	d828      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fa2:	d01a      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fa8:	d822      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb2:	d007      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006fb4:	e01c      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb6:	4b32      	ldr	r3, [pc, #200]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a31      	ldr	r2, [pc, #196]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fc2:	e01c      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc8:	3308      	adds	r3, #8
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 fa55 	bl	800947c <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e011      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fde:	3328      	adds	r3, #40	; 0x28
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f002 fafc 	bl	80095e0 <RCCEx_PLL3_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fee:	e006      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007006:	4b1e      	ldr	r3, [pc, #120]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007016:	4a1a      	ldr	r2, [pc, #104]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007018:	430b      	orrs	r3, r1
 800701a:	6593      	str	r3, [r2, #88]	; 0x58
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007032:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800703c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d056      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800704e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007052:	d038      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007058:	d831      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800705a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800705e:	d034      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007060:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007064:	d82b      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800706a:	d01d      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800706c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007070:	d825      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800707a:	d00a      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800707c:	e01f      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007084:	4ba2      	ldr	r3, [pc, #648]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	4aa1      	ldr	r2, [pc, #644]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800708a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800708e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007090:	e01c      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007096:	3308      	adds	r3, #8
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f002 f9ee 	bl	800947c <RCCEx_PLL2_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070a6:	e011      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ac:	3328      	adds	r3, #40	; 0x28
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f002 fa95 	bl	80095e0 <RCCEx_PLL3_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070c6:	bf00      	nop
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070d4:	4b8e      	ldr	r3, [pc, #568]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070e4:	4a8a      	ldr	r2, [pc, #552]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6593      	str	r3, [r2, #88]	; 0x58
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800710a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d03a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	2b30      	cmp	r3, #48	; 0x30
 800711c:	d01f      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800711e:	2b30      	cmp	r3, #48	; 0x30
 8007120:	d819      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007122:	2b20      	cmp	r3, #32
 8007124:	d00c      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d815      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d019      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800712e:	2b10      	cmp	r3, #16
 8007130:	d111      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	4a76      	ldr	r2, [pc, #472]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800713e:	e011      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007144:	3308      	adds	r3, #8
 8007146:	2102      	movs	r1, #2
 8007148:	4618      	mov	r0, r3
 800714a:	f002 f997 	bl	800947c <RCCEx_PLL2_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007154:	e006      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800716c:	4b68      	ldr	r3, [pc, #416]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007170:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	4a65      	ldr	r2, [pc, #404]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800717c:	430b      	orrs	r3, r1
 800717e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007180:	e003      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007196:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800719a:	2300      	movs	r3, #0
 800719c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4313      	orrs	r3, r2
 80071a8:	d051      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b4:	d035      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ba:	d82e      	bhi.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071c0:	d031      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071c6:	d828      	bhi.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071cc:	d01a      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	d822      	bhi.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071dc:	d007      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071de:	e01c      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071ec:	e01c      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f2:	3308      	adds	r3, #8
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 f940 	bl	800947c <RCCEx_PLL2_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007202:	e011      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007208:	3328      	adds	r3, #40	; 0x28
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f002 f9e7 	bl	80095e0 <RCCEx_PLL3_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007218:	e006      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007230:	4b37      	ldr	r3, [pc, #220]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007234:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723e:	4a34      	ldr	r2, [pc, #208]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007240:	430b      	orrs	r3, r1
 8007242:	6513      	str	r3, [r2, #80]	; 0x50
 8007244:	e003      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800724a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800725a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800725e:	2300      	movs	r3, #0
 8007260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007264:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007268:	460b      	mov	r3, r1
 800726a:	4313      	orrs	r3, r2
 800726c:	d056      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007278:	d033      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800727a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800727e:	d82c      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007284:	d02f      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800728a:	d826      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800728c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007290:	d02b      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007296:	d820      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800729c:	d012      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800729e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a2:	d81a      	bhi.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d022      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d115      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b2:	3308      	adds	r3, #8
 80072b4:	2101      	movs	r1, #1
 80072b6:	4618      	mov	r0, r3
 80072b8:	f002 f8e0 	bl	800947c <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072c2:	e015      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c8:	3328      	adds	r3, #40	; 0x28
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 f987 	bl	80095e0 <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072d8:	e00a      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e2:	bf00      	nop
 80072e4:	e004      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10d      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007306:	4a02      	ldr	r2, [pc, #8]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007308:	430b      	orrs	r3, r1
 800730a:	6513      	str	r3, [r2, #80]	; 0x50
 800730c:	e006      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007332:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	d055      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007348:	d033      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800734a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800734e:	d82c      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007354:	d02f      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735a:	d826      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800735c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007360:	d02b      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007366:	d820      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736c:	d012      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800736e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007372:	d81a      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d022      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737c:	d115      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007382:	3308      	adds	r3, #8
 8007384:	2101      	movs	r1, #1
 8007386:	4618      	mov	r0, r3
 8007388:	f002 f878 	bl	800947c <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007392:	e015      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007398:	3328      	adds	r3, #40	; 0x28
 800739a:	2101      	movs	r1, #1
 800739c:	4618      	mov	r0, r3
 800739e:	f002 f91f 	bl	80095e0 <RCCEx_PLL3_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80073a8:	e00a      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b2:	bf00      	nop
 80073b4:	e004      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b6:	bf00      	nop
 80073b8:	e002      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ba:	bf00      	nop
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073c8:	4ba3      	ldr	r3, [pc, #652]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073cc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073d8:	4a9f      	ldr	r2, [pc, #636]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073da:	430b      	orrs	r3, r1
 80073dc:	6593      	str	r3, [r2, #88]	; 0x58
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80073f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d037      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007412:	d00e      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007418:	d816      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d018      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007422:	d111      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007424:	4b8c      	ldr	r3, [pc, #560]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a8b      	ldr	r2, [pc, #556]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800742a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800742e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007430:	e00f      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007436:	3308      	adds	r3, #8
 8007438:	2101      	movs	r1, #1
 800743a:	4618      	mov	r0, r3
 800743c:	f002 f81e 	bl	800947c <RCCEx_PLL2_Config>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007446:	e004      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800744e:	e000      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800745a:	4b7f      	ldr	r3, [pc, #508]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	4a7b      	ldr	r2, [pc, #492]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746a:	430b      	orrs	r3, r1
 800746c:	6513      	str	r3, [r2, #80]	; 0x50
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007488:	2300      	movs	r3, #0
 800748a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800748e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007492:	460b      	mov	r3, r1
 8007494:	4313      	orrs	r3, r2
 8007496:	d039      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d81c      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074e5 	.word	0x080074e5
 80074ac:	080074b9 	.word	0x080074b9
 80074b0:	080074c7 	.word	0x080074c7
 80074b4:	080074e5 	.word	0x080074e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b8:	4b67      	ldr	r3, [pc, #412]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4a66      	ldr	r2, [pc, #408]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074c4:	e00f      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ca:	3308      	adds	r3, #8
 80074cc:	2102      	movs	r1, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 ffd4 	bl	800947c <RCCEx_PLL2_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074da:	e004      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074e2:	e000      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074ee:	4b5a      	ldr	r3, [pc, #360]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	f023 0103 	bic.w	r1, r3, #3
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fc:	4a56      	ldr	r2, [pc, #344]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fe:	430b      	orrs	r3, r1
 8007500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007502:	e003      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800751c:	2300      	movs	r3, #0
 800751e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007522:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	f000 809f 	beq.w	800766c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800752e:	4b4b      	ldr	r3, [pc, #300]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a4a      	ldr	r2, [pc, #296]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800753a:	f7fa f9b7 	bl	80018ac <HAL_GetTick>
 800753e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007542:	e00b      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007544:	f7fa f9b2 	bl	80018ac <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b64      	cmp	r3, #100	; 0x64
 8007552:	d903      	bls.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800755a:	e005      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800755c:	4b3f      	ldr	r3, [pc, #252]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ed      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756c:	2b00      	cmp	r3, #0
 800756e:	d179      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007570:	4b39      	ldr	r3, [pc, #228]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800757c:	4053      	eors	r3, r2
 800757e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007582:	2b00      	cmp	r3, #0
 8007584:	d015      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007586:	4b34      	ldr	r3, [pc, #208]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007592:	4b31      	ldr	r3, [pc, #196]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007596:	4a30      	ldr	r2, [pc, #192]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800759e:	4b2e      	ldr	r3, [pc, #184]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a2d      	ldr	r2, [pc, #180]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075be:	d118      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c0:	f7fa f974 	bl	80018ac <HAL_GetTick>
 80075c4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075c8:	e00d      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ca:	f7fa f96f 	bl	80018ac <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d4:	1ad2      	subs	r2, r2, r3
 80075d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80075da:	429a      	cmp	r2, r3
 80075dc:	d903      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80075e4:	e005      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075e6:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0eb      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d129      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760a:	d10e      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800760c:	4b12      	ldr	r3, [pc, #72]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800761c:	091a      	lsrs	r2, r3, #4
 800761e:	4b10      	ldr	r3, [pc, #64]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007620:	4013      	ands	r3, r2
 8007622:	4a0d      	ldr	r2, [pc, #52]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007624:	430b      	orrs	r3, r1
 8007626:	6113      	str	r3, [r2, #16]
 8007628:	e005      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007634:	6113      	str	r3, [r2, #16]
 8007636:	4b08      	ldr	r3, [pc, #32]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007638:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007648:	430b      	orrs	r3, r1
 800764a:	6713      	str	r3, [r2, #112]	; 0x70
 800764c:	e00e      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800764e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007656:	e009      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007658:	58024400 	.word	0x58024400
 800765c:	58024800 	.word	0x58024800
 8007660:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f002 0301 	and.w	r3, r2, #1
 8007678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800767c:	2300      	movs	r3, #0
 800767e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007682:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	f000 8089 	beq.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007694:	2b28      	cmp	r3, #40	; 0x28
 8007696:	d86b      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	08007779 	.word	0x08007779
 80076a4:	08007771 	.word	0x08007771
 80076a8:	08007771 	.word	0x08007771
 80076ac:	08007771 	.word	0x08007771
 80076b0:	08007771 	.word	0x08007771
 80076b4:	08007771 	.word	0x08007771
 80076b8:	08007771 	.word	0x08007771
 80076bc:	08007771 	.word	0x08007771
 80076c0:	08007745 	.word	0x08007745
 80076c4:	08007771 	.word	0x08007771
 80076c8:	08007771 	.word	0x08007771
 80076cc:	08007771 	.word	0x08007771
 80076d0:	08007771 	.word	0x08007771
 80076d4:	08007771 	.word	0x08007771
 80076d8:	08007771 	.word	0x08007771
 80076dc:	08007771 	.word	0x08007771
 80076e0:	0800775b 	.word	0x0800775b
 80076e4:	08007771 	.word	0x08007771
 80076e8:	08007771 	.word	0x08007771
 80076ec:	08007771 	.word	0x08007771
 80076f0:	08007771 	.word	0x08007771
 80076f4:	08007771 	.word	0x08007771
 80076f8:	08007771 	.word	0x08007771
 80076fc:	08007771 	.word	0x08007771
 8007700:	08007779 	.word	0x08007779
 8007704:	08007771 	.word	0x08007771
 8007708:	08007771 	.word	0x08007771
 800770c:	08007771 	.word	0x08007771
 8007710:	08007771 	.word	0x08007771
 8007714:	08007771 	.word	0x08007771
 8007718:	08007771 	.word	0x08007771
 800771c:	08007771 	.word	0x08007771
 8007720:	08007779 	.word	0x08007779
 8007724:	08007771 	.word	0x08007771
 8007728:	08007771 	.word	0x08007771
 800772c:	08007771 	.word	0x08007771
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007771 	.word	0x08007771
 800773c:	08007771 	.word	0x08007771
 8007740:	08007779 	.word	0x08007779
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007748:	3308      	adds	r3, #8
 800774a:	2101      	movs	r1, #1
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fe95 	bl	800947c <RCCEx_PLL2_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007758:	e00f      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775e:	3328      	adds	r3, #40	; 0x28
 8007760:	2101      	movs	r1, #1
 8007762:	4618      	mov	r0, r3
 8007764:	f001 ff3c 	bl	80095e0 <RCCEx_PLL3_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800776e:	e004      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007776:	e000      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007782:	4bbf      	ldr	r3, [pc, #764]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007790:	4abb      	ldr	r2, [pc, #748]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007792:	430b      	orrs	r3, r1
 8007794:	6553      	str	r3, [r2, #84]	; 0x54
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800779c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 0302 	and.w	r3, r2, #2
 80077ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d041      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d824      	bhi.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	080077e9 	.word	0x080077e9
 80077d8:	080077ff 	.word	0x080077ff
 80077dc:	0800781d 	.word	0x0800781d
 80077e0:	0800781d 	.word	0x0800781d
 80077e4:	0800781d 	.word	0x0800781d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ec:	3308      	adds	r3, #8
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 fe43 	bl	800947c <RCCEx_PLL2_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077fc:	e00f      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3328      	adds	r3, #40	; 0x28
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f001 feea 	bl	80095e0 <RCCEx_PLL3_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007812:	e004      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800781a:	e000      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800781c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007826:	4b96      	ldr	r3, [pc, #600]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f023 0107 	bic.w	r1, r3, #7
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007834:	4a92      	ldr	r2, [pc, #584]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007836:	430b      	orrs	r3, r1
 8007838:	6553      	str	r3, [r2, #84]	; 0x54
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f002 0304 	and.w	r3, r2, #4
 8007850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d044      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786c:	2b05      	cmp	r3, #5
 800786e:	d825      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007870:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	080078c5 	.word	0x080078c5
 800787c:	08007891 	.word	0x08007891
 8007880:	080078a7 	.word	0x080078a7
 8007884:	080078c5 	.word	0x080078c5
 8007888:	080078c5 	.word	0x080078c5
 800788c:	080078c5 	.word	0x080078c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007894:	3308      	adds	r3, #8
 8007896:	2101      	movs	r1, #1
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fdef 	bl	800947c <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078a4:	e00f      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078aa:	3328      	adds	r3, #40	; 0x28
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 fe96 	bl	80095e0 <RCCEx_PLL3_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80078c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078ce:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d2:	f023 0107 	bic.w	r1, r3, #7
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078de:	4a68      	ldr	r2, [pc, #416]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6593      	str	r3, [r2, #88]	; 0x58
 80078e4:	e003      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f002 0320 	and.w	r3, r2, #32
 80078fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078fe:	2300      	movs	r3, #0
 8007900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d055      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800791a:	d033      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007920:	d82c      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007926:	d02f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d826      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800792e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007932:	d02b      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007938:	d820      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800793a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793e:	d012      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007944:	d81a      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d022      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800794a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800794e:	d115      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007954:	3308      	adds	r3, #8
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fd8f 	bl	800947c <RCCEx_PLL2_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007964:	e015      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796a:	3328      	adds	r3, #40	; 0x28
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fe36 	bl	80095e0 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800797a:	e00a      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007982:	e006      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007984:	bf00      	nop
 8007986:	e004      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007988:	bf00      	nop
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800799a:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800799c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	4a35      	ldr	r2, [pc, #212]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6553      	str	r3, [r2, #84]	; 0x54
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80079c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d058      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079e6:	d033      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079ec:	d82c      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f2:	d02f      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	d826      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079fe:	d02b      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a04:	d820      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0a:	d012      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a10:	d81a      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d022      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d115      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a20:	3308      	adds	r3, #8
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 fd29 	bl	800947c <RCCEx_PLL2_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a30:	e015      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a36:	3328      	adds	r3, #40	; 0x28
 8007a38:	2102      	movs	r1, #2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 fdd0 	bl	80095e0 <RCCEx_PLL3_Config>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a46:	e00a      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a4e:	e006      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a50:	bf00      	nop
 8007a52:	e004      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a54:	bf00      	nop
 8007a56:	e002      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10e      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a76:	4a02      	ldr	r2, [pc, #8]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	d055      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ab4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ab8:	d033      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007aba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007abe:	d82c      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac4:	d02f      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aca:	d826      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007acc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ad0:	d02b      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ad2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ad6:	d820      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007adc:	d012      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae2:	d81a      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d022      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d115      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	3308      	adds	r3, #8
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fcc0 	bl	800947c <RCCEx_PLL2_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b02:	e015      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b08:	3328      	adds	r3, #40	; 0x28
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fd67 	bl	80095e0 <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b18:	e00a      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b38:	4ba1      	ldr	r3, [pc, #644]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b48:	4a9d      	ldr	r2, [pc, #628]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b4e:	e003      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f002 0308 	and.w	r3, r2, #8
 8007b64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007b72:	460b      	mov	r3, r1
 8007b74:	4313      	orrs	r3, r2
 8007b76:	d01e      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b84:	d10c      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8a:	3328      	adds	r3, #40	; 0x28
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fd26 	bl	80095e0 <RCCEx_PLL3_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ba0:	4b87      	ldr	r3, [pc, #540]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb0:	4a83      	ldr	r2, [pc, #524]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f002 0310 	and.w	r3, r2, #16
 8007bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bcc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d01e      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be2:	d10c      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	3328      	adds	r3, #40	; 0x28
 8007bea:	2102      	movs	r1, #2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 fcf7 	bl	80095e0 <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bfe:	4b70      	ldr	r3, [pc, #448]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c0e:	4a6c      	ldr	r2, [pc, #432]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4313      	orrs	r3, r2
 8007c32:	d03e      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c40:	d022      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c46:	d81b      	bhi.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c50:	d00b      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c52:	e015      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c58:	3308      	adds	r3, #8
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 fc0d 	bl	800947c <RCCEx_PLL2_Config>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c68:	e00f      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6e:	3328      	adds	r3, #40	; 0x28
 8007c70:	2102      	movs	r1, #2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fcb4 	bl	80095e0 <RCCEx_PLL3_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c7e:	e004      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10b      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c92:	4b4b      	ldr	r3, [pc, #300]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ca2:	4a47      	ldr	r2, [pc, #284]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ca8:	e003      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d03b      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cda:	d01f      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ce0:	d818      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce6:	d003      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cec:	d007      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007cee:	e011      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf0:	4b33      	ldr	r3, [pc, #204]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4a32      	ldr	r2, [pc, #200]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cfc:	e00f      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d02:	3328      	adds	r3, #40	; 0x28
 8007d04:	2101      	movs	r1, #1
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fc6a 	bl	80095e0 <RCCEx_PLL3_Config>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d12:	e004      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d1a:	e000      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d26:	4b26      	ldr	r3, [pc, #152]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d36:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6553      	str	r3, [r2, #84]	; 0x54
 8007d3c:	e003      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007d52:	673b      	str	r3, [r7, #112]	; 0x70
 8007d54:	2300      	movs	r3, #0
 8007d56:	677b      	str	r3, [r7, #116]	; 0x74
 8007d58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d034      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d70:	d007      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d80:	e00e      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d86:	3308      	adds	r3, #8
 8007d88:	2102      	movs	r1, #2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 fb76 	bl	800947c <RCCEx_PLL2_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10d      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	4a02      	ldr	r2, [pc, #8]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db8:	430b      	orrs	r3, r1
 8007dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dbc:	e006      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dda:	2300      	movs	r3, #0
 8007ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d00c      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dec:	3328      	adds	r3, #40	; 0x28
 8007dee:	2102      	movs	r1, #2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 fbf5 	bl	80095e0 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8007e10:	2300      	movs	r3, #0
 8007e12:	667b      	str	r3, [r7, #100]	; 0x64
 8007e14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	d038      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2a:	d018      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e30:	d811      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e36:	d014      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3c:	d80b      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d011      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	d106      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e48:	4bc3      	ldr	r3, [pc, #780]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	4ac2      	ldr	r2, [pc, #776]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e54:	e008      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e5c:	e004      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10b      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e70:	4bb9      	ldr	r3, [pc, #740]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e80:	4ab5      	ldr	r2, [pc, #724]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6553      	str	r3, [r2, #84]	; 0x54
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007eac:	4baa      	ldr	r3, [pc, #680]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eba:	4aa7      	ldr	r2, [pc, #668]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8007ece:	2300      	movs	r3, #0
 8007ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d00a      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007edc:	4b9e      	ldr	r3, [pc, #632]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007eec:	4a9a      	ldr	r2, [pc, #616]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f00:	2300      	movs	r3, #0
 8007f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d009      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f0e:	4b92      	ldr	r3, [pc, #584]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	4a8e      	ldr	r2, [pc, #568]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f30:	2300      	movs	r3, #0
 8007f32:	647b      	str	r3, [r7, #68]	; 0x44
 8007f34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f3e:	4b86      	ldr	r3, [pc, #536]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	4a85      	ldr	r2, [pc, #532]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f48:	6113      	str	r3, [r2, #16]
 8007f4a:	4b83      	ldr	r3, [pc, #524]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f4c:	6919      	ldr	r1, [r3, #16]
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f56:	4a80      	ldr	r2, [pc, #512]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d009      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f78:	4b77      	ldr	r3, [pc, #476]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	4a74      	ldr	r2, [pc, #464]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007f98:	633b      	str	r3, [r7, #48]	; 0x30
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	d00a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa8:	4b6b      	ldr	r3, [pc, #428]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fac:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb8:	4a67      	ldr	r2, [pc, #412]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	d011      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fde:	3308      	adds	r3, #8
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fa4a 	bl	800947c <RCCEx_PLL2_Config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	2100      	movs	r1, #0
 8008008:	6239      	str	r1, [r7, #32]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
 8008010:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008014:	460b      	mov	r3, r1
 8008016:	4313      	orrs	r3, r2
 8008018:	d011      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801e:	3308      	adds	r3, #8
 8008020:	2101      	movs	r1, #1
 8008022:	4618      	mov	r0, r3
 8008024:	f001 fa2a 	bl	800947c <RCCEx_PLL2_Config>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800802e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	2100      	movs	r1, #0
 8008048:	61b9      	str	r1, [r7, #24]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	61fb      	str	r3, [r7, #28]
 8008050:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008054:	460b      	mov	r3, r1
 8008056:	4313      	orrs	r3, r2
 8008058:	d011      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805e:	3308      	adds	r3, #8
 8008060:	2102      	movs	r1, #2
 8008062:	4618      	mov	r0, r3
 8008064:	f001 fa0a 	bl	800947c <RCCEx_PLL2_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800806e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	2100      	movs	r1, #0
 8008088:	6139      	str	r1, [r7, #16]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008094:	460b      	mov	r3, r1
 8008096:	4313      	orrs	r3, r2
 8008098:	d011      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809e:	3328      	adds	r3, #40	; 0x28
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fa9c 	bl	80095e0 <RCCEx_PLL3_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80080ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	2100      	movs	r1, #0
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080d4:	460b      	mov	r3, r1
 80080d6:	4313      	orrs	r3, r2
 80080d8:	d011      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080de:	3328      	adds	r3, #40	; 0x28
 80080e0:	2101      	movs	r1, #1
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fa7c 	bl	80095e0 <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	2100      	movs	r1, #0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008114:	460b      	mov	r3, r1
 8008116:	4313      	orrs	r3, r2
 8008118:	d011      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811e:	3328      	adds	r3, #40	; 0x28
 8008120:	2102      	movs	r1, #2
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fa5c 	bl	80095e0 <RCCEx_PLL3_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800813a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800813e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
}
 800814c:	4618      	mov	r0, r3
 800814e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008152:	46bd      	mov	sp, r7
 8008154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008158:	58024400 	.word	0x58024400

0800815c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b090      	sub	sp, #64	; 0x40
 8008160:	af00      	add	r7, sp, #0
 8008162:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800816e:	430b      	orrs	r3, r1
 8008170:	f040 8094 	bne.w	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008174:	4b9e      	ldr	r3, [pc, #632]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2b04      	cmp	r3, #4
 8008182:	f200 8087 	bhi.w	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081a1 	.word	0x080081a1
 8008190:	080081c9 	.word	0x080081c9
 8008194:	080081f1 	.word	0x080081f1
 8008198:	0800828d 	.word	0x0800828d
 800819c:	08008219 	.word	0x08008219
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081a0:	4b93      	ldr	r3, [pc, #588]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ac:	d108      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 f810 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081bc:	f000 bd45 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	f000 bd41 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c8:	4b89      	ldr	r3, [pc, #548]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d4:	d108      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d6:	f107 0318 	add.w	r3, r7, #24
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fd54 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e4:	f000 bd31 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ec:	f000 bd2d 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081f0:	4b7f      	ldr	r3, [pc, #508]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fc:	d108      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fe:	f107 030c 	add.w	r3, r7, #12
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fe94 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820c:	f000 bd1d 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008214:	f000 bd19 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008218:	4b75      	ldr	r3, [pc, #468]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800821a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008220:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008222:	4b73      	ldr	r3, [pc, #460]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b04      	cmp	r3, #4
 800822c:	d10c      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008234:	4b6e      	ldr	r3, [pc, #440]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	08db      	lsrs	r3, r3, #3
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	4a6d      	ldr	r2, [pc, #436]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008246:	e01f      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008248:	4b69      	ldr	r3, [pc, #420]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008254:	d106      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800825c:	d102      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800825e:	4b66      	ldr	r3, [pc, #408]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008262:	e011      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008264:	4b62      	ldr	r3, [pc, #392]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008270:	d106      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008278:	d102      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800827a:	4b60      	ldr	r3, [pc, #384]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008284:	f000 bce1 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008288:	f000 bcdf 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800828c:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008290:	f000 bcdb 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	f000 bcd7 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800829c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80082a4:	430b      	orrs	r3, r1
 80082a6:	f040 80ad 	bne.w	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80082aa:	4b51      	ldr	r3, [pc, #324]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d056      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c2:	f200 8090 	bhi.w	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	2bc0      	cmp	r3, #192	; 0xc0
 80082ca:	f000 8088 	beq.w	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2bc0      	cmp	r3, #192	; 0xc0
 80082d2:	f200 8088 	bhi.w	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d032      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	2b80      	cmp	r3, #128	; 0x80
 80082e0:	f200 8081 	bhi.w	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2b40      	cmp	r3, #64	; 0x40
 80082ee:	d014      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80082f0:	e079      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082f2:	4b3f      	ldr	r3, [pc, #252]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082fe:	d108      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008304:	4618      	mov	r0, r3
 8008306:	f000 ff67 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800830e:	f000 bc9c 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008316:	f000 bc98 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831a:	4b35      	ldr	r3, [pc, #212]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008326:	d108      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008328:	f107 0318 	add.w	r3, r7, #24
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fcab 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008336:	f000 bc88 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833e:	f000 bc84 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008342:	4b2b      	ldr	r3, [pc, #172]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800834a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800834e:	d108      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008350:	f107 030c 	add.w	r3, r7, #12
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fdeb 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835e:	f000 bc74 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008366:	f000 bc70 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800836a:	4b21      	ldr	r3, [pc, #132]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008372:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008374:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b04      	cmp	r3, #4
 800837e:	d10c      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008392:	fa22 f303 	lsr.w	r3, r2, r3
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	e01f      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800839a:	4b15      	ldr	r3, [pc, #84]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	e011      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083c2:	d106      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ca:	d102      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083cc:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d0:	e003      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083d6:	f000 bc38 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083da:	f000 bc36 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e2:	f000 bc32 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ea:	f000 bc2e 	b.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083ee:	bf00      	nop
 80083f0:	58024400 	.word	0x58024400
 80083f4:	03d09000 	.word	0x03d09000
 80083f8:	003d0900 	.word	0x003d0900
 80083fc:	007a1200 	.word	0x007a1200
 8008400:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008408:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800840c:	430b      	orrs	r3, r1
 800840e:	f040 809c 	bne.w	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008412:	4b9e      	ldr	r3, [pc, #632]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008416:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800841a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008422:	d054      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842a:	f200 808b 	bhi.w	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008434:	f000 8083 	beq.w	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800843e:	f200 8081 	bhi.w	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008448:	d02f      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008450:	d878      	bhi.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800845e:	d012      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008460:	e070      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008462:	4b8a      	ldr	r3, [pc, #552]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846e:	d107      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008474:	4618      	mov	r0, r3
 8008476:	f000 feaf 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847e:	e3e4      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008484:	e3e1      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008486:	4b81      	ldr	r3, [pc, #516]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008492:	d107      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008494:	f107 0318 	add.w	r3, r7, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fbf5 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a2:	e3d2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a8:	e3cf      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084aa:	4b78      	ldr	r3, [pc, #480]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b8:	f107 030c 	add.w	r3, r7, #12
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fd37 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c6:	e3c0      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084cc:	e3bd      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084ce:	4b6f      	ldr	r3, [pc, #444]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084d8:	4b6c      	ldr	r3, [pc, #432]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d10c      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ea:	4b68      	ldr	r3, [pc, #416]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	08db      	lsrs	r3, r3, #3
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	4a66      	ldr	r2, [pc, #408]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80084f6:	fa22 f303 	lsr.w	r3, r2, r3
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fc:	e01e      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084fe:	4b63      	ldr	r3, [pc, #396]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850a:	d106      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008512:	d102      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008514:	4b5f      	ldr	r3, [pc, #380]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008518:	e010      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800851a:	4b5c      	ldr	r3, [pc, #368]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008526:	d106      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852e:	d102      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008530:	4b59      	ldr	r3, [pc, #356]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008534:	e002      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800853a:	e386      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800853c:	e385      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800853e:	4b57      	ldr	r3, [pc, #348]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008542:	e382      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008548:	e37f      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800854a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008552:	430b      	orrs	r3, r1
 8008554:	f040 80a7 	bne.w	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008558:	4b4c      	ldr	r3, [pc, #304]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008560:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008568:	d055      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008570:	f200 8096 	bhi.w	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800857a:	f000 8084 	beq.w	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008584:	f200 808c 	bhi.w	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800858e:	d030      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008596:	f200 8083 	bhi.w	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085a6:	d012      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80085a8:	e07a      	b.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085aa:	4b38      	ldr	r3, [pc, #224]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b6:	d107      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fe0b 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c6:	e340      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085cc:	e33d      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ce:	4b2f      	ldr	r3, [pc, #188]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085da:	d107      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085dc:	f107 0318 	add.w	r3, r7, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fb51 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ea:	e32e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f0:	e32b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085fe:	d107      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fc93 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860e:	e31c      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008614:	e319      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008616:	4b1d      	ldr	r3, [pc, #116]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800861e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b04      	cmp	r3, #4
 800862a:	d10c      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008632:	4b16      	ldr	r3, [pc, #88]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	4a14      	ldr	r2, [pc, #80]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008644:	e01e      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008646:	4b11      	ldr	r3, [pc, #68]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d106      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800865c:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008660:	e010      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800866e:	d106      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800867c:	e002      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008682:	e2e2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008684:	e2e1      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868a:	e2de      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800868c:	58024400 	.word	0x58024400
 8008690:	03d09000 	.word	0x03d09000
 8008694:	003d0900 	.word	0x003d0900
 8008698:	007a1200 	.word	0x007a1200
 800869c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a4:	e2d1      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80086a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086aa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80086ae:	430b      	orrs	r3, r1
 80086b0:	f040 809c 	bne.w	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80086b4:	4b93      	ldr	r3, [pc, #588]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80086bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c4:	d054      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086cc:	f200 808b 	bhi.w	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086d6:	f000 8083 	beq.w	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086e0:	f200 8081 	bhi.w	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ea:	d02f      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f2:	d878      	bhi.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008700:	d012      	beq.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008702:	e070      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008704:	4b7f      	ldr	r3, [pc, #508]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008710:	d107      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fd5e 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008720:	e293      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008726:	e290      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008728:	4b76      	ldr	r3, [pc, #472]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008734:	d107      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008736:	f107 0318 	add.w	r3, r7, #24
 800873a:	4618      	mov	r0, r3
 800873c:	f000 faa4 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008744:	e281      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800874a:	e27e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800874c:	4b6d      	ldr	r3, [pc, #436]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008758:	d107      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fbe6 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008768:	e26f      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876e:	e26c      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008770:	4b64      	ldr	r3, [pc, #400]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008778:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800877a:	4b62      	ldr	r3, [pc, #392]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0304 	and.w	r3, r3, #4
 8008782:	2b04      	cmp	r3, #4
 8008784:	d10c      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	d109      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878c:	4b5d      	ldr	r3, [pc, #372]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a5c      	ldr	r2, [pc, #368]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800879e:	e01e      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a0:	4b58      	ldr	r3, [pc, #352]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ac:	d106      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087b6:	4b55      	ldr	r3, [pc, #340]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ba:	e010      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087bc:	4b51      	ldr	r3, [pc, #324]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c8:	d106      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d0:	d102      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d6:	e002      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80087dc:	e235      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087de:	e234      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087e0:	4b4c      	ldr	r3, [pc, #304]	; (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e4:	e231      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ea:	e22e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80087ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80087f4:	430b      	orrs	r3, r1
 80087f6:	f040 808f 	bne.w	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087fa:	4b42      	ldr	r3, [pc, #264]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008802:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800880a:	d06b      	beq.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008812:	d874      	bhi.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800881a:	d056      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008822:	d86c      	bhi.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800882a:	d03b      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008832:	d864      	bhi.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800883a:	d021      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008842:	d85c      	bhi.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d004      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008850:	d004      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008852:	e054      	b.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fe fa62 	bl	8006d1c <HAL_RCC_GetPCLK1Freq>
 8008858:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800885a:	e1f6      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800885c:	4b29      	ldr	r3, [pc, #164]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008868:	d107      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886a:	f107 0318 	add.w	r3, r7, #24
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fa0a 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008878:	e1e7      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887e:	e1e4      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008880:	4b20      	ldr	r3, [pc, #128]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800888c:	d107      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888e:	f107 030c 	add.w	r3, r7, #12
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fb4c 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889c:	e1d5      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a2:	e1d2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088a4:	4b17      	ldr	r3, [pc, #92]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d109      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	4a13      	ldr	r2, [pc, #76]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80088bc:	fa22 f303 	lsr.w	r3, r2, r3
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c2:	e1c2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c8:	e1bf      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088ca:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d6:	d102      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80088d8:	4b0c      	ldr	r3, [pc, #48]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088dc:	e1b5      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e2:	e1b2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088e4:	4b07      	ldr	r3, [pc, #28]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f0:	d102      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80088f2:	4b07      	ldr	r3, [pc, #28]	; (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f6:	e1a8      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088fc:	e1a5      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008902:	e1a2      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008904:	58024400 	.word	0x58024400
 8008908:	03d09000 	.word	0x03d09000
 800890c:	003d0900 	.word	0x003d0900
 8008910:	007a1200 	.word	0x007a1200
 8008914:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008920:	430b      	orrs	r3, r1
 8008922:	d173      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008924:	4b9c      	ldr	r3, [pc, #624]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800892c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008934:	d02f      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893c:	d863      	bhi.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894a:	d012      	beq.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800894c:	e05b      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800894e:	4b92      	ldr	r3, [pc, #584]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800895a:	d107      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895c:	f107 0318 	add.w	r3, r7, #24
 8008960:	4618      	mov	r0, r3
 8008962:	f000 f991 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896a:	e16e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008970:	e16b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008972:	4b89      	ldr	r3, [pc, #548]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800897e:	d107      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008980:	f107 030c 	add.w	r3, r7, #12
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fad3 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898e:	e15c      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008994:	e159      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008996:	4b80      	ldr	r3, [pc, #512]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800899e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a0:	4b7d      	ldr	r3, [pc, #500]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d10c      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b2:	4b79      	ldr	r3, [pc, #484]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	08db      	lsrs	r3, r3, #3
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	4a77      	ldr	r2, [pc, #476]	; (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80089be:	fa22 f303 	lsr.w	r3, r2, r3
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c4:	e01e      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089c6:	4b74      	ldr	r3, [pc, #464]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d2:	d106      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089da:	d102      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089dc:	4b70      	ldr	r3, [pc, #448]	; (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e0:	e010      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e2:	4b6d      	ldr	r3, [pc, #436]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ee:	d106      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80089f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f6:	d102      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089f8:	4b6a      	ldr	r3, [pc, #424]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fc:	e002      	b.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008a02:	e122      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a04:	e121      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a0a:	e11e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a10:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008a14:	430b      	orrs	r3, r1
 8008a16:	d133      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a18:	4b5f      	ldr	r3, [pc, #380]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2e:	d012      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008a30:	e023      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a32:	4b59      	ldr	r3, [pc, #356]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a3e:	d107      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fbc7 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	e0fc      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a54:	e0f9      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a56:	4b50      	ldr	r3, [pc, #320]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a62:	d107      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a64:	f107 0318 	add.w	r3, r7, #24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f90d 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a72:	e0ea      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	e0e7      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a7e:	e0e4      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a84:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	f040 808d 	bne.w	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a92:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a96:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a9e:	d06b      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aa6:	d874      	bhi.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aae:	d056      	beq.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab6:	d86c      	bhi.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008abe:	d03b      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ac6:	d864      	bhi.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ace:	d021      	beq.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ad6:	d85c      	bhi.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d004      	beq.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ae4:	d004      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008ae6:	e054      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ae8:	f000 f8b8 	bl	8008c5c <HAL_RCCEx_GetD3PCLK1Freq>
 8008aec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008aee:	e0ac      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008af0:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008afc:	d107      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afe:	f107 0318 	add.w	r3, r7, #24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f8c0 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b0c:	e09d      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b12:	e09a      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b14:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b20:	d107      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b22:	f107 030c 	add.w	r3, r7, #12
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fa02 	bl	8008f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b30:	e08b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b36:	e088      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b38:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d109      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b44:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	08db      	lsrs	r3, r3, #3
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	4a13      	ldr	r2, [pc, #76]	; (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008b50:	fa22 f303 	lsr.w	r3, r2, r3
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b56:	e078      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b5c:	e075      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b6a:	d102      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b70:	e06b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b76:	e068      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b78:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b84:	d102      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008b86:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8a:	e05e      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b90:	e05b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b96:	e058      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	d148      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008bb4:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc4:	d02a      	beq.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bcc:	d838      	bhi.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bda:	d00d      	beq.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008bdc:	e030      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bea:	d102      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf0:	e02b      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf6:	e028      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bf8:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c04:	d107      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fae4 	bl	80091d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c14:	e019      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1a:	e016      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c28:	d107      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c2a:	f107 0318 	add.w	r3, r7, #24
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f82a 	bl	8008c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c38:	e007      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	e001      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3740      	adds	r7, #64	; 0x40
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	58024400 	.word	0x58024400
 8008c58:	007a1200 	.word	0x007a1200

08008c5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c60:	f7fe f82c 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8008c64:	4602      	mov	r2, r0
 8008c66:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	4904      	ldr	r1, [pc, #16]	; (8008c84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c72:	5ccb      	ldrb	r3, [r1, r3]
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	58024400 	.word	0x58024400
 8008c84:	0800bb80 	.word	0x0800bb80

08008c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b089      	sub	sp, #36	; 0x24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c90:	4ba1      	ldr	r3, [pc, #644]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c9a:	4b9f      	ldr	r3, [pc, #636]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	0b1b      	lsrs	r3, r3, #12
 8008ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ca4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ca6:	4b9c      	ldr	r3, [pc, #624]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cb2:	4b99      	ldr	r3, [pc, #612]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	08db      	lsrs	r3, r3, #3
 8008cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8111 	beq.w	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	f000 8083 	beq.w	8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	f200 80a1 	bhi.w	8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d056      	beq.n	8008da0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cf2:	e099      	b.n	8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf4:	4b88      	ldr	r3, [pc, #544]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d02d      	beq.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d00:	4b85      	ldr	r3, [pc, #532]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	4a84      	ldr	r2, [pc, #528]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b7b      	ldr	r3, [pc, #492]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d5a:	e087      	b.n	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b6a      	ldr	r3, [pc, #424]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9e:	e065      	b.n	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	4b59      	ldr	r3, [pc, #356]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de2:	e043      	b.n	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df6:	4b48      	ldr	r3, [pc, #288]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e26:	e021      	b.n	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3a:	4b37      	ldr	r3, [pc, #220]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e6c:	4b2a      	ldr	r3, [pc, #168]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	0a5b      	lsrs	r3, r3, #9
 8008e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e92:	ee17 2a90 	vmov	r2, s15
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e9a:	4b1f      	ldr	r3, [pc, #124]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	0c1b      	lsrs	r3, r3, #16
 8008ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec0:	ee17 2a90 	vmov	r2, s15
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ec8:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	0e1b      	lsrs	r3, r3, #24
 8008ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eee:	ee17 2a90 	vmov	r2, s15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ef6:	e008      	b.n	8008f0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	609a      	str	r2, [r3, #8]
}
 8008f0a:	bf00      	nop
 8008f0c:	3724      	adds	r7, #36	; 0x24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	58024400 	.word	0x58024400
 8008f1c:	03d09000 	.word	0x03d09000
 8008f20:	46000000 	.word	0x46000000
 8008f24:	4c742400 	.word	0x4c742400
 8008f28:	4a742400 	.word	0x4a742400
 8008f2c:	4af42400 	.word	0x4af42400

08008f30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b089      	sub	sp, #36	; 0x24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f38:	4ba1      	ldr	r3, [pc, #644]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f42:	4b9f      	ldr	r3, [pc, #636]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	0d1b      	lsrs	r3, r3, #20
 8008f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f4e:	4b9c      	ldr	r3, [pc, #624]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f5a:	4b99      	ldr	r3, [pc, #612]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	08db      	lsrs	r3, r3, #3
 8008f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8111 	beq.w	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	f000 8083 	beq.w	800908c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	f200 80a1 	bhi.w	80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d056      	beq.n	8009048 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f9a:	e099      	b.n	80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f9c:	4b88      	ldr	r3, [pc, #544]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d02d      	beq.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa8:	4b85      	ldr	r3, [pc, #532]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a84      	ldr	r2, [pc, #528]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	4b7b      	ldr	r3, [pc, #492]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009002:	e087      	b.n	8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009016:	4b6a      	ldr	r3, [pc, #424]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009026:	ed97 6a03 	vldr	s12, [r7, #12]
 800902a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800902e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009046:	e065      	b.n	8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905a:	4b59      	ldr	r3, [pc, #356]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906a:	ed97 6a03 	vldr	s12, [r7, #12]
 800906e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800908a:	e043      	b.n	8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009096:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800909a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800909e:	4b48      	ldr	r3, [pc, #288]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ce:	e021      	b.n	8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e2:	4b37      	ldr	r3, [pc, #220]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009112:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009114:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	0a5b      	lsrs	r3, r3, #9
 800911a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800912a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800912e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913a:	ee17 2a90 	vmov	r2, s15
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914c:	ee07 3a90 	vmov	s15, r3
 8009150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800915c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009168:	ee17 2a90 	vmov	r2, s15
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009170:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	0e1b      	lsrs	r3, r3, #24
 8009176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800918a:	edd7 6a07 	vldr	s13, [r7, #28]
 800918e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009196:	ee17 2a90 	vmov	r2, s15
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800919e:	e008      	b.n	80091b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	609a      	str	r2, [r3, #8]
}
 80091b2:	bf00      	nop
 80091b4:	3724      	adds	r7, #36	; 0x24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	46000000 	.word	0x46000000
 80091cc:	4c742400 	.word	0x4c742400
 80091d0:	4a742400 	.word	0x4a742400
 80091d4:	4af42400 	.word	0x4af42400

080091d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091d8:	b480      	push	{r7}
 80091da:	b089      	sub	sp, #36	; 0x24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091e0:	4ba0      	ldr	r3, [pc, #640]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80091ea:	4b9e      	ldr	r3, [pc, #632]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ee:	091b      	lsrs	r3, r3, #4
 80091f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091f6:	4b9b      	ldr	r3, [pc, #620]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009200:	4b98      	ldr	r3, [pc, #608]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	08db      	lsrs	r3, r3, #3
 8009206:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	fb02 f303 	mul.w	r3, r2, r3
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8111 	beq.w	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2b02      	cmp	r3, #2
 8009228:	f000 8083 	beq.w	8009332 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b02      	cmp	r3, #2
 8009230:	f200 80a1 	bhi.w	8009376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d056      	beq.n	80092ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009240:	e099      	b.n	8009376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009242:	4b88      	ldr	r3, [pc, #544]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d02d      	beq.n	80092aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800924e:	4b85      	ldr	r3, [pc, #532]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	08db      	lsrs	r3, r3, #3
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	4a83      	ldr	r2, [pc, #524]	; (8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800925a:	fa22 f303 	lsr.w	r3, r2, r3
 800925e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009278:	4b7a      	ldr	r3, [pc, #488]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009288:	ed97 6a03 	vldr	s12, [r7, #12]
 800928c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80092a8:	e087      	b.n	80093ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092bc:	4b69      	ldr	r3, [pc, #420]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092ec:	e065      	b.n	80093ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009474 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009300:	4b58      	ldr	r3, [pc, #352]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009310:	ed97 6a03 	vldr	s12, [r7, #12]
 8009314:	eddf 5a55 	vldr	s11, [pc, #340]	; 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009330:	e043      	b.n	80093ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009478 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009344:	4b47      	ldr	r3, [pc, #284]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009354:	ed97 6a03 	vldr	s12, [r7, #12]
 8009358:	eddf 5a44 	vldr	s11, [pc, #272]	; 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800935c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009374:	e021      	b.n	80093ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009380:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009388:	4b36      	ldr	r3, [pc, #216]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009398:	ed97 6a03 	vldr	s12, [r7, #12]
 800939c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80093ba:	4b2a      	ldr	r3, [pc, #168]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	0a5b      	lsrs	r3, r3, #9
 80093c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e0:	ee17 2a90 	vmov	r2, s15
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80093e8:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009402:	edd7 6a07 	vldr	s13, [r7, #28]
 8009406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800940a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800940e:	ee17 2a90 	vmov	r2, s15
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	0e1b      	lsrs	r3, r3, #24
 800941c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800942c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009430:	edd7 6a07 	vldr	s13, [r7, #28]
 8009434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943c:	ee17 2a90 	vmov	r2, s15
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009444:	e008      	b.n	8009458 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	609a      	str	r2, [r3, #8]
}
 8009458:	bf00      	nop
 800945a:	3724      	adds	r7, #36	; 0x24
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	58024400 	.word	0x58024400
 8009468:	03d09000 	.word	0x03d09000
 800946c:	46000000 	.word	0x46000000
 8009470:	4c742400 	.word	0x4c742400
 8009474:	4a742400 	.word	0x4a742400
 8009478:	4af42400 	.word	0x4af42400

0800947c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800948a:	4b53      	ldr	r3, [pc, #332]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	2b03      	cmp	r3, #3
 8009494:	d101      	bne.n	800949a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e099      	b.n	80095ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800949a:	4b4f      	ldr	r3, [pc, #316]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a4e      	ldr	r2, [pc, #312]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80094a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094a6:	f7f8 fa01 	bl	80018ac <HAL_GetTick>
 80094aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094ac:	e008      	b.n	80094c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094ae:	f7f8 f9fd 	bl	80018ac <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d901      	bls.n	80094c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e086      	b.n	80095ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094c0:	4b45      	ldr	r3, [pc, #276]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f0      	bne.n	80094ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80094cc:	4b42      	ldr	r3, [pc, #264]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	031b      	lsls	r3, r3, #12
 80094da:	493f      	ldr	r1, [pc, #252]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	628b      	str	r3, [r1, #40]	; 0x28
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	025b      	lsls	r3, r3, #9
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	041b      	lsls	r3, r3, #16
 80094fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	3b01      	subs	r3, #1
 800950a:	061b      	lsls	r3, r3, #24
 800950c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009510:	4931      	ldr	r1, [pc, #196]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009512:	4313      	orrs	r3, r2
 8009514:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009516:	4b30      	ldr	r3, [pc, #192]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	492d      	ldr	r1, [pc, #180]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009524:	4313      	orrs	r3, r2
 8009526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009528:	4b2b      	ldr	r3, [pc, #172]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	f023 0220 	bic.w	r2, r3, #32
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	4928      	ldr	r1, [pc, #160]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009536:	4313      	orrs	r3, r2
 8009538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800953a:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a26      	ldr	r2, [pc, #152]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009540:	f023 0310 	bic.w	r3, r3, #16
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009546:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800954a:	4b24      	ldr	r3, [pc, #144]	; (80095dc <RCCEx_PLL2_Config+0x160>)
 800954c:	4013      	ands	r3, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	69d2      	ldr	r2, [r2, #28]
 8009552:	00d2      	lsls	r2, r2, #3
 8009554:	4920      	ldr	r1, [pc, #128]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009556:	4313      	orrs	r3, r2
 8009558:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800955a:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009560:	f043 0310 	orr.w	r3, r3, #16
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800956c:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a19      	ldr	r2, [pc, #100]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009578:	e00f      	b.n	800959a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d106      	bne.n	800958e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009580:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a14      	ldr	r2, [pc, #80]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800958c:	e005      	b.n	800959a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	4a11      	ldr	r2, [pc, #68]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 8009594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800959a:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a0e      	ldr	r2, [pc, #56]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80095a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095a6:	f7f8 f981 	bl	80018ac <HAL_GetTick>
 80095aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095ac:	e008      	b.n	80095c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095ae:	f7f8 f97d 	bl	80018ac <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e006      	b.n	80095ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f0      	beq.n	80095ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	58024400 	.word	0x58024400
 80095dc:	ffff0007 	.word	0xffff0007

080095e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ee:	4b53      	ldr	r3, [pc, #332]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d101      	bne.n	80095fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e099      	b.n	8009732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095fe:	4b4f      	ldr	r3, [pc, #316]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a4e      	ldr	r2, [pc, #312]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800960a:	f7f8 f94f 	bl	80018ac <HAL_GetTick>
 800960e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009610:	e008      	b.n	8009624 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009612:	f7f8 f94b 	bl	80018ac <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e086      	b.n	8009732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009624:	4b45      	ldr	r3, [pc, #276]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009630:	4b42      	ldr	r3, [pc, #264]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	051b      	lsls	r3, r3, #20
 800963e:	493f      	ldr	r1, [pc, #252]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009640:	4313      	orrs	r3, r2
 8009642:	628b      	str	r3, [r1, #40]	; 0x28
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	3b01      	subs	r3, #1
 800964a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	025b      	lsls	r3, r3, #9
 8009656:	b29b      	uxth	r3, r3
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	3b01      	subs	r3, #1
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	3b01      	subs	r3, #1
 800966e:	061b      	lsls	r3, r3, #24
 8009670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009674:	4931      	ldr	r1, [pc, #196]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800967a:	4b30      	ldr	r3, [pc, #192]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	492d      	ldr	r1, [pc, #180]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	4928      	ldr	r1, [pc, #160]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 800969a:	4313      	orrs	r3, r2
 800969c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800969e:	4b27      	ldr	r3, [pc, #156]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	4a26      	ldr	r2, [pc, #152]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096aa:	4b24      	ldr	r3, [pc, #144]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ae:	4b24      	ldr	r3, [pc, #144]	; (8009740 <RCCEx_PLL3_Config+0x160>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	69d2      	ldr	r2, [r2, #28]
 80096b6:	00d2      	lsls	r2, r2, #3
 80096b8:	4920      	ldr	r1, [pc, #128]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80096be:	4b1f      	ldr	r3, [pc, #124]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a19      	ldr	r2, [pc, #100]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096dc:	e00f      	b.n	80096fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d106      	bne.n	80096f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096e4:	4b15      	ldr	r3, [pc, #84]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a14      	ldr	r2, [pc, #80]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f0:	e005      	b.n	80096fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096f2:	4b12      	ldr	r3, [pc, #72]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a11      	ldr	r2, [pc, #68]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 80096f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a0e      	ldr	r2, [pc, #56]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970a:	f7f8 f8cf 	bl	80018ac <HAL_GetTick>
 800970e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009710:	e008      	b.n	8009724 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009712:	f7f8 f8cb 	bl	80018ac <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e006      	b.n	8009732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <RCCEx_PLL3_Config+0x15c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f0      	beq.n	8009712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	ffff0007 	.word	0xffff0007

08009744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e049      	b.n	80097ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7f7 ff76 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f000 f99e 	bl	8009ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e04c      	b.n	80098a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a26      	ldr	r2, [pc, #152]	; (80098b4 <HAL_TIM_Base_Start+0xc0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d022      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d01d      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a22      	ldr	r2, [pc, #136]	; (80098b8 <HAL_TIM_Base_Start+0xc4>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d018      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a21      	ldr	r2, [pc, #132]	; (80098bc <HAL_TIM_Base_Start+0xc8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a1f      	ldr	r2, [pc, #124]	; (80098c0 <HAL_TIM_Base_Start+0xcc>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00e      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1e      	ldr	r2, [pc, #120]	; (80098c4 <HAL_TIM_Base_Start+0xd0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d009      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <HAL_TIM_Base_Start+0xd4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d004      	beq.n	8009864 <HAL_TIM_Base_Start+0x70>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <HAL_TIM_Base_Start+0xd8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d115      	bne.n	8009890 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	4b19      	ldr	r3, [pc, #100]	; (80098d0 <HAL_TIM_Base_Start+0xdc>)
 800986c:	4013      	ands	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b06      	cmp	r3, #6
 8009874:	d015      	beq.n	80098a2 <HAL_TIM_Base_Start+0xae>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800987c:	d011      	beq.n	80098a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988e:	e008      	b.n	80098a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e000      	b.n	80098a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40010400 	.word	0x40010400
 80098c8:	40001800 	.word	0x40001800
 80098cc:	40014000 	.word	0x40014000
 80098d0:	00010007 	.word	0x00010007

080098d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_ConfigClockSource+0x1c>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e0dc      	b.n	8009aaa <HAL_TIM_ConfigClockSource+0x1d6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4b6a      	ldr	r3, [pc, #424]	; (8009ab4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800990c:	4013      	ands	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a64      	ldr	r2, [pc, #400]	; (8009ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	f000 80a9 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800992c:	4a62      	ldr	r2, [pc, #392]	; (8009ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	f200 80ae 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009934:	4a61      	ldr	r2, [pc, #388]	; (8009abc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	f000 80a1 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800993c:	4a5f      	ldr	r2, [pc, #380]	; (8009abc <HAL_TIM_ConfigClockSource+0x1e8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f200 80a6 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009944:	4a5e      	ldr	r2, [pc, #376]	; (8009ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	f000 8099 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800994c:	4a5c      	ldr	r2, [pc, #368]	; (8009ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f200 809e 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009954:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009958:	f000 8091 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800995c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009960:	f200 8096 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009968:	f000 8089 	beq.w	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 800996c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009970:	f200 808e 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009978:	d03e      	beq.n	80099f8 <HAL_TIM_ConfigClockSource+0x124>
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800997e:	f200 8087 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	f000 8086 	beq.w	8009a96 <HAL_TIM_ConfigClockSource+0x1c2>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	d87f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009990:	2b70      	cmp	r3, #112	; 0x70
 8009992:	d01a      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0xf6>
 8009994:	2b70      	cmp	r3, #112	; 0x70
 8009996:	d87b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	d050      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0x16a>
 800999c:	2b60      	cmp	r3, #96	; 0x60
 800999e:	d877      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a0:	2b50      	cmp	r3, #80	; 0x50
 80099a2:	d03c      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x14a>
 80099a4:	2b50      	cmp	r3, #80	; 0x50
 80099a6:	d873      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d058      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x18a>
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d86f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d064      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099b4:	2b30      	cmp	r3, #48	; 0x30
 80099b6:	d86b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d060      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d867      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d05c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d05a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80099c8:	e062      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6899      	ldr	r1, [r3, #8]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f000 f98b 	bl	8009cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80099ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
      break;
 80099f6:	e04f      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6899      	ldr	r1, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f000 f974 	bl	8009cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a1a:	609a      	str	r2, [r3, #8]
      break;
 8009a1c:	e03c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6859      	ldr	r1, [r3, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f000 f8e4 	bl	8009bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2150      	movs	r1, #80	; 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f93e 	bl	8009cb8 <TIM_ITRx_SetConfig>
      break;
 8009a3c:	e02c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 f903 	bl	8009c56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2160      	movs	r1, #96	; 0x60
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f92e 	bl	8009cb8 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e01c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 f8c4 	bl	8009bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2140      	movs	r1, #64	; 0x40
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f91e 	bl	8009cb8 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e00c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f000 f915 	bl	8009cb8 <TIM_ITRx_SetConfig>
      break;
 8009a8e:	e003      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e000      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	ffceff88 	.word	0xffceff88
 8009ab8:	00100040 	.word	0x00100040
 8009abc:	00100030 	.word	0x00100030
 8009ac0:	00100020 	.word	0x00100020

08009ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a40      	ldr	r2, [pc, #256]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d013      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae2:	d00f      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3d      	ldr	r2, [pc, #244]	; (8009bdc <TIM_Base_SetConfig+0x118>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00b      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3c      	ldr	r2, [pc, #240]	; (8009be0 <TIM_Base_SetConfig+0x11c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d007      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3b      	ldr	r2, [pc, #236]	; (8009be4 <TIM_Base_SetConfig+0x120>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_Base_SetConfig+0x40>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a3a      	ldr	r2, [pc, #232]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d108      	bne.n	8009b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a2f      	ldr	r2, [pc, #188]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d01f      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b24:	d01b      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2c      	ldr	r2, [pc, #176]	; (8009bdc <TIM_Base_SetConfig+0x118>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d017      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a2b      	ldr	r2, [pc, #172]	; (8009be0 <TIM_Base_SetConfig+0x11c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d013      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a2a      	ldr	r2, [pc, #168]	; (8009be4 <TIM_Base_SetConfig+0x120>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00f      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a29      	ldr	r2, [pc, #164]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00b      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a28      	ldr	r2, [pc, #160]	; (8009bec <TIM_Base_SetConfig+0x128>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d007      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a27      	ldr	r2, [pc, #156]	; (8009bf0 <TIM_Base_SetConfig+0x12c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d003      	beq.n	8009b5e <TIM_Base_SetConfig+0x9a>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a26      	ldr	r2, [pc, #152]	; (8009bf4 <TIM_Base_SetConfig+0x130>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d108      	bne.n	8009b70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <TIM_Base_SetConfig+0x114>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d00f      	beq.n	8009bbc <TIM_Base_SetConfig+0xf8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <TIM_Base_SetConfig+0x124>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00b      	beq.n	8009bbc <TIM_Base_SetConfig+0xf8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a11      	ldr	r2, [pc, #68]	; (8009bec <TIM_Base_SetConfig+0x128>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d007      	beq.n	8009bbc <TIM_Base_SetConfig+0xf8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a10      	ldr	r2, [pc, #64]	; (8009bf0 <TIM_Base_SetConfig+0x12c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d003      	beq.n	8009bbc <TIM_Base_SetConfig+0xf8>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a0f      	ldr	r2, [pc, #60]	; (8009bf4 <TIM_Base_SetConfig+0x130>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d103      	bne.n	8009bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	615a      	str	r2, [r3, #20]
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40000400 	.word	0x40000400
 8009be0:	40000800 	.word	0x40000800
 8009be4:	40000c00 	.word	0x40000c00
 8009be8:	40010400 	.word	0x40010400
 8009bec:	40014000 	.word	0x40014000
 8009bf0:	40014400 	.word	0x40014400
 8009bf4:	40014800 	.word	0x40014800

08009bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	f023 0201 	bic.w	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f023 030a 	bic.w	r3, r3, #10
 8009c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b087      	sub	sp, #28
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f023 0210 	bic.w	r2, r3, #16
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	031b      	lsls	r3, r3, #12
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	011b      	lsls	r3, r3, #4
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
	...

08009cb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <TIM_ITRx_SetConfig+0x38>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f043 0307 	orr.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	609a      	str	r2, [r3, #8]
}
 8009ce2:	bf00      	nop
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	ffcfff8f 	.word	0xffcfff8f

08009cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	021a      	lsls	r2, r3, #8
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	609a      	str	r2, [r3, #8]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d101      	bne.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e06d      	b.n	8009e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a30      	ldr	r2, [pc, #192]	; (8009e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a2f      	ldr	r2, [pc, #188]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d108      	bne.n	8009d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a20      	ldr	r2, [pc, #128]	; (8009e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d022      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dbe:	d01d      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a1d      	ldr	r2, [pc, #116]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d018      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d013      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a1a      	ldr	r2, [pc, #104]	; (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00e      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d009      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a16      	ldr	r2, [pc, #88]	; (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d004      	beq.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a15      	ldr	r2, [pc, #84]	; (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d10c      	bne.n	8009e16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40000400 	.word	0x40000400
 8009e40:	40000800 	.word	0x40000800
 8009e44:	40000c00 	.word	0x40000c00
 8009e48:	40001800 	.word	0x40001800
 8009e4c:	40014000 	.word	0x40014000

08009e50 <arm_rfft_32_fast_init_f32>:
 8009e50:	b180      	cbz	r0, 8009e74 <arm_rfft_32_fast_init_f32+0x24>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2220      	movs	r2, #32
 8009e56:	2010      	movs	r0, #16
 8009e58:	4908      	ldr	r1, [pc, #32]	; (8009e7c <arm_rfft_32_fast_init_f32+0x2c>)
 8009e5a:	b430      	push	{r4, r5}
 8009e5c:	2514      	movs	r5, #20
 8009e5e:	4c08      	ldr	r4, [pc, #32]	; (8009e80 <arm_rfft_32_fast_init_f32+0x30>)
 8009e60:	821a      	strh	r2, [r3, #16]
 8009e62:	4a08      	ldr	r2, [pc, #32]	; (8009e84 <arm_rfft_32_fast_init_f32+0x34>)
 8009e64:	8018      	strh	r0, [r3, #0]
 8009e66:	2000      	movs	r0, #0
 8009e68:	819d      	strh	r5, [r3, #12]
 8009e6a:	615a      	str	r2, [r3, #20]
 8009e6c:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009e70:	bc30      	pop	{r4, r5}
 8009e72:	4770      	bx	lr
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	08011480 	.word	0x08011480
 8009e80:	0800cb48 	.word	0x0800cb48
 8009e84:	0801a200 	.word	0x0801a200

08009e88 <arm_rfft_64_fast_init_f32>:
 8009e88:	b180      	cbz	r0, 8009eac <arm_rfft_64_fast_init_f32+0x24>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2240      	movs	r2, #64	; 0x40
 8009e8e:	2020      	movs	r0, #32
 8009e90:	4908      	ldr	r1, [pc, #32]	; (8009eb4 <arm_rfft_64_fast_init_f32+0x2c>)
 8009e92:	b430      	push	{r4, r5}
 8009e94:	2530      	movs	r5, #48	; 0x30
 8009e96:	4c08      	ldr	r4, [pc, #32]	; (8009eb8 <arm_rfft_64_fast_init_f32+0x30>)
 8009e98:	821a      	strh	r2, [r3, #16]
 8009e9a:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <arm_rfft_64_fast_init_f32+0x34>)
 8009e9c:	8018      	strh	r0, [r3, #0]
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	819d      	strh	r5, [r3, #12]
 8009ea2:	615a      	str	r2, [r3, #20]
 8009ea4:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009ea8:	bc30      	pop	{r4, r5}
 8009eaa:	4770      	bx	lr
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	08015d00 	.word	0x08015d00
 8009eb8:	0800eca0 	.word	0x0800eca0
 8009ebc:	0801ea80 	.word	0x0801ea80

08009ec0 <arm_rfft_256_fast_init_f32>:
 8009ec0:	b188      	cbz	r0, 8009ee6 <arm_rfft_256_fast_init_f32+0x26>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ec8:	2080      	movs	r0, #128	; 0x80
 8009eca:	4908      	ldr	r1, [pc, #32]	; (8009eec <arm_rfft_256_fast_init_f32+0x2c>)
 8009ecc:	b430      	push	{r4, r5}
 8009ece:	25d0      	movs	r5, #208	; 0xd0
 8009ed0:	4c07      	ldr	r4, [pc, #28]	; (8009ef0 <arm_rfft_256_fast_init_f32+0x30>)
 8009ed2:	821a      	strh	r2, [r3, #16]
 8009ed4:	4a07      	ldr	r2, [pc, #28]	; (8009ef4 <arm_rfft_256_fast_init_f32+0x34>)
 8009ed6:	8018      	strh	r0, [r3, #0]
 8009ed8:	2000      	movs	r0, #0
 8009eda:	819d      	strh	r5, [r3, #12]
 8009edc:	615a      	str	r2, [r3, #20]
 8009ede:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009ee2:	bc30      	pop	{r4, r5}
 8009ee4:	4770      	bx	lr
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	4770      	bx	lr
 8009eec:	08011080 	.word	0x08011080
 8009ef0:	0800c9a8 	.word	0x0800c9a8
 8009ef4:	08019e00 	.word	0x08019e00

08009ef8 <arm_rfft_512_fast_init_f32>:
 8009ef8:	b198      	cbz	r0, 8009f22 <arm_rfft_512_fast_init_f32+0x2a>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009f04:	4908      	ldr	r1, [pc, #32]	; (8009f28 <arm_rfft_512_fast_init_f32+0x30>)
 8009f06:	b430      	push	{r4, r5}
 8009f08:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8009f0c:	4c07      	ldr	r4, [pc, #28]	; (8009f2c <arm_rfft_512_fast_init_f32+0x34>)
 8009f0e:	821a      	strh	r2, [r3, #16]
 8009f10:	4a07      	ldr	r2, [pc, #28]	; (8009f30 <arm_rfft_512_fast_init_f32+0x38>)
 8009f12:	8018      	strh	r0, [r3, #0]
 8009f14:	2000      	movs	r0, #0
 8009f16:	819d      	strh	r5, [r3, #12]
 8009f18:	615a      	str	r2, [r3, #20]
 8009f1a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009f1e:	bc30      	pop	{r4, r5}
 8009f20:	4770      	bx	lr
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	4770      	bx	lr
 8009f28:	08015500 	.word	0x08015500
 8009f2c:	0800e930 	.word	0x0800e930
 8009f30:	0801e280 	.word	0x0801e280

08009f34 <arm_rfft_1024_fast_init_f32>:
 8009f34:	b198      	cbz	r0, 8009f5e <arm_rfft_1024_fast_init_f32+0x2a>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009f40:	4908      	ldr	r1, [pc, #32]	; (8009f64 <arm_rfft_1024_fast_init_f32+0x30>)
 8009f42:	b430      	push	{r4, r5}
 8009f44:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8009f48:	4c07      	ldr	r4, [pc, #28]	; (8009f68 <arm_rfft_1024_fast_init_f32+0x34>)
 8009f4a:	821a      	strh	r2, [r3, #16]
 8009f4c:	4a07      	ldr	r2, [pc, #28]	; (8009f6c <arm_rfft_1024_fast_init_f32+0x38>)
 8009f4e:	8018      	strh	r0, [r3, #0]
 8009f50:	2000      	movs	r0, #0
 8009f52:	819d      	strh	r5, [r3, #12]
 8009f54:	615a      	str	r2, [r3, #20]
 8009f56:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009f5a:	bc30      	pop	{r4, r5}
 8009f5c:	4770      	bx	lr
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	4770      	bx	lr
 8009f64:	08015e00 	.word	0x08015e00
 8009f68:	0800ed00 	.word	0x0800ed00
 8009f6c:	08016e00 	.word	0x08016e00

08009f70 <arm_rfft_2048_fast_init_f32>:
 8009f70:	b198      	cbz	r0, 8009f9a <arm_rfft_2048_fast_init_f32+0x2a>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009f7c:	4908      	ldr	r1, [pc, #32]	; (8009fa0 <arm_rfft_2048_fast_init_f32+0x30>)
 8009f7e:	b430      	push	{r4, r5}
 8009f80:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8009f84:	4c07      	ldr	r4, [pc, #28]	; (8009fa4 <arm_rfft_2048_fast_init_f32+0x34>)
 8009f86:	821a      	strh	r2, [r3, #16]
 8009f88:	4a07      	ldr	r2, [pc, #28]	; (8009fa8 <arm_rfft_2048_fast_init_f32+0x38>)
 8009f8a:	8018      	strh	r0, [r3, #0]
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	819d      	strh	r5, [r3, #12]
 8009f90:	615a      	str	r2, [r3, #20]
 8009f92:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009f96:	bc30      	pop	{r4, r5}
 8009f98:	4770      	bx	lr
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9e:	4770      	bx	lr
 8009fa0:	0800f080 	.word	0x0800f080
 8009fa4:	0800bb98 	.word	0x0800bb98
 8009fa8:	08017e00 	.word	0x08017e00

08009fac <arm_rfft_4096_fast_init_f32>:
 8009fac:	b198      	cbz	r0, 8009fd6 <arm_rfft_4096_fast_init_f32+0x2a>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009fb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009fb8:	4908      	ldr	r1, [pc, #32]	; (8009fdc <arm_rfft_4096_fast_init_f32+0x30>)
 8009fba:	b430      	push	{r4, r5}
 8009fbc:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8009fc0:	4c07      	ldr	r4, [pc, #28]	; (8009fe0 <arm_rfft_4096_fast_init_f32+0x34>)
 8009fc2:	821a      	strh	r2, [r3, #16]
 8009fc4:	4a07      	ldr	r2, [pc, #28]	; (8009fe4 <arm_rfft_4096_fast_init_f32+0x38>)
 8009fc6:	8018      	strh	r0, [r3, #0]
 8009fc8:	2000      	movs	r0, #0
 8009fca:	819d      	strh	r5, [r3, #12]
 8009fcc:	615a      	str	r2, [r3, #20]
 8009fce:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8009fd2:	bc30      	pop	{r4, r5}
 8009fd4:	4770      	bx	lr
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fda:	4770      	bx	lr
 8009fdc:	08011500 	.word	0x08011500
 8009fe0:	0800cb70 	.word	0x0800cb70
 8009fe4:	0801a280 	.word	0x0801a280

08009fe8 <arm_rfft_fast_init_f32>:
 8009fe8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009fec:	d01f      	beq.n	800a02e <arm_rfft_fast_init_f32+0x46>
 8009fee:	d90b      	bls.n	800a008 <arm_rfft_fast_init_f32+0x20>
 8009ff0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009ff4:	d019      	beq.n	800a02a <arm_rfft_fast_init_f32+0x42>
 8009ff6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009ffa:	d012      	beq.n	800a022 <arm_rfft_fast_init_f32+0x3a>
 8009ffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a000:	d00d      	beq.n	800a01e <arm_rfft_fast_init_f32+0x36>
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	4770      	bx	lr
 800a008:	2940      	cmp	r1, #64	; 0x40
 800a00a:	d00c      	beq.n	800a026 <arm_rfft_fast_init_f32+0x3e>
 800a00c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a010:	d003      	beq.n	800a01a <arm_rfft_fast_init_f32+0x32>
 800a012:	2920      	cmp	r1, #32
 800a014:	d1f5      	bne.n	800a002 <arm_rfft_fast_init_f32+0x1a>
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <arm_rfft_fast_init_f32+0x4c>)
 800a018:	4718      	bx	r3
 800a01a:	4b07      	ldr	r3, [pc, #28]	; (800a038 <arm_rfft_fast_init_f32+0x50>)
 800a01c:	4718      	bx	r3
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <arm_rfft_fast_init_f32+0x54>)
 800a020:	4718      	bx	r3
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <arm_rfft_fast_init_f32+0x58>)
 800a024:	4718      	bx	r3
 800a026:	4b07      	ldr	r3, [pc, #28]	; (800a044 <arm_rfft_fast_init_f32+0x5c>)
 800a028:	e7f6      	b.n	800a018 <arm_rfft_fast_init_f32+0x30>
 800a02a:	4b07      	ldr	r3, [pc, #28]	; (800a048 <arm_rfft_fast_init_f32+0x60>)
 800a02c:	e7f4      	b.n	800a018 <arm_rfft_fast_init_f32+0x30>
 800a02e:	4b07      	ldr	r3, [pc, #28]	; (800a04c <arm_rfft_fast_init_f32+0x64>)
 800a030:	e7f2      	b.n	800a018 <arm_rfft_fast_init_f32+0x30>
 800a032:	bf00      	nop
 800a034:	08009e51 	.word	0x08009e51
 800a038:	08009ec1 	.word	0x08009ec1
 800a03c:	08009f35 	.word	0x08009f35
 800a040:	08009fad 	.word	0x08009fad
 800a044:	08009e89 	.word	0x08009e89
 800a048:	08009f71 	.word	0x08009f71
 800a04c:	08009ef9 	.word	0x08009ef9

0800a050 <stage_rfft_f32>:
 800a050:	b470      	push	{r4, r5, r6}
 800a052:	edd1 7a00 	vldr	s15, [r1]
 800a056:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a05a:	ed91 7a01 	vldr	s14, [r1, #4]
 800a05e:	f101 0510 	add.w	r5, r1, #16
 800a062:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a066:	8806      	ldrh	r6, [r0, #0]
 800a068:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a06c:	6943      	ldr	r3, [r0, #20]
 800a06e:	1e70      	subs	r0, r6, #1
 800a070:	eeb0 4a46 	vmov.f32	s8, s12
 800a074:	f102 0410 	add.w	r4, r2, #16
 800a078:	3310      	adds	r3, #16
 800a07a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a07e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a086:	3908      	subs	r1, #8
 800a088:	ee26 7a86 	vmul.f32	s14, s13, s12
 800a08c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a090:	ed82 7a00 	vstr	s14, [r2]
 800a094:	edc2 7a01 	vstr	s15, [r2, #4]
 800a098:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a09c:	3801      	subs	r0, #1
 800a09e:	ed91 7a02 	vldr	s14, [r1, #8]
 800a0a2:	f105 0508 	add.w	r5, r5, #8
 800a0a6:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a0aa:	f1a1 0108 	sub.w	r1, r1, #8
 800a0ae:	ee77 5a46 	vsub.f32	s11, s14, s12
 800a0b2:	edd1 4a05 	vldr	s9, [r1, #20]
 800a0b6:	ed55 7a03 	vldr	s15, [r5, #-12]
 800a0ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0be:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a0c2:	f104 0408 	add.w	r4, r4, #8
 800a0c6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a0ca:	f103 0308 	add.w	r3, r3, #8
 800a0ce:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a0d2:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a0d6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a0da:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a0de:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a0e2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a0e6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a0ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a0f6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a0fa:	ed04 7a04 	vstr	s14, [r4, #-16]
 800a0fe:	ed44 7a03 	vstr	s15, [r4, #-12]
 800a102:	d1c9      	bne.n	800a098 <stage_rfft_f32+0x48>
 800a104:	bc70      	pop	{r4, r5, r6}
 800a106:	4770      	bx	lr

0800a108 <merge_rfft_f32>:
 800a108:	b410      	push	{r4}
 800a10a:	edd1 7a00 	vldr	s15, [r1]
 800a10e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a112:	edd1 6a01 	vldr	s13, [r1, #4]
 800a116:	8804      	ldrh	r4, [r0, #0]
 800a118:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a11c:	6940      	ldr	r0, [r0, #20]
 800a11e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a122:	3c01      	subs	r4, #1
 800a124:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a128:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a12c:	ed82 7a00 	vstr	s14, [r2]
 800a130:	edc2 7a01 	vstr	s15, [r2, #4]
 800a134:	b3dc      	cbz	r4, 800a1ae <merge_rfft_f32+0xa6>
 800a136:	00e3      	lsls	r3, r4, #3
 800a138:	3010      	adds	r0, #16
 800a13a:	3210      	adds	r2, #16
 800a13c:	3b08      	subs	r3, #8
 800a13e:	440b      	add	r3, r1
 800a140:	3110      	adds	r1, #16
 800a142:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a146:	3c01      	subs	r4, #1
 800a148:	ed93 7a02 	vldr	s14, [r3, #8]
 800a14c:	f101 0108 	add.w	r1, r1, #8
 800a150:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a154:	f1a3 0308 	sub.w	r3, r3, #8
 800a158:	ee76 5a47 	vsub.f32	s11, s12, s14
 800a15c:	edd3 4a05 	vldr	s9, [r3, #20]
 800a160:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a164:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a168:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a16c:	f102 0208 	add.w	r2, r2, #8
 800a170:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a174:	f100 0008 	add.w	r0, r0, #8
 800a178:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a17c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a180:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a184:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a188:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a18c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a190:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a194:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a19c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a1a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a1a4:	ed02 7a04 	vstr	s14, [r2, #-16]
 800a1a8:	ed42 7a03 	vstr	s15, [r2, #-12]
 800a1ac:	d1c9      	bne.n	800a142 <merge_rfft_f32+0x3a>
 800a1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <arm_rfft_fast_f32>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	8a05      	ldrh	r5, [r0, #16]
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4617      	mov	r7, r2
 800a1be:	461e      	mov	r6, r3
 800a1c0:	086d      	lsrs	r5, r5, #1
 800a1c2:	8005      	strh	r5, [r0, #0]
 800a1c4:	b14b      	cbz	r3, 800a1da <arm_rfft_fast_f32+0x26>
 800a1c6:	f7ff ff9f 	bl	800a108 <merge_rfft_f32>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d6:	f000 bb35 	b.w	800a844 <arm_cfft_f32>
 800a1da:	4688      	mov	r8, r1
 800a1dc:	461a      	mov	r2, r3
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f000 fb30 	bl	800a844 <arm_cfft_f32>
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	f7ff bf2f 	b.w	800a050 <stage_rfft_f32>
 800a1f2:	bf00      	nop

0800a1f4 <arm_cfft_radix8by2_f32>:
 800a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	ed2d 8b06 	vpush	{d8-d10}
 800a200:	f8b7 c000 	ldrh.w	ip, [r7]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a20a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a20e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a212:	f000 80ac 	beq.w	800a36e <arm_cfft_radix8by2_f32+0x17a>
 800a216:	008c      	lsls	r4, r1, #2
 800a218:	f100 0310 	add.w	r3, r0, #16
 800a21c:	3210      	adds	r2, #16
 800a21e:	f108 0610 	add.w	r6, r8, #16
 800a222:	3410      	adds	r4, #16
 800a224:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a228:	1905      	adds	r5, r0, r4
 800a22a:	4444      	add	r4, r8
 800a22c:	ed16 7a04 	vldr	s14, [r6, #-16]
 800a230:	3310      	adds	r3, #16
 800a232:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800a236:	3510      	adds	r5, #16
 800a238:	ed56 0a03 	vldr	s1, [r6, #-12]
 800a23c:	3210      	adds	r2, #16
 800a23e:	ee74 9a87 	vadd.f32	s19, s9, s14
 800a242:	ed56 7a02 	vldr	s15, [r6, #-8]
 800a246:	ed56 2a01 	vldr	s5, [r6, #-4]
 800a24a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800a24e:	ed54 5a04 	vldr	s11, [r4, #-16]
 800a252:	3610      	adds	r6, #16
 800a254:	ed14 5a03 	vldr	s10, [r4, #-12]
 800a258:	3410      	adds	r4, #16
 800a25a:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800a25e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800a262:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800a266:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800a26a:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800a26e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800a272:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800a276:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a27a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800a27e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a282:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800a286:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a28a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800a28e:	ee77 aa20 	vadd.f32	s21, s14, s1
 800a292:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800a296:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a29a:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a29e:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a2a2:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800a2a6:	ee37 7a60 	vsub.f32	s14, s14, s1
 800a2aa:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800a2ae:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a2b2:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800a2b6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a2ba:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800a2be:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800a2c2:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a2c6:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800a2ca:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a2ce:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800a2d2:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a2d6:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800a2da:	4563      	cmp	r3, ip
 800a2dc:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800a2e0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a2e4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a2e8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a2ec:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a2f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a2f4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a2f8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a2fc:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a300:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a304:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a308:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a30c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a310:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800a314:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800a318:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800a31c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800a320:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800a324:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a328:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a32c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a330:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a334:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a338:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a33c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a340:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a344:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a348:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a34c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a350:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a354:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a358:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800a35c:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800a360:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800a364:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800a368:	f47f af60 	bne.w	800a22c <arm_cfft_radix8by2_f32+0x38>
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	b28c      	uxth	r4, r1
 800a370:	2302      	movs	r3, #2
 800a372:	4621      	mov	r1, r4
 800a374:	f000 fb04 	bl	800a980 <arm_radix8_butterfly_f32>
 800a378:	4621      	mov	r1, r4
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4640      	mov	r0, r8
 800a37e:	2302      	movs	r3, #2
 800a380:	ecbd 8b06 	vpop	{d8-d10}
 800a384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	f000 bafa 	b.w	800a980 <arm_radix8_butterfly_f32>

0800a38c <arm_cfft_radix8by4_f32>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	ed2d 8b04 	vpush	{d8-d9}
 800a394:	8804      	ldrh	r4, [r0, #0]
 800a396:	b08d      	sub	sp, #52	; 0x34
 800a398:	6842      	ldr	r2, [r0, #4]
 800a39a:	460d      	mov	r5, r1
 800a39c:	0864      	lsrs	r4, r4, #1
 800a39e:	edd1 7a00 	vldr	s15, [r1]
 800a3a2:	edd1 5a01 	vldr	s11, [r1, #4]
 800a3a6:	00a3      	lsls	r3, r4, #2
 800a3a8:	18ce      	adds	r6, r1, r3
 800a3aa:	18f7      	adds	r7, r6, r3
 800a3ac:	ed96 7a00 	vldr	s14, [r6]
 800a3b0:	ed96 4a01 	vldr	s8, [r6, #4]
 800a3b4:	ed97 6a00 	vldr	s12, [r7]
 800a3b8:	edd7 4a01 	vldr	s9, [r7, #4]
 800a3bc:	ee77 6a86 	vadd.f32	s13, s15, s12
 800a3c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a3c4:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800a3c8:	ee77 2a26 	vadd.f32	s5, s14, s13
 800a3cc:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a3d0:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a3d4:	ee76 4a44 	vsub.f32	s9, s12, s8
 800a3d8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a3dc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a3e0:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800a3e4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a3e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3ec:	0860      	lsrs	r0, r4, #1
 800a3ee:	f102 0408 	add.w	r4, r2, #8
 800a3f2:	9405      	str	r4, [sp, #20]
 800a3f4:	f102 0410 	add.w	r4, r2, #16
 800a3f8:	9009      	str	r0, [sp, #36]	; 0x24
 800a3fa:	f1a0 0902 	sub.w	r9, r0, #2
 800a3fe:	9403      	str	r4, [sp, #12]
 800a400:	18fc      	adds	r4, r7, r3
 800a402:	f102 0018 	add.w	r0, r2, #24
 800a406:	ed94 5a00 	vldr	s10, [r4]
 800a40a:	ed94 3a01 	vldr	s6, [r4, #4]
 800a40e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800a412:	9004      	str	r0, [sp, #16]
 800a414:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a418:	4620      	mov	r0, r4
 800a41a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800a41e:	9408      	str	r4, [sp, #32]
 800a420:	ee12 ca90 	vmov	ip, s5
 800a424:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800a428:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a42c:	f845 cb08 	str.w	ip, [r5], #8
 800a430:	ee13 ca90 	vmov	ip, s7
 800a434:	ed96 2a01 	vldr	s4, [r6, #4]
 800a438:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a43c:	edd4 2a01 	vldr	s5, [r4, #4]
 800a440:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a444:	ee36 6a02 	vadd.f32	s12, s12, s4
 800a448:	9500      	str	r5, [sp, #0]
 800a44a:	460d      	mov	r5, r1
 800a44c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a450:	ed81 6a01 	vstr	s12, [r1, #4]
 800a454:	4631      	mov	r1, r6
 800a456:	f841 cb08 	str.w	ip, [r1], #8
 800a45a:	ee16 ca90 	vmov	ip, s13
 800a45e:	9106      	str	r1, [sp, #24]
 800a460:	4639      	mov	r1, r7
 800a462:	edc6 4a01 	vstr	s9, [r6, #4]
 800a466:	f841 cb08 	str.w	ip, [r1], #8
 800a46a:	9102      	str	r1, [sp, #8]
 800a46c:	ee17 1a90 	vmov	r1, s15
 800a470:	edc7 5a01 	vstr	s11, [r7, #4]
 800a474:	f840 1b08 	str.w	r1, [r0], #8
 800a478:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800a47c:	9001      	str	r0, [sp, #4]
 800a47e:	ed84 7a01 	vstr	s14, [r4, #4]
 800a482:	9107      	str	r1, [sp, #28]
 800a484:	f000 8135 	beq.w	800a6f2 <arm_cfft_radix8by4_f32+0x366>
 800a488:	3b0c      	subs	r3, #12
 800a48a:	f102 0920 	add.w	r9, r2, #32
 800a48e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a492:	4622      	mov	r2, r4
 800a494:	468b      	mov	fp, r1
 800a496:	f105 0e10 	add.w	lr, r5, #16
 800a49a:	4423      	add	r3, r4
 800a49c:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a4a0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a4a4:	f106 0010 	add.w	r0, r6, #16
 800a4a8:	f1a7 010c 	sub.w	r1, r7, #12
 800a4ac:	f107 0510 	add.w	r5, r7, #16
 800a4b0:	3c0c      	subs	r4, #12
 800a4b2:	3210      	adds	r2, #16
 800a4b4:	ed15 7a02 	vldr	s14, [r5, #-8]
 800a4b8:	f1bb 0b01 	subs.w	fp, fp, #1
 800a4bc:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800a4c0:	f1ac 0c08 	sub.w	ip, ip, #8
 800a4c4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a4c8:	f10e 0e08 	add.w	lr, lr, #8
 800a4cc:	ee77 1a87 	vadd.f32	s3, s15, s14
 800a4d0:	ed52 4a02 	vldr	s9, [r2, #-8]
 800a4d4:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a4d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4dc:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800a4e0:	f10a 0a08 	add.w	sl, sl, #8
 800a4e4:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800a4e8:	ed10 3a01 	vldr	s6, [r0, #-4]
 800a4ec:	ee37 4a25 	vadd.f32	s8, s14, s11
 800a4f0:	ed52 3a01 	vldr	s7, [r2, #-4]
 800a4f4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a4f8:	f100 0008 	add.w	r0, r0, #8
 800a4fc:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a500:	f1a1 0108 	sub.w	r1, r1, #8
 800a504:	ee73 2a27 	vadd.f32	s5, s6, s15
 800a508:	f109 0910 	add.w	r9, r9, #16
 800a50c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a510:	f105 0508 	add.w	r5, r5, #8
 800a514:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800a518:	ee37 5a66 	vsub.f32	s10, s14, s13
 800a51c:	ed50 5a03 	vldr	s11, [r0, #-12]
 800a520:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800a524:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a528:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a52c:	ee74 5a25 	vadd.f32	s11, s8, s11
 800a530:	f1a4 0408 	sub.w	r4, r4, #8
 800a534:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a538:	f108 0818 	add.w	r8, r8, #24
 800a53c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800a540:	f102 0208 	add.w	r2, r2, #8
 800a544:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a548:	f1a3 0308 	sub.w	r3, r3, #8
 800a54c:	ee34 6a63 	vsub.f32	s12, s8, s7
 800a550:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800a554:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800a558:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a55c:	ed94 4a04 	vldr	s8, [r4, #16]
 800a560:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800a564:	ed9c 3a04 	vldr	s6, [ip, #16]
 800a568:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a56c:	edd1 7a04 	vldr	s15, [r1, #16]
 800a570:	ee73 6a04 	vadd.f32	s13, s6, s8
 800a574:	ed93 8a04 	vldr	s16, [r3, #16]
 800a578:	edd4 5a03 	vldr	s11, [r4, #12]
 800a57c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800a580:	ed9c 2a03 	vldr	s4, [ip, #12]
 800a584:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800a588:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800a58c:	ed91 1a03 	vldr	s2, [r1, #12]
 800a590:	ee32 4a25 	vadd.f32	s8, s4, s11
 800a594:	edd3 2a03 	vldr	s5, [r3, #12]
 800a598:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a59c:	ee70 0a88 	vadd.f32	s1, s1, s16
 800a5a0:	ee73 4a41 	vsub.f32	s9, s6, s2
 800a5a4:	ee32 2a65 	vsub.f32	s4, s4, s11
 800a5a8:	edcc 0a04 	vstr	s1, [ip, #16]
 800a5ac:	ee74 0a41 	vsub.f32	s1, s8, s2
 800a5b0:	edd1 6a03 	vldr	s13, [r1, #12]
 800a5b4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800a5b8:	ed93 9a03 	vldr	s18, [r3, #12]
 800a5bc:	ee78 5a82 	vadd.f32	s11, s17, s4
 800a5c0:	ee34 4a26 	vadd.f32	s8, s8, s13
 800a5c4:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800a5c8:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800a5cc:	ee34 4a09 	vadd.f32	s8, s8, s18
 800a5d0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800a5d4:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a5d8:	ed8c 4a03 	vstr	s8, [ip, #12]
 800a5dc:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800a5e0:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800a5e4:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800a5e8:	ee60 2a01 	vmul.f32	s5, s0, s2
 800a5ec:	ee64 6a81 	vmul.f32	s13, s9, s2
 800a5f0:	ee20 8a04 	vmul.f32	s16, s0, s8
 800a5f4:	ee64 4a84 	vmul.f32	s9, s9, s8
 800a5f8:	ee25 0a01 	vmul.f32	s0, s10, s2
 800a5fc:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a600:	ee25 4a84 	vmul.f32	s8, s11, s8
 800a604:	ee65 5a81 	vmul.f32	s11, s11, s2
 800a608:	ee35 5a62 	vsub.f32	s10, s10, s5
 800a60c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800a610:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800a614:	ee38 1a00 	vadd.f32	s2, s16, s0
 800a618:	ed00 5a03 	vstr	s10, [r0, #-12]
 800a61c:	ed00 1a04 	vstr	s2, [r0, #-16]
 800a620:	ed81 4a04 	vstr	s8, [r1, #16]
 800a624:	edc1 5a03 	vstr	s11, [r1, #12]
 800a628:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800a62c:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800a630:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800a634:	ee66 2a25 	vmul.f32	s5, s12, s11
 800a638:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800a63c:	ee21 4a85 	vmul.f32	s8, s3, s10
 800a640:	ee60 7a85 	vmul.f32	s15, s1, s10
 800a644:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800a648:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a64c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800a650:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a654:	ee34 5a22 	vadd.f32	s10, s8, s5
 800a658:	ee36 6a61 	vsub.f32	s12, s12, s3
 800a65c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800a660:	ed05 5a04 	vstr	s10, [r5, #-16]
 800a664:	ed05 6a03 	vstr	s12, [r5, #-12]
 800a668:	edc4 5a04 	vstr	s11, [r4, #16]
 800a66c:	edc4 6a03 	vstr	s13, [r4, #12]
 800a670:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800a674:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800a678:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800a67c:	ee67 5a27 	vmul.f32	s11, s14, s15
 800a680:	ee63 6a27 	vmul.f32	s13, s6, s15
 800a684:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a688:	ee27 7a22 	vmul.f32	s14, s14, s5
 800a68c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800a690:	ee23 3a22 	vmul.f32	s6, s6, s5
 800a694:	ee22 2a22 	vmul.f32	s4, s4, s5
 800a698:	ee36 6a25 	vadd.f32	s12, s12, s11
 800a69c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a6a0:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800a6a4:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a6a8:	ed02 6a04 	vstr	s12, [r2, #-16]
 800a6ac:	ed02 7a03 	vstr	s14, [r2, #-12]
 800a6b0:	ed83 2a04 	vstr	s4, [r3, #16]
 800a6b4:	edc3 7a03 	vstr	s15, [r3, #12]
 800a6b8:	f47f aefc 	bne.w	800a4b4 <arm_cfft_radix8by4_f32+0x128>
 800a6bc:	9907      	ldr	r1, [sp, #28]
 800a6be:	9803      	ldr	r0, [sp, #12]
 800a6c0:	00cb      	lsls	r3, r1, #3
 800a6c2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a6c6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a6ca:	9103      	str	r1, [sp, #12]
 800a6cc:	9900      	ldr	r1, [sp, #0]
 800a6ce:	4419      	add	r1, r3
 800a6d0:	9100      	str	r1, [sp, #0]
 800a6d2:	9905      	ldr	r1, [sp, #20]
 800a6d4:	4419      	add	r1, r3
 800a6d6:	9105      	str	r1, [sp, #20]
 800a6d8:	9906      	ldr	r1, [sp, #24]
 800a6da:	4419      	add	r1, r3
 800a6dc:	9106      	str	r1, [sp, #24]
 800a6de:	9902      	ldr	r1, [sp, #8]
 800a6e0:	4419      	add	r1, r3
 800a6e2:	9102      	str	r1, [sp, #8]
 800a6e4:	9901      	ldr	r1, [sp, #4]
 800a6e6:	4419      	add	r1, r3
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ee:	9101      	str	r1, [sp, #4]
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	9902      	ldr	r1, [sp, #8]
 800a6f6:	ed93 7a00 	vldr	s14, [r3]
 800a6fa:	edd1 7a00 	vldr	s15, [r1]
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a704:	9d01      	ldr	r5, [sp, #4]
 800a706:	edd2 6a00 	vldr	s13, [r2]
 800a70a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a70e:	9b02      	ldr	r3, [sp, #8]
 800a710:	ee76 3a86 	vadd.f32	s7, s13, s12
 800a714:	ed95 3a00 	vldr	s6, [r5]
 800a718:	ed93 5a01 	vldr	s10, [r3, #4]
 800a71c:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	ee73 3a83 	vadd.f32	s7, s7, s6
 800a726:	edd5 2a01 	vldr	s5, [r5, #4]
 800a72a:	ed93 4a01 	vldr	s8, [r3, #4]
 800a72e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a732:	9b00      	ldr	r3, [sp, #0]
 800a734:	ee74 5a05 	vadd.f32	s11, s8, s10
 800a738:	edd2 7a01 	vldr	s15, [r2, #4]
 800a73c:	edc3 3a00 	vstr	s7, [r3]
 800a740:	ee34 4a45 	vsub.f32	s8, s8, s10
 800a744:	edd2 3a01 	vldr	s7, [r2, #4]
 800a748:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a74c:	ed95 2a01 	vldr	s4, [r5, #4]
 800a750:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800a754:	9d05      	ldr	r5, [sp, #20]
 800a756:	ee34 5a66 	vsub.f32	s10, s8, s13
 800a75a:	9b00      	ldr	r3, [sp, #0]
 800a75c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800a760:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a764:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a768:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a76a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a76e:	4621      	mov	r1, r4
 800a770:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a774:	edc3 3a01 	vstr	s7, [r3, #4]
 800a778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77c:	edd5 3a00 	vldr	s7, [r5]
 800a780:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a784:	ed95 7a01 	vldr	s14, [r5, #4]
 800a788:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800a78c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800a790:	2304      	movs	r3, #4
 800a792:	ee64 4a87 	vmul.f32	s9, s9, s14
 800a796:	ee25 7a07 	vmul.f32	s14, s10, s14
 800a79a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800a79e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800a7a2:	ee34 7a07 	vadd.f32	s14, s8, s14
 800a7a6:	ee35 5a64 	vsub.f32	s10, s10, s9
 800a7aa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a7ae:	ed82 7a00 	vstr	s14, [r2]
 800a7b2:	ed82 5a01 	vstr	s10, [r2, #4]
 800a7b6:	9a03      	ldr	r2, [sp, #12]
 800a7b8:	edd2 4a01 	vldr	s9, [r2, #4]
 800a7bc:	ed92 7a00 	vldr	s14, [r2]
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	ee26 5a07 	vmul.f32	s10, s12, s14
 800a7c6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a7ca:	ee25 7a87 	vmul.f32	s14, s11, s14
 800a7ce:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a7d2:	ee37 6a46 	vsub.f32	s12, s14, s12
 800a7d6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a7da:	edc2 5a00 	vstr	s11, [r2]
 800a7de:	ed82 6a01 	vstr	s12, [r2, #4]
 800a7e2:	9a04      	ldr	r2, [sp, #16]
 800a7e4:	9d01      	ldr	r5, [sp, #4]
 800a7e6:	edd2 5a01 	vldr	s11, [r2, #4]
 800a7ea:	ed92 7a00 	vldr	s14, [r2]
 800a7ee:	ee27 6a87 	vmul.f32	s12, s15, s14
 800a7f2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a7f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a7fa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a7fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a802:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a806:	edc5 7a01 	vstr	s15, [r5, #4]
 800a80a:	edc5 6a00 	vstr	s13, [r5]
 800a80e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a810:	686a      	ldr	r2, [r5, #4]
 800a812:	f000 f8b5 	bl	800a980 <arm_radix8_butterfly_f32>
 800a816:	4630      	mov	r0, r6
 800a818:	4621      	mov	r1, r4
 800a81a:	686a      	ldr	r2, [r5, #4]
 800a81c:	2304      	movs	r3, #4
 800a81e:	f000 f8af 	bl	800a980 <arm_radix8_butterfly_f32>
 800a822:	4638      	mov	r0, r7
 800a824:	4621      	mov	r1, r4
 800a826:	686a      	ldr	r2, [r5, #4]
 800a828:	2304      	movs	r3, #4
 800a82a:	f000 f8a9 	bl	800a980 <arm_radix8_butterfly_f32>
 800a82e:	4621      	mov	r1, r4
 800a830:	686a      	ldr	r2, [r5, #4]
 800a832:	2304      	movs	r3, #4
 800a834:	9808      	ldr	r0, [sp, #32]
 800a836:	b00d      	add	sp, #52	; 0x34
 800a838:	ecbd 8b04 	vpop	{d8-d9}
 800a83c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	f000 b89e 	b.w	800a980 <arm_radix8_butterfly_f32>

0800a844 <arm_cfft_f32>:
 800a844:	2a01      	cmp	r2, #1
 800a846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84a:	4606      	mov	r6, r0
 800a84c:	4617      	mov	r7, r2
 800a84e:	460c      	mov	r4, r1
 800a850:	4698      	mov	r8, r3
 800a852:	8805      	ldrh	r5, [r0, #0]
 800a854:	d055      	beq.n	800a902 <arm_cfft_f32+0xbe>
 800a856:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a85a:	d061      	beq.n	800a920 <arm_cfft_f32+0xdc>
 800a85c:	d916      	bls.n	800a88c <arm_cfft_f32+0x48>
 800a85e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a862:	d01a      	beq.n	800a89a <arm_cfft_f32+0x56>
 800a864:	d946      	bls.n	800a8f4 <arm_cfft_f32+0xb0>
 800a866:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a86a:	d059      	beq.n	800a920 <arm_cfft_f32+0xdc>
 800a86c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a870:	d105      	bne.n	800a87e <arm_cfft_f32+0x3a>
 800a872:	2301      	movs	r3, #1
 800a874:	6872      	ldr	r2, [r6, #4]
 800a876:	4629      	mov	r1, r5
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f881 	bl	800a980 <arm_radix8_butterfly_f32>
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	d111      	bne.n	800a8a8 <arm_cfft_f32+0x64>
 800a884:	2f01      	cmp	r7, #1
 800a886:	d016      	beq.n	800a8b6 <arm_cfft_f32+0x72>
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	2d20      	cmp	r5, #32
 800a88e:	d047      	beq.n	800a920 <arm_cfft_f32+0xdc>
 800a890:	d934      	bls.n	800a8fc <arm_cfft_f32+0xb8>
 800a892:	2d40      	cmp	r5, #64	; 0x40
 800a894:	d0ed      	beq.n	800a872 <arm_cfft_f32+0x2e>
 800a896:	2d80      	cmp	r5, #128	; 0x80
 800a898:	d1f1      	bne.n	800a87e <arm_cfft_f32+0x3a>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff fca9 	bl	800a1f4 <arm_cfft_radix8by2_f32>
 800a8a2:	f1b8 0f00 	cmp.w	r8, #0
 800a8a6:	d0ed      	beq.n	800a884 <arm_cfft_f32+0x40>
 800a8a8:	68b2      	ldr	r2, [r6, #8]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	89b1      	ldrh	r1, [r6, #12]
 800a8ae:	f000 f83f 	bl	800a930 <arm_bitreversal_32>
 800a8b2:	2f01      	cmp	r7, #1
 800a8b4:	d1e8      	bne.n	800a888 <arm_cfft_f32+0x44>
 800a8b6:	ee07 5a90 	vmov	s15, r5
 800a8ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	d0de      	beq.n	800a888 <arm_cfft_f32+0x44>
 800a8ca:	f104 0108 	add.w	r1, r4, #8
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a8da:	3108      	adds	r1, #8
 800a8dc:	429d      	cmp	r5, r3
 800a8de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a8e2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a8e6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a8ea:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a8ee:	d1ef      	bne.n	800a8d0 <arm_cfft_f32+0x8c>
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a8f8:	d0bb      	beq.n	800a872 <arm_cfft_f32+0x2e>
 800a8fa:	e7c0      	b.n	800a87e <arm_cfft_f32+0x3a>
 800a8fc:	2d10      	cmp	r5, #16
 800a8fe:	d0cc      	beq.n	800a89a <arm_cfft_f32+0x56>
 800a900:	e7bd      	b.n	800a87e <arm_cfft_f32+0x3a>
 800a902:	b195      	cbz	r5, 800a92a <arm_cfft_f32+0xe6>
 800a904:	f101 030c 	add.w	r3, r1, #12
 800a908:	2200      	movs	r2, #0
 800a90a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a90e:	3201      	adds	r2, #1
 800a910:	3308      	adds	r3, #8
 800a912:	eef1 7a67 	vneg.f32	s15, s15
 800a916:	4295      	cmp	r5, r2
 800a918:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a91c:	d1f5      	bne.n	800a90a <arm_cfft_f32+0xc6>
 800a91e:	e79a      	b.n	800a856 <arm_cfft_f32+0x12>
 800a920:	4621      	mov	r1, r4
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff fd32 	bl	800a38c <arm_cfft_radix8by4_f32>
 800a928:	e7a9      	b.n	800a87e <arm_cfft_f32+0x3a>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0ac      	beq.n	800a888 <arm_cfft_f32+0x44>
 800a92e:	e7bb      	b.n	800a8a8 <arm_cfft_f32+0x64>

0800a930 <arm_bitreversal_32>:
 800a930:	b321      	cbz	r1, 800a97c <arm_bitreversal_32+0x4c>
 800a932:	f102 0c02 	add.w	ip, r2, #2
 800a936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	4690      	mov	r8, r2
 800a93c:	2500      	movs	r5, #0
 800a93e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800a942:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800a946:	3502      	adds	r5, #2
 800a948:	08a4      	lsrs	r4, r4, #2
 800a94a:	089b      	lsrs	r3, r3, #2
 800a94c:	428d      	cmp	r5, r1
 800a94e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800a952:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800a956:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800a95a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a95e:	f107 0704 	add.w	r7, r7, #4
 800a962:	f106 0604 	add.w	r6, r6, #4
 800a966:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800a96a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800a96e:	59c4      	ldr	r4, [r0, r7]
 800a970:	5983      	ldr	r3, [r0, r6]
 800a972:	51c3      	str	r3, [r0, r7]
 800a974:	5184      	str	r4, [r0, r6]
 800a976:	d3e2      	bcc.n	800a93e <arm_bitreversal_32+0xe>
 800a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop

0800a980 <arm_radix8_butterfly_f32>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	ed2d 8b10 	vpush	{d8-d15}
 800a988:	b095      	sub	sp, #84	; 0x54
 800a98a:	468a      	mov	sl, r1
 800a98c:	468b      	mov	fp, r1
 800a98e:	eddf 8abb 	vldr	s17, [pc, #748]	; 800ac7c <arm_radix8_butterfly_f32+0x2fc>
 800a992:	9012      	str	r0, [sp, #72]	; 0x48
 800a994:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a998:	4603      	mov	r3, r0
 800a99a:	3304      	adds	r3, #4
 800a99c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a99e:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800a9a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a9a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a9a8:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800a9ac:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800a9b0:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9b2:	9303      	str	r3, [sp, #12]
 800a9b4:	0153      	lsls	r3, r2, #5
 800a9b6:	0114      	lsls	r4, r2, #4
 800a9b8:	eba9 0002 	sub.w	r0, r9, r2
 800a9bc:	18ce      	adds	r6, r1, r3
 800a9be:	9302      	str	r3, [sp, #8]
 800a9c0:	0097      	lsls	r7, r2, #2
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	eb06 0509 	add.w	r5, r6, r9
 800a9c8:	9004      	str	r0, [sp, #16]
 800a9ca:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800a9ce:	1bd2      	subs	r2, r2, r7
 800a9d0:	eb05 0109 	add.w	r1, r5, r9
 800a9d4:	441f      	add	r7, r3
 800a9d6:	9405      	str	r4, [sp, #20]
 800a9d8:	f109 0004 	add.w	r0, r9, #4
 800a9dc:	9101      	str	r1, [sp, #4]
 800a9de:	1d21      	adds	r1, r4, #4
 800a9e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9e2:	f04f 0e00 	mov.w	lr, #0
 800a9e6:	9c01      	ldr	r4, [sp, #4]
 800a9e8:	4418      	add	r0, r3
 800a9ea:	4419      	add	r1, r3
 800a9ec:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	00fc      	lsls	r4, r7, #3
 800a9f4:	18d7      	adds	r7, r2, r3
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	9406      	str	r4, [sp, #24]
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	9c01      	ldr	r4, [sp, #4]
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800aa04:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	edd6 6a00 	vldr	s13, [r6]
 800aa10:	44de      	add	lr, fp
 800aa12:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800aa16:	ed94 7a00 	vldr	s14, [r4]
 800aa1a:	45f2      	cmp	sl, lr
 800aa1c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800aa20:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800aa24:	edd5 2a00 	vldr	s5, [r5]
 800aa28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa2c:	edd7 3a00 	vldr	s7, [r7]
 800aa30:	ed11 5a01 	vldr	s10, [r1, #-4]
 800aa34:	ee36 3a22 	vadd.f32	s6, s12, s5
 800aa38:	edd2 6a00 	vldr	s13, [r2]
 800aa3c:	ee75 5a07 	vadd.f32	s11, s10, s14
 800aa40:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800aa44:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800aa48:	ee72 4a25 	vadd.f32	s9, s4, s11
 800aa4c:	ee73 3a04 	vadd.f32	s7, s6, s8
 800aa50:	ee35 5a47 	vsub.f32	s10, s10, s14
 800aa54:	ee36 7a62 	vsub.f32	s14, s12, s5
 800aa58:	ee32 2a65 	vsub.f32	s4, s4, s11
 800aa5c:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800aa60:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800aa64:	ee37 6a66 	vsub.f32	s12, s14, s13
 800aa68:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800aa6c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800aa70:	edc6 4a00 	vstr	s9, [r6]
 800aa74:	ee37 7a26 	vadd.f32	s14, s14, s13
 800aa78:	ed97 4a01 	vldr	s8, [r7, #4]
 800aa7c:	ee66 6a28 	vmul.f32	s13, s12, s17
 800aa80:	edd0 5a00 	vldr	s11, [r0]
 800aa84:	ed95 6a01 	vldr	s12, [r5, #4]
 800aa88:	ee27 7a28 	vmul.f32	s14, s14, s17
 800aa8c:	edd2 3a01 	vldr	s7, [r2, #4]
 800aa90:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800aa94:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800aa98:	ed96 1a01 	vldr	s2, [r6, #4]
 800aa9c:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800aaa0:	edd4 0a01 	vldr	s1, [r4, #4]
 800aaa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aaa8:	eddc 6a00 	vldr	s13, [ip]
 800aaac:	ee75 5a86 	vadd.f32	s11, s11, s12
 800aab0:	ed91 6a00 	vldr	s12, [r1]
 800aab4:	ee73 3a84 	vadd.f32	s7, s7, s8
 800aab8:	ee74 1a80 	vadd.f32	s3, s9, s0
 800aabc:	ee36 4a81 	vadd.f32	s8, s13, s2
 800aac0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800aac4:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800aac8:	ee36 1a20 	vadd.f32	s2, s12, s1
 800aacc:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800aad0:	ee36 6a60 	vsub.f32	s12, s12, s1
 800aad4:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800aad8:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800aadc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800aae0:	ee74 3a01 	vadd.f32	s7, s8, s2
 800aae4:	ee34 4a41 	vsub.f32	s8, s8, s2
 800aae8:	ee36 1a21 	vadd.f32	s2, s12, s3
 800aaec:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800aaf0:	ee36 6a61 	vsub.f32	s12, s12, s3
 800aaf4:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800aaf8:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800aafc:	ed8c 0a00 	vstr	s0, [ip]
 800ab00:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800ab04:	449c      	add	ip, r3
 800ab06:	ee75 4a07 	vadd.f32	s9, s10, s14
 800ab0a:	edc6 3a01 	vstr	s7, [r6, #4]
 800ab0e:	ee35 7a47 	vsub.f32	s14, s10, s14
 800ab12:	441e      	add	r6, r3
 800ab14:	ee32 5a25 	vadd.f32	s10, s4, s11
 800ab18:	ee72 5a65 	vsub.f32	s11, s4, s11
 800ab1c:	ee72 3a81 	vadd.f32	s7, s5, s2
 800ab20:	ed01 5a01 	vstr	s10, [r1, #-4]
 800ab24:	ee34 2a43 	vsub.f32	s4, s8, s6
 800ab28:	edc4 5a00 	vstr	s11, [r4]
 800ab2c:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ab30:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800ab34:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab38:	ed81 2a00 	vstr	s4, [r1]
 800ab3c:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800ab40:	4419      	add	r1, r3
 800ab42:	ee33 4a04 	vadd.f32	s8, s6, s8
 800ab46:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800ab4a:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800ab4e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ab52:	ed84 4a01 	vstr	s8, [r4, #4]
 800ab56:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ab5a:	441c      	add	r4, r3
 800ab5c:	edc7 2a00 	vstr	s5, [r7]
 800ab60:	ed85 5a00 	vstr	s10, [r5]
 800ab64:	edc2 7a00 	vstr	s15, [r2]
 800ab68:	edc0 5a00 	vstr	s11, [r0]
 800ab6c:	4418      	add	r0, r3
 800ab6e:	edc7 4a01 	vstr	s9, [r7, #4]
 800ab72:	441f      	add	r7, r3
 800ab74:	ed85 6a01 	vstr	s12, [r5, #4]
 800ab78:	441d      	add	r5, r3
 800ab7a:	ed82 7a01 	vstr	s14, [r2, #4]
 800ab7e:	441a      	add	r2, r3
 800ab80:	f63f af44 	bhi.w	800aa0c <arm_radix8_butterfly_f32+0x8c>
 800ab84:	469c      	mov	ip, r3
 800ab86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab88:	2b07      	cmp	r3, #7
 800ab8a:	f240 81b6 	bls.w	800aefa <arm_radix8_butterfly_f32+0x57a>
 800ab8e:	9a02      	ldr	r2, [sp, #8]
 800ab90:	f109 0608 	add.w	r6, r9, #8
 800ab94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab96:	f108 0408 	add.w	r4, r8, #8
 800ab9a:	3208      	adds	r2, #8
 800ab9c:	9f06      	ldr	r7, [sp, #24]
 800ab9e:	9d04      	ldr	r5, [sp, #16]
 800aba0:	189a      	adds	r2, r3, r2
 800aba2:	3708      	adds	r7, #8
 800aba4:	3508      	adds	r5, #8
 800aba6:	9807      	ldr	r0, [sp, #28]
 800aba8:	920c      	str	r2, [sp, #48]	; 0x30
 800abaa:	199a      	adds	r2, r3, r6
 800abac:	9905      	ldr	r1, [sp, #20]
 800abae:	3008      	adds	r0, #8
 800abb0:	920b      	str	r2, [sp, #44]	; 0x2c
 800abb2:	19da      	adds	r2, r3, r7
 800abb4:	310c      	adds	r1, #12
 800abb6:	920a      	str	r2, [sp, #40]	; 0x28
 800abb8:	195a      	adds	r2, r3, r5
 800abba:	9209      	str	r2, [sp, #36]	; 0x24
 800abbc:	191a      	adds	r2, r3, r4
 800abbe:	9208      	str	r2, [sp, #32]
 800abc0:	181a      	adds	r2, r3, r0
 800abc2:	9207      	str	r2, [sp, #28]
 800abc4:	185a      	adds	r2, r3, r1
 800abc6:	330c      	adds	r3, #12
 800abc8:	9205      	str	r2, [sp, #20]
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	2301      	movs	r3, #1
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	2300      	movs	r3, #0
 800abd2:	930d      	str	r3, [sp, #52]	; 0x34
 800abd4:	4663      	mov	r3, ip
 800abd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800abda:	f8dd c014 	ldr.w	ip, [sp, #20]
 800abde:	440a      	add	r2, r1
 800abe0:	9f06      	ldr	r7, [sp, #24]
 800abe2:	9e07      	ldr	r6, [sp, #28]
 800abe4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800abe8:	920d      	str	r2, [sp, #52]	; 0x34
 800abea:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800abee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abf0:	9d08      	ldr	r5, [sp, #32]
 800abf2:	4442      	add	r2, r8
 800abf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800abf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abf8:	eb02 0108 	add.w	r1, r2, r8
 800abfc:	ed92 ea00 	vldr	s28, [r2]
 800ac00:	eb01 0208 	add.w	r2, r1, r8
 800ac04:	edd1 da00 	vldr	s27, [r1]
 800ac08:	eb02 0108 	add.w	r1, r2, r8
 800ac0c:	ed92 da00 	vldr	s26, [r2]
 800ac10:	eb01 0208 	add.w	r2, r1, r8
 800ac14:	edd1 ca00 	vldr	s25, [r1]
 800ac18:	eb02 0108 	add.w	r1, r2, r8
 800ac1c:	ed92 ca00 	vldr	s24, [r2]
 800ac20:	eb01 0208 	add.w	r2, r1, r8
 800ac24:	edd1 ba00 	vldr	s23, [r1]
 800ac28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac2a:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800ac2e:	ed92 ba00 	vldr	s22, [r2]
 800ac32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac34:	eb0e 0908 	add.w	r9, lr, r8
 800ac38:	910e      	str	r1, [sp, #56]	; 0x38
 800ac3a:	9201      	str	r2, [sp, #4]
 800ac3c:	eb09 0208 	add.w	r2, r9, r8
 800ac40:	ed99 aa01 	vldr	s20, [r9, #4]
 800ac44:	edde aa01 	vldr	s21, [lr, #4]
 800ac48:	eb02 0908 	add.w	r9, r2, r8
 800ac4c:	edd2 9a01 	vldr	s19, [r2, #4]
 800ac50:	f8dd e010 	ldr.w	lr, [sp, #16]
 800ac54:	eb09 0208 	add.w	r2, r9, r8
 800ac58:	ed99 9a01 	vldr	s18, [r9, #4]
 800ac5c:	eb02 0908 	add.w	r9, r2, r8
 800ac60:	ed92 8a01 	vldr	s16, [r2, #4]
 800ac64:	9a01      	ldr	r2, [sp, #4]
 800ac66:	edd9 7a01 	vldr	s15, [r9, #4]
 800ac6a:	44c8      	add	r8, r9
 800ac6c:	edcd 7a02 	vstr	s15, [sp, #8]
 800ac70:	edd8 7a01 	vldr	s15, [r8, #4]
 800ac74:	edcd 7a03 	vstr	s15, [sp, #12]
 800ac78:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac7a:	e001      	b.n	800ac80 <arm_radix8_butterfly_f32+0x300>
 800ac7c:	3f3504f3 	.word	0x3f3504f3
 800ac80:	ed92 7a00 	vldr	s14, [r2]
 800ac84:	44de      	add	lr, fp
 800ac86:	ed17 1a01 	vldr	s2, [r7, #-4]
 800ac8a:	ed90 5a00 	vldr	s10, [r0]
 800ac8e:	45f2      	cmp	sl, lr
 800ac90:	ed1c fa01 	vldr	s30, [ip, #-4]
 800ac94:	ee31 3a07 	vadd.f32	s6, s2, s14
 800ac98:	edd6 5a00 	vldr	s11, [r6]
 800ac9c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800aca0:	edd4 7a00 	vldr	s15, [r4]
 800aca4:	ed95 7a00 	vldr	s14, [r5]
 800aca8:	ed91 4a00 	vldr	s8, [r1]
 800acac:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800acb0:	ee77 6a25 	vadd.f32	s13, s14, s11
 800acb4:	edd7 ea00 	vldr	s29, [r7]
 800acb8:	ee74 fa05 	vadd.f32	s31, s8, s10
 800acbc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800acc0:	ee34 4a45 	vsub.f32	s8, s8, s10
 800acc4:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800acc8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800accc:	ee33 3a46 	vsub.f32	s6, s6, s12
 800acd0:	ee31 6a85 	vadd.f32	s12, s3, s10
 800acd4:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800acd8:	ee34 fa07 	vadd.f32	s30, s8, s14
 800acdc:	ed07 6a01 	vstr	s12, [r7, #-4]
 800ace0:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ace4:	edd5 3a01 	vldr	s7, [r5, #4]
 800ace8:	ee7f fae6 	vsub.f32	s31, s31, s13
 800acec:	ed90 7a01 	vldr	s14, [r0, #4]
 800acf0:	ee2f fa28 	vmul.f32	s30, s30, s17
 800acf4:	edd1 5a01 	vldr	s11, [r1, #4]
 800acf8:	ee24 4a28 	vmul.f32	s8, s8, s17
 800acfc:	ed96 6a01 	vldr	s12, [r6, #4]
 800ad00:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800ad04:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800ad08:	edd2 6a01 	vldr	s13, [r2, #4]
 800ad0c:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800ad10:	edd4 4a01 	vldr	s9, [r4, #4]
 800ad14:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ad18:	ed9c 7a00 	vldr	s14, [ip]
 800ad1c:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800ad20:	ee33 6a86 	vadd.f32	s12, s7, s12
 800ad24:	ee37 facf 	vsub.f32	s30, s15, s30
 800ad28:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800ad2c:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800ad30:	ee7e eae6 	vsub.f32	s29, s29, s13
 800ad34:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800ad38:	ee77 6a24 	vadd.f32	s13, s14, s9
 800ad3c:	ee75 0a86 	vadd.f32	s1, s11, s12
 800ad40:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ad44:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800ad48:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800ad4c:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800ad50:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ad54:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800ad58:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800ad5c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800ad60:	ee7e eae7 	vsub.f32	s29, s29, s15
 800ad64:	ee77 7a62 	vsub.f32	s15, s14, s5
 800ad68:	ee71 2a04 	vadd.f32	s5, s2, s8
 800ad6c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800ad70:	ee30 1a60 	vsub.f32	s2, s0, s1
 800ad74:	ee73 1a06 	vadd.f32	s3, s6, s12
 800ad78:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ad7c:	ee33 3aef 	vsub.f32	s6, s7, s31
 800ad80:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800ad84:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800ad88:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800ad8c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800ad90:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800ad94:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800ad98:	ee77 2a27 	vadd.f32	s5, s14, s15
 800ad9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ada0:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800ada4:	ee2c fa85 	vmul.f32	s30, s25, s10
 800ada8:	ee69 ea01 	vmul.f32	s29, s18, s2
 800adac:	ee29 5a05 	vmul.f32	s10, s18, s10
 800adb0:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800adb4:	ee6d faa1 	vmul.f32	s31, s27, s3
 800adb8:	ee70 0a20 	vadd.f32	s1, s0, s1
 800adbc:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800adc0:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800adc4:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800adc8:	edc7 0a00 	vstr	s1, [r7]
 800adcc:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800add0:	441f      	add	r7, r3
 800add2:	ee2a faa3 	vmul.f32	s30, s21, s7
 800add6:	ee31 5a45 	vsub.f32	s10, s2, s10
 800adda:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800adde:	edc2 ea00 	vstr	s29, [r2]
 800ade2:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800ade6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800adea:	ed82 5a01 	vstr	s10, [r2, #4]
 800adee:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800adf2:	edcd 3a01 	vstr	s7, [sp, #4]
 800adf6:	ed9d 5a03 	vldr	s10, [sp, #12]
 800adfa:	ee6b ea86 	vmul.f32	s29, s23, s12
 800adfe:	eddd 3a02 	vldr	s7, [sp, #8]
 800ae02:	ee6b fa24 	vmul.f32	s31, s22, s9
 800ae06:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800ae0a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ae0e:	ed8c 3a00 	vstr	s6, [ip]
 800ae12:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800ae16:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ae1a:	eddd 3a01 	vldr	s7, [sp, #4]
 800ae1e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800ae22:	441a      	add	r2, r3
 800ae24:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800ae28:	449c      	add	ip, r3
 800ae2a:	ee68 1a04 	vmul.f32	s3, s16, s8
 800ae2e:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800ae32:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800ae36:	ee29 faa7 	vmul.f32	s30, s19, s15
 800ae3a:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800ae3e:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800ae42:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800ae46:	ee68 2a22 	vmul.f32	s5, s16, s5
 800ae4a:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800ae4e:	ee29 7a87 	vmul.f32	s14, s19, s14
 800ae52:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800ae56:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ae5a:	ee7e ea81 	vadd.f32	s29, s29, s2
 800ae5e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800ae62:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800ae66:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800ae6a:	edc4 ea00 	vstr	s29, [r4]
 800ae6e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800ae72:	ed84 6a01 	vstr	s12, [r4, #4]
 800ae76:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ae7a:	edc1 0a00 	vstr	s1, [r1]
 800ae7e:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800ae82:	edc1 3a01 	vstr	s7, [r1, #4]
 800ae86:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ae8a:	ed86 5a00 	vstr	s10, [r6]
 800ae8e:	edc6 4a01 	vstr	s9, [r6, #4]
 800ae92:	4419      	add	r1, r3
 800ae94:	ed80 0a00 	vstr	s0, [r0]
 800ae98:	441c      	add	r4, r3
 800ae9a:	edc0 2a01 	vstr	s5, [r0, #4]
 800ae9e:	441e      	add	r6, r3
 800aea0:	ed85 3a00 	vstr	s6, [r5]
 800aea4:	4418      	add	r0, r3
 800aea6:	ed85 7a01 	vstr	s14, [r5, #4]
 800aeaa:	441d      	add	r5, r3
 800aeac:	f63f aee8 	bhi.w	800ac80 <arm_radix8_butterfly_f32+0x300>
 800aeb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aeb2:	9a04      	ldr	r2, [sp, #16]
 800aeb4:	3108      	adds	r1, #8
 800aeb6:	3201      	adds	r2, #1
 800aeb8:	910c      	str	r1, [sp, #48]	; 0x30
 800aeba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aebc:	9204      	str	r2, [sp, #16]
 800aebe:	3108      	adds	r1, #8
 800aec0:	910b      	str	r1, [sp, #44]	; 0x2c
 800aec2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aec4:	3108      	adds	r1, #8
 800aec6:	910a      	str	r1, [sp, #40]	; 0x28
 800aec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeca:	3108      	adds	r1, #8
 800aecc:	9109      	str	r1, [sp, #36]	; 0x24
 800aece:	9908      	ldr	r1, [sp, #32]
 800aed0:	3108      	adds	r1, #8
 800aed2:	9108      	str	r1, [sp, #32]
 800aed4:	9907      	ldr	r1, [sp, #28]
 800aed6:	3108      	adds	r1, #8
 800aed8:	9107      	str	r1, [sp, #28]
 800aeda:	9906      	ldr	r1, [sp, #24]
 800aedc:	3108      	adds	r1, #8
 800aede:	9106      	str	r1, [sp, #24]
 800aee0:	9905      	ldr	r1, [sp, #20]
 800aee2:	3108      	adds	r1, #8
 800aee4:	9105      	str	r1, [sp, #20]
 800aee6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aee8:	4291      	cmp	r1, r2
 800aeea:	f47f ae74 	bne.w	800abd6 <arm_radix8_butterfly_f32+0x256>
 800aeee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aef0:	468b      	mov	fp, r1
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	9310      	str	r3, [sp, #64]	; 0x40
 800aef8:	e551      	b.n	800a99e <arm_radix8_butterfly_f32+0x1e>
 800aefa:	b015      	add	sp, #84	; 0x54
 800aefc:	ecbd 8b10 	vpop	{d8-d15}
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af04 <__libc_init_array>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	4d0d      	ldr	r5, [pc, #52]	; (800af3c <__libc_init_array+0x38>)
 800af08:	4c0d      	ldr	r4, [pc, #52]	; (800af40 <__libc_init_array+0x3c>)
 800af0a:	1b64      	subs	r4, r4, r5
 800af0c:	10a4      	asrs	r4, r4, #2
 800af0e:	2600      	movs	r6, #0
 800af10:	42a6      	cmp	r6, r4
 800af12:	d109      	bne.n	800af28 <__libc_init_array+0x24>
 800af14:	4d0b      	ldr	r5, [pc, #44]	; (800af44 <__libc_init_array+0x40>)
 800af16:	4c0c      	ldr	r4, [pc, #48]	; (800af48 <__libc_init_array+0x44>)
 800af18:	f000 fe24 	bl	800bb64 <_init>
 800af1c:	1b64      	subs	r4, r4, r5
 800af1e:	10a4      	asrs	r4, r4, #2
 800af20:	2600      	movs	r6, #0
 800af22:	42a6      	cmp	r6, r4
 800af24:	d105      	bne.n	800af32 <__libc_init_array+0x2e>
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	f855 3b04 	ldr.w	r3, [r5], #4
 800af2c:	4798      	blx	r3
 800af2e:	3601      	adds	r6, #1
 800af30:	e7ee      	b.n	800af10 <__libc_init_array+0xc>
 800af32:	f855 3b04 	ldr.w	r3, [r5], #4
 800af36:	4798      	blx	r3
 800af38:	3601      	adds	r6, #1
 800af3a:	e7f2      	b.n	800af22 <__libc_init_array+0x1e>
 800af3c:	0801ed58 	.word	0x0801ed58
 800af40:	0801ed58 	.word	0x0801ed58
 800af44:	0801ed58 	.word	0x0801ed58
 800af48:	0801ed5c 	.word	0x0801ed5c

0800af4c <memcpy>:
 800af4c:	440a      	add	r2, r1
 800af4e:	4291      	cmp	r1, r2
 800af50:	f100 33ff 	add.w	r3, r0, #4294967295
 800af54:	d100      	bne.n	800af58 <memcpy+0xc>
 800af56:	4770      	bx	lr
 800af58:	b510      	push	{r4, lr}
 800af5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af62:	4291      	cmp	r1, r2
 800af64:	d1f9      	bne.n	800af5a <memcpy+0xe>
 800af66:	bd10      	pop	{r4, pc}

0800af68 <memset>:
 800af68:	4402      	add	r2, r0
 800af6a:	4603      	mov	r3, r0
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d100      	bne.n	800af72 <memset+0xa>
 800af70:	4770      	bx	lr
 800af72:	f803 1b01 	strb.w	r1, [r3], #1
 800af76:	e7f9      	b.n	800af6c <memset+0x4>

0800af78 <cos>:
 800af78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af7a:	eeb0 7b40 	vmov.f64	d7, d0
 800af7e:	ee17 3a90 	vmov	r3, s15
 800af82:	4a21      	ldr	r2, [pc, #132]	; (800b008 <cos+0x90>)
 800af84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af88:	4293      	cmp	r3, r2
 800af8a:	dc06      	bgt.n	800af9a <cos+0x22>
 800af8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b000 <cos+0x88>
 800af90:	b005      	add	sp, #20
 800af92:	f85d eb04 	ldr.w	lr, [sp], #4
 800af96:	f000 b97f 	b.w	800b298 <__kernel_cos>
 800af9a:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <cos+0x94>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	dd04      	ble.n	800afaa <cos+0x32>
 800afa0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800afa4:	b005      	add	sp, #20
 800afa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800afaa:	4668      	mov	r0, sp
 800afac:	f000 f830 	bl	800b010 <__ieee754_rem_pio2>
 800afb0:	f000 0003 	and.w	r0, r0, #3
 800afb4:	2801      	cmp	r0, #1
 800afb6:	d009      	beq.n	800afcc <cos+0x54>
 800afb8:	2802      	cmp	r0, #2
 800afba:	d010      	beq.n	800afde <cos+0x66>
 800afbc:	b9b0      	cbnz	r0, 800afec <cos+0x74>
 800afbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afc2:	ed9d 0b00 	vldr	d0, [sp]
 800afc6:	f000 f967 	bl	800b298 <__kernel_cos>
 800afca:	e7eb      	b.n	800afa4 <cos+0x2c>
 800afcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afd0:	ed9d 0b00 	vldr	d0, [sp]
 800afd4:	f000 fc64 	bl	800b8a0 <__kernel_sin>
 800afd8:	eeb1 0b40 	vneg.f64	d0, d0
 800afdc:	e7e2      	b.n	800afa4 <cos+0x2c>
 800afde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afe2:	ed9d 0b00 	vldr	d0, [sp]
 800afe6:	f000 f957 	bl	800b298 <__kernel_cos>
 800afea:	e7f5      	b.n	800afd8 <cos+0x60>
 800afec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aff0:	ed9d 0b00 	vldr	d0, [sp]
 800aff4:	2001      	movs	r0, #1
 800aff6:	f000 fc53 	bl	800b8a0 <__kernel_sin>
 800affa:	e7d3      	b.n	800afa4 <cos+0x2c>
 800affc:	f3af 8000 	nop.w
	...
 800b008:	3fe921fb 	.word	0x3fe921fb
 800b00c:	7fefffff 	.word	0x7fefffff

0800b010 <__ieee754_rem_pio2>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	eeb0 7b40 	vmov.f64	d7, d0
 800b016:	ee17 5a90 	vmov	r5, s15
 800b01a:	4b99      	ldr	r3, [pc, #612]	; (800b280 <__ieee754_rem_pio2+0x270>)
 800b01c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b020:	429e      	cmp	r6, r3
 800b022:	b088      	sub	sp, #32
 800b024:	4604      	mov	r4, r0
 800b026:	dc07      	bgt.n	800b038 <__ieee754_rem_pio2+0x28>
 800b028:	2200      	movs	r2, #0
 800b02a:	2300      	movs	r3, #0
 800b02c:	ed84 0b00 	vstr	d0, [r4]
 800b030:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b034:	2000      	movs	r0, #0
 800b036:	e01b      	b.n	800b070 <__ieee754_rem_pio2+0x60>
 800b038:	4b92      	ldr	r3, [pc, #584]	; (800b284 <__ieee754_rem_pio2+0x274>)
 800b03a:	429e      	cmp	r6, r3
 800b03c:	dc3b      	bgt.n	800b0b6 <__ieee754_rem_pio2+0xa6>
 800b03e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b042:	2d00      	cmp	r5, #0
 800b044:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800b240 <__ieee754_rem_pio2+0x230>
 800b048:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b04c:	dd19      	ble.n	800b082 <__ieee754_rem_pio2+0x72>
 800b04e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b052:	429e      	cmp	r6, r3
 800b054:	d00e      	beq.n	800b074 <__ieee754_rem_pio2+0x64>
 800b056:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800b248 <__ieee754_rem_pio2+0x238>
 800b05a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b05e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b062:	ed84 5b00 	vstr	d5, [r4]
 800b066:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b06a:	ed84 7b02 	vstr	d7, [r4, #8]
 800b06e:	2001      	movs	r0, #1
 800b070:	b008      	add	sp, #32
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b250 <__ieee754_rem_pio2+0x240>
 800b078:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b07c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b258 <__ieee754_rem_pio2+0x248>
 800b080:	e7eb      	b.n	800b05a <__ieee754_rem_pio2+0x4a>
 800b082:	429e      	cmp	r6, r3
 800b084:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b088:	d00e      	beq.n	800b0a8 <__ieee754_rem_pio2+0x98>
 800b08a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800b248 <__ieee754_rem_pio2+0x238>
 800b08e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b092:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b096:	ed84 5b00 	vstr	d5, [r4]
 800b09a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800b0a6:	e7e3      	b.n	800b070 <__ieee754_rem_pio2+0x60>
 800b0a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b250 <__ieee754_rem_pio2+0x240>
 800b0ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b0b0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b258 <__ieee754_rem_pio2+0x248>
 800b0b4:	e7eb      	b.n	800b08e <__ieee754_rem_pio2+0x7e>
 800b0b6:	4b74      	ldr	r3, [pc, #464]	; (800b288 <__ieee754_rem_pio2+0x278>)
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	dc70      	bgt.n	800b19e <__ieee754_rem_pio2+0x18e>
 800b0bc:	f000 fc48 	bl	800b950 <fabs>
 800b0c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b0c4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b260 <__ieee754_rem_pio2+0x250>
 800b0c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b0cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b0d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b0d4:	ee17 0a90 	vmov	r0, s15
 800b0d8:	eeb1 4b45 	vneg.f64	d4, d5
 800b0dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b240 <__ieee754_rem_pio2+0x230>
 800b0e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800b0e4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b248 <__ieee754_rem_pio2+0x238>
 800b0e8:	281f      	cmp	r0, #31
 800b0ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b0ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b0f2:	dc08      	bgt.n	800b106 <__ieee754_rem_pio2+0xf6>
 800b0f4:	4b65      	ldr	r3, [pc, #404]	; (800b28c <__ieee754_rem_pio2+0x27c>)
 800b0f6:	1e42      	subs	r2, r0, #1
 800b0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fc:	42b3      	cmp	r3, r6
 800b0fe:	d002      	beq.n	800b106 <__ieee754_rem_pio2+0xf6>
 800b100:	ed84 6b00 	vstr	d6, [r4]
 800b104:	e026      	b.n	800b154 <__ieee754_rem_pio2+0x144>
 800b106:	ee16 3a90 	vmov	r3, s13
 800b10a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b10e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800b112:	2b10      	cmp	r3, #16
 800b114:	ea4f 5226 	mov.w	r2, r6, asr #20
 800b118:	ddf2      	ble.n	800b100 <__ieee754_rem_pio2+0xf0>
 800b11a:	eeb0 6b40 	vmov.f64	d6, d0
 800b11e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800b250 <__ieee754_rem_pio2+0x240>
 800b122:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800b258 <__ieee754_rem_pio2+0x248>
 800b126:	eea4 6b07 	vfma.f64	d6, d4, d7
 800b12a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b12e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800b132:	eeb0 7b40 	vmov.f64	d7, d0
 800b136:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800b13a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b13e:	ee13 3a90 	vmov	r3, s7
 800b142:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	2b31      	cmp	r3, #49	; 0x31
 800b14a:	dc17      	bgt.n	800b17c <__ieee754_rem_pio2+0x16c>
 800b14c:	eeb0 0b46 	vmov.f64	d0, d6
 800b150:	ed84 3b00 	vstr	d3, [r4]
 800b154:	ed94 6b00 	vldr	d6, [r4]
 800b158:	2d00      	cmp	r5, #0
 800b15a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b15e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b162:	ed84 0b02 	vstr	d0, [r4, #8]
 800b166:	da83      	bge.n	800b070 <__ieee754_rem_pio2+0x60>
 800b168:	eeb1 6b46 	vneg.f64	d6, d6
 800b16c:	eeb1 0b40 	vneg.f64	d0, d0
 800b170:	ed84 6b00 	vstr	d6, [r4]
 800b174:	ed84 0b02 	vstr	d0, [r4, #8]
 800b178:	4240      	negs	r0, r0
 800b17a:	e779      	b.n	800b070 <__ieee754_rem_pio2+0x60>
 800b17c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800b268 <__ieee754_rem_pio2+0x258>
 800b180:	eeb0 0b46 	vmov.f64	d0, d6
 800b184:	eea4 0b03 	vfma.f64	d0, d4, d3
 800b188:	ee36 7b40 	vsub.f64	d7, d6, d0
 800b18c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800b270 <__ieee754_rem_pio2+0x260>
 800b190:	eea4 7b03 	vfma.f64	d7, d4, d3
 800b194:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800b198:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b19c:	e7b0      	b.n	800b100 <__ieee754_rem_pio2+0xf0>
 800b19e:	4b3c      	ldr	r3, [pc, #240]	; (800b290 <__ieee754_rem_pio2+0x280>)
 800b1a0:	429e      	cmp	r6, r3
 800b1a2:	dd06      	ble.n	800b1b2 <__ieee754_rem_pio2+0x1a2>
 800b1a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800b1a8:	ed80 7b02 	vstr	d7, [r0, #8]
 800b1ac:	ed80 7b00 	vstr	d7, [r0]
 800b1b0:	e740      	b.n	800b034 <__ieee754_rem_pio2+0x24>
 800b1b2:	1532      	asrs	r2, r6, #20
 800b1b4:	ee10 0a10 	vmov	r0, s0
 800b1b8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800b1bc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800b1c0:	ec41 0b17 	vmov	d7, r0, r1
 800b1c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b1c8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800b278 <__ieee754_rem_pio2+0x268>
 800b1cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b1d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b1d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b1d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1dc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b1e0:	a902      	add	r1, sp, #8
 800b1e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b1e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b1ea:	ed8d 6b04 	vstr	d6, [sp, #16]
 800b1ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1f6:	2603      	movs	r6, #3
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	ed91 7b04 	vldr	d7, [r1, #16]
 800b1fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b206:	4633      	mov	r3, r6
 800b208:	f1a1 0108 	sub.w	r1, r1, #8
 800b20c:	f106 36ff 	add.w	r6, r6, #4294967295
 800b210:	d0f3      	beq.n	800b1fa <__ieee754_rem_pio2+0x1ea>
 800b212:	4920      	ldr	r1, [pc, #128]	; (800b294 <__ieee754_rem_pio2+0x284>)
 800b214:	9101      	str	r1, [sp, #4]
 800b216:	2102      	movs	r1, #2
 800b218:	9100      	str	r1, [sp, #0]
 800b21a:	4621      	mov	r1, r4
 800b21c:	f000 f8a8 	bl	800b370 <__kernel_rem_pio2>
 800b220:	2d00      	cmp	r5, #0
 800b222:	f6bf af25 	bge.w	800b070 <__ieee754_rem_pio2+0x60>
 800b226:	ed94 7b00 	vldr	d7, [r4]
 800b22a:	eeb1 7b47 	vneg.f64	d7, d7
 800b22e:	ed84 7b00 	vstr	d7, [r4]
 800b232:	ed94 7b02 	vldr	d7, [r4, #8]
 800b236:	eeb1 7b47 	vneg.f64	d7, d7
 800b23a:	ed84 7b02 	vstr	d7, [r4, #8]
 800b23e:	e79b      	b.n	800b178 <__ieee754_rem_pio2+0x168>
 800b240:	54400000 	.word	0x54400000
 800b244:	3ff921fb 	.word	0x3ff921fb
 800b248:	1a626331 	.word	0x1a626331
 800b24c:	3dd0b461 	.word	0x3dd0b461
 800b250:	1a600000 	.word	0x1a600000
 800b254:	3dd0b461 	.word	0x3dd0b461
 800b258:	2e037073 	.word	0x2e037073
 800b25c:	3ba3198a 	.word	0x3ba3198a
 800b260:	6dc9c883 	.word	0x6dc9c883
 800b264:	3fe45f30 	.word	0x3fe45f30
 800b268:	2e000000 	.word	0x2e000000
 800b26c:	3ba3198a 	.word	0x3ba3198a
 800b270:	252049c1 	.word	0x252049c1
 800b274:	397b839a 	.word	0x397b839a
 800b278:	00000000 	.word	0x00000000
 800b27c:	41700000 	.word	0x41700000
 800b280:	3fe921fb 	.word	0x3fe921fb
 800b284:	4002d97b 	.word	0x4002d97b
 800b288:	413921fb 	.word	0x413921fb
 800b28c:	0801eb80 	.word	0x0801eb80
 800b290:	7fefffff 	.word	0x7fefffff
 800b294:	0801ec00 	.word	0x0801ec00

0800b298 <__kernel_cos>:
 800b298:	ee10 1a90 	vmov	r1, s1
 800b29c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800b2a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b2a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b2a8:	da05      	bge.n	800b2b6 <__kernel_cos+0x1e>
 800b2aa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b2ae:	ee17 3a90 	vmov	r3, s15
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d03d      	beq.n	800b332 <__kernel_cos+0x9a>
 800b2b6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800b2ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b338 <__kernel_cos+0xa0>
 800b2be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800b340 <__kernel_cos+0xa8>
 800b2c2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800b2c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b348 <__kernel_cos+0xb0>
 800b2ca:	eea6 7b03 	vfma.f64	d7, d6, d3
 800b2ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800b350 <__kernel_cos+0xb8>
 800b2d2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800b2d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b358 <__kernel_cos+0xc0>
 800b2da:	4b23      	ldr	r3, [pc, #140]	; (800b368 <__kernel_cos+0xd0>)
 800b2dc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800b2e0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800b360 <__kernel_cos+0xc8>
 800b2e4:	4299      	cmp	r1, r3
 800b2e6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800b2ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b2ee:	ee26 5b03 	vmul.f64	d5, d6, d3
 800b2f2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b2f6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800b2fa:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b2fe:	dc04      	bgt.n	800b30a <__kernel_cos+0x72>
 800b300:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b304:	ee34 0b46 	vsub.f64	d0, d4, d6
 800b308:	4770      	bx	lr
 800b30a:	4b18      	ldr	r3, [pc, #96]	; (800b36c <__kernel_cos+0xd4>)
 800b30c:	4299      	cmp	r1, r3
 800b30e:	dc0d      	bgt.n	800b32c <__kernel_cos+0x94>
 800b310:	2200      	movs	r2, #0
 800b312:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b316:	ec43 2b15 	vmov	d5, r2, r3
 800b31a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800b31e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b322:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b326:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b32a:	4770      	bx	lr
 800b32c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b330:	e7f3      	b.n	800b31a <__kernel_cos+0x82>
 800b332:	eeb0 0b44 	vmov.f64	d0, d4
 800b336:	4770      	bx	lr
 800b338:	be8838d4 	.word	0xbe8838d4
 800b33c:	bda8fae9 	.word	0xbda8fae9
 800b340:	bdb4b1c4 	.word	0xbdb4b1c4
 800b344:	3e21ee9e 	.word	0x3e21ee9e
 800b348:	809c52ad 	.word	0x809c52ad
 800b34c:	be927e4f 	.word	0xbe927e4f
 800b350:	19cb1590 	.word	0x19cb1590
 800b354:	3efa01a0 	.word	0x3efa01a0
 800b358:	16c15177 	.word	0x16c15177
 800b35c:	bf56c16c 	.word	0xbf56c16c
 800b360:	5555554c 	.word	0x5555554c
 800b364:	3fa55555 	.word	0x3fa55555
 800b368:	3fd33332 	.word	0x3fd33332
 800b36c:	3fe90000 	.word	0x3fe90000

0800b370 <__kernel_rem_pio2>:
 800b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	ed2d 8b06 	vpush	{d8-d10}
 800b378:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b37c:	460f      	mov	r7, r1
 800b37e:	9002      	str	r0, [sp, #8]
 800b380:	49c5      	ldr	r1, [pc, #788]	; (800b698 <__kernel_rem_pio2+0x328>)
 800b382:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800b384:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800b388:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	f112 0f14 	cmn.w	r2, #20
 800b392:	bfa8      	it	ge
 800b394:	2018      	movge	r0, #24
 800b396:	f103 31ff 	add.w	r1, r3, #4294967295
 800b39a:	bfb8      	it	lt
 800b39c:	2000      	movlt	r0, #0
 800b39e:	f06f 0417 	mvn.w	r4, #23
 800b3a2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800b680 <__kernel_rem_pio2+0x310>
 800b3a6:	bfa4      	itt	ge
 800b3a8:	f1a2 0a03 	subge.w	sl, r2, #3
 800b3ac:	fb9a f0f0 	sdivge	r0, sl, r0
 800b3b0:	fb00 4404 	mla	r4, r0, r4, r4
 800b3b4:	1a46      	subs	r6, r0, r1
 800b3b6:	4414      	add	r4, r2
 800b3b8:	eb09 0c01 	add.w	ip, r9, r1
 800b3bc:	ad1a      	add	r5, sp, #104	; 0x68
 800b3be:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4562      	cmp	r2, ip
 800b3c6:	dd10      	ble.n	800b3ea <__kernel_rem_pio2+0x7a>
 800b3c8:	9a01      	ldr	r2, [sp, #4]
 800b3ca:	ab1a      	add	r3, sp, #104	; 0x68
 800b3cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b3d0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800b3d4:	f04f 0c00 	mov.w	ip, #0
 800b3d8:	45cc      	cmp	ip, r9
 800b3da:	dc26      	bgt.n	800b42a <__kernel_rem_pio2+0xba>
 800b3dc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800b680 <__kernel_rem_pio2+0x310>
 800b3e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	2500      	movs	r5, #0
 800b3e8:	e015      	b.n	800b416 <__kernel_rem_pio2+0xa6>
 800b3ea:	42d6      	cmn	r6, r2
 800b3ec:	d409      	bmi.n	800b402 <__kernel_rem_pio2+0x92>
 800b3ee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3fa:	eca5 7b02 	vstmia	r5!, {d7}
 800b3fe:	3201      	adds	r2, #1
 800b400:	e7e0      	b.n	800b3c4 <__kernel_rem_pio2+0x54>
 800b402:	eeb0 7b46 	vmov.f64	d7, d6
 800b406:	e7f8      	b.n	800b3fa <__kernel_rem_pio2+0x8a>
 800b408:	ecb8 5b02 	vldmia	r8!, {d5}
 800b40c:	ed96 6b00 	vldr	d6, [r6]
 800b410:	3501      	adds	r5, #1
 800b412:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b416:	428d      	cmp	r5, r1
 800b418:	f1a6 0608 	sub.w	r6, r6, #8
 800b41c:	ddf4      	ble.n	800b408 <__kernel_rem_pio2+0x98>
 800b41e:	ecaa 7b02 	vstmia	sl!, {d7}
 800b422:	f10c 0c01 	add.w	ip, ip, #1
 800b426:	3208      	adds	r2, #8
 800b428:	e7d6      	b.n	800b3d8 <__kernel_rem_pio2+0x68>
 800b42a:	ab06      	add	r3, sp, #24
 800b42c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800b688 <__kernel_rem_pio2+0x318>
 800b430:	ed9f ab97 	vldr	d10, [pc, #604]	; 800b690 <__kernel_rem_pio2+0x320>
 800b434:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b438:	9303      	str	r3, [sp, #12]
 800b43a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800b43e:	464d      	mov	r5, r9
 800b440:	00eb      	lsls	r3, r5, #3
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	ab92      	add	r3, sp, #584	; 0x248
 800b446:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b44a:	f10d 0b18 	add.w	fp, sp, #24
 800b44e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800b450:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800b454:	465e      	mov	r6, fp
 800b456:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800b45a:	4628      	mov	r0, r5
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f1a2 0208 	sub.w	r2, r2, #8
 800b462:	dc4c      	bgt.n	800b4fe <__kernel_rem_pio2+0x18e>
 800b464:	4620      	mov	r0, r4
 800b466:	9105      	str	r1, [sp, #20]
 800b468:	f000 faf2 	bl	800ba50 <scalbn>
 800b46c:	eeb0 8b40 	vmov.f64	d8, d0
 800b470:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b474:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b478:	f000 fa76 	bl	800b968 <floor>
 800b47c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b480:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b484:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b488:	2c00      	cmp	r4, #0
 800b48a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800b48e:	ee17 8a90 	vmov	r8, s15
 800b492:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b496:	9905      	ldr	r1, [sp, #20]
 800b498:	dd43      	ble.n	800b522 <__kernel_rem_pio2+0x1b2>
 800b49a:	1e68      	subs	r0, r5, #1
 800b49c:	ab06      	add	r3, sp, #24
 800b49e:	f1c4 0c18 	rsb	ip, r4, #24
 800b4a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800b4a6:	fa46 f20c 	asr.w	r2, r6, ip
 800b4aa:	4490      	add	r8, r2
 800b4ac:	fa02 f20c 	lsl.w	r2, r2, ip
 800b4b0:	1ab6      	subs	r6, r6, r2
 800b4b2:	f1c4 0217 	rsb	r2, r4, #23
 800b4b6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800b4ba:	4116      	asrs	r6, r2
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	dd3f      	ble.n	800b540 <__kernel_rem_pio2+0x1d0>
 800b4c0:	f04f 0c00 	mov.w	ip, #0
 800b4c4:	f108 0801 	add.w	r8, r8, #1
 800b4c8:	4660      	mov	r0, ip
 800b4ca:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800b4ce:	4565      	cmp	r5, ip
 800b4d0:	dc6e      	bgt.n	800b5b0 <__kernel_rem_pio2+0x240>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	dd04      	ble.n	800b4e0 <__kernel_rem_pio2+0x170>
 800b4d6:	2c01      	cmp	r4, #1
 800b4d8:	d07f      	beq.n	800b5da <__kernel_rem_pio2+0x26a>
 800b4da:	2c02      	cmp	r4, #2
 800b4dc:	f000 8087 	beq.w	800b5ee <__kernel_rem_pio2+0x27e>
 800b4e0:	2e02      	cmp	r6, #2
 800b4e2:	d12d      	bne.n	800b540 <__kernel_rem_pio2+0x1d0>
 800b4e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b4e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b4ec:	b340      	cbz	r0, 800b540 <__kernel_rem_pio2+0x1d0>
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	9105      	str	r1, [sp, #20]
 800b4f2:	f000 faad 	bl	800ba50 <scalbn>
 800b4f6:	9905      	ldr	r1, [sp, #20]
 800b4f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b4fc:	e020      	b.n	800b540 <__kernel_rem_pio2+0x1d0>
 800b4fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b502:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b506:	3801      	subs	r0, #1
 800b508:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b50c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b510:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b514:	eca6 0a01 	vstmia	r6!, {s0}
 800b518:	ed92 0b00 	vldr	d0, [r2]
 800b51c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b520:	e79c      	b.n	800b45c <__kernel_rem_pio2+0xec>
 800b522:	d105      	bne.n	800b530 <__kernel_rem_pio2+0x1c0>
 800b524:	1e6a      	subs	r2, r5, #1
 800b526:	ab06      	add	r3, sp, #24
 800b528:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b52c:	15f6      	asrs	r6, r6, #23
 800b52e:	e7c5      	b.n	800b4bc <__kernel_rem_pio2+0x14c>
 800b530:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b534:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53c:	da36      	bge.n	800b5ac <__kernel_rem_pio2+0x23c>
 800b53e:	2600      	movs	r6, #0
 800b540:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b548:	f040 80aa 	bne.w	800b6a0 <__kernel_rem_pio2+0x330>
 800b54c:	f105 3bff 	add.w	fp, r5, #4294967295
 800b550:	4658      	mov	r0, fp
 800b552:	2200      	movs	r2, #0
 800b554:	4548      	cmp	r0, r9
 800b556:	da52      	bge.n	800b5fe <__kernel_rem_pio2+0x28e>
 800b558:	2a00      	cmp	r2, #0
 800b55a:	f000 8081 	beq.w	800b660 <__kernel_rem_pio2+0x2f0>
 800b55e:	ab06      	add	r3, sp, #24
 800b560:	3c18      	subs	r4, #24
 800b562:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 8087 	beq.w	800b67a <__kernel_rem_pio2+0x30a>
 800b56c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b570:	4620      	mov	r0, r4
 800b572:	f000 fa6d 	bl	800ba50 <scalbn>
 800b576:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b57a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800b688 <__kernel_rem_pio2+0x318>
 800b57e:	a96a      	add	r1, sp, #424	; 0x1a8
 800b580:	f103 0208 	add.w	r2, r3, #8
 800b584:	1888      	adds	r0, r1, r2
 800b586:	4659      	mov	r1, fp
 800b588:	2900      	cmp	r1, #0
 800b58a:	f280 80b7 	bge.w	800b6fc <__kernel_rem_pio2+0x38c>
 800b58e:	4659      	mov	r1, fp
 800b590:	2900      	cmp	r1, #0
 800b592:	f2c0 80d5 	blt.w	800b740 <__kernel_rem_pio2+0x3d0>
 800b596:	a86a      	add	r0, sp, #424	; 0x1a8
 800b598:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800b59c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800b680 <__kernel_rem_pio2+0x310>
 800b5a0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800b69c <__kernel_rem_pio2+0x32c>
 800b5a4:	2400      	movs	r4, #0
 800b5a6:	ebab 0001 	sub.w	r0, fp, r1
 800b5aa:	e0be      	b.n	800b72a <__kernel_rem_pio2+0x3ba>
 800b5ac:	2602      	movs	r6, #2
 800b5ae:	e787      	b.n	800b4c0 <__kernel_rem_pio2+0x150>
 800b5b0:	f8db 2000 	ldr.w	r2, [fp]
 800b5b4:	b958      	cbnz	r0, 800b5ce <__kernel_rem_pio2+0x25e>
 800b5b6:	b122      	cbz	r2, 800b5c2 <__kernel_rem_pio2+0x252>
 800b5b8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800b5bc:	f8cb 2000 	str.w	r2, [fp]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f10c 0c01 	add.w	ip, ip, #1
 800b5c6:	f10b 0b04 	add.w	fp, fp, #4
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	e77f      	b.n	800b4ce <__kernel_rem_pio2+0x15e>
 800b5ce:	ebae 0202 	sub.w	r2, lr, r2
 800b5d2:	f8cb 2000 	str.w	r2, [fp]
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	e7f3      	b.n	800b5c2 <__kernel_rem_pio2+0x252>
 800b5da:	f105 3cff 	add.w	ip, r5, #4294967295
 800b5de:	ab06      	add	r3, sp, #24
 800b5e0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b5e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b5e8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800b5ec:	e778      	b.n	800b4e0 <__kernel_rem_pio2+0x170>
 800b5ee:	f105 3cff 	add.w	ip, r5, #4294967295
 800b5f2:	ab06      	add	r3, sp, #24
 800b5f4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b5f8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800b5fc:	e7f4      	b.n	800b5e8 <__kernel_rem_pio2+0x278>
 800b5fe:	ab06      	add	r3, sp, #24
 800b600:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b604:	3801      	subs	r0, #1
 800b606:	431a      	orrs	r2, r3
 800b608:	e7a4      	b.n	800b554 <__kernel_rem_pio2+0x1e4>
 800b60a:	f10c 0c01 	add.w	ip, ip, #1
 800b60e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800b612:	2800      	cmp	r0, #0
 800b614:	d0f9      	beq.n	800b60a <__kernel_rem_pio2+0x29a>
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b61c:	eb0d 0203 	add.w	r2, sp, r3
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	18e8      	adds	r0, r5, r3
 800b624:	ab1a      	add	r3, sp, #104	; 0x68
 800b626:	1c6e      	adds	r6, r5, #1
 800b628:	3a98      	subs	r2, #152	; 0x98
 800b62a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b62e:	4465      	add	r5, ip
 800b630:	42b5      	cmp	r5, r6
 800b632:	f6ff af05 	blt.w	800b440 <__kernel_rem_pio2+0xd0>
 800b636:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800b63a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b646:	f04f 0c00 	mov.w	ip, #0
 800b64a:	eca0 7b02 	vstmia	r0!, {d7}
 800b64e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b680 <__kernel_rem_pio2+0x310>
 800b652:	4680      	mov	r8, r0
 800b654:	458c      	cmp	ip, r1
 800b656:	dd07      	ble.n	800b668 <__kernel_rem_pio2+0x2f8>
 800b658:	eca2 7b02 	vstmia	r2!, {d7}
 800b65c:	3601      	adds	r6, #1
 800b65e:	e7e7      	b.n	800b630 <__kernel_rem_pio2+0x2c0>
 800b660:	9a03      	ldr	r2, [sp, #12]
 800b662:	f04f 0c01 	mov.w	ip, #1
 800b666:	e7d2      	b.n	800b60e <__kernel_rem_pio2+0x29e>
 800b668:	ecbe 5b02 	vldmia	lr!, {d5}
 800b66c:	ed38 6b02 	vldmdb	r8!, {d6}
 800b670:	f10c 0c01 	add.w	ip, ip, #1
 800b674:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b678:	e7ec      	b.n	800b654 <__kernel_rem_pio2+0x2e4>
 800b67a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b67e:	e76e      	b.n	800b55e <__kernel_rem_pio2+0x1ee>
	...
 800b68c:	3e700000 	.word	0x3e700000
 800b690:	00000000 	.word	0x00000000
 800b694:	41700000 	.word	0x41700000
 800b698:	0801ed48 	.word	0x0801ed48
 800b69c:	0801ed08 	.word	0x0801ed08
 800b6a0:	4260      	negs	r0, r4
 800b6a2:	eeb0 0b48 	vmov.f64	d0, d8
 800b6a6:	f000 f9d3 	bl	800ba50 <scalbn>
 800b6aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800b888 <__kernel_rem_pio2+0x518>
 800b6ae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b6:	db18      	blt.n	800b6ea <__kernel_rem_pio2+0x37a>
 800b6b8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800b890 <__kernel_rem_pio2+0x520>
 800b6bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b6c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b6c4:	aa06      	add	r2, sp, #24
 800b6c6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b6ca:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b6ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b6d2:	f105 0b01 	add.w	fp, r5, #1
 800b6d6:	ee10 3a10 	vmov	r3, s0
 800b6da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b6de:	ee17 3a10 	vmov	r3, s14
 800b6e2:	3418      	adds	r4, #24
 800b6e4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800b6e8:	e740      	b.n	800b56c <__kernel_rem_pio2+0x1fc>
 800b6ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b6ee:	aa06      	add	r2, sp, #24
 800b6f0:	ee10 3a10 	vmov	r3, s0
 800b6f4:	46ab      	mov	fp, r5
 800b6f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b6fa:	e737      	b.n	800b56c <__kernel_rem_pio2+0x1fc>
 800b6fc:	ac06      	add	r4, sp, #24
 800b6fe:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800b702:	9401      	str	r4, [sp, #4]
 800b704:	ee07 4a90 	vmov	s15, r4
 800b708:	3901      	subs	r1, #1
 800b70a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b70e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b712:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b716:	ed20 7b02 	vstmdb	r0!, {d7}
 800b71a:	e735      	b.n	800b588 <__kernel_rem_pio2+0x218>
 800b71c:	ecbc 5b02 	vldmia	ip!, {d5}
 800b720:	ecb5 6b02 	vldmia	r5!, {d6}
 800b724:	3401      	adds	r4, #1
 800b726:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b72a:	454c      	cmp	r4, r9
 800b72c:	dc01      	bgt.n	800b732 <__kernel_rem_pio2+0x3c2>
 800b72e:	4284      	cmp	r4, r0
 800b730:	ddf4      	ble.n	800b71c <__kernel_rem_pio2+0x3ac>
 800b732:	ac42      	add	r4, sp, #264	; 0x108
 800b734:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800b738:	ed80 7b00 	vstr	d7, [r0]
 800b73c:	3901      	subs	r1, #1
 800b73e:	e727      	b.n	800b590 <__kernel_rem_pio2+0x220>
 800b740:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b742:	2902      	cmp	r1, #2
 800b744:	dc0a      	bgt.n	800b75c <__kernel_rem_pio2+0x3ec>
 800b746:	2900      	cmp	r1, #0
 800b748:	dc2c      	bgt.n	800b7a4 <__kernel_rem_pio2+0x434>
 800b74a:	d045      	beq.n	800b7d8 <__kernel_rem_pio2+0x468>
 800b74c:	f008 0007 	and.w	r0, r8, #7
 800b750:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800b754:	ecbd 8b06 	vpop	{d8-d10}
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b75e:	2a03      	cmp	r2, #3
 800b760:	d1f4      	bne.n	800b74c <__kernel_rem_pio2+0x3dc>
 800b762:	aa42      	add	r2, sp, #264	; 0x108
 800b764:	4413      	add	r3, r2
 800b766:	461a      	mov	r2, r3
 800b768:	4619      	mov	r1, r3
 800b76a:	4658      	mov	r0, fp
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f1a1 0108 	sub.w	r1, r1, #8
 800b772:	dc54      	bgt.n	800b81e <__kernel_rem_pio2+0x4ae>
 800b774:	4659      	mov	r1, fp
 800b776:	2901      	cmp	r1, #1
 800b778:	f1a2 0208 	sub.w	r2, r2, #8
 800b77c:	dc5f      	bgt.n	800b83e <__kernel_rem_pio2+0x4ce>
 800b77e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800b898 <__kernel_rem_pio2+0x528>
 800b782:	3308      	adds	r3, #8
 800b784:	f1bb 0f01 	cmp.w	fp, #1
 800b788:	dc69      	bgt.n	800b85e <__kernel_rem_pio2+0x4ee>
 800b78a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800b78e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800b792:	2e00      	cmp	r6, #0
 800b794:	d16a      	bne.n	800b86c <__kernel_rem_pio2+0x4fc>
 800b796:	ed87 5b00 	vstr	d5, [r7]
 800b79a:	ed87 6b02 	vstr	d6, [r7, #8]
 800b79e:	ed87 7b04 	vstr	d7, [r7, #16]
 800b7a2:	e7d3      	b.n	800b74c <__kernel_rem_pio2+0x3dc>
 800b7a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b898 <__kernel_rem_pio2+0x528>
 800b7a8:	ab42      	add	r3, sp, #264	; 0x108
 800b7aa:	441a      	add	r2, r3
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	da26      	bge.n	800b800 <__kernel_rem_pio2+0x490>
 800b7b2:	b35e      	cbz	r6, 800b80c <__kernel_rem_pio2+0x49c>
 800b7b4:	eeb1 7b46 	vneg.f64	d7, d6
 800b7b8:	ed87 7b00 	vstr	d7, [r7]
 800b7bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800b7c0:	aa44      	add	r2, sp, #272	; 0x110
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b7c8:	459b      	cmp	fp, r3
 800b7ca:	da22      	bge.n	800b812 <__kernel_rem_pio2+0x4a2>
 800b7cc:	b10e      	cbz	r6, 800b7d2 <__kernel_rem_pio2+0x462>
 800b7ce:	eeb1 7b47 	vneg.f64	d7, d7
 800b7d2:	ed87 7b02 	vstr	d7, [r7, #8]
 800b7d6:	e7b9      	b.n	800b74c <__kernel_rem_pio2+0x3dc>
 800b7d8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b898 <__kernel_rem_pio2+0x528>
 800b7dc:	ab42      	add	r3, sp, #264	; 0x108
 800b7de:	441a      	add	r2, r3
 800b7e0:	f1bb 0f00 	cmp.w	fp, #0
 800b7e4:	da05      	bge.n	800b7f2 <__kernel_rem_pio2+0x482>
 800b7e6:	b10e      	cbz	r6, 800b7ec <__kernel_rem_pio2+0x47c>
 800b7e8:	eeb1 7b47 	vneg.f64	d7, d7
 800b7ec:	ed87 7b00 	vstr	d7, [r7]
 800b7f0:	e7ac      	b.n	800b74c <__kernel_rem_pio2+0x3dc>
 800b7f2:	ed32 6b02 	vldmdb	r2!, {d6}
 800b7f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b7fe:	e7ef      	b.n	800b7e0 <__kernel_rem_pio2+0x470>
 800b800:	ed32 7b02 	vldmdb	r2!, {d7}
 800b804:	3b01      	subs	r3, #1
 800b806:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b80a:	e7d0      	b.n	800b7ae <__kernel_rem_pio2+0x43e>
 800b80c:	eeb0 7b46 	vmov.f64	d7, d6
 800b810:	e7d2      	b.n	800b7b8 <__kernel_rem_pio2+0x448>
 800b812:	ecb2 6b02 	vldmia	r2!, {d6}
 800b816:	3301      	adds	r3, #1
 800b818:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b81c:	e7d4      	b.n	800b7c8 <__kernel_rem_pio2+0x458>
 800b81e:	ed91 7b00 	vldr	d7, [r1]
 800b822:	ed91 5b02 	vldr	d5, [r1, #8]
 800b826:	3801      	subs	r0, #1
 800b828:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b82c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b830:	ed81 6b00 	vstr	d6, [r1]
 800b834:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b838:	ed81 7b02 	vstr	d7, [r1, #8]
 800b83c:	e796      	b.n	800b76c <__kernel_rem_pio2+0x3fc>
 800b83e:	ed92 7b00 	vldr	d7, [r2]
 800b842:	ed92 5b02 	vldr	d5, [r2, #8]
 800b846:	3901      	subs	r1, #1
 800b848:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b84c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b850:	ed82 6b00 	vstr	d6, [r2]
 800b854:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b858:	ed82 7b02 	vstr	d7, [r2, #8]
 800b85c:	e78b      	b.n	800b776 <__kernel_rem_pio2+0x406>
 800b85e:	ed33 6b02 	vldmdb	r3!, {d6}
 800b862:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b866:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b86a:	e78b      	b.n	800b784 <__kernel_rem_pio2+0x414>
 800b86c:	eeb1 5b45 	vneg.f64	d5, d5
 800b870:	eeb1 6b46 	vneg.f64	d6, d6
 800b874:	ed87 5b00 	vstr	d5, [r7]
 800b878:	eeb1 7b47 	vneg.f64	d7, d7
 800b87c:	ed87 6b02 	vstr	d6, [r7, #8]
 800b880:	e78d      	b.n	800b79e <__kernel_rem_pio2+0x42e>
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
 800b888:	00000000 	.word	0x00000000
 800b88c:	41700000 	.word	0x41700000
 800b890:	00000000 	.word	0x00000000
 800b894:	3e700000 	.word	0x3e700000
	...

0800b8a0 <__kernel_sin>:
 800b8a0:	ee10 3a90 	vmov	r3, s1
 800b8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b8ac:	da04      	bge.n	800b8b8 <__kernel_sin+0x18>
 800b8ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b8b2:	ee17 3a90 	vmov	r3, s15
 800b8b6:	b35b      	cbz	r3, 800b910 <__kernel_sin+0x70>
 800b8b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b8bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b8c0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b918 <__kernel_sin+0x78>
 800b8c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b920 <__kernel_sin+0x80>
 800b8c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b8cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b928 <__kernel_sin+0x88>
 800b8d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b8d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b930 <__kernel_sin+0x90>
 800b8d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b8dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b938 <__kernel_sin+0x98>
 800b8e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b8e4:	b930      	cbnz	r0, 800b8f4 <__kernel_sin+0x54>
 800b8e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b940 <__kernel_sin+0xa0>
 800b8ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b8ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b8f2:	4770      	bx	lr
 800b8f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b8f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b8fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b900:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b904:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b948 <__kernel_sin+0xa8>
 800b908:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b90c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	f3af 8000 	nop.w
 800b918:	5acfd57c 	.word	0x5acfd57c
 800b91c:	3de5d93a 	.word	0x3de5d93a
 800b920:	8a2b9ceb 	.word	0x8a2b9ceb
 800b924:	be5ae5e6 	.word	0xbe5ae5e6
 800b928:	57b1fe7d 	.word	0x57b1fe7d
 800b92c:	3ec71de3 	.word	0x3ec71de3
 800b930:	19c161d5 	.word	0x19c161d5
 800b934:	bf2a01a0 	.word	0xbf2a01a0
 800b938:	1110f8a6 	.word	0x1110f8a6
 800b93c:	3f811111 	.word	0x3f811111
 800b940:	55555549 	.word	0x55555549
 800b944:	bfc55555 	.word	0xbfc55555
 800b948:	55555549 	.word	0x55555549
 800b94c:	3fc55555 	.word	0x3fc55555

0800b950 <fabs>:
 800b950:	ec51 0b10 	vmov	r0, r1, d0
 800b954:	ee10 2a10 	vmov	r2, s0
 800b958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b95c:	ec43 2b10 	vmov	d0, r2, r3
 800b960:	4770      	bx	lr
 800b962:	0000      	movs	r0, r0
 800b964:	0000      	movs	r0, r0
	...

0800b968 <floor>:
 800b968:	ee10 1a90 	vmov	r1, s1
 800b96c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b970:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b974:	2b13      	cmp	r3, #19
 800b976:	b530      	push	{r4, r5, lr}
 800b978:	ee10 0a10 	vmov	r0, s0
 800b97c:	ee10 5a10 	vmov	r5, s0
 800b980:	dc31      	bgt.n	800b9e6 <floor+0x7e>
 800b982:	2b00      	cmp	r3, #0
 800b984:	da15      	bge.n	800b9b2 <floor+0x4a>
 800b986:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ba40 <floor+0xd8>
 800b98a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b98e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b996:	dd07      	ble.n	800b9a8 <floor+0x40>
 800b998:	2900      	cmp	r1, #0
 800b99a:	da4e      	bge.n	800ba3a <floor+0xd2>
 800b99c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9a0:	4318      	orrs	r0, r3
 800b9a2:	d001      	beq.n	800b9a8 <floor+0x40>
 800b9a4:	4928      	ldr	r1, [pc, #160]	; (800ba48 <floor+0xe0>)
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	ec43 2b10 	vmov	d0, r2, r3
 800b9b0:	e020      	b.n	800b9f4 <floor+0x8c>
 800b9b2:	4a26      	ldr	r2, [pc, #152]	; (800ba4c <floor+0xe4>)
 800b9b4:	411a      	asrs	r2, r3
 800b9b6:	ea01 0402 	and.w	r4, r1, r2
 800b9ba:	4304      	orrs	r4, r0
 800b9bc:	d01a      	beq.n	800b9f4 <floor+0x8c>
 800b9be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ba40 <floor+0xd8>
 800b9c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b9c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ce:	ddeb      	ble.n	800b9a8 <floor+0x40>
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	bfbe      	ittt	lt
 800b9d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b9d8:	fa40 f303 	asrlt.w	r3, r0, r3
 800b9dc:	18c9      	addlt	r1, r1, r3
 800b9de:	ea21 0102 	bic.w	r1, r1, r2
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e7e0      	b.n	800b9a8 <floor+0x40>
 800b9e6:	2b33      	cmp	r3, #51	; 0x33
 800b9e8:	dd05      	ble.n	800b9f6 <floor+0x8e>
 800b9ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ee:	d101      	bne.n	800b9f4 <floor+0x8c>
 800b9f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b9f4:	bd30      	pop	{r4, r5, pc}
 800b9f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fe:	40e2      	lsrs	r2, r4
 800ba00:	4202      	tst	r2, r0
 800ba02:	d0f7      	beq.n	800b9f4 <floor+0x8c>
 800ba04:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ba40 <floor+0xd8>
 800ba08:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ba0c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	ddc8      	ble.n	800b9a8 <floor+0x40>
 800ba16:	2900      	cmp	r1, #0
 800ba18:	da02      	bge.n	800ba20 <floor+0xb8>
 800ba1a:	2b14      	cmp	r3, #20
 800ba1c:	d103      	bne.n	800ba26 <floor+0xbe>
 800ba1e:	3101      	adds	r1, #1
 800ba20:	ea20 0002 	bic.w	r0, r0, r2
 800ba24:	e7c0      	b.n	800b9a8 <floor+0x40>
 800ba26:	2401      	movs	r4, #1
 800ba28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba2c:	fa04 f303 	lsl.w	r3, r4, r3
 800ba30:	4418      	add	r0, r3
 800ba32:	42a8      	cmp	r0, r5
 800ba34:	bf38      	it	cc
 800ba36:	1909      	addcc	r1, r1, r4
 800ba38:	e7f2      	b.n	800ba20 <floor+0xb8>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	e7b3      	b.n	800b9a8 <floor+0x40>
 800ba40:	8800759c 	.word	0x8800759c
 800ba44:	7e37e43c 	.word	0x7e37e43c
 800ba48:	bff00000 	.word	0xbff00000
 800ba4c:	000fffff 	.word	0x000fffff

0800ba50 <scalbn>:
 800ba50:	ee10 1a90 	vmov	r1, s1
 800ba54:	b510      	push	{r4, lr}
 800ba56:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ba5a:	b98c      	cbnz	r4, 800ba80 <scalbn+0x30>
 800ba5c:	ee10 3a10 	vmov	r3, s0
 800ba60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ba64:	430b      	orrs	r3, r1
 800ba66:	d011      	beq.n	800ba8c <scalbn+0x3c>
 800ba68:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800bb30 <scalbn+0xe0>
 800ba6c:	4b3c      	ldr	r3, [pc, #240]	; (800bb60 <scalbn+0x110>)
 800ba6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ba72:	4298      	cmp	r0, r3
 800ba74:	da0b      	bge.n	800ba8e <scalbn+0x3e>
 800ba76:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800bb38 <scalbn+0xe8>
 800ba7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ba7e:	e005      	b.n	800ba8c <scalbn+0x3c>
 800ba80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ba84:	429c      	cmp	r4, r3
 800ba86:	d107      	bne.n	800ba98 <scalbn+0x48>
 800ba88:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ba8c:	bd10      	pop	{r4, pc}
 800ba8e:	ee10 1a90 	vmov	r1, s1
 800ba92:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ba96:	3c36      	subs	r4, #54	; 0x36
 800ba98:	4404      	add	r4, r0
 800ba9a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	dd0d      	ble.n	800babe <scalbn+0x6e>
 800baa2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800bb40 <scalbn+0xf0>
 800baa6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800bb48 <scalbn+0xf8>
 800baaa:	eeb0 6b47 	vmov.f64	d6, d7
 800baae:	ee10 3a90 	vmov	r3, s1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	fe27 7b05 	vselge.f64	d7, d7, d5
 800bab8:	ee27 0b06 	vmul.f64	d0, d7, d6
 800babc:	e7e6      	b.n	800ba8c <scalbn+0x3c>
 800babe:	2c00      	cmp	r4, #0
 800bac0:	dd0a      	ble.n	800bad8 <scalbn+0x88>
 800bac2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bac6:	ec53 2b10 	vmov	r2, r3, d0
 800baca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bace:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800bad2:	ec43 2b10 	vmov	d0, r2, r3
 800bad6:	e7d9      	b.n	800ba8c <scalbn+0x3c>
 800bad8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800badc:	da19      	bge.n	800bb12 <scalbn+0xc2>
 800bade:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bae2:	4298      	cmp	r0, r3
 800bae4:	ee10 3a90 	vmov	r3, s1
 800bae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baec:	dd09      	ble.n	800bb02 <scalbn+0xb2>
 800baee:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800bb40 <scalbn+0xf0>
 800baf2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800bb48 <scalbn+0xf8>
 800baf6:	eeb0 7b40 	vmov.f64	d7, d0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800bb00:	e7bb      	b.n	800ba7a <scalbn+0x2a>
 800bb02:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800bb38 <scalbn+0xe8>
 800bb06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800bb50 <scalbn+0x100>
 800bb0a:	eeb0 7b40 	vmov.f64	d7, d0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	e7f4      	b.n	800bafc <scalbn+0xac>
 800bb12:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bb16:	ec53 2b10 	vmov	r2, r3, d0
 800bb1a:	3436      	adds	r4, #54	; 0x36
 800bb1c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bb20:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800bb24:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800bb58 <scalbn+0x108>
 800bb28:	ec43 2b10 	vmov	d0, r2, r3
 800bb2c:	e7a5      	b.n	800ba7a <scalbn+0x2a>
 800bb2e:	bf00      	nop
 800bb30:	00000000 	.word	0x00000000
 800bb34:	43500000 	.word	0x43500000
 800bb38:	c2f8f359 	.word	0xc2f8f359
 800bb3c:	01a56e1f 	.word	0x01a56e1f
 800bb40:	8800759c 	.word	0x8800759c
 800bb44:	7e37e43c 	.word	0x7e37e43c
 800bb48:	8800759c 	.word	0x8800759c
 800bb4c:	fe37e43c 	.word	0xfe37e43c
 800bb50:	c2f8f359 	.word	0xc2f8f359
 800bb54:	81a56e1f 	.word	0x81a56e1f
 800bb58:	00000000 	.word	0x00000000
 800bb5c:	3c900000 	.word	0x3c900000
 800bb60:	ffff3cb0 	.word	0xffff3cb0

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
