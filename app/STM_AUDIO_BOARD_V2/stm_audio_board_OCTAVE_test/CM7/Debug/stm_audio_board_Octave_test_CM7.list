
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007048  08007048  00017048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007238  08007238  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007238  08007238  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007238  08007238  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  24000000  08007240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00068ef8  240003a0  080075e0  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24069298  080075e0  00029298  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000203ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d9d  00000000  00000000  00020486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036dd  00000000  00000000  00038223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005a99  00000000  00000000  0003b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ba  00000000  00000000  00042080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f578  00000000  00000000  00042a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017529  00000000  00000000  00081fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196393  00000000  00000000  000994db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020d0  00000000  00000000  0022f870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00231940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000017a3  00000000  00000000  002319da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000070  00000000  00000000  0023317d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240003a0 	.word	0x240003a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007030 	.word	0x08007030

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240003a4 	.word	0x240003a4
 80002d4:	08007030 	.word	0x08007030

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 80002da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80002e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002e6:	691a      	ldr	r2, [r3, #16]
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <SystemInit+0xbc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	2b06      	cmp	r3, #6
 80002f8:	d806      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fa:	4a26      	ldr	r2, [pc, #152]	; (8000394 <SystemInit+0xbc>)
 80002fc:	6813      	ldr	r3, [r2, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	f042 0201 	orr.w	r2, r2, #1
 8000310:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	4a20      	ldr	r2, [pc, #128]	; (800039c <SystemInit+0xc4>)
 800031a:	400a      	ands	r2, r1
 800031c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <SystemInit+0xbc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f013 0f08 	tst.w	r3, #8
 8000326:	d006      	beq.n	8000336 <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <SystemInit+0xbc>)
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	f043 0307 	orr.w	r3, r3, #7
 8000334:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <SystemInit+0xc0>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800033c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800033e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000340:	4917      	ldr	r1, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	4917      	ldr	r1, [pc, #92]	; (80003a4 <SystemInit+0xcc>)
 8000346:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000348:	4917      	ldr	r1, [pc, #92]	; (80003a8 <SystemInit+0xd0>)
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000364:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8000368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <SystemInit+0xd4>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <SystemInit+0xd8>)
 8000376:	4013      	ands	r3, r2
 8000378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800037c:	d203      	bcs.n	8000386 <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <SystemInit+0xdc>)
 8000380:	2201      	movs	r2, #1
 8000382:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <SystemInit+0xe0>)
 8000388:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800038c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	02020200 	.word	0x02020200
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	01010280 	.word	0x01010280
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	b083      	sub	sp, #12
	int8_t retval = 0;
	TXdata[0] = AD1939_Global_Address_Write;
 80003c0:	4c0f      	ldr	r4, [pc, #60]	; (8000400 <ad1939_write_reg+0x44>)
 80003c2:	2308      	movs	r3, #8
 80003c4:	7023      	strb	r3, [r4, #0]
	TXdata[1] = reg_address;
 80003c6:	7060      	strb	r0, [r4, #1]
	TXdata[2] = data;
 80003c8:	70a1      	strb	r1, [r4, #2]

	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003ca:	4d0e      	ldr	r5, [pc, #56]	; (8000404 <ad1939_write_reg+0x48>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4628      	mov	r0, r5
 80003d4:	f002 fcc2 	bl	8002d5c <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2303      	movs	r3, #3
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <ad1939_write_reg+0x4c>)
 80003e2:	4621      	mov	r1, r4
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <ad1939_write_reg+0x50>)
 80003e6:	6800      	ldr	r0, [r0, #0]
 80003e8:	f005 fb08 	bl	80059fc <HAL_SPI_TransmitReceive>
 80003ec:	b244      	sxtb	r4, r0
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f4:	4628      	mov	r0, r5
 80003f6:	f002 fcb1 	bl	8002d5c <HAL_GPIO_WritePin>

	 //HAL_Delay(10);
	return retval;
}
 80003fa:	4620      	mov	r0, r4
 80003fc:	b003      	add	sp, #12
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	240003c4 	.word	0x240003c4
 8000404:	58021400 	.word	0x58021400
 8000408:	240003c0 	.word	0x240003c0
 800040c:	240003bc 	.word	0x240003bc

08000410 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	b082      	sub	sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 8000414:	4c11      	ldr	r4, [pc, #68]	; (800045c <ad1939_pll_locked+0x4c>)
 8000416:	2309      	movs	r3, #9
 8000418:	7023      	strb	r3, [r4, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 800041a:	2601      	movs	r6, #1
 800041c:	7066      	strb	r6, [r4, #1]
	TXdata[2] = 0b00000100;
 800041e:	2304      	movs	r3, #4
 8000420:	70a3      	strb	r3, [r4, #2]
	HAL_Delay(10);
 8000422:	200a      	movs	r0, #10
 8000424:	f001 fa3a 	bl	800189c <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000428:	4d0d      	ldr	r5, [pc, #52]	; (8000460 <ad1939_pll_locked+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4628      	mov	r0, r5
 8000432:	f002 fc93 	bl	8002d5c <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2303      	movs	r3, #3
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <ad1939_pll_locked+0x54>)
 8000440:	4621      	mov	r1, r4
 8000442:	4809      	ldr	r0, [pc, #36]	; (8000468 <ad1939_pll_locked+0x58>)
 8000444:	6800      	ldr	r0, [r0, #0]
 8000446:	f005 fad9 	bl	80059fc <HAL_SPI_TransmitReceive>
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800044a:	4632      	mov	r2, r6
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	4628      	mov	r0, r5
 8000452:	f002 fc83 	bl	8002d5c <HAL_GPIO_WritePin>

	 return 0;
}
 8000456:	2000      	movs	r0, #0
 8000458:	b002      	add	sp, #8
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	240003c4 	.word	0x240003c4
 8000460:	58021400 	.word	0x58021400
 8000464:	240003c0 	.word	0x240003c0
 8000468:	240003bc 	.word	0x240003bc

0800046c <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 800046c:	b508      	push	{r3, lr}
    AD1939_spi = hspi_codec;
 800046e:	4b33      	ldr	r3, [pc, #204]	; (800053c <ad1939_init+0xd0>)
 8000470:	6018      	str	r0, [r3, #0]
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 8000472:	2199      	movs	r1, #153	; 0x99
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ffa1 	bl	80003bc <ad1939_write_reg>
 800047a:	bbd8      	cbnz	r0, 80004f4 <ad1939_init+0x88>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800047c:	21be      	movs	r1, #190	; 0xbe
 800047e:	f7ff ff9d 	bl	80003bc <ad1939_write_reg>
 8000482:	bbd0      	cbnz	r0, 80004fa <ad1939_init+0x8e>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000484:	2104      	movs	r1, #4
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff98 	bl	80003bc <ad1939_write_reg>
 800048c:	bbc0      	cbnz	r0, 8000500 <ad1939_init+0x94>





    HAL_Delay(100);
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f001 fa04 	bl	800189c <HAL_Delay>

    if(ad1939_pll_locked()){
 8000494:	f7ff ffbc 	bl	8000410 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000000)) return -1;
 8000498:	2100      	movs	r1, #0
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff ff8e 	bl	80003bc <ad1939_write_reg>
 80004a0:	bb88      	cbnz	r0, 8000506 <ad1939_init+0x9a>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 80004a2:	2100      	movs	r1, #0
 80004a4:	2003      	movs	r0, #3
 80004a6:	f7ff ff89 	bl	80003bc <ad1939_write_reg>
 80004aa:	bb78      	cbnz	r0, 800050c <ad1939_init+0xa0>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004ac:	2100      	movs	r1, #0
 80004ae:	2004      	movs	r0, #4
 80004b0:	f7ff ff84 	bl	80003bc <ad1939_write_reg>
 80004b4:	bb68      	cbnz	r0, 8000512 <ad1939_init+0xa6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004b6:	2100      	movs	r1, #0
 80004b8:	2005      	movs	r0, #5
 80004ba:	f7ff ff7f 	bl	80003bc <ad1939_write_reg>
 80004be:	bb58      	cbnz	r0, 8000518 <ad1939_init+0xac>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004c0:	2100      	movs	r1, #0
 80004c2:	2008      	movs	r0, #8
 80004c4:	f7ff ff7a 	bl	80003bc <ad1939_write_reg>
 80004c8:	bb48      	cbnz	r0, 800051e <ad1939_init+0xb2>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004ca:	2100      	movs	r1, #0
 80004cc:	2009      	movs	r0, #9
 80004ce:	f7ff ff75 	bl	80003bc <ad1939_write_reg>
 80004d2:	bb38      	cbnz	r0, 8000524 <ad1939_init+0xb8>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 80004d4:	2100      	movs	r1, #0
 80004d6:	200e      	movs	r0, #14
 80004d8:	f7ff ff70 	bl	80003bc <ad1939_write_reg>
 80004dc:	bb28      	cbnz	r0, 800052a <ad1939_init+0xbe>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 80004de:	2100      	movs	r1, #0
 80004e0:	200f      	movs	r0, #15
 80004e2:	f7ff ff6b 	bl	80003bc <ad1939_write_reg>
 80004e6:	bb18      	cbnz	r0, 8000530 <ad1939_init+0xc4>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 80004e8:	2100      	movs	r1, #0
 80004ea:	2010      	movs	r0, #16
 80004ec:	f7ff ff66 	bl	80003bc <ad1939_write_reg>
 80004f0:	bb08      	cbnz	r0, 8000536 <ad1939_init+0xca>



    return 0; // Return 0 if all writes are successful
}
 80004f2:	bd08      	pop	{r3, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	e7fb      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80004fa:	f04f 30ff 	mov.w	r0, #4294967295
 80004fe:	e7f8      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	e7f5      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000000)) return -1;
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	e7f2      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	e7ef      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	e7ec      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	e7e9      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800051e:	f04f 30ff 	mov.w	r0, #4294967295
 8000522:	e7e6      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	e7e3      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 800052a:	f04f 30ff 	mov.w	r0, #4294967295
 800052e:	e7e0      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	e7dd      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000536:	f04f 30ff 	mov.w	r0, #4294967295
 800053a:	e7da      	b.n	80004f2 <ad1939_init+0x86>
 800053c:	240003bc 	.word	0x240003bc

08000540 <calculate_buffer_location>:
 * 		calculates the position in the buffer where the delayed signal should be read from
 * 		For now this will only use the time_buffer_u32
 */
static void calculate_buffer_location(struct delay_effects_st* self){
	// current_pointer + buffer[time]
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 8000540:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 8000544:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8000548:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
 800054c:	440b      	add	r3, r1
 800054e:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c

	// if delay sample is bigger than the buffer go back
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <calculate_buffer_location+0x28>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d905      	bls.n	8000564 <calculate_buffer_location+0x24>
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <calculate_buffer_location+0x2c>)
 800055a:	441a      	add	r2, r3
 800055c:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 8000560:	f8c0 2c0c 	str.w	r2, [r0, #3084]	; 0xc0c
	}
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	000176ff 	.word	0x000176ff
 800056c:	fffe8901 	.word	0xfffe8901

08000570 <increment_current_sample_counter>:
 * 		increment_current_sample_counter()
 * DESC:
 * 		Increments the current sample counter
 */
static void increment_current_sample_counter(struct delay_effects_st* self){
	self->current_counter_u32++;
 8000570:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 8000574:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8000578:	3301      	adds	r3, #1
 800057a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <increment_current_sample_counter+0x20>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d904      	bls.n	800058e <increment_current_sample_counter+0x1e>
		self->current_counter_u32 = 0;
 8000584:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 8000588:	2300      	movs	r3, #0
 800058a:	f8c0 3c08 	str.w	r3, [r0, #3080]	; 0xc08
	}
}
 800058e:	4770      	bx	lr
 8000590:	000176ff 	.word	0x000176ff

08000594 <get_delayed_signal>:
 * 		get_delayed_signal()
 * DESC:
 * 		Returns the delayed signal value stored in buffer
 */
static int32_t get_delayed_signal(struct delay_effects_st* self){
	return self->buffer_ai32[self->delayed_counter_u32];
 8000594:	f500 23ba 	add.w	r3, r0, #380928	; 0x5d000
 8000598:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 800059c:	3302      	adds	r3, #2
}
 800059e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80005a2:	4770      	bx	lr
 80005a4:	0000      	movs	r0, r0
	...

080005a8 <callback>:
 * FUNC:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	ed2d 8b02 	vpush	{d8}
 80005ae:	4604      	mov	r4, r0

	self->input_i32 = input_signal_i32;
 80005b0:	6001      	str	r1, [r0, #0]
	calculate_buffer_location(self);
 80005b2:	f7ff ffc5 	bl	8000540 <calculate_buffer_location>

	// delay effect
	int32_t delayed_sample_i32 = get_delayed_signal(self);
 80005b6:	4620      	mov	r0, r4
 80005b8:	f7ff ffec 	bl	8000594 <get_delayed_signal>
 80005bc:	ee07 0a10 	vmov	s14, r0

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80005c0:	f504 25ba 	add.w	r5, r4, #380928	; 0x5d000
 80005c4:	f8d5 3c0c 	ldr.w	r3, [r5, #3084]	; 0xc0c
 80005c8:	3302      	adds	r3, #2
 80005ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80005ce:	edd3 7a00 	vldr	s15, [r3]
 80005d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d6:	f605 4334 	addw	r3, r5, #3124	; 0xc34
 80005da:	ed93 6a00 	vldr	s12, [r3]
 80005de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80005e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e6:	ee17 3a90 	vmov	r3, s15
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80005ea:	edd4 7a00 	vldr	s15, [r4]
 80005ee:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80005f2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80005f6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80005fa:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80005fe:	ee34 6b46 	vsub.f64	d6, d4, d6
 8000602:	ee25 6b06 	vmul.f64	d6, d5, d6
 8000606:	eebd 6bc6 	vcvt.s32.f64	s12, d6
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 800060a:	f8d5 2c08 	ldr.w	r2, [r5, #3080]	; 0xc08
 800060e:	ee16 1a10 	vmov	r1, s12
 8000612:	440b      	add	r3, r1
 8000614:	3202      	adds	r2, #2
 8000616:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800061a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800061e:	f605 432c 	addw	r3, r5, #3116	; 0xc2c
 8000622:	ed93 6a00 	vldr	s12, [r3]
 8000626:	ee27 7a06 	vmul.f32	s14, s14, s12
 800062a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 800062e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000632:	ee34 4b46 	vsub.f64	d4, d4, d6
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000636:	ee05 7b04 	vmla.f64	d7, d5, d4
 800063a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800063e:	ed84 7a01 	vstr	s14, [r4, #4]

	increment_current_sample_counter(self);
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff ff94 	bl	8000570 <increment_current_sample_counter>

	// modulation
	if( self->modulation_on_u8 ){
 8000648:	f895 3c10 	ldrb.w	r3, [r5, #3088]	; 0xc10
 800064c:	b37b      	cbz	r3, 80006ae <callback+0x106>
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 800064e:	462e      	mov	r6, r5
 8000650:	f8d5 3c28 	ldr.w	r3, [r5, #3112]	; 0xc28
 8000654:	4d1a      	ldr	r5, [pc, #104]	; (80006c0 <callback+0x118>)
 8000656:	1aed      	subs	r5, r5, r3
 8000658:	f606 4324 	addw	r3, r6, #3108	; 0xc24
 800065c:	ed93 8a00 	vldr	s16, [r3]
 8000660:	f8d6 7c20 	ldr.w	r7, [r6, #3104]	; 0xc20
 8000664:	ee07 7a90 	vmov	s15, r7
 8000668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800066c:	f8d6 3c1c 	ldr.w	r3, [r6, #3100]	; 0xc1c
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800067c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000680:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80006b8 <callback+0x110>
 8000684:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000688:	f005 fee6 	bl	8006458 <sin>
 800068c:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8000690:	ee07 5a90 	vmov	s15, r5
 8000694:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000698:	ee08 7b00 	vmla.f64	d7, d8, d0
 800069c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006a0:	ee17 3a10 	vmov	r3, s14
 80006a4:	f8c6 3c18 	str.w	r3, [r6, #3096]	; 0xc18
		self->parameters_st.modulation_counter_u32++;
 80006a8:	3701      	adds	r7, #1
 80006aa:	f8c6 7c20 	str.w	r7, [r6, #3104]	; 0xc20
	}

	return self->output_i32;
}
 80006ae:	6860      	ldr	r0, [r4, #4]
 80006b0:	ecbd 8b02 	vpop	{d8}
 80006b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	51eb851f 	.word	0x51eb851f
 80006bc:	40191eb8 	.word	0x40191eb8
 80006c0:	00017700 	.word	0x00017700

080006c4 <init_guitar_effect_delay>:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 			= 80000;	// 12ms delay
 80006c4:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <init_guitar_effect_delay+0x64>)
 80006ca:	f8c2 3c18 	str.w	r3, [r2, #3096]	; 0xc18
	self->modulation_on_u8 							= 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f882 3c10 	strb.w	r3, [r2, #3088]	; 0xc10
	self->parameters_st.modulation_counter_u32 		= 0;
 80006d4:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 80006d8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80006dc:	f8c2 1c1c 	str.w	r1, [r2, #3100]	; 0xc1c
	self->parameters_st.modulation_amplitude_i32	= 20;
 80006e0:	2114      	movs	r1, #20
 80006e2:	f8c2 1c24 	str.w	r1, [r2, #3108]	; 0xc24
	self->parameters_st.modulation_base_u32			= 50;
 80006e6:	2132      	movs	r1, #50	; 0x32
 80006e8:	f8c2 1c28 	str.w	r1, [r2, #3112]	; 0xc28
	self->parameters_st.mix_f32						= 0.3; 		// 50%
 80006ec:	f602 412c 	addw	r1, r2, #3116	; 0xc2c
 80006f0:	f8df c040 	ldr.w	ip, [pc, #64]	; 8000734 <init_guitar_effect_delay+0x70>
 80006f4:	f8c1 c000 	str.w	ip, [r1]
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 80006f8:	f602 4134 	addw	r1, r2, #3124	; 0xc34
 80006fc:	f04f 5c7c 	mov.w	ip, #1056964608	; 0x3f000000
 8000700:	f8c1 c000 	str.w	ip, [r1]


	self->current_counter_u32 = 0;
 8000704:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08

	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 8000708:	e004      	b.n	8000714 <init_guitar_effect_delay+0x50>
		self->buffer_ai32[i] = 0;
 800070a:	1c9a      	adds	r2, r3, #2
 800070c:	2100      	movs	r1, #0
 800070e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 8000712:	3301      	adds	r3, #1
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <init_guitar_effect_delay+0x68>)
 8000716:	4293      	cmp	r3, r2
 8000718:	ddf7      	ble.n	800070a <init_guitar_effect_delay+0x46>
	}
	// add function pointers
	self->callback = callback;
 800071a:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <init_guitar_effect_delay+0x6c>)
 8000720:	f8c0 3c38 	str.w	r3, [r0, #3128]	; 0xc38
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	00013880 	.word	0x00013880
 800072c:	000176ff 	.word	0x000176ff
 8000730:	080005a9 	.word	0x080005a9
 8000734:	3e99999a 	.word	0x3e99999a

08000738 <set_volumes>:



static void set_volumes(struct octave_effects_st* self){
	// reset output
	self->output_f32 = 0;
 8000738:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000780 <set_volumes+0x48>
 800073c:	ed80 7a06 	vstr	s14, [r0, #24]

	// calculate the new output defined by the voluem params
	self->output_f32 += self->input_f32 		* self->volumes_st.clean_f32;
 8000740:	edd0 7a05 	vldr	s15, [r0, #20]
 8000744:	edd0 6a02 	vldr	s13, [r0, #8]
 8000748:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800074c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000750:	edc0 7a06 	vstr	s15, [r0, #24]
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 8000754:	ed90 7a07 	vldr	s14, [r0, #28]
 8000758:	edd0 6a03 	vldr	s13, [r0, #12]
 800075c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000764:	edc0 7a06 	vstr	s15, [r0, #24]
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 8000768:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800076c:	edd0 6a01 	vldr	s13, [r0, #4]
 8000770:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000778:	edc0 7a06 	vstr	s15, [r0, #24]
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	00000000 	.word	0x00000000

08000784 <algorithm_octave_1_up>:
}

// Calculate the octave 1 HIGHER
static void algorithm_octave_1_up(struct octave_effects_st* self){
	// TODO
}
 8000784:	4770      	bx	lr

08000786 <algorithm_octave_1_down>:

// Calculate the octave 1 LOWER
static void algorithm_octave_1_down(struct octave_effects_st* self){
	// TODO
}
 8000786:	4770      	bx	lr

08000788 <subbandfilter_calculation>:
static void subbandfilter_calculation(struct octave_effects_st* self){
 8000788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800078c:	4604      	mov	r4, r0
  float32_t input_f32=self->input_f32;
 800078e:	f8d0 c014 	ldr.w	ip, [r0, #20]
  for(int i=0;i<numberofsubbands;i++){
 8000792:	2300      	movs	r3, #0
 8000794:	e012      	b.n	80007bc <subbandfilter_calculation+0x34>
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000796:	f103 01b6 	add.w	r1, r3, #182	; 0xb6
 800079a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800079e:	6808      	ldr	r0, [r1, #0]
 80007a0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80007a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80007a8:	6050      	str	r0, [r2, #4]
	  self->subbandfilter_dn1[i]		= self->subbandfilter_dn[i];
 80007aa:	f103 027e 	add.w	r2, r3, #126	; 0x7e
 80007ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80007b2:	6850      	ldr	r0, [r2, #4]
 80007b4:	6008      	str	r0, [r1, #0]
	  self->subbandfilter_dn[i]		= input_f32;
 80007b6:	f8c2 c004 	str.w	ip, [r2, #4]
  for(int i=0;i<numberofsubbands;i++){
 80007ba:	3301      	adds	r3, #1
 80007bc:	2b36      	cmp	r3, #54	; 0x36
 80007be:	ddea      	ble.n	8000796 <subbandfilter_calculation+0xe>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 80007c0:	f604 2594 	addw	r5, r4, #2708	; 0xa94
 80007c4:	2337      	movs	r3, #55	; 0x37
 80007c6:	462a      	mov	r2, r5
 80007c8:	f504 6192 	add.w	r1, r4, #1168	; 0x490
 80007cc:	482d      	ldr	r0, [pc, #180]	; (8000884 <subbandfilter_calculation+0xfc>)
 80007ce:	f005 fcc1 	bl	8006154 <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 80007d2:	f504 6737 	add.w	r7, r4, #2928	; 0xb70
 80007d6:	2337      	movs	r3, #55	; 0x37
 80007d8:	463a      	mov	r2, r7
 80007da:	f204 516c 	addw	r1, r4, #1388	; 0x56c
 80007de:	482a      	ldr	r0, [pc, #168]	; (8000888 <subbandfilter_calculation+0x100>)
 80007e0:	f005 fcb8 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 80007e4:	f604 464c 	addw	r6, r4, #3148	; 0xc4c
 80007e8:	2337      	movs	r3, #55	; 0x37
 80007ea:	4632      	mov	r2, r6
 80007ec:	4639      	mov	r1, r7
 80007ee:	4628      	mov	r0, r5
 80007f0:	f005 fd66 	bl	80062c0 <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 80007f4:	f604 6704 	addw	r7, r4, #3588	; 0xe04
 80007f8:	2337      	movs	r3, #55	; 0x37
 80007fa:	463a      	mov	r2, r7
 80007fc:	f504 7136 	add.w	r1, r4, #728	; 0x2d8
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <subbandfilter_calculation+0x104>)
 8000802:	f005 fca7 	bl	8006154 <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 8000806:	f504 686e 	add.w	r8, r4, #3808	; 0xee0
 800080a:	2337      	movs	r3, #55	; 0x37
 800080c:	4642      	mov	r2, r8
 800080e:	f504 716d 	add.w	r1, r4, #948	; 0x3b4
 8000812:	481f      	ldr	r0, [pc, #124]	; (8000890 <subbandfilter_calculation+0x108>)
 8000814:	f005 fc9e 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000818:	f604 75bc 	addw	r5, r4, #4028	; 0xfbc
 800081c:	2337      	movs	r3, #55	; 0x37
 800081e:	462a      	mov	r2, r5
 8000820:	4641      	mov	r1, r8
 8000822:	4638      	mov	r0, r7
 8000824:	f005 fd4c 	bl	80062c0 <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000828:	f604 5728 	addw	r7, r4, #3368	; 0xd28
 800082c:	2337      	movs	r3, #55	; 0x37
 800082e:	463a      	mov	r2, r7
 8000830:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 8000834:	4817      	ldr	r0, [pc, #92]	; (8000894 <subbandfilter_calculation+0x10c>)
 8000836:	f005 fc8d 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 800083a:	2337      	movs	r3, #55	; 0x37
 800083c:	462a      	mov	r2, r5
 800083e:	4639      	mov	r1, r7
 8000840:	4628      	mov	r0, r5
 8000842:	f005 fd3d 	bl	80062c0 <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000846:	2337      	movs	r3, #55	; 0x37
 8000848:	f504 7290 	add.w	r2, r4, #288	; 0x120
 800084c:	4631      	mov	r1, r6
 800084e:	4628      	mov	r0, r5
 8000850:	f005 fc26 	bl	80060a0 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000854:	2300      	movs	r3, #0
 8000856:	e010      	b.n	800087a <subbandfilter_calculation+0xf2>
	  self->subbandfilter_yn2[i]		= self->subbandfilter_yn1[i];
 8000858:	f503 7292 	add.w	r2, r3, #292	; 0x124
 800085c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000860:	6810      	ldr	r0, [r2, #0]
 8000862:	f503 71ad 	add.w	r1, r3, #346	; 0x15a
 8000866:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800086a:	6048      	str	r0, [r1, #4]
	  self->subbandfilter_yn1[i]		= self->subbandfilter_output[i];
 800086c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000870:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000874:	6809      	ldr	r1, [r1, #0]
 8000876:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000878:	3301      	adds	r3, #1
 800087a:	2b36      	cmp	r3, #54	; 0x36
 800087c:	ddec      	ble.n	8000858 <subbandfilter_calculation+0xd0>
}
 800087e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000882:	bf00      	nop
 8000884:	2400001c 	.word	0x2400001c
 8000888:	240000f8 	.word	0x240000f8
 800088c:	240005c8 	.word	0x240005c8
 8000890:	240002b0 	.word	0x240002b0
 8000894:	240001d4 	.word	0x240001d4

08000898 <octave1up>:
static arm_biquad_cascade_df2T_instance_f32 highpass_iir_50hz_octave2;
static volatile float32_t highpass_coeff[5]={0.99538200, -1.99076399, 0.99538200, 1.99074267, -0.99078531};
static volatile float32_t highpass_state[10];


static void octave1up(struct octave_effects_st* self){
 8000898:	b538      	push	{r3, r4, r5, lr}
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 800089a:	4d0a      	ldr	r5, [pc, #40]	; (80008c4 <octave1up+0x2c>)
 800089c:	2237      	movs	r2, #55	; 0x37
 800089e:	4629      	mov	r1, r5
 80008a0:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80008a4:	f005 fd66 	bl	8006374 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 80008a8:	4c07      	ldr	r4, [pc, #28]	; (80008c8 <octave1up+0x30>)
 80008aa:	4623      	mov	r3, r4
 80008ac:	2237      	movs	r2, #55	; 0x37
 80008ae:	4907      	ldr	r1, [pc, #28]	; (80008cc <octave1up+0x34>)
 80008b0:	4628      	mov	r0, r5
 80008b2:	f005 fca9 	bl	8006208 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 80008b6:	2301      	movs	r3, #1
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <octave1up+0x38>)
 80008ba:	4621      	mov	r1, r4
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <octave1up+0x3c>)
 80008be:	f005 fa27 	bl	8005d10 <arm_biquad_cascade_df2T_f32>
}
 80008c2:	bd38      	pop	{r3, r4, r5, pc}
 80008c4:	24000410 	.word	0x24000410
 80008c8:	24000408 	.word	0x24000408
 80008cc:	240004ec 	.word	0x240004ec
 80008d0:	2400040c 	.word	0x2400040c
 80008d4:	240003c8 	.word	0x240003c8

080008d8 <octave2up>:

static void octave2up(struct octave_effects_st* self){
 80008d8:	b538      	push	{r3, r4, r5, lr}
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 80008da:	4d0a      	ldr	r5, [pc, #40]	; (8000904 <octave2up+0x2c>)
 80008dc:	2237      	movs	r2, #55	; 0x37
 80008de:	4629      	mov	r1, r5
 80008e0:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80008e4:	f005 fd46 	bl	8006374 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 80008e8:	4c07      	ldr	r4, [pc, #28]	; (8000908 <octave2up+0x30>)
 80008ea:	4623      	mov	r3, r4
 80008ec:	2237      	movs	r2, #55	; 0x37
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <octave2up+0x34>)
 80008f0:	4628      	mov	r0, r5
 80008f2:	f005 fc89 	bl	8006208 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up_1, &octave1_up_filtered, 1);
 80008f6:	2301      	movs	r3, #1
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <octave2up+0x38>)
 80008fa:	4621      	mov	r1, r4
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <octave2up+0x3c>)
 80008fe:	f005 fa07 	bl	8005d10 <arm_biquad_cascade_df2T_f32>
}
 8000902:	bd38      	pop	{r3, r4, r5, pc}
 8000904:	24000410 	.word	0x24000410
 8000908:	24000408 	.word	0x24000408
 800090c:	240004ec 	.word	0x240004ec
 8000910:	2400040c 	.word	0x2400040c
 8000914:	240003d4 	.word	0x240003d4

08000918 <subbandfilter_octave2_calculation>:
void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800091c:	4604      	mov	r4, r0
  float32_t input_f32=self->input_f32;
 800091e:	f8d0 c014 	ldr.w	ip, [r0, #20]
  for(int i=0;i<numberofsubbands;i++){
 8000922:	2300      	movs	r3, #0
 8000924:	e012      	b.n	800094c <subbandfilter_octave2_calculation+0x34>
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000926:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
 800092a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800092e:	6848      	ldr	r0, [r1, #4]
 8000930:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000934:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000938:	6010      	str	r0, [r2, #0]
	  self->subbandfilter_octave2_dn1[i]=self->subbandfilter_octave2_dn[i];
 800093a:	f503 72c9 	add.w	r2, r3, #402	; 0x192
 800093e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000942:	6810      	ldr	r0, [r2, #0]
 8000944:	6048      	str	r0, [r1, #4]
	  self->subbandfilter_octave2_dn[i] = input_f32;
 8000946:	f8c2 c000 	str.w	ip, [r2]
  for(int i=0;i<numberofsubbands;i++){
 800094a:	3301      	adds	r3, #1
 800094c:	2b36      	cmp	r3, #54	; 0x36
 800094e:	ddea      	ble.n	8000926 <subbandfilter_octave2_calculation+0xe>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000950:	f604 2594 	addw	r5, r4, #2708	; 0xa94
 8000954:	2337      	movs	r3, #55	; 0x37
 8000956:	462a      	mov	r2, r5
 8000958:	f604 01dc 	addw	r1, r4, #2268	; 0x8dc
 800095c:	482d      	ldr	r0, [pc, #180]	; (8000a14 <subbandfilter_octave2_calculation+0xfc>)
 800095e:	f005 fbf9 	bl	8006154 <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000962:	f504 6737 	add.w	r7, r4, #2928	; 0xb70
 8000966:	2337      	movs	r3, #55	; 0x37
 8000968:	463a      	mov	r2, r7
 800096a:	f604 11b8 	addw	r1, r4, #2488	; 0x9b8
 800096e:	482a      	ldr	r0, [pc, #168]	; (8000a18 <subbandfilter_octave2_calculation+0x100>)
 8000970:	f005 fbf0 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000974:	f604 464c 	addw	r6, r4, #3148	; 0xc4c
 8000978:	2337      	movs	r3, #55	; 0x37
 800097a:	4632      	mov	r2, r6
 800097c:	4639      	mov	r1, r7
 800097e:	4628      	mov	r0, r5
 8000980:	f005 fc9e 	bl	80062c0 <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000984:	f604 6704 	addw	r7, r4, #3588	; 0xe04
 8000988:	2337      	movs	r3, #55	; 0x37
 800098a:	463a      	mov	r2, r7
 800098c:	f204 7124 	addw	r1, r4, #1828	; 0x724
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <subbandfilter_octave2_calculation+0x104>)
 8000992:	f005 fbdf 	bl	8006154 <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 8000996:	f504 686e 	add.w	r8, r4, #3808	; 0xee0
 800099a:	2337      	movs	r3, #55	; 0x37
 800099c:	4642      	mov	r2, r8
 800099e:	f504 6100 	add.w	r1, r4, #2048	; 0x800
 80009a2:	481f      	ldr	r0, [pc, #124]	; (8000a20 <subbandfilter_octave2_calculation+0x108>)
 80009a4:	f005 fbd6 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 80009a8:	f604 75bc 	addw	r5, r4, #4028	; 0xfbc
 80009ac:	2337      	movs	r3, #55	; 0x37
 80009ae:	462a      	mov	r2, r5
 80009b0:	4641      	mov	r1, r8
 80009b2:	4638      	mov	r0, r7
 80009b4:	f005 fc84 	bl	80062c0 <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 80009b8:	f604 5728 	addw	r7, r4, #3368	; 0xd28
 80009bc:	2337      	movs	r3, #55	; 0x37
 80009be:	463a      	mov	r2, r7
 80009c0:	f504 61c9 	add.w	r1, r4, #1608	; 0x648
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <subbandfilter_octave2_calculation+0x10c>)
 80009c6:	f005 fbc5 	bl	8006154 <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 80009ca:	2337      	movs	r3, #55	; 0x37
 80009cc:	462a      	mov	r2, r5
 80009ce:	4639      	mov	r1, r7
 80009d0:	4628      	mov	r0, r5
 80009d2:	f005 fc75 	bl	80062c0 <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 80009d6:	2337      	movs	r3, #55	; 0x37
 80009d8:	f504 7290 	add.w	r2, r4, #288	; 0x120
 80009dc:	4631      	mov	r1, r6
 80009de:	4628      	mov	r0, r5
 80009e0:	f005 fb5e 	bl	80060a0 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 80009e4:	2300      	movs	r3, #0
 80009e6:	e010      	b.n	8000a0a <subbandfilter_octave2_calculation+0xf2>
	  self->subbandfilter_octave2_yn2[i] 	= self->subbandfilter_octave2_yn1[i];
 80009e8:	f203 2236 	addw	r2, r3, #566	; 0x236
 80009ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80009f0:	6850      	ldr	r0, [r2, #4]
 80009f2:	f203 216e 	addw	r1, r3, #622	; 0x26e
 80009f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009fa:	6008      	str	r0, [r1, #0]
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 80009fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000a00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000a04:	6809      	ldr	r1, [r1, #0]
 8000a06:	6051      	str	r1, [r2, #4]
  for(int i=0;i<numberofsubbands;i++){
 8000a08:	3301      	adds	r3, #1
 8000a0a:	2b36      	cmp	r3, #54	; 0x36
 8000a0c:	ddec      	ble.n	80009e8 <subbandfilter_octave2_calculation+0xd0>
}
 8000a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a12:	bf00      	nop
 8000a14:	2400001c 	.word	0x2400001c
 8000a18:	240000f8 	.word	0x240000f8
 8000a1c:	240005c8 	.word	0x240005c8
 8000a20:	240002b0 	.word	0x240002b0
 8000a24:	240001d4 	.word	0x240001d4

08000a28 <callback_octave_effect>:
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	ee07 1a90 	vmov	s15, r1

	// 3. return value


	// LEGACY CODE
	self->input_f32 = (float32_t)input_i32;
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	edc0 7a05 	vstr	s15, [r0, #20]
	// +1 octave
	subbandfilter_calculation(self);
 8000a38:	f7ff fea6 	bl	8000788 <subbandfilter_calculation>
	octave1up(self);
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff ff2b 	bl	8000898 <octave1up>
	// save result
	self->octave_up_1_f32 = octave1_up_filtered;
 8000a42:	4d1a      	ldr	r5, [pc, #104]	; (8000aac <callback_octave_effect+0x84>)
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	61e3      	str	r3, [r4, #28]
//
	// +2 octave
	subbandfilter_octave2_calculation(self);
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f7ff ff65 	bl	8000918 <subbandfilter_octave2_calculation>
	octave2up(self);
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff ff42 	bl	80008d8 <octave2up>
	//		 save result
	self->octave_up_2_f32 = octave1_up_filtered;
 8000a54:	edd5 7a00 	vldr	s15, [r5]
 8000a58:	edc4 7a08 	vstr	s15, [r4, #32]

	// Write to DAC
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a5c:	ed94 7a07 	vldr	s14, [r4, #28]
 8000a60:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a64:	edd4 6a03 	vldr	s13, [r4, #12]
 8000a68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a6c:	ee27 7a26 	vmul.f32	s14, s14, s13
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a74:	edd4 6a04 	vldr	s13, [r4, #16]
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a80:	ee37 7a27 	vadd.f32	s14, s14, s15
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000a84:	edd4 7a05 	vldr	s15, [r4, #20]
 8000a88:	edd4 6a02 	vldr	s13, [r4, #8]
 8000a8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a98:	ee77 7a87 	vadd.f32	s15, s15, s14
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a9c:	edc4 7a06 	vstr	s15, [r4, #24]

	return self->output_f32;
}
 8000aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa4:	ee17 0a90 	vmov	r0, s15
 8000aa8:	bd38      	pop	{r3, r4, r5, pc}
 8000aaa:	bf00      	nop
 8000aac:	2400040c 	.word	0x2400040c

08000ab0 <init_guitar_effect_octave>:


void init_guitar_effect_octave(octave_effects_tst* self){
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4604      	mov	r4, r0

	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000ab4:	4e2f      	ldr	r6, [pc, #188]	; (8000b74 <init_guitar_effect_octave+0xc4>)
 8000ab6:	4d30      	ldr	r5, [pc, #192]	; (8000b78 <init_guitar_effect_octave+0xc8>)
 8000ab8:	4633      	mov	r3, r6
 8000aba:	462a      	mov	r2, r5
 8000abc:	2101      	movs	r1, #1
 8000abe:	482f      	ldr	r0, [pc, #188]	; (8000b7c <init_guitar_effect_octave+0xcc>)
 8000ac0:	f005 fae2 	bl	8006088 <arm_biquad_cascade_df2T_init_f32>
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 8000ac4:	4633      	mov	r3, r6
 8000ac6:	462a      	mov	r2, r5
 8000ac8:	2101      	movs	r1, #1
 8000aca:	482d      	ldr	r0, [pc, #180]	; (8000b80 <init_guitar_effect_octave+0xd0>)
 8000acc:	f005 fadc 	bl	8006088 <arm_biquad_cascade_df2T_init_f32>
	// assign function pointers
	self->set_volumes			= set_volumes;
 8000ad0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	; (8000b84 <init_guitar_effect_octave+0xd4>)
 8000ad6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <init_guitar_effect_octave+0xd8>)
 8000adc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8000ae0:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <init_guitar_effect_octave+0xdc>)
 8000ae2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	self->callback 				= callback_octave_effect;
 8000ae6:	4a2a      	ldr	r2, [pc, #168]	; (8000b90 <init_guitar_effect_octave+0xe0>)
 8000ae8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	self->volumes_st.up_1_f32 = 1;
 8000aec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000af0:	60e3      	str	r3, [r4, #12]
	self->volumes_st.up_2_f32 = 1;
 8000af2:	6123      	str	r3, [r4, #16]
	self->volumes_st.clean_f32      = 1;
 8000af4:	60a3      	str	r3, [r4, #8]
	for(int i=0; i<numberofsubbands;i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	e039      	b.n	8000b6e <init_guitar_effect_octave+0xbe>
		subband_ones[i] = 1;
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <init_guitar_effect_octave+0xe4>)
 8000afc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000b04:	6011      	str	r1, [r2, #0]
		self->subbandfilter_dn2[i]		=	0;
 8000b06:	f103 01ec 	add.w	r1, r3, #236	; 0xec
 8000b0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	604a      	str	r2, [r1, #4]
		self->subbandfilter_dn1[i]		=	0;
 8000b12:	f103 01b6 	add.w	r1, r3, #182	; 0xb6
 8000b16:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b1a:	600a      	str	r2, [r1, #0]
		self->subbandfilter_dn[i]		=	0;
 8000b1c:	f103 017e 	add.w	r1, r3, #126	; 0x7e
 8000b20:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b24:	604a      	str	r2, [r1, #4]
		self->subbandfilter_yn1[i] 		= 	0;
 8000b26:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8000b2a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b2e:	600a      	str	r2, [r1, #0]
		self->subbandfilter_yn2[i] 		= 	0;
 8000b30:	f503 71ad 	add.w	r1, r3, #346	; 0x15a
 8000b34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b38:	604a      	str	r2, [r1, #4]

		self->subbandfilter_octave2_dn[i]		=	0;
 8000b3a:	f503 71c9 	add.w	r1, r3, #402	; 0x192
 8000b3e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b42:	600a      	str	r2, [r1, #0]
		self->subbandfilter_octave2_dn1[i]		=	0;
 8000b44:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
 8000b48:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b4c:	604a      	str	r2, [r1, #4]
		self->subbandfilter_octave2_dn2[i]		=	0;
 8000b4e:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8000b52:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b56:	600a      	str	r2, [r1, #0]
		self->subbandfilter_octave2_yn1[i] 		= 	0;
 8000b58:	f203 2136 	addw	r1, r3, #566	; 0x236
 8000b5c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b60:	604a      	str	r2, [r1, #4]
		self->subbandfilter_octave2_yn2[i] 		= 	0;
 8000b62:	f203 216e 	addw	r1, r3, #622	; 0x26e
 8000b66:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b6a:	600a      	str	r2, [r1, #0]
	for(int i=0; i<numberofsubbands;i++){
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	2b36      	cmp	r3, #54	; 0x36
 8000b70:	ddc3      	ble.n	8000afa <init_guitar_effect_octave+0x4a>
	}

	// zero out the IIR filter states


}
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	240003e0 	.word	0x240003e0
 8000b78:	24000008 	.word	0x24000008
 8000b7c:	240003c8 	.word	0x240003c8
 8000b80:	240003d4 	.word	0x240003d4
 8000b84:	08000739 	.word	0x08000739
 8000b88:	08000787 	.word	0x08000787
 8000b8c:	08000785 	.word	0x08000785
 8000b90:	08000a29 	.word	0x08000a29
 8000b94:	240004ec 	.word	0x240004ec

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b510      	push	{r4, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9307      	str	r3, [sp, #28]
 8000ba0:	9308      	str	r3, [sp, #32]
 8000ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8000ba6:	930b      	str	r3, [sp, #44]	; 0x2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_GPIO_Init+0xcc>)
 8000baa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bc6:	f042 0204 	orr.w	r2, r2, #4
 8000bca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd2:	f002 0204 	and.w	r2, r2, #4
 8000bd6:	9202      	str	r2, [sp, #8]
 8000bd8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bde:	f042 0201 	orr.w	r2, r2, #1
 8000be2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bea:	f002 0201 	and.w	r2, r2, #1
 8000bee:	9203      	str	r2, [sp, #12]
 8000bf0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bf6:	f042 0202 	orr.w	r2, r2, #2
 8000bfa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c02:	f002 0202 	and.w	r2, r2, #2
 8000c06:	9204      	str	r2, [sp, #16]
 8000c08:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c0e:	f042 0220 	orr.w	r2, r2, #32
 8000c12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c1a:	f002 0220 	and.w	r2, r2, #32
 8000c1e:	9205      	str	r2, [sp, #20]
 8000c20:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	9306      	str	r3, [sp, #24]
 8000c38:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000c3a:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <MX_GPIO_Init+0xd0>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c42:	4620      	mov	r0, r4
 8000c44:	f002 f88a 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_CS_Pin */
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c52:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000c58:	a907      	add	r1, sp, #28
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f001 ff6e 	bl	8002b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	b00c      	add	sp, #48	; 0x30
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58021400 	.word	0x58021400

08000c6c <MX_DMA_Init>:
{
 8000c6c:	b500      	push	{lr}
 8000c6e:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_DMA_Init+0x5c>)
 8000c72:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c76:	f042 0202 	orr.w	r2, r2, #2
 8000c7a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c7e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c82:	f002 0202 	and.w	r2, r2, #2
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f000 fe24 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cac:	200b      	movs	r0, #11
 8000cae:	f000 fe57 	bl	8001960 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2039      	movs	r0, #57	; 0x39
 8000cb8:	f000 fe1c 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cbc:	2039      	movs	r0, #57	; 0x39
 8000cbe:	f000 fe4f 	bl	8001960 <HAL_NVIC_EnableIRQ>
}
 8000cc2:	b003      	add	sp, #12
 8000cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc8:	58024400 	.word	0x58024400

08000ccc <Do_HighPass>:
int Do_HighPass (int inSample) {
 8000ccc:	ee07 0a10 	vmov	s14, r0
		a0 = 0.9547676565107223;
 8000cd0:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8000d58 <Do_HighPass+0x8c>
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <Do_HighPass+0x90>)
 8000cd6:	ed83 6a00 	vstr	s12, [r3]
		a1 = -1.9095353130214445;
 8000cda:	eddf 5a21 	vldr	s11, [pc, #132]	; 8000d60 <Do_HighPass+0x94>
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <Do_HighPass+0x98>)
 8000ce0:	edc3 5a00 	vstr	s11, [r3]
		a2 = 0.9547676565107223;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <Do_HighPass+0x9c>)
 8000ce6:	ed83 6a00 	vstr	s12, [r3]
		b1 =-1.9074888914066748;
 8000cea:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000d6c <Do_HighPass+0xa0>
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <Do_HighPass+0xa4>)
 8000cf0:	edc3 6a00 	vstr	s13, [r3]
		b2 =0.9115817346362142;
 8000cf4:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8000d74 <Do_HighPass+0xa8>
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <Do_HighPass+0xac>)
 8000cfa:	edc3 4a00 	vstr	s9, [r3]
	float inSampleF = (float)inSample;
 8000cfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			a0 * inSampleF
 8000d02:	ee67 7a06 	vmul.f32	s15, s14, s12
			+ a1 * hp_in_z1
 8000d06:	491d      	ldr	r1, [pc, #116]	; (8000d7c <Do_HighPass+0xb0>)
 8000d08:	ed91 5a00 	vldr	s10, [r1]
 8000d0c:	ee65 5a25 	vmul.f32	s11, s10, s11
 8000d10:	ee77 7aa5 	vadd.f32	s15, s15, s11
			+ a2 * hp_in_z2
 8000d14:	481a      	ldr	r0, [pc, #104]	; (8000d80 <Do_HighPass+0xb4>)
 8000d16:	edd0 5a00 	vldr	s11, [r0]
 8000d1a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8000d1e:	ee77 7a86 	vadd.f32	s15, s15, s12
			- b1 * hp_out_z1
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <Do_HighPass+0xb8>)
 8000d24:	ed93 6a00 	vldr	s12, [r3]
 8000d28:	ee66 6a26 	vmul.f32	s13, s12, s13
 8000d2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
			- b2 * hp_out_z2;
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <Do_HighPass+0xbc>)
 8000d32:	edd2 6a00 	vldr	s13, [r2]
 8000d36:	ee66 6aa4 	vmul.f32	s13, s13, s9
	float outSampleF =
 8000d3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
	hp_in_z2 = hp_in_z1;
 8000d3e:	ed80 5a00 	vstr	s10, [r0]
	hp_in_z1 = inSampleF;
 8000d42:	ed81 7a00 	vstr	s14, [r1]
	hp_out_z2 = hp_out_z1;
 8000d46:	ed82 6a00 	vstr	s12, [r2]
	hp_out_z1 = outSampleF;
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
}
 8000d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d52:	ee17 0a90 	vmov	r0, s15
 8000d56:	4770      	bx	lr
 8000d58:	3f746ba7 	.word	0x3f746ba7
 8000d5c:	2400a2f8 	.word	0x2400a2f8
 8000d60:	bff46ba7 	.word	0xbff46ba7
 8000d64:	2400a2fc 	.word	0x2400a2fc
 8000d68:	2400a300 	.word	0x2400a300
 8000d6c:	bff42899 	.word	0xbff42899
 8000d70:	2400a308 	.word	0x2400a308
 8000d74:	3f695d6c 	.word	0x3f695d6c
 8000d78:	2400a30c 	.word	0x2400a30c
 8000d7c:	2406812c 	.word	0x2406812c
 8000d80:	24068130 	.word	0x24068130
 8000d84:	24068134 	.word	0x24068134
 8000d88:	24068138 	.word	0x24068138

08000d8c <Do_PitchShift>:
int Do_PitchShift(int sample) {
 8000d8c:	b508      	push	{r3, lr}
	int sum = Do_HighPass(sample);
 8000d8e:	f7ff ff9d 	bl	8000ccc <Do_HighPass>
	Buf[WtrP] = sum;
 8000d92:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b6b      	ldr	r3, [pc, #428]	; (8000f44 <Do_PitchShift+0x1b8>)
 8000d98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	int RdPtr_Int = roundf(Rd_P);
 8000d9c:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <Do_PitchShift+0x1bc>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	fef8 7a67 	vrinta.f32	s15, s15
 8000da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000daa:	ee17 3a90 	vmov	r3, s15
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000dae:	4a67      	ldr	r2, [pc, #412]	; (8000f4c <Do_PitchShift+0x1c0>)
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	db3d      	blt.n	8000e32 <Do_PitchShift+0xa6>
 8000db6:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8000dba:	db3e      	blt.n	8000e3a <Do_PitchShift+0xae>
 8000dbc:	4a63      	ldr	r2, [pc, #396]	; (8000f4c <Do_PitchShift+0x1c0>)
 8000dbe:	6811      	ldr	r1, [r2, #0]
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	db38      	blt.n	8000e36 <Do_PitchShift+0xaa>
 8000dc4:	eba3 0161 	sub.w	r1, r3, r1, asr #1
	float Rd0 = (float) Buf[RdPtr_Int];
 8000dc8:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <Do_PitchShift+0x1b8>)
 8000dca:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8000dce:	ed90 7a00 	vldr	s14, [r0]
 8000dd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000dd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000dda:	edd2 6a00 	vldr	s13, [r2]
 8000dde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000de2:	4a57      	ldr	r2, [pc, #348]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4859      	ldr	r0, [pc, #356]	; (8000f50 <Do_PitchShift+0x1c4>)
 8000dea:	6800      	ldr	r0, [r0, #0]
 8000dec:	4282      	cmp	r2, r0
 8000dee:	dc2d      	bgt.n	8000e4c <Do_PitchShift+0xc0>
 8000df0:	4a53      	ldr	r2, [pc, #332]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	db28      	blt.n	8000e4c <Do_PitchShift+0xc0>
 8000dfa:	4a56      	ldr	r2, [pc, #344]	; (8000f54 <Do_PitchShift+0x1c8>)
 8000dfc:	ed92 6a00 	vldr	s12, [r2]
 8000e00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e04:	eeb4 6a67 	vcmp.f32	s12, s15
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d01e      	beq.n	8000e4c <Do_PitchShift+0xc0>
		int rel = WtrP-RdPtr_Int;
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000e10:	6812      	ldr	r2, [r2, #0]
 8000e12:	1ad2      	subs	r2, r2, r3
		CrossFade = ((float)rel)/(float)Overlap;
 8000e14:	ee07 2a90 	vmov	s15, r2
 8000e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	; (8000f50 <Do_PitchShift+0x1c4>)
 8000e1e:	ed93 6a00 	vldr	s12, [r3]
 8000e22:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000e26:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <Do_PitchShift+0x1cc>)
 8000e2c:	edc3 5a00 	vstr	s11, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000e30:	e010      	b.n	8000e54 <Do_PitchShift+0xc8>
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000e32:	3201      	adds	r2, #1
 8000e34:	e7bf      	b.n	8000db6 <Do_PitchShift+0x2a>
 8000e36:	3101      	adds	r1, #1
 8000e38:	e7c4      	b.n	8000dc4 <Do_PitchShift+0x38>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000e3a:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <Do_PitchShift+0x1c0>)
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	db02      	blt.n	8000e48 <Do_PitchShift+0xbc>
 8000e42:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8000e46:	e7bf      	b.n	8000dc8 <Do_PitchShift+0x3c>
 8000e48:	3101      	adds	r1, #1
 8000e4a:	e7fa      	b.n	8000e42 <Do_PitchShift+0xb6>
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d02b      	beq.n	8000eac <Do_PitchShift+0x120>
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <Do_PitchShift+0x1c4>)
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	dc28      	bgt.n	8000eb4 <Do_PitchShift+0x128>
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1a5b      	subs	r3, r3, r1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db23      	blt.n	8000eb4 <Do_PitchShift+0x128>
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <Do_PitchShift+0x1c8>)
 8000e6e:	ed93 6a00 	vldr	s12, [r3]
 8000e72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e76:	eeb4 6a67 	vcmp.f32	s12, s15
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d019      	beq.n	8000eb4 <Do_PitchShift+0x128>
			int rel = WtrP-RdPtr_Int2;
 8000e80:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1a5b      	subs	r3, r3, r1
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <Do_PitchShift+0x1c4>)
 8000e90:	ed93 6a00 	vldr	s12, [r3]
 8000e94:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000e98:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8000e9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ea0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <Do_PitchShift+0x1cc>)
 8000ea6:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000eaa:	e007      	b.n	8000ebc <Do_PitchShift+0x130>
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <Do_PitchShift+0x1cc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e7cf      	b.n	8000e54 <Do_PitchShift+0xc8>
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d038      	beq.n	8000f2e <Do_PitchShift+0x1a2>
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <Do_PitchShift+0x1cc>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec6:	ed93 6a00 	vldr	s12, [r3]
 8000eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ece:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000ed2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Rd_P += Shift;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <Do_PitchShift+0x1bc>)
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <Do_PitchShift+0x1c8>)
 8000ee6:	edd2 6a00 	vldr	s13, [r2]
 8000eea:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000eee:	ed83 7a00 	vstr	s14, [r3]
	WtrP++;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	3201      	adds	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
	if (WtrP == BufSize) WtrP = 0;
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <Do_PitchShift+0x1c0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d019      	beq.n	8000f38 <Do_PitchShift+0x1ac>
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <Do_PitchShift+0x1bc>)
 8000f06:	edd3 6a00 	vldr	s13, [r3]
 8000f0a:	fef8 6a66 	vrinta.f32	s13, s13
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <Do_PitchShift+0x1c0>)
 8000f10:	ed93 7a00 	vldr	s14, [r3]
 8000f14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	db02      	blt.n	8000f28 <Do_PitchShift+0x19c>
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <Do_PitchShift+0x1bc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	ee17 0a90 	vmov	r0, s15
 8000f2c:	bd08      	pop	{r3, pc}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <Do_PitchShift+0x1cc>)
 8000f30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e7c1      	b.n	8000ebc <Do_PitchShift+0x130>
	if (WtrP == BufSize) WtrP = 0;
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <Do_PitchShift+0x1b4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e7e1      	b.n	8000f04 <Do_PitchShift+0x178>
 8000f40:	2400a2f4 	.word	0x2400a2f4
 8000f44:	240006a8 	.word	0x240006a8
 8000f48:	2400a2f0 	.word	0x2400a2f0
 8000f4c:	2400038c 	.word	0x2400038c
 8000f50:	24000390 	.word	0x24000390
 8000f54:	24000394 	.word	0x24000394
 8000f58:	2400a2e8 	.word	0x2400a2e8

08000f5c <HAL_I2S_RxHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000f5e:	f002 031f 	and.w	r3, r2, #31
 8000f62:	3310      	adds	r3, #16
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000f6a:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f6e:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f70:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	dcf8      	bgt.n	8000f68 <HAL_I2S_RxHalfCpltCallback+0xc>
 8000f76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f7a:	f3bf 8f6f 	isb	sy
	ADC_READY_FLAG = 1;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 8000f84:	4904      	ldr	r1, [pc, #16]	; (8000f98 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000f86:	880b      	ldrh	r3, [r1, #0]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_I2S_RxHalfCpltCallback+0x48>)
 8000f8c:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 8000f8e:	884b      	ldrh	r3, [r1, #2]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	8053      	strh	r3, [r2, #2]
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	24069284 	.word	0x24069284
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	240006a4 	.word	0x240006a4
 8000fa4:	2400a304 	.word	0x2400a304

08000fa8 <HAL_I2S_RxCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x3c>)
 8000faa:	f002 031f 	and.w	r3, r2, #31
 8000fae:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <HAL_I2S_RxCpltCallback+0x40>)
 8000fb6:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000fba:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fbc:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dcf8      	bgt.n	8000fb4 <HAL_I2S_RxCpltCallback+0xc>
 8000fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
	ADC_READY_FLAG = 1;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_I2S_RxCpltCallback+0x44>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000fd0:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x3c>)
 8000fd2:	890b      	ldrh	r3, [r1, #8]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_I2S_RxCpltCallback+0x48>)
 8000fd8:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000fda:	894b      	ldrh	r3, [r1, #10]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	8053      	strh	r3, [r2, #2]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	24069284 	.word	0x24069284
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	240006a4 	.word	0x240006a4
 8000ff0:	2400a304 	.word	0x2400a304

08000ff4 <HAL_I2S_TxHalfCpltCallback>:
	DAC_HALF_COMPLETE_FLAG = 1;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8000ffc:	f002 031f 	and.w	r3, r2, #31
 8001000:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 8001002:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <HAL_I2S_TxHalfCpltCallback+0x34>)
 8001008:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800100c:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800100e:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001010:	2b00      	cmp	r3, #0
 8001012:	dcf8      	bgt.n	8001006 <HAL_I2S_TxHalfCpltCallback+0x12>
 8001014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001018:	f3bf 8f6f 	isb	sy
}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2400a2ec 	.word	0x2400a2ec
 8001024:	240681c4 	.word	0x240681c4
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <HAL_I2S_TxCpltCallback>:
	DAC_HALF_COMPLETE_FLAG = 0;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_I2S_TxCpltCallback+0x2c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_I2S_TxCpltCallback+0x30>)
 8001034:	f002 031f 	and.w	r3, r2, #31
 8001038:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 800103a:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <HAL_I2S_TxCpltCallback+0x34>)
 8001040:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001044:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001046:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001048:	2b00      	cmp	r3, #0
 800104a:	dcf8      	bgt.n	800103e <HAL_I2S_TxCpltCallback+0x12>
 800104c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001050:	f3bf 8f6f 	isb	sy
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2400a2ec 	.word	0x2400a2ec
 800105c:	240681c4 	.word	0x240681c4
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001066:	e7fe      	b.n	8001066 <Error_Handler+0x2>

08001068 <MX_I2S2_Init>:
{
 8001068:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <MX_I2S2_Init+0x40>)
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2S2_Init+0x44>)
 800106e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001070:	2304      	movs	r3, #4
 8001072:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001074:	2300      	movs	r3, #0
 8001076:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800107e:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001080:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001084:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001086:	6183      	str	r3, [r0, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001088:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 800108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108e:	6203      	str	r3, [r0, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8001090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001094:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8001096:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800109a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800109c:	f001 feaa 	bl	8002df4 <HAL_I2S_Init>
 80010a0:	b900      	cbnz	r0, 80010a4 <MX_I2S2_Init+0x3c>
}
 80010a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010a4:	f7ff ffde 	bl	8001064 <Error_Handler>
 80010a8:	240680b4 	.word	0x240680b4
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_SPI3_Init>:
{
 80010b0:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_SPI3_Init+0x54>)
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI3_Init+0x58>)
 80010b6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010bc:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	2300      	movs	r3, #0
 80010c0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c2:	2207      	movs	r2, #7
 80010c4:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c6:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c8:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010ce:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010d4:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d6:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010da:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80010dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e4:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010e6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010e8:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ea:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010ec:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ee:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010f0:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010f2:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010f4:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010f6:	f004 fbb9 	bl	800586c <HAL_SPI_Init>
 80010fa:	b900      	cbnz	r0, 80010fe <MX_SPI3_Init+0x4e>
}
 80010fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010fe:	f7ff ffb1 	bl	8001064 <Error_Handler>
 8001102:	bf00      	nop
 8001104:	2406813c 	.word	0x2406813c
 8001108:	40003c00 	.word	0x40003c00

0800110c <MX_I2S1_Init>:
{
 800110c:	b508      	push	{r3, lr}
  hi2s1.Instance = SPI1;
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_I2S1_Init+0x38>)
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_I2S1_Init+0x3c>)
 8001112:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8001114:	2306      	movs	r3, #6
 8001116:	6043      	str	r3, [r0, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001118:	2300      	movs	r3, #0
 800111a:	6083      	str	r3, [r0, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	60c2      	str	r2, [r0, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001122:	6103      	str	r3, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001124:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001128:	6142      	str	r2, [r0, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800112a:	6183      	str	r3, [r0, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800112c:	61c3      	str	r3, [r0, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800112e:	6203      	str	r3, [r0, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8001130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001134:	6242      	str	r2, [r0, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001136:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001138:	f001 fe5c 	bl	8002df4 <HAL_I2S_Init>
 800113c:	b900      	cbnz	r0, 8001140 <MX_I2S1_Init+0x34>
}
 800113e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001140:	f7ff ff90 	bl	8001064 <Error_Handler>
 8001144:	2406803c 	.word	0x2406803c
 8001148:	40013000 	.word	0x40013000

0800114c <SystemClock_Config>:
{
 800114c:	b500      	push	{lr}
 800114e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001150:	224c      	movs	r2, #76	; 0x4c
 8001152:	2100      	movs	r1, #0
 8001154:	a80b      	add	r0, sp, #44	; 0x2c
 8001156:	f005 f951 	bl	80063fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115a:	2220      	movs	r2, #32
 800115c:	2100      	movs	r1, #0
 800115e:	a803      	add	r0, sp, #12
 8001160:	f005 f94c 	bl	80063fc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001164:	2002      	movs	r0, #2
 8001166:	f001 ffed 	bl	8003144 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116a:	2300      	movs	r3, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <SystemClock_Config+0x108>)
 8001170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <SystemClock_Config+0x10c>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <SystemClock_Config+0x10c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800119c:	d0fa      	beq.n	8001194 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <SystemClock_Config+0x110>)
 80011a0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80011a4:	f042 0202 	orr.w	r2, r2, #2
 80011a8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80011ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011b8:	2300      	movs	r3, #0
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <SystemClock_Config+0x10c>)
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <SystemClock_Config+0x108>)
 80011d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <SystemClock_Config+0x10c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80011ea:	d0fa      	beq.n	80011e2 <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f6:	2302      	movs	r3, #2
 80011f8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fa:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80011fc:	2205      	movs	r2, #5
 80011fe:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001200:	21c0      	movs	r1, #192	; 0xc0
 8001202:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001204:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001206:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001208:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800120a:	2308      	movs	r3, #8
 800120c:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800120e:	2300      	movs	r3, #0
 8001210:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001212:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	a80b      	add	r0, sp, #44	; 0x2c
 8001216:	f001 ffdf 	bl	80031d8 <HAL_RCC_OscConfig>
 800121a:	b9b0      	cbnz	r0, 800124a <SystemClock_Config+0xfe>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	233f      	movs	r3, #63	; 0x3f
 800121e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2303      	movs	r3, #3
 8001222:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001228:	2308      	movs	r3, #8
 800122a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800122c:	2340      	movs	r3, #64	; 0x40
 800122e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001230:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001236:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001238:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123a:	2104      	movs	r1, #4
 800123c:	a803      	add	r0, sp, #12
 800123e:	f002 fc1f 	bl	8003a80 <HAL_RCC_ClockConfig>
 8001242:	b920      	cbnz	r0, 800124e <SystemClock_Config+0x102>
}
 8001244:	b01f      	add	sp, #124	; 0x7c
 8001246:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800124a:	f7ff ff0b 	bl	8001064 <Error_Handler>
    Error_Handler();
 800124e:	f7ff ff09 	bl	8001064 <Error_Handler>
 8001252:	bf00      	nop
 8001254:	58000400 	.word	0x58000400
 8001258:	58024800 	.word	0x58024800
 800125c:	58024400 	.word	0x58024400

08001260 <main>:
{
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	b085      	sub	sp, #20
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001264:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <main+0x194>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800126c:	d113      	bne.n	8001296 <main+0x36>
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001272:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <main+0x194>)
 8001278:	2200      	movs	r2, #0
 800127a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001282:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800128c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001292:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001296:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <main+0x194>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800129e:	d127      	bne.n	80012f0 <main+0x90>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012a0:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <main+0x194>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012a8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80012ac:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012b0:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80012b4:	e000      	b.n	80012b8 <main+0x58>
    } while(sets-- != 0U);
 80012b6:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012b8:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012c0:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80012c4:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80012c8:	494a      	ldr	r1, [pc, #296]	; (80013f4 <main+0x194>)
 80012ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80012ce:	4613      	mov	r3, r2
 80012d0:	3a01      	subs	r2, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f2      	bne.n	80012bc <main+0x5c>
    } while(sets-- != 0U);
 80012d6:	1e43      	subs	r3, r0, #1
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1ec      	bne.n	80012b6 <main+0x56>
 80012dc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012e0:	694b      	ldr	r3, [r1, #20]
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	614b      	str	r3, [r1, #20]
 80012e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012ec:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80012f0:	f000 fa94 	bl	800181c <HAL_Init>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4c40      	ldr	r4, [pc, #256]	; (80013f8 <main+0x198>)
 80012f6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8001302:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	9b01      	ldr	r3, [sp, #4]
  SystemClock_Config();
 800130e:	f7ff ff1d 	bl	800114c <SystemClock_Config>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8001316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800131a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800131e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8001322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	9b02      	ldr	r3, [sp, #8]
  MX_GPIO_Init();
 800132a:	f7ff fc35 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 800132e:	f7ff fc9d 	bl	8000c6c <MX_DMA_Init>
  MX_I2S2_Init();
 8001332:	f7ff fe99 	bl	8001068 <MX_I2S2_Init>
  MX_SPI3_Init();
 8001336:	f7ff febb 	bl	80010b0 <MX_SPI3_Init>
  MX_I2S1_Init();
 800133a:	f7ff fee7 	bl	800110c <MX_I2S1_Init>
  for(int i=0; i<4; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	e007      	b.n	8001352 <main+0xf2>
	  my_data[i] = 0x0000;
 8001342:	2200      	movs	r2, #0
 8001344:	492d      	ldr	r1, [pc, #180]	; (80013fc <main+0x19c>)
 8001346:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  rx_data_i2s[i]= 0x0000;
 800134a:	492d      	ldr	r1, [pc, #180]	; (8001400 <main+0x1a0>)
 800134c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0; i<4; i++){
 8001350:	3301      	adds	r3, #1
 8001352:	2b03      	cmp	r3, #3
 8001354:	ddf5      	ble.n	8001342 <main+0xe2>
  ad1939_init(&hspi3);
 8001356:	482b      	ldr	r0, [pc, #172]	; (8001404 <main+0x1a4>)
 8001358:	f7ff f888 	bl	800046c <ad1939_init>
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 800135c:	2204      	movs	r2, #4
 800135e:	4927      	ldr	r1, [pc, #156]	; (80013fc <main+0x19c>)
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <main+0x1a8>)
 8001362:	f001 fe27 	bl	8002fb4 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 8001366:	2204      	movs	r2, #4
 8001368:	4925      	ldr	r1, [pc, #148]	; (8001400 <main+0x1a0>)
 800136a:	4828      	ldr	r0, [pc, #160]	; (800140c <main+0x1ac>)
 800136c:	f001 fe86 	bl	800307c <HAL_I2S_Receive_DMA>
  init_guitar_effect_delay(&delay_effect);
 8001370:	4827      	ldr	r0, [pc, #156]	; (8001410 <main+0x1b0>)
 8001372:	f7ff f9a7 	bl	80006c4 <init_guitar_effect_delay>
  init_guitar_effect_octave(&octave_effects_st);
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <main+0x1b4>)
 8001378:	f7ff fb9a 	bl	8000ab0 <init_guitar_effect_octave>
	volatile float32_t len_f32 = 48000;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <main+0x1b8>)
 800137e:	9303      	str	r3, [sp, #12]
	int state = 1;
 8001380:	e009      	b.n	8001396 <main+0x136>
		int32_t value_from_ADC = adc_data_bf.value/2; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 8001382:	3401      	adds	r4, #1
 8001384:	e012      	b.n	80013ac <main+0x14c>
			my_data[6] = output_buffer.raw_low;
 8001386:	4925      	ldr	r1, [pc, #148]	; (800141c <main+0x1bc>)
 8001388:	880b      	ldrh	r3, [r1, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <main+0x19c>)
 800138e:	8193      	strh	r3, [r2, #12]
			my_data[7] = output_buffer.raw_high;
 8001390:	884b      	ldrh	r3, [r1, #2]
 8001392:	b29b      	uxth	r3, r3
 8001394:	81d3      	strh	r3, [r2, #14]
	  if (ADC_READY_FLAG){
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <main+0x1c0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0fb      	beq.n	8001396 <main+0x136>
		  ADC_READY_FLAG  = 0;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <main+0x1c0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
		int32_t value_from_ADC = adc_data_bf.value/2; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <main+0x1c4>)
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	4294      	cmp	r4, r2
 80013aa:	dbea      	blt.n	8001382 <main+0x122>
 80013ac:	1064      	asrs	r4, r4, #1
		output_buffer.value =octave_effects_st.callback(&octave_effects_st,value_from_ADC);
 80013ae:	4819      	ldr	r0, [pc, #100]	; (8001414 <main+0x1b4>)
 80013b0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80013b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013b8:	4621      	mov	r1, r4
 80013ba:	4798      	blx	r3
 80013bc:	4d17      	ldr	r5, [pc, #92]	; (800141c <main+0x1bc>)
 80013be:	6028      	str	r0, [r5, #0]
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_buffer.value;
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fce3 	bl	8000d8c <Do_PitchShift>
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	4418      	add	r0, r3
 80013ca:	6028      	str	r0, [r5, #0]
		output_buffer.value = delay_effect.callback(&delay_effect,value_from_ADC);
 80013cc:	4810      	ldr	r0, [pc, #64]	; (8001410 <main+0x1b0>)
 80013ce:	f500 23ba 	add.w	r3, r0, #380928	; 0x5d000
 80013d2:	f8d3 3c38 	ldr.w	r3, [r3, #3128]	; 0xc38
 80013d6:	4621      	mov	r1, r4
 80013d8:	4798      	blx	r3
 80013da:	6028      	str	r0, [r5, #0]
		if ( DAC_HALF_COMPLETE_FLAG) {
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <main+0x1c8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0d0      	beq.n	8001386 <main+0x126>
			my_data[2] = output_buffer.raw_low;
 80013e4:	882b      	ldrh	r3, [r5, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <main+0x19c>)
 80013ea:	8093      	strh	r3, [r2, #4]
			my_data[3] = output_buffer.raw_high;
 80013ec:	886b      	ldrh	r3, [r5, #2]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	80d3      	strh	r3, [r2, #6]
 80013f2:	e7d0      	b.n	8001396 <main+0x136>
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	58024400 	.word	0x58024400
 80013fc:	240681c4 	.word	0x240681c4
 8001400:	24069284 	.word	0x24069284
 8001404:	2406813c 	.word	0x2406813c
 8001408:	240680b4 	.word	0x240680b4
 800140c:	2406803c 	.word	0x2406803c
 8001410:	2400a310 	.word	0x2400a310
 8001414:	240681d4 	.word	0x240681d4
 8001418:	473b8000 	.word	0x473b8000
 800141c:	24069280 	.word	0x24069280
 8001420:	240006a4 	.word	0x240006a4
 8001424:	2400a304 	.word	0x2400a304
 8001428:	2400a2ec 	.word	0x2400a2ec

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_MspInit+0x20>)
 8001430:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001434:	f042 0202 	orr.w	r2, r2, #2
 8001438:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	b002      	add	sp, #8
 800144a:	4770      	bx	lr
 800144c:	58024400 	.word	0x58024400

08001450 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001454:	b0be      	sub	sp, #248	; 0xf8
 8001456:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	2100      	movs	r1, #0
 800145a:	9139      	str	r1, [sp, #228]	; 0xe4
 800145c:	913a      	str	r1, [sp, #232]	; 0xe8
 800145e:	913b      	str	r1, [sp, #236]	; 0xec
 8001460:	913c      	str	r1, [sp, #240]	; 0xf0
 8001462:	913d      	str	r1, [sp, #244]	; 0xf4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	22c8      	movs	r2, #200	; 0xc8
 8001466:	a806      	add	r0, sp, #24
 8001468:	f004 ffc8 	bl	80063fc <memset>
  if(hi2s->Instance==SPI1)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	4a6f      	ldr	r2, [pc, #444]	; (800162c <HAL_I2S_MspInit+0x1dc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d005      	beq.n	8001480 <HAL_I2S_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hi2s->Instance==SPI2)
 8001474:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_I2S_MspInit+0x1e0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d06f      	beq.n	800155a <HAL_I2S_MspInit+0x10a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800147a:	b03e      	add	sp, #248	; 0xf8
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001484:	2300      	movs	r3, #0
 8001486:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	a806      	add	r0, sp, #24
 800148c:	f002 fd82 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	2800      	cmp	r0, #0
 8001492:	d15c      	bne.n	800154e <HAL_I2S_MspInit+0xfe>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001494:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_I2S_MspInit+0x1e4>)
 8001496:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800149a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800149e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80014a2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80014a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014be:	f002 0201 	and.w	r2, r2, #1
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 80014de:	2330      	movs	r3, #48	; 0x30
 80014e0:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	f04f 0802 	mov.w	r8, #2
 80014e6:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	2701      	movs	r7, #1
 80014ec:	973b      	str	r7, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2500      	movs	r5, #0
 80014f0:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f2:	2605      	movs	r6, #5
 80014f4:	963d      	str	r6, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	a939      	add	r1, sp, #228	; 0xe4
 80014f8:	484f      	ldr	r0, [pc, #316]	; (8001638 <HAL_I2S_MspInit+0x1e8>)
 80014fa:	f001 fb1f 	bl	8002b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 80014fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001502:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	973b      	str	r7, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150c:	963d      	str	r6, [sp, #244]	; 0xf4
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 800150e:	a939      	add	r1, sp, #228	; 0xe4
 8001510:	484a      	ldr	r0, [pc, #296]	; (800163c <HAL_I2S_MspInit+0x1ec>)
 8001512:	f001 fb13 	bl	8002b3c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001516:	484a      	ldr	r0, [pc, #296]	; (8001640 <HAL_I2S_MspInit+0x1f0>)
 8001518:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_I2S_MspInit+0x1f4>)
 800151a:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800151c:	2325      	movs	r3, #37	; 0x25
 800151e:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001520:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001528:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001534:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153a:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001540:	f000 fc42 	bl	8001dc8 <HAL_DMA_Init>
 8001544:	b930      	cbnz	r0, 8001554 <HAL_I2S_MspInit+0x104>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_I2S_MspInit+0x1f0>)
 8001548:	64a3      	str	r3, [r4, #72]	; 0x48
 800154a:	639c      	str	r4, [r3, #56]	; 0x38
 800154c:	e795      	b.n	800147a <HAL_I2S_MspInit+0x2a>
      Error_Handler();
 800154e:	f7ff fd89 	bl	8001064 <Error_Handler>
 8001552:	e79f      	b.n	8001494 <HAL_I2S_MspInit+0x44>
      Error_Handler();
 8001554:	f7ff fd86 	bl	8001064 <Error_Handler>
 8001558:	e7f5      	b.n	8001546 <HAL_I2S_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800155a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155e:	2300      	movs	r3, #0
 8001560:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	a806      	add	r0, sp, #24
 8001566:	f002 fd15 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	2800      	cmp	r0, #0
 800156c:	d158      	bne.n	8001620 <HAL_I2S_MspInit+0x1d0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_I2S_MspInit+0x1e4>)
 8001570:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001578:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800157c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001580:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001584:	9203      	str	r2, [sp, #12]
 8001586:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800158c:	f042 0204 	orr.w	r2, r2, #4
 8001590:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001594:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001598:	f002 0204 	and.w	r2, r2, #4
 800159c:	9204      	str	r2, [sp, #16]
 800159e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015a4:	f042 0202 	orr.w	r2, r2, #2
 80015a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	9305      	str	r3, [sp, #20]
 80015b6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015b8:	2602      	movs	r6, #2
 80015ba:	9639      	str	r6, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2500      	movs	r5, #0
 80015c0:	953b      	str	r5, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c4:	2705      	movs	r7, #5
 80015c6:	973d      	str	r7, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	a939      	add	r1, sp, #228	; 0xe4
 80015ca:	481f      	ldr	r0, [pc, #124]	; (8001648 <HAL_I2S_MspInit+0x1f8>)
 80015cc:	f001 fab6 	bl	8002b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d4:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	953b      	str	r5, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	973d      	str	r7, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	a939      	add	r1, sp, #228	; 0xe4
 80015e0:	481a      	ldr	r0, [pc, #104]	; (800164c <HAL_I2S_MspInit+0x1fc>)
 80015e2:	f001 faab 	bl	8002b3c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA2_Stream1;
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <HAL_I2S_MspInit+0x200>)
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_I2S_MspInit+0x204>)
 80015ea:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80015ec:	2328      	movs	r3, #40	; 0x28
 80015ee:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001606:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160c:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001610:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001612:	f000 fbd9 	bl	8001dc8 <HAL_DMA_Init>
 8001616:	b930      	cbnz	r0, 8001626 <HAL_I2S_MspInit+0x1d6>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_I2S_MspInit+0x200>)
 800161a:	6463      	str	r3, [r4, #68]	; 0x44
 800161c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800161e:	e72c      	b.n	800147a <HAL_I2S_MspInit+0x2a>
      Error_Handler();
 8001620:	f7ff fd20 	bl	8001064 <Error_Handler>
 8001624:	e7a3      	b.n	800156e <HAL_I2S_MspInit+0x11e>
      Error_Handler();
 8001626:	f7ff fd1d 	bl	8001064 <Error_Handler>
 800162a:	e7f5      	b.n	8001618 <HAL_I2S_MspInit+0x1c8>
 800162c:	40013000 	.word	0x40013000
 8001630:	40003800 	.word	0x40003800
 8001634:	58024400 	.word	0x58024400
 8001638:	58020000 	.word	0x58020000
 800163c:	58021800 	.word	0x58021800
 8001640:	24067f4c 	.word	0x24067f4c
 8001644:	40020010 	.word	0x40020010
 8001648:	58020800 	.word	0x58020800
 800164c:	58020400 	.word	0x58020400
 8001650:	24067fc4 	.word	0x24067fc4
 8001654:	40020428 	.word	0x40020428

08001658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b0bd      	sub	sp, #244	; 0xf4
 800165c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	2100      	movs	r1, #0
 8001660:	9137      	str	r1, [sp, #220]	; 0xdc
 8001662:	9138      	str	r1, [sp, #224]	; 0xe0
 8001664:	9139      	str	r1, [sp, #228]	; 0xe4
 8001666:	913a      	str	r1, [sp, #232]	; 0xe8
 8001668:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166a:	22c8      	movs	r2, #200	; 0xc8
 800166c:	a804      	add	r0, sp, #16
 800166e:	f004 fec5 	bl	80063fc <memset>
  if(hspi->Instance==SPI3)
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_SPI_MspInit+0xd8>)
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800167a:	b03d      	add	sp, #244	; 0xf4
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800167e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001682:	2300      	movs	r3, #0
 8001684:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	a804      	add	r0, sp, #16
 800168a:	f002 fc83 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 800168e:	2800      	cmp	r0, #0
 8001690:	d14b      	bne.n	800172a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 8001694:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80016a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80016a4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016b0:	f042 0202 	orr.w	r2, r2, #2
 80016b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016bc:	f002 0202 	and.w	r2, r2, #2
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016dc:	2304      	movs	r3, #4
 80016de:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2502      	movs	r5, #2
 80016e2:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2400      	movs	r4, #0
 80016e6:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80016ea:	2307      	movs	r3, #7
 80016ec:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	a937      	add	r1, sp, #220	; 0xdc
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <HAL_SPI_MspInit+0xe0>)
 80016f2:	f001 fa23 	bl	8002b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fa:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001702:	2706      	movs	r7, #6
 8001704:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	4e0d      	ldr	r6, [pc, #52]	; (800173c <HAL_SPI_MspInit+0xe4>)
 8001708:	a937      	add	r1, sp, #220	; 0xdc
 800170a:	4630      	mov	r0, r6
 800170c:	f001 fa16 	bl	8002b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001714:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	933a      	str	r3, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800171e:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	a937      	add	r1, sp, #220	; 0xdc
 8001722:	4630      	mov	r0, r6
 8001724:	f001 fa0a 	bl	8002b3c <HAL_GPIO_Init>
}
 8001728:	e7a7      	b.n	800167a <HAL_SPI_MspInit+0x22>
      Error_Handler();
 800172a:	f7ff fc9b 	bl	8001064 <Error_Handler>
 800172e:	e7b0      	b.n	8001692 <HAL_SPI_MspInit+0x3a>
 8001730:	40003c00 	.word	0x40003c00
 8001734:	58024400 	.word	0x58024400
 8001738:	58020400 	.word	0x58020400
 800173c:	58020800 	.word	0x58020800

08001740 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler>

08001742 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler>

08001744 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler>

08001746 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler>

08001748 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler>

0800174a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 f891 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bd08      	pop	{r3, pc}

08001758 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001758:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800175a:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA1_Stream0_IRQHandler+0xc>)
 800175c:	f000 fe52 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001760:	bd08      	pop	{r3, pc}
 8001762:	bf00      	nop
 8001764:	24067f4c 	.word	0x24067f4c

08001768 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001768:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800176a:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA2_Stream1_IRQHandler+0xc>)
 800176c:	f000 fe4a 	bl	8002404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001770:	bd08      	pop	{r3, pc}
 8001772:	bf00      	nop
 8001774:	24067fc4 	.word	0x24067fc4

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800177c:	f7fe fdac 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a6:	f004 fe31 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fd59 	bl	8001260 <main>
  bx  lr
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017b8:	240003a0 	.word	0x240003a0
  ldr r2, =_sidata
 80017bc:	08007240 	.word	0x08007240
  ldr r2, =_sbss
 80017c0:	240003a0 	.word	0x240003a0
  ldr r4, =_ebss
 80017c4:	24069298 	.word	0x24069298

080017c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC3_IRQHandler>
	...

080017cc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_InitTick+0x44>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b90b      	cbnz	r3, 80017d6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80017d2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017d4:	4770      	bx	lr
{
 80017d6:	b510      	push	{r4, lr}
 80017d8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <HAL_InitTick+0x48>)
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ea:	f000 f8c7 	bl	800197c <HAL_SYSTICK_Config>
 80017ee:	b968      	cbnz	r0, 800180c <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	2c0f      	cmp	r4, #15
 80017f2:	d901      	bls.n	80017f8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e00a      	b.n	800180e <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4621      	mov	r1, r4
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f878 	bl	80018f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_InitTick+0x4c>)
 8001806:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001808:	2000      	movs	r0, #0
 800180a:	e000      	b.n	800180e <HAL_InitTick+0x42>
      return HAL_ERROR;
 800180c:	2001      	movs	r0, #1
}
 800180e:	bd10      	pop	{r4, pc}
 8001810:	24000398 	.word	0x24000398
 8001814:	24000000 	.word	0x24000000
 8001818:	2400039c 	.word	0x2400039c

0800181c <HAL_Init>:
{
 800181c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f856 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001824:	f002 f832 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8001828:	490f      	ldr	r1, [pc, #60]	; (8001868 <HAL_Init+0x4c>)
 800182a:	698b      	ldr	r3, [r1, #24]
 800182c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_Init+0x50>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800183a:	698b      	ldr	r3, [r1, #24]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	fa20 f303 	lsr.w	r3, r0, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_Init+0x54>)
 800184c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_Init+0x58>)
 8001850:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff ffba 	bl	80017cc <HAL_InitTick>
 8001858:	b110      	cbz	r0, 8001860 <HAL_Init+0x44>
    return HAL_ERROR;
 800185a:	2401      	movs	r4, #1
}
 800185c:	4620      	mov	r0, r4
 800185e:	bd10      	pop	{r4, pc}
 8001860:	4604      	mov	r4, r0
  HAL_MspInit();
 8001862:	f7ff fde3 	bl	800142c <HAL_MspInit>
  return HAL_OK;
 8001866:	e7f9      	b.n	800185c <HAL_Init+0x40>
 8001868:	58024400 	.word	0x58024400
 800186c:	08007048 	.word	0x08007048
 8001870:	24000004 	.word	0x24000004
 8001874:	24000000 	.word	0x24000000

08001878 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_IncTick+0x10>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x14>)
 800187e:	6811      	ldr	r1, [r2, #0]
 8001880:	440b      	add	r3, r1
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	24000398 	.word	0x24000398
 800188c:	24069294 	.word	0x24069294

08001890 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <HAL_GetTick+0x8>)
 8001892:	6818      	ldr	r0, [r3, #0]
}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	24069294 	.word	0x24069294

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff fff6 	bl	8001890 <HAL_GetTick>
 80018a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018aa:	d002      	beq.n	80018b2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_Delay+0x24>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	f7ff ffed 	bl	8001890 <HAL_GetTick>
 80018b6:	1b40      	subs	r0, r0, r5
 80018b8:	42a0      	cmp	r0, r4
 80018ba:	d3fa      	bcc.n	80018b2 <HAL_Delay+0x16>
  {
  }
}
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
 80018be:	bf00      	nop
 80018c0:	24000398 	.word	0x24000398

080018c4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80018c4:	4b01      	ldr	r3, [pc, #4]	; (80018cc <HAL_GetREVID+0x8>)
 80018c6:	6818      	ldr	r0, [r3, #0]
}
 80018c8:	0c00      	lsrs	r0, r0, #16
 80018ca:	4770      	bx	lr
 80018cc:	5c001000 	.word	0x5c001000

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80018d2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	0200      	lsls	r0, r0, #8
 80018de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80018e4:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018e6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80018e8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	05fa0000 	.word	0x05fa0000

080018f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_NVIC_SetPriority+0x60>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fe:	f1c3 0c07 	rsb	ip, r3, #7
 8001902:	f1bc 0f04 	cmp.w	ip, #4
 8001906:	bf28      	it	cs
 8001908:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190c:	f103 0e04 	add.w	lr, r3, #4
 8001910:	f1be 0f06 	cmp.w	lr, #6
 8001914:	d914      	bls.n	8001940 <HAL_NVIC_SetPriority+0x4c>
 8001916:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 3eff 	mov.w	lr, #4294967295
 800191c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001920:	ea21 010c 	bic.w	r1, r1, ip
 8001924:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001926:	fa0e fe03 	lsl.w	lr, lr, r3
 800192a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001930:	2800      	cmp	r0, #0
 8001932:	db07      	blt.n	8001944 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_NVIC_SetPriority+0x64>)
 800193a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800193c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001940:	2300      	movs	r3, #0
 8001942:	e7e9      	b.n	8001918 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	f000 000f 	and.w	r0, r0, #15
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_NVIC_SetPriority+0x68>)
 800194e:	541a      	strb	r2, [r3, r0]
 8001950:	e7f4      	b.n	800193c <HAL_NVIC_SetPriority+0x48>
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00
 8001958:	e000e400 	.word	0xe000e400
 800195c:	e000ed14 	.word	0xe000ed14

08001960 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001960:	2800      	cmp	r0, #0
 8001962:	db07      	blt.n	8001974 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001964:	f000 021f 	and.w	r2, r0, #31
 8001968:	0940      	lsrs	r0, r0, #5
 800196a:	2301      	movs	r3, #1
 800196c:	4093      	lsls	r3, r2
 800196e:	4a02      	ldr	r2, [pc, #8]	; (8001978 <HAL_NVIC_EnableIRQ+0x18>)
 8001970:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	3801      	subs	r0, #1
 800197e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001982:	d20b      	bcs.n	800199c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001984:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001988:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_SYSTICK_Config+0x24>)
 800198c:	21f0      	movs	r1, #240	; 0xf0
 800198e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001992:	2000      	movs	r0, #0
 8001994:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	2207      	movs	r2, #7
 8001998:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800199c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019a8:	6804      	ldr	r4, [r0, #0]
 80019aa:	4e66      	ldr	r6, [pc, #408]	; (8001b44 <DMA_SetConfig+0x1a0>)
 80019ac:	4d66      	ldr	r5, [pc, #408]	; (8001b48 <DMA_SetConfig+0x1a4>)
 80019ae:	42ac      	cmp	r4, r5
 80019b0:	bf18      	it	ne
 80019b2:	42b4      	cmpne	r4, r6
 80019b4:	d042      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019b6:	3518      	adds	r5, #24
 80019b8:	42ac      	cmp	r4, r5
 80019ba:	d03f      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019bc:	3518      	adds	r5, #24
 80019be:	42ac      	cmp	r4, r5
 80019c0:	d03c      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019c2:	3518      	adds	r5, #24
 80019c4:	42ac      	cmp	r4, r5
 80019c6:	d039      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019c8:	3518      	adds	r5, #24
 80019ca:	42ac      	cmp	r4, r5
 80019cc:	d036      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019ce:	3518      	adds	r5, #24
 80019d0:	42ac      	cmp	r4, r5
 80019d2:	d033      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019d4:	3518      	adds	r5, #24
 80019d6:	42ac      	cmp	r4, r5
 80019d8:	d030      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019da:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80019de:	42ac      	cmp	r4, r5
 80019e0:	d02c      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019e2:	3518      	adds	r5, #24
 80019e4:	42ac      	cmp	r4, r5
 80019e6:	d029      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019e8:	3518      	adds	r5, #24
 80019ea:	42ac      	cmp	r4, r5
 80019ec:	d026      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019ee:	3518      	adds	r5, #24
 80019f0:	42ac      	cmp	r4, r5
 80019f2:	d023      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019f4:	3518      	adds	r5, #24
 80019f6:	42ac      	cmp	r4, r5
 80019f8:	d020      	beq.n	8001a3c <DMA_SetConfig+0x98>
 80019fa:	3518      	adds	r5, #24
 80019fc:	42ac      	cmp	r4, r5
 80019fe:	d01d      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a00:	3518      	adds	r5, #24
 8001a02:	42ac      	cmp	r4, r5
 8001a04:	d01a      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a06:	3518      	adds	r5, #24
 8001a08:	42ac      	cmp	r4, r5
 8001a0a:	d017      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a0c:	4d4f      	ldr	r5, [pc, #316]	; (8001b4c <DMA_SetConfig+0x1a8>)
 8001a0e:	42ac      	cmp	r4, r5
 8001a10:	d014      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a12:	3514      	adds	r5, #20
 8001a14:	42ac      	cmp	r4, r5
 8001a16:	d011      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a18:	3514      	adds	r5, #20
 8001a1a:	42ac      	cmp	r4, r5
 8001a1c:	d00e      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a1e:	3514      	adds	r5, #20
 8001a20:	42ac      	cmp	r4, r5
 8001a22:	d00b      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a24:	3514      	adds	r5, #20
 8001a26:	42ac      	cmp	r4, r5
 8001a28:	d008      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a2a:	3514      	adds	r5, #20
 8001a2c:	42ac      	cmp	r4, r5
 8001a2e:	d005      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a30:	3514      	adds	r5, #20
 8001a32:	42ac      	cmp	r4, r5
 8001a34:	d002      	beq.n	8001a3c <DMA_SetConfig+0x98>
 8001a36:	3514      	adds	r5, #20
 8001a38:	42ac      	cmp	r4, r5
 8001a3a:	d107      	bne.n	8001a4c <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a3c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001a3e:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001a40:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a42:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001a44:	b114      	cbz	r4, 8001a4c <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a46:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8001a48:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001a4a:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a4c:	6804      	ldr	r4, [r0, #0]
 8001a4e:	4e3d      	ldr	r6, [pc, #244]	; (8001b44 <DMA_SetConfig+0x1a0>)
 8001a50:	4d3d      	ldr	r5, [pc, #244]	; (8001b48 <DMA_SetConfig+0x1a4>)
 8001a52:	42ac      	cmp	r4, r5
 8001a54:	bf18      	it	ne
 8001a56:	42b4      	cmpne	r4, r6
 8001a58:	d052      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a5a:	3518      	adds	r5, #24
 8001a5c:	42ac      	cmp	r4, r5
 8001a5e:	d04f      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a60:	3518      	adds	r5, #24
 8001a62:	42ac      	cmp	r4, r5
 8001a64:	d04c      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a66:	3518      	adds	r5, #24
 8001a68:	42ac      	cmp	r4, r5
 8001a6a:	d049      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a6c:	3518      	adds	r5, #24
 8001a6e:	42ac      	cmp	r4, r5
 8001a70:	d046      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a72:	3518      	adds	r5, #24
 8001a74:	42ac      	cmp	r4, r5
 8001a76:	d043      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a78:	3518      	adds	r5, #24
 8001a7a:	42ac      	cmp	r4, r5
 8001a7c:	d040      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a7e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001a82:	42ac      	cmp	r4, r5
 8001a84:	d03c      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a86:	3518      	adds	r5, #24
 8001a88:	42ac      	cmp	r4, r5
 8001a8a:	d039      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a8c:	3518      	adds	r5, #24
 8001a8e:	42ac      	cmp	r4, r5
 8001a90:	d036      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a92:	3518      	adds	r5, #24
 8001a94:	42ac      	cmp	r4, r5
 8001a96:	d033      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a98:	3518      	adds	r5, #24
 8001a9a:	42ac      	cmp	r4, r5
 8001a9c:	d030      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001a9e:	3518      	adds	r5, #24
 8001aa0:	42ac      	cmp	r4, r5
 8001aa2:	d02d      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001aa4:	3518      	adds	r5, #24
 8001aa6:	42ac      	cmp	r4, r5
 8001aa8:	d02a      	beq.n	8001b00 <DMA_SetConfig+0x15c>
 8001aaa:	3518      	adds	r5, #24
 8001aac:	42ac      	cmp	r4, r5
 8001aae:	d027      	beq.n	8001b00 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ab0:	4e26      	ldr	r6, [pc, #152]	; (8001b4c <DMA_SetConfig+0x1a8>)
 8001ab2:	4d27      	ldr	r5, [pc, #156]	; (8001b50 <DMA_SetConfig+0x1ac>)
 8001ab4:	42ac      	cmp	r4, r5
 8001ab6:	bf18      	it	ne
 8001ab8:	42b4      	cmpne	r4, r6
 8001aba:	d011      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001abc:	4d25      	ldr	r5, [pc, #148]	; (8001b54 <DMA_SetConfig+0x1b0>)
 8001abe:	42ac      	cmp	r4, r5
 8001ac0:	d00e      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001ac2:	3514      	adds	r5, #20
 8001ac4:	42ac      	cmp	r4, r5
 8001ac6:	d00b      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001ac8:	3514      	adds	r5, #20
 8001aca:	42ac      	cmp	r4, r5
 8001acc:	d008      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001ace:	3514      	adds	r5, #20
 8001ad0:	42ac      	cmp	r4, r5
 8001ad2:	d005      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001ad4:	3514      	adds	r5, #20
 8001ad6:	42ac      	cmp	r4, r5
 8001ad8:	d002      	beq.n	8001ae0 <DMA_SetConfig+0x13c>
 8001ada:	3514      	adds	r5, #20
 8001adc:	42ac      	cmp	r4, r5
 8001ade:	d124      	bne.n	8001b2a <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001ae0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001ae2:	f004 051f 	and.w	r5, r4, #31
 8001ae6:	2401      	movs	r4, #1
 8001ae8:	40ac      	lsls	r4, r5
 8001aea:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001aec:	6804      	ldr	r4, [r0, #0]
 8001aee:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af0:	6883      	ldr	r3, [r0, #8]
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d020      	beq.n	8001b38 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001afe:	e014      	b.n	8001b2a <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b00:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001b02:	f004 0c1f 	and.w	ip, r4, #31
 8001b06:	243f      	movs	r4, #63	; 0x3f
 8001b08:	fa04 f40c 	lsl.w	r4, r4, ip
 8001b0c:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b0e:	6805      	ldr	r5, [r0, #0]
 8001b10:	682c      	ldr	r4, [r5, #0]
 8001b12:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001b16:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001b18:	6804      	ldr	r4, [r0, #0]
 8001b1a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b1c:	6883      	ldr	r3, [r0, #8]
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d005      	beq.n	8001b2e <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001b22:	6803      	ldr	r3, [r0, #0]
 8001b24:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	60da      	str	r2, [r3, #12]
}
 8001b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2c:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001b2e:	6803      	ldr	r3, [r0, #0]
 8001b30:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001b32:	6803      	ldr	r3, [r0, #0]
 8001b34:	60d9      	str	r1, [r3, #12]
 8001b36:	e7f8      	b.n	8001b2a <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001b3c:	6803      	ldr	r3, [r0, #0]
 8001b3e:	60d9      	str	r1, [r3, #12]
 8001b40:	e7f3      	b.n	8001b2a <DMA_SetConfig+0x186>
 8001b42:	bf00      	nop
 8001b44:	40020010 	.word	0x40020010
 8001b48:	40020028 	.word	0x40020028
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430

08001b58 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b58:	6803      	ldr	r3, [r0, #0]
 8001b5a:	4927      	ldr	r1, [pc, #156]	; (8001bf8 <DMA_CalcBaseAndBitshift+0xa0>)
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <DMA_CalcBaseAndBitshift+0xa4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	bf18      	it	ne
 8001b62:	428b      	cmpne	r3, r1
 8001b64:	d02f      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b66:	3218      	adds	r2, #24
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d02c      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b6c:	3218      	adds	r2, #24
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d029      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b72:	3218      	adds	r2, #24
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d026      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b78:	3218      	adds	r2, #24
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d023      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b7e:	3218      	adds	r2, #24
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d020      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b84:	3218      	adds	r2, #24
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01d      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b8a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b92:	3218      	adds	r2, #24
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d016      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b98:	3218      	adds	r2, #24
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001b9e:	3218      	adds	r2, #24
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d010      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001ba4:	3218      	adds	r2, #24
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001baa:	3218      	adds	r2, #24
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00a      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001bb0:	3218      	adds	r2, #24
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
 8001bb6:	3218      	adds	r2, #24
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001bbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc0:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001bc2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001bc4:	4770      	bx	lr
{
 8001bc6:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	3910      	subs	r1, #16
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <DMA_CalcBaseAndBitshift+0xa8>)
 8001bce:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bd2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001bd6:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <DMA_CalcBaseAndBitshift+0xac>)
 8001bd8:	5ca2      	ldrb	r2, [r4, r2]
 8001bda:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001bdc:	295f      	cmp	r1, #95	; 0x5f
 8001bde:	d907      	bls.n	8001bf0 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <DMA_CalcBaseAndBitshift+0xb0>)
 8001be2:	401a      	ands	r2, r3
 8001be4:	3204      	adds	r2, #4
 8001be6:	6582      	str	r2, [r0, #88]	; 0x58
}
 8001be8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bee:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001bf0:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <DMA_CalcBaseAndBitshift+0xb0>)
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	6582      	str	r2, [r0, #88]	; 0x58
 8001bf6:	e7f7      	b.n	8001be8 <DMA_CalcBaseAndBitshift+0x90>
 8001bf8:	40020010 	.word	0x40020010
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	aaaaaaab 	.word	0xaaaaaaab
 8001c04:	08007058 	.word	0x08007058
 8001c08:	fffffc00 	.word	0xfffffc00

08001c0c <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c0c:	6983      	ldr	r3, [r0, #24]
 8001c0e:	b99b      	cbnz	r3, 8001c38 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8001c10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00a      	beq.n	8001c2c <DMA_CheckFifoParam+0x20>
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d002      	beq.n	8001c20 <DMA_CheckFifoParam+0x14>
 8001c1a:	b10b      	cbz	r3, 8001c20 <DMA_CheckFifoParam+0x14>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c22:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c26:	d12a      	bne.n	8001c7e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c32:	d026      	beq.n	8001c82 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d00a      	beq.n	8001c54 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8001c3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d926      	bls.n	8001c92 <DMA_CheckFifoParam+0x86>
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d126      	bne.n	8001c96 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c4e:	d124      	bne.n	8001c9a <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001c54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d803      	bhi.n	8001c62 <DMA_CheckFifoParam+0x56>
 8001c5a:	e8df f003 	tbb	[pc, r3]
 8001c5e:	0414      	.short	0x0414
 8001c60:	0a14      	.short	0x0a14
 8001c62:	2000      	movs	r0, #0
 8001c64:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c6c:	d10d      	bne.n	8001c8a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c78:	d009      	beq.n	8001c8e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	4770      	bx	lr
          status = HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
          status = HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	4770      	bx	lr
        status = HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
 8001c88:	4770      	bx	lr
          status = HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	4770      	bx	lr
          status = HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	4770      	bx	lr
        status = HAL_ERROR;
 8001c92:	2001      	movs	r0, #1
 8001c94:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001c96:	2000      	movs	r0, #0
 8001c98:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001ca0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ca2:	4921      	ldr	r1, [pc, #132]	; (8001d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001ca4:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	bf18      	it	ne
 8001caa:	428b      	cmpne	r3, r1
 8001cac:	d027      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001cae:	3214      	adds	r2, #20
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d024      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001cb4:	3214      	adds	r2, #20
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d021      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001cba:	3214      	adds	r2, #20
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01e      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001cc0:	3214      	adds	r2, #20
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01b      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001cc6:	3214      	adds	r2, #20
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d018      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001ccc:	3214      	adds	r2, #20
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d015      	beq.n	8001cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	3a10      	subs	r2, #16
 8001cd6:	4916      	ldr	r1, [pc, #88]	; (8001d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001cd8:	fba1 1202 	umull	r1, r2, r1, r2
 8001cdc:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001cde:	4915      	ldr	r1, [pc, #84]	; (8001d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001ce0:	4419      	add	r1, r3
 8001ce2:	29a8      	cmp	r1, #168	; 0xa8
 8001ce4:	d91e      	bls.n	8001d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001cf0:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8001cfc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3b08      	subs	r3, #8
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001d0a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001d12:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001d14:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001d16:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	6683      	str	r3, [r0, #104]	; 0x68
 8001d22:	4770      	bx	lr
      stream_number += 8U;
 8001d24:	3208      	adds	r2, #8
 8001d26:	e7de      	b.n	8001ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001d28:	58025408 	.word	0x58025408
 8001d2c:	5802541c 	.word	0x5802541c
 8001d30:	aaaaaaab 	.word	0xaaaaaaab
 8001d34:	bffdfbf0 	.word	0xbffdfbf0
 8001d38:	10008200 	.word	0x10008200
 8001d3c:	40020880 	.word	0x40020880
 8001d40:	cccccccd 	.word	0xcccccccd
 8001d44:	16009600 	.word	0x16009600
 8001d48:	58025880 	.word	0x58025880

08001d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d4c:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001d4e:	1e4a      	subs	r2, r1, #1
 8001d50:	2a07      	cmp	r2, #7
 8001d52:	d82b      	bhi.n	8001dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8001d54:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d56:	6803      	ldr	r3, [r0, #0]
 8001d58:	4d15      	ldr	r5, [pc, #84]	; (8001db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001d5a:	4c16      	ldr	r4, [pc, #88]	; (8001db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	bf18      	it	ne
 8001d60:	42ab      	cmpne	r3, r5
 8001d62:	d018      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d64:	3414      	adds	r4, #20
 8001d66:	42a3      	cmp	r3, r4
 8001d68:	d015      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d6a:	3414      	adds	r4, #20
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	d012      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d70:	3414      	adds	r4, #20
 8001d72:	42a3      	cmp	r3, r4
 8001d74:	d00f      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d76:	3414      	adds	r4, #20
 8001d78:	42a3      	cmp	r3, r4
 8001d7a:	d00c      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d7c:	3414      	adds	r4, #20
 8001d7e:	42a3      	cmp	r3, r4
 8001d80:	d009      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001d82:	3414      	adds	r4, #20
 8001d84:	42a3      	cmp	r3, r4
 8001d86:	d006      	beq.n	8001d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001d8a:	440b      	add	r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8001d92:	6703      	str	r3, [r0, #112]	; 0x70
 8001d94:	e005      	b.n	8001da2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001d98:	440b      	add	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001da0:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001da2:	2301      	movs	r3, #1
 8001da4:	4093      	lsls	r3, r2
 8001da6:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8001da8:	bc30      	pop	{r4, r5}
 8001daa:	4770      	bx	lr
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	58025408 	.word	0x58025408
 8001db4:	5802541c 	.word	0x5802541c
 8001db8:	1000823f 	.word	0x1000823f
 8001dbc:	40020940 	.word	0x40020940
 8001dc0:	1600963f 	.word	0x1600963f
 8001dc4:	58025940 	.word	0x58025940

08001dc8 <HAL_DMA_Init>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff fd60 	bl	8001890 <HAL_GetTick>
  if(hdma == NULL)
 8001dd0:	2c00      	cmp	r4, #0
 8001dd2:	f000 81b6 	beq.w	8002142 <HAL_DMA_Init+0x37a>
 8001dd6:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	4953      	ldr	r1, [pc, #332]	; (8001f28 <HAL_DMA_Init+0x160>)
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_DMA_Init+0x164>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	bf18      	it	ne
 8001de2:	428b      	cmpne	r3, r1
 8001de4:	bf0c      	ite	eq
 8001de6:	2101      	moveq	r1, #1
 8001de8:	2100      	movne	r1, #0
 8001dea:	d050      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001dec:	3218      	adds	r2, #24
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d04d      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001df2:	3218      	adds	r2, #24
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04a      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001df8:	3218      	adds	r2, #24
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d047      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001dfe:	3218      	adds	r2, #24
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d044      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e04:	3218      	adds	r2, #24
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d041      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e0a:	3218      	adds	r2, #24
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d03e      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e10:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03a      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e18:	3218      	adds	r2, #24
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d037      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e1e:	3218      	adds	r2, #24
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d034      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e24:	3218      	adds	r2, #24
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d031      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e2a:	3218      	adds	r2, #24
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d02e      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e30:	3218      	adds	r2, #24
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02b      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e36:	3218      	adds	r2, #24
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d028      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
 8001e3c:	3218      	adds	r2, #24
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e42:	493b      	ldr	r1, [pc, #236]	; (8001f30 <HAL_DMA_Init+0x168>)
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <HAL_DMA_Init+0x16c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	bf18      	it	ne
 8001e4a:	428b      	cmpne	r3, r1
 8001e4c:	f000 8131 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e50:	4a39      	ldr	r2, [pc, #228]	; (8001f38 <HAL_DMA_Init+0x170>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	f000 812d 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e58:	3214      	adds	r2, #20
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f000 8129 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e60:	3214      	adds	r2, #20
 8001e62:	4293      	cmp	r3, r2
 8001e64:	f000 8125 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e68:	3214      	adds	r2, #20
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f000 8121 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e70:	3214      	adds	r2, #20
 8001e72:	4293      	cmp	r3, r2
 8001e74:	f000 811d 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
 8001e78:	3214      	adds	r2, #20
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	f000 8119 	beq.w	80020b2 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e04a      	b.n	8001f24 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001e9a:	bb79      	cbnz	r1, 8001efc <HAL_DMA_Init+0x134>
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_DMA_Init+0x174>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02c      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ea2:	3218      	adds	r2, #24
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d029      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ea8:	3218      	adds	r2, #24
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d026      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001eae:	3218      	adds	r2, #24
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d023      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001eb4:	3218      	adds	r2, #24
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d020      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001eba:	3218      	adds	r2, #24
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d01d      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ec0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d019      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ec8:	3218      	adds	r2, #24
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d016      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ece:	3218      	adds	r2, #24
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ed4:	3218      	adds	r2, #24
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d010      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001eda:	3218      	adds	r2, #24
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ee0:	3218      	adds	r2, #24
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00a      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ee6:	3218      	adds	r2, #24
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001eec:	3218      	adds	r2, #24
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_DMA_Init+0x134>
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e003      	b.n	8001f04 <HAL_DMA_Init+0x13c>
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f012 0f01 	tst.w	r2, #1
 8001f0c:	d018      	beq.n	8001f40 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0e:	f7ff fcbf 	bl	8001890 <HAL_GetTick>
 8001f12:	1b43      	subs	r3, r0, r5
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d9f5      	bls.n	8001f04 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
}
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	bf00      	nop
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	58025408 	.word	0x58025408
 8001f34:	5802541c 	.word	0x5802541c
 8001f38:	58025430 	.word	0x58025430
 8001f3c:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f40:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f42:	4981      	ldr	r1, [pc, #516]	; (8002148 <HAL_DMA_Init+0x380>)
 8001f44:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8001f46:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f4a:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	6920      	ldr	r0, [r4, #16]
 8001f4e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	69a0      	ldr	r0, [r4, #24]
 8001f56:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f58:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	6a20      	ldr	r0, [r4, #32]
 8001f5e:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8001f60:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f64:	2904      	cmp	r1, #4
 8001f66:	f000 8099 	beq.w	800209c <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f6a:	4978      	ldr	r1, [pc, #480]	; (800214c <HAL_DMA_Init+0x384>)
 8001f6c:	6808      	ldr	r0, [r1, #0]
 8001f6e:	4978      	ldr	r1, [pc, #480]	; (8002150 <HAL_DMA_Init+0x388>)
 8001f70:	4001      	ands	r1, r0
 8001f72:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001f76:	d311      	bcc.n	8001f9c <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f78:	6861      	ldr	r1, [r4, #4]
 8001f7a:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8001f7e:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8001f82:	2803      	cmp	r0, #3
 8001f84:	bf88      	it	hi
 8001f86:	2d05      	cmphi	r5, #5
 8001f88:	d906      	bls.n	8001f98 <HAL_DMA_Init+0x1d0>
 8001f8a:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	d902      	bls.n	8001f98 <HAL_DMA_Init+0x1d0>
 8001f92:	394f      	subs	r1, #79	; 0x4f
 8001f94:	2903      	cmp	r1, #3
 8001f96:	d801      	bhi.n	8001f9c <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8001f98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f9c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f9e:	6826      	ldr	r6, [r4, #0]
 8001fa0:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa2:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8001fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa8:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d108      	bne.n	8001fc0 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8001fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fb0:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fb4:	b123      	cbz	r3, 8001fc0 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff fe28 	bl	8001c0c <DMA_CheckFifoParam>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d172      	bne.n	80020a6 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fc0:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fdc8 	bl	8001b58 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	233f      	movs	r3, #63	; 0x3f
 8001fd0:	4093      	lsls	r3, r2
 8001fd2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	495f      	ldr	r1, [pc, #380]	; (8002154 <HAL_DMA_Init+0x38c>)
 8001fd8:	4a5f      	ldr	r2, [pc, #380]	; (8002158 <HAL_DMA_Init+0x390>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	bf18      	it	ne
 8001fde:	428b      	cmpne	r3, r1
 8001fe0:	d042      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8001fe2:	3218      	adds	r2, #24
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d03f      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8001fe8:	3218      	adds	r2, #24
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03c      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8001fee:	3218      	adds	r2, #24
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d039      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8001ff4:	3218      	adds	r2, #24
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d036      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8001ffa:	3218      	adds	r2, #24
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d033      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002000:	3218      	adds	r2, #24
 8002002:	4293      	cmp	r3, r2
 8002004:	d030      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002006:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800200a:	4293      	cmp	r3, r2
 800200c:	d02c      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800200e:	3218      	adds	r2, #24
 8002010:	4293      	cmp	r3, r2
 8002012:	d029      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002014:	3218      	adds	r2, #24
 8002016:	4293      	cmp	r3, r2
 8002018:	d026      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800201a:	3218      	adds	r2, #24
 800201c:	4293      	cmp	r3, r2
 800201e:	d023      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002020:	3218      	adds	r2, #24
 8002022:	4293      	cmp	r3, r2
 8002024:	d020      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002026:	3218      	adds	r2, #24
 8002028:	4293      	cmp	r3, r2
 800202a:	d01d      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800202c:	3218      	adds	r2, #24
 800202e:	4293      	cmp	r3, r2
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002032:	3218      	adds	r2, #24
 8002034:	4293      	cmp	r3, r2
 8002036:	d017      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002038:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_DMA_Init+0x394>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d014      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800203e:	3214      	adds	r2, #20
 8002040:	4293      	cmp	r3, r2
 8002042:	d011      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002044:	3214      	adds	r2, #20
 8002046:	4293      	cmp	r3, r2
 8002048:	d00e      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800204a:	3214      	adds	r2, #20
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002050:	3214      	adds	r2, #20
 8002052:	4293      	cmp	r3, r2
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002056:	3214      	adds	r2, #20
 8002058:	4293      	cmp	r3, r2
 800205a:	d005      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 800205c:	3214      	adds	r2, #20
 800205e:	4293      	cmp	r3, r2
 8002060:	d002      	beq.n	8002068 <HAL_DMA_Init+0x2a0>
 8002062:	3214      	adds	r2, #20
 8002064:	4293      	cmp	r3, r2
 8002066:	d113      	bne.n	8002090 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fe19 	bl	8001ca0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800206e:	68a3      	ldr	r3, [r4, #8]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d059      	beq.n	8002128 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002074:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002076:	7922      	ldrb	r2, [r4, #4]
 8002078:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800207a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800207c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800207e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	2b07      	cmp	r3, #7
 8002086:	d952      	bls.n	800212e <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800208c:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800208e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002090:	2000      	movs	r0, #0
 8002092:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002094:	2301      	movs	r3, #1
 8002096:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800209a:	e743      	b.n	8001f24 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800209c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800209e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80020a0:	4301      	orrs	r1, r0
 80020a2:	430a      	orrs	r2, r1
 80020a4:	e761      	b.n	8001f6a <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a6:	2340      	movs	r3, #64	; 0x40
 80020a8:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80020aa:	2001      	movs	r0, #1
 80020ac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 80020b0:	e738      	b.n	8001f24 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b2:	2202      	movs	r2, #2
 80020b4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020be:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020c0:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_DMA_Init+0x398>)
 80020c2:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020c4:	68a2      	ldr	r2, [r4, #8]
 80020c6:	2a40      	cmp	r2, #64	; 0x40
 80020c8:	d02c      	beq.n	8002124 <HAL_DMA_Init+0x35c>
 80020ca:	2a80      	cmp	r2, #128	; 0x80
 80020cc:	d027      	beq.n	800211e <HAL_DMA_Init+0x356>
 80020ce:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020d0:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020d2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020d6:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020d8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020dc:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020de:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020e2:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020e4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020e8:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020ea:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020ee:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020f0:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020f4:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020f6:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_DMA_Init+0x39c>)
 80020fc:	4413      	add	r3, r2
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_DMA_Init+0x3a0>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fd24 	bl	8001b58 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002110:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002112:	f002 011f 	and.w	r1, r2, #31
 8002116:	2201      	movs	r2, #1
 8002118:	408a      	lsls	r2, r1
 800211a:	6042      	str	r2, [r0, #4]
 800211c:	e75a      	b.n	8001fd4 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800211e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002122:	e7d5      	b.n	80020d0 <HAL_DMA_Init+0x308>
 8002124:	2210      	movs	r2, #16
 8002126:	e7d3      	b.n	80020d0 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002128:	2300      	movs	r3, #0
 800212a:	6063      	str	r3, [r4, #4]
 800212c:	e7a2      	b.n	8002074 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff fe0c 	bl	8001d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002134:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800213a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800213c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	e7a6      	b.n	8002090 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	e6ee      	b.n	8001f24 <HAL_DMA_Init+0x15c>
 8002146:	bf00      	nop
 8002148:	fe10803f 	.word	0xfe10803f
 800214c:	5c001000 	.word	0x5c001000
 8002150:	ffff0000 	.word	0xffff0000
 8002154:	40020010 	.word	0x40020010
 8002158:	40020028 	.word	0x40020028
 800215c:	58025408 	.word	0x58025408
 8002160:	fffe000f 	.word	0xfffe000f
 8002164:	a7fdabf8 	.word	0xa7fdabf8
 8002168:	cccccccd 	.word	0xcccccccd

0800216c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800216c:	2800      	cmp	r0, #0
 800216e:	f000 813e 	beq.w	80023ee <HAL_DMA_Start_IT+0x282>
{
 8002172:	b570      	push	{r4, r5, r6, lr}
 8002174:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002176:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800217a:	2801      	cmp	r0, #1
 800217c:	f000 8139 	beq.w	80023f2 <HAL_DMA_Start_IT+0x286>
 8002180:	2001      	movs	r0, #1
 8002182:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800218a:	b2c0      	uxtb	r0, r0
 800218c:	2801      	cmp	r0, #1
 800218e:	d007      	beq.n	80021a0 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002194:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002196:	2300      	movs	r3, #0
 8002198:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 800219c:	2001      	movs	r0, #1
}
 800219e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	2002      	movs	r0, #2
 80021a2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a6:	2000      	movs	r0, #0
 80021a8:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80021aa:	6820      	ldr	r0, [r4, #0]
 80021ac:	4e92      	ldr	r6, [pc, #584]	; (80023f8 <HAL_DMA_Start_IT+0x28c>)
 80021ae:	4d93      	ldr	r5, [pc, #588]	; (80023fc <HAL_DMA_Start_IT+0x290>)
 80021b0:	42a8      	cmp	r0, r5
 80021b2:	bf18      	it	ne
 80021b4:	42b0      	cmpne	r0, r6
 80021b6:	d02f      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021b8:	3518      	adds	r5, #24
 80021ba:	42a8      	cmp	r0, r5
 80021bc:	d02c      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021be:	3518      	adds	r5, #24
 80021c0:	42a8      	cmp	r0, r5
 80021c2:	d029      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021c4:	3518      	adds	r5, #24
 80021c6:	42a8      	cmp	r0, r5
 80021c8:	d026      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021ca:	3518      	adds	r5, #24
 80021cc:	42a8      	cmp	r0, r5
 80021ce:	d023      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021d0:	3518      	adds	r5, #24
 80021d2:	42a8      	cmp	r0, r5
 80021d4:	d020      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021d6:	3518      	adds	r5, #24
 80021d8:	42a8      	cmp	r0, r5
 80021da:	d01d      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021dc:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80021e0:	42a8      	cmp	r0, r5
 80021e2:	d019      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021e4:	3518      	adds	r5, #24
 80021e6:	42a8      	cmp	r0, r5
 80021e8:	d016      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021ea:	3518      	adds	r5, #24
 80021ec:	42a8      	cmp	r0, r5
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021f0:	3518      	adds	r5, #24
 80021f2:	42a8      	cmp	r0, r5
 80021f4:	d010      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021f6:	3518      	adds	r5, #24
 80021f8:	42a8      	cmp	r0, r5
 80021fa:	d00d      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 80021fc:	3518      	adds	r5, #24
 80021fe:	42a8      	cmp	r0, r5
 8002200:	d00a      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 8002202:	3518      	adds	r5, #24
 8002204:	42a8      	cmp	r0, r5
 8002206:	d007      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 8002208:	3518      	adds	r5, #24
 800220a:	42a8      	cmp	r0, r5
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Start_IT+0xac>
 800220e:	6805      	ldr	r5, [r0, #0]
 8002210:	f025 0501 	bic.w	r5, r5, #1
 8002214:	6005      	str	r5, [r0, #0]
 8002216:	e003      	b.n	8002220 <HAL_DMA_Start_IT+0xb4>
 8002218:	6805      	ldr	r5, [r0, #0]
 800221a:	f025 0501 	bic.w	r5, r5, #1
 800221e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff fbbf 	bl	80019a4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	4973      	ldr	r1, [pc, #460]	; (80023f8 <HAL_DMA_Start_IT+0x28c>)
 800222a:	4a74      	ldr	r2, [pc, #464]	; (80023fc <HAL_DMA_Start_IT+0x290>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf18      	it	ne
 8002230:	428b      	cmpne	r3, r1
 8002232:	d038      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002234:	3218      	adds	r2, #24
 8002236:	4293      	cmp	r3, r2
 8002238:	d035      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 800223a:	3218      	adds	r2, #24
 800223c:	4293      	cmp	r3, r2
 800223e:	d032      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002240:	3218      	adds	r2, #24
 8002242:	4293      	cmp	r3, r2
 8002244:	d02f      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002246:	3218      	adds	r2, #24
 8002248:	4293      	cmp	r3, r2
 800224a:	d02c      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 800224c:	3218      	adds	r2, #24
 800224e:	4293      	cmp	r3, r2
 8002250:	d029      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002252:	3218      	adds	r2, #24
 8002254:	4293      	cmp	r3, r2
 8002256:	d026      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002258:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002260:	3218      	adds	r2, #24
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002266:	3218      	adds	r2, #24
 8002268:	4293      	cmp	r3, r2
 800226a:	d01c      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 800226c:	3218      	adds	r2, #24
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002272:	3218      	adds	r2, #24
 8002274:	4293      	cmp	r3, r2
 8002276:	d016      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002278:	3218      	adds	r2, #24
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 800227e:	3218      	adds	r2, #24
 8002280:	4293      	cmp	r3, r2
 8002282:	d010      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
 8002284:	3218      	adds	r2, #24
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f022 020e 	bic.w	r2, r2, #14
 8002290:	f042 020a 	orr.w	r2, r2, #10
 8002294:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002298:	b193      	cbz	r3, 80022c0 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e00c      	b.n	80022c0 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f022 021e 	bic.w	r2, r2, #30
 80022ac:	f042 0216 	orr.w	r2, r2, #22
 80022b0:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80022b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b4:	b123      	cbz	r3, 80022c0 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	494d      	ldr	r1, [pc, #308]	; (80023f8 <HAL_DMA_Start_IT+0x28c>)
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_DMA_Start_IT+0x290>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	bf18      	it	ne
 80022ca:	428b      	cmpne	r3, r1
 80022cc:	d042      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022ce:	3218      	adds	r2, #24
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d03f      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022d4:	3218      	adds	r2, #24
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d03c      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022da:	3218      	adds	r2, #24
 80022dc:	4293      	cmp	r3, r2
 80022de:	d039      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022e0:	3218      	adds	r2, #24
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d036      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022e6:	3218      	adds	r2, #24
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d033      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022ec:	3218      	adds	r2, #24
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d030      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022f2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02c      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 80022fa:	3218      	adds	r2, #24
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d029      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002300:	3218      	adds	r2, #24
 8002302:	4293      	cmp	r3, r2
 8002304:	d026      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002306:	3218      	adds	r2, #24
 8002308:	4293      	cmp	r3, r2
 800230a:	d023      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 800230c:	3218      	adds	r2, #24
 800230e:	4293      	cmp	r3, r2
 8002310:	d020      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002312:	3218      	adds	r2, #24
 8002314:	4293      	cmp	r3, r2
 8002316:	d01d      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002318:	3218      	adds	r2, #24
 800231a:	4293      	cmp	r3, r2
 800231c:	d01a      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 800231e:	3218      	adds	r2, #24
 8002320:	4293      	cmp	r3, r2
 8002322:	d017      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002324:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_DMA_Start_IT+0x294>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d014      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 800232a:	3214      	adds	r2, #20
 800232c:	4293      	cmp	r3, r2
 800232e:	d011      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002330:	3214      	adds	r2, #20
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002336:	3214      	adds	r2, #20
 8002338:	4293      	cmp	r3, r2
 800233a:	d00b      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 800233c:	3214      	adds	r2, #20
 800233e:	4293      	cmp	r3, r2
 8002340:	d008      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002342:	3214      	adds	r2, #20
 8002344:	4293      	cmp	r3, r2
 8002346:	d005      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 8002348:	3214      	adds	r2, #20
 800234a:	4293      	cmp	r3, r2
 800234c:	d002      	beq.n	8002354 <HAL_DMA_Start_IT+0x1e8>
 800234e:	3214      	adds	r2, #20
 8002350:	4293      	cmp	r3, r2
 8002352:	d10e      	bne.n	8002372 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002354:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800235c:	d003      	beq.n	8002366 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002364:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8002366:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002368:	b11b      	cbz	r3, 8002372 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	4920      	ldr	r1, [pc, #128]	; (80023f8 <HAL_DMA_Start_IT+0x28c>)
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_DMA_Start_IT+0x290>)
 8002378:	4293      	cmp	r3, r2
 800237a:	bf18      	it	ne
 800237c:	428b      	cmpne	r3, r1
 800237e:	d030      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 8002380:	3218      	adds	r2, #24
 8002382:	4293      	cmp	r3, r2
 8002384:	d02d      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 8002386:	3218      	adds	r2, #24
 8002388:	4293      	cmp	r3, r2
 800238a:	d02a      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 800238c:	3218      	adds	r2, #24
 800238e:	4293      	cmp	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 8002392:	3218      	adds	r2, #24
 8002394:	4293      	cmp	r3, r2
 8002396:	d024      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 8002398:	3218      	adds	r2, #24
 800239a:	4293      	cmp	r3, r2
 800239c:	d021      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 800239e:	3218      	adds	r2, #24
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01e      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023a4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01a      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023ac:	3218      	adds	r2, #24
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d017      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023b2:	3218      	adds	r2, #24
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d014      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023b8:	3218      	adds	r2, #24
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d011      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023be:	3218      	adds	r2, #24
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023c4:	3218      	adds	r2, #24
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023ca:	3218      	adds	r2, #24
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d008      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023d0:	3218      	adds	r2, #24
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d005      	beq.n	80023e2 <HAL_DMA_Start_IT+0x276>
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2000      	movs	r0, #0
 80023e0:	e6dd      	b.n	800219e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80023ec:	e6d7      	b.n	800219e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
}
 80023f0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80023f2:	2002      	movs	r0, #2
 80023f4:	e6d3      	b.n	800219e <HAL_DMA_Start_IT+0x32>
 80023f6:	bf00      	nop
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40020028 	.word	0x40020028
 8002400:	58025408 	.word	0x58025408

08002404 <HAL_DMA_IRQHandler>:
{
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800240e:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <HAL_DMA_IRQHandler+0x200>)
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <HAL_DMA_IRQHandler+0x204>)
 8002414:	fba3 3505 	umull	r3, r5, r3, r5
 8002418:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 800241c:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800241e:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002422:	6803      	ldr	r3, [r0, #0]
 8002424:	4979      	ldr	r1, [pc, #484]	; (800260c <HAL_DMA_IRQHandler+0x208>)
 8002426:	487a      	ldr	r0, [pc, #488]	; (8002610 <HAL_DMA_IRQHandler+0x20c>)
 8002428:	4283      	cmp	r3, r0
 800242a:	bf18      	it	ne
 800242c:	428b      	cmpne	r3, r1
 800242e:	bf0c      	ite	eq
 8002430:	2001      	moveq	r0, #1
 8002432:	2000      	movne	r0, #0
 8002434:	d061      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002436:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_DMA_IRQHandler+0x210>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d05e      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 800243c:	3218      	adds	r2, #24
 800243e:	4293      	cmp	r3, r2
 8002440:	d05b      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002442:	3218      	adds	r2, #24
 8002444:	4293      	cmp	r3, r2
 8002446:	d058      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002448:	3218      	adds	r2, #24
 800244a:	4293      	cmp	r3, r2
 800244c:	d055      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 800244e:	3218      	adds	r2, #24
 8002450:	4293      	cmp	r3, r2
 8002452:	d052      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002454:	3218      	adds	r2, #24
 8002456:	4293      	cmp	r3, r2
 8002458:	d04f      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 800245a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800245e:	4293      	cmp	r3, r2
 8002460:	d04b      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002462:	3218      	adds	r2, #24
 8002464:	4293      	cmp	r3, r2
 8002466:	d048      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002468:	3218      	adds	r2, #24
 800246a:	4293      	cmp	r3, r2
 800246c:	d045      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 800246e:	3218      	adds	r2, #24
 8002470:	4293      	cmp	r3, r2
 8002472:	d042      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002474:	3218      	adds	r2, #24
 8002476:	4293      	cmp	r3, r2
 8002478:	d03f      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 800247a:	3218      	adds	r2, #24
 800247c:	4293      	cmp	r3, r2
 800247e:	d03c      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002480:	3218      	adds	r2, #24
 8002482:	4293      	cmp	r3, r2
 8002484:	d039      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
 8002486:	3218      	adds	r2, #24
 8002488:	4293      	cmp	r3, r2
 800248a:	d036      	beq.n	80024fa <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800248c:	4962      	ldr	r1, [pc, #392]	; (8002618 <HAL_DMA_IRQHandler+0x214>)
 800248e:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_DMA_IRQHandler+0x218>)
 8002490:	4293      	cmp	r3, r2
 8002492:	bf18      	it	ne
 8002494:	428b      	cmpne	r3, r1
 8002496:	d012      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 8002498:	4a61      	ldr	r2, [pc, #388]	; (8002620 <HAL_DMA_IRQHandler+0x21c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00f      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 800249e:	3214      	adds	r2, #20
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00c      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 80024a4:	3214      	adds	r2, #20
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 80024aa:	3214      	adds	r2, #20
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d006      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 80024b0:	3214      	adds	r2, #20
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d003      	beq.n	80024be <HAL_DMA_IRQHandler+0xba>
 80024b6:	3214      	adds	r2, #20
 80024b8:	4293      	cmp	r3, r2
 80024ba:	f040 8261 	bne.w	8002980 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80024be:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80024c2:	f001 011f 	and.w	r1, r1, #31
 80024c6:	2004      	movs	r0, #4
 80024c8:	4088      	lsls	r0, r1
 80024ca:	ea10 0f0c 	tst.w	r0, ip
 80024ce:	f000 82a7 	beq.w	8002a20 <HAL_DMA_IRQHandler+0x61c>
 80024d2:	f012 0f04 	tst.w	r2, #4
 80024d6:	f000 82a3 	beq.w	8002a20 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80024da:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024dc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80024e0:	f000 825a 	beq.w	8002998 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024e4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80024e8:	f040 8250 	bne.w	800298c <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8246 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 80024f4:	4620      	mov	r0, r4
 80024f6:	4798      	blx	r3
 80024f8:	e242      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024fc:	f002 011f 	and.w	r1, r2, #31
 8002500:	2208      	movs	r2, #8
 8002502:	408a      	lsls	r2, r1
 8002504:	4232      	tst	r2, r6
 8002506:	d041      	beq.n	800258c <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002508:	bb70      	cbnz	r0, 8002568 <HAL_DMA_IRQHandler+0x164>
 800250a:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_DMA_IRQHandler+0x210>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002510:	3218      	adds	r2, #24
 8002512:	4293      	cmp	r3, r2
 8002514:	d028      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002516:	3218      	adds	r2, #24
 8002518:	4293      	cmp	r3, r2
 800251a:	d025      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 800251c:	3218      	adds	r2, #24
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002522:	3218      	adds	r2, #24
 8002524:	4293      	cmp	r3, r2
 8002526:	d01f      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002528:	3218      	adds	r2, #24
 800252a:	4293      	cmp	r3, r2
 800252c:	d01c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 800252e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002536:	3218      	adds	r2, #24
 8002538:	4293      	cmp	r3, r2
 800253a:	d015      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 800253c:	3218      	adds	r2, #24
 800253e:	4293      	cmp	r3, r2
 8002540:	d012      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002542:	3218      	adds	r2, #24
 8002544:	4293      	cmp	r3, r2
 8002546:	d00f      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002548:	3218      	adds	r2, #24
 800254a:	4293      	cmp	r3, r2
 800254c:	d00c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 800254e:	3218      	adds	r2, #24
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002554:	3218      	adds	r2, #24
 8002556:	4293      	cmp	r3, r2
 8002558:	d006      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 800255a:	3218      	adds	r2, #24
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <HAL_DMA_IRQHandler+0x164>
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002566:	e002      	b.n	800256e <HAL_DMA_IRQHandler+0x16a>
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800256e:	b16a      	cbz	r2, 800258c <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002578:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	2308      	movs	r3, #8
 8002580:	4093      	lsls	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002584:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800258c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	fa26 f302 	lsr.w	r3, r6, r2
 8002596:	f013 0f01 	tst.w	r3, #1
 800259a:	d047      	beq.n	800262c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	481b      	ldr	r0, [pc, #108]	; (800260c <HAL_DMA_IRQHandler+0x208>)
 80025a0:	491b      	ldr	r1, [pc, #108]	; (8002610 <HAL_DMA_IRQHandler+0x20c>)
 80025a2:	428b      	cmp	r3, r1
 80025a4:	bf18      	it	ne
 80025a6:	4283      	cmpne	r3, r0
 80025a8:	d03c      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025aa:	3118      	adds	r1, #24
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d039      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025b0:	3118      	adds	r1, #24
 80025b2:	428b      	cmp	r3, r1
 80025b4:	d036      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025b6:	3118      	adds	r1, #24
 80025b8:	428b      	cmp	r3, r1
 80025ba:	d033      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025bc:	3118      	adds	r1, #24
 80025be:	428b      	cmp	r3, r1
 80025c0:	d030      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025c2:	3118      	adds	r1, #24
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d02d      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025c8:	3118      	adds	r1, #24
 80025ca:	428b      	cmp	r3, r1
 80025cc:	d02a      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025ce:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80025d2:	428b      	cmp	r3, r1
 80025d4:	d026      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025d6:	3118      	adds	r1, #24
 80025d8:	428b      	cmp	r3, r1
 80025da:	d023      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025dc:	3118      	adds	r1, #24
 80025de:	428b      	cmp	r3, r1
 80025e0:	d020      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025e2:	3118      	adds	r1, #24
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d01d      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025e8:	3118      	adds	r1, #24
 80025ea:	428b      	cmp	r3, r1
 80025ec:	d01a      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025ee:	3118      	adds	r1, #24
 80025f0:	428b      	cmp	r3, r1
 80025f2:	d017      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025f4:	3118      	adds	r1, #24
 80025f6:	428b      	cmp	r3, r1
 80025f8:	d014      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 80025fa:	3118      	adds	r1, #24
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d011      	beq.n	8002624 <HAL_DMA_IRQHandler+0x220>
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e013      	b.n	800262c <HAL_DMA_IRQHandler+0x228>
 8002604:	24000000 	.word	0x24000000
 8002608:	1b4e81b5 	.word	0x1b4e81b5
 800260c:	40020010 	.word	0x40020010
 8002610:	40020028 	.word	0x40020028
 8002614:	40020040 	.word	0x40020040
 8002618:	58025408 	.word	0x58025408
 800261c:	5802541c 	.word	0x5802541c
 8002620:	58025430 	.word	0x58025430
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f013 0f80 	tst.w	r3, #128	; 0x80
 800262a:	d13b      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800262c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2204      	movs	r2, #4
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	4233      	tst	r3, r6
 800263a:	d03f      	beq.n	80026bc <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	4896      	ldr	r0, [pc, #600]	; (8002898 <HAL_DMA_IRQHandler+0x494>)
 8002640:	4996      	ldr	r1, [pc, #600]	; (800289c <HAL_DMA_IRQHandler+0x498>)
 8002642:	428a      	cmp	r2, r1
 8002644:	bf18      	it	ne
 8002646:	4282      	cmpne	r2, r0
 8002648:	d034      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800264a:	3118      	adds	r1, #24
 800264c:	428a      	cmp	r2, r1
 800264e:	d031      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002650:	3118      	adds	r1, #24
 8002652:	428a      	cmp	r2, r1
 8002654:	d02e      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002656:	3118      	adds	r1, #24
 8002658:	428a      	cmp	r2, r1
 800265a:	d02b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800265c:	3118      	adds	r1, #24
 800265e:	428a      	cmp	r2, r1
 8002660:	d028      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002662:	3118      	adds	r1, #24
 8002664:	428a      	cmp	r2, r1
 8002666:	d025      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002668:	3118      	adds	r1, #24
 800266a:	428a      	cmp	r2, r1
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800266e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002672:	428a      	cmp	r2, r1
 8002674:	d01e      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002676:	3118      	adds	r1, #24
 8002678:	428a      	cmp	r2, r1
 800267a:	d01b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800267c:	3118      	adds	r1, #24
 800267e:	428a      	cmp	r2, r1
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002682:	3118      	adds	r1, #24
 8002684:	428a      	cmp	r2, r1
 8002686:	d015      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002688:	3118      	adds	r1, #24
 800268a:	428a      	cmp	r2, r1
 800268c:	d012      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800268e:	3118      	adds	r1, #24
 8002690:	428a      	cmp	r2, r1
 8002692:	d00f      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 8002694:	3118      	adds	r1, #24
 8002696:	428a      	cmp	r2, r1
 8002698:	d00c      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 800269a:	3118      	adds	r1, #24
 800269c:	428a      	cmp	r2, r1
 800269e:	d009      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2b0>
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026a4:	2301      	movs	r3, #1
 80026a6:	4093      	lsls	r3, r2
 80026a8:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6563      	str	r3, [r4, #84]	; 0x54
 80026b2:	e7bb      	b.n	800262c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	f012 0f02 	tst.w	r2, #2
 80026ba:	d13d      	bne.n	8002738 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2210      	movs	r2, #16
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	4233      	tst	r3, r6
 80026ca:	d05f      	beq.n	800278c <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	4872      	ldr	r0, [pc, #456]	; (8002898 <HAL_DMA_IRQHandler+0x494>)
 80026d0:	4972      	ldr	r1, [pc, #456]	; (800289c <HAL_DMA_IRQHandler+0x498>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	bf18      	it	ne
 80026d6:	4282      	cmpne	r2, r0
 80026d8:	d034      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026da:	3118      	adds	r1, #24
 80026dc:	428a      	cmp	r2, r1
 80026de:	d031      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026e0:	3118      	adds	r1, #24
 80026e2:	428a      	cmp	r2, r1
 80026e4:	d02e      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026e6:	3118      	adds	r1, #24
 80026e8:	428a      	cmp	r2, r1
 80026ea:	d02b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026ec:	3118      	adds	r1, #24
 80026ee:	428a      	cmp	r2, r1
 80026f0:	d028      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026f2:	3118      	adds	r1, #24
 80026f4:	428a      	cmp	r2, r1
 80026f6:	d025      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026f8:	3118      	adds	r1, #24
 80026fa:	428a      	cmp	r2, r1
 80026fc:	d022      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 80026fe:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002702:	428a      	cmp	r2, r1
 8002704:	d01e      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 8002706:	3118      	adds	r1, #24
 8002708:	428a      	cmp	r2, r1
 800270a:	d01b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 800270c:	3118      	adds	r1, #24
 800270e:	428a      	cmp	r2, r1
 8002710:	d018      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 8002712:	3118      	adds	r1, #24
 8002714:	428a      	cmp	r2, r1
 8002716:	d015      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 8002718:	3118      	adds	r1, #24
 800271a:	428a      	cmp	r2, r1
 800271c:	d012      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 800271e:	3118      	adds	r1, #24
 8002720:	428a      	cmp	r2, r1
 8002722:	d00f      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 8002724:	3118      	adds	r1, #24
 8002726:	428a      	cmp	r2, r1
 8002728:	d00c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 800272a:	3118      	adds	r1, #24
 800272c:	428a      	cmp	r2, r1
 800272e:	d009      	beq.n	8002744 <HAL_DMA_IRQHandler+0x340>
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002736:	e008      	b.n	800274a <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002738:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800273a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6563      	str	r3, [r4, #84]	; 0x54
 8002742:	e7bb      	b.n	80026bc <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800274a:	b1fa      	cbz	r2, 800278c <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800274c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002756:	d00d      	beq.n	8002774 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800275e:	d104      	bne.n	800276a <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8002760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002762:	b19b      	cbz	r3, 800278c <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8002764:	4620      	mov	r0, r4
 8002766:	4798      	blx	r3
 8002768:	e010      	b.n	800278c <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800276a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800276c:	b173      	cbz	r3, 800278c <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 800276e:	4620      	mov	r0, r4
 8002770:	4798      	blx	r3
 8002772:	e00b      	b.n	800278c <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f412 7f80 	tst.w	r2, #256	; 0x100
 800277a:	d103      	bne.n	8002784 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002786:	b10b      	cbz	r3, 800278c <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8002788:	4620      	mov	r0, r4
 800278a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800278c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2220      	movs	r2, #32
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	4233      	tst	r3, r6
 800279a:	f000 8093 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	483d      	ldr	r0, [pc, #244]	; (8002898 <HAL_DMA_IRQHandler+0x494>)
 80027a2:	493e      	ldr	r1, [pc, #248]	; (800289c <HAL_DMA_IRQHandler+0x498>)
 80027a4:	428a      	cmp	r2, r1
 80027a6:	bf18      	it	ne
 80027a8:	4282      	cmpne	r2, r0
 80027aa:	d02e      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027ac:	3118      	adds	r1, #24
 80027ae:	428a      	cmp	r2, r1
 80027b0:	d02b      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027b2:	3118      	adds	r1, #24
 80027b4:	428a      	cmp	r2, r1
 80027b6:	d028      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027b8:	3118      	adds	r1, #24
 80027ba:	428a      	cmp	r2, r1
 80027bc:	d025      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027be:	3118      	adds	r1, #24
 80027c0:	428a      	cmp	r2, r1
 80027c2:	d022      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027c4:	3118      	adds	r1, #24
 80027c6:	428a      	cmp	r2, r1
 80027c8:	d01f      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027ca:	3118      	adds	r1, #24
 80027cc:	428a      	cmp	r2, r1
 80027ce:	d01c      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027d0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80027d4:	428a      	cmp	r2, r1
 80027d6:	d018      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027d8:	3118      	adds	r1, #24
 80027da:	428a      	cmp	r2, r1
 80027dc:	d015      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027de:	3118      	adds	r1, #24
 80027e0:	428a      	cmp	r2, r1
 80027e2:	d012      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027e4:	3118      	adds	r1, #24
 80027e6:	428a      	cmp	r2, r1
 80027e8:	d00f      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027ea:	3118      	adds	r1, #24
 80027ec:	428a      	cmp	r2, r1
 80027ee:	d00c      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027f0:	3118      	adds	r1, #24
 80027f2:	428a      	cmp	r2, r1
 80027f4:	d009      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027f6:	3118      	adds	r1, #24
 80027f8:	428a      	cmp	r2, r1
 80027fa:	d006      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 80027fc:	3118      	adds	r1, #24
 80027fe:	428a      	cmp	r2, r1
 8002800:	d003      	beq.n	800280a <HAL_DMA_IRQHandler+0x406>
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002808:	e002      	b.n	8002810 <HAL_DMA_IRQHandler+0x40c>
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002810:	2a00      	cmp	r2, #0
 8002812:	d057      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002814:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002816:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b04      	cmp	r3, #4
 800281e:	d00e      	beq.n	800283e <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002828:	d03a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002830:	d12d      	bne.n	800288e <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8002832:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002834:	2b00      	cmp	r3, #0
 8002836:	d045      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8002838:	4620      	mov	r0, r4
 800283a:	4798      	blx	r3
 800283c:	e042      	b.n	80028c4 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	f023 0316 	bic.w	r3, r3, #22
 8002846:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	6953      	ldr	r3, [r2, #20]
 800284c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002850:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002854:	b1bb      	cbz	r3, 8002886 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	f023 0308 	bic.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002860:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	233f      	movs	r3, #63	; 0x3f
 8002868:	4093      	lsls	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800286c:	2301      	movs	r3, #1
 800286e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002872:	2300      	movs	r3, #0
 8002874:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8002878:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8080 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8002880:	4620      	mov	r0, r4
 8002882:	4798      	blx	r3
          return;
 8002884:	e07c      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002886:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e4      	bne.n	8002856 <HAL_DMA_IRQHandler+0x452>
 800288c:	e7e8      	b.n	8002860 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 800288e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002890:	b1c3      	cbz	r3, 80028c4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8002892:	4620      	mov	r0, r4
 8002894:	4798      	blx	r3
 8002896:	e015      	b.n	80028c4 <HAL_DMA_IRQHandler+0x4c0>
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80028a6:	d109      	bne.n	80028bc <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80028b6:	2300      	movs	r3, #0
 80028b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 80028bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028be:	b10b      	cbz	r3, 80028c4 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 80028c0:	4620      	mov	r0, r4
 80028c2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d05a      	beq.n	8002980 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80028ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028cc:	f013 0f01 	tst.w	r3, #1
 80028d0:	d052      	beq.n	8002978 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 80028d2:	2304      	movs	r3, #4
 80028d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	4996      	ldr	r1, [pc, #600]	; (8002b34 <HAL_DMA_IRQHandler+0x730>)
 80028dc:	4a96      	ldr	r2, [pc, #600]	; (8002b38 <HAL_DMA_IRQHandler+0x734>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	bf18      	it	ne
 80028e2:	428b      	cmpne	r3, r1
 80028e4:	d02f      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 80028e6:	3218      	adds	r2, #24
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 80028ec:	3218      	adds	r2, #24
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d029      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 80028f2:	3218      	adds	r2, #24
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d026      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 80028f8:	3218      	adds	r2, #24
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d023      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 80028fe:	3218      	adds	r2, #24
 8002900:	4293      	cmp	r3, r2
 8002902:	d020      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002904:	3218      	adds	r2, #24
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 800290a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002912:	3218      	adds	r2, #24
 8002914:	4293      	cmp	r3, r2
 8002916:	d016      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002918:	3218      	adds	r2, #24
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 800291e:	3218      	adds	r2, #24
 8002920:	4293      	cmp	r3, r2
 8002922:	d010      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002924:	3218      	adds	r2, #24
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 800292a:	3218      	adds	r2, #24
 800292c:	4293      	cmp	r3, r2
 800292e:	d00a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002930:	3218      	adds	r2, #24
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 8002936:	3218      	adds	r2, #24
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_IRQHandler+0x542>
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e003      	b.n	800294e <HAL_DMA_IRQHandler+0x54a>
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800294e:	9b01      	ldr	r3, [sp, #4]
 8002950:	3301      	adds	r3, #1
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	42ab      	cmp	r3, r5
 8002956:	d804      	bhi.n	8002962 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f013 0f01 	tst.w	r3, #1
 8002960:	d1f5      	bne.n	800294e <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f013 0f01 	tst.w	r3, #1
 800296a:	d00b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 800296c:	2303      	movs	r3, #3
 800296e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002972:	2300      	movs	r3, #0
 8002974:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8002978:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800297a:	b10b      	cbz	r3, 8002980 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 800297c:	4620      	mov	r0, r4
 800297e:	4798      	blx	r3
}
 8002980:	b003      	add	sp, #12
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002984:	2301      	movs	r3, #1
 8002986:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800298a:	e7f2      	b.n	8002972 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 800298c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f6      	beq.n	8002980 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8002992:	4620      	mov	r0, r4
 8002994:	4798      	blx	r3
 8002996:	e7f3      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002998:	f012 0f20 	tst.w	r2, #32
 800299c:	d13a      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	4964      	ldr	r1, [pc, #400]	; (8002b34 <HAL_DMA_IRQHandler+0x730>)
 80029a2:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_DMA_IRQHandler+0x734>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf18      	it	ne
 80029a8:	428b      	cmpne	r3, r1
 80029aa:	d02f      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029ac:	3218      	adds	r2, #24
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029b2:	3218      	adds	r2, #24
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d029      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029b8:	3218      	adds	r2, #24
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d026      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029be:	3218      	adds	r2, #24
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d023      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029c4:	3218      	adds	r2, #24
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d020      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029ca:	3218      	adds	r2, #24
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029d0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d019      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029d8:	3218      	adds	r2, #24
 80029da:	4293      	cmp	r3, r2
 80029dc:	d016      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029de:	3218      	adds	r2, #24
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029e4:	3218      	adds	r2, #24
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d010      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029ea:	3218      	adds	r2, #24
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029f0:	3218      	adds	r2, #24
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029f6:	3218      	adds	r2, #24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 80029fc:	3218      	adds	r2, #24
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x608>
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f022 0204 	bic.w	r2, r2, #4
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e003      	b.n	8002a14 <HAL_DMA_IRQHandler+0x610>
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f022 0208 	bic.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0b2      	beq.n	8002980 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4798      	blx	r3
 8002a1e:	e7af      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a20:	2002      	movs	r0, #2
 8002a22:	4088      	lsls	r0, r1
 8002a24:	ea10 0f0c 	tst.w	r0, ip
 8002a28:	d060      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6e8>
 8002a2a:	f012 0f02 	tst.w	r2, #2
 8002a2e:	d05d      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a30:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a32:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a38:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002a3c:	d105      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8002a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d09d      	beq.n	8002980 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8002a44:	4620      	mov	r0, r4
 8002a46:	4798      	blx	r3
 8002a48:	e79a      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8002a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d097      	beq.n	8002980 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8002a50:	4620      	mov	r0, r4
 8002a52:	4798      	blx	r3
 8002a54:	e794      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a56:	f012 0f20 	tst.w	r2, #32
 8002a5a:	d140      	bne.n	8002ade <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_DMA_IRQHandler+0x730>)
 8002a60:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <HAL_DMA_IRQHandler+0x734>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	bf18      	it	ne
 8002a66:	428b      	cmpne	r3, r1
 8002a68:	d02f      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a6a:	3218      	adds	r2, #24
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a70:	3218      	adds	r2, #24
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d029      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a76:	3218      	adds	r2, #24
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d026      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a7c:	3218      	adds	r2, #24
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d023      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a82:	3218      	adds	r2, #24
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d020      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a88:	3218      	adds	r2, #24
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a8e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a96:	3218      	adds	r2, #24
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d016      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002a9c:	3218      	adds	r2, #24
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002aa2:	3218      	adds	r2, #24
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d010      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002aa8:	3218      	adds	r2, #24
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002aae:	3218      	adds	r2, #24
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00a      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002ab4:	3218      	adds	r2, #24
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002aba:	3218      	adds	r2, #24
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_IRQHandler+0x6c6>
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f022 020a 	bic.w	r2, r2, #10
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e003      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x6ce>
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f022 0214 	bic.w	r2, r2, #20
 8002ad0:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f43f af4d 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4798      	blx	r3
 8002aea:	e749      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002aec:	2008      	movs	r0, #8
 8002aee:	fa00 f101 	lsl.w	r1, r0, r1
 8002af2:	ea11 0f0c 	tst.w	r1, ip
 8002af6:	f43f af43 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
 8002afa:	f012 0f08 	tst.w	r2, #8
 8002afe:	f43f af3f 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f022 020e 	bic.w	r2, r2, #14
 8002b08:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2201      	movs	r2, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b18:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8002b24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f43f af2a 	beq.w	8002980 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4798      	blx	r3
  }
 8002b30:	e726      	b.n	8002980 <HAL_DMA_IRQHandler+0x57c>
 8002b32:	bf00      	nop
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002b40:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b42:	e06b      	b.n	8002c1c <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b46:	005e      	lsls	r6, r3, #1
 8002b48:	2403      	movs	r4, #3
 8002b4a:	40b4      	lsls	r4, r6
 8002b4c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b50:	68cc      	ldr	r4, [r1, #12]
 8002b52:	40b4      	lsls	r4, r6
 8002b54:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002b56:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b58:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b5a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5e:	684c      	ldr	r4, [r1, #4]
 8002b60:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002b64:	409c      	lsls	r4, r3
 8002b66:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002b68:	6044      	str	r4, [r0, #4]
 8002b6a:	e069      	b.n	8002c40 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	08dd      	lsrs	r5, r3, #3
 8002b6e:	3508      	adds	r5, #8
 8002b70:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b74:	f003 0c07 	and.w	ip, r3, #7
 8002b78:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002b7c:	f04f 0e0f 	mov.w	lr, #15
 8002b80:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002b84:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b88:	690c      	ldr	r4, [r1, #16]
 8002b8a:	fa04 f40c 	lsl.w	r4, r4, ip
 8002b8e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002b96:	e06b      	b.n	8002c70 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b98:	2409      	movs	r4, #9
 8002b9a:	e000      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ba2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba4:	f10c 0c02 	add.w	ip, ip, #2
 8002ba8:	4d69      	ldr	r5, [pc, #420]	; (8002d50 <HAL_GPIO_Init+0x214>)
 8002baa:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bae:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8002bb2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002bb4:	43d4      	mvns	r4, r2
 8002bb6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bba:	684f      	ldr	r7, [r1, #4]
 8002bbc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002bc0:	d001      	beq.n	8002bc6 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8002bc2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002bc6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002bca:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002bcc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002bce:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd2:	684f      	ldr	r7, [r1, #4]
 8002bd4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002bd8:	d001      	beq.n	8002bde <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8002bda:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002bde:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002be2:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002be4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8002be8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bec:	684f      	ldr	r7, [r1, #4]
 8002bee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002bf2:	d001      	beq.n	8002bf8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002bf4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bf8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002bfc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c00:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8002c04:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c06:	684e      	ldr	r6, [r1, #4]
 8002c08:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002c0c:	d001      	beq.n	8002c12 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8002c0e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c16:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8002c1a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c1c:	680a      	ldr	r2, [r1, #0]
 8002c1e:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c22:	f000 8092 	beq.w	8002d4a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c26:	f04f 0c01 	mov.w	ip, #1
 8002c2a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8002c2e:	ea1c 0202 	ands.w	r2, ip, r2
 8002c32:	d0f2      	beq.n	8002c1a <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c34:	684c      	ldr	r4, [r1, #4]
 8002c36:	f004 0403 	and.w	r4, r4, #3
 8002c3a:	3c01      	subs	r4, #1
 8002c3c:	2c01      	cmp	r4, #1
 8002c3e:	d981      	bls.n	8002b44 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	684c      	ldr	r4, [r1, #4]
 8002c42:	f004 0403 	and.w	r4, r4, #3
 8002c46:	2c03      	cmp	r4, #3
 8002c48:	d00c      	beq.n	8002c64 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8002c4a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c4c:	005d      	lsls	r5, r3, #1
 8002c4e:	f04f 0c03 	mov.w	ip, #3
 8002c52:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c56:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c5a:	688c      	ldr	r4, [r1, #8]
 8002c5c:	40ac      	lsls	r4, r5
 8002c5e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8002c62:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c64:	684c      	ldr	r4, [r1, #4]
 8002c66:	f004 0403 	and.w	r4, r4, #3
 8002c6a:	2c02      	cmp	r4, #2
 8002c6c:	f43f af7e 	beq.w	8002b6c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8002c70:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c72:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c76:	f04f 0c03 	mov.w	ip, #3
 8002c7a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c7e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c82:	684c      	ldr	r4, [r1, #4]
 8002c84:	f004 0403 	and.w	r4, r4, #3
 8002c88:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c8c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002c90:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c92:	684c      	ldr	r4, [r1, #4]
 8002c94:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002c98:	d0bf      	beq.n	8002c1a <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4c2e      	ldr	r4, [pc, #184]	; (8002d54 <HAL_GPIO_Init+0x218>)
 8002c9c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002ca0:	f045 0502 	orr.w	r5, r5, #2
 8002ca4:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002ca8:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002cac:	f004 0402 	and.w	r4, r4, #2
 8002cb0:	9401      	str	r4, [sp, #4]
 8002cb2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002cb8:	f10c 0502 	add.w	r5, ip, #2
 8002cbc:	4c24      	ldr	r4, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x214>)
 8002cbe:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cc2:	f003 0e03 	and.w	lr, r3, #3
 8002cc6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002cca:	240f      	movs	r4, #15
 8002ccc:	fa04 f40e 	lsl.w	r4, r4, lr
 8002cd0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cd4:	4c20      	ldr	r4, [pc, #128]	; (8002d58 <HAL_GPIO_Init+0x21c>)
 8002cd6:	42a0      	cmp	r0, r4
 8002cd8:	f43f af60 	beq.w	8002b9c <HAL_GPIO_Init+0x60>
 8002cdc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d022      	beq.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002ce4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d020      	beq.n	8002d2e <HAL_GPIO_Init+0x1f2>
 8002cec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d01e      	beq.n	8002d32 <HAL_GPIO_Init+0x1f6>
 8002cf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cf8:	42a0      	cmp	r0, r4
 8002cfa:	d01c      	beq.n	8002d36 <HAL_GPIO_Init+0x1fa>
 8002cfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d00:	42a0      	cmp	r0, r4
 8002d02:	d01a      	beq.n	8002d3a <HAL_GPIO_Init+0x1fe>
 8002d04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d08:	42a0      	cmp	r0, r4
 8002d0a:	d018      	beq.n	8002d3e <HAL_GPIO_Init+0x202>
 8002d0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d10:	42a0      	cmp	r0, r4
 8002d12:	d016      	beq.n	8002d42 <HAL_GPIO_Init+0x206>
 8002d14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d18:	42a0      	cmp	r0, r4
 8002d1a:	d014      	beq.n	8002d46 <HAL_GPIO_Init+0x20a>
 8002d1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d20:	42a0      	cmp	r0, r4
 8002d22:	f43f af39 	beq.w	8002b98 <HAL_GPIO_Init+0x5c>
 8002d26:	240a      	movs	r4, #10
 8002d28:	e739      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d2a:	2401      	movs	r4, #1
 8002d2c:	e737      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d2e:	2402      	movs	r4, #2
 8002d30:	e735      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d32:	2403      	movs	r4, #3
 8002d34:	e733      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d36:	2404      	movs	r4, #4
 8002d38:	e731      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d3a:	2405      	movs	r4, #5
 8002d3c:	e72f      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d3e:	2406      	movs	r4, #6
 8002d40:	e72d      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d42:	2407      	movs	r4, #7
 8002d44:	e72b      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002d46:	2408      	movs	r4, #8
 8002d48:	e729      	b.n	8002b9e <HAL_GPIO_Init+0x62>
  }
}
 8002d4a:	b003      	add	sp, #12
 8002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	58000400 	.word	0x58000400
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58020000 	.word	0x58020000

08002d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5c:	b10a      	cbz	r2, 8002d62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	6181      	str	r1, [r0, #24]
 8002d60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d62:	0409      	lsls	r1, r1, #16
 8002d64:	6181      	str	r1, [r0, #24]
  }
}
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2SEx_TxRxHalfCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d68:	4770      	bx	lr

08002d6a <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2S_ErrorCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002d6c:	4770      	bx	lr

08002d6e <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b508      	push	{r3, lr}
 8002d70:	4603      	mov	r3, r0
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d72:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	b94b      	cbnz	r3, 8002d8c <I2S_DMATxCplt+0x1e>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6893      	ldr	r3, [r2, #8]
 8002d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d80:	6093      	str	r3, [r2, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 8002d8c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d8e:	4798      	blx	r3
#else
  HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d90:	bd08      	pop	{r3, pc}

08002d92 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d92:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d94:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 8002d96:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d98:	4798      	blx	r3
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d9a:	bd08      	pop	{r3, pc}

08002d9c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b508      	push	{r3, lr}
 8002d9e:	4603      	mov	r3, r0
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da0:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	b94b      	cbnz	r3, 8002dba <I2S_DMARxCplt+0x1e>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002da6:	6802      	ldr	r2, [r0, #0]
 8002da8:	6893      	ldr	r3, [r2, #8]
 8002daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dae:	6093      	str	r3, [r2, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	8743      	strh	r3, [r0, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 8002dba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002dbc:	4798      	blx	r3
#else
  HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002dbe:	bd08      	pop	{r3, pc}

08002dc0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc2:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 8002dc4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002dc6:	4798      	blx	r3
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002dc8:	bd08      	pop	{r3, pc}

08002dca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dca:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dcc:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002dce:	6802      	ldr	r2, [r0, #0]
 8002dd0:	6893      	ldr	r3, [r2, #8]
 8002dd2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dd6:	6093      	str	r3, [r2, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8002ddc:	8743      	strh	r3, [r0, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002de4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6503      	str	r3, [r0, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 8002dec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002dee:	4798      	blx	r3
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002df0:	bd08      	pop	{r3, pc}
	...

08002df4 <HAL_I2S_Init>:
  if (hi2s == NULL)
 8002df4:	2800      	cmp	r0, #0
 8002df6:	f000 80c5 	beq.w	8002f84 <HAL_I2S_Init+0x190>
{
 8002dfa:	b570      	push	{r4, r5, r6, lr}
 8002dfc:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002dfe:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8002e02:	b9ab      	cbnz	r3, 8002e30 <HAL_I2S_Init+0x3c>
    hi2s->Lock = HAL_UNLOCKED;
 8002e04:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8002e08:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_I2S_Init+0x194>)
 8002e0a:	6543      	str	r3, [r0, #84]	; 0x54
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8002e0c:	4b5f      	ldr	r3, [pc, #380]	; (8002f8c <HAL_I2S_Init+0x198>)
 8002e0e:	6583      	str	r3, [r0, #88]	; 0x58
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8002e10:	4b5f      	ldr	r3, [pc, #380]	; (8002f90 <HAL_I2S_Init+0x19c>)
 8002e12:	65c3      	str	r3, [r0, #92]	; 0x5c
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 8002e14:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_I2S_Init+0x1a0>)
 8002e16:	6603      	str	r3, [r0, #96]	; 0x60
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8002e18:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_I2S_Init+0x1a4>)
 8002e1a:	6643      	str	r3, [r0, #100]	; 0x64
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8002e1c:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_I2S_Init+0x1a8>)
 8002e1e:	6683      	str	r3, [r0, #104]	; 0x68
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8002e20:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_I2S_Init+0x1ac>)
 8002e22:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (hi2s->MspInitCallback == NULL)
 8002e24:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d051      	beq.n	8002ece <HAL_I2S_Init+0xda>
    hi2s->MspInitCallback(hi2s);
 8002e2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4798      	blx	r3
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e30:	2302      	movs	r3, #2
 8002e32:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	f012 0f01 	tst.w	r2, #1
 8002e3e:	d003      	beq.n	8002e48 <HAL_I2S_Init+0x54>
    __HAL_I2S_DISABLE(hi2s);
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	651a      	str	r2, [r3, #80]	; 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002e4e:	6863      	ldr	r3, [r4, #4]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	bf18      	it	ne
 8002e54:	2b04      	cmpne	r3, #4
 8002e56:	d03d      	beq.n	8002ed4 <HAL_I2S_Init+0xe0>
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d03b      	beq.n	8002ed4 <HAL_I2S_Init+0xe0>
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002e5c:	6821      	ldr	r1, [r4, #0]
 8002e5e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002e60:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_I2S_Init+0x1b0>)
 8002e62:	401a      	ands	r2, r3
 8002e64:	6863      	ldr	r3, [r4, #4]
 8002e66:	68a0      	ldr	r0, [r4, #8]
 8002e68:	4303      	orrs	r3, r0
 8002e6a:	68e0      	ldr	r0, [r4, #12]
 8002e6c:	4303      	orrs	r3, r0
 8002e6e:	69a0      	ldr	r0, [r4, #24]
 8002e70:	4303      	orrs	r3, r0
 8002e72:	6a20      	ldr	r0, [r4, #32]
 8002e74:	4303      	orrs	r3, r0
 8002e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e78:	4303      	orrs	r3, r0
 8002e7a:	6920      	ldr	r0, [r4, #16]
 8002e7c:	4303      	orrs	r3, r0
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	650a      	str	r2, [r1, #80]	; 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002e8c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	6813      	ldr	r3, [r2, #0]
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	68d3      	ldr	r3, [r2, #12]
 8002e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ea0:	69e1      	ldr	r1, [r4, #28]
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	bf18      	it	ne
 8002eac:	2b04      	cmpne	r3, #4
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2S_Init+0xc0>
 8002eb0:	2b0a      	cmp	r3, #10
 8002eb2:	d106      	bne.n	8002ec2 <HAL_I2S_Init+0xce>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002eb4:	6822      	ldr	r2, [r4, #0]
 8002eb6:	68d3      	ldr	r3, [r2, #12]
 8002eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ebc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	6520      	str	r0, [r4, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_I2S_Init+0x1b4>)
 8002ed0:	6703      	str	r3, [r0, #112]	; 0x70
 8002ed2:	e7aa      	b.n	8002e2a <HAL_I2S_Init+0x36>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ed4:	6963      	ldr	r3, [r4, #20]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d04c      	beq.n	8002f74 <HAL_I2S_Init+0x180>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002eda:	68e3      	ldr	r3, [r4, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d038      	beq.n	8002f52 <HAL_I2S_Init+0x15e>
        packetlength = 2UL;
 8002ee0:	2602      	movs	r6, #2
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002ee2:	68a3      	ldr	r3, [r4, #8]
 8002ee4:	2bb0      	cmp	r3, #176	; 0xb0
 8002ee6:	bf18      	it	ne
 8002ee8:	2b30      	cmpne	r3, #48	; 0x30
 8002eea:	d134      	bne.n	8002f56 <HAL_I2S_Init+0x162>
        ispcm = 1UL;
 8002eec:	2501      	movs	r5, #1
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002eee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f002 f8be 	bl	8005074 <HAL_RCCEx_GetPeriphCLKFreq>
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ef8:	6923      	ldr	r3, [r4, #16]
 8002efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efe:	d02c      	beq.n	8002f5a <HAL_I2S_Init+0x166>
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002f00:	2320      	movs	r3, #32
 8002f02:	40eb      	lsrs	r3, r5
 8002f04:	fb06 f303 	mul.w	r3, r6, r3
 8002f08:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f10:	0043      	lsls	r3, r0, #1
 8002f12:	6962      	ldr	r2, [r4, #20]
 8002f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f18:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <HAL_I2S_Init+0x1b8>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002f20:	f3c3 02c0 	ubfx	r2, r3, #3, #1
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002f24:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8002f28:	085b      	lsrs	r3, r3, #1
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2100      	movne	r1, #0
 8002f30:	f002 0101 	andeq.w	r1, r2, #1
 8002f34:	bb01      	cbnz	r1, 8002f78 <HAL_I2S_Init+0x184>
 8002f36:	2bff      	cmp	r3, #255	; 0xff
 8002f38:	d81e      	bhi.n	8002f78 <HAL_I2S_Init+0x184>
    if (i2sdiv == 0UL)
 8002f3a:	b903      	cbnz	r3, 8002f3e <HAL_I2S_Init+0x14a>
      i2sodd = 1UL;
 8002f3c:	2201      	movs	r2, #1
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002f42:	491b      	ldr	r1, [pc, #108]	; (8002fb0 <HAL_I2S_Init+0x1bc>)
 8002f44:	4029      	ands	r1, r5
 8002f46:	0612      	lsls	r2, r2, #24
 8002f48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	6501      	str	r1, [r0, #80]	; 0x50
 8002f50:	e784      	b.n	8002e5c <HAL_I2S_Init+0x68>
        packetlength = 1UL;
 8002f52:	2601      	movs	r6, #1
 8002f54:	e7c5      	b.n	8002ee2 <HAL_I2S_Init+0xee>
        ispcm = 0UL;
 8002f56:	2500      	movs	r5, #0
 8002f58:	e7c9      	b.n	8002eee <HAL_I2S_Init+0xfa>
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f5e:	40eb      	lsrs	r3, r5
 8002f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f68:	0043      	lsls	r3, r0, #1
 8002f6a:	6962      	ldr	r2, [r4, #20]
 8002f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f70:	3305      	adds	r3, #5
 8002f72:	e7d2      	b.n	8002f1a <HAL_I2S_Init+0x126>
      i2sodd = 0UL;
 8002f74:	2200      	movs	r2, #0
 8002f76:	e7d8      	b.n	8002f2a <HAL_I2S_Init+0x136>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	6523      	str	r3, [r4, #80]	; 0x50
      return  HAL_ERROR;
 8002f80:	2001      	movs	r0, #1
 8002f82:	e7a3      	b.n	8002ecc <HAL_I2S_Init+0xd8>
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
}
 8002f86:	4770      	bx	lr
 8002f88:	0800102d 	.word	0x0800102d
 8002f8c:	08000fa9 	.word	0x08000fa9
 8002f90:	08002d6b 	.word	0x08002d6b
 8002f94:	08000ff5 	.word	0x08000ff5
 8002f98:	08000f5d 	.word	0x08000f5d
 8002f9c:	08002d69 	.word	0x08002d69
 8002fa0:	08002d6d 	.word	0x08002d6d
 8002fa4:	fdff9040 	.word	0xfdff9040
 8002fa8:	08001451 	.word	0x08001451
 8002fac:	cccccccd 	.word	0xcccccccd
 8002fb0:	fe00ffff 	.word	0xfe00ffff

08002fb4 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	bf18      	it	ne
 8002fb8:	2900      	cmpne	r1, #0
 8002fba:	d052      	beq.n	8003062 <HAL_I2S_Transmit_DMA+0xae>
{
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002fc0:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
 8002fc4:	b2ed      	uxtb	r5, r5
 8002fc6:	2d01      	cmp	r5, #1
 8002fc8:	d14d      	bne.n	8003066 <HAL_I2S_Transmit_DMA+0xb2>
  __HAL_LOCK(hi2s);
 8002fca:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d04a      	beq.n	800306a <HAL_I2S_Transmit_DMA+0xb6>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6523      	str	r3, [r4, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8002fe4:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8002fe6:	8622      	strh	r2, [r4, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8002fe8:	8662      	strh	r2, [r4, #50]	; 0x32
  hi2s->pRxBuffPtr  = NULL;
 8002fea:	6363      	str	r3, [r4, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8002fec:	8723      	strh	r3, [r4, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8002fee:	8763      	strh	r3, [r4, #58]	; 0x3a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_I2S_Transmit_DMA+0xbc>)
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_I2S_Transmit_DMA+0xc0>)
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_I2S_Transmit_DMA+0xc4>)
 8003000:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003002:	6822      	ldr	r2, [r4, #0]
                                 hi2s->TxXferCount))
 8003004:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003006:	b29b      	uxth	r3, r3
 8003008:	3220      	adds	r2, #32
 800300a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800300c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800300e:	f7ff f8ad 	bl	800216c <HAL_DMA_Start_IT>
 8003012:	b9d0      	cbnz	r0, 800304a <HAL_I2S_Transmit_DMA+0x96>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800301c:	d103      	bne.n	8003026 <HAL_I2S_Transmit_DMA+0x72>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003024:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f012 0f01 	tst.w	r2, #1
 800302e:	d103      	bne.n	8003038 <HAL_I2S_Transmit_DMA+0x84>
    __HAL_I2S_ENABLE(hi2s);
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003040:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2s);
 8003042:	2300      	movs	r3, #0
 8003044:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return errorcode;
 8003048:	e00e      	b.n	8003068 <HAL_I2S_Transmit_DMA+0xb4>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800304a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003052:	2301      	movs	r3, #1
 8003054:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8003058:	2300      	movs	r3, #0
 800305a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return errorcode;
 800305e:	4628      	mov	r0, r5
 8003060:	e002      	b.n	8003068 <HAL_I2S_Transmit_DMA+0xb4>
    return  HAL_ERROR;
 8003062:	2001      	movs	r0, #1
}
 8003064:	4770      	bx	lr
    return HAL_BUSY;
 8003066:	2002      	movs	r0, #2
}
 8003068:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hi2s);
 800306a:	2002      	movs	r0, #2
 800306c:	e7fc      	b.n	8003068 <HAL_I2S_Transmit_DMA+0xb4>
 800306e:	bf00      	nop
 8003070:	08002d93 	.word	0x08002d93
 8003074:	08002d6f 	.word	0x08002d6f
 8003078:	08002dcb 	.word	0x08002dcb

0800307c <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 800307c:	2a00      	cmp	r2, #0
 800307e:	bf18      	it	ne
 8003080:	2900      	cmpne	r1, #0
 8003082:	d052      	beq.n	800312a <HAL_I2S_Receive_DMA+0xae>
{
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8003088:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
 800308c:	b2ed      	uxtb	r5, r5
 800308e:	2d01      	cmp	r5, #1
 8003090:	d14d      	bne.n	800312e <HAL_I2S_Receive_DMA+0xb2>
  __HAL_LOCK(hi2s);
 8003092:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d04a      	beq.n	8003132 <HAL_I2S_Receive_DMA+0xb6>
 800309c:	2301      	movs	r3, #1
 800309e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80030a2:	2304      	movs	r3, #4
 80030a4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	6523      	str	r3, [r4, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 80030ac:	6361      	str	r1, [r4, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 80030ae:	8722      	strh	r2, [r4, #56]	; 0x38
  hi2s->RxXferCount = Size;
 80030b0:	8762      	strh	r2, [r4, #58]	; 0x3a
  hi2s->pTxBuffPtr  = NULL;
 80030b2:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80030b4:	8623      	strh	r3, [r4, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80030b6:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80030b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_I2S_Receive_DMA+0xbc>)
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80030be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_I2S_Receive_DMA+0xc0>)
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80030c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_I2S_Receive_DMA+0xc4>)
 80030c8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80030ca:	6821      	ldr	r1, [r4, #0]
                                 hi2s->RxXferCount))
 80030cc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030d2:	3130      	adds	r1, #48	; 0x30
 80030d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80030d6:	f7ff f849 	bl	800216c <HAL_DMA_Start_IT>
 80030da:	b9d0      	cbnz	r0, 8003112 <HAL_I2S_Receive_DMA+0x96>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80030e4:	d103      	bne.n	80030ee <HAL_I2S_Receive_DMA+0x72>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ec:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f012 0f01 	tst.w	r2, #1
 80030f6:	d103      	bne.n	8003100 <HAL_I2S_Receive_DMA+0x84>
    __HAL_I2S_ENABLE(hi2s);
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003108:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2s);
 800310a:	2300      	movs	r3, #0
 800310c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return errorcode;
 8003110:	e00e      	b.n	8003130 <HAL_I2S_Receive_DMA+0xb4>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003112:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800311a:	2301      	movs	r3, #1
 800311c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8003120:	2300      	movs	r3, #0
 8003122:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return errorcode;
 8003126:	4628      	mov	r0, r5
 8003128:	e002      	b.n	8003130 <HAL_I2S_Receive_DMA+0xb4>
    return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
}
 800312c:	4770      	bx	lr
    return HAL_BUSY;
 800312e:	2002      	movs	r0, #2
}
 8003130:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hi2s);
 8003132:	2002      	movs	r0, #2
 8003134:	e7fc      	b.n	8003130 <HAL_I2S_Receive_DMA+0xb4>
 8003136:	bf00      	nop
 8003138:	08002dc1 	.word	0x08002dc1
 800313c:	08002d9d 	.word	0x08002d9d
 8003140:	08002dcb 	.word	0x08002dcb

08003144 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_PWREx_ConfigSupply+0x90>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2b06      	cmp	r3, #6
 8003152:	d007      	beq.n	8003164 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_PWREx_ConfigSupply+0x90>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315c:	4283      	cmp	r3, r0
 800315e:	d036      	beq.n	80031ce <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003160:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003162:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_PWREx_ConfigSupply+0x90>)
 8003166:	68d3      	ldr	r3, [r2, #12]
 8003168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800316c:	4303      	orrs	r3, r0
 800316e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8003170:	f7fe fb8e 	bl	8001890 <HAL_GetTick>
 8003174:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_PWREx_ConfigSupply+0x90>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800317e:	d107      	bne.n	8003190 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003180:	f7fe fb86 	bl	8001890 <HAL_GetTick>
 8003184:	1b43      	subs	r3, r0, r5
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318a:	d9f4      	bls.n	8003176 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800318c:	2001      	movs	r0, #1
 800318e:	e7e8      	b.n	8003162 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003190:	2c2e      	cmp	r4, #46	; 0x2e
 8003192:	bf18      	it	ne
 8003194:	2c1e      	cmpne	r4, #30
 8003196:	d008      	beq.n	80031aa <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8003198:	2c2d      	cmp	r4, #45	; 0x2d
 800319a:	bf14      	ite	ne
 800319c:	2300      	movne	r3, #0
 800319e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031a0:	2c1d      	cmp	r4, #29
 80031a2:	d002      	beq.n	80031aa <HAL_PWREx_ConfigSupply+0x66>
 80031a4:	b90b      	cbnz	r3, 80031aa <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 80031a6:	2000      	movs	r0, #0
 80031a8:	e7db      	b.n	8003162 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 80031aa:	f7fe fb71 	bl	8001890 <HAL_GetTick>
 80031ae:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_PWREx_ConfigSupply+0x90>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031b8:	d107      	bne.n	80031ca <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031ba:	f7fe fb69 	bl	8001890 <HAL_GetTick>
 80031be:	1b00      	subs	r0, r0, r4
 80031c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031c4:	d9f4      	bls.n	80031b0 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 80031c6:	2001      	movs	r0, #1
 80031c8:	e7cb      	b.n	8003162 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 80031ca:	2000      	movs	r0, #0
 80031cc:	e7c9      	b.n	8003162 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 80031ce:	2000      	movs	r0, #0
 80031d0:	e7c7      	b.n	8003162 <HAL_PWREx_ConfigSupply+0x1e>
 80031d2:	bf00      	nop
 80031d4:	58024800 	.word	0x58024800

080031d8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d8:	2800      	cmp	r0, #0
 80031da:	f000 8339 	beq.w	8003850 <HAL_RCC_OscConfig+0x678>
{
 80031de:	b538      	push	{r3, r4, r5, lr}
 80031e0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	6803      	ldr	r3, [r0, #0]
 80031e4:	f013 0f01 	tst.w	r3, #1
 80031e8:	d025      	beq.n	8003236 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ea:	4a94      	ldr	r2, [pc, #592]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80031ec:	6913      	ldr	r3, [r2, #16]
 80031ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d015      	beq.n	8003224 <HAL_RCC_OscConfig+0x4c>
 80031f8:	2b18      	cmp	r3, #24
 80031fa:	d00f      	beq.n	800321c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d03f      	beq.n	8003284 <HAL_RCC_OscConfig+0xac>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d153      	bne.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003208:	4b8c      	ldr	r3, [pc, #560]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e038      	b.n	800328e <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	2a02      	cmp	r2, #2
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800322c:	d003      	beq.n	8003236 <HAL_RCC_OscConfig+0x5e>
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 830f 	beq.w	8003854 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f013 0f02 	tst.w	r3, #2
 800323c:	f000 80a1 	beq.w	8003382 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003240:	4a7e      	ldr	r2, [pc, #504]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003242:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003244:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003246:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800324a:	d05a      	beq.n	8003302 <HAL_RCC_OscConfig+0x12a>
 800324c:	2b18      	cmp	r3, #24
 800324e:	d055      	beq.n	80032fc <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003250:	68e3      	ldr	r3, [r4, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80de 	beq.w	8003414 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003258:	4978      	ldr	r1, [pc, #480]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800325a:	680a      	ldr	r2, [r1, #0]
 800325c:	f022 0219 	bic.w	r2, r2, #25
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fb14 	bl	8001890 <HAL_GetTick>
 8003268:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326a:	4b74      	ldr	r3, [pc, #464]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f013 0f04 	tst.w	r3, #4
 8003272:	f040 80ad 	bne.w	80033d0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe fb0b 	bl	8001890 <HAL_GetTick>
 800327a:	1b40      	subs	r0, r0, r5
 800327c:	2802      	cmp	r0, #2
 800327e:	d9f4      	bls.n	800326a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8003280:	2003      	movs	r0, #3
 8003282:	e2ee      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	4a6d      	ldr	r2, [pc, #436]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328e:	6863      	ldr	r3, [r4, #4]
 8003290:	b32b      	cbz	r3, 80032de <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003292:	f7fe fafd 	bl	8001890 <HAL_GetTick>
 8003296:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003298:	4b68      	ldr	r3, [pc, #416]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032a0:	d1c9      	bne.n	8003236 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a2:	f7fe faf5 	bl	8001890 <HAL_GetTick>
 80032a6:	1b40      	subs	r0, r0, r5
 80032a8:	2864      	cmp	r0, #100	; 0x64
 80032aa:	d9f5      	bls.n	8003298 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80032ac:	2003      	movs	r0, #3
 80032ae:	e2d8      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_OscConfig+0xf2>
 80032b6:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e7e1      	b.n	800328e <HAL_RCC_OscConfig+0xb6>
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e7d7      	b.n	800328e <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 80032de:	f7fe fad7 	bl	8001890 <HAL_GetTick>
 80032e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e4:	4b55      	ldr	r3, [pc, #340]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032ec:	d0a3      	beq.n	8003236 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ee:	f7fe facf 	bl	8001890 <HAL_GetTick>
 80032f2:	1b40      	subs	r0, r0, r5
 80032f4:	2864      	cmp	r0, #100	; 0x64
 80032f6:	d9f5      	bls.n	80032e4 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e2b2      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032fc:	f012 0f03 	tst.w	r2, #3
 8003300:	d1a6      	bne.n	8003250 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003302:	4b4e      	ldr	r3, [pc, #312]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f013 0f04 	tst.w	r3, #4
 800330a:	d003      	beq.n	8003314 <HAL_RCC_OscConfig+0x13c>
 800330c:	68e3      	ldr	r3, [r4, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 82a2 	beq.w	8003858 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003314:	4a49      	ldr	r2, [pc, #292]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f023 0319 	bic.w	r3, r3, #25
 800331c:	68e1      	ldr	r1, [r4, #12]
 800331e:	430b      	orrs	r3, r1
 8003320:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003322:	f7fe fab5 	bl	8001890 <HAL_GetTick>
 8003326:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003328:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f013 0f04 	tst.w	r3, #4
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe faad 	bl	8001890 <HAL_GetTick>
 8003336:	1b40      	subs	r0, r0, r5
 8003338:	2802      	cmp	r0, #2
 800333a:	d9f5      	bls.n	8003328 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
 800333e:	e290      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	f7fe fac0 	bl	80018c4 <HAL_GetREVID>
 8003344:	f241 0303 	movw	r3, #4099	; 0x1003
 8003348:	4298      	cmp	r0, r3
 800334a:	d812      	bhi.n	8003372 <HAL_RCC_OscConfig+0x19a>
 800334c:	6922      	ldr	r2, [r4, #16]
 800334e:	2a40      	cmp	r2, #64	; 0x40
 8003350:	d007      	beq.n	8003362 <HAL_RCC_OscConfig+0x18a>
 8003352:	493a      	ldr	r1, [pc, #232]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003354:	684b      	ldr	r3, [r1, #4]
 8003356:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800335a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	e00f      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
 8003362:	4a36      	ldr	r2, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003364:	6853      	ldr	r3, [r2, #4]
 8003366:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	6053      	str	r3, [r2, #4]
 8003370:	e007      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
 8003372:	4a32      	ldr	r2, [pc, #200]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003374:	6853      	ldr	r3, [r2, #4]
 8003376:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800337a:	6921      	ldr	r1, [r4, #16]
 800337c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003380:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	f013 0f10 	tst.w	r3, #16
 8003388:	f000 8088 	beq.w	800349c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338c:	4a2b      	ldr	r2, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x264>)
 800338e:	6913      	ldr	r3, [r2, #16]
 8003390:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003394:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003396:	2b08      	cmp	r3, #8
 8003398:	d056      	beq.n	8003448 <HAL_RCC_OscConfig+0x270>
 800339a:	2b18      	cmp	r3, #24
 800339c:	d050      	beq.n	8003440 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800339e:	69e3      	ldr	r3, [r4, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80b8 	beq.w	8003516 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fa6e 	bl	8001890 <HAL_GetTick>
 80033b4:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033be:	f040 8088 	bne.w	80034d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033c2:	f7fe fa65 	bl	8001890 <HAL_GetTick>
 80033c6:	1b40      	subs	r0, r0, r5
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d9f4      	bls.n	80033b6 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 80033cc:	2003      	movs	r0, #3
 80033ce:	e248      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	f7fe fa78 	bl	80018c4 <HAL_GetREVID>
 80033d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80033d8:	4298      	cmp	r0, r3
 80033da:	d812      	bhi.n	8003402 <HAL_RCC_OscConfig+0x22a>
 80033dc:	6922      	ldr	r2, [r4, #16]
 80033de:	2a40      	cmp	r2, #64	; 0x40
 80033e0:	d007      	beq.n	80033f2 <HAL_RCC_OscConfig+0x21a>
 80033e2:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80033e4:	684b      	ldr	r3, [r1, #4]
 80033e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033ea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80033ee:	604b      	str	r3, [r1, #4]
 80033f0:	e7c7      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_RCC_OscConfig+0x264>)
 80033f4:	6853      	ldr	r3, [r2, #4]
 80033f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	6053      	str	r3, [r2, #4]
 8003400:	e7bf      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003404:	6853      	ldr	r3, [r2, #4]
 8003406:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800340a:	6921      	ldr	r1, [r4, #16]
 800340c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003410:	6053      	str	r3, [r2, #4]
 8003412:	e7b6      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800341e:	f7fe fa37 	bl	8001890 <HAL_GetTick>
 8003422:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_OscConfig+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f013 0f04 	tst.w	r3, #4
 800342c:	d0a9      	beq.n	8003382 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe fa2f 	bl	8001890 <HAL_GetTick>
 8003432:	1b40      	subs	r0, r0, r5
 8003434:	2802      	cmp	r0, #2
 8003436:	d9f5      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8003438:	2003      	movs	r0, #3
 800343a:	e212      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 800343c:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	2a01      	cmp	r2, #1
 8003446:	d1aa      	bne.n	800339e <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003448:	4ba1      	ldr	r3, [pc, #644]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003450:	d003      	beq.n	800345a <HAL_RCC_OscConfig+0x282>
 8003452:	69e3      	ldr	r3, [r4, #28]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	f040 8201 	bne.w	800385c <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345a:	f7fe fa33 	bl	80018c4 <HAL_GetREVID>
 800345e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003462:	4298      	cmp	r0, r3
 8003464:	d812      	bhi.n	800348c <HAL_RCC_OscConfig+0x2b4>
 8003466:	6a22      	ldr	r2, [r4, #32]
 8003468:	2a20      	cmp	r2, #32
 800346a:	d007      	beq.n	800347c <HAL_RCC_OscConfig+0x2a4>
 800346c:	4998      	ldr	r1, [pc, #608]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800346e:	684b      	ldr	r3, [r1, #4]
 8003470:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003474:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003478:	604b      	str	r3, [r1, #4]
 800347a:	e00f      	b.n	800349c <HAL_RCC_OscConfig+0x2c4>
 800347c:	4a94      	ldr	r2, [pc, #592]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	6853      	ldr	r3, [r2, #4]
 8003480:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003488:	6053      	str	r3, [r2, #4]
 800348a:	e007      	b.n	800349c <HAL_RCC_OscConfig+0x2c4>
 800348c:	4a90      	ldr	r2, [pc, #576]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800348e:	68d3      	ldr	r3, [r2, #12]
 8003490:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003494:	6a21      	ldr	r1, [r4, #32]
 8003496:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800349a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	f013 0f08 	tst.w	r3, #8
 80034a2:	d060      	beq.n	8003566 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034a4:	6963      	ldr	r3, [r4, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d049      	beq.n	800353e <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4a89      	ldr	r2, [pc, #548]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe f9ec 	bl	8001890 <HAL_GetTick>
 80034b8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ba:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f013 0f02 	tst.w	r3, #2
 80034c2:	d150      	bne.n	8003566 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe f9e4 	bl	8001890 <HAL_GetTick>
 80034c8:	1b40      	subs	r0, r0, r5
 80034ca:	2802      	cmp	r0, #2
 80034cc:	d9f5      	bls.n	80034ba <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 80034ce:	2003      	movs	r0, #3
 80034d0:	e1c7      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d2:	f7fe f9f7 	bl	80018c4 <HAL_GetREVID>
 80034d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80034da:	4298      	cmp	r0, r3
 80034dc:	d812      	bhi.n	8003504 <HAL_RCC_OscConfig+0x32c>
 80034de:	6a22      	ldr	r2, [r4, #32]
 80034e0:	2a20      	cmp	r2, #32
 80034e2:	d007      	beq.n	80034f4 <HAL_RCC_OscConfig+0x31c>
 80034e4:	497a      	ldr	r1, [pc, #488]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	684b      	ldr	r3, [r1, #4]
 80034e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034ec:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e7d3      	b.n	800349c <HAL_RCC_OscConfig+0x2c4>
 80034f4:	4a76      	ldr	r2, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80034f6:	6853      	ldr	r3, [r2, #4]
 80034f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003500:	6053      	str	r3, [r2, #4]
 8003502:	e7cb      	b.n	800349c <HAL_RCC_OscConfig+0x2c4>
 8003504:	4a72      	ldr	r2, [pc, #456]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003506:	68d3      	ldr	r3, [r2, #12]
 8003508:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800350c:	6a21      	ldr	r1, [r4, #32]
 800350e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	e7c2      	b.n	800349c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8003516:	4a6e      	ldr	r2, [pc, #440]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003520:	f7fe f9b6 	bl	8001890 <HAL_GetTick>
 8003524:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003526:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800352e:	d0b5      	beq.n	800349c <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003530:	f7fe f9ae 	bl	8001890 <HAL_GetTick>
 8003534:	1b40      	subs	r0, r0, r5
 8003536:	2802      	cmp	r0, #2
 8003538:	d9f5      	bls.n	8003526 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 800353a:	2003      	movs	r0, #3
 800353c:	e191      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353e:	4a64      	ldr	r2, [pc, #400]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003540:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe f9a2 	bl	8001890 <HAL_GetTick>
 800354c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800354e:	4b60      	ldr	r3, [pc, #384]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	f013 0f02 	tst.w	r3, #2
 8003556:	d006      	beq.n	8003566 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe f99a 	bl	8001890 <HAL_GetTick>
 800355c:	1b40      	subs	r0, r0, r5
 800355e:	2802      	cmp	r0, #2
 8003560:	d9f5      	bls.n	800354e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003562:	2003      	movs	r0, #3
 8003564:	e17d      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	f013 0f20 	tst.w	r3, #32
 800356c:	d029      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800356e:	69a3      	ldr	r3, [r4, #24]
 8003570:	b19b      	cbz	r3, 800359a <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003572:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800357a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800357c:	f7fe f988 	bl	8001890 <HAL_GetTick>
 8003580:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003582:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800358a:	d11a      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800358c:	f7fe f980 	bl	8001890 <HAL_GetTick>
 8003590:	1b40      	subs	r0, r0, r5
 8003592:	2802      	cmp	r0, #2
 8003594:	d9f5      	bls.n	8003582 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003596:	2003      	movs	r0, #3
 8003598:	e163      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800359a:	4a4d      	ldr	r2, [pc, #308]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a4:	f7fe f974 	bl	8001890 <HAL_GetTick>
 80035a8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035aa:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80035b2:	d006      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7fe f96c 	bl	8001890 <HAL_GetTick>
 80035b8:	1b40      	subs	r0, r0, r5
 80035ba:	2802      	cmp	r0, #2
 80035bc:	d9f5      	bls.n	80035aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80035be:	2003      	movs	r0, #3
 80035c0:	e14f      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f013 0f04 	tst.w	r3, #4
 80035c8:	d121      	bne.n	800360e <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8147 	beq.w	8003860 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035d2:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80035da:	2a18      	cmp	r2, #24
 80035dc:	f000 80ee 	beq.w	80037bc <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d079      	beq.n	80036d8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4a3a      	ldr	r2, [pc, #232]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe f94f 	bl	8001890 <HAL_GetTick>
 80035f2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035fc:	f000 80dc 	beq.w	80037b8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f946 	bl	8001890 <HAL_GetTick>
 8003604:	1b00      	subs	r0, r0, r4
 8003606:	2802      	cmp	r0, #2
 8003608:	d9f4      	bls.n	80035f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800360a:	2003      	movs	r0, #3
 800360c:	e129      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 800360e:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x4fc>)
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003618:	f7fe f93a 	bl	8001890 <HAL_GetTick>
 800361c:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x4fc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fe f932 	bl	8001890 <HAL_GetTick>
 800362c:	1b40      	subs	r0, r0, r5
 800362e:	2864      	cmp	r0, #100	; 0x64
 8003630:	d9f5      	bls.n	800361e <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8003632:	2003      	movs	r0, #3
 8003634:	e115      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d00a      	beq.n	8003652 <HAL_RCC_OscConfig+0x47a>
 800363c:	bb0b      	cbnz	r3, 8003682 <HAL_RCC_OscConfig+0x4aa>
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	671a      	str	r2, [r3, #112]	; 0x70
 8003648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	671a      	str	r2, [r3, #112]	; 0x70
 8003650:	e004      	b.n	800365c <HAL_RCC_OscConfig+0x484>
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003654:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	b333      	cbz	r3, 80036ae <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8003660:	f7fe f916 	bl	8001890 <HAL_GetTick>
 8003664:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	f013 0f02 	tst.w	r3, #2
 800366e:	d1ac      	bne.n	80035ca <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fe f90e 	bl	8001890 <HAL_GetTick>
 8003674:	1b40      	subs	r0, r0, r5
 8003676:	f241 3388 	movw	r3, #5000	; 0x1388
 800367a:	4298      	cmp	r0, r3
 800367c:	d9f3      	bls.n	8003666 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 800367e:	2003      	movs	r0, #3
 8003680:	e0ef      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003682:	2b05      	cmp	r3, #5
 8003684:	d009      	beq.n	800369a <HAL_RCC_OscConfig+0x4c2>
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	671a      	str	r2, [r3, #112]	; 0x70
 8003690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	671a      	str	r2, [r3, #112]	; 0x70
 8003698:	e7e0      	b.n	800365c <HAL_RCC_OscConfig+0x484>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 800369c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800369e:	f042 0204 	orr.w	r2, r2, #4
 80036a2:	671a      	str	r2, [r3, #112]	; 0x70
 80036a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	671a      	str	r2, [r3, #112]	; 0x70
 80036ac:	e7d6      	b.n	800365c <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80036ae:	f7fe f8ef 	bl	8001890 <HAL_GetTick>
 80036b2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_OscConfig+0x4f8>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f013 0f02 	tst.w	r3, #2
 80036bc:	d085      	beq.n	80035ca <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f8e7 	bl	8001890 <HAL_GetTick>
 80036c2:	1b40      	subs	r0, r0, r5
 80036c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c8:	4298      	cmp	r0, r3
 80036ca:	d9f3      	bls.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 80036cc:	2003      	movs	r0, #3
 80036ce:	e0c8      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 80036d0:	58024400 	.word	0x58024400
 80036d4:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4a69      	ldr	r2, [pc, #420]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036e2:	f7fe f8d5 	bl	8001890 <HAL_GetTick>
 80036e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036e8:	4b65      	ldr	r3, [pc, #404]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036f0:	d006      	beq.n	8003700 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe f8cd 	bl	8001890 <HAL_GetTick>
 80036f6:	1b40      	subs	r0, r0, r5
 80036f8:	2802      	cmp	r0, #2
 80036fa:	d9f5      	bls.n	80036e8 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 80036fc:	2003      	movs	r0, #3
 80036fe:	e0b0      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 8003702:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003704:	4a5f      	ldr	r2, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x6ac>)
 8003706:	400a      	ands	r2, r1
 8003708:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800370a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800370c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003710:	430a      	orrs	r2, r1
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
 8003714:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003716:	3a01      	subs	r2, #1
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371e:	3901      	subs	r1, #1
 8003720:	0249      	lsls	r1, r1, #9
 8003722:	b289      	uxth	r1, r1
 8003724:	430a      	orrs	r2, r1
 8003726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003728:	3901      	subs	r1, #1
 800372a:	0409      	lsls	r1, r1, #16
 800372c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003730:	430a      	orrs	r2, r1
 8003732:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003734:	3901      	subs	r1, #1
 8003736:	0609      	lsls	r1, r1, #24
 8003738:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800373c:	430a      	orrs	r2, r1
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800374a:	4a4f      	ldr	r2, [pc, #316]	; (8003888 <HAL_RCC_OscConfig+0x6b0>)
 800374c:	400a      	ands	r2, r1
 800374e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003750:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	f022 020c 	bic.w	r2, r2, #12
 800375c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800375e:	430a      	orrs	r2, r1
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	f022 0202 	bic.w	r2, r2, #2
 8003768:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800376a:	430a      	orrs	r2, r1
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003796:	f7fe f87b 	bl	8001890 <HAL_GetTick>
 800379a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379c:	4b38      	ldr	r3, [pc, #224]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe f873 	bl	8001890 <HAL_GetTick>
 80037aa:	1b00      	subs	r0, r0, r4
 80037ac:	2802      	cmp	r0, #2
 80037ae:	d9f5      	bls.n	800379c <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e056      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2000      	movs	r0, #0
 80037b6:	e054      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 80037b8:	2000      	movs	r0, #0
 80037ba:	e052      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037bc:	4a30      	ldr	r2, [pc, #192]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 80037be:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037c0:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d04e      	beq.n	8003864 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	f001 0303 	and.w	r3, r1, #3
 80037ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d14b      	bne.n	8003868 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d0:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80037d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d148      	bne.n	800386c <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037da:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80037de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d144      	bne.n	8003870 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037e6:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80037ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d140      	bne.n	8003874 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037f2:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80037f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d13c      	bne.n	8003878 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037fe:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003804:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003806:	4298      	cmp	r0, r3
 8003808:	d138      	bne.n	800387c <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003812:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003814:	429a      	cmp	r2, r3
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8003818:	2000      	movs	r0, #0
 800381a:	e022      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 800381e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8003826:	f7fe f833 	bl	8001890 <HAL_GetTick>
 800382a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800382c:	f7fe f830 	bl	8001890 <HAL_GetTick>
 8003830:	42a8      	cmp	r0, r5
 8003832:	d0fb      	beq.n	800382c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_RCC_OscConfig+0x6a8>)
 8003836:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003838:	4b13      	ldr	r3, [pc, #76]	; (8003888 <HAL_RCC_OscConfig+0x6b0>)
 800383a:	400b      	ands	r3, r1
 800383c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800383e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003842:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003844:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 800384c:	2000      	movs	r0, #0
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
}
 8003852:	4770      	bx	lr
        return HAL_ERROR;
 8003854:	2001      	movs	r0, #1
 8003856:	e004      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8003858:	2001      	movs	r0, #1
 800385a:	e002      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8003860:	2000      	movs	r0, #0
}
 8003862:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003864:	2001      	movs	r0, #1
 8003866:	e7fc      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 8003868:	2001      	movs	r0, #1
 800386a:	e7fa      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 800386c:	2001      	movs	r0, #1
 800386e:	e7f8      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 8003870:	2001      	movs	r0, #1
 8003872:	e7f6      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 8003874:	2001      	movs	r0, #1
 8003876:	e7f4      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 8003878:	2001      	movs	r0, #1
 800387a:	e7f2      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 800387c:	2001      	movs	r0, #1
 800387e:	e7f0      	b.n	8003862 <HAL_RCC_OscConfig+0x68a>
 8003880:	58024400 	.word	0x58024400
 8003884:	fffffc0c 	.word	0xfffffc0c
 8003888:	ffff0007 	.word	0xffff0007

0800388c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800388c:	4b74      	ldr	r3, [pc, #464]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003894:	2b10      	cmp	r3, #16
 8003896:	f000 80de 	beq.w	8003a56 <HAL_RCC_GetSysClockFreq+0x1ca>
 800389a:	2b18      	cmp	r3, #24
 800389c:	d00f      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x32>
 800389e:	b10b      	cbz	r3, 80038a4 <HAL_RCC_GetSysClockFreq+0x18>
 80038a0:	4870      	ldr	r0, [pc, #448]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80038a2:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a4:	4b6e      	ldr	r3, [pc, #440]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f013 0f20 	tst.w	r3, #32
 80038ac:	f000 80d5 	beq.w	8003a5a <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b0:	4b6b      	ldr	r3, [pc, #428]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80038b8:	486b      	ldr	r0, [pc, #428]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80038ba:	40d8      	lsrs	r0, r3
 80038bc:	4770      	bx	lr
{
 80038be:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038c0:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80038c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c4:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80038ca:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d0:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 80038e6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80038ea:	f000 8094 	beq.w	8003a16 <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 80038ee:	2a01      	cmp	r2, #1
 80038f0:	d066      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x134>
 80038f2:	2a02      	cmp	r2, #2
 80038f4:	f000 8092 	beq.w	8003a1c <HAL_RCC_GetSysClockFreq+0x190>
 80038f8:	b1e2      	cbz	r2, 8003934 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038fa:	ee07 0a10 	vmov	s14, r0
 80038fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003902:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8003a6c <HAL_RCC_GetSysClockFreq+0x1e0>
 8003906:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800390a:	4b55      	ldr	r3, [pc, #340]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee06 3a90 	vmov	s13, r3
 8003916:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800391a:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x1e4>
 800391e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392e:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8003932:	e061      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003934:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f013 0f20 	tst.w	r3, #32
 800393c:	d023      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800393e:	4948      	ldr	r1, [pc, #288]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003940:	680a      	ldr	r2, [r1, #0]
 8003942:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003946:	4b48      	ldr	r3, [pc, #288]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003948:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800394a:	ee07 3a10 	vmov	s14, r3
 800394e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003952:	ee07 0a10 	vmov	s14, r0
 8003956:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800395a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800395e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003964:	ee06 3a90 	vmov	s13, r3
 8003968:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800396c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003970:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800397c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003984:	e038      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003986:	ee07 0a10 	vmov	s14, r0
 800398a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800398e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x1e8>
 8003992:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399e:	ee06 3a90 	vmov	s13, r3
 80039a2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80039a6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x1e4>
 80039aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039be:	e01b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c0:	ee07 0a10 	vmov	s14, r0
 80039c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80039c8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8003a6c <HAL_RCC_GetSysClockFreq+0x1e0>
 80039cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	ee06 3a90 	vmov	s13, r3
 80039dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80039e0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x1e4>
 80039e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f4:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003a00:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a0e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003a12:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a1a:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a1c:	ee07 0a10 	vmov	s14, r0
 8003a20:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a24:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	ee06 3a90 	vmov	s13, r3
 8003a38:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a3c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003a40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a50:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8003a54:	e7d0      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 8003a56:	4809      	ldr	r0, [pc, #36]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a58:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a5a:	4803      	ldr	r0, [pc, #12]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	58024400 	.word	0x58024400
 8003a64:	003d0900 	.word	0x003d0900
 8003a68:	03d09000 	.word	0x03d09000
 8003a6c:	4a742400 	.word	0x4a742400
 8003a70:	39000000 	.word	0x39000000
 8003a74:	4c742400 	.word	0x4c742400
 8003a78:	4bbebc20 	.word	0x4bbebc20
 8003a7c:	017d7840 	.word	0x017d7840

08003a80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f000 8132 	beq.w	8003cea <HAL_RCC_ClockConfig+0x26a>
{
 8003a86:	b570      	push	{r4, r5, r6, lr}
 8003a88:	460d      	mov	r5, r1
 8003a8a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b9b      	ldr	r3, [pc, #620]	; (8003cfc <HAL_RCC_ClockConfig+0x27c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d20b      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a98:	4a98      	ldr	r2, [pc, #608]	; (8003cfc <HAL_RCC_ClockConfig+0x27c>)
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa4:	6813      	ldr	r3, [r2, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	428b      	cmp	r3, r1
 8003aac:	f040 811f 	bne.w	8003cee <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f013 0f04 	tst.w	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ab8:	6922      	ldr	r2, [r4, #16]
 8003aba:	4b91      	ldr	r3, [pc, #580]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d905      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ac6:	498e      	ldr	r1, [pc, #568]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003ac8:	698b      	ldr	r3, [r1, #24]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f013 0f08 	tst.w	r3, #8
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ada:	6962      	ldr	r2, [r4, #20]
 8003adc:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d905      	bls.n	8003af4 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ae8:	4985      	ldr	r1, [pc, #532]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003aea:	69cb      	ldr	r3, [r1, #28]
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af0:	431a      	orrs	r2, r3
 8003af2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f013 0f10 	tst.w	r3, #16
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003afc:	69a2      	ldr	r2, [r4, #24]
 8003afe:	4b80      	ldr	r3, [pc, #512]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d905      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b0a:	497d      	ldr	r1, [pc, #500]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b0c:	69cb      	ldr	r3, [r1, #28]
 8003b0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b12:	431a      	orrs	r2, r3
 8003b14:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	f013 0f20 	tst.w	r3, #32
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b1e:	69e2      	ldr	r2, [r4, #28]
 8003b20:	4b77      	ldr	r3, [pc, #476]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d905      	bls.n	8003b38 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b2c:	4974      	ldr	r1, [pc, #464]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b2e:	6a0b      	ldr	r3, [r1, #32]
 8003b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b34:	431a      	orrs	r2, r3
 8003b36:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f013 0f02 	tst.w	r3, #2
 8003b3e:	d00c      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b40:	68e2      	ldr	r2, [r4, #12]
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d905      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4e:	496c      	ldr	r1, [pc, #432]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b50:	698b      	ldr	r3, [r1, #24]
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	431a      	orrs	r2, r3
 8003b58:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f013 0f01 	tst.w	r3, #1
 8003b60:	d041      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b62:	4a67      	ldr	r2, [pc, #412]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b64:	6993      	ldr	r3, [r2, #24]
 8003b66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b6a:	68a1      	ldr	r1, [r4, #8]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d027      	beq.n	8003bca <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b7e:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	f012 0f04 	tst.w	r2, #4
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e0ad      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b92:	f000 80ae 	beq.w	8003cf2 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b96:	495a      	ldr	r1, [pc, #360]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003b98:	690a      	ldr	r2, [r1, #16]
 8003b9a:	f022 0207 	bic.w	r2, r2, #7
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fe75 	bl	8001890 <HAL_GetTick>
 8003ba6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb0:	6862      	ldr	r2, [r4, #4]
 8003bb2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003bb6:	d016      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fe6a 	bl	8001890 <HAL_GetTick>
 8003bbc:	1b80      	subs	r0, r0, r6
 8003bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bc2:	4298      	cmp	r0, r3
 8003bc4:	d9f0      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	e08e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bca:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003bd2:	d1e0      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e087      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bd8:	4a49      	ldr	r2, [pc, #292]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003be0:	d1d9      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
 8003be4:	e080      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f013 0f02 	tst.w	r3, #2
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bee:	68e2      	ldr	r2, [r4, #12]
 8003bf0:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d205      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4940      	ldr	r1, [pc, #256]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003bfe:	698b      	ldr	r3, [r1, #24]
 8003c00:	f023 030f 	bic.w	r3, r3, #15
 8003c04:	431a      	orrs	r2, r3
 8003c06:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCC_ClockConfig+0x27c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	d90a      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c14:	4a39      	ldr	r2, [pc, #228]	; (8003cfc <HAL_RCC_ClockConfig+0x27c>)
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	f023 030f 	bic.w	r3, r3, #15
 8003c1c:	432b      	orrs	r3, r5
 8003c1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	42ab      	cmp	r3, r5
 8003c28:	d165      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f013 0f04 	tst.w	r3, #4
 8003c30:	d00c      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c32:	6922      	ldr	r2, [r4, #16]
 8003c34:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d205      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c40:	492f      	ldr	r1, [pc, #188]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c42:	698b      	ldr	r3, [r1, #24]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	f013 0f08 	tst.w	r3, #8
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c54:	6962      	ldr	r2, [r4, #20]
 8003c56:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d205      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c62:	4927      	ldr	r1, [pc, #156]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c64:	69cb      	ldr	r3, [r1, #28]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f013 0f10 	tst.w	r3, #16
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c76:	69a2      	ldr	r2, [r4, #24]
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d205      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c84:	491e      	ldr	r1, [pc, #120]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c86:	69cb      	ldr	r3, [r1, #28]
 8003c88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f013 0f20 	tst.w	r3, #32
 8003c96:	d00c      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c98:	69e2      	ldr	r2, [r4, #28]
 8003c9a:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d205      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ca6:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003ca8:	6a0b      	ldr	r3, [r1, #32]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb2:	f7ff fdeb 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003cb6:	4912      	ldr	r1, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x280>)
 8003cb8:	698b      	ldr	r3, [r1, #24]
 8003cba:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003cbe:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <HAL_RCC_ClockConfig+0x284>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc8:	698b      	ldr	r3, [r1, #24]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa20 f303 	lsr.w	r3, r0, r3
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x288>)
 8003cda:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x28c>)
 8003cde:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x290>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	f7fd fd72 	bl	80017cc <HAL_InitTick>
}
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003cea:	2001      	movs	r0, #1
}
 8003cec:	4770      	bx	lr
      return HAL_ERROR;
 8003cee:	2001      	movs	r0, #1
 8003cf0:	e7fa      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	e7f8      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	e7f6      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x268>
 8003cfa:	bf00      	nop
 8003cfc:	52002000 	.word	0x52002000
 8003d00:	58024400 	.word	0x58024400
 8003d04:	08007048 	.word	0x08007048
 8003d08:	24000004 	.word	0x24000004
 8003d0c:	24000000 	.word	0x24000000
 8003d10:	2400039c 	.word	0x2400039c

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d16:	f7ff fdb9 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x34>)
 8003d1c:	6993      	ldr	r3, [r2, #24]
 8003d1e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003d22:	490a      	ldr	r1, [pc, #40]	; (8003d4c <HAL_RCC_GetHCLKFreq+0x38>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d2e:	6992      	ldr	r2, [r2, #24]
 8003d30:	f002 020f 	and.w	r2, r2, #15
 8003d34:	5c88      	ldrb	r0, [r1, r2]
 8003d36:	f000 001f 	and.w	r0, r0, #31
 8003d3a:	fa23 f000 	lsr.w	r0, r3, r0
 8003d3e:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003d40:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x40>)
 8003d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003d46:	bd08      	pop	{r3, pc}
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	08007048 	.word	0x08007048
 8003d50:	24000004 	.word	0x24000004
 8003d54:	24000000 	.word	0x24000000

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d5a:	f7ff ffdb 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d6e:	40d8      	lsrs	r0, r3
 8003d70:	bd08      	pop	{r3, pc}
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
 8003d78:	08007048 	.word	0x08007048

08003d7c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d7c:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d079      	beq.n	8003e7c <RCCEx_PLL2_Config+0x100>
{
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d8e:	4a3c      	ldr	r2, [pc, #240]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003d90:	6813      	ldr	r3, [r2, #0]
 8003d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fd7a 	bl	8001890 <HAL_GetTick>
 8003d9c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003da6:	d006      	beq.n	8003db6 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003da8:	f7fd fd72 	bl	8001890 <HAL_GetTick>
 8003dac:	1b03      	subs	r3, r0, r4
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d9f5      	bls.n	8003d9e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003db2:	2003      	movs	r0, #3

  }


  return status;
}
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc6:	686a      	ldr	r2, [r5, #4]
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dce:	68a9      	ldr	r1, [r5, #8]
 8003dd0:	3901      	subs	r1, #1
 8003dd2:	0249      	lsls	r1, r1, #9
 8003dd4:	b289      	uxth	r1, r1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	68e9      	ldr	r1, [r5, #12]
 8003dda:	3901      	subs	r1, #1
 8003ddc:	0409      	lsls	r1, r1, #16
 8003dde:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003de2:	430a      	orrs	r2, r1
 8003de4:	6929      	ldr	r1, [r5, #16]
 8003de6:	3901      	subs	r1, #1
 8003de8:	0609      	lsls	r1, r1, #24
 8003dea:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003dee:	430a      	orrs	r2, r1
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003df8:	6969      	ldr	r1, [r5, #20]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	f022 0220 	bic.w	r2, r2, #32
 8003e04:	69a9      	ldr	r1, [r5, #24]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	f022 0210 	bic.w	r2, r2, #16
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <RCCEx_PLL2_Config+0x108>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	69e9      	ldr	r1, [r5, #28]
 8003e1a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	f042 0210 	orr.w	r2, r2, #16
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003e28:	b9c6      	cbnz	r6, 8003e5c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e32:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fd27 	bl	8001890 <HAL_GetTick>
 8003e42:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e4c:	d114      	bne.n	8003e78 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e4e:	f7fd fd1f 	bl	8001890 <HAL_GetTick>
 8003e52:	1b00      	subs	r0, r0, r4
 8003e54:	2802      	cmp	r0, #2
 8003e56:	d9f5      	bls.n	8003e44 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003e58:	2003      	movs	r0, #3
 8003e5a:	e7ab      	b.n	8003db4 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e5c:	2e01      	cmp	r6, #1
 8003e5e:	d005      	beq.n	8003e6c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e60:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003e62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e6a:	e7e3      	b.n	8003e34 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <RCCEx_PLL2_Config+0x104>)
 8003e6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e76:	e7dd      	b.n	8003e34 <RCCEx_PLL2_Config+0xb8>
  return status;
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e79b      	b.n	8003db4 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003e7c:	2001      	movs	r0, #1
}
 8003e7e:	4770      	bx	lr
 8003e80:	58024400 	.word	0x58024400
 8003e84:	ffff0007 	.word	0xffff0007

08003e88 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e88:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d079      	beq.n	8003f88 <RCCEx_PLL3_Config+0x100>
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4605      	mov	r5, r0
 8003e98:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fcf4 	bl	8001890 <HAL_GetTick>
 8003ea8:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003eb2:	d006      	beq.n	8003ec2 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003eb4:	f7fd fcec 	bl	8001890 <HAL_GetTick>
 8003eb8:	1b03      	subs	r3, r0, r4
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d9f5      	bls.n	8003eaa <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003ebe:	2003      	movs	r0, #3

  }


  return status;
}
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec6:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003eca:	6829      	ldr	r1, [r5, #0]
 8003ecc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed2:	686a      	ldr	r2, [r5, #4]
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eda:	68a9      	ldr	r1, [r5, #8]
 8003edc:	3901      	subs	r1, #1
 8003ede:	0249      	lsls	r1, r1, #9
 8003ee0:	b289      	uxth	r1, r1
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	68e9      	ldr	r1, [r5, #12]
 8003ee6:	3901      	subs	r1, #1
 8003ee8:	0409      	lsls	r1, r1, #16
 8003eea:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	6929      	ldr	r1, [r5, #16]
 8003ef2:	3901      	subs	r1, #1
 8003ef4:	0609      	lsls	r1, r1, #24
 8003ef6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003efa:	430a      	orrs	r2, r1
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f04:	6969      	ldr	r1, [r5, #20]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f10:	69a9      	ldr	r1, [r5, #24]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <RCCEx_PLL3_Config+0x108>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	69e9      	ldr	r1, [r5, #28]
 8003f26:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003f34:	b9c6      	cbnz	r6, 8003f68 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f36:	461a      	mov	r2, r3
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f4a:	f7fd fca1 	bl	8001890 <HAL_GetTick>
 8003f4e:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f58:	d114      	bne.n	8003f84 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f5a:	f7fd fc99 	bl	8001890 <HAL_GetTick>
 8003f5e:	1b00      	subs	r0, r0, r4
 8003f60:	2802      	cmp	r0, #2
 8003f62:	d9f5      	bls.n	8003f50 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8003f64:	2003      	movs	r0, #3
 8003f66:	e7ab      	b.n	8003ec0 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f68:	2e01      	cmp	r6, #1
 8003f6a:	d005      	beq.n	8003f78 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f6c:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003f6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f76:	e7e3      	b.n	8003f40 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <RCCEx_PLL3_Config+0x104>)
 8003f7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f82:	e7dd      	b.n	8003f40 <RCCEx_PLL3_Config+0xb8>
  return status;
 8003f84:	2000      	movs	r0, #0
 8003f86:	e79b      	b.n	8003ec0 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003f88:	2001      	movs	r0, #1
}
 8003f8a:	4770      	bx	lr
 8003f8c:	58024400 	.word	0x58024400
 8003f90:	ffff0007 	.word	0xffff0007

08003f94 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f98:	6803      	ldr	r3, [r0, #0]
 8003f9a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f9e:	d030      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fa0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa6:	d026      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fa8:	d80e      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003faa:	b1eb      	cbz	r3, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	3008      	adds	r0, #8
 8003fb6:	f7ff fee1 	bl	8003d7c <RCCEx_PLL2_Config>
 8003fba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003fbc:	b145      	cbz	r5, 8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003fbe:	462e      	mov	r6, r5
 8003fc0:	e021      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fc2:	2601      	movs	r6, #1
 8003fc4:	4635      	mov	r5, r6
 8003fc6:	e01e      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003fc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003fce:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fd0:	4a97      	ldr	r2, [pc, #604]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003fd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003fd8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fde:	2600      	movs	r6, #0
 8003fe0:	e011      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fe2:	2601      	movs	r6, #1
 8003fe4:	4635      	mov	r5, r6
 8003fe6:	e00e      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4a91      	ldr	r2, [pc, #580]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	e7ec      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	3028      	adds	r0, #40	; 0x28
 8003ffa:	f7ff ff45 	bl	8003e88 <RCCEx_PLL3_Config>
 8003ffe:	4605      	mov	r5, r0
        break;
 8004000:	e7dc      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004002:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004004:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	f413 7f80 	tst.w	r3, #256	; 0x100
 800400c:	d027      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 800400e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004010:	2b04      	cmp	r3, #4
 8004012:	d820      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004014:	e8df f003 	tbb	[pc, r3]
 8004018:	08181103 	.word	0x08181103
 800401c:	08          	.byte	0x08
 800401d:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401e:	4a84      	ldr	r2, [pc, #528]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004020:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004028:	b9c5      	cbnz	r5, 800405c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402a:	4a81      	ldr	r2, [pc, #516]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800402c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004034:	430b      	orrs	r3, r1
 8004036:	6513      	str	r3, [r2, #80]	; 0x50
 8004038:	e011      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403a:	2100      	movs	r1, #0
 800403c:	f104 0008 	add.w	r0, r4, #8
 8004040:	f7ff fe9c 	bl	8003d7c <RCCEx_PLL2_Config>
 8004044:	4605      	mov	r5, r0
        break;
 8004046:	e7ef      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004048:	2100      	movs	r1, #0
 800404a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800404e:	f7ff ff1b 	bl	8003e88 <RCCEx_PLL3_Config>
 8004052:	4605      	mov	r5, r0
        break;
 8004054:	e7e8      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004056:	2601      	movs	r6, #1
 8004058:	4635      	mov	r5, r6
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800405c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004064:	d01d      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004066:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d039      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800406c:	d80c      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800406e:	b38b      	cbz	r3, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d106      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004074:	2100      	movs	r1, #0
 8004076:	f104 0008 	add.w	r0, r4, #8
 800407a:	f7ff fe7f 	bl	8003d7c <RCCEx_PLL2_Config>
 800407e:	4605      	mov	r5, r0
        break;
 8004080:	e007      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004082:	2601      	movs	r6, #1
 8004084:	4635      	mov	r5, r6
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004088:	2bc0      	cmp	r3, #192	; 0xc0
 800408a:	d002      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d11d      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8004092:	bb65      	cbnz	r5, 80040ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004094:	4a66      	ldr	r2, [pc, #408]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004096:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004098:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800409c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800409e:	430b      	orrs	r3, r1
 80040a0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040a8:	d035      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4AClockSelection)
 80040aa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b2:	d04e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80040b4:	d820      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d045      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80040ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040be:	d118      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c0:	2100      	movs	r1, #0
 80040c2:	f104 0008 	add.w	r0, r4, #8
 80040c6:	f7ff fe59 	bl	8003d7c <RCCEx_PLL2_Config>
 80040ca:	4605      	mov	r5, r0
        break;
 80040cc:	e01a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 80040ce:	2601      	movs	r6, #1
 80040d0:	4635      	mov	r5, r6
 80040d2:	e7e6      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d4:	4a56      	ldr	r2, [pc, #344]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80040de:	e7d8      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040e0:	2100      	movs	r1, #0
 80040e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80040e6:	f7ff fecf 	bl	8003e88 <RCCEx_PLL3_Config>
 80040ea:	4605      	mov	r5, r0
        break;
 80040ec:	e7d1      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040ee:	462e      	mov	r6, r5
 80040f0:	e7d7      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai4AClockSelection)
 80040f2:	2601      	movs	r6, #1
 80040f4:	4635      	mov	r5, r6
 80040f6:	e00e      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80040f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fc:	d002      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80040fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004102:	d11d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    if (ret == HAL_OK)
 8004104:	bb65      	cbnz	r5, 8004160 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004106:	4a4a      	ldr	r2, [pc, #296]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004108:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800410a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800410e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004112:	430b      	orrs	r3, r1
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800411c:	d046      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 800411e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004126:	d039      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004128:	d81f      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800412a:	b38b      	cbz	r3, 8004190 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800412c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004130:	d118      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004132:	2100      	movs	r1, #0
 8004134:	f104 0008 	add.w	r0, r4, #8
 8004138:	f7ff fe20 	bl	8003d7c <RCCEx_PLL2_Config>
 800413c:	4605      	mov	r5, r0
        break;
 800413e:	e01a      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004140:	2601      	movs	r6, #1
 8004142:	4635      	mov	r5, r6
 8004144:	e7e7      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4a3a      	ldr	r2, [pc, #232]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004150:	e7d8      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004152:	2100      	movs	r1, #0
 8004154:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004158:	f7ff fe96 	bl	8003e88 <RCCEx_PLL3_Config>
 800415c:	4605      	mov	r5, r0
        break;
 800415e:	e7d1      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004160:	462e      	mov	r6, r5
 8004162:	e7d8      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004164:	2601      	movs	r6, #1
 8004166:	4635      	mov	r5, r6
 8004168:	e020      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800416a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800416e:	d002      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004174:	d109      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    if (ret == HAL_OK)
 8004176:	b9c5      	cbnz	r5, 80041aa <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004178:	4a2d      	ldr	r2, [pc, #180]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800417a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800417c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004180:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8004184:	430b      	orrs	r3, r1
 8004186:	6593      	str	r3, [r2, #88]	; 0x58
 8004188:	e010      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 800418a:	2601      	movs	r6, #1
 800418c:	4635      	mov	r5, r6
 800418e:	e00d      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x218>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004192:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800419a:	e7ec      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800419c:	2100      	movs	r1, #0
 800419e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80041a2:	f7ff fe71 	bl	8003e88 <RCCEx_PLL3_Config>
 80041a6:	4605      	mov	r5, r0
        break;
 80041a8:	e7e5      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041aa:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041b2:	d01b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 80041b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d02d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x282>
 80041ba:	d813      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
 80041bc:	b133      	cbz	r3, 80041cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d10d      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x24a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80041cc:	bb55      	cbnz	r5, 8004224 <HAL_RCCEx_PeriphCLKConfig+0x290>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80041d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80041d8:	430b      	orrs	r3, r1
 80041da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 80041de:	2601      	movs	r6, #1
 80041e0:	4635      	mov	r5, r6
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x258>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d0f1      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80041e8:	2601      	movs	r6, #1
 80041ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80041f2:	d02e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi123ClockSelection)
 80041f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fa:	d050      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80041fc:	d81a      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d047      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004206:	d10f      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004208:	2100      	movs	r1, #0
 800420a:	f104 0008 	add.w	r0, r4, #8
 800420e:	f7ff fdb5 	bl	8003d7c <RCCEx_PLL2_Config>
 8004212:	4605      	mov	r5, r0
        break;
 8004214:	e014      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004216:	2102      	movs	r1, #2
 8004218:	f104 0008 	add.w	r0, r4, #8
 800421c:	f7ff fdae 	bl	8003d7c <RCCEx_PLL2_Config>
 8004220:	4605      	mov	r5, r0
        break;
 8004222:	e7d3      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004224:	462e      	mov	r6, r5
 8004226:	e7e1      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004228:	2601      	movs	r6, #1
 800422a:	4635      	mov	r5, r6
 800422c:	e011      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
 8004234:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004238:	d002      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800423a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423e:	d125      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    if (ret == HAL_OK)
 8004240:	2d00      	cmp	r5, #0
 8004242:	d133      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004244:	4a86      	ldr	r2, [pc, #536]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004246:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800424e:	430b      	orrs	r3, r1
 8004250:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004258:	d038      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi45ClockSelection)
 800425a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800425c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004260:	d053      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004262:	d828      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004264:	b143      	cbz	r3, 8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d121      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800426c:	2101      	movs	r1, #1
 800426e:	f104 0008 	add.w	r0, r4, #8
 8004272:	f7ff fd83 	bl	8003d7c <RCCEx_PLL2_Config>
 8004276:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004278:	2d00      	cmp	r5, #0
 800427a:	d14d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800427c:	4a78      	ldr	r2, [pc, #480]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800427e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004280:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004284:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004286:	430b      	orrs	r3, r1
 8004288:	6513      	str	r3, [r2, #80]	; 0x50
 800428a:	e01f      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi123ClockSelection)
 800428c:	2601      	movs	r6, #1
 800428e:	4635      	mov	r5, r6
 8004290:	e7df      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004292:	4a73      	ldr	r2, [pc, #460]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004294:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800429c:	e7d0      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800429e:	2100      	movs	r1, #0
 80042a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042a4:	f7ff fdf0 	bl	8003e88 <RCCEx_PLL3_Config>
 80042a8:	4605      	mov	r5, r0
        break;
 80042aa:	e7c9      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80042ac:	462e      	mov	r6, r5
 80042ae:	e7d0      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi45ClockSelection)
 80042b0:	2601      	movs	r6, #1
 80042b2:	4635      	mov	r5, r6
 80042b4:	e00a      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
 80042b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ba:	d0dd      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c0:	d0da      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80042c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042c6:	d0d7      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80042c8:	2601      	movs	r6, #1
 80042ca:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80042d2:	d031      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80042d4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d044      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80042de:	d820      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80042e0:	b143      	cbz	r3, 80042f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80042e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e6:	d119      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e8:	2101      	movs	r1, #1
 80042ea:	f104 0008 	add.w	r0, r4, #8
 80042ee:	f7ff fd45 	bl	8003d7c <RCCEx_PLL2_Config>
 80042f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80042f4:	2d00      	cmp	r5, #0
 80042f6:	d13e      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042f8:	4a59      	ldr	r2, [pc, #356]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80042fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80042fc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004300:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8004304:	430b      	orrs	r3, r1
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	e016      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800430a:	2101      	movs	r1, #1
 800430c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004310:	f7ff fdba 	bl	8003e88 <RCCEx_PLL3_Config>
 8004314:	4605      	mov	r5, r0
        break;
 8004316:	e7af      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004318:	462e      	mov	r6, r5
 800431a:	e7d7      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi6ClockSelection)
 800431c:	2601      	movs	r6, #1
 800431e:	4635      	mov	r5, r6
 8004320:	e00a      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d0e5      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432c:	d0e2      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800432e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004332:	d0df      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004334:	2601      	movs	r6, #1
 8004336:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800433e:	d01e      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    switch (PeriphClkInit->DsiClockSelection)
 8004340:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004342:	b143      	cbz	r3, 8004356 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d117      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800434a:	2101      	movs	r1, #1
 800434c:	f104 0008 	add.w	r0, r4, #8
 8004350:	f7ff fd14 	bl	8003d7c <RCCEx_PLL2_Config>
 8004354:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004356:	bb5d      	cbnz	r5, 80043b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004358:	4a41      	ldr	r2, [pc, #260]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800435a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004362:	430b      	orrs	r3, r1
 8004364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004366:	e00a      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004368:	2101      	movs	r1, #1
 800436a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800436e:	f7ff fd8b 	bl	8003e88 <RCCEx_PLL3_Config>
 8004372:	4605      	mov	r5, r0
        break;
 8004374:	e7be      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004376:	462e      	mov	r6, r5
 8004378:	e7de      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->DsiClockSelection)
 800437a:	2601      	movs	r6, #1
 800437c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x406>
    switch (PeriphClkInit->FdcanClockSelection)
 8004386:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438c:	d012      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800438e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004392:	d01d      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004394:	b19b      	cbz	r3, 80043be <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004396:	2601      	movs	r6, #1
 8004398:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80043a0:	d02c      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch (PeriphClkInit->FmcClockSelection)
 80043a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d855      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80043a8:	e8df f003 	tbb	[pc, r3]
 80043ac:	204d1b20 	.word	0x204d1b20
 80043b0:	462e      	mov	r6, r5
 80043b2:	e7e4      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80043be:	b975      	cbnz	r5, 80043de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043c0:	4a27      	ldr	r2, [pc, #156]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80043c4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80043c8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6513      	str	r3, [r2, #80]	; 0x50
 80043ce:	e7e4      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x406>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d0:	2101      	movs	r1, #1
 80043d2:	f104 0008 	add.w	r0, r4, #8
 80043d6:	f7ff fcd1 	bl	8003d7c <RCCEx_PLL2_Config>
 80043da:	4605      	mov	r5, r0
        break;
 80043dc:	e7ef      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80043de:	462e      	mov	r6, r5
 80043e0:	e7db      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x406>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e2:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80043ec:	bbad      	cbnz	r5, 800445a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80043f8:	430b      	orrs	r3, r1
 80043fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004402:	d12f      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	f013 0f01 	tst.w	r3, #1
 800440a:	f000 80a8 	beq.w	800455e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    switch (PeriphClkInit->Usart16ClockSelection)
 800440e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004412:	2b28      	cmp	r3, #40	; 0x28
 8004414:	f200 80a1 	bhi.w	800455a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 8004418:	e8df f003 	tbb	[pc, r3]
 800441c:	9f9f9f8e 	.word	0x9f9f9f8e
 8004420:	9f9f9f9f 	.word	0x9f9f9f9f
 8004424:	9f9f9f88 	.word	0x9f9f9f88
 8004428:	9f9f9f9f 	.word	0x9f9f9f9f
 800442c:	9f9f9f98 	.word	0x9f9f9f98
 8004430:	9f9f9f9f 	.word	0x9f9f9f9f
 8004434:	9f9f9f8e 	.word	0x9f9f9f8e
 8004438:	9f9f9f9f 	.word	0x9f9f9f9f
 800443c:	9f9f9f8e 	.word	0x9f9f9f8e
 8004440:	9f9f9f9f 	.word	0x9f9f9f9f
 8004444:	8e          	.byte	0x8e
 8004445:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004446:	2102      	movs	r1, #2
 8004448:	f104 0008 	add.w	r0, r4, #8
 800444c:	f7ff fc96 	bl	8003d7c <RCCEx_PLL2_Config>
 8004450:	4605      	mov	r5, r0
        break;
 8004452:	e7cb      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    switch (PeriphClkInit->FmcClockSelection)
 8004454:	2601      	movs	r6, #1
 8004456:	4635      	mov	r5, r6
 8004458:	e7d0      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x468>
 800445a:	462e      	mov	r6, r5
 800445c:	e7ce      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x468>
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004464:	4a92      	ldr	r2, [pc, #584]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800446e:	f7fd fa0f 	bl	8001890 <HAL_GetTick>
 8004472:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004474:	4b8e      	ldr	r3, [pc, #568]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f413 7f80 	tst.w	r3, #256	; 0x100
 800447c:	d105      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fd fa07 	bl	8001890 <HAL_GetTick>
 8004482:	1bc0      	subs	r0, r0, r7
 8004484:	2864      	cmp	r0, #100	; 0x64
 8004486:	d9f5      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        ret = HAL_TIMEOUT;
 8004488:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 800448a:	2d00      	cmp	r5, #0
 800448c:	d14a      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x590>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8004496:	4053      	eors	r3, r2
 8004498:	f413 7f40 	tst.w	r3, #768	; 0x300
 800449c:	d00c      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800449e:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80044a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80044a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80044a8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80044ac:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80044b0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80044b4:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80044b6:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044b8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d015      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
      if (ret == HAL_OK)
 80044c2:	bb8d      	cbnz	r5, 8004528 <HAL_RCCEx_PeriphCLKConfig+0x594>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80044c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80044d0:	d01e      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80044d2:	4a78      	ldr	r2, [pc, #480]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80044d4:	6913      	ldr	r3, [r2, #16]
 80044d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044da:	6113      	str	r3, [r2, #16]
 80044dc:	4975      	ldr	r1, [pc, #468]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80044de:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80044e0:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 80044e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80044e8:	4313      	orrs	r3, r2
 80044ea:	670b      	str	r3, [r1, #112]	; 0x70
 80044ec:	e78a      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tickstart = HAL_GetTick();
 80044ee:	f7fd f9cf 	bl	8001890 <HAL_GetTick>
 80044f2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f4:	4b6f      	ldr	r3, [pc, #444]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	f013 0f02 	tst.w	r3, #2
 80044fc:	d1e1      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fd f9c7 	bl	8001890 <HAL_GetTick>
 8004502:	1bc0      	subs	r0, r0, r7
 8004504:	f241 3388 	movw	r3, #5000	; 0x1388
 8004508:	4298      	cmp	r0, r3
 800450a:	d9f3      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x560>
            ret = HAL_TIMEOUT;
 800450c:	2503      	movs	r5, #3
 800450e:	e7d8      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004510:	4868      	ldr	r0, [pc, #416]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004512:	6902      	ldr	r2, [r0, #16]
 8004514:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004518:	4967      	ldr	r1, [pc, #412]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 800451a:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800451e:	4313      	orrs	r3, r2
 8004520:	6103      	str	r3, [r0, #16]
 8004522:	e7db      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 8004524:	462e      	mov	r6, r5
 8004526:	e76d      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x470>
        status = ret;
 8004528:	462e      	mov	r6, r5
 800452a:	e76b      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800452c:	2101      	movs	r1, #1
 800452e:	f104 0008 	add.w	r0, r4, #8
 8004532:	f7ff fc23 	bl	8003d7c <RCCEx_PLL2_Config>
 8004536:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004538:	b9ed      	cbnz	r5, 8004576 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800453a:	4a5e      	ldr	r2, [pc, #376]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800453c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800453e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004542:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004546:	430b      	orrs	r3, r1
 8004548:	6553      	str	r3, [r2, #84]	; 0x54
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800454c:	2101      	movs	r1, #1
 800454e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004552:	f7ff fc99 	bl	8003e88 <RCCEx_PLL3_Config>
 8004556:	4605      	mov	r5, r0
        break;
 8004558:	e7ee      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Usart16ClockSelection)
 800455a:	2601      	movs	r6, #1
 800455c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f013 0f02 	tst.w	r3, #2
 8004564:	d017      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x602>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004566:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004568:	2b05      	cmp	r3, #5
 800456a:	d828      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800456c:	e8df f003 	tbb	[pc, r3]
 8004570:	0b20050b 	.word	0x0b20050b
 8004574:	0b0b      	.short	0x0b0b
 8004576:	462e      	mov	r6, r5
 8004578:	e7f1      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800457a:	2101      	movs	r1, #1
 800457c:	f104 0008 	add.w	r0, r4, #8
 8004580:	f7ff fbfc 	bl	8003d7c <RCCEx_PLL2_Config>
 8004584:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004586:	b9ed      	cbnz	r5, 80045c4 <HAL_RCCEx_PeriphCLKConfig+0x630>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004588:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800458a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004592:	430b      	orrs	r3, r1
 8004594:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f013 0f04 	tst.w	r3, #4
 800459c:	d023      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800459e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d845      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80045a6:	e8df f003 	tbb	[pc, r3]
 80045aa:	0f15      	.short	0x0f15
 80045ac:	1515153d 	.word	0x1515153d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045b0:	2101      	movs	r1, #1
 80045b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045b6:	f7ff fc67 	bl	8003e88 <RCCEx_PLL3_Config>
 80045ba:	4605      	mov	r5, r0
        break;
 80045bc:	e7e3      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045be:	2601      	movs	r6, #1
 80045c0:	4635      	mov	r5, r6
 80045c2:	e7e8      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80045c4:	462e      	mov	r6, r5
 80045c6:	e7e6      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x602>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c8:	2101      	movs	r1, #1
 80045ca:	f104 0008 	add.w	r0, r4, #8
 80045ce:	f7ff fbd5 	bl	8003d7c <RCCEx_PLL2_Config>
 80045d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80045d4:	bb85      	cbnz	r5, 8004638 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d6:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80045d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80045e2:	430b      	orrs	r3, r1
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	f013 0f20 	tst.w	r3, #32
 80045ec:	d034      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80045f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f6:	d04e      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80045f8:	d823      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80045fa:	b143      	cbz	r3, 800460e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80045fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004600:	d11c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004602:	2100      	movs	r1, #0
 8004604:	f104 0008 	add.w	r0, r4, #8
 8004608:	f7ff fbb8 	bl	8003d7c <RCCEx_PLL2_Config>
 800460c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800460e:	2d00      	cmp	r5, #0
 8004610:	d148      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x710>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004612:	4a28      	ldr	r2, [pc, #160]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004614:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004616:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800461a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800461e:	430b      	orrs	r3, r1
 8004620:	6553      	str	r3, [r2, #84]	; 0x54
 8004622:	e019      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004624:	2101      	movs	r1, #1
 8004626:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800462a:	f7ff fc2d 	bl	8003e88 <RCCEx_PLL3_Config>
 800462e:	4605      	mov	r5, r0
        break;
 8004630:	e7d0      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004632:	2601      	movs	r6, #1
 8004634:	4635      	mov	r5, r6
 8004636:	e7d6      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004638:	462e      	mov	r6, r5
 800463a:	e7d4      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800463c:	2601      	movs	r6, #1
 800463e:	4635      	mov	r5, r6
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d0e2      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800464c:	d0df      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800464e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004652:	d0dc      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004654:	2601      	movs	r6, #1
 8004656:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800465e:	d038      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004660:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004668:	d054      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x780>
 800466a:	d827      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800466c:	b143      	cbz	r3, 8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d119      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x714>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004674:	2100      	movs	r1, #0
 8004676:	f104 0008 	add.w	r0, r4, #8
 800467a:	f7ff fb7f 	bl	8003d7c <RCCEx_PLL2_Config>
 800467e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004680:	2d00      	cmp	r5, #0
 8004682:	d14e      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004684:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004686:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004688:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800468c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004690:	430b      	orrs	r3, r1
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	e01d      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004696:	2102      	movs	r1, #2
 8004698:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800469c:	f7ff fbf4 	bl	8003e88 <RCCEx_PLL3_Config>
 80046a0:	4605      	mov	r5, r0
        break;
 80046a2:	e7b4      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80046a4:	462e      	mov	r6, r5
 80046a6:	e7d7      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046a8:	2601      	movs	r6, #1
 80046aa:	4635      	mov	r5, r6
 80046ac:	e011      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80046ae:	bf00      	nop
 80046b0:	58024800 	.word	0x58024800
 80046b4:	58024400 	.word	0x58024400
 80046b8:	00ffffcf 	.word	0x00ffffcf
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d0de      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80046c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046c6:	d0db      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80046c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046cc:	d0d8      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80046ce:	2601      	movs	r6, #1
 80046d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046d8:	d033      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80046de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e2:	f000 80a3 	beq.w	800482c <HAL_RCCEx_PeriphCLKConfig+0x898>
 80046e6:	d821      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x798>
 80046e8:	b143      	cbz	r3, 80046fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d11a      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x792>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f0:	2100      	movs	r1, #0
 80046f2:	f104 0008 	add.w	r0, r4, #8
 80046f6:	f7ff fb41 	bl	8003d7c <RCCEx_PLL2_Config>
 80046fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80046fc:	2d00      	cmp	r5, #0
 80046fe:	f040 809c 	bne.w	800483a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004702:	4a81      	ldr	r2, [pc, #516]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004704:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004706:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800470a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800470e:	430b      	orrs	r3, r1
 8004710:	6593      	str	r3, [r2, #88]	; 0x58
 8004712:	e016      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004714:	2102      	movs	r1, #2
 8004716:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800471a:	f7ff fbb5 	bl	8003e88 <RCCEx_PLL3_Config>
 800471e:	4605      	mov	r5, r0
        break;
 8004720:	e7ae      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004722:	462e      	mov	r6, r5
 8004724:	e7d5      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004726:	2601      	movs	r6, #1
 8004728:	4635      	mov	r5, r6
 800472a:	e00a      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d0e4      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004732:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004736:	d0e1      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004738:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800473c:	d0de      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 800473e:	2601      	movs	r6, #1
 8004740:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f013 0f08 	tst.w	r3, #8
 8004748:	d00c      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800474a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004752:	d074      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004754:	4a6c      	ldr	r2, [pc, #432]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004756:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004758:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800475c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004760:	430b      	orrs	r3, r1
 8004762:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f013 0f10 	tst.w	r3, #16
 800476a:	d00c      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800476c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004774:	d06c      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004776:	4a64      	ldr	r2, [pc, #400]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004778:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004782:	430b      	orrs	r3, r1
 8004784:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800478c:	d00b      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->AdcClockSelection)
 800478e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d074      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800479c:	d067      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d05f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80047a2:	2601      	movs	r6, #1
 80047a4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch (PeriphClkInit->UsbClockSelection)
 80047ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80047b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b6:	d07c      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x91e>
 80047b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047bc:	d06f      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d067      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x900>
 80047c4:	2601      	movs	r6, #1
 80047c6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80047ce:	d008      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch (PeriphClkInit->SdmmcClockSelection)
 80047d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d076      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x930>
 80047d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047da:	f000 8081 	beq.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80047de:	2601      	movs	r6, #1
 80047e0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80047e8:	f040 8083 	bne.w	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x95e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047f2:	f000 808e 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x97e>
    switch (PeriphClkInit->RngClockSelection)
 80047f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fe:	f000 80ec 	beq.w	80049da <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8004802:	f240 8083 	bls.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x978>
 8004806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480a:	d003      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x880>
 800480c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004810:	f040 80e1 	bne.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xa42>
    if (ret == HAL_OK)
 8004814:	2d00      	cmp	r5, #0
 8004816:	f040 80e6 	bne.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800481c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004826:	430b      	orrs	r3, r1
 8004828:	6553      	str	r3, [r2, #84]	; 0x54
 800482a:	e072      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x97e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800482c:	2102      	movs	r1, #2
 800482e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004832:	f7ff fb29 	bl	8003e88 <RCCEx_PLL3_Config>
 8004836:	4605      	mov	r5, r0
        break;
 8004838:	e760      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 800483a:	462e      	mov	r6, r5
 800483c:	e781      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800483e:	2102      	movs	r1, #2
 8004840:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004844:	f7ff fb20 	bl	8003e88 <RCCEx_PLL3_Config>
 8004848:	2800      	cmp	r0, #0
 800484a:	d083      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
        status = HAL_ERROR;
 800484c:	2601      	movs	r6, #1
 800484e:	e781      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004850:	2102      	movs	r1, #2
 8004852:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004856:	f7ff fb17 	bl	8003e88 <RCCEx_PLL3_Config>
 800485a:	2800      	cmp	r0, #0
 800485c:	d08b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        status = HAL_ERROR;
 800485e:	2601      	movs	r6, #1
 8004860:	e789      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004862:	2100      	movs	r1, #0
 8004864:	f104 0008 	add.w	r0, r4, #8
 8004868:	f7ff fa88 	bl	8003d7c <RCCEx_PLL2_Config>
 800486c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800486e:	b97d      	cbnz	r5, 8004890 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004872:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004874:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004878:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800487c:	430b      	orrs	r3, r1
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
 8004880:	e791      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004882:	2102      	movs	r1, #2
 8004884:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004888:	f7ff fafe 	bl	8003e88 <RCCEx_PLL3_Config>
 800488c:	4605      	mov	r5, r0
        break;
 800488e:	e7ee      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8004890:	462e      	mov	r6, r5
 8004892:	e788      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x812>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004896:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800489e:	b97d      	cbnz	r5, 80048c0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80048a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80048a8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6553      	str	r3, [r2, #84]	; 0x54
 80048b0:	e78a      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048b2:	2101      	movs	r1, #1
 80048b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048b8:	f7ff fae6 	bl	8003e88 <RCCEx_PLL3_Config>
 80048bc:	4605      	mov	r5, r0
        break;
 80048be:	e7ee      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80048c0:	462e      	mov	r6, r5
 80048c2:	e781      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4a10      	ldr	r2, [pc, #64]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80048ce:	b975      	cbnz	r5, 80048ee <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80048da:	430b      	orrs	r3, r1
 80048dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048de:	e780      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048e0:	2102      	movs	r1, #2
 80048e2:	f104 0008 	add.w	r0, r4, #8
 80048e6:	f7ff fa49 	bl	8003d7c <RCCEx_PLL2_Config>
 80048ea:	4605      	mov	r5, r0
        break;
 80048ec:	e7ef      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x93a>
 80048ee:	462e      	mov	r6, r5
 80048f0:	e777      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048f2:	2102      	movs	r1, #2
 80048f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048f8:	f7ff fac6 	bl	8003e88 <RCCEx_PLL3_Config>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f43f af75 	beq.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x858>
      status = HAL_ERROR;
 8004902:	2601      	movs	r6, #1
 8004904:	e772      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x858>
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 800490c:	2b00      	cmp	r3, #0
 800490e:	d081      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004910:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004918:	d006      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800491a:	4a4f      	ldr	r2, [pc, #316]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 800491c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800491e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004922:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004924:	430b      	orrs	r3, r1
 8004926:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800492e:	d007      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004930:	4a49      	ldr	r2, [pc, #292]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004932:	6913      	ldr	r3, [r2, #16]
 8004934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004938:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800493c:	430b      	orrs	r3, r1
 800493e:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004946:	d006      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004948:	4a43      	ldr	r2, [pc, #268]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 800494a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800494c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004950:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004952:	430b      	orrs	r3, r1
 8004954:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800495c:	d009      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800495e:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	611a      	str	r2, [r3, #16]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 800496e:	430a      	orrs	r2, r1
 8004970:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da06      	bge.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004978:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 800497a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800497c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004980:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004982:	430b      	orrs	r3, r1
 8004984:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800498c:	d007      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800498e:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004990:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004992:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004996:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800499a:	430b      	orrs	r3, r1
 800499c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	f013 0f01 	tst.w	r3, #1
 80049a4:	d121      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	f013 0f02 	tst.w	r3, #2
 80049ac:	d126      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xa68>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	f013 0f04 	tst.w	r3, #4
 80049b4:	d12b      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	f013 0f08 	tst.w	r3, #8
 80049bc:	d130      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049be:	6863      	ldr	r3, [r4, #4]
 80049c0:	f013 0f10 	tst.w	r3, #16
 80049c4:	d135      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	f013 0f20 	tst.w	r3, #32
 80049cc:	d13a      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xab0>
  if (status == HAL_OK)
 80049ce:	b106      	cbz	r6, 80049d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  return HAL_ERROR;
 80049d0:	2601      	movs	r6, #1
}
 80049d2:	4630      	mov	r0, r6
 80049d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 80049d6:	2601      	movs	r6, #1
 80049d8:	e79b      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x97e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049da:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 80049dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80049e4:	e716      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80049e6:	462e      	mov	r6, r5
 80049e8:	e793      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x97e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ea:	2100      	movs	r1, #0
 80049ec:	f104 0008 	add.w	r0, r4, #8
 80049f0:	f7ff f9c4 	bl	8003d7c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d0d6      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
      status = ret;
 80049f8:	4606      	mov	r6, r0
 80049fa:	e7d4      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049fc:	2101      	movs	r1, #1
 80049fe:	f104 0008 	add.w	r0, r4, #8
 8004a02:	f7ff f9bb 	bl	8003d7c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d0d1      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      status = ret;
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	e7cf      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xa1a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a0e:	2102      	movs	r1, #2
 8004a10:	f104 0008 	add.w	r0, r4, #8
 8004a14:	f7ff f9b2 	bl	8003d7c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d0cc      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
      status = ret;
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	e7ca      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a20:	2100      	movs	r1, #0
 8004a22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004a26:	f7ff fa2f 	bl	8003e88 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0c7      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
      status = ret;
 8004a2e:	4606      	mov	r6, r0
 8004a30:	e7c5      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a32:	2101      	movs	r1, #1
 8004a34:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004a38:	f7ff fa26 	bl	8003e88 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d0c2      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
      status = ret;
 8004a40:	4606      	mov	r6, r0
 8004a42:	e7c0      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a44:	2102      	movs	r1, #2
 8004a46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004a4a:	f7ff fa1d 	bl	8003e88 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0bd      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
      status = ret;
 8004a52:	4606      	mov	r6, r0
 8004a54:	e7bb      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400

08004a5c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004a5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a5e:	f7ff f959 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004a6c:	5cd3      	ldrb	r3, [r2, r3]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
}
 8004a72:	40d8      	lsrs	r0, r3
 8004a74:	bd08      	pop	{r3, pc}
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	08007048 	.word	0x08007048

08004a80 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004a80:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a82:	4b78      	ldr	r3, [pc, #480]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a86:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004a88:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a8e:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8004a9c:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8004aa0:	f000 80db 	beq.w	8004c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 8004aa4:	f002 0203 	and.w	r2, r2, #3
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004ab0:	2a01      	cmp	r2, #1
 8004ab2:	d066      	beq.n	8004b82 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004ab4:	2a02      	cmp	r2, #2
 8004ab6:	f000 80b3 	beq.w	8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aba:	b1e2      	cbz	r2, 8004af6 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004abc:	ee07 ca10 	vmov	s14, ip
 8004ac0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004ac4:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004ac8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004acc:	4b65      	ldr	r3, [pc, #404]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	ee06 3a90 	vmov	s13, r3
 8004ad8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004adc:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004ae0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004af4:	e061      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af6:	4b5b      	ldr	r3, [pc, #364]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f013 0f20 	tst.w	r3, #32
 8004afe:	d023      	beq.n	8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b00:	4958      	ldr	r1, [pc, #352]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004b02:	680a      	ldr	r2, [r1, #0]
 8004b04:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004b0a:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b0c:	ee07 3a10 	vmov	s14, r3
 8004b10:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b14:	ee07 ca10 	vmov	s14, ip
 8004b18:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004b1c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004b20:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee06 3a90 	vmov	s13, r3
 8004b2a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b2e:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004b32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b46:	e038      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b48:	ee07 ca10 	vmov	s14, ip
 8004b4c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b50:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004b54:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b58:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	ee06 3a90 	vmov	s13, r3
 8004b64:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b68:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004b6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b80:	e01b      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b82:	ee07 ca10 	vmov	s14, ip
 8004b86:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b8a:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004b8e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b92:	4b34      	ldr	r3, [pc, #208]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee06 3a90 	vmov	s13, r3
 8004b9e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ba2:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004ba6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004bbc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bbe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004bd6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004bda:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bde:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004be0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004bf4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004bf8:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bfc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bfe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c12:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004c16:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c1e:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c20:	ee07 ca10 	vmov	s14, ip
 8004c24:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004c28:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004c2c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	ee06 3a90 	vmov	s13, r3
 8004c3c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004c40:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004c44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c54:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004c58:	e7af      	b.n	8004bba <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c5e:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c60:	6083      	str	r3, [r0, #8]
}
 8004c62:	e7da      	b.n	8004c1a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8004c64:	58024400 	.word	0x58024400
 8004c68:	4a742400 	.word	0x4a742400
 8004c6c:	39000000 	.word	0x39000000
 8004c70:	03d09000 	.word	0x03d09000
 8004c74:	4c742400 	.word	0x4c742400
 8004c78:	4bbebc20 	.word	0x4bbebc20

08004c7c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004c7c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c7e:	4b78      	ldr	r3, [pc, #480]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c82:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004c84:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c8a:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8004c98:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8004c9c:	f000 80db 	beq.w	8004e56 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8004ca0:	f002 0203 	and.w	r2, r2, #3
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004cac:	2a01      	cmp	r2, #1
 8004cae:	d066      	beq.n	8004d7e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8004cb0:	2a02      	cmp	r2, #2
 8004cb2:	f000 80b3 	beq.w	8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cb6:	b1e2      	cbz	r2, 8004cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb8:	ee07 ca10 	vmov	s14, ip
 8004cbc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004cc0:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004cc4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004cc8:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd0:	ee06 3a90 	vmov	s13, r3
 8004cd4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004cd8:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004cdc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cec:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004cf0:	e061      	b.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf2:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f013 0f20 	tst.w	r3, #32
 8004cfa:	d023      	beq.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cfc:	4958      	ldr	r1, [pc, #352]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004cfe:	680a      	ldr	r2, [r1, #0]
 8004d00:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004d06:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d08:	ee07 3a10 	vmov	s14, r3
 8004d0c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004d10:	ee07 ca10 	vmov	s14, ip
 8004d14:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004d18:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee06 3a90 	vmov	s13, r3
 8004d26:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d2a:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004d2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d42:	e038      	b.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d44:	ee07 ca10 	vmov	s14, ip
 8004d48:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004d4c:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004d50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5c:	ee06 3a90 	vmov	s13, r3
 8004d60:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d64:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004d68:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d7c:	e01b      	b.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d7e:	ee07 ca10 	vmov	s14, ip
 8004d82:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004d86:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004d8a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004d8e:	4b34      	ldr	r3, [pc, #208]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee06 3a90 	vmov	s13, r3
 8004d9a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d9e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004da2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004db6:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004db8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dce:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004dd2:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004dd6:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dda:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ddc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dec:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004df0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004df4:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004df8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004dfa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e0e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004e12:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1a:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e1c:	ee07 ca10 	vmov	s14, ip
 8004e20:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004e24:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8004e28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e34:	ee06 3a90 	vmov	s13, r3
 8004e38:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004e3c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004e40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e50:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004e54:	e7af      	b.n	8004db6 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e5a:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e5c:	6083      	str	r3, [r0, #8]
}
 8004e5e:	e7da      	b.n	8004e16 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8004e60:	58024400 	.word	0x58024400
 8004e64:	4a742400 	.word	0x4a742400
 8004e68:	39000000 	.word	0x39000000
 8004e6c:	03d09000 	.word	0x03d09000
 8004e70:	4c742400 	.word	0x4c742400
 8004e74:	4bbebc20 	.word	0x4bbebc20

08004e78 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004e78:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e7a:	4b78      	ldr	r3, [pc, #480]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004e7e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004e80:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e86:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8004e94:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004e98:	f000 80db 	beq.w	8005052 <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8004e9c:	f002 0203 	and.w	r2, r2, #3
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004ea8:	2a01      	cmp	r2, #1
 8004eaa:	d066      	beq.n	8004f7a <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8004eac:	2a02      	cmp	r2, #2
 8004eae:	f000 80b3 	beq.w	8005018 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8004eb2:	b1e2      	cbz	r2, 8004eee <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb4:	ee07 ca10 	vmov	s14, ip
 8004eb8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004ebc:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004ec0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004ec4:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	ee06 3a90 	vmov	s13, r3
 8004ed0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ed4:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004ed8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004eec:	e061      	b.n	8004fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f013 0f20 	tst.w	r3, #32
 8004ef6:	d023      	beq.n	8004f40 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4958      	ldr	r1, [pc, #352]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004efa:	680a      	ldr	r2, [r1, #0]
 8004efc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8004f02:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f04:	ee07 3a10 	vmov	s14, r3
 8004f08:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004f0c:	ee07 ca10 	vmov	s14, ip
 8004f10:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004f14:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004f18:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee06 3a90 	vmov	s13, r3
 8004f22:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f26:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004f2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f3e:	e038      	b.n	8004fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f40:	ee07 ca10 	vmov	s14, ip
 8004f44:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004f48:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004f4c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004f50:	4b42      	ldr	r3, [pc, #264]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f58:	ee06 3a90 	vmov	s13, r3
 8004f5c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f60:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004f64:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f78:	e01b      	b.n	8004fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f7a:	ee07 ca10 	vmov	s14, ip
 8004f7e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004f82:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800506c <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8004f86:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004f8a:	4b34      	ldr	r3, [pc, #208]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee06 3a90 	vmov	s13, r3
 8004f96:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f9a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8004f9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004fb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004fb6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fca:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004fce:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004fd2:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004fd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004fd8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004fec:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004ff0:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004ff4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ff6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800500a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800500e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005016:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005018:	ee07 ca10 	vmov	s14, ip
 800501c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005020:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005070 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8005024:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005030:	ee06 3a90 	vmov	s13, r3
 8005034:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005038:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800503c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005050:	e7af      	b.n	8004fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005056:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005058:	6083      	str	r3, [r0, #8]
}
 800505a:	e7da      	b.n	8005012 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800505c:	58024400 	.word	0x58024400
 8005060:	4c742400 	.word	0x4c742400
 8005064:	39000000 	.word	0x39000000
 8005068:	03d09000 	.word	0x03d09000
 800506c:	4a742400 	.word	0x4a742400
 8005070:	4bbebc20 	.word	0x4bbebc20

08005074 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005074:	b500      	push	{lr}
 8005076:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005078:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800507c:	430b      	orrs	r3, r1
 800507e:	d02d      	beq.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005080:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8005084:	430b      	orrs	r3, r1
 8005086:	d07d      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005088:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800508c:	430b      	orrs	r3, r1
 800508e:	f000 80d3 	beq.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005092:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005096:	430b      	orrs	r3, r1
 8005098:	f000 812b 	beq.w	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800509c:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f000 818b 	beq.w	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80050a6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 80050aa:	430b      	orrs	r3, r1
 80050ac:	f000 81e3 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80050b0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 80050b4:	430b      	orrs	r3, r1
 80050b6:	f000 822c 	beq.w	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80050ba:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80050be:	430b      	orrs	r3, r1
 80050c0:	f000 826f 	beq.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80050c4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80050c8:	430b      	orrs	r3, r1
 80050ca:	f000 8290 	beq.w	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80050ce:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80050d2:	4308      	orrs	r0, r1
 80050d4:	f000 82d4 	beq.w	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 80050d8:	2000      	movs	r0, #0
 80050da:	e302      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80050dc:	4b95      	ldr	r3, [pc, #596]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	f200 82f3 	bhi.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80050ea:	e8df f003 	tbb	[pc, r3]
 80050ee:	1005      	.short	0x1005
 80050f0:	031b      	.short	0x031b
 80050f2:	26          	.byte	0x26
 80050f3:	00          	.byte	0x00
 80050f4:	4890      	ldr	r0, [pc, #576]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050f6:	e2f4      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f8:	4b8e      	ldr	r3, [pc, #568]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005100:	f000 82ef 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005104:	a807      	add	r0, sp, #28
 8005106:	f7ff feb7 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800510a:	9808      	ldr	r0, [sp, #32]
 800510c:	e2e9      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800510e:	4b89      	ldr	r3, [pc, #548]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005116:	f000 82e4 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800511a:	a804      	add	r0, sp, #16
 800511c:	f7ff fcb0 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005120:	9804      	ldr	r0, [sp, #16]
 8005122:	e2de      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005124:	4b83      	ldr	r3, [pc, #524]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800512c:	f000 82d9 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005130:	a801      	add	r0, sp, #4
 8005132:	f7ff fda3 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005136:	9801      	ldr	r0, [sp, #4]
 8005138:	e2d3      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800513a:	4a7e      	ldr	r2, [pc, #504]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800513c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800513e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	f012 0f04 	tst.w	r2, #4
 8005148:	d007      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800514a:	b933      	cbnz	r3, 800515a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800514c:	4b79      	ldr	r3, [pc, #484]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005154:	4879      	ldr	r0, [pc, #484]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005156:	40d8      	lsrs	r0, r3
 8005158:	e2c3      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800515a:	4a76      	ldr	r2, [pc, #472]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005162:	d003      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8005164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005168:	f000 82b4 	beq.w	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800516c:	4a71      	ldr	r2, [pc, #452]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005174:	f000 82b0 	beq.w	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800517c:	f000 82ae 	beq.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 8005180:	2000      	movs	r0, #0
 8005182:	e2ae      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005184:	4b6b      	ldr	r3, [pc, #428]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d033      	beq.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005190:	d915      	bls.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005192:	2bc0      	cmp	r3, #192	; 0xc0
 8005194:	f000 82a4 	beq.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519c:	d11f      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800519e:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80051a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	f012 0f04 	tst.w	r2, #4
 80051ac:	d02f      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80051ae:	bb73      	cbnz	r3, 800520e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b0:	4b60      	ldr	r3, [pc, #384]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051b8:	4860      	ldr	r0, [pc, #384]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051ba:	40d8      	lsrs	r0, r3
 80051bc:	e291      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80051be:	b183      	cbz	r3, 80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d10a      	bne.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051c4:	4b5b      	ldr	r3, [pc, #364]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80051cc:	f000 8289 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d0:	a804      	add	r0, sp, #16
 80051d2:	f7ff fc55 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051d6:	9804      	ldr	r0, [sp, #16]
 80051d8:	e283      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80051da:	2000      	movs	r0, #0
 80051dc:	e281      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80051de:	2000      	movs	r0, #0
 80051e0:	e27f      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80051ea:	f000 827a 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ee:	a807      	add	r0, sp, #28
 80051f0:	f7ff fe42 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051f4:	9808      	ldr	r0, [sp, #32]
 80051f6:	e274      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051f8:	4b4e      	ldr	r3, [pc, #312]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005200:	f000 826f 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005204:	a801      	add	r0, sp, #4
 8005206:	f7ff fd39 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800520a:	9801      	ldr	r0, [sp, #4]
 800520c:	e269      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800520e:	4a49      	ldr	r2, [pc, #292]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005216:	d003      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521c:	f000 8264 	beq.w	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005220:	4a44      	ldr	r2, [pc, #272]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005228:	f000 8260 	beq.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005230:	f000 825e 	beq.w	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 8005234:	2000      	movs	r0, #0
 8005236:	e254      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005244:	d035      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005246:	d916      	bls.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005248:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800524c:	f000 8252 	beq.w	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005254:	d120      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005256:	4a37      	ldr	r2, [pc, #220]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005258:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800525a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	f012 0f04 	tst.w	r2, #4
 8005264:	d030      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005266:	bb7b      	cbnz	r3, 80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005268:	4b32      	ldr	r3, [pc, #200]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005270:	4832      	ldr	r0, [pc, #200]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005272:	40d8      	lsrs	r0, r3
 8005274:	e235      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005276:	b18b      	cbz	r3, 800529c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800527c:	d10a      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800527e:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005286:	f000 822c 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800528a:	a804      	add	r0, sp, #16
 800528c:	f7ff fbf8 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005290:	9804      	ldr	r0, [sp, #16]
 8005292:	e226      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005294:	2000      	movs	r0, #0
 8005296:	e224      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005298:	2000      	movs	r0, #0
 800529a:	e222      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80052a4:	f000 821d 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a8:	a807      	add	r0, sp, #28
 80052aa:	f7ff fde5 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ae:	9808      	ldr	r0, [sp, #32]
 80052b0:	e217      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80052ba:	f000 8212 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052be:	a801      	add	r0, sp, #4
 80052c0:	f7ff fcdc 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052c4:	9801      	ldr	r0, [sp, #4]
 80052c6:	e20c      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052c8:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80052d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d6:	f000 820f 	beq.w	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052da:	4a16      	ldr	r2, [pc, #88]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80052e2:	f000 820b 	beq.w	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	f000 8209 	beq.w	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 80052ee:	2000      	movs	r0, #0
 80052f0:	e1f7      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 80052fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052fe:	d03d      	beq.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005300:	d91e      	bls.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005306:	f000 81fd 	beq.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800530a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800530e:	d128      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005312:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	f012 0f04 	tst.w	r2, #4
 800531e:	d038      	beq.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d136      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800532c:	4803      	ldr	r0, [pc, #12]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800532e:	40d8      	lsrs	r0, r3
 8005330:	e1d7      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005332:	bf00      	nop
 8005334:	58024400 	.word	0x58024400
 8005338:	00bb8000 	.word	0x00bb8000
 800533c:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 8005340:	b18b      	cbz	r3, 8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005346:	d10a      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005348:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005350:	f000 81c7 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005354:	a804      	add	r0, sp, #16
 8005356:	f7ff fb93 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800535a:	9804      	ldr	r0, [sp, #16]
 800535c:	e1c1      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 800535e:	2000      	movs	r0, #0
 8005360:	e1bf      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005362:	2000      	movs	r0, #0
 8005364:	e1bd      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005366:	4b93      	ldr	r3, [pc, #588]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800536e:	f000 81b8 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005372:	a807      	add	r0, sp, #28
 8005374:	f7ff fd80 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005378:	9808      	ldr	r0, [sp, #32]
 800537a:	e1b2      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800537c:	4b8d      	ldr	r3, [pc, #564]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005384:	f000 81ad 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005388:	a801      	add	r0, sp, #4
 800538a:	f7ff fc77 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800538e:	9801      	ldr	r0, [sp, #4]
 8005390:	e1a7      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005392:	4a88      	ldr	r2, [pc, #544]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	f412 7f80 	tst.w	r2, #256	; 0x100
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 800539c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053a0:	f000 81b2 	beq.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053a4:	4a83      	ldr	r2, [pc, #524]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80053ac:	f000 81ae 	beq.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 80053b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b4:	f000 81ac 	beq.w	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 80053b8:	2000      	movs	r0, #0
 80053ba:	e192      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80053bc:	4b7d      	ldr	r3, [pc, #500]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d035      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80053ca:	d916      	bls.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	f000 81a0 	beq.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80053d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d8:	d120      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053da:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80053dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	f012 0f04 	tst.w	r2, #4
 80053e8:	d030      	beq.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 80053ea:	bb7b      	cbnz	r3, 800544c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ec:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80053f4:	4870      	ldr	r0, [pc, #448]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80053f6:	40d8      	lsrs	r0, r3
 80053f8:	e173      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80053fa:	b18b      	cbz	r3, 8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80053fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005400:	d10a      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005402:	4b6c      	ldr	r3, [pc, #432]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800540a:	f000 816a 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800540e:	a804      	add	r0, sp, #16
 8005410:	f7ff fb36 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005414:	9804      	ldr	r0, [sp, #16]
 8005416:	e164      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005418:	2000      	movs	r0, #0
 800541a:	e162      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800541c:	2000      	movs	r0, #0
 800541e:	e160      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005420:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005428:	f000 815b 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800542c:	a807      	add	r0, sp, #28
 800542e:	f7ff fd23 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005432:	9808      	ldr	r0, [sp, #32]
 8005434:	e155      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005436:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800543e:	f000 8150 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005442:	a801      	add	r0, sp, #4
 8005444:	f7ff fc1a 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	e14a      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800544c:	4a59      	ldr	r2, [pc, #356]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005454:	d003      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545a:	f000 815d 	beq.w	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800545e:	4a55      	ldr	r2, [pc, #340]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005466:	f000 8159 	beq.w	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546e:	f000 8157 	beq.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 8005472:	2000      	movs	r0, #0
 8005474:	e135      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005476:	4b4f      	ldr	r3, [pc, #316]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800547e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005482:	d032      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005484:	d816      	bhi.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d023      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005490:	d10a      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005492:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800549a:	f000 8122 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800549e:	a801      	add	r0, sp, #4
 80054a0:	f7ff fbec 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054a4:	9802      	ldr	r0, [sp, #8]
 80054a6:	e11c      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80054a8:	b913      	cbnz	r3, 80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fe fc55 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
        break;
 80054ae:	e118      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80054b0:	2000      	movs	r0, #0
 80054b2:	e116      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80054b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054b8:	d023      	beq.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80054ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054be:	d107      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054c0:	4b3c      	ldr	r3, [pc, #240]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80054c8:	f000 810b 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80054cc:	483b      	ldr	r0, [pc, #236]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80054ce:	e108      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80054d0:	2000      	movs	r0, #0
 80054d2:	e106      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d4:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80054dc:	f000 8101 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e0:	a804      	add	r0, sp, #16
 80054e2:	f7ff facd 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054e6:	9805      	ldr	r0, [sp, #20]
 80054e8:	e0fb      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ea:	4b32      	ldr	r3, [pc, #200]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f010 0004 	ands.w	r0, r0, #4
 80054f2:	f000 80f6 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054fc:	482e      	ldr	r0, [pc, #184]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80054fe:	40d8      	lsrs	r0, r3
 8005500:	e0ef      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800550a:	f000 80ea 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800550e:	482c      	ldr	r0, [pc, #176]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005510:	e0e7      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d010      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005524:	d018      	beq.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8005526:	b10b      	cbz	r3, 800552c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005528:	2000      	movs	r0, #0
 800552a:	e0da      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005534:	f000 80d5 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005538:	a804      	add	r0, sp, #16
 800553a:	f7ff faa1 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800553e:	9804      	ldr	r0, [sp, #16]
 8005540:	e0cf      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800554a:	f000 80ca 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800554e:	a801      	add	r0, sp, #4
 8005550:	f7ff fb94 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005554:	9803      	ldr	r0, [sp, #12]
 8005556:	e0c4      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800555a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800555c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	f012 0f04 	tst.w	r2, #4
 8005566:	d007      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005568:	b933      	cbnz	r3, 8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005572:	4811      	ldr	r0, [pc, #68]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8005574:	40d8      	lsrs	r0, r3
 8005576:	e0b4      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005578:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005580:	d003      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005586:	f000 80cd 	beq.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005592:	f000 80c9 	beq.w	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559a:	f000 80c7 	beq.w	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 800559e:	2000      	movs	r0, #0
 80055a0:	e09f      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 80055a6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80055aa:	d00b      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 80055ac:	b9ab      	cbnz	r3, 80055da <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e097      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80055b2:	bf00      	nop
 80055b4:	58024400 	.word	0x58024400
 80055b8:	03d09000 	.word	0x03d09000
 80055bc:	017d7840 	.word	0x017d7840
 80055c0:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055c4:	4b5a      	ldr	r3, [pc, #360]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80055cc:	f000 8089 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d0:	a807      	add	r0, sp, #28
 80055d2:	f7ff fc51 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d6:	9808      	ldr	r0, [sp, #32]
 80055d8:	e083      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055da:	4b55      	ldr	r3, [pc, #340]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80055e2:	d07e      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e4:	a804      	add	r0, sp, #16
 80055e6:	f7ff fa4b 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055ea:	9806      	ldr	r0, [sp, #24]
 80055ec:	e079      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80055ee:	4b50      	ldr	r3, [pc, #320]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 80055f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055fa:	d02f      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80055fc:	d815      	bhi.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 80055fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005602:	d021      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005608:	d109      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800560a:	4b49      	ldr	r3, [pc, #292]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005612:	d066      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005614:	a801      	add	r0, sp, #4
 8005616:	f7ff fb31 	bl	8004c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800561a:	9802      	ldr	r0, [sp, #8]
 800561c:	e061      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800561e:	b913      	cbnz	r3, 8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005620:	f7ff fa1c 	bl	8004a5c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005624:	e05d      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005626:	2000      	movs	r0, #0
 8005628:	e05b      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d020      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005634:	d106      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800563e:	d050      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005640:	483c      	ldr	r0, [pc, #240]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005642:	e04e      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005644:	2000      	movs	r0, #0
 8005646:	e04c      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005648:	4b39      	ldr	r3, [pc, #228]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005650:	d047      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005652:	a804      	add	r0, sp, #16
 8005654:	f7ff fa14 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005658:	9805      	ldr	r0, [sp, #20]
 800565a:	e042      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	f010 0004 	ands.w	r0, r0, #4
 8005664:	d03d      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800566c:	4832      	ldr	r0, [pc, #200]	; (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 800566e:	40d8      	lsrs	r0, r3
 8005670:	e037      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005672:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800567a:	d032      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800567c:	482f      	ldr	r0, [pc, #188]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800567e:	e030      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005680:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568c:	d00c      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005692:	d013      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8005694:	b10b      	cbz	r3, 800569a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005696:	2000      	movs	r0, #0
  return frequency;
 8005698:	e023      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80056a2:	d01e      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80056a4:	4823      	ldr	r0, [pc, #140]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80056a6:	e01c      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80056b0:	d017      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056b2:	a807      	add	r0, sp, #28
 80056b4:	f7ff fbe0 	bl	8004e78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b8:	9808      	ldr	r0, [sp, #32]
 80056ba:	e012      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056bc:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80056c4:	d00d      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056c6:	a804      	add	r0, sp, #16
 80056c8:	f7ff f9da 	bl	8004a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056cc:	9805      	ldr	r0, [sp, #20]
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80056d0:	2000      	movs	r0, #0
 80056d2:	e006      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80056d4:	4819      	ldr	r0, [pc, #100]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 80056d8:	2000      	movs	r0, #0
 80056da:	e002      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80056dc:	4815      	ldr	r0, [pc, #84]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80056e0:	4817      	ldr	r0, [pc, #92]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 80056e2:	b00b      	add	sp, #44	; 0x2c
 80056e4:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 80056e8:	4814      	ldr	r0, [pc, #80]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80056ea:	e7fa      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 80056ec:	2000      	movs	r0, #0
 80056ee:	e7f8      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80056f0:	4810      	ldr	r0, [pc, #64]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80056f2:	e7f6      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80056f4:	4812      	ldr	r0, [pc, #72]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80056f6:	e7f4      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80056f8:	4810      	ldr	r0, [pc, #64]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80056fa:	e7f2      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 80056fc:	2000      	movs	r0, #0
 80056fe:	e7f0      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005702:	e7ee      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005704:	480e      	ldr	r0, [pc, #56]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005706:	e7ec      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005708:	480c      	ldr	r0, [pc, #48]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800570a:	e7ea      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800570c:	2000      	movs	r0, #0
 800570e:	e7e8      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005710:	4808      	ldr	r0, [pc, #32]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005712:	e7e6      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005714:	480a      	ldr	r0, [pc, #40]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005716:	e7e4      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800571a:	e7e2      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 800571c:	2000      	movs	r0, #0
 800571e:	e7e0      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005720:	4804      	ldr	r0, [pc, #16]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005722:	e7de      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005724:	4805      	ldr	r0, [pc, #20]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005726:	e7dc      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005728:	2000      	movs	r0, #0
 800572a:	e7da      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800572e:	e7d8      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005730:	58024400 	.word	0x58024400
 8005734:	017d7840 	.word	0x017d7840
 8005738:	03d09000 	.word	0x03d09000
 800573c:	003d0900 	.word	0x003d0900
 8005740:	00bb8000 	.word	0x00bb8000

08005744 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005744:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8005746:	6802      	ldr	r2, [r0, #0]
 8005748:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800574a:	6991      	ldr	r1, [r2, #24]
 800574c:	f041 0108 	orr.w	r1, r1, #8
 8005750:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005752:	6801      	ldr	r1, [r0, #0]
 8005754:	698a      	ldr	r2, [r1, #24]
 8005756:	f042 0210 	orr.w	r2, r2, #16
 800575a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800575c:	6801      	ldr	r1, [r0, #0]
 800575e:	680a      	ldr	r2, [r1, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005766:	6801      	ldr	r1, [r0, #0]
 8005768:	690c      	ldr	r4, [r1, #16]
 800576a:	4a29      	ldr	r2, [pc, #164]	; (8005810 <SPI_CloseTransfer+0xcc>)
 800576c:	4022      	ands	r2, r4
 800576e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005770:	6801      	ldr	r1, [r0, #0]
 8005772:	688a      	ldr	r2, [r1, #8]
 8005774:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005778:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800577a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	2a04      	cmp	r2, #4
 8005782:	d00d      	beq.n	80057a0 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005784:	f013 0f20 	tst.w	r3, #32
 8005788:	d00a      	beq.n	80057a0 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800578a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800578e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005792:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005796:	6801      	ldr	r1, [r0, #0]
 8005798:	698a      	ldr	r2, [r1, #24]
 800579a:	f042 0220 	orr.w	r2, r2, #32
 800579e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057a0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	2a03      	cmp	r2, #3
 80057a8:	d00d      	beq.n	80057c6 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80057aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057ae:	d00a      	beq.n	80057c6 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80057b0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80057b4:	f042 0204 	orr.w	r2, r2, #4
 80057b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057bc:	6801      	ldr	r1, [r0, #0]
 80057be:	698a      	ldr	r2, [r1, #24]
 80057c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c4:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80057c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80057ca:	d00a      	beq.n	80057e2 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057cc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057d8:	6801      	ldr	r1, [r0, #0]
 80057da:	698a      	ldr	r2, [r1, #24]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80057e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80057e6:	d00a      	beq.n	80057fe <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057e8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057f4:	6802      	ldr	r2, [r0, #0]
 80057f6:	6993      	ldr	r3, [r2, #24]
 80057f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fc:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80057fe:	2300      	movs	r3, #0
 8005800:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005804:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	fffffc90 	.word	0xfffffc90

08005814 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005814:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005816:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005818:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800581a:	3008      	adds	r0, #8
 800581c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800581e:	fb03 0000 	mla	r0, r3, r0, r0
 8005822:	4770      	bx	lr

08005824 <SPI_WaitOnFlagUntilTimeout>:
{
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005828:	4680      	mov	r8, r0
 800582a:	460f      	mov	r7, r1
 800582c:	4616      	mov	r6, r2
 800582e:	461d      	mov	r5, r3
 8005830:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005834:	e000      	b.n	8005838 <SPI_WaitOnFlagUntilTimeout+0x14>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005836:	b1bd      	cbz	r5, 8005868 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005838:	f8d8 3000 	ldr.w	r3, [r8]
 800583c:	695c      	ldr	r4, [r3, #20]
 800583e:	ea37 0404 	bics.w	r4, r7, r4
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	42b3      	cmp	r3, r6
 800584a:	d10a      	bne.n	8005862 <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800584c:	f7fc f820 	bl	8001890 <HAL_GetTick>
 8005850:	eba0 0009 	sub.w	r0, r0, r9
 8005854:	42a8      	cmp	r0, r5
 8005856:	d3ee      	bcc.n	8005836 <SPI_WaitOnFlagUntilTimeout+0x12>
 8005858:	f1b5 3fff 	cmp.w	r5, #4294967295
 800585c:	d0eb      	beq.n	8005836 <SPI_WaitOnFlagUntilTimeout+0x12>
      return HAL_TIMEOUT;
 800585e:	2003      	movs	r0, #3
 8005860:	e000      	b.n	8005864 <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 8005862:	2000      	movs	r0, #0
}
 8005864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005868:	2003      	movs	r0, #3
 800586a:	e7fb      	b.n	8005864 <SPI_WaitOnFlagUntilTimeout+0x40>

0800586c <HAL_SPI_Init>:
  if (hspi == NULL)
 800586c:	2800      	cmp	r0, #0
 800586e:	f000 80b7 	beq.w	80059e0 <HAL_SPI_Init+0x174>
{
 8005872:	b570      	push	{r4, r5, r6, lr}
 8005874:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800587a:	6805      	ldr	r5, [r0, #0]
 800587c:	4b5c      	ldr	r3, [pc, #368]	; (80059f0 <HAL_SPI_Init+0x184>)
 800587e:	4e5d      	ldr	r6, [pc, #372]	; (80059f4 <HAL_SPI_Init+0x188>)
 8005880:	429d      	cmp	r5, r3
 8005882:	bf18      	it	ne
 8005884:	42b5      	cmpne	r5, r6
 8005886:	bf14      	ite	ne
 8005888:	2601      	movne	r6, #1
 800588a:	2600      	moveq	r6, #0
 800588c:	d007      	beq.n	800589e <HAL_SPI_Init+0x32>
 800588e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8005892:	429d      	cmp	r5, r3
 8005894:	d003      	beq.n	800589e <HAL_SPI_Init+0x32>
 8005896:	68c3      	ldr	r3, [r0, #12]
 8005898:	2b0f      	cmp	r3, #15
 800589a:	f200 80a3 	bhi.w	80059e4 <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff ffb8 	bl	8005814 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80058a4:	b12e      	cbz	r6, 80058b2 <HAL_SPI_Init+0x46>
 80058a6:	4b54      	ldr	r3, [pc, #336]	; (80059f8 <HAL_SPI_Init+0x18c>)
 80058a8:	429d      	cmp	r5, r3
 80058aa:	d002      	beq.n	80058b2 <HAL_SPI_Init+0x46>
 80058ac:	2808      	cmp	r0, #8
 80058ae:	f200 809b 	bhi.w	80059e8 <HAL_SPI_Init+0x17c>
 80058b2:	4a4f      	ldr	r2, [pc, #316]	; (80059f0 <HAL_SPI_Init+0x184>)
 80058b4:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <HAL_SPI_Init+0x188>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf18      	it	ne
 80058ba:	4295      	cmpne	r5, r2
 80058bc:	d003      	beq.n	80058c6 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c2:	429d      	cmp	r5, r3
 80058c4:	d102      	bne.n	80058cc <HAL_SPI_Init+0x60>
 80058c6:	2810      	cmp	r0, #16
 80058c8:	f200 8090 	bhi.w	80059ec <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80058cc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80058d0:	b1f3      	cbz	r3, 8005910 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80058d2:	2302      	movs	r3, #2
 80058d4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058ea:	69a1      	ldr	r1, [r4, #24]
 80058ec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80058f0:	d014      	beq.n	800591c <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80058f8:	d023      	beq.n	8005942 <HAL_SPI_Init+0xd6>
 80058fa:	68e3      	ldr	r3, [r4, #12]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d920      	bls.n	8005942 <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005900:	6821      	ldr	r1, [r4, #0]
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800590a:	4303      	orrs	r3, r0
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	e01d      	b.n	800594c <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 8005910:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005914:	4620      	mov	r0, r4
 8005916:	f7fb fe9f 	bl	8001658 <HAL_SPI_MspInit>
 800591a:	e7da      	b.n	80058d2 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800591c:	6861      	ldr	r1, [r4, #4]
 800591e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005922:	d006      	beq.n	8005932 <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005924:	2900      	cmp	r1, #0
 8005926:	d1e4      	bne.n	80058f2 <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005928:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800592a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800592e:	d1e0      	bne.n	80058f2 <HAL_SPI_Init+0x86>
 8005930:	e002      	b.n	8005938 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005932:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005934:	2800      	cmp	r0, #0
 8005936:	d1f5      	bne.n	8005924 <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	e7d7      	b.n	80058f2 <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	680b      	ldr	r3, [r1, #0]
 8005946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800594a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800594c:	69e3      	ldr	r3, [r4, #28]
 800594e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005950:	430b      	orrs	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005956:	4313      	orrs	r3, r2
 8005958:	68e1      	ldr	r1, [r4, #12]
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	430b      	orrs	r3, r1
 800595e:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005962:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005964:	4313      	orrs	r3, r2
 8005966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005968:	4313      	orrs	r3, r2
 800596a:	69a2      	ldr	r2, [r4, #24]
 800596c:	4313      	orrs	r3, r2
 800596e:	6922      	ldr	r2, [r4, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	6962      	ldr	r2, [r4, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	6a22      	ldr	r2, [r4, #32]
 8005978:	4313      	orrs	r3, r2
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	4313      	orrs	r3, r2
 800597e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005980:	4313      	orrs	r3, r2
 8005982:	68a2      	ldr	r2, [r4, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005988:	4313      	orrs	r3, r2
 800598a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	430b      	orrs	r3, r1
 8005990:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	b96b      	cbnz	r3, 80059b2 <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	6893      	ldr	r3, [r2, #8]
 800599a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800599e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	6893      	ldr	r3, [r2, #8]
 80059a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80059c2:	d006      	beq.n	80059d2 <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	68d3      	ldr	r3, [r2, #12]
 80059c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80059ce:	430b      	orrs	r3, r1
 80059d0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d2:	2000      	movs	r0, #0
 80059d4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059d8:	2301      	movs	r3, #1
 80059da:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80059de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
}
 80059e2:	4770      	bx	lr
    return HAL_ERROR;
 80059e4:	2001      	movs	r0, #1
 80059e6:	e7fa      	b.n	80059de <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 80059e8:	2001      	movs	r0, #1
 80059ea:	e7f8      	b.n	80059de <HAL_SPI_Init+0x172>
 80059ec:	2001      	movs	r0, #1
 80059ee:	e7f6      	b.n	80059de <HAL_SPI_Init+0x172>
 80059f0:	40013000 	.word	0x40013000
 80059f4:	40003800 	.word	0x40003800
 80059f8:	40003c00 	.word	0x40003c00

080059fc <HAL_SPI_TransmitReceive>:
{
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	b083      	sub	sp, #12
 8005a02:	461d      	mov	r5, r3
 8005a04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a06:	f8d0 b000 	ldr.w	fp, [r0]
  __HAL_LOCK(hspi);
 8005a0a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f000 8178 	beq.w	8005d04 <HAL_SPI_TransmitReceive+0x308>
 8005a14:	4604      	mov	r4, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	4692      	mov	sl, r2
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005a20:	f7fb ff36 	bl	8001890 <HAL_GetTick>
 8005a24:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a26:	f894 8081 	ldrb.w	r8, [r4, #129]	; 0x81
 8005a2a:	fa5f f888 	uxtb.w	r8, r8
 8005a2e:	f1b8 0f01 	cmp.w	r8, #1
 8005a32:	d137      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0xa8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005a34:	f1ba 0f00 	cmp.w	sl, #0
 8005a38:	bf18      	it	ne
 8005a3a:	f1b9 0f00 	cmpne.w	r9, #0
 8005a3e:	d037      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0xb4>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	d035      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0xb4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005a44:	2305      	movs	r3, #5
 8005a46:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a50:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005a54:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005a58:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a5c:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005a60:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005a64:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8005a68:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a6a:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	68d3      	ldr	r3, [r2, #12]
 8005a70:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8005a74:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	6851      	ldr	r1, [r2, #4]
 8005a7a:	4ba4      	ldr	r3, [pc, #656]	; (8005d0c <HAL_SPI_TransmitReceive+0x310>)
 8005a7c:	400b      	ands	r3, r1
 8005a7e:	432b      	orrs	r3, r5
 8005a80:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a92:	d014      	beq.n	8005abe <HAL_SPI_TransmitReceive+0xc2>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a94:	68e3      	ldr	r3, [r4, #12]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d86a      	bhi.n	8005b70 <HAL_SPI_TransmitReceive+0x174>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a9a:	2b07      	cmp	r3, #7
 8005a9c:	f200 80be 	bhi.w	8005c1c <HAL_SPI_TransmitReceive+0x220>
  initial_RxXferCount = Size;
 8005aa0:	46a9      	mov	r9, r5
 8005aa2:	e0c7      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x238>
    __HAL_UNLOCK(hspi);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8005aaa:	f04f 0802 	mov.w	r8, #2
 8005aae:	e002      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
    __HAL_UNLOCK(hspi);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	b003      	add	sp, #12
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e7e4      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x98>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aca:	f7fb fee1 	bl	8001890 <HAL_GetTick>
 8005ace:	1bc0      	subs	r0, r0, r7
 8005ad0:	42b0      	cmp	r0, r6
 8005ad2:	d302      	bcc.n	8005ada <HAL_SPI_TransmitReceive+0xde>
 8005ad4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005ad8:	d138      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x150>
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	d036      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x150>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ade:	ea45 0309 	orr.w	r3, r5, r9
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80ee 	beq.w	8005cc6 <HAL_SPI_TransmitReceive+0x2ca>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f012 0f02 	tst.w	r2, #2
 8005af2:	d010      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x11a>
 8005af4:	b17d      	cbz	r5, 8005b16 <HAL_SPI_TransmitReceive+0x11a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005af6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005afc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005afe:	3304      	adds	r3, #4
 8005b00:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005b02:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b10:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005b14:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6959      	ldr	r1, [r3, #20]
 8005b1a:	f248 0208 	movw	r2, #32776	; 0x8008
 8005b1e:	4211      	tst	r1, r2
 8005b20:	d0d3      	beq.n	8005aca <HAL_SPI_TransmitReceive+0xce>
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	d0d0      	beq.n	8005aca <HAL_SPI_TransmitReceive+0xce>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b30:	3304      	adds	r3, #4
 8005b32:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005b34:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005b42:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005b46:	fa1f f989 	uxth.w	r9, r9
 8005b4a:	e7be      	b.n	8005aca <HAL_SPI_TransmitReceive+0xce>
        SPI_CloseTransfer(hspi);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff fdf9 	bl	8005744 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005b52:	2300      	movs	r3, #0
 8005b54:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b58:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005b6a:	f04f 0803 	mov.w	r8, #3
 8005b6e:	e7a2      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
  initial_RxXferCount = Size;
 8005b70:	46a9      	mov	r9, r5
 8005b72:	e7b4      	b.n	8005ade <HAL_SPI_TransmitReceive+0xe2>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b74:	f7fb fe8c 	bl	8001890 <HAL_GetTick>
 8005b78:	1bc0      	subs	r0, r0, r7
 8005b7a:	42b0      	cmp	r0, r6
 8005b7c:	d302      	bcc.n	8005b84 <HAL_SPI_TransmitReceive+0x188>
 8005b7e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005b82:	d139      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x1fc>
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	d037      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x1fc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b88:	ea45 0309 	orr.w	r3, r5, r9
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8099 	beq.w	8005cc6 <HAL_SPI_TransmitReceive+0x2ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f013 0f02 	tst.w	r3, #2
 8005b9c:	d011      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x1c6>
 8005b9e:	b185      	cbz	r5, 8005bc2 <HAL_SPI_TransmitReceive+0x1c6>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f8ab 3020 	strh.w	r3, [fp, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005baa:	3302      	adds	r3, #2
 8005bac:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005bae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005bbc:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005bc0:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f013 0f01 	tst.w	r3, #1
 8005bca:	d0d3      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x178>
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	d0d0      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x178>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd4:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 8005bd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bdc:	3302      	adds	r3, #2
 8005bde:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005be0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005bee:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005bf2:	fa1f f989 	uxth.w	r9, r9
 8005bf6:	e7bd      	b.n	8005b74 <HAL_SPI_TransmitReceive+0x178>
        SPI_CloseTransfer(hspi);
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f7ff fda3 	bl	8005744 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c04:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c16:	f04f 0803 	mov.w	r8, #3
 8005c1a:	e74c      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
  initial_RxXferCount = Size;
 8005c1c:	46a9      	mov	r9, r5
 8005c1e:	e7b3      	b.n	8005b88 <HAL_SPI_TransmitReceive+0x18c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c20:	f7fb fe36 	bl	8001890 <HAL_GetTick>
 8005c24:	1bc0      	subs	r0, r0, r7
 8005c26:	42b0      	cmp	r0, r6
 8005c28:	d302      	bcc.n	8005c30 <HAL_SPI_TransmitReceive+0x234>
 8005c2a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005c2e:	d138      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x2a6>
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	d036      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x2a6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c34:	ea45 0309 	orr.w	r3, r5, r9
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d043      	beq.n	8005cc6 <HAL_SPI_TransmitReceive+0x2ca>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	f012 0f02 	tst.w	r2, #2
 8005c46:	d011      	beq.n	8005c6c <HAL_SPI_TransmitReceive+0x270>
 8005c48:	b185      	cbz	r5, 8005c6c <HAL_SPI_TransmitReceive+0x270>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c54:	3301      	adds	r3, #1
 8005c56:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005c58:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c66:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005c6a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	f012 0f01 	tst.w	r2, #1
 8005c74:	d0d4      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x224>
 8005c76:	f1b9 0f00 	cmp.w	r9, #0
 8005c7a:	d0d1      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x224>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c82:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c86:	3301      	adds	r3, #1
 8005c88:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005c8a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005c98:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005c9c:	fa1f f989 	uxth.w	r9, r9
 8005ca0:	e7be      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x224>
        SPI_CloseTransfer(hspi);
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f7ff fd4e 	bl	8005744 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005cc0:	f04f 0803 	mov.w	r8, #3
 8005cc4:	e6f7      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005cc6:	9700      	str	r7, [sp, #0]
 8005cc8:	4633      	mov	r3, r6
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2108      	movs	r1, #8
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff fda8 	bl	8005824 <SPI_WaitOnFlagUntilTimeout>
 8005cd4:	b128      	cbz	r0, 8005ce2 <HAL_SPI_TransmitReceive+0x2e6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005cda:	f043 0320 	orr.w	r3, r3, #32
 8005cde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff fd2e 	bl	8005744 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f aedc 	bne.w	8005ab6 <HAL_SPI_TransmitReceive+0xba>
  return errorcode;
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	e6d8      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
  __HAL_LOCK(hspi);
 8005d04:	f04f 0802 	mov.w	r8, #2
 8005d08:	e6d5      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0xba>
 8005d0a:	bf00      	nop
 8005d0c:	ffff0000 	.word	0xffff0000

08005d10 <arm_biquad_cascade_df2T_f32>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	7807      	ldrb	r7, [r0, #0]
 8005d16:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005d1a:	6885      	ldr	r5, [r0, #8]
 8005d1c:	3514      	adds	r5, #20
 8005d1e:	6846      	ldr	r6, [r0, #4]
 8005d20:	3608      	adds	r6, #8
 8005d22:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8005d26:	eb02 0b09 	add.w	fp, r2, r9
 8005d2a:	f003 080f 	and.w	r8, r3, #15
 8005d2e:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8005d32:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8005d36:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005d3a:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005d3e:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005d42:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005d46:	46b4      	mov	ip, r6
 8005d48:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005d4c:	ed16 4a01 	vldr	s8, [r6, #-4]
 8005d50:	f1be 0f00 	cmp.w	lr, #0
 8005d54:	f000 8195 	beq.w	8006082 <arm_biquad_cascade_df2T_f32+0x372>
 8005d58:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005d5c:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8005d60:	4674      	mov	r4, lr
 8005d62:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005d66:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005d6a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005d6e:	ee67 4a03 	vmul.f32	s9, s14, s6
 8005d72:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005d76:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005d7a:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005d7e:	ee26 3a83 	vmul.f32	s6, s13, s6
 8005d82:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8005d86:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8005d8a:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8005d8e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005d92:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005d96:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005d9a:	ee27 4a23 	vmul.f32	s8, s14, s7
 8005d9e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005da2:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005da6:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005daa:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8005dae:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8005db2:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8005db6:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005dba:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005dbe:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005dc2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005dc6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005dca:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005dce:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005dd2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005dd6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005dda:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8005dde:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8005de2:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005de6:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005dea:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005dee:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005df2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005df6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005dfa:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005dfe:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005e02:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e06:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8005e0a:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8005e0e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005e12:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005e16:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005e1a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e1e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e22:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e26:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005e2a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005e2e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e32:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8005e36:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8005e3a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005e3e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005e42:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005e46:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e4a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e4e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e52:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005e56:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005e5a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e5e:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8005e62:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8005e66:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005e6a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005e6e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005e72:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e76:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e7a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e7e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005e82:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005e86:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e8a:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8005e8e:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8005e92:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005e96:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005e9a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005e9e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005ea2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ea6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005eaa:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005eae:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005eb2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005eb6:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8005eba:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8005ebe:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005ec2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005ec6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005eca:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ece:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ed2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ed6:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005eda:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005ede:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005ee2:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005ee6:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8005eea:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005eee:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005ef2:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005ef6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005efa:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005efe:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f02:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f06:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f0a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f0e:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8005f12:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005f16:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f1a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f1e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f22:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f26:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f2a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f2e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f32:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f36:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f3a:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8005f3e:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8005f42:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f46:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f4a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f4e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f52:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f56:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f5a:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f5e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f62:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f66:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8005f6a:	ed10 4a04 	vldr	s8, [r0, #-16]
 8005f6e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f72:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f76:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f7a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f7e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f82:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f86:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f8a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f8e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f92:	ed03 5a04 	vstr	s10, [r3, #-16]
 8005f96:	ed10 4a03 	vldr	s8, [r0, #-12]
 8005f9a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f9e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005fa2:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005fa6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005faa:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fae:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005fb2:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005fb6:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005fba:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fbe:	ed43 4a03 	vstr	s9, [r3, #-12]
 8005fc2:	ed10 4a02 	vldr	s8, [r0, #-8]
 8005fc6:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005fca:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005fce:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005fd2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005fd6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fda:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005fde:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005fe2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005fe6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fea:	ed03 5a02 	vstr	s10, [r3, #-8]
 8005fee:	ed10 4a01 	vldr	s8, [r0, #-4]
 8005ff2:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005ff6:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005ffa:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005ffe:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006002:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006006:	ee35 5a23 	vadd.f32	s10, s10, s7
 800600a:	ee66 3a24 	vmul.f32	s7, s12, s9
 800600e:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006012:	ee26 5a84 	vmul.f32	s10, s13, s8
 8006016:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800601a:	ee34 4a05 	vadd.f32	s8, s8, s10
 800601e:	ed43 4a01 	vstr	s9, [r3, #-4]
 8006022:	3040      	adds	r0, #64	; 0x40
 8006024:	3340      	adds	r3, #64	; 0x40
 8006026:	3c01      	subs	r4, #1
 8006028:	f47f ae9b 	bne.w	8005d62 <arm_biquad_cascade_df2T_f32+0x52>
 800602c:	4449      	add	r1, r9
 800602e:	465b      	mov	r3, fp
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d019      	beq.n	800606a <arm_biquad_cascade_df2T_f32+0x35a>
 8006036:	eb01 000a 	add.w	r0, r1, sl
 800603a:	ecf1 2a01 	vldmia	r1!, {s5}
 800603e:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8006042:	ee33 3a23 	vadd.f32	s6, s6, s7
 8006046:	ee67 3a22 	vmul.f32	s7, s14, s5
 800604a:	ee33 4a84 	vadd.f32	s8, s7, s8
 800604e:	ee26 5a03 	vmul.f32	s10, s12, s6
 8006052:	ee75 3a04 	vadd.f32	s7, s10, s8
 8006056:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800605a:	ee25 4a83 	vmul.f32	s8, s11, s6
 800605e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006062:	eca3 3a01 	vstmia	r3!, {s6}
 8006066:	4281      	cmp	r1, r0
 8006068:	d1e7      	bne.n	800603a <arm_biquad_cascade_df2T_f32+0x32a>
 800606a:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800606e:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8006072:	3514      	adds	r5, #20
 8006074:	3608      	adds	r6, #8
 8006076:	4611      	mov	r1, r2
 8006078:	3f01      	subs	r7, #1
 800607a:	f47f ae5a 	bne.w	8005d32 <arm_biquad_cascade_df2T_f32+0x22>
 800607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006082:	4613      	mov	r3, r2
 8006084:	e7d4      	b.n	8006030 <arm_biquad_cascade_df2T_f32+0x320>
	...

08006088 <arm_biquad_cascade_df2T_init_f32>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	2100      	movs	r1, #0
 8006090:	60a2      	str	r2, [r4, #8]
 8006092:	00c2      	lsls	r2, r0, #3
 8006094:	7020      	strb	r0, [r4, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f9b0 	bl	80063fc <memset>
 800609c:	6060      	str	r0, [r4, #4]
 800609e:	bd10      	pop	{r4, pc}

080060a0 <arm_sub_f32>:
 80060a0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80060a4:	b4f0      	push	{r4, r5, r6, r7}
 80060a6:	d033      	beq.n	8006110 <arm_sub_f32+0x70>
 80060a8:	f100 0610 	add.w	r6, r0, #16
 80060ac:	f101 0510 	add.w	r5, r1, #16
 80060b0:	f102 0410 	add.w	r4, r2, #16
 80060b4:	4667      	mov	r7, ip
 80060b6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80060ba:	3f01      	subs	r7, #1
 80060bc:	ed56 7a04 	vldr	s15, [r6, #-16]
 80060c0:	f105 0510 	add.w	r5, r5, #16
 80060c4:	f106 0610 	add.w	r6, r6, #16
 80060c8:	f104 0410 	add.w	r4, r4, #16
 80060cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060d0:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80060d4:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80060d8:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80060dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060e0:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80060e4:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80060e8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80060ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060f0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80060f4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80060f8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80060fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006100:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006104:	d1d7      	bne.n	80060b6 <arm_sub_f32+0x16>
 8006106:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800610a:	4420      	add	r0, r4
 800610c:	4421      	add	r1, r4
 800610e:	4422      	add	r2, r4
 8006110:	f013 0303 	ands.w	r3, r3, #3
 8006114:	d01b      	beq.n	800614e <arm_sub_f32+0xae>
 8006116:	edd0 7a00 	vldr	s15, [r0]
 800611a:	3b01      	subs	r3, #1
 800611c:	ed91 7a00 	vldr	s14, [r1]
 8006120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006124:	edc2 7a00 	vstr	s15, [r2]
 8006128:	d011      	beq.n	800614e <arm_sub_f32+0xae>
 800612a:	edd0 7a01 	vldr	s15, [r0, #4]
 800612e:	2b01      	cmp	r3, #1
 8006130:	ed91 7a01 	vldr	s14, [r1, #4]
 8006134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006138:	edc2 7a01 	vstr	s15, [r2, #4]
 800613c:	d007      	beq.n	800614e <arm_sub_f32+0xae>
 800613e:	edd0 7a02 	vldr	s15, [r0, #8]
 8006142:	ed91 7a02 	vldr	s14, [r1, #8]
 8006146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800614a:	edc2 7a02 	vstr	s15, [r2, #8]
 800614e:	bcf0      	pop	{r4, r5, r6, r7}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop

08006154 <arm_mult_f32>:
 8006154:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8006158:	b4f0      	push	{r4, r5, r6, r7}
 800615a:	d033      	beq.n	80061c4 <arm_mult_f32+0x70>
 800615c:	f100 0610 	add.w	r6, r0, #16
 8006160:	f101 0510 	add.w	r5, r1, #16
 8006164:	f102 0410 	add.w	r4, r2, #16
 8006168:	4667      	mov	r7, ip
 800616a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800616e:	3f01      	subs	r7, #1
 8006170:	ed56 7a04 	vldr	s15, [r6, #-16]
 8006174:	f105 0510 	add.w	r5, r5, #16
 8006178:	f106 0610 	add.w	r6, r6, #16
 800617c:	f104 0410 	add.w	r4, r4, #16
 8006180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006184:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8006188:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800618c:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8006190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006194:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8006198:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800619c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80061a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a4:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80061a8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80061ac:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80061b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061b4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80061b8:	d1d7      	bne.n	800616a <arm_mult_f32+0x16>
 80061ba:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80061be:	4420      	add	r0, r4
 80061c0:	4421      	add	r1, r4
 80061c2:	4422      	add	r2, r4
 80061c4:	f013 0303 	ands.w	r3, r3, #3
 80061c8:	d01b      	beq.n	8006202 <arm_mult_f32+0xae>
 80061ca:	edd1 7a00 	vldr	s15, [r1]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	ed90 7a00 	vldr	s14, [r0]
 80061d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061d8:	edc2 7a00 	vstr	s15, [r2]
 80061dc:	d011      	beq.n	8006202 <arm_mult_f32+0xae>
 80061de:	edd0 7a01 	vldr	s15, [r0, #4]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	ed91 7a01 	vldr	s14, [r1, #4]
 80061e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80061f0:	d007      	beq.n	8006202 <arm_mult_f32+0xae>
 80061f2:	edd0 7a02 	vldr	s15, [r0, #8]
 80061f6:	ed91 7a02 	vldr	s14, [r1, #8]
 80061fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fe:	edc2 7a02 	vstr	s15, [r2, #8]
 8006202:	bcf0      	pop	{r4, r5, r6, r7}
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <arm_dot_prod_f32>:
 8006208:	b4f0      	push	{r4, r5, r6, r7}
 800620a:	0897      	lsrs	r7, r2, #2
 800620c:	d052      	beq.n	80062b4 <arm_dot_prod_f32+0xac>
 800620e:	f100 0510 	add.w	r5, r0, #16
 8006212:	f101 0410 	add.w	r4, r1, #16
 8006216:	463e      	mov	r6, r7
 8006218:	eddf 7a28 	vldr	s15, [pc, #160]	; 80062bc <arm_dot_prod_f32+0xb4>
 800621c:	ed14 7a04 	vldr	s14, [r4, #-16]
 8006220:	3e01      	subs	r6, #1
 8006222:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006226:	f104 0410 	add.w	r4, r4, #16
 800622a:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 800622e:	f105 0510 	add.w	r5, r5, #16
 8006232:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006236:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 800623a:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800623e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006242:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8006246:	ee36 6a27 	vadd.f32	s12, s12, s15
 800624a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800624e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006252:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8006256:	ee76 6a86 	vadd.f32	s13, s13, s12
 800625a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800625e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006266:	d1d9      	bne.n	800621c <arm_dot_prod_f32+0x14>
 8006268:	013f      	lsls	r7, r7, #4
 800626a:	4438      	add	r0, r7
 800626c:	4439      	add	r1, r7
 800626e:	f012 0203 	ands.w	r2, r2, #3
 8006272:	d01b      	beq.n	80062ac <arm_dot_prod_f32+0xa4>
 8006274:	ed91 7a00 	vldr	s14, [r1]
 8006278:	3a01      	subs	r2, #1
 800627a:	edd0 6a00 	vldr	s13, [r0]
 800627e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006286:	d011      	beq.n	80062ac <arm_dot_prod_f32+0xa4>
 8006288:	ed91 7a01 	vldr	s14, [r1, #4]
 800628c:	2a01      	cmp	r2, #1
 800628e:	edd0 6a01 	vldr	s13, [r0, #4]
 8006292:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800629a:	d007      	beq.n	80062ac <arm_dot_prod_f32+0xa4>
 800629c:	ed90 7a02 	vldr	s14, [r0, #8]
 80062a0:	edd1 6a02 	vldr	s13, [r1, #8]
 80062a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80062a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062ac:	edc3 7a00 	vstr	s15, [r3]
 80062b0:	bcf0      	pop	{r4, r5, r6, r7}
 80062b2:	4770      	bx	lr
 80062b4:	eddf 7a01 	vldr	s15, [pc, #4]	; 80062bc <arm_dot_prod_f32+0xb4>
 80062b8:	e7d9      	b.n	800626e <arm_dot_prod_f32+0x66>
 80062ba:	bf00      	nop
 80062bc:	00000000 	.word	0x00000000

080062c0 <arm_add_f32>:
 80062c0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80062c4:	b4f0      	push	{r4, r5, r6, r7}
 80062c6:	d033      	beq.n	8006330 <arm_add_f32+0x70>
 80062c8:	f100 0610 	add.w	r6, r0, #16
 80062cc:	f101 0510 	add.w	r5, r1, #16
 80062d0:	f102 0410 	add.w	r4, r2, #16
 80062d4:	4667      	mov	r7, ip
 80062d6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80062da:	3f01      	subs	r7, #1
 80062dc:	ed56 7a04 	vldr	s15, [r6, #-16]
 80062e0:	f105 0510 	add.w	r5, r5, #16
 80062e4:	f106 0610 	add.w	r6, r6, #16
 80062e8:	f104 0410 	add.w	r4, r4, #16
 80062ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f0:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80062f4:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80062f8:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80062fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006300:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8006304:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8006308:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800630c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006310:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8006314:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006318:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800631c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006320:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006324:	d1d7      	bne.n	80062d6 <arm_add_f32+0x16>
 8006326:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800632a:	4420      	add	r0, r4
 800632c:	4421      	add	r1, r4
 800632e:	4422      	add	r2, r4
 8006330:	f013 0303 	ands.w	r3, r3, #3
 8006334:	d01b      	beq.n	800636e <arm_add_f32+0xae>
 8006336:	edd1 7a00 	vldr	s15, [r1]
 800633a:	3b01      	subs	r3, #1
 800633c:	ed90 7a00 	vldr	s14, [r0]
 8006340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006344:	edc2 7a00 	vstr	s15, [r2]
 8006348:	d011      	beq.n	800636e <arm_add_f32+0xae>
 800634a:	edd0 7a01 	vldr	s15, [r0, #4]
 800634e:	2b01      	cmp	r3, #1
 8006350:	ed91 7a01 	vldr	s14, [r1, #4]
 8006354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006358:	edc2 7a01 	vstr	s15, [r2, #4]
 800635c:	d007      	beq.n	800636e <arm_add_f32+0xae>
 800635e:	edd0 7a02 	vldr	s15, [r0, #8]
 8006362:	ed91 7a02 	vldr	s14, [r1, #8]
 8006366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800636a:	edc2 7a02 	vstr	s15, [r2, #8]
 800636e:	bcf0      	pop	{r4, r5, r6, r7}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <arm_abs_f32>:
 8006374:	b470      	push	{r4, r5, r6}
 8006376:	0896      	lsrs	r6, r2, #2
 8006378:	d025      	beq.n	80063c6 <arm_abs_f32+0x52>
 800637a:	f100 0410 	add.w	r4, r0, #16
 800637e:	f101 0310 	add.w	r3, r1, #16
 8006382:	4635      	mov	r5, r6
 8006384:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006388:	3d01      	subs	r5, #1
 800638a:	f104 0410 	add.w	r4, r4, #16
 800638e:	f103 0310 	add.w	r3, r3, #16
 8006392:	eef0 7ae7 	vabs.f32	s15, s15
 8006396:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800639a:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800639e:	eef0 7ae7 	vabs.f32	s15, s15
 80063a2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80063a6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80063aa:	eef0 7ae7 	vabs.f32	s15, s15
 80063ae:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80063b2:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80063b6:	eef0 7ae7 	vabs.f32	s15, s15
 80063ba:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80063be:	d1e1      	bne.n	8006384 <arm_abs_f32+0x10>
 80063c0:	0136      	lsls	r6, r6, #4
 80063c2:	4430      	add	r0, r6
 80063c4:	4431      	add	r1, r6
 80063c6:	f012 0203 	ands.w	r2, r2, #3
 80063ca:	d015      	beq.n	80063f8 <arm_abs_f32+0x84>
 80063cc:	edd0 7a00 	vldr	s15, [r0]
 80063d0:	3a01      	subs	r2, #1
 80063d2:	eef0 7ae7 	vabs.f32	s15, s15
 80063d6:	edc1 7a00 	vstr	s15, [r1]
 80063da:	d00d      	beq.n	80063f8 <arm_abs_f32+0x84>
 80063dc:	edd0 7a01 	vldr	s15, [r0, #4]
 80063e0:	2a01      	cmp	r2, #1
 80063e2:	eef0 7ae7 	vabs.f32	s15, s15
 80063e6:	edc1 7a01 	vstr	s15, [r1, #4]
 80063ea:	d005      	beq.n	80063f8 <arm_abs_f32+0x84>
 80063ec:	edd0 7a02 	vldr	s15, [r0, #8]
 80063f0:	eef0 7ae7 	vabs.f32	s15, s15
 80063f4:	edc1 7a02 	vstr	s15, [r1, #8]
 80063f8:	bc70      	pop	{r4, r5, r6}
 80063fa:	4770      	bx	lr

080063fc <memset>:
 80063fc:	4402      	add	r2, r0
 80063fe:	4603      	mov	r3, r0
 8006400:	4293      	cmp	r3, r2
 8006402:	d100      	bne.n	8006406 <memset+0xa>
 8006404:	4770      	bx	lr
 8006406:	f803 1b01 	strb.w	r1, [r3], #1
 800640a:	e7f9      	b.n	8006400 <memset+0x4>

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f000 fe06 	bl	8007030 <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08007238 	.word	0x08007238
 8006448:	08007238 	.word	0x08007238
 800644c:	08007238 	.word	0x08007238
 8006450:	0800723c 	.word	0x0800723c
 8006454:	00000000 	.word	0x00000000

08006458 <sin>:
 8006458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800645a:	eeb0 7b40 	vmov.f64	d7, d0
 800645e:	ee17 3a90 	vmov	r3, s15
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <sin+0x90>)
 8006464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006468:	4293      	cmp	r3, r2
 800646a:	dc07      	bgt.n	800647c <sin+0x24>
 800646c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80064e0 <sin+0x88>
 8006470:	2000      	movs	r0, #0
 8006472:	b005      	add	sp, #20
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	f000 b8a6 	b.w	80065c8 <__kernel_sin>
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <sin+0x94>)
 800647e:	4293      	cmp	r3, r2
 8006480:	dd04      	ble.n	800648c <sin+0x34>
 8006482:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006486:	b005      	add	sp, #20
 8006488:	f85d fb04 	ldr.w	pc, [sp], #4
 800648c:	4668      	mov	r0, sp
 800648e:	f000 f8f3 	bl	8006678 <__ieee754_rem_pio2>
 8006492:	f000 0003 	and.w	r0, r0, #3
 8006496:	2801      	cmp	r0, #1
 8006498:	d00a      	beq.n	80064b0 <sin+0x58>
 800649a:	2802      	cmp	r0, #2
 800649c:	d00f      	beq.n	80064be <sin+0x66>
 800649e:	b9c0      	cbnz	r0, 80064d2 <sin+0x7a>
 80064a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064a4:	ed9d 0b00 	vldr	d0, [sp]
 80064a8:	2001      	movs	r0, #1
 80064aa:	f000 f88d 	bl	80065c8 <__kernel_sin>
 80064ae:	e7ea      	b.n	8006486 <sin+0x2e>
 80064b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064b4:	ed9d 0b00 	vldr	d0, [sp]
 80064b8:	f000 f81a 	bl	80064f0 <__kernel_cos>
 80064bc:	e7e3      	b.n	8006486 <sin+0x2e>
 80064be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064c2:	ed9d 0b00 	vldr	d0, [sp]
 80064c6:	2001      	movs	r0, #1
 80064c8:	f000 f87e 	bl	80065c8 <__kernel_sin>
 80064cc:	eeb1 0b40 	vneg.f64	d0, d0
 80064d0:	e7d9      	b.n	8006486 <sin+0x2e>
 80064d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064d6:	ed9d 0b00 	vldr	d0, [sp]
 80064da:	f000 f809 	bl	80064f0 <__kernel_cos>
 80064de:	e7f5      	b.n	80064cc <sin+0x74>
	...
 80064e8:	3fe921fb 	.word	0x3fe921fb
 80064ec:	7fefffff 	.word	0x7fefffff

080064f0 <__kernel_cos>:
 80064f0:	ee10 1a90 	vmov	r1, s1
 80064f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80064fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006500:	da05      	bge.n	800650e <__kernel_cos+0x1e>
 8006502:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006506:	ee17 3a90 	vmov	r3, s15
 800650a:	2b00      	cmp	r3, #0
 800650c:	d03d      	beq.n	800658a <__kernel_cos+0x9a>
 800650e:	ee20 5b00 	vmul.f64	d5, d0, d0
 8006512:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8006516:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8006590 <__kernel_cos+0xa0>
 800651a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8006598 <__kernel_cos+0xa8>
 800651e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8006522:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80065a0 <__kernel_cos+0xb0>
 8006526:	eea4 7b05 	vfma.f64	d7, d4, d5
 800652a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80065a8 <__kernel_cos+0xb8>
 800652e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8006532:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80065b0 <__kernel_cos+0xc0>
 8006536:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <__kernel_cos+0xd0>)
 8006538:	eea4 7b05 	vfma.f64	d7, d4, d5
 800653c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80065b8 <__kernel_cos+0xc8>
 8006540:	4299      	cmp	r1, r3
 8006542:	eea7 4b05 	vfma.f64	d4, d7, d5
 8006546:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800654a:	ee24 4b05 	vmul.f64	d4, d4, d5
 800654e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006552:	eea5 1b04 	vfma.f64	d1, d5, d4
 8006556:	dc04      	bgt.n	8006562 <__kernel_cos+0x72>
 8006558:	ee37 7b41 	vsub.f64	d7, d7, d1
 800655c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8006560:	4770      	bx	lr
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <__kernel_cos+0xd4>)
 8006564:	4299      	cmp	r1, r3
 8006566:	dc0d      	bgt.n	8006584 <__kernel_cos+0x94>
 8006568:	2200      	movs	r2, #0
 800656a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800656e:	ec43 2b15 	vmov	d5, r2, r3
 8006572:	ee36 0b45 	vsub.f64	d0, d6, d5
 8006576:	ee37 7b45 	vsub.f64	d7, d7, d5
 800657a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800657e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006582:	4770      	bx	lr
 8006584:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8006588:	e7f3      	b.n	8006572 <__kernel_cos+0x82>
 800658a:	eeb0 0b46 	vmov.f64	d0, d6
 800658e:	4770      	bx	lr
 8006590:	be8838d4 	.word	0xbe8838d4
 8006594:	bda8fae9 	.word	0xbda8fae9
 8006598:	bdb4b1c4 	.word	0xbdb4b1c4
 800659c:	3e21ee9e 	.word	0x3e21ee9e
 80065a0:	809c52ad 	.word	0x809c52ad
 80065a4:	be927e4f 	.word	0xbe927e4f
 80065a8:	19cb1590 	.word	0x19cb1590
 80065ac:	3efa01a0 	.word	0x3efa01a0
 80065b0:	16c15177 	.word	0x16c15177
 80065b4:	bf56c16c 	.word	0xbf56c16c
 80065b8:	5555554c 	.word	0x5555554c
 80065bc:	3fa55555 	.word	0x3fa55555
 80065c0:	3fd33332 	.word	0x3fd33332
 80065c4:	3fe90000 	.word	0x3fe90000

080065c8 <__kernel_sin>:
 80065c8:	ee10 3a90 	vmov	r3, s1
 80065cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80065d4:	da04      	bge.n	80065e0 <__kernel_sin+0x18>
 80065d6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80065da:	ee17 3a90 	vmov	r3, s15
 80065de:	b35b      	cbz	r3, 8006638 <__kernel_sin+0x70>
 80065e0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80065e4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80065e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006640 <__kernel_sin+0x78>
 80065ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006648 <__kernel_sin+0x80>
 80065f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80065f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006650 <__kernel_sin+0x88>
 80065f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80065fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006658 <__kernel_sin+0x90>
 8006600:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006604:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006660 <__kernel_sin+0x98>
 8006608:	eea4 7b06 	vfma.f64	d7, d4, d6
 800660c:	b930      	cbnz	r0, 800661c <__kernel_sin+0x54>
 800660e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006668 <__kernel_sin+0xa0>
 8006612:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006616:	eea4 0b05 	vfma.f64	d0, d4, d5
 800661a:	4770      	bx	lr
 800661c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006620:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006624:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006628:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800662c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006670 <__kernel_sin+0xa8>
 8006630:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006634:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	f3af 8000 	nop.w
 8006640:	5acfd57c 	.word	0x5acfd57c
 8006644:	3de5d93a 	.word	0x3de5d93a
 8006648:	8a2b9ceb 	.word	0x8a2b9ceb
 800664c:	be5ae5e6 	.word	0xbe5ae5e6
 8006650:	57b1fe7d 	.word	0x57b1fe7d
 8006654:	3ec71de3 	.word	0x3ec71de3
 8006658:	19c161d5 	.word	0x19c161d5
 800665c:	bf2a01a0 	.word	0xbf2a01a0
 8006660:	1110f8a6 	.word	0x1110f8a6
 8006664:	3f811111 	.word	0x3f811111
 8006668:	55555549 	.word	0x55555549
 800666c:	bfc55555 	.word	0xbfc55555
 8006670:	55555549 	.word	0x55555549
 8006674:	3fc55555 	.word	0x3fc55555

08006678 <__ieee754_rem_pio2>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	eeb0 7b40 	vmov.f64	d7, d0
 800667e:	ee17 5a90 	vmov	r5, s15
 8006682:	4b99      	ldr	r3, [pc, #612]	; (80068e8 <__ieee754_rem_pio2+0x270>)
 8006684:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006688:	429e      	cmp	r6, r3
 800668a:	b088      	sub	sp, #32
 800668c:	4604      	mov	r4, r0
 800668e:	dc07      	bgt.n	80066a0 <__ieee754_rem_pio2+0x28>
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	ed84 0b00 	vstr	d0, [r4]
 8006698:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800669c:	2000      	movs	r0, #0
 800669e:	e01b      	b.n	80066d8 <__ieee754_rem_pio2+0x60>
 80066a0:	4b92      	ldr	r3, [pc, #584]	; (80068ec <__ieee754_rem_pio2+0x274>)
 80066a2:	429e      	cmp	r6, r3
 80066a4:	dc3b      	bgt.n	800671e <__ieee754_rem_pio2+0xa6>
 80066a6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80068a8 <__ieee754_rem_pio2+0x230>
 80066b0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80066b4:	dd19      	ble.n	80066ea <__ieee754_rem_pio2+0x72>
 80066b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80066ba:	429e      	cmp	r6, r3
 80066bc:	d00e      	beq.n	80066dc <__ieee754_rem_pio2+0x64>
 80066be:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80068b0 <__ieee754_rem_pio2+0x238>
 80066c2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80066c6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80066ca:	ed84 5b00 	vstr	d5, [r4]
 80066ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80066d6:	2001      	movs	r0, #1
 80066d8:	b008      	add	sp, #32
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80068b8 <__ieee754_rem_pio2+0x240>
 80066e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80068c0 <__ieee754_rem_pio2+0x248>
 80066e8:	e7eb      	b.n	80066c2 <__ieee754_rem_pio2+0x4a>
 80066ea:	429e      	cmp	r6, r3
 80066ec:	ee30 7b06 	vadd.f64	d7, d0, d6
 80066f0:	d00e      	beq.n	8006710 <__ieee754_rem_pio2+0x98>
 80066f2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80068b0 <__ieee754_rem_pio2+0x238>
 80066f6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80066fa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80066fe:	ed84 5b00 	vstr	d5, [r4]
 8006702:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	ed84 7b02 	vstr	d7, [r4, #8]
 800670e:	e7e3      	b.n	80066d8 <__ieee754_rem_pio2+0x60>
 8006710:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80068b8 <__ieee754_rem_pio2+0x240>
 8006714:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006718:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80068c0 <__ieee754_rem_pio2+0x248>
 800671c:	e7eb      	b.n	80066f6 <__ieee754_rem_pio2+0x7e>
 800671e:	4b74      	ldr	r3, [pc, #464]	; (80068f0 <__ieee754_rem_pio2+0x278>)
 8006720:	429e      	cmp	r6, r3
 8006722:	dc70      	bgt.n	8006806 <__ieee754_rem_pio2+0x18e>
 8006724:	f000 f8ec 	bl	8006900 <fabs>
 8006728:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800672c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80068c8 <__ieee754_rem_pio2+0x250>
 8006730:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006734:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006738:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800673c:	ee17 0a90 	vmov	r0, s15
 8006740:	eeb1 4b45 	vneg.f64	d4, d5
 8006744:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80068a8 <__ieee754_rem_pio2+0x230>
 8006748:	eea5 0b47 	vfms.f64	d0, d5, d7
 800674c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80068b0 <__ieee754_rem_pio2+0x238>
 8006750:	281f      	cmp	r0, #31
 8006752:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006756:	ee30 6b47 	vsub.f64	d6, d0, d7
 800675a:	dc08      	bgt.n	800676e <__ieee754_rem_pio2+0xf6>
 800675c:	4b65      	ldr	r3, [pc, #404]	; (80068f4 <__ieee754_rem_pio2+0x27c>)
 800675e:	1e42      	subs	r2, r0, #1
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	42b3      	cmp	r3, r6
 8006766:	d002      	beq.n	800676e <__ieee754_rem_pio2+0xf6>
 8006768:	ed84 6b00 	vstr	d6, [r4]
 800676c:	e024      	b.n	80067b8 <__ieee754_rem_pio2+0x140>
 800676e:	ee16 3a90 	vmov	r3, s13
 8006772:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006776:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800677a:	2b10      	cmp	r3, #16
 800677c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006780:	ddf2      	ble.n	8006768 <__ieee754_rem_pio2+0xf0>
 8006782:	eeb0 6b40 	vmov.f64	d6, d0
 8006786:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80068b8 <__ieee754_rem_pio2+0x240>
 800678a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800678e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006792:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006796:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80068c0 <__ieee754_rem_pio2+0x248>
 800679a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800679e:	ee36 3b47 	vsub.f64	d3, d6, d7
 80067a2:	ee13 3a90 	vmov	r3, s7
 80067a6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b31      	cmp	r3, #49	; 0x31
 80067ae:	dc17      	bgt.n	80067e0 <__ieee754_rem_pio2+0x168>
 80067b0:	eeb0 0b46 	vmov.f64	d0, d6
 80067b4:	ed84 3b00 	vstr	d3, [r4]
 80067b8:	ed94 6b00 	vldr	d6, [r4]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	ee30 0b46 	vsub.f64	d0, d0, d6
 80067c2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80067c6:	ed84 0b02 	vstr	d0, [r4, #8]
 80067ca:	da85      	bge.n	80066d8 <__ieee754_rem_pio2+0x60>
 80067cc:	eeb1 6b46 	vneg.f64	d6, d6
 80067d0:	eeb1 0b40 	vneg.f64	d0, d0
 80067d4:	ed84 6b00 	vstr	d6, [r4]
 80067d8:	ed84 0b02 	vstr	d0, [r4, #8]
 80067dc:	4240      	negs	r0, r0
 80067de:	e77b      	b.n	80066d8 <__ieee754_rem_pio2+0x60>
 80067e0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80068d0 <__ieee754_rem_pio2+0x258>
 80067e4:	eeb0 0b46 	vmov.f64	d0, d6
 80067e8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80067ec:	ee36 6b40 	vsub.f64	d6, d6, d0
 80067f0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80067f4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80068d8 <__ieee754_rem_pio2+0x260>
 80067f8:	eeb0 7b46 	vmov.f64	d7, d6
 80067fc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006800:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006804:	e7b0      	b.n	8006768 <__ieee754_rem_pio2+0xf0>
 8006806:	4b3c      	ldr	r3, [pc, #240]	; (80068f8 <__ieee754_rem_pio2+0x280>)
 8006808:	429e      	cmp	r6, r3
 800680a:	dd06      	ble.n	800681a <__ieee754_rem_pio2+0x1a2>
 800680c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006810:	ed80 7b02 	vstr	d7, [r0, #8]
 8006814:	ed80 7b00 	vstr	d7, [r0]
 8006818:	e740      	b.n	800669c <__ieee754_rem_pio2+0x24>
 800681a:	1532      	asrs	r2, r6, #20
 800681c:	ee10 0a10 	vmov	r0, s0
 8006820:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006824:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006828:	ec41 0b17 	vmov	d7, r0, r1
 800682c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006830:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80068e0 <__ieee754_rem_pio2+0x268>
 8006834:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006838:	ee37 7b46 	vsub.f64	d7, d7, d6
 800683c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006840:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006844:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006848:	a808      	add	r0, sp, #32
 800684a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800684e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006852:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006856:	ee27 7b05 	vmul.f64	d7, d7, d5
 800685a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800685e:	2103      	movs	r1, #3
 8006860:	ed30 7b02 	vldmdb	r0!, {d7}
 8006864:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686c:	460b      	mov	r3, r1
 800686e:	f101 31ff 	add.w	r1, r1, #4294967295
 8006872:	d0f5      	beq.n	8006860 <__ieee754_rem_pio2+0x1e8>
 8006874:	4921      	ldr	r1, [pc, #132]	; (80068fc <__ieee754_rem_pio2+0x284>)
 8006876:	9101      	str	r1, [sp, #4]
 8006878:	2102      	movs	r1, #2
 800687a:	9100      	str	r1, [sp, #0]
 800687c:	a802      	add	r0, sp, #8
 800687e:	4621      	mov	r1, r4
 8006880:	f000 f84a 	bl	8006918 <__kernel_rem_pio2>
 8006884:	2d00      	cmp	r5, #0
 8006886:	f6bf af27 	bge.w	80066d8 <__ieee754_rem_pio2+0x60>
 800688a:	ed94 7b00 	vldr	d7, [r4]
 800688e:	eeb1 7b47 	vneg.f64	d7, d7
 8006892:	ed84 7b00 	vstr	d7, [r4]
 8006896:	ed94 7b02 	vldr	d7, [r4, #8]
 800689a:	eeb1 7b47 	vneg.f64	d7, d7
 800689e:	ed84 7b02 	vstr	d7, [r4, #8]
 80068a2:	e79b      	b.n	80067dc <__ieee754_rem_pio2+0x164>
 80068a4:	f3af 8000 	nop.w
 80068a8:	54400000 	.word	0x54400000
 80068ac:	3ff921fb 	.word	0x3ff921fb
 80068b0:	1a626331 	.word	0x1a626331
 80068b4:	3dd0b461 	.word	0x3dd0b461
 80068b8:	1a600000 	.word	0x1a600000
 80068bc:	3dd0b461 	.word	0x3dd0b461
 80068c0:	2e037073 	.word	0x2e037073
 80068c4:	3ba3198a 	.word	0x3ba3198a
 80068c8:	6dc9c883 	.word	0x6dc9c883
 80068cc:	3fe45f30 	.word	0x3fe45f30
 80068d0:	2e000000 	.word	0x2e000000
 80068d4:	3ba3198a 	.word	0x3ba3198a
 80068d8:	252049c1 	.word	0x252049c1
 80068dc:	397b839a 	.word	0x397b839a
 80068e0:	00000000 	.word	0x00000000
 80068e4:	41700000 	.word	0x41700000
 80068e8:	3fe921fb 	.word	0x3fe921fb
 80068ec:	4002d97b 	.word	0x4002d97b
 80068f0:	413921fb 	.word	0x413921fb
 80068f4:	08007060 	.word	0x08007060
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	080070e0 	.word	0x080070e0

08006900 <fabs>:
 8006900:	ec51 0b10 	vmov	r0, r1, d0
 8006904:	ee10 2a10 	vmov	r2, s0
 8006908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800690c:	ec43 2b10 	vmov	d0, r2, r3
 8006910:	4770      	bx	lr
 8006912:	0000      	movs	r0, r0
 8006914:	0000      	movs	r0, r0
	...

08006918 <__kernel_rem_pio2>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b06 	vpush	{d8-d10}
 8006920:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006924:	460f      	mov	r7, r1
 8006926:	9002      	str	r0, [sp, #8]
 8006928:	49c3      	ldr	r1, [pc, #780]	; (8006c38 <__kernel_rem_pio2+0x320>)
 800692a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8006932:	9901      	ldr	r1, [sp, #4]
 8006934:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006936:	f112 0f14 	cmn.w	r2, #20
 800693a:	bfa8      	it	ge
 800693c:	1ed0      	subge	r0, r2, #3
 800693e:	f101 3aff 	add.w	sl, r1, #4294967295
 8006942:	bfaa      	itet	ge
 8006944:	2418      	movge	r4, #24
 8006946:	2000      	movlt	r0, #0
 8006948:	fb90 f0f4 	sdivge	r0, r0, r4
 800694c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8006c20 <__kernel_rem_pio2+0x308>
 8006950:	f06f 0417 	mvn.w	r4, #23
 8006954:	fb00 4404 	mla	r4, r0, r4, r4
 8006958:	eba0 060a 	sub.w	r6, r0, sl
 800695c:	4414      	add	r4, r2
 800695e:	eb09 0c0a 	add.w	ip, r9, sl
 8006962:	ad1a      	add	r5, sp, #104	; 0x68
 8006964:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8006968:	2200      	movs	r2, #0
 800696a:	4562      	cmp	r2, ip
 800696c:	dd10      	ble.n	8006990 <__kernel_rem_pio2+0x78>
 800696e:	9a01      	ldr	r2, [sp, #4]
 8006970:	a91a      	add	r1, sp, #104	; 0x68
 8006972:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006976:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800697a:	f04f 0c00 	mov.w	ip, #0
 800697e:	45cc      	cmp	ip, r9
 8006980:	dc26      	bgt.n	80069d0 <__kernel_rem_pio2+0xb8>
 8006982:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8006c20 <__kernel_rem_pio2+0x308>
 8006986:	f8dd e008 	ldr.w	lr, [sp, #8]
 800698a:	4616      	mov	r6, r2
 800698c:	2500      	movs	r5, #0
 800698e:	e015      	b.n	80069bc <__kernel_rem_pio2+0xa4>
 8006990:	42d6      	cmn	r6, r2
 8006992:	d409      	bmi.n	80069a8 <__kernel_rem_pio2+0x90>
 8006994:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8006998:	ee07 1a90 	vmov	s15, r1
 800699c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069a0:	eca5 7b02 	vstmia	r5!, {d7}
 80069a4:	3201      	adds	r2, #1
 80069a6:	e7e0      	b.n	800696a <__kernel_rem_pio2+0x52>
 80069a8:	eeb0 7b46 	vmov.f64	d7, d6
 80069ac:	e7f8      	b.n	80069a0 <__kernel_rem_pio2+0x88>
 80069ae:	ecbe 5b02 	vldmia	lr!, {d5}
 80069b2:	ed96 6b00 	vldr	d6, [r6]
 80069b6:	3501      	adds	r5, #1
 80069b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80069bc:	4555      	cmp	r5, sl
 80069be:	f1a6 0608 	sub.w	r6, r6, #8
 80069c2:	ddf4      	ble.n	80069ae <__kernel_rem_pio2+0x96>
 80069c4:	eca8 7b02 	vstmia	r8!, {d7}
 80069c8:	f10c 0c01 	add.w	ip, ip, #1
 80069cc:	3208      	adds	r2, #8
 80069ce:	e7d6      	b.n	800697e <__kernel_rem_pio2+0x66>
 80069d0:	aa06      	add	r2, sp, #24
 80069d2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8006c28 <__kernel_rem_pio2+0x310>
 80069d6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8006c30 <__kernel_rem_pio2+0x318>
 80069da:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80069de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80069e2:	9204      	str	r2, [sp, #16]
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	464d      	mov	r5, r9
 80069e8:	00eb      	lsls	r3, r5, #3
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	ab92      	add	r3, sp, #584	; 0x248
 80069ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80069f2:	f10d 0b18 	add.w	fp, sp, #24
 80069f6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80069f8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80069fc:	465e      	mov	r6, fp
 80069fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006a02:	4628      	mov	r0, r5
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f1a2 0208 	sub.w	r2, r2, #8
 8006a0a:	dc48      	bgt.n	8006a9e <__kernel_rem_pio2+0x186>
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fa17 	bl	8006e40 <scalbn>
 8006a12:	eeb0 8b40 	vmov.f64	d8, d0
 8006a16:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006a1a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006a1e:	f000 fa8f 	bl	8006f40 <floor>
 8006a22:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006a26:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006a2a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006a2e:	2c00      	cmp	r4, #0
 8006a30:	ee17 8a90 	vmov	r8, s15
 8006a34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a38:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006a3c:	dd41      	ble.n	8006ac2 <__kernel_rem_pio2+0x1aa>
 8006a3e:	1e68      	subs	r0, r5, #1
 8006a40:	ab06      	add	r3, sp, #24
 8006a42:	f1c4 0c18 	rsb	ip, r4, #24
 8006a46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006a4a:	fa46 f20c 	asr.w	r2, r6, ip
 8006a4e:	4490      	add	r8, r2
 8006a50:	fa02 f20c 	lsl.w	r2, r2, ip
 8006a54:	1ab6      	subs	r6, r6, r2
 8006a56:	f1c4 0217 	rsb	r2, r4, #23
 8006a5a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006a5e:	4116      	asrs	r6, r2
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	dd3d      	ble.n	8006ae0 <__kernel_rem_pio2+0x1c8>
 8006a64:	f04f 0c00 	mov.w	ip, #0
 8006a68:	f108 0801 	add.w	r8, r8, #1
 8006a6c:	4660      	mov	r0, ip
 8006a6e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006a72:	4565      	cmp	r5, ip
 8006a74:	dc6a      	bgt.n	8006b4c <__kernel_rem_pio2+0x234>
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	dd04      	ble.n	8006a84 <__kernel_rem_pio2+0x16c>
 8006a7a:	2c01      	cmp	r4, #1
 8006a7c:	d07b      	beq.n	8006b76 <__kernel_rem_pio2+0x25e>
 8006a7e:	2c02      	cmp	r4, #2
 8006a80:	f000 8083 	beq.w	8006b8a <__kernel_rem_pio2+0x272>
 8006a84:	2e02      	cmp	r6, #2
 8006a86:	d12b      	bne.n	8006ae0 <__kernel_rem_pio2+0x1c8>
 8006a88:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006a8c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8006a90:	b330      	cbz	r0, 8006ae0 <__kernel_rem_pio2+0x1c8>
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 f9d4 	bl	8006e40 <scalbn>
 8006a98:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006a9c:	e020      	b.n	8006ae0 <__kernel_rem_pio2+0x1c8>
 8006a9e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006aa2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006aa6:	3801      	subs	r0, #1
 8006aa8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006aac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006ab0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006ab4:	eca6 0a01 	vstmia	r6!, {s0}
 8006ab8:	ed92 0b00 	vldr	d0, [r2]
 8006abc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006ac0:	e7a0      	b.n	8006a04 <__kernel_rem_pio2+0xec>
 8006ac2:	d105      	bne.n	8006ad0 <__kernel_rem_pio2+0x1b8>
 8006ac4:	1e6a      	subs	r2, r5, #1
 8006ac6:	ab06      	add	r3, sp, #24
 8006ac8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8006acc:	15f6      	asrs	r6, r6, #23
 8006ace:	e7c7      	b.n	8006a60 <__kernel_rem_pio2+0x148>
 8006ad0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006ad4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006adc:	da34      	bge.n	8006b48 <__kernel_rem_pio2+0x230>
 8006ade:	2600      	movs	r6, #0
 8006ae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae8:	f040 80aa 	bne.w	8006c40 <__kernel_rem_pio2+0x328>
 8006aec:	f105 3bff 	add.w	fp, r5, #4294967295
 8006af0:	4658      	mov	r0, fp
 8006af2:	2200      	movs	r2, #0
 8006af4:	4548      	cmp	r0, r9
 8006af6:	da50      	bge.n	8006b9a <__kernel_rem_pio2+0x282>
 8006af8:	2a00      	cmp	r2, #0
 8006afa:	d06b      	beq.n	8006bd4 <__kernel_rem_pio2+0x2bc>
 8006afc:	ab06      	add	r3, sp, #24
 8006afe:	3c18      	subs	r4, #24
 8006b00:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8087 	beq.w	8006c18 <__kernel_rem_pio2+0x300>
 8006b0a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 f996 	bl	8006e40 <scalbn>
 8006b14:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8006c28 <__kernel_rem_pio2+0x310>
 8006b18:	f10b 0201 	add.w	r2, fp, #1
 8006b1c:	a96a      	add	r1, sp, #424	; 0x1a8
 8006b1e:	00d3      	lsls	r3, r2, #3
 8006b20:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006b24:	465a      	mov	r2, fp
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	f280 80b8 	bge.w	8006c9c <__kernel_rem_pio2+0x384>
 8006b2c:	465a      	mov	r2, fp
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	f2c0 80d6 	blt.w	8006ce0 <__kernel_rem_pio2+0x3c8>
 8006b34:	a96a      	add	r1, sp, #424	; 0x1a8
 8006b36:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8006b3a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8006c20 <__kernel_rem_pio2+0x308>
 8006b3e:	4d3f      	ldr	r5, [pc, #252]	; (8006c3c <__kernel_rem_pio2+0x324>)
 8006b40:	2000      	movs	r0, #0
 8006b42:	ebab 0102 	sub.w	r1, fp, r2
 8006b46:	e0c0      	b.n	8006cca <__kernel_rem_pio2+0x3b2>
 8006b48:	2602      	movs	r6, #2
 8006b4a:	e78b      	b.n	8006a64 <__kernel_rem_pio2+0x14c>
 8006b4c:	f8db 2000 	ldr.w	r2, [fp]
 8006b50:	b958      	cbnz	r0, 8006b6a <__kernel_rem_pio2+0x252>
 8006b52:	b122      	cbz	r2, 8006b5e <__kernel_rem_pio2+0x246>
 8006b54:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006b58:	f8cb 2000 	str.w	r2, [fp]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f10c 0c01 	add.w	ip, ip, #1
 8006b62:	f10b 0b04 	add.w	fp, fp, #4
 8006b66:	4610      	mov	r0, r2
 8006b68:	e783      	b.n	8006a72 <__kernel_rem_pio2+0x15a>
 8006b6a:	ebae 0202 	sub.w	r2, lr, r2
 8006b6e:	f8cb 2000 	str.w	r2, [fp]
 8006b72:	4602      	mov	r2, r0
 8006b74:	e7f3      	b.n	8006b5e <__kernel_rem_pio2+0x246>
 8006b76:	f105 3cff 	add.w	ip, r5, #4294967295
 8006b7a:	ab06      	add	r3, sp, #24
 8006b7c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006b80:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006b84:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8006b88:	e77c      	b.n	8006a84 <__kernel_rem_pio2+0x16c>
 8006b8a:	f105 3cff 	add.w	ip, r5, #4294967295
 8006b8e:	ab06      	add	r3, sp, #24
 8006b90:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006b94:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8006b98:	e7f4      	b.n	8006b84 <__kernel_rem_pio2+0x26c>
 8006b9a:	ab06      	add	r3, sp, #24
 8006b9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006ba0:	3801      	subs	r0, #1
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	e7a6      	b.n	8006af4 <__kernel_rem_pio2+0x1dc>
 8006ba6:	3201      	adds	r2, #1
 8006ba8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006bac:	2e00      	cmp	r6, #0
 8006bae:	d0fa      	beq.n	8006ba6 <__kernel_rem_pio2+0x28e>
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006bb6:	eb0d 0003 	add.w	r0, sp, r3
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	18ee      	adds	r6, r5, r3
 8006bbe:	ab1a      	add	r3, sp, #104	; 0x68
 8006bc0:	f105 0c01 	add.w	ip, r5, #1
 8006bc4:	3898      	subs	r0, #152	; 0x98
 8006bc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006bca:	442a      	add	r2, r5
 8006bcc:	4562      	cmp	r2, ip
 8006bce:	da04      	bge.n	8006bda <__kernel_rem_pio2+0x2c2>
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	e709      	b.n	80069e8 <__kernel_rem_pio2+0xd0>
 8006bd4:	9804      	ldr	r0, [sp, #16]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	e7e6      	b.n	8006ba8 <__kernel_rem_pio2+0x290>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006be0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bee:	2500      	movs	r5, #0
 8006bf0:	eca6 7b02 	vstmia	r6!, {d7}
 8006bf4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8006c20 <__kernel_rem_pio2+0x308>
 8006bf8:	46b0      	mov	r8, r6
 8006bfa:	4555      	cmp	r5, sl
 8006bfc:	dd04      	ble.n	8006c08 <__kernel_rem_pio2+0x2f0>
 8006bfe:	eca0 7b02 	vstmia	r0!, {d7}
 8006c02:	f10c 0c01 	add.w	ip, ip, #1
 8006c06:	e7e1      	b.n	8006bcc <__kernel_rem_pio2+0x2b4>
 8006c08:	ecbe 5b02 	vldmia	lr!, {d5}
 8006c0c:	ed38 6b02 	vldmdb	r8!, {d6}
 8006c10:	3501      	adds	r5, #1
 8006c12:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006c16:	e7f0      	b.n	8006bfa <__kernel_rem_pio2+0x2e2>
 8006c18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c1c:	e76e      	b.n	8006afc <__kernel_rem_pio2+0x1e4>
 8006c1e:	bf00      	nop
	...
 8006c2c:	3e700000 	.word	0x3e700000
 8006c30:	00000000 	.word	0x00000000
 8006c34:	41700000 	.word	0x41700000
 8006c38:	08007228 	.word	0x08007228
 8006c3c:	080071e8 	.word	0x080071e8
 8006c40:	4260      	negs	r0, r4
 8006c42:	eeb0 0b48 	vmov.f64	d0, d8
 8006c46:	f000 f8fb 	bl	8006e40 <scalbn>
 8006c4a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006e28 <__kernel_rem_pio2+0x510>
 8006c4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	db18      	blt.n	8006c8a <__kernel_rem_pio2+0x372>
 8006c58:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006e30 <__kernel_rem_pio2+0x518>
 8006c5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006c60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006c64:	aa06      	add	r2, sp, #24
 8006c66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006c6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006c6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006c72:	f105 0b01 	add.w	fp, r5, #1
 8006c76:	ee10 3a10 	vmov	r3, s0
 8006c7a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006c7e:	ee17 3a10 	vmov	r3, s14
 8006c82:	3418      	adds	r4, #24
 8006c84:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8006c88:	e73f      	b.n	8006b0a <__kernel_rem_pio2+0x1f2>
 8006c8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006c8e:	aa06      	add	r2, sp, #24
 8006c90:	ee10 3a10 	vmov	r3, s0
 8006c94:	46ab      	mov	fp, r5
 8006c96:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006c9a:	e736      	b.n	8006b0a <__kernel_rem_pio2+0x1f2>
 8006c9c:	a806      	add	r0, sp, #24
 8006c9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006ca2:	9001      	str	r0, [sp, #4]
 8006ca4:	ee07 0a90 	vmov	s15, r0
 8006ca8:	3a01      	subs	r2, #1
 8006caa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cae:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006cb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006cb6:	ed21 7b02 	vstmdb	r1!, {d7}
 8006cba:	e734      	b.n	8006b26 <__kernel_rem_pio2+0x20e>
 8006cbc:	ecb5 5b02 	vldmia	r5!, {d5}
 8006cc0:	ecb4 6b02 	vldmia	r4!, {d6}
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006cca:	4548      	cmp	r0, r9
 8006ccc:	dc01      	bgt.n	8006cd2 <__kernel_rem_pio2+0x3ba>
 8006cce:	4288      	cmp	r0, r1
 8006cd0:	ddf4      	ble.n	8006cbc <__kernel_rem_pio2+0x3a4>
 8006cd2:	a842      	add	r0, sp, #264	; 0x108
 8006cd4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006cd8:	ed81 7b00 	vstr	d7, [r1]
 8006cdc:	3a01      	subs	r2, #1
 8006cde:	e726      	b.n	8006b2e <__kernel_rem_pio2+0x216>
 8006ce0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006ce2:	2a02      	cmp	r2, #2
 8006ce4:	dc0a      	bgt.n	8006cfc <__kernel_rem_pio2+0x3e4>
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	dc2e      	bgt.n	8006d48 <__kernel_rem_pio2+0x430>
 8006cea:	d047      	beq.n	8006d7c <__kernel_rem_pio2+0x464>
 8006cec:	f008 0007 	and.w	r0, r8, #7
 8006cf0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006cf4:	ecbd 8b06 	vpop	{d8-d10}
 8006cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006cfe:	2a03      	cmp	r2, #3
 8006d00:	d1f4      	bne.n	8006cec <__kernel_rem_pio2+0x3d4>
 8006d02:	a942      	add	r1, sp, #264	; 0x108
 8006d04:	f1a3 0208 	sub.w	r2, r3, #8
 8006d08:	440a      	add	r2, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f1a1 0108 	sub.w	r1, r1, #8
 8006d14:	dc55      	bgt.n	8006dc2 <__kernel_rem_pio2+0x4aa>
 8006d16:	4659      	mov	r1, fp
 8006d18:	2901      	cmp	r1, #1
 8006d1a:	f1a2 0208 	sub.w	r2, r2, #8
 8006d1e:	dc60      	bgt.n	8006de2 <__kernel_rem_pio2+0x4ca>
 8006d20:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8006e38 <__kernel_rem_pio2+0x520>
 8006d24:	aa42      	add	r2, sp, #264	; 0x108
 8006d26:	4413      	add	r3, r2
 8006d28:	f1bb 0f01 	cmp.w	fp, #1
 8006d2c:	dc69      	bgt.n	8006e02 <__kernel_rem_pio2+0x4ea>
 8006d2e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006d32:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	d16a      	bne.n	8006e10 <__kernel_rem_pio2+0x4f8>
 8006d3a:	ed87 5b00 	vstr	d5, [r7]
 8006d3e:	ed87 6b02 	vstr	d6, [r7, #8]
 8006d42:	ed87 7b04 	vstr	d7, [r7, #16]
 8006d46:	e7d1      	b.n	8006cec <__kernel_rem_pio2+0x3d4>
 8006d48:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8006e38 <__kernel_rem_pio2+0x520>
 8006d4c:	aa42      	add	r2, sp, #264	; 0x108
 8006d4e:	4413      	add	r3, r2
 8006d50:	465a      	mov	r2, fp
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	da26      	bge.n	8006da4 <__kernel_rem_pio2+0x48c>
 8006d56:	b35e      	cbz	r6, 8006db0 <__kernel_rem_pio2+0x498>
 8006d58:	eeb1 7b46 	vneg.f64	d7, d6
 8006d5c:	ed87 7b00 	vstr	d7, [r7]
 8006d60:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006d64:	aa44      	add	r2, sp, #272	; 0x110
 8006d66:	2301      	movs	r3, #1
 8006d68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006d6c:	459b      	cmp	fp, r3
 8006d6e:	da22      	bge.n	8006db6 <__kernel_rem_pio2+0x49e>
 8006d70:	b10e      	cbz	r6, 8006d76 <__kernel_rem_pio2+0x45e>
 8006d72:	eeb1 7b47 	vneg.f64	d7, d7
 8006d76:	ed87 7b02 	vstr	d7, [r7, #8]
 8006d7a:	e7b7      	b.n	8006cec <__kernel_rem_pio2+0x3d4>
 8006d7c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006e38 <__kernel_rem_pio2+0x520>
 8006d80:	aa42      	add	r2, sp, #264	; 0x108
 8006d82:	4413      	add	r3, r2
 8006d84:	f1bb 0f00 	cmp.w	fp, #0
 8006d88:	da05      	bge.n	8006d96 <__kernel_rem_pio2+0x47e>
 8006d8a:	b10e      	cbz	r6, 8006d90 <__kernel_rem_pio2+0x478>
 8006d8c:	eeb1 7b47 	vneg.f64	d7, d7
 8006d90:	ed87 7b00 	vstr	d7, [r7]
 8006d94:	e7aa      	b.n	8006cec <__kernel_rem_pio2+0x3d4>
 8006d96:	ed33 6b02 	vldmdb	r3!, {d6}
 8006d9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006da2:	e7ef      	b.n	8006d84 <__kernel_rem_pio2+0x46c>
 8006da4:	ed33 7b02 	vldmdb	r3!, {d7}
 8006da8:	3a01      	subs	r2, #1
 8006daa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dae:	e7d0      	b.n	8006d52 <__kernel_rem_pio2+0x43a>
 8006db0:	eeb0 7b46 	vmov.f64	d7, d6
 8006db4:	e7d2      	b.n	8006d5c <__kernel_rem_pio2+0x444>
 8006db6:	ecb2 6b02 	vldmia	r2!, {d6}
 8006dba:	3301      	adds	r3, #1
 8006dbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dc0:	e7d4      	b.n	8006d6c <__kernel_rem_pio2+0x454>
 8006dc2:	ed91 7b00 	vldr	d7, [r1]
 8006dc6:	ed91 5b02 	vldr	d5, [r1, #8]
 8006dca:	3801      	subs	r0, #1
 8006dcc:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006dd4:	ed81 6b00 	vstr	d6, [r1]
 8006dd8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006ddc:	ed81 7b02 	vstr	d7, [r1, #8]
 8006de0:	e795      	b.n	8006d0e <__kernel_rem_pio2+0x3f6>
 8006de2:	ed92 7b00 	vldr	d7, [r2]
 8006de6:	ed92 5b02 	vldr	d5, [r2, #8]
 8006dea:	3901      	subs	r1, #1
 8006dec:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006df0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006df4:	ed82 6b00 	vstr	d6, [r2]
 8006df8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006dfc:	ed82 7b02 	vstr	d7, [r2, #8]
 8006e00:	e78a      	b.n	8006d18 <__kernel_rem_pio2+0x400>
 8006e02:	ed33 6b02 	vldmdb	r3!, {d6}
 8006e06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e0e:	e78b      	b.n	8006d28 <__kernel_rem_pio2+0x410>
 8006e10:	eeb1 5b45 	vneg.f64	d5, d5
 8006e14:	eeb1 6b46 	vneg.f64	d6, d6
 8006e18:	ed87 5b00 	vstr	d5, [r7]
 8006e1c:	eeb1 7b47 	vneg.f64	d7, d7
 8006e20:	ed87 6b02 	vstr	d6, [r7, #8]
 8006e24:	e78d      	b.n	8006d42 <__kernel_rem_pio2+0x42a>
 8006e26:	bf00      	nop
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	41700000 	.word	0x41700000
 8006e30:	00000000 	.word	0x00000000
 8006e34:	3e700000 	.word	0x3e700000
	...

08006e40 <scalbn>:
 8006e40:	ee10 1a90 	vmov	r1, s1
 8006e44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e48:	b98b      	cbnz	r3, 8006e6e <scalbn+0x2e>
 8006e4a:	ee10 3a10 	vmov	r3, s0
 8006e4e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006e52:	4319      	orrs	r1, r3
 8006e54:	d00a      	beq.n	8006e6c <scalbn+0x2c>
 8006e56:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8006f08 <scalbn+0xc8>
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <scalbn+0xf8>)
 8006e5c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006e60:	4298      	cmp	r0, r3
 8006e62:	da0b      	bge.n	8006e7c <scalbn+0x3c>
 8006e64:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8006f10 <scalbn+0xd0>
 8006e68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006e6c:	4770      	bx	lr
 8006e6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d107      	bne.n	8006e86 <scalbn+0x46>
 8006e76:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006e7a:	4770      	bx	lr
 8006e7c:	ee10 1a90 	vmov	r1, s1
 8006e80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e84:	3b36      	subs	r3, #54	; 0x36
 8006e86:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006e8a:	4290      	cmp	r0, r2
 8006e8c:	dd0d      	ble.n	8006eaa <scalbn+0x6a>
 8006e8e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8006f18 <scalbn+0xd8>
 8006e92:	ee10 3a90 	vmov	r3, s1
 8006e96:	eeb0 6b47 	vmov.f64	d6, d7
 8006e9a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8006f20 <scalbn+0xe0>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8006ea4:	ee27 0b06 	vmul.f64	d0, d7, d6
 8006ea8:	4770      	bx	lr
 8006eaa:	4418      	add	r0, r3
 8006eac:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	dcec      	bgt.n	8006e8e <scalbn+0x4e>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	dd0a      	ble.n	8006ece <scalbn+0x8e>
 8006eb8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006ebc:	ec53 2b10 	vmov	r2, r3, d0
 8006ec0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006ec4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8006ec8:	ec43 2b10 	vmov	d0, r2, r3
 8006ecc:	4770      	bx	lr
 8006ece:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8006ed2:	da09      	bge.n	8006ee8 <scalbn+0xa8>
 8006ed4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006f10 <scalbn+0xd0>
 8006ed8:	ee10 3a90 	vmov	r3, s1
 8006edc:	eeb0 6b47 	vmov.f64	d6, d7
 8006ee0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8006f28 <scalbn+0xe8>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	e7db      	b.n	8006ea0 <scalbn+0x60>
 8006ee8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006eec:	ec53 2b10 	vmov	r2, r3, d0
 8006ef0:	3036      	adds	r0, #54	; 0x36
 8006ef2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006ef6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8006efa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8006f30 <scalbn+0xf0>
 8006efe:	ec43 2b10 	vmov	d0, r2, r3
 8006f02:	e7b1      	b.n	8006e68 <scalbn+0x28>
 8006f04:	f3af 8000 	nop.w
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	43500000 	.word	0x43500000
 8006f10:	c2f8f359 	.word	0xc2f8f359
 8006f14:	01a56e1f 	.word	0x01a56e1f
 8006f18:	8800759c 	.word	0x8800759c
 8006f1c:	7e37e43c 	.word	0x7e37e43c
 8006f20:	8800759c 	.word	0x8800759c
 8006f24:	fe37e43c 	.word	0xfe37e43c
 8006f28:	c2f8f359 	.word	0xc2f8f359
 8006f2c:	81a56e1f 	.word	0x81a56e1f
 8006f30:	00000000 	.word	0x00000000
 8006f34:	3c900000 	.word	0x3c900000
 8006f38:	ffff3cb0 	.word	0xffff3cb0
 8006f3c:	00000000 	.word	0x00000000

08006f40 <floor>:
 8006f40:	ee10 1a90 	vmov	r1, s1
 8006f44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f48:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006f4c:	2b13      	cmp	r3, #19
 8006f4e:	b530      	push	{r4, r5, lr}
 8006f50:	ee10 0a10 	vmov	r0, s0
 8006f54:	ee10 5a10 	vmov	r5, s0
 8006f58:	dc31      	bgt.n	8006fbe <floor+0x7e>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da15      	bge.n	8006f8a <floor+0x4a>
 8006f5e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007020 <floor+0xe0>
 8006f62:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006f66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6e:	dd07      	ble.n	8006f80 <floor+0x40>
 8006f70:	2900      	cmp	r1, #0
 8006f72:	da4e      	bge.n	8007012 <floor+0xd2>
 8006f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f78:	4308      	orrs	r0, r1
 8006f7a:	d04d      	beq.n	8007018 <floor+0xd8>
 8006f7c:	492a      	ldr	r1, [pc, #168]	; (8007028 <floor+0xe8>)
 8006f7e:	2000      	movs	r0, #0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4602      	mov	r2, r0
 8006f84:	ec43 2b10 	vmov	d0, r2, r3
 8006f88:	e020      	b.n	8006fcc <floor+0x8c>
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <floor+0xec>)
 8006f8c:	411a      	asrs	r2, r3
 8006f8e:	ea01 0402 	and.w	r4, r1, r2
 8006f92:	4304      	orrs	r4, r0
 8006f94:	d01a      	beq.n	8006fcc <floor+0x8c>
 8006f96:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007020 <floor+0xe0>
 8006f9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006f9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa6:	ddeb      	ble.n	8006f80 <floor+0x40>
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	bfbe      	ittt	lt
 8006fac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006fb0:	fa40 f303 	asrlt.w	r3, r0, r3
 8006fb4:	18c9      	addlt	r1, r1, r3
 8006fb6:	ea21 0102 	bic.w	r1, r1, r2
 8006fba:	2000      	movs	r0, #0
 8006fbc:	e7e0      	b.n	8006f80 <floor+0x40>
 8006fbe:	2b33      	cmp	r3, #51	; 0x33
 8006fc0:	dd05      	ble.n	8006fce <floor+0x8e>
 8006fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc6:	d101      	bne.n	8006fcc <floor+0x8c>
 8006fc8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006fcc:	bd30      	pop	{r4, r5, pc}
 8006fce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	40e2      	lsrs	r2, r4
 8006fd8:	4210      	tst	r0, r2
 8006fda:	d0f7      	beq.n	8006fcc <floor+0x8c>
 8006fdc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007020 <floor+0xe0>
 8006fe0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006fe4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fec:	ddc8      	ble.n	8006f80 <floor+0x40>
 8006fee:	2900      	cmp	r1, #0
 8006ff0:	da02      	bge.n	8006ff8 <floor+0xb8>
 8006ff2:	2b14      	cmp	r3, #20
 8006ff4:	d103      	bne.n	8006ffe <floor+0xbe>
 8006ff6:	3101      	adds	r1, #1
 8006ff8:	ea20 0002 	bic.w	r0, r0, r2
 8006ffc:	e7c0      	b.n	8006f80 <floor+0x40>
 8006ffe:	2401      	movs	r4, #1
 8007000:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007004:	fa04 f303 	lsl.w	r3, r4, r3
 8007008:	4418      	add	r0, r3
 800700a:	4285      	cmp	r5, r0
 800700c:	bf88      	it	hi
 800700e:	1909      	addhi	r1, r1, r4
 8007010:	e7f2      	b.n	8006ff8 <floor+0xb8>
 8007012:	2000      	movs	r0, #0
 8007014:	4601      	mov	r1, r0
 8007016:	e7b3      	b.n	8006f80 <floor+0x40>
 8007018:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800701c:	e7b0      	b.n	8006f80 <floor+0x40>
 800701e:	bf00      	nop
 8007020:	8800759c 	.word	0x8800759c
 8007024:	7e37e43c 	.word	0x7e37e43c
 8007028:	bff00000 	.word	0xbff00000
 800702c:	000fffff 	.word	0x000fffff

08007030 <_init>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr

0800703c <_fini>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr
