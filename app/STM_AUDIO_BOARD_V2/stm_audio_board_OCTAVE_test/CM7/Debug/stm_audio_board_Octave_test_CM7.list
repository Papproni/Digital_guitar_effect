
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005690  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  08005940  08005940  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005940  08005940  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  24000000  08005948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  240003a0  08005ce8  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240018a8  08005ce8  000218a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000203ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017886  00000000  00000000  00020486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003733  00000000  00000000  00037d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005e8b  00000000  00000000  0003b43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000af0  00000000  00000000  000412d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf8  00000000  00000000  00041dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003eff2  00000000  00000000  000429b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015d12  00000000  00000000  000819aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195eb3  00000000  00000000  000976bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f48  00000000  00000000  0022d570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  0022f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000017a3  00000000  00000000  0022f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000070  00000000  00000000  00230cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240003a0 	.word	0x240003a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005910 	.word	0x08005910

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240003a4 	.word	0x240003a4
 80002d4:	08005910 	.word	0x08005910

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCFGR = 0x01FF0000;
 8000338:	481a      	ldr	r0, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800033a:	4c1b      	ldr	r4, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000346:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000364:	4911      	ldr	r1, [pc, #68]	; (80003ac <SystemInit+0xd4>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8000366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <SystemInit+0xd8>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800036c:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	680a      	ldr	r2, [r1, #0]
 8000372:	4013      	ands	r3, r2
 8000374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000378:	d203      	bcs.n	8000382 <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <SystemInit+0xdc>)
 800037c:	2201      	movs	r2, #1
 800037e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SystemInit+0xe0>)
 8000384:	f243 02d2 	movw	r2, #12498	; 0x30d2
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000388:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	02020200 	.word	0x02020200
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <ad1939_init>:

	 return 0;
}

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TXdata[2] = data;
 80003c0:	2399      	movs	r3, #153	; 0x99
	TXdata[0] = AD1939_Global_Address_Write;
 80003c2:	4cb9      	ldr	r4, [pc, #740]	; (80006a8 <ad1939_init+0x2ec>)
    AD1939_spi = hspi_codec;
 80003c4:	4db9      	ldr	r5, [pc, #740]	; (80006ac <ad1939_init+0x2f0>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003c6:	f04f 0808 	mov.w	r8, #8
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ca:	b082      	sub	sp, #8
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    AD1939_spi = hspi_codec;
 80003d6:	6028      	str	r0, [r5, #0]
	TXdata[2] = data;
 80003d8:	70a3      	strb	r3, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003da:	48b5      	ldr	r0, [pc, #724]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003dc:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003e0:	f002 f998 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003e4:	4ab3      	ldr	r2, [pc, #716]	; (80006b4 <ad1939_init+0x2f8>)
 80003e6:	4621      	mov	r1, r4
 80003e8:	2303      	movs	r3, #3
 80003ea:	6828      	ldr	r0, [r5, #0]
 80003ec:	9600      	str	r6, [sp, #0]
 80003ee:	f004 fd99 	bl	8004f24 <HAL_SPI_TransmitReceive>
 80003f2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	48ad      	ldr	r0, [pc, #692]	; (80006b0 <ad1939_init+0x2f4>)
 80003fc:	f002 f98a 	bl	8002714 <HAL_GPIO_WritePin>
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 8000400:	2f00      	cmp	r7, #0
 8000402:	f040 814b 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000406:	23be      	movs	r3, #190	; 0xbe
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000408:	463a      	mov	r2, r7
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	48a8      	ldr	r0, [pc, #672]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000410:	70a3      	strb	r3, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000412:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000416:	f002 f97d 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800041a:	4aa6      	ldr	r2, [pc, #664]	; (80006b4 <ad1939_init+0x2f8>)
 800041c:	4621      	mov	r1, r4
 800041e:	2303      	movs	r3, #3
 8000420:	6828      	ldr	r0, [r5, #0]
 8000422:	9600      	str	r6, [sp, #0]
 8000424:	f004 fd7e 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000428:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	489f      	ldr	r0, [pc, #636]	; (80006b0 <ad1939_init+0x2f4>)
 8000432:	f002 f96f 	bl	8002714 <HAL_GPIO_WritePin>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 8000436:	2f00      	cmp	r7, #0
 8000438:	f040 8130 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800043c:	f44f 7384 	mov.w	r3, #264	; 0x108
	TXdata[2] = data;
 8000440:	f04f 0804 	mov.w	r8, #4
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000444:	463a      	mov	r2, r7
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4899      	ldr	r0, [pc, #612]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 800044c:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800044e:	f884 8002 	strb.w	r8, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000452:	f002 f95f 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000456:	4a97      	ldr	r2, [pc, #604]	; (80006b4 <ad1939_init+0x2f8>)
 8000458:	4621      	mov	r1, r4
 800045a:	2303      	movs	r3, #3
 800045c:	6828      	ldr	r0, [r5, #0]
 800045e:	9600      	str	r6, [sp, #0]
 8000460:	f004 fd60 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000464:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4890      	ldr	r0, [pc, #576]	; (80006b0 <ad1939_init+0x2f4>)
 800046e:	f002 f951 	bl	8002714 <HAL_GPIO_WritePin>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2f00      	cmp	r7, #0
 8000474:	f040 8112 	bne.w	800069c <ad1939_init+0x2e0>





    HAL_Delay(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f000 ff27 	bl	80012cc <HAL_Delay>
	TXdata[0] = AD1939_Global_Address_Read;
 800047e:	f240 1309 	movw	r3, #265	; 0x109
	HAL_Delay(10);
 8000482:	200a      	movs	r0, #10
	TXdata[2] = 0b00000100;
 8000484:	f884 8002 	strb.w	r8, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Read;
 8000488:	8023      	strh	r3, [r4, #0]
	HAL_Delay(10);
 800048a:	f000 ff1f 	bl	80012cc <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800048e:	463a      	mov	r2, r7
 8000490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000494:	4886      	ldr	r0, [pc, #536]	; (80006b0 <ad1939_init+0x2f4>)
 8000496:	f002 f93d 	bl	8002714 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800049a:	2303      	movs	r3, #3
 800049c:	4a85      	ldr	r2, [pc, #532]	; (80006b4 <ad1939_init+0x2f8>)
 800049e:	4621      	mov	r1, r4
 80004a0:	6828      	ldr	r0, [r5, #0]
 80004a2:	9600      	str	r6, [sp, #0]
 80004a4:	f004 fd3e 	bl	8004f24 <HAL_SPI_TransmitReceive>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4880      	ldr	r0, [pc, #512]	; (80006b0 <ad1939_init+0x2f4>)
 80004b0:	f002 f930 	bl	8002714 <HAL_GPIO_WritePin>
	TXdata[0] = AD1939_Global_Address_Write;
 80004b4:	f44f 7302 	mov.w	r3, #520	; 0x208
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004b8:	463a      	mov	r2, r7
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	487c      	ldr	r0, [pc, #496]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004c0:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004c2:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004c4:	f002 f926 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004c8:	4a7a      	ldr	r2, [pc, #488]	; (80006b4 <ad1939_init+0x2f8>)
 80004ca:	4621      	mov	r1, r4
 80004cc:	2303      	movs	r3, #3
 80004ce:	6828      	ldr	r0, [r5, #0]
 80004d0:	9600      	str	r6, [sp, #0]
 80004d2:	f004 fd27 	bl	8004f24 <HAL_SPI_TransmitReceive>
 80004d6:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4874      	ldr	r0, [pc, #464]	; (80006b0 <ad1939_init+0x2f4>)
 80004e0:	f002 f918 	bl	8002714 <HAL_GPIO_WritePin>

    if(ad1939_pll_locked()){
    	// wait till pll is locked takes about 10 ms acc to datasheet
    }
    // DAC settings
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0x00)) return -1;
 80004e4:	2f00      	cmp	r7, #0
 80004e6:	f040 80d9 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80004ea:	f44f 7342 	mov.w	r3, #776	; 0x308
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004ee:	463a      	mov	r2, r7
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	486e      	ldr	r0, [pc, #440]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004f6:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004f8:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004fa:	f002 f90b 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004fe:	4a6d      	ldr	r2, [pc, #436]	; (80006b4 <ad1939_init+0x2f8>)
 8000500:	4621      	mov	r1, r4
 8000502:	2303      	movs	r3, #3
 8000504:	6828      	ldr	r0, [r5, #0]
 8000506:	9600      	str	r6, [sp, #0]
 8000508:	f004 fd0c 	bl	8004f24 <HAL_SPI_TransmitReceive>
 800050c:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4866      	ldr	r0, [pc, #408]	; (80006b0 <ad1939_init+0x2f4>)
 8000516:	f002 f8fd 	bl	8002714 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800051a:	2f00      	cmp	r7, #0
 800051c:	f040 80be 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000520:	f44f 6381 	mov.w	r3, #1032	; 0x408
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000524:	463a      	mov	r2, r7
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4861      	ldr	r0, [pc, #388]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 800052c:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800052e:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000530:	f002 f8f0 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000534:	4a5f      	ldr	r2, [pc, #380]	; (80006b4 <ad1939_init+0x2f8>)
 8000536:	4621      	mov	r1, r4
 8000538:	2303      	movs	r3, #3
 800053a:	6828      	ldr	r0, [r5, #0]
 800053c:	9600      	str	r6, [sp, #0]
 800053e:	f004 fcf1 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000542:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4859      	ldr	r0, [pc, #356]	; (80006b0 <ad1939_init+0x2f4>)
 800054c:	f002 f8e2 	bl	8002714 <HAL_GPIO_WritePin>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000550:	2f00      	cmp	r7, #0
 8000552:	f040 80a3 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000556:	f44f 63a1 	mov.w	r3, #1288	; 0x508
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800055a:	463a      	mov	r2, r7
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4853      	ldr	r0, [pc, #332]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000562:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000564:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000566:	f002 f8d5 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800056a:	4a52      	ldr	r2, [pc, #328]	; (80006b4 <ad1939_init+0x2f8>)
 800056c:	4621      	mov	r1, r4
 800056e:	2303      	movs	r3, #3
 8000570:	6828      	ldr	r0, [r5, #0]
 8000572:	9600      	str	r6, [sp, #0]
 8000574:	f004 fcd6 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000578:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	484b      	ldr	r0, [pc, #300]	; (80006b0 <ad1939_init+0x2f4>)
 8000582:	f002 f8c7 	bl	8002714 <HAL_GPIO_WritePin>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000586:	2f00      	cmp	r7, #0
 8000588:	f040 8088 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800058c:	f640 0308 	movw	r3, #2056	; 0x808
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000590:	463a      	mov	r2, r7
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4846      	ldr	r0, [pc, #280]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000598:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800059a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800059c:	f002 f8ba 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005a0:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <ad1939_init+0x2f8>)
 80005a2:	4621      	mov	r1, r4
 80005a4:	2303      	movs	r3, #3
 80005a6:	6828      	ldr	r0, [r5, #0]
 80005a8:	9600      	str	r6, [sp, #0]
 80005aa:	f004 fcbb 	bl	8004f24 <HAL_SPI_TransmitReceive>
 80005ae:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	483e      	ldr	r0, [pc, #248]	; (80006b0 <ad1939_init+0x2f4>)
 80005b8:	f002 f8ac 	bl	8002714 <HAL_GPIO_WritePin>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d16d      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005c0:	f640 1308 	movw	r3, #2312	; 0x908
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005c4:	463a      	mov	r2, r7
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4839      	ldr	r0, [pc, #228]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80005cc:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80005ce:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005d0:	f002 f8a0 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <ad1939_init+0x2f8>)
 80005d6:	4621      	mov	r1, r4
 80005d8:	2303      	movs	r3, #3
 80005da:	6828      	ldr	r0, [r5, #0]
 80005dc:	9600      	str	r6, [sp, #0]
 80005de:	f004 fca1 	bl	8004f24 <HAL_SPI_TransmitReceive>
 80005e2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4831      	ldr	r0, [pc, #196]	; (80006b0 <ad1939_init+0x2f4>)
 80005ec:	f002 f892 	bl	8002714 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d153      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005f4:	f640 6308 	movw	r3, #3592	; 0xe08
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005f8:	463a      	mov	r2, r7
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000600:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 8000602:	70a7      	strb	r7, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000604:	f002 f886 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <ad1939_init+0x2f8>)
 800060a:	4621      	mov	r1, r4
 800060c:	9600      	str	r6, [sp, #0]
 800060e:	2303      	movs	r3, #3
 8000610:	6828      	ldr	r0, [r5, #0]
 8000612:	f004 fc87 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000616:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4824      	ldr	r0, [pc, #144]	; (80006b0 <ad1939_init+0x2f4>)
 8000620:	f002 f878 	bl	8002714 <HAL_GPIO_WritePin>

    // ADC settings
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000624:	2e00      	cmp	r6, #0
 8000626:	d139      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000628:	2200      	movs	r2, #0
	TXdata[0] = AD1939_Global_Address_Write;
 800062a:	f640 7308 	movw	r3, #3848	; 0xf08
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800062e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000638:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800063a:	70a2      	strb	r2, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800063c:	f002 f86a 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <ad1939_init+0x2f8>)
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <ad1939_init+0x2ec>)
 8000644:	2303      	movs	r3, #3
 8000646:	6828      	ldr	r0, [r5, #0]
 8000648:	9700      	str	r7, [sp, #0]
 800064a:	f004 fc6b 	bl	8004f24 <HAL_SPI_TransmitReceive>
 800064e:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <ad1939_init+0x2f4>)
 8000658:	f002 f85c 	bl	8002714 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 800065c:	b9f6      	cbnz	r6, 800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800065e:	f241 0308 	movw	r3, #4104	; 0x1008
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000662:	4632      	mov	r2, r6
	TXdata[2] = data;
 8000664:	70a6      	strb	r6, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	TXdata[0] = AD1939_Global_Address_Write;
 800066a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <ad1939_init+0x2f4>)
 800066e:	f002 f851 	bl	8002714 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000672:	2303      	movs	r3, #3
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <ad1939_init+0x2f8>)
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <ad1939_init+0x2ec>)
 8000678:	6828      	ldr	r0, [r5, #0]
 800067a:	9700      	str	r7, [sp, #0]
 800067c:	f004 fc52 	bl	8004f24 <HAL_SPI_TransmitReceive>
 8000680:	4604      	mov	r4, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <ad1939_init+0x2f4>)
 800068a:	f002 f843 	bl	8002714 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800068e:	1e20      	subs	r0, r4, #0
 8000690:	bf18      	it	ne
 8000692:	2001      	movne	r0, #1
 8000694:	4240      	negs	r0, r0



    return 0; // Return 0 if all writes are successful
}
 8000696:	b002      	add	sp, #8
 8000698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006a0:	b002      	add	sp, #8
 80006a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a6:	bf00      	nop
 80006a8:	240003c4 	.word	0x240003c4
 80006ac:	240003bc 	.word	0x240003bc
 80006b0:	58021400 	.word	0x58021400
 80006b4:	240003c0 	.word	0x240003c0

080006b8 <subbandfilter_calculation>:
volatile float32_t subbandfilter_B1[numberofsubbands];
volatile float32_t subbandfilter_B2[numberofsubbands];
volatile float32_t subbandfilter_B[numberofsubbands];
// SUBBAND FILTER FUNCTION - DIRECT FORM 2 - normalfunction exectime: ~6us
void subbandfilter_calculation(int32_t input){
  float32_t input_f32=(float32_t)input;
 80006b8:	ee07 0a90 	vmov	s15, r0
 80006bc:	482f      	ldr	r0, [pc, #188]	; (800077c <subbandfilter_calculation+0xc4>)
 80006be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void subbandfilter_calculation(int32_t input){
 80006c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 80006c4:	2400      	movs	r4, #0
 80006c6:	4e2e      	ldr	r6, [pc, #184]	; (8000780 <subbandfilter_calculation+0xc8>)
 80006c8:	4d2e      	ldr	r5, [pc, #184]	; (8000784 <subbandfilter_calculation+0xcc>)
//			  subbandfilter_input[i]	= input_f32;
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80006ca:	eb06 0284 	add.w	r2, r6, r4, lsl #2
			  subbandfilter_dn1[i]		= subbandfilter_dn[i];
 80006ce:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80006d2:	f8d2 c000 	ldr.w	ip, [r2]
 80006d6:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 80006da:	3401      	adds	r4, #1
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80006dc:	f8c1 c000 	str.w	ip, [r1]
  for(int i=0;i<numberofsubbands;i++){
 80006e0:	2c37      	cmp	r4, #55	; 0x37
			  subbandfilter_dn1[i]		= subbandfilter_dn[i];
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	6011      	str	r1, [r2, #0]
			  subbandfilter_dn[i]		= input_f32;
 80006e6:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<numberofsubbands;i++){
 80006ea:	d1ee      	bne.n	80006ca <subbandfilter_calculation+0x12>

  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, subbandfilter_yn1, subbandfilter_A1, numberofsubbands);
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <subbandfilter_calculation+0xd0>)
 80006ee:	4623      	mov	r3, r4
 80006f0:	4926      	ldr	r1, [pc, #152]	; (800078c <subbandfilter_calculation+0xd4>)
 80006f2:	4827      	ldr	r0, [pc, #156]	; (8000790 <subbandfilter_calculation+0xd8>)
 80006f4:	f004 ff8c 	bl	8005610 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, subbandfilter_yn2, subbandfilter_A2, numberofsubbands);
 80006f8:	4623      	mov	r3, r4
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <subbandfilter_calculation+0xdc>)
 80006fc:	4926      	ldr	r1, [pc, #152]	; (8000798 <subbandfilter_calculation+0xe0>)
 80006fe:	4827      	ldr	r0, [pc, #156]	; (800079c <subbandfilter_calculation+0xe4>)
 8000700:	f004 ff86 	bl	8005610 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_A, numberofsubbands);
 8000704:	4623      	mov	r3, r4
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <subbandfilter_calculation+0xe8>)
 8000708:	4922      	ldr	r1, [pc, #136]	; (8000794 <subbandfilter_calculation+0xdc>)
 800070a:	481f      	ldr	r0, [pc, #124]	; (8000788 <subbandfilter_calculation+0xd0>)
 800070c:	f005 f836 	bl	800577c <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, subbandfilter_dn1, subbandfilter_B1, numberofsubbands);
 8000710:	4623      	mov	r3, r4
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <subbandfilter_calculation+0xec>)
 8000714:	491a      	ldr	r1, [pc, #104]	; (8000780 <subbandfilter_calculation+0xc8>)
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <subbandfilter_calculation+0xf0>)
 8000718:	f004 ff7a 	bl	8005610 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, subbandfilter_dn2, subbandfilter_B2, numberofsubbands);
 800071c:	4623      	mov	r3, r4
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <subbandfilter_calculation+0xf4>)
 8000720:	4918      	ldr	r1, [pc, #96]	; (8000784 <subbandfilter_calculation+0xcc>)
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <subbandfilter_calculation+0xf8>)
 8000724:	f004 ff74 	bl	8005610 <arm_mult_f32>
  // B1+B2
  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_B, numberofsubbands);
 8000728:	4623      	mov	r3, r4
 800072a:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <subbandfilter_calculation+0xfc>)
 800072c:	491f      	ldr	r1, [pc, #124]	; (80007ac <subbandfilter_calculation+0xf4>)
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <subbandfilter_calculation+0xec>)
 8000730:	f005 f824 	bl	800577c <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, subbandfilter_dn, subbandfilter_B0, numberofsubbands);
 8000734:	4623      	mov	r3, r4
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <subbandfilter_calculation+0x100>)
 8000738:	4910      	ldr	r1, [pc, #64]	; (800077c <subbandfilter_calculation+0xc4>)
 800073a:	4820      	ldr	r0, [pc, #128]	; (80007bc <subbandfilter_calculation+0x104>)
 800073c:	f004 ff68 	bl	8005610 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(subbandfilter_B, subbandfilter_B0, subbandfilter_B, numberofsubbands);
 8000740:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <subbandfilter_calculation+0xfc>)
 8000742:	4623      	mov	r3, r4
 8000744:	491c      	ldr	r1, [pc, #112]	; (80007b8 <subbandfilter_calculation+0x100>)
 8000746:	4610      	mov	r0, r2
 8000748:	4f10      	ldr	r7, [pc, #64]	; (800078c <subbandfilter_calculation+0xd4>)
 800074a:	f005 f817 	bl	800577c <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(subbandfilter_B,subbandfilter_A, subbandfilter_output, numberofsubbands);
 800074e:	4623      	mov	r3, r4
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <subbandfilter_calculation+0x108>)
 8000752:	4913      	ldr	r1, [pc, #76]	; (80007a0 <subbandfilter_calculation+0xe8>)
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <subbandfilter_calculation+0xfc>)
 8000756:	f004 ff01 	bl	800555c <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 800075a:	4e0f      	ldr	r6, [pc, #60]	; (8000798 <subbandfilter_calculation+0xe0>)
 800075c:	2300      	movs	r3, #0
 800075e:	4d18      	ldr	r5, [pc, #96]	; (80007c0 <subbandfilter_calculation+0x108>)
	  subbandfilter_yn2[i]		= subbandfilter_yn1[i];
 8000760:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8000764:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000768:	6814      	ldr	r4, [r2, #0]
	  subbandfilter_yn1[i]		= subbandfilter_output[i];
 800076a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 800076e:	3301      	adds	r3, #1
	  subbandfilter_yn2[i]		= subbandfilter_yn1[i];
 8000770:	6004      	str	r4, [r0, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000772:	2b37      	cmp	r3, #55	; 0x37
	  subbandfilter_yn1[i]		= subbandfilter_output[i];
 8000774:	6809      	ldr	r1, [r1, #0]
 8000776:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000778:	d1f2      	bne.n	8000760 <subbandfilter_calculation+0xa8>
   }
}
 800077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800077c:	24000f30 	.word	0x24000f30
 8000780:	2400100c 	.word	0x2400100c
 8000784:	240010e8 	.word	0x240010e8
 8000788:	2400092c 	.word	0x2400092c
 800078c:	240016ec 	.word	0x240016ec
 8000790:	24000028 	.word	0x24000028
 8000794:	24000a08 	.word	0x24000a08
 8000798:	240017c8 	.word	0x240017c8
 800079c:	24000104 	.word	0x24000104
 80007a0:	24000850 	.word	0x24000850
 80007a4:	24000c9c 	.word	0x24000c9c
 80007a8:	24000e54 	.word	0x24000e54
 80007ac:	24000d78 	.word	0x24000d78
 80007b0:	240002bc 	.word	0x240002bc
 80007b4:	24000ae4 	.word	0x24000ae4
 80007b8:	24000bc0 	.word	0x24000bc0
 80007bc:	240001e0 	.word	0x240001e0
 80007c0:	24001610 	.word	0x24001610

080007c4 <subbandfilter_octave2_calculation>:

void subbandfilter_octave2_calculation(int32_t input){
  float32_t input_f32=(float32_t)input;
 80007c4:	ee07 0a90 	vmov	s15, r0
 80007c8:	482f      	ldr	r0, [pc, #188]	; (8000888 <subbandfilter_octave2_calculation+0xc4>)
 80007ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void subbandfilter_octave2_calculation(int32_t input){
 80007ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 80007d0:	2400      	movs	r4, #0
 80007d2:	4e2e      	ldr	r6, [pc, #184]	; (800088c <subbandfilter_octave2_calculation+0xc8>)
 80007d4:	4d2e      	ldr	r5, [pc, #184]	; (8000890 <subbandfilter_octave2_calculation+0xcc>)
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 80007d6:	eb06 0284 	add.w	r2, r6, r4, lsl #2
			  subbandfilter_octave2_dn1[i]=subbandfilter_octave2_dn[i];
 80007da:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 80007de:	f8d2 c000 	ldr.w	ip, [r2]
 80007e2:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 80007e6:	3401      	adds	r4, #1
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 80007e8:	f8c1 c000 	str.w	ip, [r1]
  for(int i=0;i<numberofsubbands;i++){
 80007ec:	2c37      	cmp	r4, #55	; 0x37
			  subbandfilter_octave2_dn1[i]=subbandfilter_octave2_dn[i];
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	6011      	str	r1, [r2, #0]
			  subbandfilter_octave2_dn[i] = input_f32;
 80007f2:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<numberofsubbands;i++){
 80007f6:	d1ee      	bne.n	80007d6 <subbandfilter_octave2_calculation+0x12>
  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, subbandfilter_octave2_yn1, subbandfilter_A1, numberofsubbands);
 80007f8:	4a26      	ldr	r2, [pc, #152]	; (8000894 <subbandfilter_octave2_calculation+0xd0>)
 80007fa:	4623      	mov	r3, r4
 80007fc:	4926      	ldr	r1, [pc, #152]	; (8000898 <subbandfilter_octave2_calculation+0xd4>)
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <subbandfilter_octave2_calculation+0xd8>)
 8000800:	f004 ff06 	bl	8005610 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, subbandfilter_octave2_yn2, subbandfilter_A2, numberofsubbands);
 8000804:	4623      	mov	r3, r4
 8000806:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <subbandfilter_octave2_calculation+0xdc>)
 8000808:	4926      	ldr	r1, [pc, #152]	; (80008a4 <subbandfilter_octave2_calculation+0xe0>)
 800080a:	4827      	ldr	r0, [pc, #156]	; (80008a8 <subbandfilter_octave2_calculation+0xe4>)
 800080c:	f004 ff00 	bl	8005610 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_A, numberofsubbands);
 8000810:	4623      	mov	r3, r4
 8000812:	4a26      	ldr	r2, [pc, #152]	; (80008ac <subbandfilter_octave2_calculation+0xe8>)
 8000814:	4922      	ldr	r1, [pc, #136]	; (80008a0 <subbandfilter_octave2_calculation+0xdc>)
 8000816:	481f      	ldr	r0, [pc, #124]	; (8000894 <subbandfilter_octave2_calculation+0xd0>)
 8000818:	f004 ffb0 	bl	800577c <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, subbandfilter_octave2_dn1, subbandfilter_B1, numberofsubbands);
 800081c:	4623      	mov	r3, r4
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <subbandfilter_octave2_calculation+0xec>)
 8000820:	491a      	ldr	r1, [pc, #104]	; (800088c <subbandfilter_octave2_calculation+0xc8>)
 8000822:	4824      	ldr	r0, [pc, #144]	; (80008b4 <subbandfilter_octave2_calculation+0xf0>)
 8000824:	f004 fef4 	bl	8005610 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, subbandfilter_octave2_dn2, subbandfilter_B2, numberofsubbands);
 8000828:	4623      	mov	r3, r4
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <subbandfilter_octave2_calculation+0xf4>)
 800082c:	4918      	ldr	r1, [pc, #96]	; (8000890 <subbandfilter_octave2_calculation+0xcc>)
 800082e:	4823      	ldr	r0, [pc, #140]	; (80008bc <subbandfilter_octave2_calculation+0xf8>)
 8000830:	f004 feee 	bl	8005610 <arm_mult_f32>
  // B1+B2
  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_B, numberofsubbands);
 8000834:	4623      	mov	r3, r4
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <subbandfilter_octave2_calculation+0xfc>)
 8000838:	491f      	ldr	r1, [pc, #124]	; (80008b8 <subbandfilter_octave2_calculation+0xf4>)
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <subbandfilter_octave2_calculation+0xec>)
 800083c:	f004 ff9e 	bl	800577c <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, subbandfilter_octave2_dn, subbandfilter_B0, numberofsubbands);
 8000840:	4623      	mov	r3, r4
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <subbandfilter_octave2_calculation+0x100>)
 8000844:	4910      	ldr	r1, [pc, #64]	; (8000888 <subbandfilter_octave2_calculation+0xc4>)
 8000846:	4820      	ldr	r0, [pc, #128]	; (80008c8 <subbandfilter_octave2_calculation+0x104>)
 8000848:	f004 fee2 	bl	8005610 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(subbandfilter_B, subbandfilter_B0, subbandfilter_B, numberofsubbands);
 800084c:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <subbandfilter_octave2_calculation+0xfc>)
 800084e:	4623      	mov	r3, r4
 8000850:	491c      	ldr	r1, [pc, #112]	; (80008c4 <subbandfilter_octave2_calculation+0x100>)
 8000852:	4610      	mov	r0, r2
 8000854:	4f10      	ldr	r7, [pc, #64]	; (8000898 <subbandfilter_octave2_calculation+0xd4>)
 8000856:	f004 ff91 	bl	800577c <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(subbandfilter_B,subbandfilter_A, subbandfilter_output, numberofsubbands);
 800085a:	4623      	mov	r3, r4
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <subbandfilter_octave2_calculation+0x108>)
 800085e:	4913      	ldr	r1, [pc, #76]	; (80008ac <subbandfilter_octave2_calculation+0xe8>)
 8000860:	4817      	ldr	r0, [pc, #92]	; (80008c0 <subbandfilter_octave2_calculation+0xfc>)
 8000862:	f004 fe7b 	bl	800555c <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000866:	4e0f      	ldr	r6, [pc, #60]	; (80008a4 <subbandfilter_octave2_calculation+0xe0>)
 8000868:	2300      	movs	r3, #0
 800086a:	4d18      	ldr	r5, [pc, #96]	; (80008cc <subbandfilter_octave2_calculation+0x108>)
 			  subbandfilter_octave2_yn2[i] 	= subbandfilter_octave2_yn1[i];
 800086c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8000870:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000874:	6814      	ldr	r4, [r2, #0]
 			  subbandfilter_octave2_yn1[i]  = subbandfilter_output[i];
 8000876:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 800087a:	3301      	adds	r3, #1
 			  subbandfilter_octave2_yn2[i] 	= subbandfilter_octave2_yn1[i];
 800087c:	6004      	str	r4, [r0, #0]
  for(int i=0;i<numberofsubbands;i++){
 800087e:	2b37      	cmp	r3, #55	; 0x37
 			  subbandfilter_octave2_yn1[i]  = subbandfilter_output[i];
 8000880:	6809      	ldr	r1, [r1, #0]
 8000882:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000884:	d1f2      	bne.n	800086c <subbandfilter_octave2_calculation+0xa8>
   }
}
 8000886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000888:	240011c4 	.word	0x240011c4
 800088c:	240012a0 	.word	0x240012a0
 8000890:	2400137c 	.word	0x2400137c
 8000894:	2400092c 	.word	0x2400092c
 8000898:	24001458 	.word	0x24001458
 800089c:	24000028 	.word	0x24000028
 80008a0:	24000a08 	.word	0x24000a08
 80008a4:	24001534 	.word	0x24001534
 80008a8:	24000104 	.word	0x24000104
 80008ac:	24000850 	.word	0x24000850
 80008b0:	24000c9c 	.word	0x24000c9c
 80008b4:	24000e54 	.word	0x24000e54
 80008b8:	24000d78 	.word	0x24000d78
 80008bc:	240002bc 	.word	0x240002bc
 80008c0:	24000ae4 	.word	0x24000ae4
 80008c4:	24000bc0 	.word	0x24000bc0
 80008c8:	240001e0 	.word	0x240001e0
 80008cc:	24001610 	.word	0x24001610

080008d0 <HAL_I2S_RxHalfCpltCallback>:
volatile adc_data_bitfield output_buffer;
volatile uint8_t ADC_READY_FLAG = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
	ADC_READY_FLAG = 1;
//	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 80008d0:	4905      	ldr	r1, [pc, #20]	; (80008e8 <HAL_I2S_RxHalfCpltCallback+0x18>)
	ADC_READY_FLAG = 1;
 80008d2:	2001      	movs	r0, #1
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_I2S_RxHalfCpltCallback+0x1c>)
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 80008d6:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_I2S_RxHalfCpltCallback+0x20>)
	ADC_READY_FLAG = 1;
 80008d8:	7018      	strb	r0, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 80008da:	880b      	ldrh	r3, [r1, #0]
 80008dc:	b21b      	sxth	r3, r3
 80008de:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 80008e0:	884b      	ldrh	r3, [r1, #2]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	8053      	strh	r3, [r2, #2]
}
 80008e6:	4770      	bx	lr
 80008e8:	24000688 	.word	0x24000688
 80008ec:	240003c7 	.word	0x240003c7
 80008f0:	240003c8 	.word	0x240003c8

080008f4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
	ADC_READY_FLAG = 1;
	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 80008f4:	4905      	ldr	r1, [pc, #20]	; (800090c <HAL_I2S_RxCpltCallback+0x18>)
	ADC_READY_FLAG = 1;
 80008f6:	2001      	movs	r0, #1
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_I2S_RxCpltCallback+0x1c>)
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_I2S_RxCpltCallback+0x20>)
	ADC_READY_FLAG = 1;
 80008fc:	7018      	strb	r0, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 80008fe:	890b      	ldrh	r3, [r1, #8]
 8000900:	b21b      	sxth	r3, r3
 8000902:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000904:	894b      	ldrh	r3, [r1, #10]
 8000906:	b21b      	sxth	r3, r3
 8000908:	8053      	strh	r3, [r2, #2]
}
 800090a:	4770      	bx	lr
 800090c:	24000688 	.word	0x24000688
 8000910:	240003c7 	.word	0x240003c7
 8000914:	240003c8 	.word	0x240003c8

08000918 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
	int32_t out2 = output_buffer.raw_low;
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_I2S_TxHalfCpltCallback+0x14>)
	int32_t out3 = output_buffer.raw_high;
	my_data[2] = out2;
 800091a:	4905      	ldr	r1, [pc, #20]	; (8000930 <HAL_I2S_TxHalfCpltCallback+0x18>)
	int32_t out2 = output_buffer.raw_low;
 800091c:	881a      	ldrh	r2, [r3, #0]
	int32_t out3 = output_buffer.raw_high;
 800091e:	885b      	ldrh	r3, [r3, #2]
	my_data[2] = out2;
 8000920:	b292      	uxth	r2, r2
	my_data[3] = out3;
 8000922:	b29b      	uxth	r3, r3
	my_data[2] = out2;
 8000924:	808a      	strh	r2, [r1, #4]
	my_data[3] = out3;
 8000926:	80cb      	strh	r3, [r1, #6]
}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	24000680 	.word	0x24000680
 8000930:	24000668 	.word	0x24000668

08000934 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s){
	int32_t out2 = output_buffer.raw_low;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_I2S_TxCpltCallback+0x14>)
	int32_t out3 = output_buffer.raw_high;

	my_data[6] = out2;
 8000936:	4905      	ldr	r1, [pc, #20]	; (800094c <HAL_I2S_TxCpltCallback+0x18>)
	int32_t out2 = output_buffer.raw_low;
 8000938:	881a      	ldrh	r2, [r3, #0]
	int32_t out3 = output_buffer.raw_high;
 800093a:	885b      	ldrh	r3, [r3, #2]
	my_data[6] = out2;
 800093c:	b292      	uxth	r2, r2
	my_data[7] = out3;
 800093e:	b29b      	uxth	r3, r3
	my_data[6] = out2;
 8000940:	818a      	strh	r2, [r1, #12]
	my_data[7] = out3;
 8000942:	81cb      	strh	r3, [r1, #14]
}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	24000680 	.word	0x24000680
 800094c:	24000668 	.word	0x24000668

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b510      	push	{r4, lr}
 8000952:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000954:	224c      	movs	r2, #76	; 0x4c
 8000956:	2100      	movs	r1, #0
 8000958:	a80c      	add	r0, sp, #48	; 0x30
 800095a:	f004 ffad 	bl	80058b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	a804      	add	r0, sp, #16
 8000964:	f004 ffa8 	bl	80058b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000968:	2002      	movs	r0, #2
 800096a:	f002 f8b7 	bl	8002adc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <SystemClock_Config+0x100>)
 8000970:	2100      	movs	r1, #0
 8000972:	4a38      	ldr	r2, [pc, #224]	; (8000a54 <SystemClock_Config+0x104>)
 8000974:	9101      	str	r1, [sp, #4]
 8000976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000978:	f021 0101 	bic.w	r1, r1, #1
 800097c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	6993      	ldr	r3, [r2, #24]
 8000988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	6993      	ldr	r3, [r2, #24]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000998:	6993      	ldr	r3, [r2, #24]
 800099a:	0499      	lsls	r1, r3, #18
 800099c:	d5fc      	bpl.n	8000998 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <SystemClock_Config+0x108>)
 80009a0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80009a4:	f041 0102 	orr.w	r1, r1, #2
 80009a8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ac:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ba:	9103      	str	r1, [sp, #12]
 80009bc:	6991      	ldr	r1, [r2, #24]
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <SystemClock_Config+0x100>)
 80009c0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80009c4:	6191      	str	r1, [r2, #24]
 80009c6:	6992      	ldr	r2, [r2, #24]
 80009c8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80009cc:	9203      	str	r2, [sp, #12]
 80009ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d2:	f041 0101 	orr.w	r1, r1, #1
 80009d6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e2:	6993      	ldr	r3, [r2, #24]
 80009e4:	049b      	lsls	r3, r3, #18
 80009e6:	d5fc      	bpl.n	80009e2 <SystemClock_Config+0x92>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009e8:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009ea:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009ee:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8000a48 <SystemClock_Config+0xf8>
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009f6:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fa:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a00:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a04:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0c:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f002 f926 	bl	8002c60 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b108      	cbz	r0, 8000a1c <SystemClock_Config+0xcc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <SystemClock_Config+0xca>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	213f      	movs	r1, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1e:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2103      	movs	r1, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2a:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a30:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	e9cd 4207 	strd	r4, r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a36:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3a:	f002 fca7 	bl	800338c <HAL_RCC_ClockConfig>
 8000a3e:	b108      	cbz	r0, 8000a44 <SystemClock_Config+0xf4>
 8000a40:	b672      	cpsid	i
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <SystemClock_Config+0xf2>
}
 8000a44:	b020      	add	sp, #128	; 0x80
 8000a46:	bd10      	pop	{r4, pc}
 8000a48:	00000001 	.word	0x00000001
 8000a4c:	00010000 	.word	0x00010000
 8000a50:	58000400 	.word	0x58000400
 8000a54:	58024800 	.word	0x58024800
 8000a58:	58024400 	.word	0x58024400

08000a5c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a5c:	4a82      	ldr	r2, [pc, #520]	; (8000c68 <main+0x20c>)
 8000a5e:	6953      	ldr	r3, [r2, #20]
 8000a60:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 8000a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a68:	ed2d 8b02 	vpush	{d8}
 8000a6c:	b091      	sub	sp, #68	; 0x44
 8000a6e:	d111      	bne.n	8000a94 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a74:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a78:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a84:	6953      	ldr	r3, [r2, #20]
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4c75      	ldr	r4, [pc, #468]	; (8000c6c <main+0x210>)
  HAL_Init();
 8000a96:	f000 fbd7 	bl	8001248 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	2500      	movs	r5, #0
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000a9c:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000aac:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	9b01      	ldr	r3, [sp, #4]
  SystemClock_Config();
 8000ab8:	f7ff ff4a 	bl	8000950 <SystemClock_Config>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000abc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	486a      	ldr	r0, [pc, #424]	; (8000c70 <main+0x214>)
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000acc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8000ad0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8000ae2:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000af2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	9304      	str	r3, [sp, #16]
 8000afc:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b0a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	9305      	str	r3, [sp, #20]
 8000b14:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b24:	4013      	ands	r3, r2
 8000b26:	9306      	str	r3, [sp, #24]
 8000b28:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	9307      	str	r3, [sp, #28]
 8000b40:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	9308      	str	r3, [sp, #32]
 8000b58:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b62:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000b72:	f001 fdcf 	bl	8002714 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7a:	2301      	movs	r3, #1
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	a90a      	add	r1, sp, #40	; 0x28
 8000b7e:	483c      	ldr	r0, [pc, #240]	; (8000c70 <main+0x214>)
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000b84:	2201      	movs	r2, #1
 8000b86:	2303      	movs	r3, #3
 8000b88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f001 fc90 	bl	80024b0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b90:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b94:	462a      	mov	r2, r5
 8000b96:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b98:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b9c:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000ba2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bae:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000bba:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bbe:	f64b 3480 	movw	r4, #48000	; 0xbb80
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8000bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bca:	f000 fba9 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bce:	200b      	movs	r0, #11
 8000bd0:	f000 fbe4 	bl	800139c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	2039      	movs	r0, #57	; 0x39
 8000bda:	f000 fba1 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bde:	2039      	movs	r0, #57	; 0x39
 8000be0:	f000 fbdc 	bl	800139c <HAL_NVIC_EnableIRQ>
  hi2s2.Instance = SPI2;
 8000be4:	4823      	ldr	r0, [pc, #140]	; (8000c74 <main+0x218>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000be6:	2304      	movs	r3, #4
  hi2s2.Instance = SPI2;
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <main+0x21c>)
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000bea:	6105      	str	r5, [r0, #16]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bec:	e9c0 2300 	strd	r2, r3, [r0]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bf4:	e9c0 5602 	strd	r5, r6, [r0, #8]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000bf8:	e9c0 5307 	strd	r5, r3, [r0, #28]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bfc:	e9c0 4505 	strd	r4, r5, [r0, #20]
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c04:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8000c08:	e9c0 5309 	strd	r5, r3, [r0, #36]	; 0x24
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c0c:	f001 fdc8 	bl	80027a0 <HAL_I2S_Init>
 8000c10:	b108      	cbz	r0, 8000c16 <main+0x1ba>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c12:	b672      	cpsid	i
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0x1b8>
  hspi3.Instance = SPI3;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <main+0x220>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c1c:	4918      	ldr	r1, [pc, #96]	; (8000c80 <main+0x224>)
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c1e:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	6098      	str	r0, [r3, #8]
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c24:	6598      	str	r0, [r3, #88]	; 0x58
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c26:	e9c3 1200 	strd	r1, r2, [r3]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c32:	e9c3 c206 	strd	ip, r2, [r3, #24]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8000c42:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c46:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4a:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c4e:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c52:	e9c3 0014 	strd	r0, r0, [r3, #80]	; 0x50
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c56:	4618      	mov	r0, r3
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c5a:	f004 f88f 	bl	8004d7c <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b180      	cbz	r0, 8000c84 <main+0x228>
 8000c62:	b672      	cpsid	i
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x208>
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58021400 	.word	0x58021400
 8000c74:	24000534 	.word	0x24000534
 8000c78:	40003800 	.word	0x40003800
 8000c7c:	240005e0 	.word	0x240005e0
 8000c80:	40003c00 	.word	0x40003c00
  hi2s1.Instance = SPI1;
 8000c84:	4856      	ldr	r0, [pc, #344]	; (8000de0 <main+0x384>)
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000c86:	4a57      	ldr	r2, [pc, #348]	; (8000de4 <main+0x388>)
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000c88:	6283      	str	r3, [r0, #40]	; 0x28
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c8a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c8e:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000c92:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000c96:	e9c0 3508 	strd	r3, r5, [r0, #32]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ca0:	f001 fd7e 	bl	80027a0 <HAL_I2S_Init>
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f040 8098 	bne.w	8000ddc <main+0x380>
	  my_data[i] = 0x0000;
 8000cac:	484e      	ldr	r0, [pc, #312]	; (8000de8 <main+0x38c>)
	  rx_data_i2s[i]= 0x0000;
 8000cae:	494f      	ldr	r1, [pc, #316]	; (8000dec <main+0x390>)
	  my_data[i] = 0x0000;
 8000cb0:	8004      	strh	r4, [r0, #0]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <main+0x394>)
	  rx_data_i2s[i]= 0x0000;
 8000cb4:	800c      	strh	r4, [r1, #0]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000cb6:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <main+0x398>)
	  my_data[i] = 0x0000;
 8000cb8:	8044      	strh	r4, [r0, #2]
	  rx_data_i2s[i]= 0x0000;
 8000cba:	804c      	strh	r4, [r1, #2]
	  my_data[i] = 0x0000;
 8000cbc:	8084      	strh	r4, [r0, #4]
	  rx_data_i2s[i]= 0x0000;
 8000cbe:	808c      	strh	r4, [r1, #4]
	  my_data[i] = 0x0000;
 8000cc0:	80c4      	strh	r4, [r0, #6]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000cc2:	484d      	ldr	r0, [pc, #308]	; (8000df8 <main+0x39c>)
	  rx_data_i2s[i]= 0x0000;
 8000cc4:	80cc      	strh	r4, [r1, #6]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	f004 fc3c 	bl	8005544 <arm_biquad_cascade_df2T_init_f32>
	  subband_ones[i] = 1.0;
 8000ccc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	494a      	ldr	r1, [pc, #296]	; (8000dfc <main+0x3a0>)
	  subband_ones[i] = 1.0;
 8000cd4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
  for(uint8_t i = 0; i<numberofsubbands;i++){
 8000cd8:	3301      	adds	r3, #1
 8000cda:	2b37      	cmp	r3, #55	; 0x37
	  subband_ones[i] = 1.0;
 8000cdc:	6010      	str	r0, [r2, #0]
  for(uint8_t i = 0; i<numberofsubbands;i++){
 8000cde:	d1f9      	bne.n	8000cd4 <main+0x278>
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4941      	ldr	r1, [pc, #260]	; (8000de8 <main+0x38c>)
 8000ce4:	4846      	ldr	r0, [pc, #280]	; (8000e00 <main+0x3a4>)
 8000ce6:	f001 fe43 	bl	8002970 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 8000cea:	4d46      	ldr	r5, [pc, #280]	; (8000e04 <main+0x3a8>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	493f      	ldr	r1, [pc, #252]	; (8000dec <main+0x390>)
 8000cf0:	483b      	ldr	r0, [pc, #236]	; (8000de0 <main+0x384>)
 8000cf2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8000e28 <main+0x3cc>
 8000cf6:	f001 fe95 	bl	8002a24 <HAL_I2S_Receive_DMA>
  ad1939_init(&hspi3);
 8000cfa:	f8df b130 	ldr.w	fp, [pc, #304]	; 8000e2c <main+0x3d0>
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000cfe:	4f42      	ldr	r7, [pc, #264]	; (8000e08 <main+0x3ac>)
 8000d00:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8000e30 <main+0x3d4>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8000d04:	4e41      	ldr	r6, [pc, #260]	; (8000e0c <main+0x3b0>)
 8000d06:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8000dfc <main+0x3a0>
  ad1939_init(&hspi3);
 8000d0a:	4841      	ldr	r0, [pc, #260]	; (8000e10 <main+0x3b4>)
 8000d0c:	f7ff fb56 	bl	80003bc <ad1939_init>
	  if (ADC_READY_FLAG){
 8000d10:	782b      	ldrb	r3, [r5, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0fc      	beq.n	8000d10 <main+0x2b4>
		  ADC_READY_FLAG  = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	702b      	strb	r3, [r5, #0]
		int32_t value_from_ADC = adc_data_bf.value; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <main+0x3b8>)
 8000d1c:	681c      	ldr	r4, [r3, #0]
		subbandfilter_calculation(value_from_ADC/4);
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	4620      	mov	r0, r4
 8000d22:	bfb8      	it	lt
 8000d24:	1ce0      	addlt	r0, r4, #3
 8000d26:	1080      	asrs	r0, r0, #2
 8000d28:	f7ff fcc6 	bl	80006b8 <subbandfilter_calculation>
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000d2c:	2237      	movs	r2, #55	; 0x37
 8000d2e:	4639      	mov	r1, r7
 8000d30:	4650      	mov	r0, sl
 8000d32:	f004 fd7d 	bl	8005830 <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8000d36:	4633      	mov	r3, r6
 8000d38:	2237      	movs	r2, #55	; 0x37
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f004 fcc1 	bl	80056c4 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up, &octave1_up_filtered, 1);
 8000d42:	2301      	movs	r3, #1
 8000d44:	4642      	mov	r2, r8
 8000d46:	4631      	mov	r1, r6
 8000d48:	482b      	ldr	r0, [pc, #172]	; (8000df8 <main+0x39c>)
 8000d4a:	f004 fa3f 	bl	80051cc <arm_biquad_cascade_df2T_f32>
		float32_t octave_1_up_f32 = octave1_up_filtered;
 8000d4e:	ed98 8a00 	vldr	s16, [r8]
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 8000d52:	eef0 7a48 	vmov.f32	s15, s16
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8000d56:	eebd 8ac8 	vcvt.s32.f32	s16, s16
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 8000d5a:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8000d5e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 8000d62:	ee17 0a90 	vmov	r0, s15
 8000d66:	f7ff fd2d 	bl	80007c4 <subbandfilter_octave2_calculation>
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000d6a:	2237      	movs	r2, #55	; 0x37
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	4650      	mov	r0, sl
 8000d70:	f004 fd5e 	bl	8005830 <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8000d74:	4633      	mov	r3, r6
 8000d76:	2237      	movs	r2, #55	; 0x37
 8000d78:	4649      	mov	r1, r9
 8000d7a:	4638      	mov	r0, r7
 8000d7c:	f004 fca2 	bl	80056c4 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up, &octave1_up_filtered, 1);
 8000d80:	2301      	movs	r3, #1
 8000d82:	4642      	mov	r2, r8
 8000d84:	4631      	mov	r1, r6
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <main+0x39c>)
 8000d88:	f004 fa20 	bl	80051cc <arm_biquad_cascade_df2T_f32>
		float32_t octave_2_up_f32 = octave1_up_filtered;
 8000d8c:	ed98 7a00 	vldr	s14, [r8]
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <main+0x3bc>)
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 8000d92:	ee07 4a90 	vmov	s15, r4
						(int32_t)octave_2_up_f32*octave_2_volume +
 8000d96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		output_buffer.value= output_test_ac;
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <main+0x3c0>)
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8000d9c:	edd3 6a00 	vldr	s13, [r3]
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						(int32_t)octave_2_up_f32*octave_2_volume +
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <main+0x3c4>)
 8000da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000daa:	ed93 6a00 	vldr	s12, [r3]
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <main+0x3c8>)
						(int32_t)octave_2_up_f32*octave_2_volume +
 8000db0:	ee27 7a06 	vmul.f32	s14, s14, s12
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 8000db4:	edd3 5a00 	vldr	s11, [r3]
 8000db8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000dbc:	eea8 7a26 	vfma.f32	s14, s16, s13
 8000dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)octave_2_up_f32*octave_2_volume +
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	edcb 7a00 	vstr	s15, [fp]
		output_buffer.value= output_test_ac;
 8000dd4:	f8db 3000 	ldr.w	r3, [fp]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e799      	b.n	8000d10 <main+0x2b4>
 8000ddc:	b672      	cpsid	i
  while (1)
 8000dde:	e7fe      	b.n	8000dde <main+0x382>
 8000de0:	240004bc 	.word	0x240004bc
 8000de4:	40013000 	.word	0x40013000
 8000de8:	24000668 	.word	0x24000668
 8000dec:	24000688 	.word	0x24000688
 8000df0:	240005b8 	.word	0x240005b8
 8000df4:	24000008 	.word	0x24000008
 8000df8:	240005ac 	.word	0x240005ac
 8000dfc:	24000774 	.word	0x24000774
 8000e00:	24000534 	.word	0x24000534
 8000e04:	240003c7 	.word	0x240003c7
 8000e08:	24000698 	.word	0x24000698
 8000e0c:	24000678 	.word	0x24000678
 8000e10:	240005e0 	.word	0x240005e0
 8000e14:	240003c8 	.word	0x240003c8
 8000e18:	2400001c 	.word	0x2400001c
 8000e1c:	24000680 	.word	0x24000680
 8000e20:	24000020 	.word	0x24000020
 8000e24:	24000024 	.word	0x24000024
 8000e28:	2400067c 	.word	0x2400067c
 8000e2c:	24000684 	.word	0x24000684
 8000e30:	24001610 	.word	0x24001610

08000e34 <Error_Handler>:
 8000e34:	b672      	cpsid	i
 8000e36:	e7fe      	b.n	8000e36 <Error_Handler+0x2>

08000e38 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_MspInit+0x20>)
{
 8000e3a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000e40:	f042 0202 	orr.w	r2, r2, #2
 8000e44:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	b002      	add	sp, #8
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e5c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000e60:	b0be      	sub	sp, #248	; 0xf8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	2100      	movs	r1, #0
{
 8000e64:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e66:	22c8      	movs	r2, #200	; 0xc8
 8000e68:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	910a      	str	r1, [sp, #40]	; 0x28
 8000e6c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000e70:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f004 fd20 	bl	80058b8 <memset>
  if(hi2s->Instance==SPI1)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	4a75      	ldr	r2, [pc, #468]	; (8001050 <HAL_I2S_MspInit+0x1f4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d005      	beq.n	8000e8c <HAL_I2S_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hi2s->Instance==SPI2)
 8000e80:	4a74      	ldr	r2, [pc, #464]	; (8001054 <HAL_I2S_MspInit+0x1f8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d06d      	beq.n	8000f62 <HAL_I2S_MspInit+0x106>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e86:	b03e      	add	sp, #248	; 0xf8
 8000e88:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e90:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e92:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e98:	f002 fd1c 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	f040 80ce 	bne.w	800103e <HAL_I2S_MspInit+0x1e2>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea2:	4b6d      	ldr	r3, [pc, #436]	; (8001058 <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea4:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000ea6:	f04f 0801 	mov.w	r8, #1
 8000eaa:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	486a      	ldr	r0, [pc, #424]	; (800105c <HAL_I2S_MspInit+0x200>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000eb8:	4d69      	ldr	r5, [pc, #420]	; (8001060 <HAL_I2S_MspInit+0x204>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000ebe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000ec2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000ec6:	9200      	str	r2, [sp, #0]
 8000ec8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eda:	f002 0201 	and.w	r2, r2, #1
 8000ede:	9201      	str	r2, [sp, #4]
 8000ee0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000eee:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef4:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000efc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000efe:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000f02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f06:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f001 fad1 	bl	80024b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8000f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f12:	2302      	movs	r3, #2
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000f14:	a906      	add	r1, sp, #24
 8000f16:	4853      	ldr	r0, [pc, #332]	; (8001064 <HAL_I2S_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f18:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8000f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f1e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f001 fac5 	bl	80024b0 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000f28:	494f      	ldr	r1, [pc, #316]	; (8001068 <HAL_I2S_MspInit+0x20c>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000f2a:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f2c:	4628      	mov	r0, r5
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2e:	622b      	str	r3, [r5, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f30:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000f32:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f42:	616a      	str	r2, [r5, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4c:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f50:	f000 fb2a 	bl	80015a8 <HAL_DMA_Init>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d16f      	bne.n	8001038 <HAL_I2S_MspInit+0x1dc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000f58:	64a5      	str	r5, [r4, #72]	; 0x48
 8000f5a:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8000f5c:	b03e      	add	sp, #248	; 0xf8
 8000f5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f66:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f002 fcb1 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d166      	bne.n	8001044 <HAL_I2S_MspInit+0x1e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f78:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f7a:	f04f 0800 	mov.w	r8, #0
 8000f7e:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	4839      	ldr	r0, [pc, #228]	; (800106c <HAL_I2S_MspInit+0x210>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8000f8c:	4d38      	ldr	r5, [pc, #224]	; (8001070 <HAL_I2S_MspInit+0x214>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f8e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000f92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000f96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f9a:	9203      	str	r2, [sp, #12]
 8000f9c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa2:	f042 0204 	orr.w	r2, r2, #4
 8000fa6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fae:	f002 0204 	and.w	r2, r2, #4
 8000fb2:	9204      	str	r2, [sp, #16]
 8000fb4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fba:	f042 0202 	orr.w	r2, r2, #2
 8000fbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc2:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc8:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fd0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000fda:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f001 fa67 	bl	80024b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fe2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000fe6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	a906      	add	r1, sp, #24
 8000fea:	4822      	ldr	r0, [pc, #136]	; (8001074 <HAL_I2S_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fec:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ff2:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f001 fa5b 	bl	80024b0 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000ffa:	2228      	movs	r2, #40	; 0x28
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffc:	2300      	movs	r3, #0
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8000ffe:	491e      	ldr	r1, [pc, #120]	; (8001078 <HAL_I2S_MspInit+0x21c>)
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001000:	606a      	str	r2, [r5, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001006:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001008:	4628      	mov	r0, r5
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800100a:	622b      	str	r3, [r5, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100c:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800100e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	612a      	str	r2, [r5, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8001018:	6029      	str	r1, [r5, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101a:	2140      	movs	r1, #64	; 0x40
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800101c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001020:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	60a9      	str	r1, [r5, #8]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001026:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001028:	f000 fabe 	bl	80015a8 <HAL_DMA_Init>
 800102c:	b968      	cbnz	r0, 800104a <HAL_I2S_MspInit+0x1ee>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800102e:	6465      	str	r5, [r4, #68]	; 0x44
 8001030:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8001032:	b03e      	add	sp, #248	; 0xf8
 8001034:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001038:	f7ff fefc 	bl	8000e34 <Error_Handler>
 800103c:	e78c      	b.n	8000f58 <HAL_I2S_MspInit+0xfc>
      Error_Handler();
 800103e:	f7ff fef9 	bl	8000e34 <Error_Handler>
 8001042:	e72e      	b.n	8000ea2 <HAL_I2S_MspInit+0x46>
      Error_Handler();
 8001044:	f7ff fef6 	bl	8000e34 <Error_Handler>
 8001048:	e795      	b.n	8000f76 <HAL_I2S_MspInit+0x11a>
      Error_Handler();
 800104a:	f7ff fef3 	bl	8000e34 <Error_Handler>
 800104e:	e7ee      	b.n	800102e <HAL_I2S_MspInit+0x1d2>
 8001050:	40013000 	.word	0x40013000
 8001054:	40003800 	.word	0x40003800
 8001058:	58024400 	.word	0x58024400
 800105c:	58020000 	.word	0x58020000
 8001060:	240003cc 	.word	0x240003cc
 8001064:	58021800 	.word	0x58021800
 8001068:	40020010 	.word	0x40020010
 800106c:	58020800 	.word	0x58020800
 8001070:	24000444 	.word	0x24000444
 8001074:	58020400 	.word	0x58020400
 8001078:	40020428 	.word	0x40020428

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b530      	push	{r4, r5, lr}
 800107e:	b0bd      	sub	sp, #244	; 0xf4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2100      	movs	r1, #0
{
 8001082:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	22c8      	movs	r2, #200	; 0xc8
 8001086:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	9108      	str	r1, [sp, #32]
 800108a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800108e:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001092:	f004 fc11 	bl	80058b8 <memset>
  if(hspi->Instance==SPI3)
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <HAL_SPI_MspInit+0xe0>)
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d001      	beq.n	80010a2 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800109e:	b03d      	add	sp, #244	; 0xf4
 80010a0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80010a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80010aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f002 fc11 	bl	80038d4 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d14f      	bne.n	8001156 <HAL_SPI_MspInit+0xda>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b8:	2404      	movs	r4, #4
 80010ba:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80010bc:	2107      	movs	r1, #7
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010be:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80010cc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010d0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010dc:	f042 0202 	orr.w	r2, r2, #2
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010e8:	f002 0202 	and.w	r2, r2, #2
 80010ec:	9202      	str	r2, [sp, #8]
 80010ee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010f4:	f042 0204 	orr.w	r2, r2, #4
 80010f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001100:	9108      	str	r1, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001108:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800110c:	2400      	movs	r4, #0
 800110e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001114:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f001 f9ca 	bl	80024b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001120:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	a904      	add	r1, sp, #16
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001126:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800112a:	2406      	movs	r4, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001130:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001132:	f001 f9bd 	bl	80024b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113c:	a904      	add	r1, sp, #16
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001140:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001146:	2200      	movs	r2, #0
 8001148:	2303      	movs	r3, #3
 800114a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f001 f9af 	bl	80024b0 <HAL_GPIO_Init>
}
 8001152:	b03d      	add	sp, #244	; 0xf4
 8001154:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001156:	f7ff fe6d 	bl	8000e34 <Error_Handler>
 800115a:	e7ac      	b.n	80010b6 <HAL_SPI_MspInit+0x3a>
 800115c:	40003c00 	.word	0x40003c00
 8001160:	58024400 	.word	0x58024400
 8001164:	58020400 	.word	0x58020400
 8001168:	58020800 	.word	0x58020800

0800116c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler>
 800116e:	bf00      	nop

08001170 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <HardFault_Handler>
 8001172:	bf00      	nop

08001174 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler>
 8001176:	bf00      	nop

08001178 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <BusFault_Handler>
 800117a:	bf00      	nop

0800117c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler>
 800117e:	bf00      	nop

08001180 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <DebugMon_Handler>:
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <PendSV_Handler>:
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 b88c 	b.w	80012a8 <HAL_IncTick>

08001190 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001190:	4801      	ldr	r0, [pc, #4]	; (8001198 <DMA1_Stream0_IRQHandler+0x8>)
 8001192:	f000 be3f 	b.w	8001e14 <HAL_DMA_IRQHandler>
 8001196:	bf00      	nop
 8001198:	240003cc 	.word	0x240003cc

0800119c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800119c:	4801      	ldr	r0, [pc, #4]	; (80011a4 <DMA2_Stream1_IRQHandler+0x8>)
 800119e:	f000 be39 	b.w	8001e14 <HAL_DMA_IRQHandler>
 80011a2:	bf00      	nop
 80011a4:	24000444 	.word	0x24000444

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ac:	f7ff f894 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	; (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f004 fb77 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fc3f 	bl	8000a5c <main>
  bx  lr
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e8:	240003a0 	.word	0x240003a0
  ldr r2, =_sidata
 80011ec:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 80011f0:	240003a0 	.word	0x240003a0
  ldr r4, =_ebss
 80011f4:	240018a8 	.word	0x240018a8

080011f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC3_IRQHandler>
	...

080011fc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_InitTick+0x40>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b90b      	cbnz	r3, 8001206 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001204:	4770      	bx	lr
{
 8001206:	b510      	push	{r4, lr}
 8001208:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120e:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_InitTick+0x44>)
 8001210:	fbb0 f3f3 	udiv	r3, r0, r3
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	fbb0 f0f3 	udiv	r0, r0, r3
 800121a:	f000 f8cd 	bl	80013b8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	2c0f      	cmp	r4, #15
 8001220:	d800      	bhi.n	8001224 <HAL_InitTick+0x28>
 8001222:	b108      	cbz	r0, 8001228 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
}
 8001226:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	4621      	mov	r1, r4
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f876 	bl	8001320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_InitTick+0x48>)
 8001236:	2000      	movs	r0, #0
 8001238:	601c      	str	r4, [r3, #0]
}
 800123a:	bd10      	pop	{r4, pc}
 800123c:	24000398 	.word	0x24000398
 8001240:	24000000 	.word	0x24000000
 8001244:	2400039c 	.word	0x2400039c

08001248 <HAL_Init>:
{
 8001248:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800124c:	4c12      	ldr	r4, [pc, #72]	; (8001298 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124e:	f000 f855 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001252:	f001 fff9 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_Init+0x54>)
 8001258:	4911      	ldr	r1, [pc, #68]	; (80012a0 <HAL_Init+0x58>)
 800125a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800125c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800125e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001262:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001266:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001268:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800126a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001270:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001274:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001276:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800127a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800127e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001280:	f7ff ffbc 	bl	80011fc <HAL_InitTick>
 8001284:	b110      	cbz	r0, 800128c <HAL_Init+0x44>
    return HAL_ERROR;
 8001286:	2401      	movs	r4, #1
}
 8001288:	4620      	mov	r0, r4
 800128a:	bd10      	pop	{r4, pc}
 800128c:	4604      	mov	r4, r0
  HAL_MspInit();
 800128e:	f7ff fdd3 	bl	8000e38 <HAL_MspInit>
}
 8001292:	4620      	mov	r0, r4
 8001294:	bd10      	pop	{r4, pc}
 8001296:	bf00      	nop
 8001298:	24000004 	.word	0x24000004
 800129c:	58024400 	.word	0x58024400
 80012a0:	08005928 	.word	0x08005928
 80012a4:	24000000 	.word	0x24000000

080012a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_IncTick+0x10>)
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_IncTick+0x14>)
 80012ac:	6811      	ldr	r1, [r2, #0]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	440b      	add	r3, r1
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	240018a4 	.word	0x240018a4
 80012bc:	24000398 	.word	0x24000398

080012c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012c0:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <HAL_GetTick+0x8>)
 80012c2:	6818      	ldr	r0, [r3, #0]
}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	240018a4 	.word	0x240018a4

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
 80012ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff6 	bl	80012c0 <HAL_GetTick>
 80012d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	1c63      	adds	r3, r4, #1
 80012d8:	d002      	beq.n	80012e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <HAL_Delay+0x20>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	1b43      	subs	r3, r0, r5
 80012e6:	42a3      	cmp	r3, r4
 80012e8:	d3fa      	bcc.n	80012e0 <HAL_Delay+0x14>
  {
  }
}
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	24000398 	.word	0x24000398

080012f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_GetREVID+0x8>)
 80012f2:	6818      	ldr	r0, [r3, #0]
}
 80012f4:	0c00      	lsrs	r0, r0, #16
 80012f6:	4770      	bx	lr
 80012f8:	5c001000 	.word	0x5c001000

080012fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001302:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001306:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001312:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001314:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_NVIC_SetPriority+0x70>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001332:	f1be 0f04 	cmp.w	lr, #4
 8001336:	bf28      	it	cs
 8001338:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133c:	f1bc 0f06 	cmp.w	ip, #6
 8001340:	d91a      	bls.n	8001378 <HAL_NVIC_SetPriority+0x58>
 8001342:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 3cff 	mov.w	ip, #4294967295
 8001348:	fa0c fc03 	lsl.w	ip, ip, r3
 800134c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001354:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001356:	fa0c fc0e 	lsl.w	ip, ip, lr
 800135a:	ea21 010c 	bic.w	r1, r1, ip
 800135e:	fa01 f103 	lsl.w	r1, r1, r3
 8001362:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001366:	db0a      	blt.n	800137e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	0109      	lsls	r1, r1, #4
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_NVIC_SetPriority+0x74>)
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	4403      	add	r3, r0
 8001370:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001374:	f85d fb04 	ldr.w	pc, [sp], #4
 8001378:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	4613      	mov	r3, r2
 800137c:	e7e8      	b.n	8001350 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	f000 000f 	and.w	r0, r0, #15
 8001382:	0109      	lsls	r1, r1, #4
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_NVIC_SetPriority+0x78>)
 8001386:	b2c9      	uxtb	r1, r1
 8001388:	4403      	add	r3, r0
 800138a:	7619      	strb	r1, [r3, #24]
 800138c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ecfc 	.word	0xe000ecfc

0800139c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800139c:	2800      	cmp	r0, #0
 800139e:	db07      	blt.n	80013b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a0:	2301      	movs	r3, #1
 80013a2:	f000 011f 	and.w	r1, r0, #31
 80013a6:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_NVIC_EnableIRQ+0x18>)
 80013a8:	0940      	lsrs	r0, r0, #5
 80013aa:	408b      	lsls	r3, r1
 80013ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	1e43      	subs	r3, r0, #1
 80013ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013be:	d20c      	bcs.n	80013da <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	4906      	ldr	r1, [pc, #24]	; (80013e0 <HAL_SYSTICK_Config+0x28>)
 80013c8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013cc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013e4:	6802      	ldr	r2, [r0, #0]
{
 80013e6:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <DMA_CalcBaseAndBitshift+0xd0>)
 80013ea:	4833      	ldr	r0, [pc, #204]	; (80014b8 <DMA_CalcBaseAndBitshift+0xd4>)
{
 80013ec:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013ee:	4e33      	ldr	r6, [pc, #204]	; (80014bc <DMA_CalcBaseAndBitshift+0xd8>)
 80013f0:	4d33      	ldr	r5, [pc, #204]	; (80014c0 <DMA_CalcBaseAndBitshift+0xdc>)
 80013f2:	42b2      	cmp	r2, r6
 80013f4:	bf18      	it	ne
 80013f6:	429a      	cmpne	r2, r3
 80013f8:	4c32      	ldr	r4, [pc, #200]	; (80014c4 <DMA_CalcBaseAndBitshift+0xe0>)
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	42aa      	cmp	r2, r5
 8001402:	bf08      	it	eq
 8001404:	f043 0301 	orreq.w	r3, r3, #1
 8001408:	42a2      	cmp	r2, r4
 800140a:	bf08      	it	eq
 800140c:	f043 0301 	orreq.w	r3, r3, #1
 8001410:	3430      	adds	r4, #48	; 0x30
 8001412:	4282      	cmp	r2, r0
 8001414:	bf08      	it	eq
 8001416:	f043 0301 	orreq.w	r3, r3, #1
 800141a:	3030      	adds	r0, #48	; 0x30
 800141c:	42a2      	cmp	r2, r4
 800141e:	bf08      	it	eq
 8001420:	f043 0301 	orreq.w	r3, r3, #1
 8001424:	3430      	adds	r4, #48	; 0x30
 8001426:	4282      	cmp	r2, r0
 8001428:	bf08      	it	eq
 800142a:	f043 0301 	orreq.w	r3, r3, #1
 800142e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001432:	42a2      	cmp	r2, r4
 8001434:	bf08      	it	eq
 8001436:	f043 0301 	orreq.w	r3, r3, #1
 800143a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800143e:	4282      	cmp	r2, r0
 8001440:	bf08      	it	eq
 8001442:	f043 0301 	orreq.w	r3, r3, #1
 8001446:	3030      	adds	r0, #48	; 0x30
 8001448:	42a2      	cmp	r2, r4
 800144a:	bf08      	it	eq
 800144c:	f043 0301 	orreq.w	r3, r3, #1
 8001450:	3430      	adds	r4, #48	; 0x30
 8001452:	4282      	cmp	r2, r0
 8001454:	bf08      	it	eq
 8001456:	f043 0301 	orreq.w	r3, r3, #1
 800145a:	3030      	adds	r0, #48	; 0x30
 800145c:	42a2      	cmp	r2, r4
 800145e:	bf08      	it	eq
 8001460:	f043 0301 	orreq.w	r3, r3, #1
 8001464:	3430      	adds	r4, #48	; 0x30
 8001466:	4282      	cmp	r2, r0
 8001468:	bf08      	it	eq
 800146a:	f043 0301 	orreq.w	r3, r3, #1
 800146e:	3030      	adds	r0, #48	; 0x30
 8001470:	42a2      	cmp	r2, r4
 8001472:	bf08      	it	eq
 8001474:	f043 0301 	orreq.w	r3, r3, #1
 8001478:	4282      	cmp	r2, r0
 800147a:	bf08      	it	eq
 800147c:	f043 0301 	orreq.w	r3, r3, #1
 8001480:	b913      	cbnz	r3, 8001488 <DMA_CalcBaseAndBitshift+0xa4>
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <DMA_CalcBaseAndBitshift+0xe4>)
 8001484:	429a      	cmp	r2, r3
 8001486:	d112      	bne.n	80014ae <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001488:	b2d3      	uxtb	r3, r2
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800148c:	4c10      	ldr	r4, [pc, #64]	; (80014d0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800148e:	3b10      	subs	r3, #16
 8001490:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8001494:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001496:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800149a:	5c20      	ldrb	r0, [r4, r0]
 800149c:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <DMA_CalcBaseAndBitshift+0xf0>)
 80014a0:	ea00 0002 	and.w	r0, r0, r2
 80014a4:	bf88      	it	hi
 80014a6:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80014a8:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80014aa:	bc70      	pop	{r4, r5, r6}
 80014ac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80014ae:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80014b2:	e7f9      	b.n	80014a8 <DMA_CalcBaseAndBitshift+0xc4>
 80014b4:	40020010 	.word	0x40020010
 80014b8:	40020070 	.word	0x40020070
 80014bc:	40020028 	.word	0x40020028
 80014c0:	40020040 	.word	0x40020040
 80014c4:	40020058 	.word	0x40020058
 80014c8:	400204b8 	.word	0x400204b8
 80014cc:	aaaaaaab 	.word	0xaaaaaaab
 80014d0:	08005938 	.word	0x08005938
 80014d4:	fffffc00 	.word	0xfffffc00

080014d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80014d8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80014dc:	4927      	ldr	r1, [pc, #156]	; (800157c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80014de:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014e0:	4d27      	ldr	r5, [pc, #156]	; (8001580 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80014e2:	4c28      	ldr	r4, [pc, #160]	; (8001584 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80014e4:	42ab      	cmp	r3, r5
 80014e6:	bf18      	it	ne
 80014e8:	4293      	cmpne	r3, r2
 80014ea:	bf0c      	ite	eq
 80014ec:	2201      	moveq	r2, #1
 80014ee:	2200      	movne	r2, #0
 80014f0:	428b      	cmp	r3, r1
 80014f2:	bf08      	it	eq
 80014f4:	f042 0201 	orreq.w	r2, r2, #1
 80014f8:	3128      	adds	r1, #40	; 0x28
 80014fa:	42a3      	cmp	r3, r4
 80014fc:	bf08      	it	eq
 80014fe:	f042 0201 	orreq.w	r2, r2, #1
 8001502:	3428      	adds	r4, #40	; 0x28
 8001504:	428b      	cmp	r3, r1
 8001506:	bf08      	it	eq
 8001508:	f042 0201 	orreq.w	r2, r2, #1
 800150c:	3128      	adds	r1, #40	; 0x28
 800150e:	42a3      	cmp	r3, r4
 8001510:	bf08      	it	eq
 8001512:	f042 0201 	orreq.w	r2, r2, #1
 8001516:	428b      	cmp	r3, r1
 8001518:	bf08      	it	eq
 800151a:	f042 0201 	orreq.w	r2, r2, #1
 800151e:	b912      	cbnz	r2, 8001526 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d113      	bne.n	800154e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4918      	ldr	r1, [pc, #96]	; (800158c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800152c:	3b08      	subs	r3, #8
 800152e:	4c19      	ldr	r4, [pc, #100]	; (8001594 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001530:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001534:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001536:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800153a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800153e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001546:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800154a:	bc30      	pop	{r4, r5}
 800154c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800154e:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001550:	4a11      	ldr	r2, [pc, #68]	; (8001598 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001552:	4c12      	ldr	r4, [pc, #72]	; (800159c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001554:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001556:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001558:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800155c:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800155e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001562:	d800      	bhi.n	8001566 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8001564:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001568:	f001 041f 	and.w	r4, r1, #31
 800156c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800156e:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001570:	40a3      	lsls	r3, r4
 8001572:	4c0c      	ldr	r4, [pc, #48]	; (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001574:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001576:	e7e5      	b.n	8001544 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8001578:	58025408 	.word	0x58025408
 800157c:	58025430 	.word	0x58025430
 8001580:	5802541c 	.word	0x5802541c
 8001584:	58025444 	.word	0x58025444
 8001588:	58025494 	.word	0x58025494
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	16009600 	.word	0x16009600
 8001594:	58025880 	.word	0x58025880
 8001598:	bffdfbf0 	.word	0xbffdfbf0
 800159c:	aaaaaaab 	.word	0xaaaaaaab
 80015a0:	10008200 	.word	0x10008200
 80015a4:	40020880 	.word	0x40020880

080015a8 <HAL_DMA_Init>:
{
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ac:	4605      	mov	r5, r0
 80015ae:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff fe86 	bl	80012c0 <HAL_GetTick>
  if(hdma == NULL)
 80015b4:	2d00      	cmp	r5, #0
 80015b6:	f000 8199 	beq.w	80018ec <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ba:	682c      	ldr	r4, [r5, #0]
 80015bc:	4606      	mov	r6, r0
 80015be:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_DMA_Init+0x298>)
 80015c0:	429c      	cmp	r4, r3
 80015c2:	d048      	beq.n	8001656 <HAL_DMA_Init+0xae>
 80015c4:	3318      	adds	r3, #24
 80015c6:	429c      	cmp	r4, r3
 80015c8:	d045      	beq.n	8001656 <HAL_DMA_Init+0xae>
 80015ca:	3330      	adds	r3, #48	; 0x30
 80015cc:	4a9d      	ldr	r2, [pc, #628]	; (8001844 <HAL_DMA_Init+0x29c>)
 80015ce:	4294      	cmp	r4, r2
 80015d0:	bf18      	it	ne
 80015d2:	429c      	cmpne	r4, r3
 80015d4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	4294      	cmp	r4, r2
 80015e0:	bf08      	it	eq
 80015e2:	f043 0301 	orreq.w	r3, r3, #1
 80015e6:	3218      	adds	r2, #24
 80015e8:	4294      	cmp	r4, r2
 80015ea:	bf08      	it	eq
 80015ec:	f043 0301 	orreq.w	r3, r3, #1
 80015f0:	3218      	adds	r2, #24
 80015f2:	4294      	cmp	r4, r2
 80015f4:	bf08      	it	eq
 80015f6:	f043 0301 	orreq.w	r3, r3, #1
 80015fa:	3218      	adds	r2, #24
 80015fc:	4294      	cmp	r4, r2
 80015fe:	bf08      	it	eq
 8001600:	f043 0301 	orreq.w	r3, r3, #1
 8001604:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001608:	4294      	cmp	r4, r2
 800160a:	bf08      	it	eq
 800160c:	f043 0301 	orreq.w	r3, r3, #1
 8001610:	3218      	adds	r2, #24
 8001612:	4294      	cmp	r4, r2
 8001614:	bf08      	it	eq
 8001616:	f043 0301 	orreq.w	r3, r3, #1
 800161a:	3218      	adds	r2, #24
 800161c:	4294      	cmp	r4, r2
 800161e:	bf08      	it	eq
 8001620:	f043 0301 	orreq.w	r3, r3, #1
 8001624:	3218      	adds	r2, #24
 8001626:	4294      	cmp	r4, r2
 8001628:	bf08      	it	eq
 800162a:	f043 0301 	orreq.w	r3, r3, #1
 800162e:	3218      	adds	r2, #24
 8001630:	4294      	cmp	r4, r2
 8001632:	bf08      	it	eq
 8001634:	f043 0301 	orreq.w	r3, r3, #1
 8001638:	3218      	adds	r2, #24
 800163a:	4294      	cmp	r4, r2
 800163c:	bf08      	it	eq
 800163e:	f043 0301 	orreq.w	r3, r3, #1
 8001642:	3218      	adds	r2, #24
 8001644:	4294      	cmp	r4, r2
 8001646:	bf08      	it	eq
 8001648:	f043 0301 	orreq.w	r3, r3, #1
 800164c:	b91b      	cbnz	r3, 8001656 <HAL_DMA_Init+0xae>
 800164e:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <HAL_DMA_Init+0x2a0>)
 8001650:	429c      	cmp	r4, r3
 8001652:	f040 81a4 	bne.w	800199e <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800165c:	2300      	movs	r3, #0
 800165e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6023      	str	r3, [r4, #0]
 800166a:	e006      	b.n	800167a <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166c:	f7ff fe28 	bl	80012c0 <HAL_GetTick>
 8001670:	1b80      	subs	r0, r0, r6
 8001672:	2805      	cmp	r0, #5
 8001674:	f200 8120 	bhi.w	80018b8 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001678:	682c      	ldr	r4, [r5, #0]
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	07df      	lsls	r7, r3, #31
 800167e:	d4f5      	bmi.n	800166c <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001680:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8001686:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001688:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800168a:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168c:	430b      	orrs	r3, r1
 800168e:	6969      	ldr	r1, [r5, #20]
 8001690:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001692:	69e9      	ldr	r1, [r5, #28]
 8001694:	4313      	orrs	r3, r2
 8001696:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001698:	496c      	ldr	r1, [pc, #432]	; (800184c <HAL_DMA_Init+0x2a4>)
 800169a:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	6a28      	ldr	r0, [r5, #32]
 800169e:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016a0:	486b      	ldr	r0, [pc, #428]	; (8001850 <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 80016a2:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80016a6:	2904      	cmp	r1, #4
 80016a8:	f000 8124 	beq.w	80018f4 <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016ac:	6806      	ldr	r6, [r0, #0]
 80016ae:	4869      	ldr	r0, [pc, #420]	; (8001854 <HAL_DMA_Init+0x2ac>)
 80016b0:	4030      	ands	r0, r6
 80016b2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80016b6:	f080 80dd 	bcs.w	8001874 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80016ba:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80016bc:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016be:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80016c2:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016c4:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016c6:	4628      	mov	r0, r5
 80016c8:	f7ff fe8c 	bl	80013e4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80016ce:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016d0:	495b      	ldr	r1, [pc, #364]	; (8001840 <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016d2:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016d6:	4e60      	ldr	r6, [pc, #384]	; (8001858 <HAL_DMA_Init+0x2b0>)
 80016d8:	4f60      	ldr	r7, [pc, #384]	; (800185c <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016da:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016dc:	4a60      	ldr	r2, [pc, #384]	; (8001860 <HAL_DMA_Init+0x2b8>)
 80016de:	1ba6      	subs	r6, r4, r6
 80016e0:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016e2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016e4:	eba4 0b02 	sub.w	fp, r4, r2
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_DMA_Init+0x2bc>)
 80016ea:	fab6 f686 	clz	r6, r6
 80016ee:	fabb fb8b 	clz	fp, fp
 80016f2:	fab7 f787 	clz	r7, r7
 80016f6:	eba4 0a03 	sub.w	sl, r4, r3
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_DMA_Init+0x2c0>)
 80016fc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001700:	485a      	ldr	r0, [pc, #360]	; (800186c <HAL_DMA_Init+0x2c4>)
 8001702:	429c      	cmp	r4, r3
 8001704:	bf18      	it	ne
 8001706:	428c      	cmpne	r4, r1
 8001708:	f103 0318 	add.w	r3, r3, #24
 800170c:	faba fa8a 	clz	sl, sl
 8001710:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8001714:	bf0c      	ite	eq
 8001716:	2101      	moveq	r1, #1
 8001718:	2100      	movne	r1, #0
 800171a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800171e:	1a22      	subs	r2, r4, r0
 8001720:	429c      	cmp	r4, r3
 8001722:	bf08      	it	eq
 8001724:	f041 0101 	orreq.w	r1, r1, #1
 8001728:	3318      	adds	r3, #24
 800172a:	097f      	lsrs	r7, r7, #5
 800172c:	fab2 f282 	clz	r2, r2
 8001730:	429c      	cmp	r4, r3
 8001732:	bf08      	it	eq
 8001734:	f041 0101 	orreq.w	r1, r1, #1
 8001738:	3318      	adds	r3, #24
 800173a:	0952      	lsrs	r2, r2, #5
 800173c:	429c      	cmp	r4, r3
 800173e:	bf08      	it	eq
 8001740:	f041 0101 	orreq.w	r1, r1, #1
 8001744:	3318      	adds	r3, #24
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	429c      	cmp	r4, r3
 800174a:	bf08      	it	eq
 800174c:	f041 0101 	orreq.w	r1, r1, #1
 8001750:	3318      	adds	r3, #24
 8001752:	429c      	cmp	r4, r3
 8001754:	bf08      	it	eq
 8001756:	f041 0101 	orreq.w	r1, r1, #1
 800175a:	3318      	adds	r3, #24
 800175c:	429c      	cmp	r4, r3
 800175e:	bf08      	it	eq
 8001760:	f041 0101 	orreq.w	r1, r1, #1
 8001764:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001768:	429c      	cmp	r4, r3
 800176a:	bf08      	it	eq
 800176c:	f041 0101 	orreq.w	r1, r1, #1
 8001770:	3318      	adds	r3, #24
 8001772:	429c      	cmp	r4, r3
 8001774:	bf08      	it	eq
 8001776:	f041 0101 	orreq.w	r1, r1, #1
 800177a:	3318      	adds	r3, #24
 800177c:	429c      	cmp	r4, r3
 800177e:	bf08      	it	eq
 8001780:	f041 0101 	orreq.w	r1, r1, #1
 8001784:	3318      	adds	r3, #24
 8001786:	429c      	cmp	r4, r3
 8001788:	bf08      	it	eq
 800178a:	f041 0101 	orreq.w	r1, r1, #1
 800178e:	3318      	adds	r3, #24
 8001790:	429c      	cmp	r4, r3
 8001792:	bf08      	it	eq
 8001794:	f041 0101 	orreq.w	r1, r1, #1
 8001798:	3318      	adds	r3, #24
 800179a:	429c      	cmp	r4, r3
 800179c:	bf08      	it	eq
 800179e:	f041 0101 	orreq.w	r1, r1, #1
 80017a2:	3318      	adds	r3, #24
 80017a4:	429c      	cmp	r4, r3
 80017a6:	bf08      	it	eq
 80017a8:	f041 0101 	orreq.w	r1, r1, #1
 80017ac:	3318      	adds	r3, #24
 80017ae:	429c      	cmp	r4, r3
 80017b0:	bf08      	it	eq
 80017b2:	f041 0101 	orreq.w	r1, r1, #1
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_DMA_Init+0x2c8>)
 80017b8:	ea4b 0101 	orr.w	r1, fp, r1
 80017bc:	eba4 0803 	sub.w	r8, r4, r3
 80017c0:	3314      	adds	r3, #20
 80017c2:	ea4a 0101 	orr.w	r1, sl, r1
 80017c6:	fab8 f888 	clz	r8, r8
 80017ca:	eba4 0903 	sub.w	r9, r4, r3
 80017ce:	3314      	adds	r3, #20
 80017d0:	4331      	orrs	r1, r6
 80017d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80017d6:	fab9 f989 	clz	r9, r9
 80017da:	1ae3      	subs	r3, r4, r3
 80017dc:	4339      	orrs	r1, r7
 80017de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	ea48 0101 	orr.w	r1, r8, r1
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	ea49 0101 	orr.w	r1, r9, r1
 80017f0:	4319      	orrs	r1, r3
 80017f2:	d100      	bne.n	80017f6 <HAL_DMA_Init+0x24e>
 80017f4:	b1da      	cbz	r2, 800182e <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017f6:	4628      	mov	r0, r5
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f7ff fe6d 	bl	80014d8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017fe:	68a9      	ldr	r1, [r5, #8]
 8001800:	9b00      	ldr	r3, [sp, #0]
 8001802:	2980      	cmp	r1, #128	; 0x80
 8001804:	d066      	beq.n	80018d4 <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001806:	6868      	ldr	r0, [r5, #4]
 8001808:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800180a:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800180c:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180e:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001812:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001814:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001816:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800181a:	d862      	bhi.n	80018e2 <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800181c:	1e61      	subs	r1, r4, #1
 800181e:	2907      	cmp	r1, #7
 8001820:	d979      	bls.n	8001916 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001822:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8001824:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001828:	2100      	movs	r1, #0
 800182a:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182c:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001830:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001832:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001834:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8001838:	b003      	add	sp, #12
 800183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	40020010 	.word	0x40020010
 8001844:	40020040 	.word	0x40020040
 8001848:	400204b8 	.word	0x400204b8
 800184c:	fe10803f 	.word	0xfe10803f
 8001850:	5c001000 	.word	0x5c001000
 8001854:	ffff0000 	.word	0xffff0000
 8001858:	58025430 	.word	0x58025430
 800185c:	58025444 	.word	0x58025444
 8001860:	58025408 	.word	0x58025408
 8001864:	5802541c 	.word	0x5802541c
 8001868:	40020028 	.word	0x40020028
 800186c:	58025494 	.word	0x58025494
 8001870:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001874:	6868      	ldr	r0, [r5, #4]
 8001876:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 800187a:	2e1f      	cmp	r6, #31
 800187c:	d925      	bls.n	80018ca <HAL_DMA_Init+0x322>
 800187e:	384f      	subs	r0, #79	; 0x4f
 8001880:	2803      	cmp	r0, #3
 8001882:	d801      	bhi.n	8001888 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8001884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001888:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800188a:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800188c:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800188e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001892:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001896:	f47f af15 	bne.w	80016c4 <HAL_DMA_Init+0x11c>
 800189a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800189c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800189e:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018a0:	2800      	cmp	r0, #0
 80018a2:	f43f af0f 	beq.w	80016c4 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d153      	bne.n	8001952 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 80018aa:	2901      	cmp	r1, #1
 80018ac:	d072      	beq.n	8001994 <HAL_DMA_Init+0x3ec>
 80018ae:	f031 0202 	bics.w	r2, r1, #2
 80018b2:	f47f af07 	bne.w	80016c4 <HAL_DMA_Init+0x11c>
 80018b6:	e054      	b.n	8001962 <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80018ba:	2303      	movs	r3, #3
        return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018be:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80018c0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80018c4:	b003      	add	sp, #12
 80018c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018ca:	4878      	ldr	r0, [pc, #480]	; (8001aac <HAL_DMA_Init+0x504>)
 80018cc:	40f0      	lsrs	r0, r6
 80018ce:	07c0      	lsls	r0, r0, #31
 80018d0:	d5da      	bpl.n	8001888 <HAL_DMA_Init+0x2e0>
 80018d2:	e7d7      	b.n	8001884 <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018d4:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80018d8:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018dc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018de:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e0:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80018e2:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80018e4:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018e8:	676b      	str	r3, [r5, #116]	; 0x74
 80018ea:	e7a0      	b.n	800182e <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 80018ec:	2001      	movs	r0, #1
}
 80018ee:	b003      	add	sp, #12
 80018f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018f4:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f6:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 80018fa:	4306      	orrs	r6, r0
 80018fc:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018fe:	4e6c      	ldr	r6, [pc, #432]	; (8001ab0 <HAL_DMA_Init+0x508>)
 8001900:	403e      	ands	r6, r7
 8001902:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8001906:	d2b5      	bcs.n	8001874 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001908:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800190a:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800190c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001910:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001914:	e7c2      	b.n	800189c <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001916:	9a01      	ldr	r2, [sp, #4]
 8001918:	431a      	orrs	r2, r3
 800191a:	ea49 0902 	orr.w	r9, r9, r2
 800191e:	ea48 0809 	orr.w	r8, r8, r9
 8001922:	ea47 0708 	orr.w	r7, r7, r8
 8001926:	433e      	orrs	r6, r7
 8001928:	ea5a 0606 	orrs.w	r6, sl, r6
 800192c:	d107      	bne.n	800193e <HAL_DMA_Init+0x396>
 800192e:	f1bb 0f00 	cmp.w	fp, #0
 8001932:	d104      	bne.n	800193e <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001936:	4860      	ldr	r0, [pc, #384]	; (8001ab8 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001938:	4423      	add	r3, r4
 800193a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800193c:	e003      	b.n	8001946 <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001940:	485f      	ldr	r0, [pc, #380]	; (8001ac0 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001942:	4423      	add	r3, r4
 8001944:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001946:	2201      	movs	r2, #1
 8001948:	408a      	lsls	r2, r1
 800194a:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 800194e:	676a      	str	r2, [r5, #116]	; 0x74
 8001950:	e76a      	b.n	8001828 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001952:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 8001958:	2902      	cmp	r1, #2
 800195a:	d905      	bls.n	8001968 <HAL_DMA_Init+0x3c0>
 800195c:	2903      	cmp	r1, #3
 800195e:	f47f aeb1 	bne.w	80016c4 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001962:	01c2      	lsls	r2, r0, #7
 8001964:	f57f aeae 	bpl.w	80016c4 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8001968:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800196a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800196c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800196e:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001970:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8001974:	e7a6      	b.n	80018c4 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8001976:	2903      	cmp	r1, #3
 8001978:	f63f aea4 	bhi.w	80016c4 <HAL_DMA_Init+0x11c>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <HAL_DMA_Init+0x3dc>)
 800197e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8001982:	bf00      	nop
 8001984:	08001969 	.word	0x08001969
 8001988:	08001963 	.word	0x08001963
 800198c:	08001969 	.word	0x08001969
 8001990:	08001995 	.word	0x08001995
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001994:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001998:	f47f ae94 	bne.w	80016c4 <HAL_DMA_Init+0x11c>
 800199c:	e7e4      	b.n	8001968 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_DMA_Init+0x51c>)
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <HAL_DMA_Init+0x520>)
 80019a2:	eba4 0b02 	sub.w	fp, r4, r2
 80019a6:	4e49      	ldr	r6, [pc, #292]	; (8001acc <HAL_DMA_Init+0x524>)
 80019a8:	eba4 0a03 	sub.w	sl, r4, r3
 80019ac:	4f48      	ldr	r7, [pc, #288]	; (8001ad0 <HAL_DMA_Init+0x528>)
 80019ae:	fabb fb8b 	clz	fp, fp
 80019b2:	1ba6      	subs	r6, r4, r6
 80019b4:	faba fa8a 	clz	sl, sl
 80019b8:	333c      	adds	r3, #60	; 0x3c
 80019ba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80019be:	fab6 f686 	clz	r6, r6
 80019c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80019c6:	1be7      	subs	r7, r4, r7
 80019c8:	eba4 0803 	sub.w	r8, r4, r3
 80019cc:	0976      	lsrs	r6, r6, #5
 80019ce:	3314      	adds	r3, #20
 80019d0:	fab7 f787 	clz	r7, r7
 80019d4:	ea4b 010a 	orr.w	r1, fp, sl
 80019d8:	fab8 f888 	clz	r8, r8
 80019dc:	eba4 0903 	sub.w	r9, r4, r3
 80019e0:	097f      	lsrs	r7, r7, #5
 80019e2:	4331      	orrs	r1, r6
 80019e4:	3314      	adds	r3, #20
 80019e6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80019ea:	fab9 f989 	clz	r9, r9
 80019ee:	4339      	orrs	r1, r7
 80019f0:	1ae3      	subs	r3, r4, r3
 80019f2:	4838      	ldr	r0, [pc, #224]	; (8001ad4 <HAL_DMA_Init+0x52c>)
 80019f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80019f8:	ea48 0101 	orr.w	r1, r8, r1
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	1a22      	subs	r2, r4, r0
 8001a02:	ea49 0101 	orr.w	r1, r9, r1
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	4319      	orrs	r1, r3
 8001a0e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Init+0x472>
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d041      	beq.n	8001a9e <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1a:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a1c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001ae0 <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a20:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001a24:	2100      	movs	r1, #0
 8001a26:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a2a:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a2c:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a30:	68a9      	ldr	r1, [r5, #8]
 8001a32:	2940      	cmp	r1, #64	; 0x40
 8001a34:	d030      	beq.n	8001a98 <HAL_DMA_Init+0x4f0>
 8001a36:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8001a3a:	fab1 f181 	clz	r1, r1
 8001a3e:	0949      	lsrs	r1, r1, #5
 8001a40:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a44:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a46:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a48:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_DMA_Init+0x530>)
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a52:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a54:	4422      	add	r2, r4
 8001a56:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a5a:	69a9      	ldr	r1, [r5, #24]
 8001a5c:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a60:	69e9      	ldr	r1, [r5, #28]
 8001a62:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a66:	6a29      	ldr	r1, [r5, #32]
 8001a68:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8001a6c:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a70:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a74:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a76:	4919      	ldr	r1, [pc, #100]	; (8001adc <HAL_DMA_Init+0x534>)
 8001a78:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a7c:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a7e:	0909      	lsrs	r1, r1, #4
 8001a80:	0089      	lsls	r1, r1, #2
 8001a82:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a84:	f7ff fcae 	bl	80013e4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a88:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001a8a:	9b00      	ldr	r3, [sp, #0]
 8001a8c:	f001 041f 	and.w	r4, r1, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	40a1      	lsls	r1, r4
 8001a94:	6041      	str	r1, [r0, #4]
 8001a96:	e6ae      	b.n	80017f6 <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a98:	f04f 0e10 	mov.w	lr, #16
 8001a9c:	e7d2      	b.n	8001a44 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a9e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001aa0:	2303      	movs	r3, #3
    return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001aa6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8001aaa:	e70b      	b.n	80018c4 <HAL_DMA_Init+0x31c>
 8001aac:	c3c0003f 	.word	0xc3c0003f
 8001ab0:	ffff0000 	.word	0xffff0000
 8001ab4:	1000823f 	.word	0x1000823f
 8001ab8:	40020940 	.word	0x40020940
 8001abc:	1600963f 	.word	0x1600963f
 8001ac0:	58025940 	.word	0x58025940
 8001ac4:	58025408 	.word	0x58025408
 8001ac8:	5802541c 	.word	0x5802541c
 8001acc:	58025430 	.word	0x58025430
 8001ad0:	58025444 	.word	0x58025444
 8001ad4:	58025494 	.word	0x58025494
 8001ad8:	a7fdabf8 	.word	0xa7fdabf8
 8001adc:	cccccccd 	.word	0xcccccccd
 8001ae0:	fffe000f 	.word	0xfffe000f

08001ae4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	f000 8177 	beq.w	8001dd8 <HAL_DMA_Start_IT+0x2f4>
 8001aea:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8001aec:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001af0:	2801      	cmp	r0, #1
 8001af2:	f000 8173 	beq.w	8001ddc <HAL_DMA_Start_IT+0x2f8>
 8001af6:	2001      	movs	r0, #1
{
 8001af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afc:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001b00:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b04:	4284      	cmp	r4, r0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001b0c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b0e:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001b12:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8001b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1a:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8001b1c:	f8dc 4000 	ldr.w	r4, [ip]
 8001b20:	4d53      	ldr	r5, [pc, #332]	; (8001c70 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001b28:	4e52      	ldr	r6, [pc, #328]	; (8001c74 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	4852      	ldr	r0, [pc, #328]	; (8001c78 <HAL_DMA_Start_IT+0x194>)
 8001b30:	42ac      	cmp	r4, r5
 8001b32:	bf18      	it	ne
 8001b34:	4284      	cmpne	r4, r0
 8001b36:	f105 0518 	add.w	r5, r5, #24
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2001      	moveq	r0, #1
 8001b3e:	2000      	movne	r0, #0
 8001b40:	42ac      	cmp	r4, r5
 8001b42:	bf08      	it	eq
 8001b44:	f040 0001 	orreq.w	r0, r0, #1
 8001b48:	3518      	adds	r5, #24
 8001b4a:	42ac      	cmp	r4, r5
 8001b4c:	bf08      	it	eq
 8001b4e:	f040 0001 	orreq.w	r0, r0, #1
 8001b52:	3518      	adds	r5, #24
 8001b54:	42ac      	cmp	r4, r5
 8001b56:	bf08      	it	eq
 8001b58:	f040 0001 	orreq.w	r0, r0, #1
 8001b5c:	3518      	adds	r5, #24
 8001b5e:	42ac      	cmp	r4, r5
 8001b60:	bf08      	it	eq
 8001b62:	f040 0001 	orreq.w	r0, r0, #1
 8001b66:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001b6a:	42ac      	cmp	r4, r5
 8001b6c:	bf08      	it	eq
 8001b6e:	f040 0001 	orreq.w	r0, r0, #1
 8001b72:	3518      	adds	r5, #24
 8001b74:	42ac      	cmp	r4, r5
 8001b76:	bf08      	it	eq
 8001b78:	f040 0001 	orreq.w	r0, r0, #1
 8001b7c:	3518      	adds	r5, #24
 8001b7e:	42ac      	cmp	r4, r5
 8001b80:	bf08      	it	eq
 8001b82:	f040 0001 	orreq.w	r0, r0, #1
 8001b86:	3518      	adds	r5, #24
 8001b88:	42ac      	cmp	r4, r5
 8001b8a:	bf08      	it	eq
 8001b8c:	f040 0001 	orreq.w	r0, r0, #1
 8001b90:	3518      	adds	r5, #24
 8001b92:	42ac      	cmp	r4, r5
 8001b94:	bf08      	it	eq
 8001b96:	f040 0001 	orreq.w	r0, r0, #1
 8001b9a:	3518      	adds	r5, #24
 8001b9c:	42ac      	cmp	r4, r5
 8001b9e:	bf08      	it	eq
 8001ba0:	f040 0001 	orreq.w	r0, r0, #1
 8001ba4:	3518      	adds	r5, #24
 8001ba6:	42ac      	cmp	r4, r5
 8001ba8:	bf08      	it	eq
 8001baa:	f040 0001 	orreq.w	r0, r0, #1
 8001bae:	3518      	adds	r5, #24
 8001bb0:	42ac      	cmp	r4, r5
 8001bb2:	bf14      	ite	ne
 8001bb4:	4681      	movne	r9, r0
 8001bb6:	f040 0901 	orreq.w	r9, r0, #1
 8001bba:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 8001bbe:	42b4      	cmp	r4, r6
 8001bc0:	bf18      	it	ne
 8001bc2:	42ac      	cmpne	r4, r5
 8001bc4:	bf0c      	ite	eq
 8001bc6:	2501      	moveq	r5, #1
 8001bc8:	2500      	movne	r5, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_DMA_Start_IT+0xee>
 8001bcc:	f1b9 0f00 	cmp.w	r9, #0
 8001bd0:	d054      	beq.n	8001c7c <HAL_DMA_Start_IT+0x198>
 8001bd2:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8001bd8:	f026 0601 	bic.w	r6, r6, #1
 8001bdc:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bde:	2d00      	cmp	r5, #0
 8001be0:	d078      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be2:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8001be6:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001be8:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001bec:	b117      	cbz	r7, 8001bf4 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bee:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8001bf2:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bf4:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8001bf8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8001bfc:	f006 081f 	and.w	r8, r6, #31
 8001c00:	fa0e fe08 	lsl.w	lr, lr, r8
 8001c04:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c08:	6826      	ldr	r6, [r4, #0]
 8001c0a:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8001c0e:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001c10:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c12:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	f000 80e2 	beq.w	8001de0 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001c1c:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001c1e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c20:	b91d      	cbnz	r5, 8001c2a <HAL_DMA_Start_IT+0x146>
 8001c22:	f1b9 0f00 	cmp.w	r9, #0
 8001c26:	f000 80e1 	beq.w	8001dec <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f023 031e 	bic.w	r3, r3, #30
 8001c30:	f043 0316 	orr.w	r3, r3, #22
 8001c34:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001c3a:	b11b      	cbz	r3, 8001c44 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c44:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	03d2      	lsls	r2, r2, #15
 8001c4c:	d503      	bpl.n	8001c56 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c54:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001c56:	b11f      	cbz	r7, 8001c60 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c60:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6023      	str	r3, [r4, #0]
}
 8001c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020058 	.word	0x40020058
 8001c74:	40020028 	.word	0x40020028
 8001c78:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c7c:	4f61      	ldr	r7, [pc, #388]	; (8001e04 <HAL_DMA_Start_IT+0x320>)
 8001c7e:	4e62      	ldr	r6, [pc, #392]	; (8001e08 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c80:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c84:	42b4      	cmp	r4, r6
 8001c86:	bf18      	it	ne
 8001c88:	42bc      	cmpne	r4, r7
 8001c8a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8001c8e:	bf0c      	ite	eq
 8001c90:	2701      	moveq	r7, #1
 8001c92:	2700      	movne	r7, #0
 8001c94:	42b4      	cmp	r4, r6
 8001c96:	bf08      	it	eq
 8001c98:	f047 0701 	orreq.w	r7, r7, #1
 8001c9c:	3614      	adds	r6, #20
 8001c9e:	42b4      	cmp	r4, r6
 8001ca0:	bf08      	it	eq
 8001ca2:	f047 0701 	orreq.w	r7, r7, #1
 8001ca6:	3614      	adds	r6, #20
 8001ca8:	42b4      	cmp	r4, r6
 8001caa:	bf08      	it	eq
 8001cac:	f047 0701 	orreq.w	r7, r7, #1
 8001cb0:	3614      	adds	r6, #20
 8001cb2:	42b4      	cmp	r4, r6
 8001cb4:	bf08      	it	eq
 8001cb6:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8001cba:	6826      	ldr	r6, [r4, #0]
 8001cbc:	f026 0601 	bic.w	r6, r6, #1
 8001cc0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc2:	4e52      	ldr	r6, [pc, #328]	; (8001e0c <HAL_DMA_Start_IT+0x328>)
 8001cc4:	42b4      	cmp	r4, r6
 8001cc6:	bf08      	it	eq
 8001cc8:	f047 0701 	orreq.w	r7, r7, #1
 8001ccc:	b917      	cbnz	r7, 8001cd4 <HAL_DMA_Start_IT+0x1f0>
 8001cce:	4f50      	ldr	r7, [pc, #320]	; (8001e10 <HAL_DMA_Start_IT+0x32c>)
 8001cd0:	42bc      	cmp	r4, r7
 8001cd2:	d10b      	bne.n	8001cec <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cd4:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8001cd8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001cda:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001cde:	b117      	cbz	r7, 8001ce6 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ce0:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8001ce4:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ce6:	f1b9 0f00 	cmp.w	r9, #0
 8001cea:	d183      	bne.n	8001bf4 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cec:	4f46      	ldr	r7, [pc, #280]	; (8001e08 <HAL_DMA_Start_IT+0x324>)
 8001cee:	f8df e114 	ldr.w	lr, [pc, #276]	; 8001e04 <HAL_DMA_Start_IT+0x320>
 8001cf2:	4574      	cmp	r4, lr
 8001cf4:	bf18      	it	ne
 8001cf6:	42bc      	cmpne	r4, r7
 8001cf8:	f10e 0e14 	add.w	lr, lr, #20
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2701      	moveq	r7, #1
 8001d00:	2700      	movne	r7, #0
 8001d02:	4574      	cmp	r4, lr
 8001d04:	bf08      	it	eq
 8001d06:	f047 0701 	orreq.w	r7, r7, #1
 8001d0a:	f10e 0e14 	add.w	lr, lr, #20
 8001d0e:	4574      	cmp	r4, lr
 8001d10:	bf08      	it	eq
 8001d12:	f047 0701 	orreq.w	r7, r7, #1
 8001d16:	f10e 0e14 	add.w	lr, lr, #20
 8001d1a:	4574      	cmp	r4, lr
 8001d1c:	bf08      	it	eq
 8001d1e:	f047 0701 	orreq.w	r7, r7, #1
 8001d22:	f10e 0e14 	add.w	lr, lr, #20
 8001d26:	4574      	cmp	r4, lr
 8001d28:	bf08      	it	eq
 8001d2a:	f047 0701 	orreq.w	r7, r7, #1
 8001d2e:	f10e 0e14 	add.w	lr, lr, #20
 8001d32:	4574      	cmp	r4, lr
 8001d34:	bf08      	it	eq
 8001d36:	f047 0701 	orreq.w	r7, r7, #1
 8001d3a:	b917      	cbnz	r7, 8001d42 <HAL_DMA_Start_IT+0x25e>
 8001d3c:	4f34      	ldr	r7, [pc, #208]	; (8001e10 <HAL_DMA_Start_IT+0x32c>)
 8001d3e:	42bc      	cmp	r4, r7
 8001d40:	d154      	bne.n	8001dec <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001d42:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8001d46:	2701      	movs	r7, #1
 8001d48:	f000 0e1f 	and.w	lr, r0, #31
 8001d4c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001d50:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001d54:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d56:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d043      	beq.n	8001de6 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001d5e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001d60:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	f023 030e 	bic.w	r3, r3, #14
 8001d68:	f043 030a 	orr.w	r3, r3, #10
 8001d6c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d6e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d02d      	beq.n	8001dd2 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_DMA_Start_IT+0x320>)
 8001d80:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_DMA_Start_IT+0x324>)
 8001d82:	4294      	cmp	r4, r2
 8001d84:	bf18      	it	ne
 8001d86:	429c      	cmpne	r4, r3
 8001d88:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	4294      	cmp	r4, r2
 8001d94:	bf08      	it	eq
 8001d96:	f043 0301 	orreq.w	r3, r3, #1
 8001d9a:	3214      	adds	r2, #20
 8001d9c:	4294      	cmp	r4, r2
 8001d9e:	bf08      	it	eq
 8001da0:	f043 0301 	orreq.w	r3, r3, #1
 8001da4:	3214      	adds	r2, #20
 8001da6:	4294      	cmp	r4, r2
 8001da8:	bf08      	it	eq
 8001daa:	f043 0301 	orreq.w	r3, r3, #1
 8001dae:	3214      	adds	r2, #20
 8001db0:	4294      	cmp	r4, r2
 8001db2:	bf08      	it	eq
 8001db4:	f043 0301 	orreq.w	r3, r3, #1
 8001db8:	3214      	adds	r2, #20
 8001dba:	4294      	cmp	r4, r2
 8001dbc:	bf08      	it	eq
 8001dbe:	f043 0301 	orreq.w	r3, r3, #1
 8001dc2:	3214      	adds	r2, #20
 8001dc4:	4294      	cmp	r4, r2
 8001dc6:	bf08      	it	eq
 8001dc8:	f043 0301 	orreq.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f43f af47 	beq.w	8001c60 <HAL_DMA_Start_IT+0x17c>
 8001dd2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001dd6:	e735      	b.n	8001c44 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001ddc:	2002      	movs	r0, #2
}
 8001dde:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001de0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001de2:	60e1      	str	r1, [r4, #12]
 8001de4:	e71c      	b.n	8001c20 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001de6:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001de8:	60e1      	str	r1, [r4, #12]
 8001dea:	e7ba      	b.n	8001d62 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f023 030e 	bic.w	r3, r3, #14
 8001df2:	f043 030a 	orr.w	r3, r3, #10
 8001df6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ba      	bne.n	8001d76 <HAL_DMA_Start_IT+0x292>
 8001e00:	e7bd      	b.n	8001d7e <HAL_DMA_Start_IT+0x29a>
 8001e02:	bf00      	nop
 8001e04:	5802541c 	.word	0x5802541c
 8001e08:	58025408 	.word	0x58025408
 8001e0c:	58025480 	.word	0x58025480
 8001e10:	58025494 	.word	0x58025494

08001e14 <HAL_DMA_IRQHandler>:
{
 8001e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8001e18:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e1a:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_DMA_IRQHandler+0x280>)
{
 8001e1c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8001e20:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e22:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8001e24:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e26:	6803      	ldr	r3, [r0, #0]
 8001e28:	4a9b      	ldr	r2, [pc, #620]	; (8002098 <HAL_DMA_IRQHandler+0x284>)
 8001e2a:	489c      	ldr	r0, [pc, #624]	; (800209c <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8001e2c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	bf18      	it	ne
 8001e32:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8001e34:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e36:	bf0c      	ite	eq
 8001e38:	2001      	moveq	r0, #1
 8001e3a:	2000      	movne	r0, #0
 8001e3c:	d04f      	beq.n	8001ede <HAL_DMA_IRQHandler+0xca>
 8001e3e:	3218      	adds	r2, #24
 8001e40:	f8df c260 	ldr.w	ip, [pc, #608]	; 80020a4 <HAL_DMA_IRQHandler+0x290>
 8001e44:	4563      	cmp	r3, ip
 8001e46:	bf18      	it	ne
 8001e48:	4293      	cmpne	r3, r2
 8001e4a:	f10c 0c18 	add.w	ip, ip, #24
 8001e4e:	bf0c      	ite	eq
 8001e50:	2201      	moveq	r2, #1
 8001e52:	2200      	movne	r2, #0
 8001e54:	4563      	cmp	r3, ip
 8001e56:	bf08      	it	eq
 8001e58:	f042 0201 	orreq.w	r2, r2, #1
 8001e5c:	f10c 0c18 	add.w	ip, ip, #24
 8001e60:	4563      	cmp	r3, ip
 8001e62:	bf08      	it	eq
 8001e64:	f042 0201 	orreq.w	r2, r2, #1
 8001e68:	f10c 0c18 	add.w	ip, ip, #24
 8001e6c:	4563      	cmp	r3, ip
 8001e6e:	bf08      	it	eq
 8001e70:	f042 0201 	orreq.w	r2, r2, #1
 8001e74:	f10c 0c18 	add.w	ip, ip, #24
 8001e78:	4563      	cmp	r3, ip
 8001e7a:	bf08      	it	eq
 8001e7c:	f042 0201 	orreq.w	r2, r2, #1
 8001e80:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8001e84:	4563      	cmp	r3, ip
 8001e86:	bf08      	it	eq
 8001e88:	f042 0201 	orreq.w	r2, r2, #1
 8001e8c:	f10c 0c18 	add.w	ip, ip, #24
 8001e90:	4563      	cmp	r3, ip
 8001e92:	bf08      	it	eq
 8001e94:	f042 0201 	orreq.w	r2, r2, #1
 8001e98:	f10c 0c18 	add.w	ip, ip, #24
 8001e9c:	4563      	cmp	r3, ip
 8001e9e:	bf08      	it	eq
 8001ea0:	f042 0201 	orreq.w	r2, r2, #1
 8001ea4:	f10c 0c18 	add.w	ip, ip, #24
 8001ea8:	4563      	cmp	r3, ip
 8001eaa:	bf08      	it	eq
 8001eac:	f042 0201 	orreq.w	r2, r2, #1
 8001eb0:	f10c 0c18 	add.w	ip, ip, #24
 8001eb4:	4563      	cmp	r3, ip
 8001eb6:	bf08      	it	eq
 8001eb8:	f042 0201 	orreq.w	r2, r2, #1
 8001ebc:	f10c 0c18 	add.w	ip, ip, #24
 8001ec0:	4563      	cmp	r3, ip
 8001ec2:	bf08      	it	eq
 8001ec4:	f042 0201 	orreq.w	r2, r2, #1
 8001ec8:	f10c 0c18 	add.w	ip, ip, #24
 8001ecc:	4563      	cmp	r3, ip
 8001ece:	bf08      	it	eq
 8001ed0:	f042 0201 	orreq.w	r2, r2, #1
 8001ed4:	b91a      	cbnz	r2, 8001ede <HAL_DMA_IRQHandler+0xca>
 8001ed6:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_DMA_IRQHandler+0x28c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	f040 824b 	bne.w	8002374 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ede:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	f001 0c1f 	and.w	ip, r1, #31
 8001ee6:	fa02 f20c 	lsl.w	r2, r2, ip
 8001eea:	4217      	tst	r7, r2
 8001eec:	f040 817d 	bne.w	80021ea <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ef0:	fa27 f20c 	lsr.w	r2, r7, ip
 8001ef4:	07d2      	lsls	r2, r2, #31
 8001ef6:	d50a      	bpl.n	8001f0e <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	0612      	lsls	r2, r2, #24
 8001efc:	d507      	bpl.n	8001f0e <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f04:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f06:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001f08:	f042 0202 	orr.w	r2, r2, #2
 8001f0c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f0e:	f04f 0e04 	mov.w	lr, #4
 8001f12:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001f16:	ea1e 0f07 	tst.w	lr, r7
 8001f1a:	d05a      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d14f      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x1ac>
 8001f20:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_DMA_IRQHandler+0x290>)
 8001f22:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80020a8 <HAL_DMA_IRQHandler+0x294>
 8001f26:	4543      	cmp	r3, r8
 8001f28:	bf18      	it	ne
 8001f2a:	4293      	cmpne	r3, r2
 8001f2c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8001f30:	bf0c      	ite	eq
 8001f32:	2201      	moveq	r2, #1
 8001f34:	2200      	movne	r2, #0
 8001f36:	4543      	cmp	r3, r8
 8001f38:	bf08      	it	eq
 8001f3a:	f042 0201 	orreq.w	r2, r2, #1
 8001f3e:	f108 0818 	add.w	r8, r8, #24
 8001f42:	4543      	cmp	r3, r8
 8001f44:	bf08      	it	eq
 8001f46:	f042 0201 	orreq.w	r2, r2, #1
 8001f4a:	f108 0818 	add.w	r8, r8, #24
 8001f4e:	4543      	cmp	r3, r8
 8001f50:	bf08      	it	eq
 8001f52:	f042 0201 	orreq.w	r2, r2, #1
 8001f56:	f108 0818 	add.w	r8, r8, #24
 8001f5a:	4543      	cmp	r3, r8
 8001f5c:	bf08      	it	eq
 8001f5e:	f042 0201 	orreq.w	r2, r2, #1
 8001f62:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8001f66:	4543      	cmp	r3, r8
 8001f68:	bf08      	it	eq
 8001f6a:	f042 0201 	orreq.w	r2, r2, #1
 8001f6e:	f108 0818 	add.w	r8, r8, #24
 8001f72:	4543      	cmp	r3, r8
 8001f74:	bf08      	it	eq
 8001f76:	f042 0201 	orreq.w	r2, r2, #1
 8001f7a:	f108 0818 	add.w	r8, r8, #24
 8001f7e:	4543      	cmp	r3, r8
 8001f80:	bf08      	it	eq
 8001f82:	f042 0201 	orreq.w	r2, r2, #1
 8001f86:	f108 0818 	add.w	r8, r8, #24
 8001f8a:	4543      	cmp	r3, r8
 8001f8c:	bf08      	it	eq
 8001f8e:	f042 0201 	orreq.w	r2, r2, #1
 8001f92:	f108 0818 	add.w	r8, r8, #24
 8001f96:	4543      	cmp	r3, r8
 8001f98:	bf08      	it	eq
 8001f9a:	f042 0201 	orreq.w	r2, r2, #1
 8001f9e:	f108 0818 	add.w	r8, r8, #24
 8001fa2:	4543      	cmp	r3, r8
 8001fa4:	bf08      	it	eq
 8001fa6:	f042 0201 	orreq.w	r2, r2, #1
 8001faa:	f108 0818 	add.w	r8, r8, #24
 8001fae:	4543      	cmp	r3, r8
 8001fb0:	bf08      	it	eq
 8001fb2:	f042 0201 	orreq.w	r2, r2, #1
 8001fb6:	b91a      	cbnz	r2, 8001fc0 <HAL_DMA_IRQHandler+0x1ac>
 8001fb8:	4a39      	ldr	r2, [pc, #228]	; (80020a0 <HAL_DMA_IRQHandler+0x28c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f040 8214 	bne.w	80023e8 <HAL_DMA_IRQHandler+0x5d4>
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	0792      	lsls	r2, r2, #30
 8001fc4:	d505      	bpl.n	8001fd2 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fc6:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fca:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001fcc:	f042 0204 	orr.w	r2, r2, #4
 8001fd0:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8001fd8:	ea1c 0f07 	tst.w	ip, r7
 8001fdc:	d069      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d145      	bne.n	800206e <HAL_DMA_IRQHandler+0x25a>
 8001fe2:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <HAL_DMA_IRQHandler+0x290>)
 8001fe4:	4830      	ldr	r0, [pc, #192]	; (80020a8 <HAL_DMA_IRQHandler+0x294>)
 8001fe6:	4283      	cmp	r3, r0
 8001fe8:	bf18      	it	ne
 8001fea:	4293      	cmpne	r3, r2
 8001fec:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2201      	moveq	r2, #1
 8001ff4:	2200      	movne	r2, #0
 8001ff6:	4283      	cmp	r3, r0
 8001ff8:	bf08      	it	eq
 8001ffa:	f042 0201 	orreq.w	r2, r2, #1
 8001ffe:	3018      	adds	r0, #24
 8002000:	4283      	cmp	r3, r0
 8002002:	bf08      	it	eq
 8002004:	f042 0201 	orreq.w	r2, r2, #1
 8002008:	3018      	adds	r0, #24
 800200a:	4283      	cmp	r3, r0
 800200c:	bf08      	it	eq
 800200e:	f042 0201 	orreq.w	r2, r2, #1
 8002012:	3018      	adds	r0, #24
 8002014:	4283      	cmp	r3, r0
 8002016:	bf08      	it	eq
 8002018:	f042 0201 	orreq.w	r2, r2, #1
 800201c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002020:	4283      	cmp	r3, r0
 8002022:	bf08      	it	eq
 8002024:	f042 0201 	orreq.w	r2, r2, #1
 8002028:	3018      	adds	r0, #24
 800202a:	4283      	cmp	r3, r0
 800202c:	bf08      	it	eq
 800202e:	f042 0201 	orreq.w	r2, r2, #1
 8002032:	3018      	adds	r0, #24
 8002034:	4283      	cmp	r3, r0
 8002036:	bf08      	it	eq
 8002038:	f042 0201 	orreq.w	r2, r2, #1
 800203c:	3018      	adds	r0, #24
 800203e:	4283      	cmp	r3, r0
 8002040:	bf08      	it	eq
 8002042:	f042 0201 	orreq.w	r2, r2, #1
 8002046:	3018      	adds	r0, #24
 8002048:	4283      	cmp	r3, r0
 800204a:	bf08      	it	eq
 800204c:	f042 0201 	orreq.w	r2, r2, #1
 8002050:	3018      	adds	r0, #24
 8002052:	4283      	cmp	r3, r0
 8002054:	bf08      	it	eq
 8002056:	f042 0201 	orreq.w	r2, r2, #1
 800205a:	3018      	adds	r0, #24
 800205c:	4283      	cmp	r3, r0
 800205e:	bf08      	it	eq
 8002060:	f042 0201 	orreq.w	r2, r2, #1
 8002064:	b91a      	cbnz	r2, 800206e <HAL_DMA_IRQHandler+0x25a>
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_DMA_IRQHandler+0x28c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	f040 81c5 	bne.w	80023f8 <HAL_DMA_IRQHandler+0x5e4>
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	0712      	lsls	r2, r2, #28
 8002072:	d51e      	bpl.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002074:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	0352      	lsls	r2, r2, #13
 800207c:	f100 814e 	bmi.w	800231c <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	05d2      	lsls	r2, r2, #23
 8002084:	d403      	bmi.n	800208e <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800208e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002090:	b17b      	cbz	r3, 80020b2 <HAL_DMA_IRQHandler+0x29e>
 8002092:	e00b      	b.n	80020ac <HAL_DMA_IRQHandler+0x298>
 8002094:	24000000 	.word	0x24000000
 8002098:	40020028 	.word	0x40020028
 800209c:	40020010 	.word	0x40020010
 80020a0:	400204b8 	.word	0x400204b8
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 80020ac:	4630      	mov	r0, r6
 80020ae:	4798      	blx	r3
 80020b0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020b2:	f001 011f 	and.w	r1, r1, #31
 80020b6:	2020      	movs	r0, #32
 80020b8:	4088      	lsls	r0, r1
 80020ba:	4238      	tst	r0, r7
 80020bc:	d066      	beq.n	800218c <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80020be:	6832      	ldr	r2, [r6, #0]
 80020c0:	4ba4      	ldr	r3, [pc, #656]	; (8002354 <HAL_DMA_IRQHandler+0x540>)
 80020c2:	4fa5      	ldr	r7, [pc, #660]	; (8002358 <HAL_DMA_IRQHandler+0x544>)
 80020c4:	42ba      	cmp	r2, r7
 80020c6:	bf18      	it	ne
 80020c8:	429a      	cmpne	r2, r3
 80020ca:	f107 0718 	add.w	r7, r7, #24
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	42ba      	cmp	r2, r7
 80020d6:	bf08      	it	eq
 80020d8:	f043 0301 	orreq.w	r3, r3, #1
 80020dc:	3718      	adds	r7, #24
 80020de:	42ba      	cmp	r2, r7
 80020e0:	bf08      	it	eq
 80020e2:	f043 0301 	orreq.w	r3, r3, #1
 80020e6:	3718      	adds	r7, #24
 80020e8:	42ba      	cmp	r2, r7
 80020ea:	bf08      	it	eq
 80020ec:	f043 0301 	orreq.w	r3, r3, #1
 80020f0:	3718      	adds	r7, #24
 80020f2:	42ba      	cmp	r2, r7
 80020f4:	bf08      	it	eq
 80020f6:	f043 0301 	orreq.w	r3, r3, #1
 80020fa:	3718      	adds	r7, #24
 80020fc:	42ba      	cmp	r2, r7
 80020fe:	bf08      	it	eq
 8002100:	f043 0301 	orreq.w	r3, r3, #1
 8002104:	3718      	adds	r7, #24
 8002106:	42ba      	cmp	r2, r7
 8002108:	bf08      	it	eq
 800210a:	f043 0301 	orreq.w	r3, r3, #1
 800210e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002112:	42ba      	cmp	r2, r7
 8002114:	bf08      	it	eq
 8002116:	f043 0301 	orreq.w	r3, r3, #1
 800211a:	3718      	adds	r7, #24
 800211c:	42ba      	cmp	r2, r7
 800211e:	bf08      	it	eq
 8002120:	f043 0301 	orreq.w	r3, r3, #1
 8002124:	3718      	adds	r7, #24
 8002126:	42ba      	cmp	r2, r7
 8002128:	bf08      	it	eq
 800212a:	f043 0301 	orreq.w	r3, r3, #1
 800212e:	3718      	adds	r7, #24
 8002130:	42ba      	cmp	r2, r7
 8002132:	bf08      	it	eq
 8002134:	f043 0301 	orreq.w	r3, r3, #1
 8002138:	3718      	adds	r7, #24
 800213a:	42ba      	cmp	r2, r7
 800213c:	bf08      	it	eq
 800213e:	f043 0301 	orreq.w	r3, r3, #1
 8002142:	3718      	adds	r7, #24
 8002144:	42ba      	cmp	r2, r7
 8002146:	bf08      	it	eq
 8002148:	f043 0301 	orreq.w	r3, r3, #1
 800214c:	3718      	adds	r7, #24
 800214e:	42ba      	cmp	r2, r7
 8002150:	bf08      	it	eq
 8002152:	f043 0301 	orreq.w	r3, r3, #1
 8002156:	b91b      	cbnz	r3, 8002160 <HAL_DMA_IRQHandler+0x34c>
 8002158:	4b80      	ldr	r3, [pc, #512]	; (800235c <HAL_DMA_IRQHandler+0x548>)
 800215a:	429a      	cmp	r2, r3
 800215c:	f040 8161 	bne.w	8002422 <HAL_DMA_IRQHandler+0x60e>
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	06df      	lsls	r7, r3, #27
 8002164:	d512      	bpl.n	800218c <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002166:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002168:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800216c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216e:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002170:	f000 80b6 	beq.w	80022e0 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002174:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002178:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800217a:	f000 80d8 	beq.w	800232e <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800217e:	031f      	lsls	r7, r3, #12
 8002180:	f140 80e3 	bpl.w	800234a <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 8002184:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8002186:	b10b      	cbz	r3, 800218c <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 8002188:	4630      	mov	r0, r6
 800218a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800218c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80c1 	beq.w	8002316 <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002194:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002196:	07dc      	lsls	r4, r3, #31
 8002198:	d51e      	bpl.n	80021d8 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 800219a:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	2104      	movs	r1, #4
 800219e:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a2:	496f      	ldr	r1, [pc, #444]	; (8002360 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 80021a4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a6:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 80021aa:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ae:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e002      	b.n	80021ba <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	07d8      	lsls	r0, r3, #31
 80021b8:	d504      	bpl.n	80021c4 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 80021ba:	9b01      	ldr	r3, [sp, #4]
 80021bc:	3301      	adds	r3, #1
 80021be:	428b      	cmp	r3, r1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	d9f7      	bls.n	80021b4 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80021c8:	bf4c      	ite	mi
 80021ca:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80021cc:	2301      	movpl	r3, #1
 80021ce:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80021d2:	2300      	movs	r3, #0
 80021d4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80021d8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 809b 	beq.w	8002316 <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 80021e0:	4630      	mov	r0, r6
}
 80021e2:	b002      	add	sp, #8
 80021e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 80021e8:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80021ea:	f8d3 e000 	ldr.w	lr, [r3]
 80021ee:	f01e 0f04 	tst.w	lr, #4
 80021f2:	d00a      	beq.n	800220a <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80021f4:	f8d3 e000 	ldr.w	lr, [r3]
 80021f8:	f02e 0e04 	bic.w	lr, lr, #4
 80021fc:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002200:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002202:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800220a:	fa27 f20c 	lsr.w	r2, r7, ip
 800220e:	07d2      	lsls	r2, r2, #31
 8002210:	f57f ae7d 	bpl.w	8001f0e <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002214:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_DMA_IRQHandler+0x550>)
 8002216:	f8df e150 	ldr.w	lr, [pc, #336]	; 8002368 <HAL_DMA_IRQHandler+0x554>
 800221a:	4573      	cmp	r3, lr
 800221c:	bf18      	it	ne
 800221e:	4293      	cmpne	r3, r2
 8002220:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002224:	bf0c      	ite	eq
 8002226:	2201      	moveq	r2, #1
 8002228:	2200      	movne	r2, #0
 800222a:	4573      	cmp	r3, lr
 800222c:	bf08      	it	eq
 800222e:	f042 0201 	orreq.w	r2, r2, #1
 8002232:	f10e 0e18 	add.w	lr, lr, #24
 8002236:	4573      	cmp	r3, lr
 8002238:	bf08      	it	eq
 800223a:	f042 0201 	orreq.w	r2, r2, #1
 800223e:	f10e 0e18 	add.w	lr, lr, #24
 8002242:	4573      	cmp	r3, lr
 8002244:	bf08      	it	eq
 8002246:	f042 0201 	orreq.w	r2, r2, #1
 800224a:	f10e 0e18 	add.w	lr, lr, #24
 800224e:	4573      	cmp	r3, lr
 8002250:	bf08      	it	eq
 8002252:	f042 0201 	orreq.w	r2, r2, #1
 8002256:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 800225a:	4573      	cmp	r3, lr
 800225c:	bf08      	it	eq
 800225e:	f042 0201 	orreq.w	r2, r2, #1
 8002262:	f10e 0e18 	add.w	lr, lr, #24
 8002266:	4573      	cmp	r3, lr
 8002268:	bf08      	it	eq
 800226a:	f042 0201 	orreq.w	r2, r2, #1
 800226e:	f10e 0e18 	add.w	lr, lr, #24
 8002272:	4573      	cmp	r3, lr
 8002274:	bf08      	it	eq
 8002276:	f042 0201 	orreq.w	r2, r2, #1
 800227a:	f10e 0e18 	add.w	lr, lr, #24
 800227e:	4573      	cmp	r3, lr
 8002280:	bf08      	it	eq
 8002282:	f042 0201 	orreq.w	r2, r2, #1
 8002286:	f10e 0e18 	add.w	lr, lr, #24
 800228a:	4573      	cmp	r3, lr
 800228c:	bf08      	it	eq
 800228e:	f042 0201 	orreq.w	r2, r2, #1
 8002292:	f10e 0e18 	add.w	lr, lr, #24
 8002296:	4573      	cmp	r3, lr
 8002298:	bf08      	it	eq
 800229a:	f042 0201 	orreq.w	r2, r2, #1
 800229e:	f10e 0e18 	add.w	lr, lr, #24
 80022a2:	4573      	cmp	r3, lr
 80022a4:	bf08      	it	eq
 80022a6:	f042 0201 	orreq.w	r2, r2, #1
 80022aa:	f10e 0e18 	add.w	lr, lr, #24
 80022ae:	4573      	cmp	r3, lr
 80022b0:	bf08      	it	eq
 80022b2:	f042 0201 	orreq.w	r2, r2, #1
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	f47f ae1e 	bne.w	8001ef8 <HAL_DMA_IRQHandler+0xe4>
 80022bc:	2800      	cmp	r0, #0
 80022be:	f47f ae1b 	bne.w	8001ef8 <HAL_DMA_IRQHandler+0xe4>
 80022c2:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022c4:	2204      	movs	r2, #4
 80022c6:	fa02 f20c 	lsl.w	r2, r2, ip
 80022ca:	423a      	tst	r2, r7
 80022cc:	f040 808c 	bne.w	80023e8 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022d0:	2210      	movs	r2, #16
 80022d2:	fa02 fc0c 	lsl.w	ip, r2, ip
 80022d6:	ea17 0f0c 	tst.w	r7, ip
 80022da:	f43f aeea 	beq.w	80020b2 <HAL_DMA_IRQHandler+0x29e>
 80022de:	e680      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e0:	f023 0316 	bic.w	r3, r3, #22
 80022e4:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022e6:	6953      	ldr	r3, [r2, #20]
 80022e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ec:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ee:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d03b      	beq.n	800236c <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	f023 0308 	bic.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022fc:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80022fe:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8002300:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002302:	408b      	lsls	r3, r1
 8002304:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8002306:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8002308:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800230c:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8002310:	2b00      	cmp	r3, #0
 8002312:	f47f af65 	bne.w	80021e0 <HAL_DMA_IRQHandler+0x3cc>
}
 8002316:	b002      	add	sp, #8
 8002318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0318      	lsls	r0, r3, #12
 8002320:	f57f aeb5 	bpl.w	800208e <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f aec0 	bne.w	80020ac <HAL_DMA_IRQHandler+0x298>
 800232c:	e6c1      	b.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800232e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002332:	f47f af27 	bne.w	8002184 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	f021 0110 	bic.w	r1, r1, #16
 800233c:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800233e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8002340:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002344:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8002348:	e71c      	b.n	8002184 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800234a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f af1b 	bne.w	8002188 <HAL_DMA_IRQHandler+0x374>
 8002352:	e71b      	b.n	800218c <HAL_DMA_IRQHandler+0x378>
 8002354:	40020010 	.word	0x40020010
 8002358:	40020028 	.word	0x40020028
 800235c:	400204b8 	.word	0x400204b8
 8002360:	1b4e81b5 	.word	0x1b4e81b5
 8002364:	40020058 	.word	0x40020058
 8002368:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1c0      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x4e0>
 8002372:	e7c3      	b.n	80022fc <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_DMA_IRQHandler+0x690>)
 8002376:	484c      	ldr	r0, [pc, #304]	; (80024a8 <HAL_DMA_IRQHandler+0x694>)
 8002378:	4283      	cmp	r3, r0
 800237a:	bf18      	it	ne
 800237c:	4293      	cmpne	r3, r2
 800237e:	f100 0014 	add.w	r0, r0, #20
 8002382:	bf0c      	ite	eq
 8002384:	2201      	moveq	r2, #1
 8002386:	2200      	movne	r2, #0
 8002388:	4283      	cmp	r3, r0
 800238a:	bf08      	it	eq
 800238c:	f042 0201 	orreq.w	r2, r2, #1
 8002390:	3014      	adds	r0, #20
 8002392:	4283      	cmp	r3, r0
 8002394:	bf08      	it	eq
 8002396:	f042 0201 	orreq.w	r2, r2, #1
 800239a:	3014      	adds	r0, #20
 800239c:	4283      	cmp	r3, r0
 800239e:	bf08      	it	eq
 80023a0:	f042 0201 	orreq.w	r2, r2, #1
 80023a4:	3014      	adds	r0, #20
 80023a6:	4283      	cmp	r3, r0
 80023a8:	bf08      	it	eq
 80023aa:	f042 0201 	orreq.w	r2, r2, #1
 80023ae:	3014      	adds	r0, #20
 80023b0:	4283      	cmp	r3, r0
 80023b2:	bf08      	it	eq
 80023b4:	f042 0201 	orreq.w	r2, r2, #1
 80023b8:	b912      	cbnz	r2, 80023c0 <HAL_DMA_IRQHandler+0x5ac>
 80023ba:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_DMA_IRQHandler+0x698>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d1aa      	bne.n	8002316 <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80023c0:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 80023c2:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80023c4:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80023c6:	f000 001f 	and.w	r0, r0, #31
 80023ca:	4085      	lsls	r5, r0
 80023cc:	420d      	tst	r5, r1
 80023ce:	d018      	beq.n	8002402 <HAL_DMA_IRQHandler+0x5ee>
 80023d0:	0757      	lsls	r7, r2, #29
 80023d2:	d516      	bpl.n	8002402 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023d4:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80023d6:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023d8:	d547      	bpl.n	800246a <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80023da:	03d1      	lsls	r1, r2, #15
 80023dc:	d44b      	bmi.n	8002476 <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023de:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f aefd 	bne.w	80021e0 <HAL_DMA_IRQHandler+0x3cc>
 80023e6:	e796      	b.n	8002316 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80023e8:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023ea:	2210      	movs	r2, #16
 80023ec:	fa02 fc0c 	lsl.w	ip, r2, ip
 80023f0:	ea17 0f0c 	tst.w	r7, ip
 80023f4:	f43f ae5d 	beq.w	80020b2 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	0750      	lsls	r0, r2, #29
 80023fc:	f57f ae59 	bpl.w	80020b2 <HAL_DMA_IRQHandler+0x29e>
 8002400:	e638      	b.n	8002074 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002402:	2502      	movs	r5, #2
 8002404:	4085      	lsls	r5, r0
 8002406:	420d      	tst	r5, r1
 8002408:	d010      	beq.n	800242c <HAL_DMA_IRQHandler+0x618>
 800240a:	0797      	lsls	r7, r2, #30
 800240c:	d50e      	bpl.n	800242c <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800240e:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002410:	0414      	lsls	r4, r2, #16
 8002412:	d535      	bpl.n	8002480 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002414:	03d0      	lsls	r0, r2, #15
 8002416:	d43f      	bmi.n	8002498 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 8002418:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f aee0 	bne.w	80021e0 <HAL_DMA_IRQHandler+0x3cc>
 8002420:	e779      	b.n	8002316 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	079b      	lsls	r3, r3, #30
 8002426:	f57f aeb1 	bpl.w	800218c <HAL_DMA_IRQHandler+0x378>
 800242a:	e69c      	b.n	8002166 <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800242c:	2508      	movs	r5, #8
 800242e:	4085      	lsls	r5, r0
 8002430:	420d      	tst	r5, r1
 8002432:	f43f af70 	beq.w	8002316 <HAL_DMA_IRQHandler+0x502>
 8002436:	0711      	lsls	r1, r2, #28
 8002438:	f57f af6d 	bpl.w	8002316 <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243c:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800243e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002440:	f022 020e 	bic.w	r2, r2, #14
 8002444:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002446:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8002448:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800244a:	fa03 f000 	lsl.w	r0, r3, r0
 800244e:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002450:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002452:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002456:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800245a:	2a00      	cmp	r2, #0
 800245c:	f43f af5b 	beq.w	8002316 <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 8002460:	4630      	mov	r0, r6
}
 8002462:	b002      	add	sp, #8
 8002464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002468:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800246a:	0692      	lsls	r2, r2, #26
 800246c:	d403      	bmi.n	8002476 <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002476:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f aeb1 	bne.w	80021e0 <HAL_DMA_IRQHandler+0x3cc>
 800247e:	e74a      	b.n	8002316 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002480:	f012 0220 	ands.w	r2, r2, #32
 8002484:	d108      	bne.n	8002498 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002486:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002488:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800248a:	f021 010a 	bic.w	r1, r1, #10
 800248e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002490:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002494:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002498:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f aea0 	bne.w	80021e0 <HAL_DMA_IRQHandler+0x3cc>
 80024a0:	e739      	b.n	8002316 <HAL_DMA_IRQHandler+0x502>
 80024a2:	bf00      	nop
 80024a4:	58025408 	.word	0x58025408
 80024a8:	5802541c 	.word	0x5802541c
 80024ac:	58025494 	.word	0x58025494

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024b4:	680c      	ldr	r4, [r1, #0]
{
 80024b6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024b8:	2c00      	cmp	r4, #0
 80024ba:	f000 80a7 	beq.w	800260c <HAL_GPIO_Init+0x15c>
 80024be:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	4f8a      	ldr	r7, [pc, #552]	; (80026ec <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 80024c4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024c6:	2201      	movs	r2, #1
 80024c8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80024ca:	ea12 0e04 	ands.w	lr, r2, r4
 80024ce:	f000 8096 	beq.w	80025fe <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d2:	684d      	ldr	r5, [r1, #4]
 80024d4:	f005 0903 	and.w	r9, r5, #3
 80024d8:	f109 36ff 	add.w	r6, r9, #4294967295
 80024dc:	2e01      	cmp	r6, #1
 80024de:	f240 8098 	bls.w	8002612 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e2:	f1b9 0f03 	cmp.w	r9, #3
 80024e6:	f040 80d2 	bne.w	800268e <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ea:	fa09 f20c 	lsl.w	r2, r9, ip
 80024ee:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80024f2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024f8:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fc:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002500:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002502:	d07c      	beq.n	80025fe <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002504:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002508:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250c:	f003 0903 	and.w	r9, r3, #3
 8002510:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	f042 0202 	orr.w	r2, r2, #2
 8002516:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800251a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002522:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002526:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800252a:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	f002 0202 	and.w	r2, r2, #2
 8002532:	9201      	str	r2, [sp, #4]
 8002534:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800253a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800253e:	4e6c      	ldr	r6, [pc, #432]	; (80026f0 <HAL_GPIO_Init+0x240>)
 8002540:	42b0      	cmp	r0, r6
 8002542:	d028      	beq.n	8002596 <HAL_GPIO_Init+0xe6>
 8002544:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002548:	42b0      	cmp	r0, r6
 800254a:	f000 80ac 	beq.w	80026a6 <HAL_GPIO_Init+0x1f6>
 800254e:	4e69      	ldr	r6, [pc, #420]	; (80026f4 <HAL_GPIO_Init+0x244>)
 8002550:	42b0      	cmp	r0, r6
 8002552:	f000 80ad 	beq.w	80026b0 <HAL_GPIO_Init+0x200>
 8002556:	4e68      	ldr	r6, [pc, #416]	; (80026f8 <HAL_GPIO_Init+0x248>)
 8002558:	42b0      	cmp	r0, r6
 800255a:	f000 809f 	beq.w	800269c <HAL_GPIO_Init+0x1ec>
 800255e:	4e67      	ldr	r6, [pc, #412]	; (80026fc <HAL_GPIO_Init+0x24c>)
 8002560:	42b0      	cmp	r0, r6
 8002562:	f000 80af 	beq.w	80026c4 <HAL_GPIO_Init+0x214>
 8002566:	4e66      	ldr	r6, [pc, #408]	; (8002700 <HAL_GPIO_Init+0x250>)
 8002568:	42b0      	cmp	r0, r6
 800256a:	f000 80b0 	beq.w	80026ce <HAL_GPIO_Init+0x21e>
 800256e:	4e65      	ldr	r6, [pc, #404]	; (8002704 <HAL_GPIO_Init+0x254>)
 8002570:	42b0      	cmp	r0, r6
 8002572:	f000 80a2 	beq.w	80026ba <HAL_GPIO_Init+0x20a>
 8002576:	4e64      	ldr	r6, [pc, #400]	; (8002708 <HAL_GPIO_Init+0x258>)
 8002578:	42b0      	cmp	r0, r6
 800257a:	f000 80ad 	beq.w	80026d8 <HAL_GPIO_Init+0x228>
 800257e:	4e63      	ldr	r6, [pc, #396]	; (800270c <HAL_GPIO_Init+0x25c>)
 8002580:	42b0      	cmp	r0, r6
 8002582:	f000 80ae 	beq.w	80026e2 <HAL_GPIO_Init+0x232>
 8002586:	4e62      	ldr	r6, [pc, #392]	; (8002710 <HAL_GPIO_Init+0x260>)
 8002588:	42b0      	cmp	r0, r6
 800258a:	bf0c      	ite	eq
 800258c:	2609      	moveq	r6, #9
 800258e:	260a      	movne	r6, #10
 8002590:	fa06 f609 	lsl.w	r6, r6, r9
 8002594:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002596:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80025a2:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 80025a6:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80025a8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80025ac:	bf0c      	ite	eq
 80025ae:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80025b0:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80025b8:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 80025bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80025c0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80025c4:	bf0c      	ite	eq
 80025c6:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80025c8:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025cc:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 80025d0:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80025d4:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025d8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80025dc:	bf0c      	ite	eq
 80025de:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80025e0:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025e6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80025ea:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80025ee:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 80025f2:	bf54      	ite	pl
 80025f4:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80025f6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80025fa:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80025fe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002600:	f10c 0c02 	add.w	ip, ip, #2
 8002604:	fa34 f203 	lsrs.w	r2, r4, r3
 8002608:	f47f af5d 	bne.w	80024c6 <HAL_GPIO_Init+0x16>
  }
}
 800260c:	b003      	add	sp, #12
 800260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002612:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8002616:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002618:	fa08 f80c 	lsl.w	r8, r8, ip
 800261c:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002620:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002622:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	fa06 f60c 	lsl.w	r6, r6, ip
 800262a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800262e:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002630:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002634:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002638:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800263a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263e:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002640:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002642:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800264a:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002652:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8002656:	fa09 f20c 	lsl.w	r2, r9, ip
 800265a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	f47f af49 	bne.w	80024f2 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8002660:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002664:	f003 0b07 	and.w	fp, r3, #7
 8002668:	260f      	movs	r6, #15
 800266a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800266e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002672:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002676:	fa06 f60b 	lsl.w	r6, r6, fp
 800267a:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800267e:	690e      	ldr	r6, [r1, #16]
 8002680:	fa06 f60b 	lsl.w	r6, r6, fp
 8002684:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002688:	f8c9 6020 	str.w	r6, [r9, #32]
 800268c:	e731      	b.n	80024f2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800268e:	f04f 0803 	mov.w	r8, #3
 8002692:	fa08 f80c 	lsl.w	r8, r8, ip
 8002696:	ea6f 0808 	mvn.w	r8, r8
 800269a:	e7d2      	b.n	8002642 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800269c:	2603      	movs	r6, #3
 800269e:	fa06 f609 	lsl.w	r6, r6, r9
 80026a2:	4332      	orrs	r2, r6
 80026a4:	e777      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026a6:	2601      	movs	r6, #1
 80026a8:	fa06 f609 	lsl.w	r6, r6, r9
 80026ac:	4332      	orrs	r2, r6
 80026ae:	e772      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026b0:	2602      	movs	r6, #2
 80026b2:	fa06 f609 	lsl.w	r6, r6, r9
 80026b6:	4332      	orrs	r2, r6
 80026b8:	e76d      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026ba:	2606      	movs	r6, #6
 80026bc:	fa06 f609 	lsl.w	r6, r6, r9
 80026c0:	4332      	orrs	r2, r6
 80026c2:	e768      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026c4:	2604      	movs	r6, #4
 80026c6:	fa06 f609 	lsl.w	r6, r6, r9
 80026ca:	4332      	orrs	r2, r6
 80026cc:	e763      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026ce:	2605      	movs	r6, #5
 80026d0:	fa06 f609 	lsl.w	r6, r6, r9
 80026d4:	4332      	orrs	r2, r6
 80026d6:	e75e      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026d8:	2607      	movs	r6, #7
 80026da:	fa06 f609 	lsl.w	r6, r6, r9
 80026de:	4332      	orrs	r2, r6
 80026e0:	e759      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026e2:	2608      	movs	r6, #8
 80026e4:	fa06 f609 	lsl.w	r6, r6, r9
 80026e8:	4332      	orrs	r2, r6
 80026ea:	e754      	b.n	8002596 <HAL_GPIO_Init+0xe6>
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58020000 	.word	0x58020000
 80026f4:	58020800 	.word	0x58020800
 80026f8:	58020c00 	.word	0x58020c00
 80026fc:	58021000 	.word	0x58021000
 8002700:	58021400 	.word	0x58021400
 8002704:	58021800 	.word	0x58021800
 8002708:	58021c00 	.word	0x58021c00
 800270c:	58022000 	.word	0x58022000
 8002710:	58022400 	.word	0x58022400

08002714 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002714:	b902      	cbnz	r2, 8002718 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002716:	0409      	lsls	r1, r1, #16
 8002718:	6181      	str	r1, [r0, #24]
  }
}
 800271a:	4770      	bx	lr

0800271c <I2S_DMATxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800271c:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002720:	b94b      	cbnz	r3, 8002736 <I2S_DMATxCplt+0x1a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002722:	6801      	ldr	r1, [r0, #0]

    hi2s->TxXferCount = (uint16_t) 0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 8002724:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002728:	688a      	ldr	r2, [r1, #8]
 800272a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272e:	608a      	str	r2, [r1, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 8002730:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002732:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 8002736:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002738:	4718      	bx	r3
 800273a:	bf00      	nop

0800273c <I2S_DMATxHalfCplt>:
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 800273e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002740:	4718      	bx	r3
 8002742:	bf00      	nop

08002744 <I2S_DMARxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002744:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002746:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002748:	b94b      	cbnz	r3, 800275e <I2S_DMARxCplt+0x1a>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800274a:	6801      	ldr	r1, [r0, #0]
    hi2s->RxXferCount = (uint16_t)0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 800274c:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002750:	688a      	ldr	r2, [r1, #8]
 8002752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002756:	608a      	str	r2, [r1, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8002758:	8743      	strh	r3, [r0, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 800275a:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 800275e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002760:	4718      	bx	r3
 8002762:	bf00      	nop

08002764 <I2S_DMARxHalfCplt>:
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002764:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 8002766:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002768:	4718      	bx	r3
 800276a:	bf00      	nop

0800276c <I2S_DMAError>:
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800276c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
  hi2s->TxXferCount = (uint16_t) 0UL;
 800276e:	2200      	movs	r2, #0
  hi2s->RxXferCount = (uint16_t) 0UL;

  hi2s->State = HAL_I2S_STATE_READY;
 8002770:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	688b      	ldr	r3, [r1, #8]
 8002778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800277c:	608b      	str	r3, [r1, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 800277e:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8002780:	8742      	strh	r2, [r0, #58]	; 0x3a
  hi2s->State = HAL_I2S_STATE_READY;
 8002782:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002786:	6d03      	ldr	r3, [r0, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 8002788:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6503      	str	r3, [r0, #80]	; 0x50
  hi2s->ErrorCallback(hi2s);
 8002790:	4710      	bx	r2
 8002792:	bf00      	nop

08002794 <HAL_I2S_ErrorCallback>:
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <HAL_I2SEx_TxRxHalfCpltCallback>:
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <HAL_I2SEx_TxRxCpltCallback>:
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <HAL_I2S_Init>:
  if (hi2s == NULL)
 80027a0:	2800      	cmp	r0, #0
 80027a2:	f000 80b6 	beq.w	8002912 <HAL_I2S_Init+0x172>
{
 80027a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027a8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80027ac:	4604      	mov	r4, r0
 80027ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027b2:	b9ab      	cbnz	r3, 80027e0 <HAL_I2S_Init+0x40>
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_I2S_Init+0x1a4>)
    hi2s->Lock = HAL_UNLOCKED;
 80027b6:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 80027ba:	6543      	str	r3, [r0, #84]	; 0x54
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 80027bc:	4962      	ldr	r1, [pc, #392]	; (8002948 <HAL_I2S_Init+0x1a8>)
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_I2S_Init+0x1ac>)
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 80027c0:	4d63      	ldr	r5, [pc, #396]	; (8002950 <HAL_I2S_Init+0x1b0>)
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 80027c2:	4864      	ldr	r0, [pc, #400]	; (8002954 <HAL_I2S_Init+0x1b4>)
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 80027c4:	4a64      	ldr	r2, [pc, #400]	; (8002958 <HAL_I2S_Init+0x1b8>)
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 80027c6:	e9c4 5116 	strd	r5, r1, [r4, #88]	; 0x58
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 80027ca:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 80027ce:	4963      	ldr	r1, [pc, #396]	; (800295c <HAL_I2S_Init+0x1bc>)
    if (hi2s->MspInitCallback == NULL)
 80027d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 80027d2:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
    if (hi2s->MspInitCallback == NULL)
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a1 	beq.w	800291e <HAL_I2S_Init+0x17e>
    hi2s->MspInitCallback(hi2s);
 80027dc:	4620      	mov	r0, r4
 80027de:	4798      	blx	r3
  hi2s->State = HAL_I2S_STATE_BUSY;
 80027e0:	2302      	movs	r3, #2
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80027e2:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80027e4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	07db      	lsls	r3, r3, #31
 80027ec:	d448      	bmi.n	8002880 <HAL_I2S_Init+0xe0>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80027ee:	6865      	ldr	r5, [r4, #4]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80027f0:	2300      	movs	r3, #0
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80027f2:	f025 0002 	bic.w	r0, r5, #2
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80027f6:	6513      	str	r3, [r2, #80]	; 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80027f8:	2d0a      	cmp	r5, #10
 80027fa:	bf18      	it	ne
 80027fc:	2804      	cmpne	r0, #4
 80027fe:	bf0c      	ite	eq
 8002800:	2001      	moveq	r0, #1
 8002802:	2000      	movne	r0, #0
 8002804:	d141      	bne.n	800288a <HAL_I2S_Init+0xea>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002806:	6963      	ldr	r3, [r4, #20]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d06b      	beq.n	80028e4 <HAL_I2S_Init+0x144>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800280c:	2100      	movs	r1, #0
 800280e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002812:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        packetlength = 1UL;
 8002816:	2a00      	cmp	r2, #0
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
        packetlength = 1UL;
 800281c:	bf14      	ite	ne
 800281e:	2602      	movne	r6, #2
 8002820:	2601      	moveq	r6, #1
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002822:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002826:	f002 f885 	bl	8004934 <HAL_RCCEx_GetPeriphCLKFreq>
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800282a:	6921      	ldr	r1, [r4, #16]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800282c:	fab5 f585 	clz	r5, r5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002830:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002834:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002838:	d06d      	beq.n	8002916 <HAL_I2S_Init+0x176>
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800283a:	2320      	movs	r3, #32
 800283c:	40eb      	lsrs	r3, r5
 800283e:	fb06 f303 	mul.w	r3, r6, r3
 8002842:	6962      	ldr	r2, [r4, #20]
 8002844:	fbb0 f0f3 	udiv	r0, r0, r3
 8002848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800284c:	0043      	lsls	r3, r0, #1
 800284e:	fbb3 f3f2 	udiv	r3, r3, r2
      tmp = tmp / 10UL;
 8002852:	4a43      	ldr	r2, [pc, #268]	; (8002960 <HAL_I2S_Init+0x1c0>)
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002854:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800285a:	091e      	lsrs	r6, r3, #4
 800285c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002860:	f1a6 0201 	sub.w	r2, r6, #1
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	0952      	lsrs	r2, r2, #5
 800286a:	ea12 02d3 	ands.w	r2, r2, r3, lsr #3
 800286e:	d101      	bne.n	8002874 <HAL_I2S_Init+0xd4>
 8002870:	2eff      	cmp	r6, #255	; 0xff
 8002872:	d940      	bls.n	80028f6 <HAL_I2S_Init+0x156>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002874:	6d23      	ldr	r3, [r4, #80]	; 0x50
      return  HAL_ERROR;
 8002876:	2001      	movs	r0, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6523      	str	r3, [r4, #80]	; 0x50
}
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2S_DISABLE(hi2s);
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e7b1      	b.n	80027ee <HAL_I2S_Init+0x4e>
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800288a:	6921      	ldr	r1, [r4, #16]
 800288c:	6d17      	ldr	r7, [r2, #80]	; 0x50
 800288e:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8002892:	4333      	orrs	r3, r6
 8002894:	4e33      	ldr	r6, [pc, #204]	; (8002964 <HAL_I2S_Init+0x1c4>)
 8002896:	403e      	ands	r6, r7
 8002898:	4333      	orrs	r3, r6
 800289a:	69a6      	ldr	r6, [r4, #24]
 800289c:	4333      	orrs	r3, r6
 800289e:	6a26      	ldr	r6, [r4, #32]
 80028a0:	4333      	orrs	r3, r6
 80028a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80028a4:	4333      	orrs	r3, r6
 80028a6:	432b      	orrs	r3, r5
 80028a8:	430b      	orrs	r3, r1
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80028aa:	f640 71f8 	movw	r1, #4088	; 0xff8
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6513      	str	r3, [r2, #80]	; 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80028b4:	6191      	str	r1, [r2, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80028b6:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80028b8:	69e1      	ldr	r1, [r4, #28]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80028c0:	68d3      	ldr	r3, [r2, #12]
 80028c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028c6:	430b      	orrs	r3, r1
 80028c8:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80028ca:	b128      	cbz	r0, 80028d8 <HAL_I2S_Init+0x138>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80028cc:	68d3      	ldr	r3, [r2, #12]
 80028ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028d8:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80028da:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028dc:	6520      	str	r0, [r4, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80028de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 80028e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80028e4:	6921      	ldr	r1, [r4, #16]
 80028e6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80028ea:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_I2S_Init+0x1c8>)
 80028ee:	403b      	ands	r3, r7
 80028f0:	4333      	orrs	r3, r6
 80028f2:	6513      	str	r3, [r2, #80]	; 0x50
 80028f4:	e7ca      	b.n	800288c <HAL_I2S_Init+0xec>
    if (i2sdiv == 0UL)
 80028f6:	b9b6      	cbnz	r6, 8002926 <HAL_I2S_Init+0x186>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80028f8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80028fc:	e9d4 2500 	ldrd	r2, r5, [r4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002900:	f025 0002 	bic.w	r0, r5, #2
 8002904:	2d0a      	cmp	r5, #10
 8002906:	bf18      	it	ne
 8002908:	2804      	cmpne	r0, #4
 800290a:	bf0c      	ite	eq
 800290c:	2001      	moveq	r0, #1
 800290e:	2000      	movne	r0, #0
 8002910:	e7eb      	b.n	80028ea <HAL_I2S_Init+0x14a>
    return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
}
 8002914:	4770      	bx	lr
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291a:	40eb      	lsrs	r3, r5
 800291c:	e791      	b.n	8002842 <HAL_I2S_Init+0xa2>
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_I2S_Init+0x1cc>)
 8002920:	4613      	mov	r3, r2
 8002922:	6722      	str	r2, [r4, #112]	; 0x70
 8002924:	e75a      	b.n	80027dc <HAL_I2S_Init+0x3c>
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002926:	062d      	lsls	r5, r5, #24
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800292e:	6865      	ldr	r5, [r4, #4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002930:	f025 0002 	bic.w	r0, r5, #2
 8002934:	2d0a      	cmp	r5, #10
 8002936:	bf18      	it	ne
 8002938:	2804      	cmpne	r0, #4
 800293a:	bf0c      	ite	eq
 800293c:	2001      	moveq	r0, #1
 800293e:	2000      	movne	r0, #0
 8002940:	e7d3      	b.n	80028ea <HAL_I2S_Init+0x14a>
 8002942:	bf00      	nop
 8002944:	08000935 	.word	0x08000935
 8002948:	0800279d 	.word	0x0800279d
 800294c:	080008d1 	.word	0x080008d1
 8002950:	080008f5 	.word	0x080008f5
 8002954:	08000919 	.word	0x08000919
 8002958:	08002795 	.word	0x08002795
 800295c:	08002799 	.word	0x08002799
 8002960:	cccccccd 	.word	0xcccccccd
 8002964:	fdff9040 	.word	0xfdff9040
 8002968:	fe00ffff 	.word	0xfe00ffff
 800296c:	08000e5d 	.word	0x08000e5d

08002970 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002970:	2900      	cmp	r1, #0
 8002972:	d04e      	beq.n	8002a12 <HAL_I2S_Transmit_DMA+0xa2>
{
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 8002976:	fab2 f582 	clz	r5, r2
 800297a:	096d      	lsrs	r5, r5, #5
 800297c:	2a00      	cmp	r2, #0
 800297e:	d03c      	beq.n	80029fa <HAL_I2S_Transmit_DMA+0x8a>
 8002980:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002982:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
 8002986:	2801      	cmp	r0, #1
 8002988:	b2c6      	uxtb	r6, r0
 800298a:	d134      	bne.n	80029f6 <HAL_I2S_Transmit_DMA+0x86>
  __HAL_LOCK(hi2s);
 800298c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002990:	2801      	cmp	r0, #1
 8002992:	d030      	beq.n	80029f6 <HAL_I2S_Transmit_DMA+0x86>
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002994:	6c60      	ldr	r0, [r4, #68]	; 0x44
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8002996:	2303      	movs	r3, #3
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002998:	4f1f      	ldr	r7, [pc, #124]	; (8002a18 <HAL_I2S_Transmit_DMA+0xa8>)
  __HAL_LOCK(hi2s);
 800299a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 800299e:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80029a0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->pRxBuffPtr  = NULL;
 80029a4:	6365      	str	r5, [r4, #52]	; 0x34
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80029a6:	6525      	str	r5, [r4, #80]	; 0x50
  hi2s->TxXferSize  = Size;
 80029a8:	8622      	strh	r2, [r4, #48]	; 0x30
  hi2s->TxXferCount = Size;
 80029aa:	8662      	strh	r2, [r4, #50]	; 0x32
  hi2s->RxXferSize  = (uint16_t)0UL;
 80029ac:	8725      	strh	r5, [r4, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80029ae:	6822      	ldr	r2, [r4, #0]
  hi2s->RxXferCount = (uint16_t)0UL;
 80029b0:	8765      	strh	r5, [r4, #58]	; 0x3a
                                 hi2s->TxXferCount))
 80029b2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80029b4:	3220      	adds	r2, #32
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80029b6:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80029b8:	4f18      	ldr	r7, [pc, #96]	; (8002a1c <HAL_I2S_Transmit_DMA+0xac>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80029ba:	b29b      	uxth	r3, r3
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80029bc:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80029be:	4f18      	ldr	r7, [pc, #96]	; (8002a20 <HAL_I2S_Transmit_DMA+0xb0>)
 80029c0:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80029c2:	f7ff f88f 	bl	8001ae4 <HAL_DMA_Start_IT>
 80029c6:	b9d0      	cbnz	r0, 80029fe <HAL_I2S_Transmit_DMA+0x8e>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	0411      	lsls	r1, r2, #16
 80029ce:	d403      	bmi.n	80029d8 <HAL_I2S_Transmit_DMA+0x68>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d6:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	07d2      	lsls	r2, r2, #31
 80029dc:	d403      	bmi.n	80029e6 <HAL_I2S_Transmit_DMA+0x76>
    __HAL_I2S_ENABLE(hi2s);
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80029e6:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 80029e8:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 80029f0:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 80029f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80029f6:	2002      	movs	r0, #2
}
 80029f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
}
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 8002a00:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8002a08:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8002a0c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8002a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	0800273d 	.word	0x0800273d
 8002a1c:	0800271d 	.word	0x0800271d
 8002a20:	0800276d 	.word	0x0800276d

08002a24 <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002a24:	2900      	cmp	r1, #0
 8002a26:	d050      	beq.n	8002aca <HAL_I2S_Receive_DMA+0xa6>
{
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 8002a2a:	fab2 f582 	clz	r5, r2
 8002a2e:	4613      	mov	r3, r2
 8002a30:	096d      	lsrs	r5, r5, #5
 8002a32:	2a00      	cmp	r2, #0
 8002a34:	d03d      	beq.n	8002ab2 <HAL_I2S_Receive_DMA+0x8e>
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a36:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	2a01      	cmp	r2, #1
 8002a3e:	b2d6      	uxtb	r6, r2
 8002a40:	d135      	bne.n	8002aae <HAL_I2S_Receive_DMA+0x8a>
  __HAL_LOCK(hi2s);
 8002a42:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8002a46:	2a01      	cmp	r2, #1
 8002a48:	d031      	beq.n	8002aae <HAL_I2S_Receive_DMA+0x8a>
  hi2s->pRxBuffPtr  = pData;
 8002a4a:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002a4c:	460a      	mov	r2, r1
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8002a4e:	2104      	movs	r1, #4
  __HAL_LOCK(hi2s);
 8002a50:	f880 604c 	strb.w	r6, [r0, #76]	; 0x4c
  hi2s->pTxBuffPtr  = NULL;
 8002a54:	62c5      	str	r5, [r0, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8002a56:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a5a:	4f1d      	ldr	r7, [pc, #116]	; (8002ad0 <HAL_I2S_Receive_DMA+0xac>)
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8002a5c:	6505      	str	r5, [r0, #80]	; 0x50
  hi2s->RxXferSize  = Size;
 8002a5e:	8703      	strh	r3, [r0, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8002a60:	8743      	strh	r3, [r0, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a62:	6c80      	ldr	r0, [r0, #72]	; 0x48
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002a64:	6821      	ldr	r1, [r4, #0]
  hi2s->TxXferSize  = (uint16_t)0UL;
 8002a66:	8625      	strh	r5, [r4, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8002a68:	8665      	strh	r5, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002a6a:	3130      	adds	r1, #48	; 0x30
                                 hi2s->RxXferCount))
 8002a6c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a6e:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002a70:	4f18      	ldr	r7, [pc, #96]	; (8002ad4 <HAL_I2S_Receive_DMA+0xb0>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002a72:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002a74:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002a76:	4f18      	ldr	r7, [pc, #96]	; (8002ad8 <HAL_I2S_Receive_DMA+0xb4>)
 8002a78:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002a7a:	f7ff f833 	bl	8001ae4 <HAL_DMA_Start_IT>
 8002a7e:	b9d0      	cbnz	r0, 8002ab6 <HAL_I2S_Receive_DMA+0x92>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	0451      	lsls	r1, r2, #17
 8002a86:	d403      	bmi.n	8002a90 <HAL_I2S_Receive_DMA+0x6c>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8e:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	07d2      	lsls	r2, r2, #31
 8002a94:	d403      	bmi.n	8002a9e <HAL_I2S_Receive_DMA+0x7a>
    __HAL_I2S_ENABLE(hi2s);
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002a9e:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002aa0:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002aa8:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 8002aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002aae:	2002      	movs	r0, #2
}
 8002ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002ab2:	2001      	movs	r0, #1
}
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ab6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 8002ab8:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8002ac0:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8002ac4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	08002765 	.word	0x08002765
 8002ad4:	08002745 	.word	0x08002745
 8002ad8:	0800276d 	.word	0x0800276d

08002adc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ade:	4c1c      	ldr	r4, [pc, #112]	; (8002b50 <HAL_PWREx_ConfigSupply+0x74>)
{
 8002ae0:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ae2:	68e3      	ldr	r3, [r4, #12]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002aea:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002aec:	d005      	beq.n	8002afa <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002af2:	1a18      	subs	r0, r3, r0
 8002af4:	bf18      	it	ne
 8002af6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afe:	4303      	orrs	r3, r0
 8002b00:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002b02:	f7fe fbdd 	bl	80012c0 <HAL_GetTick>
 8002b06:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b08:	e005      	b.n	8002b16 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b0a:	f7fe fbd9 	bl	80012c0 <HAL_GetTick>
 8002b0e:	1b83      	subs	r3, r0, r6
 8002b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b14:	d81a      	bhi.n	8002b4c <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	049a      	lsls	r2, r3, #18
 8002b1a:	d5f6      	bpl.n	8002b0a <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b1c:	f1a5 031d 	sub.w	r3, r5, #29
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d904      	bls.n	8002b2e <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8002b24:	3d2d      	subs	r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b26:	2d01      	cmp	r5, #1
 8002b28:	d901      	bls.n	8002b2e <HAL_PWREx_ConfigSupply+0x52>
  return HAL_OK;
 8002b2a:	2000      	movs	r0, #0
}
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8002b2e:	f7fe fbc7 	bl	80012c0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b32:	4d07      	ldr	r5, [pc, #28]	; (8002b50 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8002b34:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b36:	e005      	b.n	8002b44 <HAL_PWREx_ConfigSupply+0x68>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b38:	f7fe fbc2 	bl	80012c0 <HAL_GetTick>
 8002b3c:	1b00      	subs	r0, r0, r4
 8002b3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b42:	d803      	bhi.n	8002b4c <HAL_PWREx_ConfigSupply+0x70>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b44:	68eb      	ldr	r3, [r5, #12]
 8002b46:	03db      	lsls	r3, r3, #15
 8002b48:	d5f6      	bpl.n	8002b38 <HAL_PWREx_ConfigSupply+0x5c>
 8002b4a:	e7ee      	b.n	8002b2a <HAL_PWREx_ConfigSupply+0x4e>
      return HAL_ERROR;
 8002b4c:	2001      	movs	r0, #1
}
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	58024800 	.word	0x58024800

08002b54 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002b56:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b5a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002b5e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b62:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b64:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002b68:	d038      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b6a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b6e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b72:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b76:	fb05 f101 	mul.w	r1, r5, r1
 8002b7a:	2a01      	cmp	r2, #1
 8002b7c:	ee07 1a90 	vmov	s15, r1
 8002b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8002b86:	2a02      	cmp	r2, #2
 8002b88:	d050      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8002b8a:	b34a      	cbz	r2, 8002be0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b8c:	ee07 0a90 	vmov	s15, r0
 8002b90:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8002c4c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002b9e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002c50 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002bb6:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002bba:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002bc6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002bdc:	bc30      	pop	{r4, r5}
 8002bde:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	0692      	lsls	r2, r2, #26
 8002be4:	d529      	bpl.n	8002c3a <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002be6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002be8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bf4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002c50 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c04:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c06:	ee06 3a10 	vmov	s12, r3
 8002c0a:	ee05 2a90 	vmov	s11, r2
 8002c0e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002c12:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002c16:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002c1a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8002c1e:	eef0 7a46 	vmov.f32	s15, s12
 8002c22:	eee7 7a05 	vfma.f32	s15, s14, s10
 8002c26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c2a:	e7c8      	b.n	8002bbe <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c2c:	ee07 0a90 	vmov	s15, r0
 8002c30:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8002c58 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8002c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c38:	e7ae      	b.n	8002b98 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c3a:	ee07 0a90 	vmov	s15, r0
 8002c3e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002c5c <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	e7a7      	b.n	8002b98 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	4a742400 	.word	0x4a742400
 8002c50:	39000000 	.word	0x39000000
 8002c54:	03d09000 	.word	0x03d09000
 8002c58:	4bbebc20 	.word	0x4bbebc20
 8002c5c:	4c742400 	.word	0x4c742400

08002c60 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f000 81e8 	beq.w	8003036 <HAL_RCC_OscConfig+0x3d6>
{
 8002c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	07d9      	lsls	r1, r3, #31
 8002c6e:	d52e      	bpl.n	8002cce <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c70:	49a4      	ldr	r1, [pc, #656]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002c72:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c74:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c76:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c7a:	2a10      	cmp	r2, #16
 8002c7c:	f000 8107 	beq.w	8002e8e <HAL_RCC_OscConfig+0x22e>
 8002c80:	2a18      	cmp	r2, #24
 8002c82:	f000 80ff 	beq.w	8002e84 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	f000 812a 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x284>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8168 	beq.w	8002f66 <HAL_RCC_OscConfig+0x306>
 8002c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9a:	4b9a      	ldr	r3, [pc, #616]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f000 8289 	beq.w	80031b4 <HAL_RCC_OscConfig+0x554>
 8002ca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fb06 	bl	80012c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb4:	4e93      	ldr	r6, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8002cb6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb8:	e005      	b.n	8002cc6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cba:	f7fe fb01 	bl	80012c0 <HAL_GetTick>
 8002cbe:	1b40      	subs	r0, r0, r5
 8002cc0:	2864      	cmp	r0, #100	; 0x64
 8002cc2:	f200 814e 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc6:	6833      	ldr	r3, [r6, #0]
 8002cc8:	039b      	lsls	r3, r3, #14
 8002cca:	d5f6      	bpl.n	8002cba <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	079d      	lsls	r5, r3, #30
 8002cd0:	f100 808a 	bmi.w	8002de8 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cd4:	06d9      	lsls	r1, r3, #27
 8002cd6:	d533      	bpl.n	8002d40 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd8:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002cda:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	f000 80e3 	beq.w	8002eae <HAL_RCC_OscConfig+0x24e>
 8002ce8:	2b18      	cmp	r3, #24
 8002cea:	f000 80db 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cee:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002cf0:	4d84      	ldr	r5, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 816f 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d00:	f7fe fade 	bl	80012c0 <HAL_GetTick>
 8002d04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d06:	e005      	b.n	8002d14 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d08:	f7fe fada 	bl	80012c0 <HAL_GetTick>
 8002d0c:	1b80      	subs	r0, r0, r6
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	f200 8127 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	05db      	lsls	r3, r3, #23
 8002d18:	d5f6      	bpl.n	8002d08 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d1a:	f7fe fae9 	bl	80012f0 <HAL_GetREVID>
 8002d1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d22:	4298      	cmp	r0, r3
 8002d24:	f200 826d 	bhi.w	8003202 <HAL_RCC_OscConfig+0x5a2>
 8002d28:	6a22      	ldr	r2, [r4, #32]
 8002d2a:	686b      	ldr	r3, [r5, #4]
 8002d2c:	2a20      	cmp	r2, #32
 8002d2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d32:	bf0c      	ite	eq
 8002d34:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002d3c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	071d      	lsls	r5, r3, #28
 8002d42:	d516      	bpl.n	8002d72 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d44:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4d6f      	ldr	r5, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8122 	beq.w	8002f92 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002d56:	f7fe fab3 	bl	80012c0 <HAL_GetTick>
 8002d5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe faaf 	bl	80012c0 <HAL_GetTick>
 8002d62:	1b80      	subs	r0, r0, r6
 8002d64:	2802      	cmp	r0, #2
 8002d66:	f200 80fc 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d6c:	0798      	lsls	r0, r3, #30
 8002d6e:	d5f6      	bpl.n	8002d5e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	069a      	lsls	r2, r3, #26
 8002d74:	d516      	bpl.n	8002da4 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d76:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002d78:	4d62      	ldr	r5, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 811a 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d88:	f7fe fa9a 	bl	80012c0 <HAL_GetTick>
 8002d8c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d8e:	e005      	b.n	8002d9c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d90:	f7fe fa96 	bl	80012c0 <HAL_GetTick>
 8002d94:	1b80      	subs	r0, r0, r6
 8002d96:	2802      	cmp	r0, #2
 8002d98:	f200 80e3 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	049f      	lsls	r7, r3, #18
 8002da0:	d5f6      	bpl.n	8002d90 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	0759      	lsls	r1, r3, #29
 8002da6:	f100 80a3 	bmi.w	8002ef0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002dac:	b1d0      	cbz	r0, 8002de4 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dae:	4d55      	ldr	r5, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002db0:	692b      	ldr	r3, [r5, #16]
 8002db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	f000 81ae 	beq.w	8003118 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc6:	f000 8142 	beq.w	800304e <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8002dca:	f7fe fa79 	bl	80012c0 <HAL_GetTick>
 8002dce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd0:	e005      	b.n	8002dde <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fa75 	bl	80012c0 <HAL_GetTick>
 8002dd6:	1b00      	subs	r0, r0, r4
 8002dd8:	2802      	cmp	r0, #2
 8002dda:	f200 80c2 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	d4f6      	bmi.n	8002dd2 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8002de4:	2000      	movs	r0, #0
}
 8002de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de8:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002dea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002df2:	d12d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002df6:	68e2      	ldr	r2, [r4, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0759      	lsls	r1, r3, #29
 8002dfc:	d501      	bpl.n	8002e02 <HAL_RCC_OscConfig+0x1a2>
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	d04e      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e02:	4d40      	ldr	r5, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	f023 0319 	bic.w	r3, r3, #25
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fa57 	bl	80012c0 <HAL_GetTick>
 8002e12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e14:	e005      	b.n	8002e22 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe fa53 	bl	80012c0 <HAL_GetTick>
 8002e1a:	1b80      	subs	r0, r0, r6
 8002e1c:	2802      	cmp	r0, #2
 8002e1e:	f200 80a0 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	075b      	lsls	r3, r3, #29
 8002e26:	d5f6      	bpl.n	8002e16 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	f7fe fa62 	bl	80012f0 <HAL_GetREVID>
 8002e2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e30:	4298      	cmp	r0, r3
 8002e32:	f200 80f7 	bhi.w	8003024 <HAL_RCC_OscConfig+0x3c4>
 8002e36:	6922      	ldr	r2, [r4, #16]
 8002e38:	686b      	ldr	r3, [r5, #4]
 8002e3a:	2a40      	cmp	r2, #64	; 0x40
 8002e3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e40:	bf0c      	ite	eq
 8002e42:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002e46:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002e4a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	e741      	b.n	8002cd4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	f000 80e3 	beq.w	800301c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e56:	4d2b      	ldr	r5, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e58:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e5a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	f000 80cc 	beq.w	8002ffa <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e62:	f023 0319 	bic.w	r3, r3, #25
 8002e66:	4313      	orrs	r3, r2
 8002e68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fa29 	bl	80012c0 <HAL_GetTick>
 8002e6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fa25 	bl	80012c0 <HAL_GetTick>
 8002e76:	1b80      	subs	r0, r0, r6
 8002e78:	2802      	cmp	r0, #2
 8002e7a:	d872      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	075f      	lsls	r7, r3, #29
 8002e80:	d5f7      	bpl.n	8002e72 <HAL_RCC_OscConfig+0x212>
 8002e82:	e7d1      	b.n	8002e28 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e84:	f001 0103 	and.w	r1, r1, #3
 8002e88:	2902      	cmp	r1, #2
 8002e8a:	f47f aefc 	bne.w	8002c86 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	0392      	lsls	r2, r2, #14
 8002e94:	f57f af1b 	bpl.w	8002cce <HAL_RCC_OscConfig+0x6e>
 8002e98:	6862      	ldr	r2, [r4, #4]
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	f47f af17 	bne.w	8002cce <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002ea0:	2001      	movs	r0, #1
}
 8002ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	2a01      	cmp	r2, #1
 8002eaa:	f47f af20 	bne.w	8002cee <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	05da      	lsls	r2, r3, #23
 8002eb4:	d502      	bpl.n	8002ebc <HAL_RCC_OscConfig+0x25c>
 8002eb6:	69e3      	ldr	r3, [r4, #28]
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d1f1      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	f7fe fa18 	bl	80012f0 <HAL_GetREVID>
 8002ec0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	f200 80b8 	bhi.w	800303a <HAL_RCC_OscConfig+0x3da>
 8002eca:	6a22      	ldr	r2, [r4, #32]
 8002ecc:	2a20      	cmp	r2, #32
 8002ece:	f000 81a7 	beq.w	8003220 <HAL_RCC_OscConfig+0x5c0>
 8002ed2:	490c      	ldr	r1, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002ed4:	684b      	ldr	r3, [r1, #4]
 8002ed6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002eda:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002ede:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	e72d      	b.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x2a4>)
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eee:	e6df      	b.n	8002cb0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef0:	4d05      	ldr	r5, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x2a8>)
 8002ef2:	682b      	ldr	r3, [r5, #0]
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002efa:	f7fe f9e1 	bl	80012c0 <HAL_GetTick>
 8002efe:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f00:	e009      	b.n	8002f16 <HAL_RCC_OscConfig+0x2b6>
 8002f02:	bf00      	nop
 8002f04:	58024400 	.word	0x58024400
 8002f08:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fe f9d8 	bl	80012c0 <HAL_GetTick>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	2864      	cmp	r0, #100	; 0x64
 8002f14:	d825      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	05da      	lsls	r2, r3, #23
 8002f1a:	d5f7      	bpl.n	8002f0c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	68a3      	ldr	r3, [r4, #8]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f000 8178 	beq.w	8003214 <HAL_RCC_OscConfig+0x5b4>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8153 	beq.w	80031d0 <HAL_RCC_OscConfig+0x570>
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	4ba5      	ldr	r3, [pc, #660]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
 8002f2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f30:	f000 817f 	beq.w	8003232 <HAL_RCC_OscConfig+0x5d2>
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	671a      	str	r2, [r3, #112]	; 0x70
 8002f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f3c:	f022 0204 	bic.w	r2, r2, #4
 8002f40:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002f42:	f7fe f9bd 	bl	80012c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f46:	4e9f      	ldr	r6, [pc, #636]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f4c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4e:	e004      	b.n	8002f5a <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe f9b6 	bl	80012c0 <HAL_GetTick>
 8002f54:	1b40      	subs	r0, r0, r5
 8002f56:	42b8      	cmp	r0, r7
 8002f58:	d803      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f5a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002f5c:	079b      	lsls	r3, r3, #30
 8002f5e:	d5f7      	bpl.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
 8002f60:	e723      	b.n	8002daa <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8002f62:	2003      	movs	r0, #3
}
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f66:	4d97      	ldr	r5, [pc, #604]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	602b      	str	r3, [r5, #0]
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f78:	f7fe f9a2 	bl	80012c0 <HAL_GetTick>
 8002f7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f7e:	e004      	b.n	8002f8a <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe f99e 	bl	80012c0 <HAL_GetTick>
 8002f84:	1b80      	subs	r0, r0, r6
 8002f86:	2864      	cmp	r0, #100	; 0x64
 8002f88:	d8eb      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f8a:	682b      	ldr	r3, [r5, #0]
 8002f8c:	039f      	lsls	r7, r3, #14
 8002f8e:	d4f7      	bmi.n	8002f80 <HAL_RCC_OscConfig+0x320>
 8002f90:	e69c      	b.n	8002ccc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002f92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f991 	bl	80012c0 <HAL_GetTick>
 8002f9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa0:	e004      	b.n	8002fac <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe f98d 	bl	80012c0 <HAL_GetTick>
 8002fa6:	1b80      	subs	r0, r0, r6
 8002fa8:	2802      	cmp	r0, #2
 8002faa:	d8da      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002fae:	0799      	lsls	r1, r3, #30
 8002fb0:	d4f7      	bmi.n	8002fa2 <HAL_RCC_OscConfig+0x342>
 8002fb2:	e6dd      	b.n	8002d70 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002fbc:	f7fe f980 	bl	80012c0 <HAL_GetTick>
 8002fc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fc2:	e004      	b.n	8002fce <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc4:	f7fe f97c 	bl	80012c0 <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d8c9      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fce:	682b      	ldr	r3, [r5, #0]
 8002fd0:	0498      	lsls	r0, r3, #18
 8002fd2:	d4f7      	bmi.n	8002fc4 <HAL_RCC_OscConfig+0x364>
 8002fd4:	e6e5      	b.n	8002da2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fdc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fde:	f7fe f96f 	bl	80012c0 <HAL_GetTick>
 8002fe2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fe6:	f7fe f96b 	bl	80012c0 <HAL_GetTick>
 8002fea:	1b80      	subs	r0, r0, r6
 8002fec:	2802      	cmp	r0, #2
 8002fee:	d8b8      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	05df      	lsls	r7, r3, #23
 8002ff4:	d4f7      	bmi.n	8002fe6 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	e6a2      	b.n	8002d40 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003000:	f7fe f95e 	bl	80012c0 <HAL_GetTick>
 8003004:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003006:	e004      	b.n	8003012 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe f95a 	bl	80012c0 <HAL_GetTick>
 800300c:	1b80      	subs	r0, r0, r6
 800300e:	2802      	cmp	r0, #2
 8003010:	d8a7      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	0758      	lsls	r0, r3, #29
 8003016:	d4f7      	bmi.n	8003008 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	e65b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800301c:	0790      	lsls	r0, r2, #30
 800301e:	f47f af1a 	bne.w	8002e56 <HAL_RCC_OscConfig+0x1f6>
 8003022:	e6e7      	b.n	8002df4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	686b      	ldr	r3, [r5, #4]
 8003026:	6922      	ldr	r2, [r4, #16]
 8003028:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800302c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003030:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	e64e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
}
 8003038:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800303a:	4a62      	ldr	r2, [pc, #392]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
 800303c:	6a21      	ldr	r1, [r4, #32]
 800303e:	68d3      	ldr	r3, [r2, #12]
 8003040:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003044:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003048:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	e678      	b.n	8002d40 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800304e:	f7fe f937 	bl	80012c0 <HAL_GetTick>
 8003052:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003054:	e004      	b.n	8003060 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe f933 	bl	80012c0 <HAL_GetTick>
 800305a:	1b80      	subs	r0, r0, r6
 800305c:	2802      	cmp	r0, #2
 800305e:	d880      	bhi.n	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	0199      	lsls	r1, r3, #6
 8003064:	d4f7      	bmi.n	8003056 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003066:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003068:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_RCC_OscConfig+0x568>)
 800306a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800306c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800306e:	4957      	ldr	r1, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003070:	4e54      	ldr	r6, [pc, #336]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003072:	4313      	orrs	r3, r2
 8003074:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003076:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800307a:	62ab      	str	r3, [r5, #40]	; 0x28
 800307c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003080:	3b01      	subs	r3, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	025b      	lsls	r3, r3, #9
 8003086:	0412      	lsls	r2, r2, #16
 8003088:	b29b      	uxth	r3, r3
 800308a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800308e:	4313      	orrs	r3, r2
 8003090:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003092:	3a01      	subs	r2, #1
 8003094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003098:	4313      	orrs	r3, r2
 800309a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800309c:	3a01      	subs	r2, #1
 800309e:	0612      	lsls	r2, r2, #24
 80030a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80030a4:	4313      	orrs	r3, r2
 80030a6:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80030a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80030b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030b4:	4011      	ands	r1, r2
 80030b6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80030ba:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030c0:	f023 030c 	bic.w	r3, r3, #12
 80030c4:	4313      	orrs	r3, r2
 80030c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80030cc:	f023 0302 	bic.w	r3, r3, #2
 80030d0:	4313      	orrs	r3, r2
 80030d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80030ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030fc:	f7fe f8e0 	bl	80012c0 <HAL_GetTick>
 8003100:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003102:	e005      	b.n	8003110 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe f8dc 	bl	80012c0 <HAL_GetTick>
 8003108:	1b00      	subs	r0, r0, r4
 800310a:	2802      	cmp	r0, #2
 800310c:	f63f af29 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003110:	6833      	ldr	r3, [r6, #0]
 8003112:	019a      	lsls	r2, r3, #6
 8003114:	d5f6      	bpl.n	8003104 <HAL_RCC_OscConfig+0x4a4>
 8003116:	e665      	b.n	8002de4 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003118:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800311a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800311c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	f43f ae62 	beq.w	8002de6 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003128:	428b      	cmp	r3, r1
 800312a:	f47f aeb9 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800312e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003134:	429a      	cmp	r2, r3
 8003136:	f47f aeb3 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800313a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800313c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8003140:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	f47f aeac 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800314a:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800314e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	f47f aea5 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003158:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800315c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	f47f ae9e 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003166:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800316a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800316c:	429e      	cmp	r6, r3
 800316e:	f47f ae97 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003172:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003174:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003176:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800317a:	429a      	cmp	r2, r3
 800317c:	f43f ae32 	beq.w	8002de4 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003180:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
 8003182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800318a:	f7fe f899 	bl	80012c0 <HAL_GetTick>
 800318e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003190:	f7fe f896 	bl	80012c0 <HAL_GetTick>
 8003194:	42a8      	cmp	r0, r5
 8003196:	d0fb      	beq.n	8003190 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800319a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800319c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x56c>)
 80031a0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80031a2:	4023      	ands	r3, r4
 80031a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031a8:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80031aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80031b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e575      	b.n	8002cb0 <HAL_RCC_OscConfig+0x50>
 80031c4:	58024400 	.word	0x58024400
 80031c8:	fffffc0c 	.word	0xfffffc0c
 80031cc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	4d1c      	ldr	r5, [pc, #112]	; (8003244 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	672b      	str	r3, [r5, #112]	; 0x70
 80031de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80031e6:	f7fe f86b 	bl	80012c0 <HAL_GetTick>
 80031ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ec:	e005      	b.n	80031fa <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe f867 	bl	80012c0 <HAL_GetTick>
 80031f2:	1b80      	subs	r0, r0, r6
 80031f4:	42b8      	cmp	r0, r7
 80031f6:	f63f aeb4 	bhi.w	8002f62 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031fc:	0798      	lsls	r0, r3, #30
 80031fe:	d4f6      	bmi.n	80031ee <HAL_RCC_OscConfig+0x58e>
 8003200:	e5d3      	b.n	8002daa <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003202:	68eb      	ldr	r3, [r5, #12]
 8003204:	6a22      	ldr	r2, [r4, #32]
 8003206:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800320a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800320e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	e595      	b.n	8002d40 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x5e4>)
 8003216:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321e:	e690      	b.n	8002f42 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x5e4>)
 8003222:	6853      	ldr	r3, [r2, #4]
 8003224:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800322c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	e586      	b.n	8002d40 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	f042 0204 	orr.w	r2, r2, #4
 8003236:	671a      	str	r2, [r3, #112]	; 0x70
 8003238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	671a      	str	r2, [r3, #112]	; 0x70
 8003240:	e67f      	b.n	8002f42 <HAL_RCC_OscConfig+0x2e2>
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400

08003248 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_RCC_GetSysClockFreq+0x124>)
 800324a:	6913      	ldr	r3, [r2, #16]
 800324c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003250:	2b10      	cmp	r3, #16
 8003252:	d004      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x16>
 8003254:	2b18      	cmp	r3, #24
 8003256:	d00d      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c>
 8003258:	b11b      	cbz	r3, 8003262 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800325a:	4845      	ldr	r0, [pc, #276]	; (8003370 <HAL_RCC_GetSysClockFreq+0x128>)
 800325c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325e:	4845      	ldr	r0, [pc, #276]	; (8003374 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003260:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	0699      	lsls	r1, r3, #26
 8003266:	d54a      	bpl.n	80032fe <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	4843      	ldr	r0, [pc, #268]	; (8003378 <HAL_RCC_GetSysClockFreq+0x130>)
 800326c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003270:	40d8      	lsrs	r0, r3
 8003272:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003274:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8003276:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003278:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800327a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800327c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003280:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003282:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003286:	d038      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003288:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800328c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003290:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003294:	fb05 f101 	mul.w	r1, r5, r1
 8003298:	2b01      	cmp	r3, #1
 800329a:	ee07 1a90 	vmov	s15, r1
 800329e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80032a2:	d002      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x62>
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d02c      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0xba>
 80032a8:	b393      	cbz	r3, 8003310 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032aa:	ee07 0a90 	vmov	s15, r0
 80032ae:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800337c <HAL_RCC_GetSysClockFreq+0x134>
 80032b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032b8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80032bc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003380 <HAL_RCC_GetSysClockFreq+0x138>
 80032c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80032cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80032d4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80032d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032dc:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_RCC_GetSysClockFreq+0x124>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80032e4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f6:	ee17 0a90 	vmov	r0, s15
}
 80032fa:	bc30      	pop	{r4, r5}
 80032fc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032fe:	481e      	ldr	r0, [pc, #120]	; (8003378 <HAL_RCC_GetSysClockFreq+0x130>)
}
 8003300:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003302:	ee07 0a90 	vmov	s15, r0
 8003306:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8003384 <HAL_RCC_GetSysClockFreq+0x13c>
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	e7d2      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	d522      	bpl.n	800335c <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003316:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800331c:	4916      	ldr	r1, [pc, #88]	; (8003378 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800331e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003322:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003324:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800332c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8003380 <HAL_RCC_GetSysClockFreq+0x138>
 8003330:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003334:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003336:	ee06 3a10 	vmov	s12, r3
 800333a:	ee05 1a90 	vmov	s11, r1
 800333e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003342:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003346:	ee36 6a26 	vadd.f32	s12, s12, s13
 800334a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800334e:	eef0 7a46 	vmov.f32	s15, s12
 8003352:	eee7 7a05 	vfma.f32	s15, s14, s10
 8003356:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800335a:	e7bf      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	ee07 0a90 	vmov	s15, r0
 8003360:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003388 <HAL_RCC_GetSysClockFreq+0x140>
 8003364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003368:	e7a5      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x6e>
 800336a:	bf00      	nop
 800336c:	58024400 	.word	0x58024400
 8003370:	003d0900 	.word	0x003d0900
 8003374:	017d7840 	.word	0x017d7840
 8003378:	03d09000 	.word	0x03d09000
 800337c:	4a742400 	.word	0x4a742400
 8003380:	39000000 	.word	0x39000000
 8003384:	4bbebc20 	.word	0x4bbebc20
 8003388:	4c742400 	.word	0x4c742400

0800338c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800338c:	2800      	cmp	r0, #0
 800338e:	f000 810c 	beq.w	80035aa <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003392:	4a8c      	ldr	r2, [pc, #560]	; (80035c4 <HAL_RCC_ClockConfig+0x238>)
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	428b      	cmp	r3, r1
{
 800339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a0:	4604      	mov	r4, r0
 80033a2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b0:	6813      	ldr	r3, [r2, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	428b      	cmp	r3, r1
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80033ba:	2001      	movs	r0, #1
}
 80033bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	075f      	lsls	r7, r3, #29
 80033c4:	d50b      	bpl.n	80033de <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c6:	4980      	ldr	r1, [pc, #512]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 80033c8:	6920      	ldr	r0, [r4, #16]
 80033ca:	698a      	ldr	r2, [r1, #24]
 80033cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033d0:	4290      	cmp	r0, r2
 80033d2:	d904      	bls.n	80033de <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d4:	698a      	ldr	r2, [r1, #24]
 80033d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033da:	4302      	orrs	r2, r0
 80033dc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033de:	071e      	lsls	r6, r3, #28
 80033e0:	d50b      	bpl.n	80033fa <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033e2:	4979      	ldr	r1, [pc, #484]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 80033e4:	6960      	ldr	r0, [r4, #20]
 80033e6:	69ca      	ldr	r2, [r1, #28]
 80033e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033ec:	4290      	cmp	r0, r2
 80033ee:	d904      	bls.n	80033fa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033f0:	69ca      	ldr	r2, [r1, #28]
 80033f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033f6:	4302      	orrs	r2, r0
 80033f8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	06d8      	lsls	r0, r3, #27
 80033fc:	d50b      	bpl.n	8003416 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033fe:	4972      	ldr	r1, [pc, #456]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 8003400:	69a0      	ldr	r0, [r4, #24]
 8003402:	69ca      	ldr	r2, [r1, #28]
 8003404:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003408:	4290      	cmp	r0, r2
 800340a:	d904      	bls.n	8003416 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800340c:	69ca      	ldr	r2, [r1, #28]
 800340e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003412:	4302      	orrs	r2, r0
 8003414:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003416:	0699      	lsls	r1, r3, #26
 8003418:	d50b      	bpl.n	8003432 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800341a:	496b      	ldr	r1, [pc, #428]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 800341c:	69e0      	ldr	r0, [r4, #28]
 800341e:	6a0a      	ldr	r2, [r1, #32]
 8003420:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003424:	4290      	cmp	r0, r2
 8003426:	d904      	bls.n	8003432 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003428:	6a0a      	ldr	r2, [r1, #32]
 800342a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800342e:	4302      	orrs	r2, r0
 8003430:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003432:	079a      	lsls	r2, r3, #30
 8003434:	f140 80ab 	bpl.w	800358e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003438:	4863      	ldr	r0, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 800343a:	68e1      	ldr	r1, [r4, #12]
 800343c:	6982      	ldr	r2, [r0, #24]
 800343e:	f002 020f 	and.w	r2, r2, #15
 8003442:	4291      	cmp	r1, r2
 8003444:	d904      	bls.n	8003450 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003446:	6982      	ldr	r2, [r0, #24]
 8003448:	f022 020f 	bic.w	r2, r2, #15
 800344c:	430a      	orrs	r2, r1
 800344e:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003450:	07d8      	lsls	r0, r3, #31
 8003452:	d530      	bpl.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 8003456:	68a1      	ldr	r1, [r4, #8]
 8003458:	6993      	ldr	r3, [r2, #24]
 800345a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800345e:	430b      	orrs	r3, r1
 8003460:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003464:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	2902      	cmp	r1, #2
 8003468:	f000 80a1 	beq.w	80035ae <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346c:	2903      	cmp	r1, #3
 800346e:	f000 8098 	beq.w	80035a2 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003472:	2901      	cmp	r1, #1
 8003474:	f000 80a1 	beq.w	80035ba <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003478:	0758      	lsls	r0, r3, #29
 800347a:	d59e      	bpl.n	80033ba <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800347c:	4e52      	ldr	r6, [pc, #328]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003482:	6933      	ldr	r3, [r6, #16]
 8003484:	f023 0307 	bic.w	r3, r3, #7
 8003488:	430b      	orrs	r3, r1
 800348a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800348c:	f7fd ff18 	bl	80012c0 <HAL_GetTick>
 8003490:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e005      	b.n	80034a0 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fd ff14 	bl	80012c0 <HAL_GetTick>
 8003498:	1bc0      	subs	r0, r0, r7
 800349a:	4540      	cmp	r0, r8
 800349c:	f200 808b 	bhi.w	80035b6 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a0:	6933      	ldr	r3, [r6, #16]
 80034a2:	6862      	ldr	r2, [r4, #4]
 80034a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80034ac:	d1f2      	bne.n	8003494 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	0799      	lsls	r1, r3, #30
 80034b2:	d506      	bpl.n	80034c2 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034b4:	68e1      	ldr	r1, [r4, #12]
 80034b6:	4844      	ldr	r0, [pc, #272]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 80034b8:	6982      	ldr	r2, [r0, #24]
 80034ba:	f002 020f 	and.w	r2, r2, #15
 80034be:	428a      	cmp	r2, r1
 80034c0:	d869      	bhi.n	8003596 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c2:	4940      	ldr	r1, [pc, #256]	; (80035c4 <HAL_RCC_ClockConfig+0x238>)
 80034c4:	680a      	ldr	r2, [r1, #0]
 80034c6:	f002 020f 	and.w	r2, r2, #15
 80034ca:	42aa      	cmp	r2, r5
 80034cc:	d90a      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	680a      	ldr	r2, [r1, #0]
 80034d0:	f022 020f 	bic.w	r2, r2, #15
 80034d4:	432a      	orrs	r2, r5
 80034d6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d8:	680a      	ldr	r2, [r1, #0]
 80034da:	f002 020f 	and.w	r2, r2, #15
 80034de:	42aa      	cmp	r2, r5
 80034e0:	f47f af6b 	bne.w	80033ba <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034e4:	075a      	lsls	r2, r3, #29
 80034e6:	d50b      	bpl.n	8003500 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034e8:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 80034ea:	6920      	ldr	r0, [r4, #16]
 80034ec:	698a      	ldr	r2, [r1, #24]
 80034ee:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80034f2:	4290      	cmp	r0, r2
 80034f4:	d204      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034f6:	698a      	ldr	r2, [r1, #24]
 80034f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034fc:	4302      	orrs	r2, r0
 80034fe:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	071f      	lsls	r7, r3, #28
 8003502:	d50b      	bpl.n	800351c <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003504:	4930      	ldr	r1, [pc, #192]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 8003506:	6960      	ldr	r0, [r4, #20]
 8003508:	69ca      	ldr	r2, [r1, #28]
 800350a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800350e:	4290      	cmp	r0, r2
 8003510:	d204      	bcs.n	800351c <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003512:	69ca      	ldr	r2, [r1, #28]
 8003514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003518:	4302      	orrs	r2, r0
 800351a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	06de      	lsls	r6, r3, #27
 800351e:	d50b      	bpl.n	8003538 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003520:	4929      	ldr	r1, [pc, #164]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 8003522:	69a0      	ldr	r0, [r4, #24]
 8003524:	69ca      	ldr	r2, [r1, #28]
 8003526:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800352a:	4290      	cmp	r0, r2
 800352c:	d204      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800352e:	69ca      	ldr	r2, [r1, #28]
 8003530:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003534:	4302      	orrs	r2, r0
 8003536:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003538:	069d      	lsls	r5, r3, #26
 800353a:	d50b      	bpl.n	8003554 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 800353e:	69e1      	ldr	r1, [r4, #28]
 8003540:	6a13      	ldr	r3, [r2, #32]
 8003542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003546:	4299      	cmp	r1, r3
 8003548:	d204      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800354a:	6a13      	ldr	r3, [r2, #32]
 800354c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003550:	430b      	orrs	r3, r1
 8003552:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003554:	f7ff fe78 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_RCC_ClockConfig+0x23c>)
 800355a:	4603      	mov	r3, r0
 800355c:	481b      	ldr	r0, [pc, #108]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 800355e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003560:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003562:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8003566:	4d1a      	ldr	r5, [pc, #104]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003568:	f002 020f 	and.w	r2, r2, #15
 800356c:	4c19      	ldr	r4, [pc, #100]	; (80035d4 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800356e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003570:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003572:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8003576:	4818      	ldr	r0, [pc, #96]	; (80035d8 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003578:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800357c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800357e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003580:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003582:	40d3      	lsrs	r3, r2
 8003584:	6023      	str	r3, [r4, #0]
}
 8003586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800358a:	f7fd be37 	b.w	80011fc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	07da      	lsls	r2, r3, #31
 8003590:	f53f af60 	bmi.w	8003454 <HAL_RCC_ClockConfig+0xc8>
 8003594:	e795      	b.n	80034c2 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003596:	6982      	ldr	r2, [r0, #24]
 8003598:	f022 020f 	bic.w	r2, r2, #15
 800359c:	430a      	orrs	r2, r1
 800359e:	6182      	str	r2, [r0, #24]
 80035a0:	e78f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a2:	019f      	lsls	r7, r3, #6
 80035a4:	f53f af6a 	bmi.w	800347c <HAL_RCC_ClockConfig+0xf0>
 80035a8:	e707      	b.n	80033ba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80035aa:	2001      	movs	r0, #1
}
 80035ac:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ae:	039b      	lsls	r3, r3, #14
 80035b0:	f53f af64 	bmi.w	800347c <HAL_RCC_ClockConfig+0xf0>
 80035b4:	e701      	b.n	80033ba <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e700      	b.n	80033bc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ba:	05de      	lsls	r6, r3, #23
 80035bc:	f53f af5e 	bmi.w	800347c <HAL_RCC_ClockConfig+0xf0>
 80035c0:	e6fb      	b.n	80033ba <HAL_RCC_ClockConfig+0x2e>
 80035c2:	bf00      	nop
 80035c4:	52002000 	.word	0x52002000
 80035c8:	58024400 	.word	0x58024400
 80035cc:	08005928 	.word	0x08005928
 80035d0:	24000000 	.word	0x24000000
 80035d4:	24000004 	.word	0x24000004
 80035d8:	2400039c 	.word	0x2400039c

080035dc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e0:	6913      	ldr	r3, [r2, #16]
 80035e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d01a      	beq.n	8003620 <HAL_RCC_GetHCLKFreq+0x44>
 80035ea:	2b18      	cmp	r3, #24
 80035ec:	d023      	beq.n	8003636 <HAL_RCC_GetHCLKFreq+0x5a>
 80035ee:	b1cb      	cbz	r3, 8003624 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80035f0:	4814      	ldr	r0, [pc, #80]	; (8003644 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_GetHCLKFreq+0x64>)
 80035f4:	4914      	ldr	r1, [pc, #80]	; (8003648 <HAL_RCC_GetHCLKFreq+0x6c>)
 80035f6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035fe:	4c13      	ldr	r4, [pc, #76]	; (800364c <HAL_RCC_GetHCLKFreq+0x70>)
 8003600:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003604:	4d12      	ldr	r5, [pc, #72]	; (8003650 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003606:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003608:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800360a:	f002 021f 	and.w	r2, r2, #31
 800360e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003612:	f003 001f 	and.w	r0, r3, #31
 8003616:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800361a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800361c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800361e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003620:	480c      	ldr	r0, [pc, #48]	; (8003654 <HAL_RCC_GetHCLKFreq+0x78>)
 8003622:	e7e6      	b.n	80035f2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	069b      	lsls	r3, r3, #26
 8003628:	d508      	bpl.n	800363c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	480a      	ldr	r0, [pc, #40]	; (8003658 <HAL_RCC_GetHCLKFreq+0x7c>)
 800362e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003632:	40d8      	lsrs	r0, r3
 8003634:	e7dd      	b.n	80035f2 <HAL_RCC_GetHCLKFreq+0x16>
 8003636:	f7ff fa8d 	bl	8002b54 <HAL_RCC_GetSysClockFreq.part.0>
 800363a:	e7da      	b.n	80035f2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800363c:	4806      	ldr	r0, [pc, #24]	; (8003658 <HAL_RCC_GetHCLKFreq+0x7c>)
 800363e:	e7d8      	b.n	80035f2 <HAL_RCC_GetHCLKFreq+0x16>
 8003640:	58024400 	.word	0x58024400
 8003644:	003d0900 	.word	0x003d0900
 8003648:	08005928 	.word	0x08005928
 800364c:	24000004 	.word	0x24000004
 8003650:	24000000 	.word	0x24000000
 8003654:	017d7840 	.word	0x017d7840
 8003658:	03d09000 	.word	0x03d09000

0800365c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800365e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	6913      	ldr	r3, [r2, #16]
 8003662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003666:	2b10      	cmp	r3, #16
 8003668:	d021      	beq.n	80036ae <HAL_RCC_GetPCLK1Freq+0x52>
 800366a:	2b18      	cmp	r3, #24
 800366c:	d02a      	beq.n	80036c4 <HAL_RCC_GetPCLK1Freq+0x68>
 800366e:	b303      	cbz	r3, 80036b2 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8003670:	4818      	ldr	r0, [pc, #96]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003672:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x74>)
 8003674:	4918      	ldr	r1, [pc, #96]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003676:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003678:	4c18      	ldr	r4, [pc, #96]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800367a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800367e:	4d18      	ldr	r5, [pc, #96]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003688:	6993      	ldr	r3, [r2, #24]
 800368a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800368e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	fa20 f303 	lsr.w	r3, r0, r3
 800369a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800369c:	69d2      	ldr	r2, [r2, #28]
 800369e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80036a2:	5c88      	ldrb	r0, [r1, r2]
 80036a4:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036a8:	fa23 f000 	lsr.w	r0, r3, r0
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ae:	480d      	ldr	r0, [pc, #52]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x88>)
 80036b0:	e7df      	b.n	8003672 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	069b      	lsls	r3, r3, #26
 80036b6:	d508      	bpl.n	80036ca <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	480b      	ldr	r0, [pc, #44]	; (80036e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80036bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80036c0:	40d8      	lsrs	r0, r3
 80036c2:	e7d6      	b.n	8003672 <HAL_RCC_GetPCLK1Freq+0x16>
 80036c4:	f7ff fa46 	bl	8002b54 <HAL_RCC_GetSysClockFreq.part.0>
 80036c8:	e7d3      	b.n	8003672 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036ca:	4807      	ldr	r0, [pc, #28]	; (80036e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80036cc:	e7d1      	b.n	8003672 <HAL_RCC_GetPCLK1Freq+0x16>
 80036ce:	bf00      	nop
 80036d0:	58024400 	.word	0x58024400
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	08005928 	.word	0x08005928
 80036dc:	24000004 	.word	0x24000004
 80036e0:	24000000 	.word	0x24000000
 80036e4:	017d7840 	.word	0x017d7840
 80036e8:	03d09000 	.word	0x03d09000

080036ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ee:	4c3a      	ldr	r4, [pc, #232]	; (80037d8 <RCCEx_PLL2_Config+0xec>)
 80036f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d067      	beq.n	80037ca <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	4606      	mov	r6, r0
 80036fe:	460f      	mov	r7, r1
 8003700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003704:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003706:	f7fd fddb 	bl	80012c0 <HAL_GetTick>
 800370a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800370c:	e004      	b.n	8003718 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800370e:	f7fd fdd7 	bl	80012c0 <HAL_GetTick>
 8003712:	1b43      	subs	r3, r0, r5
 8003714:	2b02      	cmp	r3, #2
 8003716:	d856      	bhi.n	80037c6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	011a      	lsls	r2, r3, #4
 800371c:	d4f7      	bmi.n	800370e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800371e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003720:	6832      	ldr	r2, [r6, #0]
 8003722:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003726:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800372a:	62a3      	str	r3, [r4, #40]	; 0x28
 800372c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003730:	3b01      	subs	r3, #1
 8003732:	3a01      	subs	r2, #1
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	0412      	lsls	r2, r2, #16
 8003738:	b29b      	uxth	r3, r3
 800373a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800373e:	4313      	orrs	r3, r2
 8003740:	6872      	ldr	r2, [r6, #4]
 8003742:	3a01      	subs	r2, #1
 8003744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003748:	4313      	orrs	r3, r2
 800374a:	6932      	ldr	r2, [r6, #16]
 800374c:	3a01      	subs	r2, #1
 800374e:	0612      	lsls	r2, r2, #24
 8003750:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003754:	4313      	orrs	r3, r2
 8003756:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800375a:	6972      	ldr	r2, [r6, #20]
 800375c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003760:	4313      	orrs	r3, r2
 8003762:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003766:	69b3      	ldr	r3, [r6, #24]
 8003768:	f022 0220 	bic.w	r2, r2, #32
 800376c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003770:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003774:	f022 0210 	bic.w	r2, r2, #16
 8003778:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800377a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800377c:	69f2      	ldr	r2, [r6, #28]
 800377e:	400b      	ands	r3, r1
 8003780:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003784:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003788:	f043 0310 	orr.w	r3, r3, #16
 800378c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800378e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003790:	b1ef      	cbz	r7, 80037ce <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003792:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003794:	bf0c      	ite	eq
 8003796:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800379a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800379e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80037a0:	4c0d      	ldr	r4, [pc, #52]	; (80037d8 <RCCEx_PLL2_Config+0xec>)
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fd fd89 	bl	80012c0 <HAL_GetTick>
 80037ae:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037b0:	e004      	b.n	80037bc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037b2:	f7fd fd85 	bl	80012c0 <HAL_GetTick>
 80037b6:	1b40      	subs	r0, r0, r5
 80037b8:	2802      	cmp	r0, #2
 80037ba:	d804      	bhi.n	80037c6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	d5f7      	bpl.n	80037b2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80037c2:	2000      	movs	r0, #0
}
 80037c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80037c6:	2003      	movs	r0, #3
}
 80037c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037ca:	2001      	movs	r0, #1
}
 80037cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80037ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037d4:	e7e4      	b.n	80037a0 <RCCEx_PLL2_Config+0xb4>
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
 80037dc:	ffff0007 	.word	0xffff0007

080037e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037e2:	4c3a      	ldr	r4, [pc, #232]	; (80038cc <RCCEx_PLL3_Config+0xec>)
 80037e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d067      	beq.n	80038be <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	4606      	mov	r6, r0
 80037f2:	460f      	mov	r7, r1
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fa:	f7fd fd61 	bl	80012c0 <HAL_GetTick>
 80037fe:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003800:	e004      	b.n	800380c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003802:	f7fd fd5d 	bl	80012c0 <HAL_GetTick>
 8003806:	1b43      	subs	r3, r0, r5
 8003808:	2b02      	cmp	r3, #2
 800380a:	d856      	bhi.n	80038ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	d4f7      	bmi.n	8003802 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003814:	6832      	ldr	r2, [r6, #0]
 8003816:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800381a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800381e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003820:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003824:	3b01      	subs	r3, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	025b      	lsls	r3, r3, #9
 800382a:	0412      	lsls	r2, r2, #16
 800382c:	b29b      	uxth	r3, r3
 800382e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003832:	4313      	orrs	r3, r2
 8003834:	6872      	ldr	r2, [r6, #4]
 8003836:	3a01      	subs	r2, #1
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	4313      	orrs	r3, r2
 800383e:	6932      	ldr	r2, [r6, #16]
 8003840:	3a01      	subs	r2, #1
 8003842:	0612      	lsls	r2, r2, #24
 8003844:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003848:	4313      	orrs	r3, r2
 800384a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800384c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800384e:	6972      	ldr	r2, [r6, #20]
 8003850:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003854:	4313      	orrs	r3, r2
 8003856:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003858:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800385a:	69b3      	ldr	r3, [r6, #24]
 800385c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003860:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003864:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003866:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800386e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003870:	69f2      	ldr	r2, [r6, #28]
 8003872:	400b      	ands	r3, r1
 8003874:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003878:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800387a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003884:	b1ef      	cbz	r7, 80038c2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003886:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003888:	bf0c      	ite	eq
 800388a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800388e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003892:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003894:	4c0d      	ldr	r4, [pc, #52]	; (80038cc <RCCEx_PLL3_Config+0xec>)
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd fd0f 	bl	80012c0 <HAL_GetTick>
 80038a2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80038a6:	f7fd fd0b 	bl	80012c0 <HAL_GetTick>
 80038aa:	1b40      	subs	r0, r0, r5
 80038ac:	2802      	cmp	r0, #2
 80038ae:	d804      	bhi.n	80038ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	d5f7      	bpl.n	80038a6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80038b6:	2000      	movs	r0, #0
}
 80038b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80038ba:	2003      	movs	r0, #3
}
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80038be:	2001      	movs	r0, #1
}
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c8:	e7e4      	b.n	8003894 <RCCEx_PLL3_Config+0xb4>
 80038ca:	bf00      	nop
 80038cc:	58024400 	.word	0x58024400
 80038d0:	ffff0007 	.word	0xffff0007

080038d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80038d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80038dc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038de:	011f      	lsls	r7, r3, #4
 80038e0:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 80038e4:	d51d      	bpl.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80038e6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80038e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80038ec:	f000 8560 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80038f0:	d824      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80038f2:	2900      	cmp	r1, #0
 80038f4:	f000 8479 	beq.w	80041ea <HAL_RCCEx_PeriphCLKConfig+0x916>
 80038f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80038fc:	d121      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038fe:	2102      	movs	r1, #2
 8003900:	3008      	adds	r0, #8
 8003902:	f7ff fef3 	bl	80036ec <RCCEx_PLL2_Config>
 8003906:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8003908:	2e00      	cmp	r6, #0
 800390a:	f040 854d 	bne.w	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800390e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003910:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003914:	4dad      	ldr	r5, [pc, #692]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003916:	2600      	movs	r6, #0
 8003918:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800391a:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800391e:	4301      	orrs	r1, r0
 8003920:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003922:	05dd      	lsls	r5, r3, #23
 8003924:	d511      	bpl.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003926:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003928:	2904      	cmp	r1, #4
 800392a:	f200 85ef 	bhi.w	800450c <HAL_RCCEx_PeriphCLKConfig+0xc38>
 800392e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003932:	0570      	.short	0x0570
 8003934:	05800577 	.word	0x05800577
 8003938:	03380338 	.word	0x03380338
    switch (PeriphClkInit->SpdifrxClockSelection)
 800393c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003940:	d0e8      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003942:	05dd      	lsls	r5, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003944:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003948:	d4ed      	bmi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch (PeriphClkInit->Sai1ClockSelection)
 800394a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800394c:	0598      	lsls	r0, r3, #22
 800394e:	d51d      	bpl.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003950:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003952:	2980      	cmp	r1, #128	; 0x80
 8003954:	f000 8549 	beq.w	80043ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8003958:	f200 8107 	bhi.w	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800395c:	2900      	cmp	r1, #0
 800395e:	f000 8451 	beq.w	8004204 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8003962:	2940      	cmp	r1, #64	; 0x40
 8003964:	f040 8108 	bne.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003968:	2100      	movs	r1, #0
 800396a:	f104 0008 	add.w	r0, r4, #8
 800396e:	f7ff febd 	bl	80036ec <RCCEx_PLL2_Config>
 8003972:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003974:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003978:	2d00      	cmp	r5, #0
 800397a:	f040 8418 	bne.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800397e:	4f93      	ldr	r7, [pc, #588]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003980:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003984:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8003988:	4301      	orrs	r1, r0
 800398a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800398c:	0559      	lsls	r1, r3, #21
 800398e:	d521      	bpl.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003990:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003994:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003998:	f000 8513 	beq.w	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800399c:	f200 80ef 	bhi.w	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039a0:	2900      	cmp	r1, #0
 80039a2:	f000 8436 	beq.w	8004212 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80039a6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80039aa:	f040 80f0 	bne.w	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ae:	2100      	movs	r1, #0
 80039b0:	f104 0008 	add.w	r0, r4, #8
 80039b4:	f7ff fe9a 	bl	80036ec <RCCEx_PLL2_Config>
 80039b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039be:	2d00      	cmp	r5, #0
 80039c0:	f040 83f8 	bne.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039c4:	4f81      	ldr	r7, [pc, #516]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80039c6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80039ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039cc:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 80039d0:	4301      	orrs	r1, r0
 80039d2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039d4:	051f      	lsls	r7, r3, #20
 80039d6:	d521      	bpl.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->Sai4BClockSelection)
 80039d8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80039dc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80039e0:	f000 84f9 	beq.w	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80039e4:	f200 80d6 	bhi.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80039e8:	2900      	cmp	r1, #0
 80039ea:	f000 8419 	beq.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80039ee:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80039f2:	f040 80d7 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f6:	2100      	movs	r1, #0
 80039f8:	f104 0008 	add.w	r0, r4, #8
 80039fc:	f7ff fe76 	bl	80036ec <RCCEx_PLL2_Config>
 8003a00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a06:	2d00      	cmp	r5, #0
 8003a08:	f040 83db 	bne.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a0c:	4f6f      	ldr	r7, [pc, #444]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a0e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8003a12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a14:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8003a18:	4301      	orrs	r1, r0
 8003a1a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a1c:	0198      	lsls	r0, r3, #6
 8003a1e:	d518      	bpl.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->QspiClockSelection)
 8003a20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003a22:	2920      	cmp	r1, #32
 8003a24:	f000 8499 	beq.w	800435a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003a28:	f200 80bf 	bhi.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003a2c:	b139      	cbz	r1, 8003a3e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003a2e:	2910      	cmp	r1, #16
 8003a30:	f040 80be 	bne.w	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4865      	ldr	r0, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a36:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003a38:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003a3c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	f040 8405 	bne.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a44:	4f61      	ldr	r7, [pc, #388]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003a48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a4a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8003a4e:	4301      	orrs	r1, r0
 8003a50:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a52:	04d9      	lsls	r1, r3, #19
 8003a54:	d51f      	bpl.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a56:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a58:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003a5c:	f000 84cf 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003a60:	f200 80a9 	bhi.w	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003a64:	2900      	cmp	r1, #0
 8003a66:	f000 83c7 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003a6a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a6e:	f040 80aa 	bne.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a72:	2100      	movs	r1, #0
 8003a74:	f104 0008 	add.w	r0, r4, #8
 8003a78:	f7ff fe38 	bl	80036ec <RCCEx_PLL2_Config>
 8003a7c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a7e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	f040 839b 	bne.w	80041be <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a88:	4f50      	ldr	r7, [pc, #320]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a8a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a8e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003a92:	4301      	orrs	r1, r0
 8003a94:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a96:	049f      	lsls	r7, r3, #18
 8003a98:	d51d      	bpl.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a9a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a9c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003aa0:	f000 840e 	beq.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8003aa4:	f200 8094 	bhi.w	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003aa8:	b159      	cbz	r1, 8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003aaa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003aae:	f040 8099 	bne.w	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f104 0008 	add.w	r0, r4, #8
 8003ab8:	f7ff fe18 	bl	80036ec <RCCEx_PLL2_Config>
 8003abc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003abe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	f040 83bf 	bne.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ac8:	4f40      	ldr	r7, [pc, #256]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003aca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003acc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ace:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8003ad2:	4301      	orrs	r1, r0
 8003ad4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ad6:	0458      	lsls	r0, r3, #17
 8003ad8:	d51f      	bpl.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ada:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003ade:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003ae2:	f000 83f9 	beq.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ae6:	f200 8080 	bhi.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003aea:	b159      	cbz	r1, 8003b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003aec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003af0:	f040 8083 	bne.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x326>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af4:	2101      	movs	r1, #1
 8003af6:	f104 0008 	add.w	r0, r4, #8
 8003afa:	f7ff fdf7 	bl	80036ec <RCCEx_PLL2_Config>
 8003afe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003b00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	f040 8396 	bne.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b0a:	4f30      	ldr	r7, [pc, #192]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b0c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8003b10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b12:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003b16:	4301      	orrs	r1, r0
 8003b18:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003b1a:	0159      	lsls	r1, r3, #5
 8003b1c:	d509      	bpl.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->DsiClockSelection)
 8003b1e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b20:	2900      	cmp	r1, #0
 8003b22:	f000 8290 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x772>
 8003b26:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003b2a:	f000 8284 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8003b2e:	2601      	movs	r6, #1
 8003b30:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b32:	041f      	lsls	r7, r3, #16
 8003b34:	d50d      	bpl.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch (PeriphClkInit->FdcanClockSelection)
 8003b36:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003b38:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003b3c:	f000 83e2 	beq.w	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003b40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003b44:	f000 823c 	beq.w	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	f000 8241 	beq.w	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8003b4e:	2601      	movs	r6, #1
 8003b50:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b52:	01d8      	lsls	r0, r3, #7
 8003b54:	d563      	bpl.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->FmcClockSelection)
 8003b56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b58:	2903      	cmp	r1, #3
 8003b5a:	f200 84d0 	bhi.w	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 8003b5e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b62:	0054      	.short	0x0054
 8003b64:	03d9004f 	.word	0x03d9004f
 8003b68:	0054      	.short	0x0054
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b6a:	29c0      	cmp	r1, #192	; 0xc0
 8003b6c:	f43f af04 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b70:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003b74:	f43f af00 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b78:	2601      	movs	r6, #1
 8003b7a:	4635      	mov	r5, r6
 8003b7c:	e706      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b7e:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8003b82:	f43f af1c 	beq.w	80039be <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003b86:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003b8a:	f43f af18 	beq.w	80039be <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003b8e:	2601      	movs	r6, #1
 8003b90:	4635      	mov	r5, r6
 8003b92:	e71f      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b94:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003b98:	f43f af35 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003b9c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003ba0:	f43f af31 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003ba4:	2601      	movs	r6, #1
 8003ba6:	4635      	mov	r5, r6
 8003ba8:	e738      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->QspiClockSelection)
 8003baa:	2930      	cmp	r1, #48	; 0x30
 8003bac:	f43f af47 	beq.w	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003bb0:	2601      	movs	r6, #1
 8003bb2:	4635      	mov	r5, r6
 8003bb4:	e74d      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bb6:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8003bba:	f43f af62 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003bbe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003bc2:	f43f af5e 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003bc6:	2601      	movs	r6, #1
 8003bc8:	4635      	mov	r5, r6
 8003bca:	e764      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003bcc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bd0:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8003bd4:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8003bd8:	f43f af73 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bdc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8003be0:	f43f af6f 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003be4:	2601      	movs	r6, #1
 8003be6:	4635      	mov	r5, r6
 8003be8:	e775      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bea:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8003bee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003bf2:	d087      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bf4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8003bf8:	d084      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bfa:	2601      	movs	r6, #1
 8003bfc:	4635      	mov	r5, r6
 8003bfe:	e78c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x246>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4839      	ldr	r0, [pc, #228]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003c02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003c04:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003c08:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	f040 8315 	bne.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x966>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c10:	4f35      	ldr	r7, [pc, #212]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003c12:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003c14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003c16:	f021 0103 	bic.w	r1, r1, #3
 8003c1a:	4301      	orrs	r1, r0
 8003c1c:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c1e:	0259      	lsls	r1, r3, #9
 8003c20:	f100 823f 	bmi.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c24:	07d8      	lsls	r0, r3, #31
 8003c26:	d530      	bpl.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c28:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c2c:	2928      	cmp	r1, #40	; 0x28
 8003c2e:	d82a      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8003c30:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c34:	0029021c 	.word	0x0029021c
 8003c38:	00290029 	.word	0x00290029
 8003c3c:	00290029 	.word	0x00290029
 8003c40:	00290029 	.word	0x00290029
 8003c44:	00290214 	.word	0x00290214
 8003c48:	00290029 	.word	0x00290029
 8003c4c:	00290029 	.word	0x00290029
 8003c50:	00290029 	.word	0x00290029
 8003c54:	00290420 	.word	0x00290420
 8003c58:	00290029 	.word	0x00290029
 8003c5c:	00290029 	.word	0x00290029
 8003c60:	00290029 	.word	0x00290029
 8003c64:	0029021c 	.word	0x0029021c
 8003c68:	00290029 	.word	0x00290029
 8003c6c:	00290029 	.word	0x00290029
 8003c70:	00290029 	.word	0x00290029
 8003c74:	0029021c 	.word	0x0029021c
 8003c78:	00290029 	.word	0x00290029
 8003c7c:	00290029 	.word	0x00290029
 8003c80:	00290029 	.word	0x00290029
 8003c84:	021c      	.short	0x021c
 8003c86:	2601      	movs	r6, #1
 8003c88:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c8a:	0799      	lsls	r1, r3, #30
 8003c8c:	d51d      	bpl.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c8e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003c90:	2905      	cmp	r1, #5
 8003c92:	f200 8430 	bhi.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003c96:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c9a:	000e      	.short	0x000e
 8003c9c:	03d50006 	.word	0x03d50006
 8003ca0:	000e000e 	.word	0x000e000e
 8003ca4:	000e      	.short	0x000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	f104 0008 	add.w	r0, r4, #8
 8003cac:	f7ff fd1e 	bl	80036ec <RCCEx_PLL2_Config>
 8003cb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	f040 82c1 	bne.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cbc:	4f0a      	ldr	r7, [pc, #40]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003cbe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cc2:	f021 0107 	bic.w	r1, r1, #7
 8003cc6:	4301      	orrs	r1, r0
 8003cc8:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cca:	075f      	lsls	r7, r3, #29
 8003ccc:	d521      	bpl.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cce:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003cd2:	2905      	cmp	r1, #5
 8003cd4:	f200 8417 	bhi.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc32>
 8003cd8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003cdc:	00080010 	.word	0x00080010
 8003ce0:	001003c0 	.word	0x001003c0
 8003ce4:	00100010 	.word	0x00100010
 8003ce8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cec:	2101      	movs	r1, #1
 8003cee:	f104 0008 	add.w	r0, r4, #8
 8003cf2:	f7ff fcfb 	bl	80036ec <RCCEx_PLL2_Config>
 8003cf6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f040 82a0 	bne.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d02:	4fae      	ldr	r7, [pc, #696]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d04:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8003d08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d0a:	f021 0107 	bic.w	r1, r1, #7
 8003d0e:	4301      	orrs	r1, r0
 8003d10:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d12:	0698      	lsls	r0, r3, #26
 8003d14:	d51f      	bpl.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d16:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003d1a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003d1e:	f000 82e6 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003d22:	f200 810b 	bhi.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x668>
 8003d26:	b159      	cbz	r1, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003d28:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003d2c:	f040 8110 	bne.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d30:	2100      	movs	r1, #0
 8003d32:	f104 0008 	add.w	r0, r4, #8
 8003d36:	f7ff fcd9 	bl	80036ec <RCCEx_PLL2_Config>
 8003d3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d40:	2d00      	cmp	r5, #0
 8003d42:	f040 8287 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d46:	4f9d      	ldr	r7, [pc, #628]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d48:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8003d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d4e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003d52:	4301      	orrs	r1, r0
 8003d54:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d56:	0659      	lsls	r1, r3, #25
 8003d58:	d51f      	bpl.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d5a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003d5e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003d62:	f000 82e2 	beq.w	800432a <HAL_RCCEx_PeriphCLKConfig+0xa56>
 8003d66:	f200 80f6 	bhi.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d6a:	b159      	cbz	r1, 8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003d70:	f040 80fb 	bne.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x696>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d74:	2100      	movs	r1, #0
 8003d76:	f104 0008 	add.w	r0, r4, #8
 8003d7a:	f7ff fcb7 	bl	80036ec <RCCEx_PLL2_Config>
 8003d7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	f040 8254 	bne.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d8a:	4f8c      	ldr	r7, [pc, #560]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d8c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d92:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8003d96:	4301      	orrs	r1, r0
 8003d98:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d9a:	061f      	lsls	r7, r3, #24
 8003d9c:	d51f      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d9e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003da2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003da6:	f000 82cc 	beq.w	8004342 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8003daa:	f200 80e1 	bhi.w	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003dae:	b159      	cbz	r1, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003db0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003db4:	f040 80e6 	bne.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db8:	2100      	movs	r1, #0
 8003dba:	f104 0008 	add.w	r0, r4, #8
 8003dbe:	f7ff fc95 	bl	80036ec <RCCEx_PLL2_Config>
 8003dc2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003dc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	f040 823e 	bne.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x976>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dce:	4f7b      	ldr	r7, [pc, #492]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003dd0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8003dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dd6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003dda:	4301      	orrs	r1, r0
 8003ddc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003dde:	0718      	lsls	r0, r3, #28
 8003de0:	d50b      	bpl.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x526>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003de2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003de6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003dea:	f000 82c3 	beq.w	8004374 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dee:	4f73      	ldr	r7, [pc, #460]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003df2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003df6:	4301      	orrs	r1, r0
 8003df8:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dfa:	06d9      	lsls	r1, r3, #27
 8003dfc:	d50b      	bpl.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x542>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003dfe:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8003e02:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003e06:	f000 82c2 	beq.w	800438e <HAL_RCCEx_PeriphCLKConfig+0xaba>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e0a:	4f6c      	ldr	r7, [pc, #432]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003e0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e0e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003e12:	4301      	orrs	r1, r0
 8003e14:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e16:	031f      	lsls	r7, r3, #12
 8003e18:	d50e      	bpl.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->AdcClockSelection)
 8003e1a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003e1e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003e22:	f000 80e0 	beq.w	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8003e26:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003e2a:	f000 80e4 	beq.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	f000 8235 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8003e34:	2601      	movs	r6, #1
 8003e36:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e38:	0358      	lsls	r0, r3, #13
 8003e3a:	d50f      	bpl.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x588>
    switch (PeriphClkInit->UsbClockSelection)
 8003e3c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003e40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003e44:	f000 80e3 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003e48:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003e4c:	f000 80e7 	beq.w	800401e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003e50:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003e54:	f000 821b 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003e58:	2601      	movs	r6, #1
 8003e5a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e5c:	03d9      	lsls	r1, r3, #15
 8003e5e:	d509      	bpl.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003e60:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003e62:	2900      	cmp	r1, #0
 8003e64:	f000 820a 	beq.w	800427c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003e68:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003e6c:	f000 81ab 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003e70:	2601      	movs	r6, #1
 8003e72:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e74:	009f      	lsls	r7, r3, #2
 8003e76:	f100 8156 	bmi.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x852>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e7a:	0398      	lsls	r0, r3, #14
 8003e7c:	d50c      	bpl.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->RngClockSelection)
 8003e7e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003e82:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003e86:	f000 81ef 	beq.w	8004268 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003e8a:	d97e      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003e8c:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8003e90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e94:	d07b      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003e96:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e98:	02d9      	lsls	r1, r3, #11
 8003e9a:	d506      	bpl.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e9c:	4847      	ldr	r0, [pc, #284]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003e9e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8003ea0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003ea2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ea6:	4329      	orrs	r1, r5
 8003ea8:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003eaa:	00df      	lsls	r7, r3, #3
 8003eac:	d507      	bpl.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003eae:	4843      	ldr	r0, [pc, #268]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003eb0:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8003eb4:	6901      	ldr	r1, [r0, #16]
 8003eb6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003eba:	4329      	orrs	r1, r5
 8003ebc:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ebe:	029d      	lsls	r5, r3, #10
 8003ec0:	d506      	bpl.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec2:	483e      	ldr	r0, [pc, #248]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003ec4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003ec6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003ec8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003ecc:	4329      	orrs	r1, r5
 8003ece:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed0:	0058      	lsls	r0, r3, #1
 8003ed2:	d509      	bpl.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ed4:	4939      	ldr	r1, [pc, #228]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003ed6:	6908      	ldr	r0, [r1, #16]
 8003ed8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8003edc:	6108      	str	r0, [r1, #16]
 8003ede:	6908      	ldr	r0, [r1, #16]
 8003ee0:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8003ee4:	4328      	orrs	r0, r5
 8003ee6:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da06      	bge.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003eec:	4833      	ldr	r0, [pc, #204]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003eee:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003ef0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003ef2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003ef6:	4329      	orrs	r1, r5
 8003ef8:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003efa:	0219      	lsls	r1, r3, #8
 8003efc:	d507      	bpl.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003efe:	492f      	ldr	r1, [pc, #188]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003f00:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8003f04:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003f06:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f0a:	4303      	orrs	r3, r0
 8003f0c:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f0e:	07d3      	lsls	r3, r2, #31
 8003f10:	f100 8136 	bmi.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f14:	0797      	lsls	r7, r2, #30
 8003f16:	f100 8128 	bmi.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x896>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f1a:	0755      	lsls	r5, r2, #29
 8003f1c:	f100 811a 	bmi.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x880>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f20:	0710      	lsls	r0, r2, #28
 8003f22:	f100 810c 	bmi.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x86a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f26:	06d1      	lsls	r1, r2, #27
 8003f28:	f100 80ac 	bmi.w	8004084 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f2c:	0692      	lsls	r2, r2, #26
 8003f2e:	f100 8132 	bmi.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
    return HAL_OK;
 8003f32:	1e30      	subs	r0, r6, #0
 8003f34:	bf18      	it	ne
 8003f36:	2001      	movne	r0, #1
}
 8003f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f3c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8003f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f44:	f43f aefc 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003f48:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8003f4c:	f43f aef8 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003f50:	2601      	movs	r6, #1
 8003f52:	4635      	mov	r5, r6
 8003f54:	e6ff      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f56:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8003f5a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003f5e:	f43f af11 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f62:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8003f66:	f43f af0d 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f6a:	2601      	movs	r6, #1
 8003f6c:	4635      	mov	r5, r6
 8003f6e:	e714      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f70:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8003f74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f78:	f43f af26 	beq.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f7c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8003f80:	f43f af22 	beq.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f84:	2601      	movs	r6, #1
 8003f86:	4635      	mov	r5, r6
 8003f88:	e729      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->RngClockSelection)
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d183      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	f040 8168 	bne.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f94:	4d09      	ldr	r5, [pc, #36]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003f96:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8003f98:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003f9c:	4301      	orrs	r1, r0
 8003f9e:	6569      	str	r1, [r5, #84]	; 0x54
 8003fa0:	e77a      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fa2:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	f040 8107 	bne.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003faa:	4f04      	ldr	r7, [pc, #16]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003fac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003fae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fb0:	f021 0107 	bic.w	r1, r1, #7
 8003fb4:	4301      	orrs	r1, r0
 8003fb6:	6539      	str	r1, [r7, #80]	; 0x50
 8003fb8:	e4c8      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	f104 0008 	add.w	r0, r4, #8
 8003fc6:	f7ff fb91 	bl	80036ec <RCCEx_PLL2_Config>
 8003fca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fcc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	f040 8145 	bne.w	8004260 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd6:	4fb8      	ldr	r7, [pc, #736]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003fd8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fdc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003fe0:	4301      	orrs	r1, r0
 8003fe2:	6539      	str	r1, [r7, #80]	; 0x50
 8003fe4:	e5b5      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003fec:	f7ff fbf8 	bl	80037e0 <RCCEx_PLL3_Config>
 8003ff0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	f040 8130 	bne.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ffc:	4fae      	ldr	r7, [pc, #696]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003ffe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8004002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004004:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004008:	4301      	orrs	r1, r0
 800400a:	65b9      	str	r1, [r7, #88]	; 0x58
 800400c:	e714      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x564>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800400e:	2101      	movs	r1, #1
 8004010:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004014:	f7ff fbe4 	bl	80037e0 <RCCEx_PLL3_Config>
 8004018:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800401a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800401e:	2d00      	cmp	r5, #0
 8004020:	f040 811a 	bne.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004024:	4fa4      	ldr	r7, [pc, #656]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004026:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800402a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800402c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004030:	4301      	orrs	r1, r0
 8004032:	6579      	str	r1, [r7, #84]	; 0x54
 8004034:	e712      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004036:	2101      	movs	r1, #1
 8004038:	f104 0008 	add.w	r0, r4, #8
 800403c:	f7ff fb56 	bl	80036ec <RCCEx_PLL2_Config>
 8004040:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004042:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004046:	2d00      	cmp	r5, #0
 8004048:	f040 8116 	bne.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800404c:	4f9a      	ldr	r7, [pc, #616]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800404e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004050:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004052:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004056:	4301      	orrs	r1, r0
 8004058:	64f9      	str	r1, [r7, #76]	; 0x4c
 800405a:	e56a      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405c:	2101      	movs	r1, #1
 800405e:	f104 0008 	add.w	r0, r4, #8
 8004062:	f7ff fb43 	bl	80036ec <RCCEx_PLL2_Config>
 8004066:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004068:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800406c:	2d00      	cmp	r5, #0
 800406e:	f040 80de 	bne.w	800422e <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004072:	4f91      	ldr	r7, [pc, #580]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004074:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800407a:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800407e:	4301      	orrs	r1, r0
 8004080:	6579      	str	r1, [r7, #84]	; 0x54
 8004082:	e602      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004084:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004088:	2101      	movs	r1, #1
 800408a:	4628      	mov	r0, r5
 800408c:	f7ff fba8 	bl	80037e0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004090:	2800      	cmp	r0, #0
 8004092:	f000 810e 	beq.w	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	069b      	lsls	r3, r3, #26
 800409a:	f140 8085 	bpl.w	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 800409e:	4606      	mov	r6, r0
 80040a0:	e07b      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a2:	4f86      	ldr	r7, [pc, #536]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80040ac:	f7fd f908 	bl	80012c0 <HAL_GetTick>
 80040b0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b2:	e006      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b4:	f7fd f904 	bl	80012c0 <HAL_GetTick>
 80040b8:	eba0 0008 	sub.w	r0, r0, r8
 80040bc:	2864      	cmp	r0, #100	; 0x64
 80040be:	f200 81e5 	bhi.w	800448c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	05da      	lsls	r2, r3, #23
 80040c6:	d5f5      	bpl.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	f040 820f 	bne.w	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040ce:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80040d0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80040d4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80040d6:	4059      	eors	r1, r3
 80040d8:	f411 7f40 	tst.w	r1, #768	; 0x300
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x822>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040de:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80040ea:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ec:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80040ee:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80040f2:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80040f4:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fa:	f000 81d9 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004102:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004106:	f000 81e7 	beq.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800410a:	496b      	ldr	r1, [pc, #428]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800410c:	690a      	ldr	r2, [r1, #16]
 800410e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004112:	610a      	str	r2, [r1, #16]
 8004114:	4868      	ldr	r0, [pc, #416]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004116:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800411a:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800411c:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800411e:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004122:	6701      	str	r1, [r0, #112]	; 0x70
 8004124:	e57e      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004126:	2102      	movs	r1, #2
 8004128:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800412c:	f7ff fb58 	bl	80037e0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004130:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004134:	2800      	cmp	r0, #0
 8004136:	f43f aea0 	beq.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = HAL_ERROR;
 800413a:	2601      	movs	r6, #1
 800413c:	e69d      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800413e:	2100      	movs	r1, #0
 8004140:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004144:	f7ff fb4c 	bl	80037e0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004148:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800414a:	2800      	cmp	r0, #0
 800414c:	f43f aeeb 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x652>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004150:	4606      	mov	r6, r0
 8004152:	e6e8      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x652>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004154:	2102      	movs	r1, #2
 8004156:	f104 0008 	add.w	r0, r4, #8
 800415a:	f7ff fac7 	bl	80036ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800415e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004160:	2800      	cmp	r0, #0
 8004162:	f43f aedd 	beq.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004166:	4606      	mov	r6, r0
 8004168:	e6da      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800416a:	2101      	movs	r1, #1
 800416c:	f104 0008 	add.w	r0, r4, #8
 8004170:	f7ff fabc 	bl	80036ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004174:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004176:	2800      	cmp	r0, #0
 8004178:	f43f aecf 	beq.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x646>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800417c:	4606      	mov	r6, r0
 800417e:	e6cc      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x646>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004180:	2100      	movs	r1, #0
 8004182:	f104 0008 	add.w	r0, r4, #8
 8004186:	f7ff fab1 	bl	80036ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800418a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800418c:	2800      	cmp	r0, #0
 800418e:	f43f aec1 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x640>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004192:	4606      	mov	r6, r0
 8004194:	e6be      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x640>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004196:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419a:	2102      	movs	r1, #2
 800419c:	4628      	mov	r0, r5
 800419e:	f7ff fb1f 	bl	80037e0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80041a2:	2800      	cmp	r0, #0
 80041a4:	f43f aec5 	beq.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
  return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
}
 80041aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ae:	462e      	mov	r6, r5
 80041b0:	f7ff bbec 	b.w	800398c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80041b4:	462e      	mov	r6, r5
 80041b6:	e40d      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80041b8:	462e      	mov	r6, r5
 80041ba:	f7ff bbc7 	b.w	800394c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041be:	462e      	mov	r6, r5
 80041c0:	e469      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80041c2:	462e      	mov	r6, r5
 80041c4:	e42a      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x148>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c6:	2102      	movs	r1, #2
 80041c8:	f104 0008 	add.w	r0, r4, #8
 80041cc:	f7ff fa8e 	bl	80036ec <RCCEx_PLL2_Config>
 80041d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	d157      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041da:	4f37      	ldr	r7, [pc, #220]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80041dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80041e0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80041e4:	4301      	orrs	r1, r0
 80041e6:	64f9      	str	r1, [r7, #76]	; 0x4c
 80041e8:	e644      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4d33      	ldr	r5, [pc, #204]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80041ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80041ee:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041f2:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 80041f4:	f7ff bb8e 	b.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x40>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	482f      	ldr	r0, [pc, #188]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80041fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004200:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004202:	e43e      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004204:	482c      	ldr	r0, [pc, #176]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004206:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004208:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800420c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800420e:	f7ff bbb3 	b.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004212:	4829      	ldr	r0, [pc, #164]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004214:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004216:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800421a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800421c:	f7ff bbcf 	b.w	80039be <HAL_RCCEx_PeriphCLKConfig+0xea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004220:	4825      	ldr	r0, [pc, #148]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004222:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004224:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004228:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800422a:	f7ff bbec 	b.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800422e:	462e      	mov	r6, r5
 8004230:	e52b      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004232:	462e      	mov	r6, r5
 8004234:	e5b1      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004236:	462e      	mov	r6, r5
 8004238:	e46f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x246>
 800423a:	462e      	mov	r6, r5
 800423c:	e4ef      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800423e:	462e      	mov	r6, r5
 8004240:	e543      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004242:	462e      	mov	r6, r5
 8004244:	e565      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004246:	462e      	mov	r6, r5
 8004248:	e445      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800424a:	462e      	mov	r6, r5
 800424c:	e5c7      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800424e:	462e      	mov	r6, r5
 8004250:	f7ff bbff 	b.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004254:	462e      	mov	r6, r5
 8004256:	e57e      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004258:	462e      	mov	r6, r5
 800425a:	e5ff      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800425c:	462e      	mov	r6, r5
 800425e:	e5eb      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x564>
 8004260:	462e      	mov	r6, r5
 8004262:	e476      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004264:	462e      	mov	r6, r5
 8004266:	e617      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4f13      	ldr	r7, [pc, #76]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800426a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800426c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004270:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8004272:	2d00      	cmp	r5, #0
 8004274:	d1f6      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x990>
 8004276:	e68d      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004278:	462e      	mov	r6, r5
 800427a:	e45a      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427c:	480e      	ldr	r0, [pc, #56]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800427e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004280:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004284:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004286:	2d00      	cmp	r5, #0
 8004288:	d0a7      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x906>
 800428a:	462e      	mov	r6, r5
 800428c:	e5f2      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428e:	480a      	ldr	r0, [pc, #40]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004290:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004292:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004296:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004298:	2d00      	cmp	r5, #0
 800429a:	d1dd      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800429c:	e6c2      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x750>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429e:	f104 0008 	add.w	r0, r4, #8
 80042a2:	f7ff fa23 	bl	80036ec <RCCEx_PLL2_Config>
 80042a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d1d5      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80042b0:	e6a4      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x728>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	e63a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x658>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
 80042bc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c0:	2101      	movs	r1, #1
 80042c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042c6:	f7ff fa8b 	bl	80037e0 <RCCEx_PLL3_Config>
 80042ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	d1b8      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042d4:	f7ff bbf8 	b.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d8:	2101      	movs	r1, #1
 80042da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042de:	f7ff fa7f 	bl	80037e0 <RCCEx_PLL3_Config>
 80042e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80042e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	d1a4      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80042ec:	e40d      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ee:	2102      	movs	r1, #2
 80042f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042f4:	f7ff fa74 	bl	80037e0 <RCCEx_PLL3_Config>
 80042f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042fe:	2d00      	cmp	r5, #0
 8004300:	d1a8      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004302:	e520      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x472>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4883      	ldr	r0, [pc, #524]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 8004306:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004308:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800430c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800430e:	2d00      	cmp	r5, #0
 8004310:	d1a6      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004312:	e660      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004314:	2102      	movs	r1, #2
 8004316:	f104 0008 	add.w	r0, r4, #8
 800431a:	f7ff f9e7 	bl	80036ec <RCCEx_PLL2_Config>
 800431e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004320:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004324:	2d00      	cmp	r5, #0
 8004326:	d188      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004328:	e472      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800432a:	2102      	movs	r1, #2
 800432c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004330:	f7ff fa56 	bl	80037e0 <RCCEx_PLL3_Config>
 8004334:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004336:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800433a:	2d00      	cmp	r5, #0
 800433c:	f47f af79 	bne.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8004340:	e523      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004342:	2102      	movs	r1, #2
 8004344:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004348:	f7ff fa4a 	bl	80037e0 <RCCEx_PLL3_Config>
 800434c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800434e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004352:	2d00      	cmp	r5, #0
 8004354:	f47f af79 	bne.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004358:	e539      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800435a:	2102      	movs	r1, #2
 800435c:	f104 0008 	add.w	r0, r4, #8
 8004360:	f7ff f9c4 	bl	80036ec <RCCEx_PLL2_Config>
 8004364:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004366:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800436a:	2d00      	cmp	r5, #0
 800436c:	f47f af6f 	bne.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004370:	f7ff bb68 	b.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x170>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004374:	2102      	movs	r1, #2
 8004376:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800437a:	f7ff fa31 	bl	80037e0 <RCCEx_PLL3_Config>
 800437e:	2800      	cmp	r0, #0
 8004380:	f040 808a 	bne.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004384:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004388:	e9d4 3200 	ldrd	r3, r2, [r4]
 800438c:	e52f      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800438e:	2102      	movs	r1, #2
 8004390:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004394:	f7ff fa24 	bl	80037e0 <RCCEx_PLL3_Config>
 8004398:	2800      	cmp	r0, #0
 800439a:	f040 8083 	bne.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800439e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80043a6:	e530      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80043ac:	f7ff bab9 	b.w	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b0:	2102      	movs	r1, #2
 80043b2:	3028      	adds	r0, #40	; 0x28
 80043b4:	f7ff fa14 	bl	80037e0 <RCCEx_PLL3_Config>
 80043b8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	f43f aaa7 	beq.w	800390e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80043c0:	e7f2      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043c2:	2100      	movs	r1, #0
 80043c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043c8:	f7ff fa0a 	bl	80037e0 <RCCEx_PLL3_Config>
 80043cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043ce:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80043d2:	f7ff baf4 	b.w	80039be <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043d6:	2100      	movs	r1, #0
 80043d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043dc:	f7ff fa00 	bl	80037e0 <RCCEx_PLL3_Config>
 80043e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043e2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80043e6:	f7ff bb0e 	b.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ea:	2100      	movs	r1, #0
 80043ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043f0:	f7ff f9f6 	bl	80037e0 <RCCEx_PLL3_Config>
 80043f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043f6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80043fa:	f7ff babd 	b.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043fe:	2100      	movs	r1, #0
 8004400:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004404:	f7ff f9ec 	bl	80037e0 <RCCEx_PLL3_Config>
 8004408:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800440a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800440e:	f7ff bb38 	b.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004412:	4840      	ldr	r0, [pc, #256]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
        break;
 8004414:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004418:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800441c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800441e:	e5c1      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004420:	2100      	movs	r1, #0
 8004422:	f104 0008 	add.w	r0, r4, #8
 8004426:	f7ff f961 	bl	80036ec <RCCEx_PLL2_Config>
 800442a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800442c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004430:	e5b8      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004432:	2100      	movs	r1, #0
 8004434:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004438:	f7ff f9d2 	bl	80037e0 <RCCEx_PLL3_Config>
 800443c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800443e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004442:	e5af      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004444:	2101      	movs	r1, #1
 8004446:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800444a:	f7ff f9c9 	bl	80037e0 <RCCEx_PLL3_Config>
 800444e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004450:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004454:	2d00      	cmp	r5, #0
 8004456:	f47f aef2 	bne.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800445a:	e42f      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445c:	2101      	movs	r1, #1
 800445e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004462:	f7ff f9bd 	bl	80037e0 <RCCEx_PLL3_Config>
 8004466:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004468:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800446c:	2d00      	cmp	r5, #0
 800446e:	f47f aee8 	bne.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004472:	e446      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004474:	2101      	movs	r1, #1
 8004476:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800447a:	f7ff f9b1 	bl	80037e0 <RCCEx_PLL3_Config>
 800447e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004480:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004484:	2d00      	cmp	r5, #0
 8004486:	f47f aed2 	bne.w	800422e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800448a:	e5f2      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        status = ret;
 800448c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800448e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004492:	4635      	mov	r5, r6
 8004494:	f7ff bbc6 	b.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004498:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
        status = HAL_ERROR;
 800449c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800449e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80044a2:	e4a4      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
        status = HAL_ERROR;
 80044a8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80044ae:	e4ac      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x536>
        tickstart = HAL_GetTick();
 80044b0:	f7fc ff06 	bl	80012c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004514 <HAL_RCCEx_PeriphCLKConfig+0xc40>
        tickstart = HAL_GetTick();
 80044b8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044be:	e004      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fc fefe 	bl	80012c0 <HAL_GetTick>
 80044c4:	1bc0      	subs	r0, r0, r7
 80044c6:	4548      	cmp	r0, r9
 80044c8:	d8e0      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ca:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80044ce:	079b      	lsls	r3, r3, #30
 80044d0:	d5f6      	bpl.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80044d6:	e612      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x82a>
 80044d8:	480e      	ldr	r0, [pc, #56]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 80044da:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044dc:	6901      	ldr	r1, [r0, #16]
 80044de:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80044e2:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80044e6:	430a      	orrs	r2, r1
 80044e8:	6102      	str	r2, [r0, #16]
 80044ea:	e613      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80044f0:	462e      	mov	r6, r5
 80044f2:	f7ff bb97 	b.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044f6:	2601      	movs	r6, #1
 80044f8:	4635      	mov	r5, r6
 80044fa:	f7ff bbe6 	b.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->FmcClockSelection)
 80044fe:	2601      	movs	r6, #1
 8004500:	4635      	mov	r5, r6
 8004502:	f7ff bb8c 	b.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004506:	2601      	movs	r6, #1
 8004508:	4635      	mov	r5, r6
 800450a:	e402      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800450c:	2601      	movs	r6, #1
 800450e:	f7ff ba1c 	b.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400
 8004518:	00ffffcf 	.word	0x00ffffcf

0800451c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800451c:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800451e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004520:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004522:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004524:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8004526:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800452a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800452e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004530:	d05d      	beq.n	80045ee <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004532:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004536:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800453a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800453e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004542:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004544:	ee07 4a90 	vmov	s15, r4
 8004548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800454c:	d003      	beq.n	8004556 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800454e:	2902      	cmp	r1, #2
 8004550:	d078      	beq.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8004552:	2900      	cmp	r1, #0
 8004554:	d050      	beq.n	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800455e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004562:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004564:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004568:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004580:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004584:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004588:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800458a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800458e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004590:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800459c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800459e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80045a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045aa:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80045ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80045b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80045c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80045c8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80045ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80045d2:	ee07 3a10 	vmov	s14, r3
 80045d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80045de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e6:	ee17 3a90 	vmov	r3, s15
 80045ea:	6083      	str	r3, [r0, #8]
}
 80045ec:	4770      	bx	lr
 80045ee:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045f0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045f4:	6083      	str	r3, [r0, #8]
}
 80045f6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	0689      	lsls	r1, r1, #26
 80045fc:	d529      	bpl.n	8004652 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045fe:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004600:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004604:	4919      	ldr	r1, [pc, #100]	; (800466c <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800460c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004614:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004618:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800461c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800461e:	ee06 3a10 	vmov	s12, r3
 8004622:	ee05 1a90 	vmov	s11, r1
 8004626:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800462a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800462e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004632:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004636:	eef0 7a46 	vmov.f32	s15, s12
 800463a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800463e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004642:	e7a1      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800464c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004650:	e787      	b.n	8004562 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800465a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465e:	e780      	b.n	8004562 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004660:	58024400 	.word	0x58024400
 8004664:	4a742400 	.word	0x4a742400
 8004668:	39000000 	.word	0x39000000
 800466c:	03d09000 	.word	0x03d09000
 8004670:	4bbebc20 	.word	0x4bbebc20
 8004674:	4c742400 	.word	0x4c742400

08004678 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004678:	4a50      	ldr	r2, [pc, #320]	; (80047bc <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800467a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800467c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800467e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004680:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8004682:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004686:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800468a:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800468c:	d05d      	beq.n	800474a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800468e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004692:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004696:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800469a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800469e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80046a0:	ee07 4a90 	vmov	s15, r4
 80046a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80046aa:	2902      	cmp	r1, #2
 80046ac:	d078      	beq.n	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 80046ae:	2900      	cmp	r1, #0
 80046b0:	d050      	beq.n	8004754 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80047c0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80046ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046c0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80046c4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80047c4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80046c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80046d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80046dc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80046e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046e4:	4a35      	ldr	r2, [pc, #212]	; (80047bc <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80046e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80046ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80046f8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004706:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800470a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800470c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004718:	ee77 7a86 	vadd.f32	s15, s15, s12
 800471c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004720:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004724:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004728:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800472a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800472e:	ee07 3a10 	vmov	s14, r3
 8004732:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004736:	ee37 7a06 	vadd.f32	s14, s14, s12
 800473a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004742:	ee17 3a90 	vmov	r3, s15
 8004746:	6083      	str	r3, [r0, #8]
}
 8004748:	4770      	bx	lr
 800474a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800474c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004750:	6083      	str	r3, [r0, #8]
}
 8004752:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	0689      	lsls	r1, r1, #26
 8004758:	d529      	bpl.n	80047ae <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800475a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800475c:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004760:	4919      	ldr	r1, [pc, #100]	; (80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004766:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004768:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800476c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004770:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80047c4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004774:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004778:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800477a:	ee06 3a10 	vmov	s12, r3
 800477e:	ee05 1a90 	vmov	s11, r1
 8004782:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004786:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800478a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800478e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004792:	eef0 7a46 	vmov.f32	s15, s12
 8004796:	eee7 7a05 	vfma.f32	s15, s14, s10
 800479a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800479e:	e7a1      	b.n	80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80047a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ac:	e787      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 80047b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ba:	e780      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80047bc:	58024400 	.word	0x58024400
 80047c0:	4a742400 	.word	0x4a742400
 80047c4:	39000000 	.word	0x39000000
 80047c8:	03d09000 	.word	0x03d09000
 80047cc:	4bbebc20 	.word	0x4bbebc20
 80047d0:	4c742400 	.word	0x4c742400

080047d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d4:	4a51      	ldr	r2, [pc, #324]	; (800491c <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 80047d6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80047da:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80047dc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80047de:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80047e2:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047e6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80047e8:	d05e      	beq.n	80048a8 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047ea:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80047ee:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047f6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80047fa:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047fc:	ee07 4a90 	vmov	s15, r4
 8004800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004804:	f000 8082 	beq.w	800490c <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8004808:	2902      	cmp	r1, #2
 800480a:	d078      	beq.n	80048fe <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 800480c:	2900      	cmp	r1, #0
 800480e:	d050      	beq.n	80048b2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004920 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800481e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004822:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004836:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800483a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800483e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004842:	4a36      	ldr	r2, [pc, #216]	; (800491c <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8004844:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004848:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800484a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004856:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004858:	ee77 7a86 	vadd.f32	s15, s15, s12
 800485c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004860:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004864:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004868:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800486a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004876:	ee77 7a86 	vadd.f32	s15, s15, s12
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004882:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004886:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004888:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800488c:	ee07 3a10 	vmov	s14, r3
 8004890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004894:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 3a90 	vmov	r3, s15
 80048a4:	6083      	str	r3, [r0, #8]
}
 80048a6:	4770      	bx	lr
 80048a8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80048aa:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80048ae:	6083      	str	r3, [r0, #8]
}
 80048b0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b2:	6811      	ldr	r1, [r2, #0]
 80048b4:	0689      	lsls	r1, r1, #26
 80048b6:	d5ab      	bpl.n	8004810 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b8:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ba:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048be:	491a      	ldr	r1, [pc, #104]	; (8004928 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048c6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ce:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048d6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d8:	ee06 3a10 	vmov	s12, r3
 80048dc:	ee05 1a90 	vmov	s11, r1
 80048e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80048e4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80048e8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80048ec:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80048f0:	eef0 7a46 	vmov.f32	s15, s12
 80048f4:	eee7 7a05 	vfma.f32	s15, s14, s10
 80048f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048fc:	e7a1      	b.n	8004842 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 800492c <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8004906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800490a:	e787      	b.n	800481c <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004930 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8004914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004918:	e780      	b.n	800481c <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
 8004920:	4c742400 	.word	0x4c742400
 8004924:	39000000 	.word	0x39000000
 8004928:	03d09000 	.word	0x03d09000
 800492c:	4bbebc20 	.word	0x4bbebc20
 8004930:	4a742400 	.word	0x4a742400

08004934 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004934:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8004938:	430b      	orrs	r3, r1
{
 800493a:	b500      	push	{lr}
 800493c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800493e:	f000 8083 	beq.w	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004942:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8004946:	430b      	orrs	r3, r1
 8004948:	d038      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800494a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800494e:	430b      	orrs	r3, r1
 8004950:	f000 80e6 	beq.w	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004954:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8004958:	430b      	orrs	r3, r1
 800495a:	f000 8089 	beq.w	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800495e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8004962:	430b      	orrs	r3, r1
 8004964:	d060      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004966:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800496a:	430b      	orrs	r3, r1
 800496c:	f000 8112 	beq.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004970:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8004974:	430b      	orrs	r3, r1
 8004976:	f000 80a3 	beq.w	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800497a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800497e:	430b      	orrs	r3, r1
 8004980:	f000 80fa 	beq.w	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004984:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8004988:	430b      	orrs	r3, r1
 800498a:	f000 8143 	beq.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800498e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8004992:	4308      	orrs	r0, r1
 8004994:	d137      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004996:	4a9a      	ldr	r2, [pc, #616]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004998:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800499a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	f000 8084 	beq.w	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80049a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049aa:	f000 8157 	beq.w	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80049ae:	bb53      	cbnz	r3, 8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049b0:	6810      	ldr	r0, [r2, #0]
 80049b2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80049b6:	d044      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80049b8:	4892      	ldr	r0, [pc, #584]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80049ba:	e042      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80049bc:	4a90      	ldr	r2, [pc, #576]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80049c0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	f000 80a6 	beq.w	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80049ca:	d920      	bls.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80049cc:	2bc0      	cmp	r3, #192	; 0xc0
 80049ce:	d037      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d4:	d117      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049d8:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049de:	0749      	lsls	r1, r1, #29
 80049e0:	d502      	bpl.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80c2 	beq.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049e8:	4a85      	ldr	r2, [pc, #532]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	05d0      	lsls	r0, r2, #23
 80049ee:	d503      	bpl.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80049f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f4:	f000 8102 	beq.w	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049f8:	4a81      	ldr	r2, [pc, #516]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	0391      	lsls	r1, r2, #14
 80049fe:	d502      	bpl.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d0d8      	beq.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004a06:	2000      	movs	r0, #0
}
 8004a08:	b005      	add	sp, #20
 8004a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d04d      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d1f7      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a16:	6810      	ldr	r0, [r2, #0]
 8004a18:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004a1c:	d011      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a1e:	a801      	add	r0, sp, #4
 8004a20:	f7ff fd7c 	bl	800451c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a24:	9801      	ldr	r0, [sp, #4]
 8004a26:	e00c      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004a28:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d06f      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004a36:	d938      	bls.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a3c:	f040 8088 	bne.w	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a40:	4871      	ldr	r0, [pc, #452]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004a42:	b005      	add	sp, #20
 8004a44:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004a48:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d8d8      	bhi.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004aff 	.word	0x08004aff
 8004a60:	08004adb 	.word	0x08004adb
 8004a64:	08004aeb 	.word	0x08004aeb
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004ae7 	.word	0x08004ae7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a74:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8004a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7c:	d04b      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004a7e:	d944      	bls.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8004a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a84:	d0dc      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8a:	d1bc      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a8e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a94:	0752      	lsls	r2, r2, #29
 8004a96:	d5a7      	bpl.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1a5      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a9c:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a9e:	485b      	ldr	r0, [pc, #364]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004aa6:	40d8      	lsrs	r0, r3
 8004aa8:	e7cb      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d154      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aae:	6810      	ldr	r0, [r2, #0]
 8004ab0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004ab4:	d0c5      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab6:	a801      	add	r0, sp, #4
 8004ab8:	f7ff fe8c 	bl	80047d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004abc:	9802      	ldr	r0, [sp, #8]
 8004abe:	e7c0      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004ac0:	4a4f      	ldr	r2, [pc, #316]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ac2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	f000 80d0 	beq.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad4:	d0da      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d195      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004ae2:	d0ae      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004ae4:	e79b      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ae6:	4a46      	ldr	r2, [pc, #280]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ae8:	e775      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aea:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004af2:	d0a6      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af4:	a801      	add	r0, sp, #4
 8004af6:	f7ff fdbf 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004afa:	9801      	ldr	r0, [sp, #4]
 8004afc:	e7a1      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004b06:	d09c      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004b08:	e7d5      	b.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0cf      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b12:	d080      	beq.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004b14:	e777      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b16:	6810      	ldr	r0, [r2, #0]
 8004b18:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004b1c:	d091      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004b1e:	e7e9      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004b20:	4a37      	ldr	r2, [pc, #220]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004b24:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8004b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2c:	d0f3      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004b2e:	d806      	bhi.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0bc      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b38:	f43f af6d 	beq.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004b3c:	e763      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004b3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b42:	f43f af7d 	beq.w	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b4a:	f43f af44 	beq.w	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8004b4e:	e75a      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b54:	d09a      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004b56:	e756      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	f43f af5b 	beq.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004b60:	e751      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b62:	6810      	ldr	r0, [r2, #0]
 8004b64:	f010 0004 	ands.w	r0, r0, #4
 8004b68:	f43f af6b 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b6c:	6813      	ldr	r3, [r2, #0]
 8004b6e:	4827      	ldr	r0, [pc, #156]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b74:	40d8      	lsrs	r0, r3
 8004b76:	e764      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8004b7c:	03d2      	lsls	r2, r2, #15
 8004b7e:	d5bf      	bpl.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004b86:	f43f af5c 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b8a:	a801      	add	r0, sp, #4
 8004b8c:	f7ff fcc6 	bl	800451c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b90:	9803      	ldr	r0, [sp, #12]
 8004b92:	e756      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b96:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004b98:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba0:	d0df      	beq.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004ba2:	d810      	bhi.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba8:	d058      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bae:	d118      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004bb8:	f43f af43 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bbc:	a801      	add	r0, sp, #4
 8004bbe:	f7ff fd5b 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bc2:	9802      	ldr	r0, [sp, #8]
 8004bc4:	e73d      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bca:	d012      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd0:	f47f af19 	bne.w	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004bdc:	f43f af31 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004be0:	e6ea      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f47f af0f 	bne.w	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8004be8:	b005      	add	sp, #20
 8004bea:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004bee:	f7fe bd35 	b.w	800365c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004bf2:	6810      	ldr	r0, [r2, #0]
 8004bf4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004bf8:	f43f af23 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8004bfc:	4804      	ldr	r0, [pc, #16]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004bfe:	e720      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004c00:	58024400 	.word	0x58024400
 8004c04:	017d7840 	.word	0x017d7840
 8004c08:	00bb8000 	.word	0x00bb8000
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8004c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c20:	d037      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8004c22:	d814      	bhi.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c28:	d03f      	beq.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2e:	d0bf      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f47f aee8 	bne.w	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c36:	f7fe fcd1 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004c44:	5cd3      	ldrb	r3, [r2, r3]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	40d8      	lsrs	r0, r3
        break;
 8004c4c:	e6f9      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c52:	d017      	beq.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8004c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c58:	d0bc      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004c5a:	e6d4      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c5c:	6810      	ldr	r0, [r2, #0]
 8004c5e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004c62:	f43f aeee 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c66:	a801      	add	r0, sp, #4
 8004c68:	f7ff fc58 	bl	800451c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c6c:	9802      	ldr	r0, [sp, #8]
 8004c6e:	e6e8      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c70:	6810      	ldr	r0, [r2, #0]
 8004c72:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004c76:	f43f aee4 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c7a:	a801      	add	r0, sp, #4
 8004c7c:	f7ff fcfc 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004c80:	9803      	ldr	r0, [sp, #12]
 8004c82:	e6de      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004c8c:	f43f aed9 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004c90:	e7b4      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	f010 0004 	ands.w	r0, r0, #4
 8004c9a:	f43f aed2 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8004ca2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004ca6:	40d8      	lsrs	r0, r3
 8004ca8:	e6cb      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004caa:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004cb2:	f43f aec6 	beq.w	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004cb6:	e7d6      	b.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	08005928 	.word	0x08005928
 8004cc0:	03d09000 	.word	0x03d09000

08004cc4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8004cc4:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004cc6:	492c      	ldr	r1, [pc, #176]	; (8004d78 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8004cc8:	695a      	ldr	r2, [r3, #20]
{
 8004cca:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004ccc:	699c      	ldr	r4, [r3, #24]
 8004cce:	f044 0408 	orr.w	r4, r4, #8
 8004cd2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004cd4:	699c      	ldr	r4, [r3, #24]
 8004cd6:	f044 0410 	orr.w	r4, r4, #16
 8004cda:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	f024 0401 	bic.w	r4, r4, #1
 8004ce2:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004ce4:	691c      	ldr	r4, [r3, #16]
 8004ce6:	4021      	ands	r1, r4
 8004ce8:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8004cf0:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cf2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8004cf6:	2904      	cmp	r1, #4
 8004cf8:	d001      	beq.n	8004cfe <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004cfa:	0691      	lsls	r1, r2, #26
 8004cfc:	d430      	bmi.n	8004d60 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cfe:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8004d02:	2903      	cmp	r1, #3
 8004d04:	d001      	beq.n	8004d0a <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004d06:	0654      	lsls	r4, r2, #25
 8004d08:	d41f      	bmi.n	8004d4a <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004d0a:	0591      	lsls	r1, r2, #22
 8004d0c:	d509      	bpl.n	8004d22 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d0e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004d12:	f041 0101 	orr.w	r1, r1, #1
 8004d16:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d1a:	6999      	ldr	r1, [r3, #24]
 8004d1c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004d20:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004d22:	05d2      	lsls	r2, r2, #23
 8004d24:	d509      	bpl.n	8004d3a <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d26:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004d2a:	f042 0208 	orr.w	r2, r2, #8
 8004d2e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d38:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004d3a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8004d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8004d40:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004d44:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8004d48:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d4a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004d4e:	f041 0104 	orr.w	r1, r1, #4
 8004d52:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004d5c:	6199      	str	r1, [r3, #24]
 8004d5e:	e7d4      	b.n	8004d0a <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004d60:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004d64:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004d68:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	f041 0120 	orr.w	r1, r1, #32
 8004d72:	6199      	str	r1, [r3, #24]
 8004d74:	e7c3      	b.n	8004cfe <SPI_CloseTransfer+0x3a>
 8004d76:	bf00      	nop
 8004d78:	fffffc90 	.word	0xfffffc90

08004d7c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f000 80c9 	beq.w	8004f14 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d82:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	2100      	movs	r1, #0
{
 8004d86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d8a:	6803      	ldr	r3, [r0, #0]
 8004d8c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d8e:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d017      	beq.n	8004dc4 <HAL_SPI_Init+0x48>
 8004d94:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_SPI_Init+0x48>
 8004d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004da0:	4293      	cmp	r3, r2
 8004da2:	68c2      	ldr	r2, [r0, #12]
 8004da4:	f000 80ae 	beq.w	8004f04 <HAL_SPI_Init+0x188>
 8004da8:	2a0f      	cmp	r2, #15
 8004daa:	d808      	bhi.n	8004dbe <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004dac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004dae:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004db2:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004db4:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8004db6:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004dba:	2908      	cmp	r1, #8
 8004dbc:	d916      	bls.n	8004dec <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8004dbe:	2001      	movs	r0, #1
}
 8004dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004dc4:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004dc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004dc8:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004dcc:	4e53      	ldr	r6, [pc, #332]	; (8004f1c <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004dce:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004dd0:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8004dd2:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004dd6:	4d52      	ldr	r5, [pc, #328]	; (8004f20 <HAL_SPI_Init+0x1a4>)
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	bf18      	it	ne
 8004ddc:	42b3      	cmpne	r3, r6
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_Init+0x6c>
 8004de0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	d101      	bne.n	8004dec <HAL_SPI_Init+0x70>
 8004de8:	2910      	cmp	r1, #16
 8004dea:	d8e8      	bhi.n	8004dbe <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dec:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8004df0:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d07a      	beq.n	8004eee <HAL_SPI_Init+0x172>
 8004df8:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004dfc:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004dfe:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e00:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e02:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e06:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8004e0a:	6819      	ldr	r1, [r3, #0]
 8004e0c:	f021 0101 	bic.w	r1, r1, #1
 8004e10:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004e12:	6899      	ldr	r1, [r3, #8]
 8004e14:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e18:	6861      	ldr	r1, [r4, #4]
 8004e1a:	d058      	beq.n	8004ece <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e1c:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8004e20:	d001      	beq.n	8004e26 <HAL_SPI_Init+0xaa>
 8004e22:	2a06      	cmp	r2, #6
 8004e24:	d849      	bhi.n	8004eba <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e26:	f8d3 e000 	ldr.w	lr, [r3]
 8004e2a:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8004e2e:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e32:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e34:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e38:	4337      	orrs	r7, r6
 8004e3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e3c:	4337      	orrs	r7, r6
 8004e3e:	6926      	ldr	r6, [r4, #16]
 8004e40:	4337      	orrs	r7, r6
 8004e42:	6966      	ldr	r6, [r4, #20]
 8004e44:	4337      	orrs	r7, r6
 8004e46:	6a26      	ldr	r6, [r4, #32]
 8004e48:	4337      	orrs	r7, r6
 8004e4a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8004e4c:	4337      	orrs	r7, r6
 8004e4e:	68a6      	ldr	r6, [r4, #8]
 8004e50:	4337      	orrs	r7, r6
 8004e52:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8004e54:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e56:	69e6      	ldr	r6, [r4, #28]
 8004e58:	4332      	orrs	r2, r6
 8004e5a:	4302      	orrs	r2, r0
 8004e5c:	ea42 020c 	orr.w	r2, r2, ip
 8004e60:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e62:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004e64:	433a      	orrs	r2, r7
 8004e66:	430a      	orrs	r2, r1
 8004e68:	432a      	orrs	r2, r5
 8004e6a:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e6c:	b9b9      	cbnz	r1, 8004e9e <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e84:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e8e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004e90:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e92:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004e96:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8004e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004ea6:	f1b9 0f00 	cmp.w	r9, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004eb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	e7e9      	b.n	8004e8e <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004eba:	f8d3 e000 	ldr.w	lr, [r3]
 8004ebe:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8004ec0:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8004ec4:	ea4e 0e06 	orr.w	lr, lr, r6
 8004ec8:	f8c3 e000 	str.w	lr, [r3]
 8004ecc:	e7b1      	b.n	8004e32 <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ece:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004ed2:	d006      	beq.n	8004ee2 <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d1a1      	bne.n	8004e1c <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ed8:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004ede:	4689      	mov	r9, r1
 8004ee0:	e7a1      	b.n	8004e26 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ee2:	b9cd      	cbnz	r5, 8004f18 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004ee4:	681e      	ldr	r6, [r3, #0]
 8004ee6:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8004eea:	601e      	str	r6, [r3, #0]
 8004eec:	e796      	b.n	8004e1c <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 8004eee:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004ef0:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8004ef4:	f7fc f8c2 	bl	800107c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004ef8:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004efa:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004efc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8004f00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004f02:	e77b      	b.n	8004dfc <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f04:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004f06:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f0a:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004f0c:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8004f0e:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f12:	e769      	b.n	8004de8 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
}
 8004f16:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004f18:	4689      	mov	r9, r1
 8004f1a:	e782      	b.n	8004e22 <HAL_SPI_Init+0xa6>
 8004f1c:	40013000 	.word	0x40013000
 8004f20:	40003800 	.word	0x40003800

08004f24 <HAL_SPI_TransmitReceive>:
{
 8004f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004f2a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8004f2e:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f000 80b9 	beq.w	80050a8 <HAL_SPI_TransmitReceive+0x184>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4688      	mov	r8, r1
 8004f3c:	4691      	mov	r9, r2
 8004f3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004f42:	f8d0 a000 	ldr.w	sl, [r0]
  tickstart = HAL_GetTick();
 8004f46:	f7fc f9bb 	bl	80012c0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004f4a:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8004f4e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004f50:	2901      	cmp	r1, #1
 8004f52:	b2cb      	uxtb	r3, r1
 8004f54:	f040 80a1 	bne.w	800509a <HAL_SPI_TransmitReceive+0x176>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004f58:	f1b9 0f00 	cmp.w	r9, #0
 8004f5c:	bf18      	it	ne
 8004f5e:	f1b8 0f00 	cmpne.w	r8, #0
 8004f62:	f000 8094 	beq.w	800508e <HAL_SPI_TransmitReceive+0x16a>
 8004f66:	fab5 f285 	clz	r2, r5
 8004f6a:	0952      	lsrs	r2, r2, #5
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	f000 808e 	beq.w	800508e <HAL_SPI_TransmitReceive+0x16a>
  SPI_2LINES(hspi);
 8004f72:	6823      	ldr	r3, [r4, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004f74:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f76:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004f7a:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f7e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8004f82:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8004f86:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f8a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->RxXferSize  = Size;
 8004f8e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxXferSize  = Size;
 8004f92:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8004f96:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8004fa0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fa2:	4a89      	ldr	r2, [pc, #548]	; (80051c8 <HAL_SPI_TransmitReceive+0x2a4>)
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	432a      	orrs	r2, r5
 8004faa:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004fba:	f000 80ee 	beq.w	800519a <HAL_SPI_TransmitReceive+0x276>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbe:	f117 0901 	adds.w	r9, r7, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004fc2:	68e2      	ldr	r2, [r4, #12]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc4:	46a8      	mov	r8, r5
 8004fc6:	bf18      	it	ne
 8004fc8:	f04f 0901 	movne.w	r9, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004fcc:	2a0f      	cmp	r2, #15
 8004fce:	f200 80aa 	bhi.w	8005126 <HAL_SPI_TransmitReceive+0x202>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd2:	2a07      	cmp	r2, #7
 8004fd4:	d96d      	bls.n	80050b2 <HAL_SPI_TransmitReceive+0x18e>
 8004fd6:	e000      	b.n	8004fda <HAL_SPI_TransmitReceive+0xb6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004fd8:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	0792      	lsls	r2, r2, #30
 8004fde:	d50f      	bpl.n	8005000 <HAL_SPI_TransmitReceive+0xdc>
 8004fe0:	b175      	cbz	r5, 8005000 <HAL_SPI_TransmitReceive+0xdc>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fe2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fe4:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004fe8:	f8aa 1020 	strh.w	r1, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8004fee:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004ffa:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004ffe:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	07d8      	lsls	r0, r3, #31
 8005004:	d512      	bpl.n	800502c <HAL_SPI_TransmitReceive+0x108>
 8005006:	f1b8 0f00 	cmp.w	r8, #0
 800500a:	d00f      	beq.n	800502c <HAL_SPI_TransmitReceive+0x108>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800500c:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8005010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005012:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005016:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005018:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800501c:	3b01      	subs	r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005024:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8005028:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502c:	f7fc f948 	bl	80012c0 <HAL_GetTick>
 8005030:	1b80      	subs	r0, r0, r6
 8005032:	42b8      	cmp	r0, r7
 8005034:	d303      	bcc.n	800503e <HAL_SPI_TransmitReceive+0x11a>
 8005036:	f1b9 0f00 	cmp.w	r9, #0
 800503a:	f040 80b3 	bne.w	80051a4 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800503e:	ea45 0308 	orr.w	r3, r5, r8
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1c7      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0xb4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	d40d      	bmi.n	800506c <HAL_SPI_TransmitReceive+0x148>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005050:	f7fc f936 	bl	80012c0 <HAL_GetTick>
 8005054:	1b80      	subs	r0, r0, r6
 8005056:	4287      	cmp	r7, r0
 8005058:	d8f6      	bhi.n	8005048 <HAL_SPI_TransmitReceive+0x124>
 800505a:	f1b9 0f00 	cmp.w	r9, #0
 800505e:	d0f3      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005060:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800506c:	4620      	mov	r0, r4
 800506e:	f7ff fe29 	bl	8004cc4 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005072:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8005074:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005076:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800507a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800507e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	bf18      	it	ne
 8005086:	2301      	movne	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800508e:	2200      	movs	r2, #0
 8005090:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8005094:	4618      	mov	r0, r3
 8005096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800509a:	2200      	movs	r2, #0
    return errorcode;
 800509c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hspi);
 800509e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 80050a8:	2302      	movs	r3, #2
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80050b0:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	0791      	lsls	r1, r2, #30
 80050b6:	d511      	bpl.n	80050dc <HAL_SPI_TransmitReceive+0x1b8>
 80050b8:	b185      	cbz	r5, 80050dc <HAL_SPI_TransmitReceive+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->TxXferCount--;
 80050c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 80050d0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050d4:	3301      	adds	r3, #1
        initial_TxXferCount = hspi->TxXferCount;
 80050d6:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050d8:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	07d2      	lsls	r2, r2, #31
 80050e0:	d513      	bpl.n	800510a <HAL_SPI_TransmitReceive+0x1e6>
 80050e2:	f1b8 0f00 	cmp.w	r8, #0
 80050e6:	d010      	beq.n	800510a <HAL_SPI_TransmitReceive+0x1e6>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80050e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050ee:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80050f0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 80050fe:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005102:	3301      	adds	r3, #1
        initial_RxXferCount = hspi->RxXferCount;
 8005104:	fa1f f888 	uxth.w	r8, r8
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005108:	6663      	str	r3, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510a:	f7fc f8d9 	bl	80012c0 <HAL_GetTick>
 800510e:	1b80      	subs	r0, r0, r6
 8005110:	42b8      	cmp	r0, r7
 8005112:	d302      	bcc.n	800511a <HAL_SPI_TransmitReceive+0x1f6>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	d144      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800511a:	ea45 0308 	orr.w	r3, r5, r8
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1c5      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x18c>
 8005124:	e790      	b.n	8005048 <HAL_SPI_TransmitReceive+0x124>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005126:	f248 0a08 	movw	sl, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	0791      	lsls	r1, r2, #30
 800512e:	d50e      	bpl.n	800514e <HAL_SPI_TransmitReceive+0x22a>
 8005130:	b16d      	cbz	r5, 800514e <HAL_SPI_TransmitReceive+0x22a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005132:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005134:	f852 1b04 	ldr.w	r1, [r2], #4
 8005138:	6219      	str	r1, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800513a:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800513c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005140:	3a01      	subs	r2, #1
 8005142:	b292      	uxth	r2, r2
 8005144:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005148:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800514c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	ea12 0f0a 	tst.w	r2, sl
 8005154:	d011      	beq.n	800517a <HAL_SPI_TransmitReceive+0x256>
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	d00e      	beq.n	800517a <HAL_SPI_TransmitReceive+0x256>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800515c:	6b19      	ldr	r1, [r3, #48]	; 0x30
        hspi->RxXferCount --;
 800515e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005162:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005164:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005166:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 800516a:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800516c:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800516e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005172:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8005176:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517a:	f7fc f8a1 	bl	80012c0 <HAL_GetTick>
 800517e:	1b80      	subs	r0, r0, r6
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005180:	ea45 0308 	orr.w	r3, r5, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	42b8      	cmp	r0, r7
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005186:	b29b      	uxth	r3, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005188:	d302      	bcc.n	8005190 <HAL_SPI_TransmitReceive+0x26c>
 800518a:	f1b9 0f00 	cmp.w	r9, #0
 800518e:	d109      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005190:	2b00      	cmp	r3, #0
 8005192:	f43f af59 	beq.w	8005048 <HAL_SPI_TransmitReceive+0x124>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	e7c7      	b.n	800512a <HAL_SPI_TransmitReceive+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e70c      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x9a>
        SPI_CloseTransfer(hspi);
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fd8d 	bl	8004cc4 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80051ae:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 80051b0:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
        __HAL_UNLOCK(hspi);
 80051b8:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051bc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80051c0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
        return HAL_TIMEOUT;
 80051c4:	e766      	b.n	8005094 <HAL_SPI_TransmitReceive+0x170>
 80051c6:	bf00      	nop
 80051c8:	ffff0000 	.word	0xffff0000

080051cc <arm_biquad_cascade_df2T_f32>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	7807      	ldrb	r7, [r0, #0]
 80051d2:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80051d6:	6885      	ldr	r5, [r0, #8]
 80051d8:	3514      	adds	r5, #20
 80051da:	6846      	ldr	r6, [r0, #4]
 80051dc:	3608      	adds	r6, #8
 80051de:	ea4f 198e 	mov.w	r9, lr, lsl #6
 80051e2:	eb02 0b09 	add.w	fp, r2, r9
 80051e6:	f003 080f 	and.w	r8, r3, #15
 80051ea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80051ee:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80051f2:	ed15 7a04 	vldr	s14, [r5, #-16]
 80051f6:	ed55 6a03 	vldr	s13, [r5, #-12]
 80051fa:	ed15 6a02 	vldr	s12, [r5, #-8]
 80051fe:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005202:	46b4      	mov	ip, r6
 8005204:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005208:	ed16 4a01 	vldr	s8, [r6, #-4]
 800520c:	f1be 0f00 	cmp.w	lr, #0
 8005210:	f000 8195 	beq.w	800553e <arm_biquad_cascade_df2T_f32+0x372>
 8005214:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005218:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800521c:	4674      	mov	r4, lr
 800521e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005222:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005226:	ee35 5a23 	vadd.f32	s10, s10, s7
 800522a:	ee67 4a03 	vmul.f32	s9, s14, s6
 800522e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005232:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005236:	ee34 4a84 	vadd.f32	s8, s9, s8
 800523a:	ee26 3a83 	vmul.f32	s6, s13, s6
 800523e:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8005242:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8005246:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800524a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800524e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005252:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005256:	ee27 4a23 	vmul.f32	s8, s14, s7
 800525a:	ee35 5a04 	vadd.f32	s10, s10, s8
 800525e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005262:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005266:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800526a:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800526e:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8005272:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005276:	ee35 5a03 	vadd.f32	s10, s10, s6
 800527a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800527e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005282:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005286:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800528a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800528e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005292:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005296:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800529a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800529e:	ee67 4a84 	vmul.f32	s9, s15, s8
 80052a2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80052a6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80052aa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80052ae:	ee67 3a04 	vmul.f32	s7, s14, s8
 80052b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80052b6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80052ba:	ee33 3a05 	vadd.f32	s6, s6, s10
 80052be:	ee66 3a84 	vmul.f32	s7, s13, s8
 80052c2:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 80052c6:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 80052ca:	ee27 5a84 	vmul.f32	s10, s15, s8
 80052ce:	ee35 5a03 	vadd.f32	s10, s10, s6
 80052d2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80052d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80052da:	ee67 3a04 	vmul.f32	s7, s14, s8
 80052de:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80052e2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80052e6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80052ea:	ee66 3a84 	vmul.f32	s7, s13, s8
 80052ee:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 80052f2:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 80052f6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80052fa:	ee74 4a83 	vadd.f32	s9, s9, s6
 80052fe:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005302:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005306:	ee67 3a04 	vmul.f32	s7, s14, s8
 800530a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800530e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005312:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005316:	ee66 3a84 	vmul.f32	s7, s13, s8
 800531a:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800531e:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8005322:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005326:	ee35 5a03 	vadd.f32	s10, s10, s6
 800532a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800532e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005332:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005336:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800533a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800533e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005342:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005346:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800534a:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800534e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005352:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005356:	ee25 5a85 	vmul.f32	s10, s11, s10
 800535a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800535e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005362:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005366:	ee26 3a24 	vmul.f32	s6, s12, s9
 800536a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800536e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005372:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8005376:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800537a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800537e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005382:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005386:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800538a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800538e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005392:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005396:	ee33 3a24 	vadd.f32	s6, s6, s9
 800539a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800539e:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80053a2:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 80053a6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80053aa:	ee74 4a83 	vadd.f32	s9, s9, s6
 80053ae:	ee25 5a85 	vmul.f32	s10, s11, s10
 80053b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80053b6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80053ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 80053be:	ee26 3a24 	vmul.f32	s6, s12, s9
 80053c2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80053c6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80053ca:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80053ce:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80053d2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80053d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80053da:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80053de:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80053e2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80053e6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80053ea:	ee26 3a05 	vmul.f32	s6, s12, s10
 80053ee:	ee33 3a24 	vadd.f32	s6, s6, s9
 80053f2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80053f6:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80053fa:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 80053fe:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005402:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005406:	ee25 5a85 	vmul.f32	s10, s11, s10
 800540a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800540e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005412:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005416:	ee26 3a24 	vmul.f32	s6, s12, s9
 800541a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800541e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005422:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8005426:	ed10 4a04 	vldr	s8, [r0, #-16]
 800542a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800542e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005432:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005436:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800543a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800543e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005442:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005446:	ee33 3a24 	vadd.f32	s6, s6, s9
 800544a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800544e:	ed03 5a04 	vstr	s10, [r3, #-16]
 8005452:	ed10 4a03 	vldr	s8, [r0, #-12]
 8005456:	ee67 4a84 	vmul.f32	s9, s15, s8
 800545a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800545e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005462:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005466:	ee67 3a04 	vmul.f32	s7, s14, s8
 800546a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800546e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005472:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005476:	ee66 3a84 	vmul.f32	s7, s13, s8
 800547a:	ed43 4a03 	vstr	s9, [r3, #-12]
 800547e:	ed10 4a02 	vldr	s8, [r0, #-8]
 8005482:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005486:	ee35 5a03 	vadd.f32	s10, s10, s6
 800548a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800548e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005492:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005496:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800549a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800549e:	ee33 3a24 	vadd.f32	s6, s6, s9
 80054a2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80054a6:	ed03 5a02 	vstr	s10, [r3, #-8]
 80054aa:	ed10 4a01 	vldr	s8, [r0, #-4]
 80054ae:	ee67 4a84 	vmul.f32	s9, s15, s8
 80054b2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80054b6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80054ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 80054be:	ee67 3a04 	vmul.f32	s7, s14, s8
 80054c2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80054c6:	ee66 3a24 	vmul.f32	s7, s12, s9
 80054ca:	ee73 3a85 	vadd.f32	s7, s7, s10
 80054ce:	ee26 5a84 	vmul.f32	s10, s13, s8
 80054d2:	ee25 4aa4 	vmul.f32	s8, s11, s9
 80054d6:	ee34 4a05 	vadd.f32	s8, s8, s10
 80054da:	ed43 4a01 	vstr	s9, [r3, #-4]
 80054de:	3040      	adds	r0, #64	; 0x40
 80054e0:	3340      	adds	r3, #64	; 0x40
 80054e2:	3c01      	subs	r4, #1
 80054e4:	f47f ae9b 	bne.w	800521e <arm_biquad_cascade_df2T_f32+0x52>
 80054e8:	4449      	add	r1, r9
 80054ea:	465b      	mov	r3, fp
 80054ec:	f1b8 0f00 	cmp.w	r8, #0
 80054f0:	d019      	beq.n	8005526 <arm_biquad_cascade_df2T_f32+0x35a>
 80054f2:	eb01 000a 	add.w	r0, r1, sl
 80054f6:	ecf1 2a01 	vldmia	r1!, {s5}
 80054fa:	ee27 3aa2 	vmul.f32	s6, s15, s5
 80054fe:	ee33 3a23 	vadd.f32	s6, s6, s7
 8005502:	ee67 3a22 	vmul.f32	s7, s14, s5
 8005506:	ee33 4a84 	vadd.f32	s8, s7, s8
 800550a:	ee26 5a03 	vmul.f32	s10, s12, s6
 800550e:	ee75 3a04 	vadd.f32	s7, s10, s8
 8005512:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8005516:	ee25 4a83 	vmul.f32	s8, s11, s6
 800551a:	ee34 4a22 	vadd.f32	s8, s8, s5
 800551e:	eca3 3a01 	vstmia	r3!, {s6}
 8005522:	4281      	cmp	r1, r0
 8005524:	d1e7      	bne.n	80054f6 <arm_biquad_cascade_df2T_f32+0x32a>
 8005526:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800552a:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800552e:	3514      	adds	r5, #20
 8005530:	3608      	adds	r6, #8
 8005532:	4611      	mov	r1, r2
 8005534:	3f01      	subs	r7, #1
 8005536:	f47f ae5a 	bne.w	80051ee <arm_biquad_cascade_df2T_f32+0x22>
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	4613      	mov	r3, r2
 8005540:	e7d4      	b.n	80054ec <arm_biquad_cascade_df2T_f32+0x320>
	...

08005544 <arm_biquad_cascade_df2T_init_f32>:
 8005544:	b510      	push	{r4, lr}
 8005546:	4604      	mov	r4, r0
 8005548:	4608      	mov	r0, r1
 800554a:	2100      	movs	r1, #0
 800554c:	60a2      	str	r2, [r4, #8]
 800554e:	00c2      	lsls	r2, r0, #3
 8005550:	7020      	strb	r0, [r4, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f9b0 	bl	80058b8 <memset>
 8005558:	6060      	str	r0, [r4, #4]
 800555a:	bd10      	pop	{r4, pc}

0800555c <arm_sub_f32>:
 800555c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005560:	b4f0      	push	{r4, r5, r6, r7}
 8005562:	d033      	beq.n	80055cc <arm_sub_f32+0x70>
 8005564:	f100 0610 	add.w	r6, r0, #16
 8005568:	f101 0510 	add.w	r5, r1, #16
 800556c:	f102 0410 	add.w	r4, r2, #16
 8005570:	4667      	mov	r7, ip
 8005572:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005576:	3f01      	subs	r7, #1
 8005578:	ed56 7a04 	vldr	s15, [r6, #-16]
 800557c:	f105 0510 	add.w	r5, r5, #16
 8005580:	f106 0610 	add.w	r6, r6, #16
 8005584:	f104 0410 	add.w	r4, r4, #16
 8005588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800558c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8005590:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8005594:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8005598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800559c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80055a0:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80055a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80055a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055ac:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80055b0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80055b4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80055b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055bc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80055c0:	d1d7      	bne.n	8005572 <arm_sub_f32+0x16>
 80055c2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80055c6:	4420      	add	r0, r4
 80055c8:	4421      	add	r1, r4
 80055ca:	4422      	add	r2, r4
 80055cc:	f013 0303 	ands.w	r3, r3, #3
 80055d0:	d01b      	beq.n	800560a <arm_sub_f32+0xae>
 80055d2:	edd0 7a00 	vldr	s15, [r0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	ed91 7a00 	vldr	s14, [r1]
 80055dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055e0:	edc2 7a00 	vstr	s15, [r2]
 80055e4:	d011      	beq.n	800560a <arm_sub_f32+0xae>
 80055e6:	edd0 7a01 	vldr	s15, [r0, #4]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	ed91 7a01 	vldr	s14, [r1, #4]
 80055f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80055f8:	d007      	beq.n	800560a <arm_sub_f32+0xae>
 80055fa:	edd0 7a02 	vldr	s15, [r0, #8]
 80055fe:	ed91 7a02 	vldr	s14, [r1, #8]
 8005602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005606:	edc2 7a02 	vstr	s15, [r2, #8]
 800560a:	bcf0      	pop	{r4, r5, r6, r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop

08005610 <arm_mult_f32>:
 8005610:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005614:	b4f0      	push	{r4, r5, r6, r7}
 8005616:	d033      	beq.n	8005680 <arm_mult_f32+0x70>
 8005618:	f100 0610 	add.w	r6, r0, #16
 800561c:	f101 0510 	add.w	r5, r1, #16
 8005620:	f102 0410 	add.w	r4, r2, #16
 8005624:	4667      	mov	r7, ip
 8005626:	ed15 7a04 	vldr	s14, [r5, #-16]
 800562a:	3f01      	subs	r7, #1
 800562c:	ed56 7a04 	vldr	s15, [r6, #-16]
 8005630:	f105 0510 	add.w	r5, r5, #16
 8005634:	f106 0610 	add.w	r6, r6, #16
 8005638:	f104 0410 	add.w	r4, r4, #16
 800563c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005640:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8005644:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8005648:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 800564c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005650:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8005654:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005658:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800565c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005660:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8005664:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005668:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800566c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005670:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005674:	d1d7      	bne.n	8005626 <arm_mult_f32+0x16>
 8005676:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800567a:	4420      	add	r0, r4
 800567c:	4421      	add	r1, r4
 800567e:	4422      	add	r2, r4
 8005680:	f013 0303 	ands.w	r3, r3, #3
 8005684:	d01b      	beq.n	80056be <arm_mult_f32+0xae>
 8005686:	edd1 7a00 	vldr	s15, [r1]
 800568a:	3b01      	subs	r3, #1
 800568c:	ed90 7a00 	vldr	s14, [r0]
 8005690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005694:	edc2 7a00 	vstr	s15, [r2]
 8005698:	d011      	beq.n	80056be <arm_mult_f32+0xae>
 800569a:	edd0 7a01 	vldr	s15, [r0, #4]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	ed91 7a01 	vldr	s14, [r1, #4]
 80056a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a8:	edc2 7a01 	vstr	s15, [r2, #4]
 80056ac:	d007      	beq.n	80056be <arm_mult_f32+0xae>
 80056ae:	edd0 7a02 	vldr	s15, [r0, #8]
 80056b2:	ed91 7a02 	vldr	s14, [r1, #8]
 80056b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ba:	edc2 7a02 	vstr	s15, [r2, #8]
 80056be:	bcf0      	pop	{r4, r5, r6, r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <arm_dot_prod_f32>:
 80056c4:	b4f0      	push	{r4, r5, r6, r7}
 80056c6:	0897      	lsrs	r7, r2, #2
 80056c8:	d052      	beq.n	8005770 <arm_dot_prod_f32+0xac>
 80056ca:	f100 0510 	add.w	r5, r0, #16
 80056ce:	f101 0410 	add.w	r4, r1, #16
 80056d2:	463e      	mov	r6, r7
 80056d4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005778 <arm_dot_prod_f32+0xb4>
 80056d8:	ed14 7a04 	vldr	s14, [r4, #-16]
 80056dc:	3e01      	subs	r6, #1
 80056de:	ed15 6a04 	vldr	s12, [r5, #-16]
 80056e2:	f104 0410 	add.w	r4, r4, #16
 80056e6:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 80056ea:	f105 0510 	add.w	r5, r5, #16
 80056ee:	ee26 6a07 	vmul.f32	s12, s12, s14
 80056f2:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 80056f6:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80056fa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80056fe:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8005702:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005706:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800570a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800570e:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8005712:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005716:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800571a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800571e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005722:	d1d9      	bne.n	80056d8 <arm_dot_prod_f32+0x14>
 8005724:	013f      	lsls	r7, r7, #4
 8005726:	4438      	add	r0, r7
 8005728:	4439      	add	r1, r7
 800572a:	f012 0203 	ands.w	r2, r2, #3
 800572e:	d01b      	beq.n	8005768 <arm_dot_prod_f32+0xa4>
 8005730:	ed91 7a00 	vldr	s14, [r1]
 8005734:	3a01      	subs	r2, #1
 8005736:	edd0 6a00 	vldr	s13, [r0]
 800573a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800573e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005742:	d011      	beq.n	8005768 <arm_dot_prod_f32+0xa4>
 8005744:	ed91 7a01 	vldr	s14, [r1, #4]
 8005748:	2a01      	cmp	r2, #1
 800574a:	edd0 6a01 	vldr	s13, [r0, #4]
 800574e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005756:	d007      	beq.n	8005768 <arm_dot_prod_f32+0xa4>
 8005758:	ed90 7a02 	vldr	s14, [r0, #8]
 800575c:	edd1 6a02 	vldr	s13, [r1, #8]
 8005760:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005768:	edc3 7a00 	vstr	s15, [r3]
 800576c:	bcf0      	pop	{r4, r5, r6, r7}
 800576e:	4770      	bx	lr
 8005770:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005778 <arm_dot_prod_f32+0xb4>
 8005774:	e7d9      	b.n	800572a <arm_dot_prod_f32+0x66>
 8005776:	bf00      	nop
 8005778:	00000000 	.word	0x00000000

0800577c <arm_add_f32>:
 800577c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005780:	b4f0      	push	{r4, r5, r6, r7}
 8005782:	d033      	beq.n	80057ec <arm_add_f32+0x70>
 8005784:	f100 0610 	add.w	r6, r0, #16
 8005788:	f101 0510 	add.w	r5, r1, #16
 800578c:	f102 0410 	add.w	r4, r2, #16
 8005790:	4667      	mov	r7, ip
 8005792:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005796:	3f01      	subs	r7, #1
 8005798:	ed56 7a04 	vldr	s15, [r6, #-16]
 800579c:	f105 0510 	add.w	r5, r5, #16
 80057a0:	f106 0610 	add.w	r6, r6, #16
 80057a4:	f104 0410 	add.w	r4, r4, #16
 80057a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ac:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80057b0:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80057b4:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80057b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057bc:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80057c0:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80057c4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80057c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057cc:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80057d0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80057d4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80057d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057dc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80057e0:	d1d7      	bne.n	8005792 <arm_add_f32+0x16>
 80057e2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80057e6:	4420      	add	r0, r4
 80057e8:	4421      	add	r1, r4
 80057ea:	4422      	add	r2, r4
 80057ec:	f013 0303 	ands.w	r3, r3, #3
 80057f0:	d01b      	beq.n	800582a <arm_add_f32+0xae>
 80057f2:	edd1 7a00 	vldr	s15, [r1]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	ed90 7a00 	vldr	s14, [r0]
 80057fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005800:	edc2 7a00 	vstr	s15, [r2]
 8005804:	d011      	beq.n	800582a <arm_add_f32+0xae>
 8005806:	edd0 7a01 	vldr	s15, [r0, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	ed91 7a01 	vldr	s14, [r1, #4]
 8005810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005814:	edc2 7a01 	vstr	s15, [r2, #4]
 8005818:	d007      	beq.n	800582a <arm_add_f32+0xae>
 800581a:	edd0 7a02 	vldr	s15, [r0, #8]
 800581e:	ed91 7a02 	vldr	s14, [r1, #8]
 8005822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005826:	edc2 7a02 	vstr	s15, [r2, #8]
 800582a:	bcf0      	pop	{r4, r5, r6, r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <arm_abs_f32>:
 8005830:	b470      	push	{r4, r5, r6}
 8005832:	0896      	lsrs	r6, r2, #2
 8005834:	d025      	beq.n	8005882 <arm_abs_f32+0x52>
 8005836:	f100 0410 	add.w	r4, r0, #16
 800583a:	f101 0310 	add.w	r3, r1, #16
 800583e:	4635      	mov	r5, r6
 8005840:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005844:	3d01      	subs	r5, #1
 8005846:	f104 0410 	add.w	r4, r4, #16
 800584a:	f103 0310 	add.w	r3, r3, #16
 800584e:	eef0 7ae7 	vabs.f32	s15, s15
 8005852:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8005856:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800585a:	eef0 7ae7 	vabs.f32	s15, s15
 800585e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8005862:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005866:	eef0 7ae7 	vabs.f32	s15, s15
 800586a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800586e:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8005872:	eef0 7ae7 	vabs.f32	s15, s15
 8005876:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800587a:	d1e1      	bne.n	8005840 <arm_abs_f32+0x10>
 800587c:	0136      	lsls	r6, r6, #4
 800587e:	4430      	add	r0, r6
 8005880:	4431      	add	r1, r6
 8005882:	f012 0203 	ands.w	r2, r2, #3
 8005886:	d015      	beq.n	80058b4 <arm_abs_f32+0x84>
 8005888:	edd0 7a00 	vldr	s15, [r0]
 800588c:	3a01      	subs	r2, #1
 800588e:	eef0 7ae7 	vabs.f32	s15, s15
 8005892:	edc1 7a00 	vstr	s15, [r1]
 8005896:	d00d      	beq.n	80058b4 <arm_abs_f32+0x84>
 8005898:	edd0 7a01 	vldr	s15, [r0, #4]
 800589c:	2a01      	cmp	r2, #1
 800589e:	eef0 7ae7 	vabs.f32	s15, s15
 80058a2:	edc1 7a01 	vstr	s15, [r1, #4]
 80058a6:	d005      	beq.n	80058b4 <arm_abs_f32+0x84>
 80058a8:	edd0 7a02 	vldr	s15, [r0, #8]
 80058ac:	eef0 7ae7 	vabs.f32	s15, s15
 80058b0:	edc1 7a02 	vstr	s15, [r1, #8]
 80058b4:	bc70      	pop	{r4, r5, r6}
 80058b6:	4770      	bx	lr

080058b8 <memset>:
 80058b8:	4402      	add	r2, r0
 80058ba:	4603      	mov	r3, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	; (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	; (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	; (800590c <__libc_init_array+0x44>)
 80058dc:	f000 f818 	bl	8005910 <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08005940 	.word	0x08005940
 8005904:	08005940 	.word	0x08005940
 8005908:	08005940 	.word	0x08005940
 800590c:	08005944 	.word	0x08005944

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
