
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080051a0  080051a0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051a0  080051a0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  080051a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  24000024  080051cc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003f4  080051cc  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bb4  00000000  00000000  0002010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d86  00000000  00000000  00033cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000060ad  00000000  00000000  00036a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a58  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c77  00000000  00000000  0003d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ed1c  00000000  00000000  0003e1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000153cb  00000000  00000000  0007cee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195ee3  00000000  00000000  000922ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e58  00000000  00000000  00228194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  00229fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000000bf  00000000  00000000  0022a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000010  00000000  00000000  0022a13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005170 	.word	0x08005170

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08005170 	.word	0x08005170

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCFGR = 0x01FF0000;
 8000338:	481a      	ldr	r0, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800033a:	4c1b      	ldr	r4, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000346:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000364:	4911      	ldr	r1, [pc, #68]	; (80003ac <SystemInit+0xd4>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8000366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <SystemInit+0xd8>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800036c:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	680a      	ldr	r2, [r1, #0]
 8000372:	4013      	ands	r3, r2
 8000374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000378:	d203      	bcs.n	8000382 <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <SystemInit+0xdc>)
 800037c:	2201      	movs	r2, #1
 800037e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SystemInit+0xe0>)
 8000384:	f243 02d2 	movw	r2, #12498	; 0x30d2
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000388:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	02020200 	.word	0x02020200
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <ad1939_init>:

	 return 0;
}

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TXdata[2] = data;
 80003c0:	2399      	movs	r3, #153	; 0x99
	TXdata[0] = AD1939_Global_Address_Write;
 80003c2:	4cb9      	ldr	r4, [pc, #740]	; (80006a8 <ad1939_init+0x2ec>)
    AD1939_spi = hspi_codec;
 80003c4:	4db9      	ldr	r5, [pc, #740]	; (80006ac <ad1939_init+0x2f0>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003c6:	f04f 0808 	mov.w	r8, #8
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ca:	b082      	sub	sp, #8
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    AD1939_spi = hspi_codec;
 80003d6:	6028      	str	r0, [r5, #0]
	TXdata[2] = data;
 80003d8:	70a3      	strb	r3, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003da:	48b5      	ldr	r0, [pc, #724]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003dc:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003e0:	f002 f932 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003e4:	4ab3      	ldr	r2, [pc, #716]	; (80006b4 <ad1939_init+0x2f8>)
 80003e6:	4621      	mov	r1, r4
 80003e8:	2303      	movs	r3, #3
 80003ea:	6828      	ldr	r0, [r5, #0]
 80003ec:	9600      	str	r6, [sp, #0]
 80003ee:	f004 fd33 	bl	8004e58 <HAL_SPI_TransmitReceive>
 80003f2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	48ad      	ldr	r0, [pc, #692]	; (80006b0 <ad1939_init+0x2f4>)
 80003fc:	f002 f924 	bl	8002648 <HAL_GPIO_WritePin>
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 8000400:	2f00      	cmp	r7, #0
 8000402:	f040 814b 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000406:	23be      	movs	r3, #190	; 0xbe
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000408:	463a      	mov	r2, r7
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	48a8      	ldr	r0, [pc, #672]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000410:	70a3      	strb	r3, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000412:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000416:	f002 f917 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800041a:	4aa6      	ldr	r2, [pc, #664]	; (80006b4 <ad1939_init+0x2f8>)
 800041c:	4621      	mov	r1, r4
 800041e:	2303      	movs	r3, #3
 8000420:	6828      	ldr	r0, [r5, #0]
 8000422:	9600      	str	r6, [sp, #0]
 8000424:	f004 fd18 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000428:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	489f      	ldr	r0, [pc, #636]	; (80006b0 <ad1939_init+0x2f4>)
 8000432:	f002 f909 	bl	8002648 <HAL_GPIO_WritePin>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 8000436:	2f00      	cmp	r7, #0
 8000438:	f040 8130 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800043c:	f44f 7384 	mov.w	r3, #264	; 0x108
	TXdata[2] = data;
 8000440:	f04f 0804 	mov.w	r8, #4
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000444:	463a      	mov	r2, r7
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4899      	ldr	r0, [pc, #612]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 800044c:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800044e:	f884 8002 	strb.w	r8, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000452:	f002 f8f9 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000456:	4a97      	ldr	r2, [pc, #604]	; (80006b4 <ad1939_init+0x2f8>)
 8000458:	4621      	mov	r1, r4
 800045a:	2303      	movs	r3, #3
 800045c:	6828      	ldr	r0, [r5, #0]
 800045e:	9600      	str	r6, [sp, #0]
 8000460:	f004 fcfa 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000464:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4890      	ldr	r0, [pc, #576]	; (80006b0 <ad1939_init+0x2f4>)
 800046e:	f002 f8eb 	bl	8002648 <HAL_GPIO_WritePin>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2f00      	cmp	r7, #0
 8000474:	f040 8112 	bne.w	800069c <ad1939_init+0x2e0>





    HAL_Delay(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f000 fec1 	bl	8001200 <HAL_Delay>
	TXdata[0] = AD1939_Global_Address_Read;
 800047e:	f240 1309 	movw	r3, #265	; 0x109
	HAL_Delay(10);
 8000482:	200a      	movs	r0, #10
	TXdata[2] = 0b00000100;
 8000484:	f884 8002 	strb.w	r8, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Read;
 8000488:	8023      	strh	r3, [r4, #0]
	HAL_Delay(10);
 800048a:	f000 feb9 	bl	8001200 <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800048e:	463a      	mov	r2, r7
 8000490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000494:	4886      	ldr	r0, [pc, #536]	; (80006b0 <ad1939_init+0x2f4>)
 8000496:	f002 f8d7 	bl	8002648 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800049a:	2303      	movs	r3, #3
 800049c:	4a85      	ldr	r2, [pc, #532]	; (80006b4 <ad1939_init+0x2f8>)
 800049e:	4621      	mov	r1, r4
 80004a0:	6828      	ldr	r0, [r5, #0]
 80004a2:	9600      	str	r6, [sp, #0]
 80004a4:	f004 fcd8 	bl	8004e58 <HAL_SPI_TransmitReceive>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4880      	ldr	r0, [pc, #512]	; (80006b0 <ad1939_init+0x2f4>)
 80004b0:	f002 f8ca 	bl	8002648 <HAL_GPIO_WritePin>
	TXdata[0] = AD1939_Global_Address_Write;
 80004b4:	f44f 7302 	mov.w	r3, #520	; 0x208
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004b8:	463a      	mov	r2, r7
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	487c      	ldr	r0, [pc, #496]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004c0:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004c2:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004c4:	f002 f8c0 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004c8:	4a7a      	ldr	r2, [pc, #488]	; (80006b4 <ad1939_init+0x2f8>)
 80004ca:	4621      	mov	r1, r4
 80004cc:	2303      	movs	r3, #3
 80004ce:	6828      	ldr	r0, [r5, #0]
 80004d0:	9600      	str	r6, [sp, #0]
 80004d2:	f004 fcc1 	bl	8004e58 <HAL_SPI_TransmitReceive>
 80004d6:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4874      	ldr	r0, [pc, #464]	; (80006b0 <ad1939_init+0x2f4>)
 80004e0:	f002 f8b2 	bl	8002648 <HAL_GPIO_WritePin>

    if(ad1939_pll_locked()){
    	// wait till pll is locked takes about 10 ms acc to datasheet
    }
    // DAC settings
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0x00)) return -1;
 80004e4:	2f00      	cmp	r7, #0
 80004e6:	f040 80d9 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80004ea:	f44f 7342 	mov.w	r3, #776	; 0x308
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004ee:	463a      	mov	r2, r7
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	486e      	ldr	r0, [pc, #440]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004f6:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004f8:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004fa:	f002 f8a5 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004fe:	4a6d      	ldr	r2, [pc, #436]	; (80006b4 <ad1939_init+0x2f8>)
 8000500:	4621      	mov	r1, r4
 8000502:	2303      	movs	r3, #3
 8000504:	6828      	ldr	r0, [r5, #0]
 8000506:	9600      	str	r6, [sp, #0]
 8000508:	f004 fca6 	bl	8004e58 <HAL_SPI_TransmitReceive>
 800050c:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4866      	ldr	r0, [pc, #408]	; (80006b0 <ad1939_init+0x2f4>)
 8000516:	f002 f897 	bl	8002648 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800051a:	2f00      	cmp	r7, #0
 800051c:	f040 80be 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000520:	f44f 6381 	mov.w	r3, #1032	; 0x408
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000524:	463a      	mov	r2, r7
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4861      	ldr	r0, [pc, #388]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 800052c:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800052e:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000530:	f002 f88a 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000534:	4a5f      	ldr	r2, [pc, #380]	; (80006b4 <ad1939_init+0x2f8>)
 8000536:	4621      	mov	r1, r4
 8000538:	2303      	movs	r3, #3
 800053a:	6828      	ldr	r0, [r5, #0]
 800053c:	9600      	str	r6, [sp, #0]
 800053e:	f004 fc8b 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000542:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4859      	ldr	r0, [pc, #356]	; (80006b0 <ad1939_init+0x2f4>)
 800054c:	f002 f87c 	bl	8002648 <HAL_GPIO_WritePin>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000550:	2f00      	cmp	r7, #0
 8000552:	f040 80a3 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000556:	f44f 63a1 	mov.w	r3, #1288	; 0x508
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800055a:	463a      	mov	r2, r7
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4853      	ldr	r0, [pc, #332]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000562:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000564:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000566:	f002 f86f 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800056a:	4a52      	ldr	r2, [pc, #328]	; (80006b4 <ad1939_init+0x2f8>)
 800056c:	4621      	mov	r1, r4
 800056e:	2303      	movs	r3, #3
 8000570:	6828      	ldr	r0, [r5, #0]
 8000572:	9600      	str	r6, [sp, #0]
 8000574:	f004 fc70 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000578:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	484b      	ldr	r0, [pc, #300]	; (80006b0 <ad1939_init+0x2f4>)
 8000582:	f002 f861 	bl	8002648 <HAL_GPIO_WritePin>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000586:	2f00      	cmp	r7, #0
 8000588:	f040 8088 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800058c:	f640 0308 	movw	r3, #2056	; 0x808
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000590:	463a      	mov	r2, r7
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4846      	ldr	r0, [pc, #280]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000598:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800059a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800059c:	f002 f854 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005a0:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <ad1939_init+0x2f8>)
 80005a2:	4621      	mov	r1, r4
 80005a4:	2303      	movs	r3, #3
 80005a6:	6828      	ldr	r0, [r5, #0]
 80005a8:	9600      	str	r6, [sp, #0]
 80005aa:	f004 fc55 	bl	8004e58 <HAL_SPI_TransmitReceive>
 80005ae:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	483e      	ldr	r0, [pc, #248]	; (80006b0 <ad1939_init+0x2f4>)
 80005b8:	f002 f846 	bl	8002648 <HAL_GPIO_WritePin>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d16d      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005c0:	f640 1308 	movw	r3, #2312	; 0x908
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005c4:	463a      	mov	r2, r7
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4839      	ldr	r0, [pc, #228]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80005cc:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80005ce:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005d0:	f002 f83a 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <ad1939_init+0x2f8>)
 80005d6:	4621      	mov	r1, r4
 80005d8:	2303      	movs	r3, #3
 80005da:	6828      	ldr	r0, [r5, #0]
 80005dc:	9600      	str	r6, [sp, #0]
 80005de:	f004 fc3b 	bl	8004e58 <HAL_SPI_TransmitReceive>
 80005e2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4831      	ldr	r0, [pc, #196]	; (80006b0 <ad1939_init+0x2f4>)
 80005ec:	f002 f82c 	bl	8002648 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d153      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005f4:	f640 6308 	movw	r3, #3592	; 0xe08
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005f8:	463a      	mov	r2, r7
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000600:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 8000602:	70a7      	strb	r7, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000604:	f002 f820 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <ad1939_init+0x2f8>)
 800060a:	4621      	mov	r1, r4
 800060c:	9600      	str	r6, [sp, #0]
 800060e:	2303      	movs	r3, #3
 8000610:	6828      	ldr	r0, [r5, #0]
 8000612:	f004 fc21 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000616:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4824      	ldr	r0, [pc, #144]	; (80006b0 <ad1939_init+0x2f4>)
 8000620:	f002 f812 	bl	8002648 <HAL_GPIO_WritePin>

    // ADC settings
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000624:	2e00      	cmp	r6, #0
 8000626:	d139      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000628:	2200      	movs	r2, #0
	TXdata[0] = AD1939_Global_Address_Write;
 800062a:	f640 7308 	movw	r3, #3848	; 0xf08
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800062e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000638:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800063a:	70a2      	strb	r2, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800063c:	f002 f804 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <ad1939_init+0x2f8>)
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <ad1939_init+0x2ec>)
 8000644:	2303      	movs	r3, #3
 8000646:	6828      	ldr	r0, [r5, #0]
 8000648:	9700      	str	r7, [sp, #0]
 800064a:	f004 fc05 	bl	8004e58 <HAL_SPI_TransmitReceive>
 800064e:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <ad1939_init+0x2f4>)
 8000658:	f001 fff6 	bl	8002648 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 800065c:	b9f6      	cbnz	r6, 800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800065e:	f241 0308 	movw	r3, #4104	; 0x1008
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000662:	4632      	mov	r2, r6
	TXdata[2] = data;
 8000664:	70a6      	strb	r6, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	TXdata[0] = AD1939_Global_Address_Write;
 800066a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <ad1939_init+0x2f4>)
 800066e:	f001 ffeb 	bl	8002648 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000672:	2303      	movs	r3, #3
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <ad1939_init+0x2f8>)
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <ad1939_init+0x2ec>)
 8000678:	6828      	ldr	r0, [r5, #0]
 800067a:	9700      	str	r7, [sp, #0]
 800067c:	f004 fbec 	bl	8004e58 <HAL_SPI_TransmitReceive>
 8000680:	4604      	mov	r4, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <ad1939_init+0x2f4>)
 800068a:	f001 ffdd 	bl	8002648 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800068e:	1e20      	subs	r0, r4, #0
 8000690:	bf18      	it	ne
 8000692:	2001      	movne	r0, #1
 8000694:	4240      	negs	r0, r0



    return 0; // Return 0 if all writes are successful
}
 8000696:	b002      	add	sp, #8
 8000698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006a0:	b002      	add	sp, #8
 80006a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a6:	bf00      	nop
 80006a8:	24000048 	.word	0x24000048
 80006ac:	24000040 	.word	0x24000040
 80006b0:	58021400 	.word	0x58021400
 80006b4:	24000044 	.word	0x24000044

080006b8 <callback>:
 * FUNC:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80006b8:	b500      	push	{lr}
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006ba:	f500 3e38 	add.w	lr, r0, #188416	; 0x2e000

	self->input_i32 = input_signal_i32;
 80006be:	6001      	str	r1, [r0, #0]
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80006c0:	4684      	mov	ip, r0
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 80006c2:	f64b 307f 	movw	r0, #47999	; 0xbb7f
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006c6:	f8de 2e08 	ldr.w	r2, [lr, #3592]	; 0xe08
	// delay effect
	int32_t delayed_sample_i32 = get_delayed_signal(self);

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006ca:	ee07 1a90 	vmov	s15, r1
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006ce:	f8de 3e14 	ldr.w	r3, [lr, #3604]	; 0xe14
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006d2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80006d6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80006da:	1c91      	adds	r1, r2, #2
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006dc:	4413      	add	r3, r2
	self->current_counter_u32++;
 80006de:	3201      	adds	r2, #1
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 80006e0:	4283      	cmp	r3, r0
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006e2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 80006e6:	bf88      	it	hi
 80006e8:	1a1b      	subhi	r3, r3, r0

	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 80006ea:	f60e 6018 	addw	r0, lr, #3608	; 0xe18
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 80006ee:	f8ce 3e0c 	str.w	r3, [lr, #3596]	; 0xe0c
	return self->buffer_ai32[self->delayed_counter_u32];
 80006f2:	3302      	adds	r3, #2
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80006f4:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80006f8:	ed93 7a00 	vldr	s14, [r3]
 80006fc:	f50e 6362 	add.w	r3, lr, #3616	; 0xe20
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000708:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 800070c:	ee67 4a27 	vmul.f32	s9, s14, s15
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000710:	ee33 6b46 	vsub.f64	d6, d3, d6
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000714:	eefc 4ae4 	vcvt.u32.f32	s9, s9
													(uint32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000718:	ee26 6b05 	vmul.f64	d6, d6, d5
 800071c:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 8000720:	ee17 3a90 	vmov	r3, s15
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000724:	edd0 7a00 	vldr	s15, [r0]
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000728:	ee14 0a90 	vmov	r0, s9
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 800072c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000730:	ee27 7a27 	vmul.f32	s14, s14, s15
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000734:	4403      	add	r3, r0
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000736:	ee33 3b46 	vsub.f64	d3, d3, d6
	self->buffer_ai32[self->current_counter_u32] = 	(uint32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 800073a:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800073e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000742:	f64b 337f 	movw	r3, #47999	; 0xbb7f
		self->current_counter_u32 = 0;
 8000746:	429a      	cmp	r2, r3
 8000748:	bf88      	it	hi
 800074a:	2200      	movhi	r2, #0
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800074c:	eea5 7b03 	vfma.f64	d7, d5, d3
 8000750:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000754:	edcc 7a01 	vstr	s15, [ip, #4]
 8000758:	ee17 0a90 	vmov	r0, s15
 800075c:	f8ce 2e08 	str.w	r2, [lr, #3592]	; 0xe08

	increment_current_sample_counter(self);

	return self->output_i32;
}
 8000760:	f85d fb04 	ldr.w	pc, [sp], #4

08000764 <init_guitar_effect_delay>:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 	= 24000;	// 0.5 second delay
 8000764:	f500 3038 	add.w	r0, r0, #188416	; 0x2e000
 8000768:	f645 51c0 	movw	r1, #24000	; 0x5dc0
	self->parameters_st.mix_f32				= 0.5; 		// 50%
 800076c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	self->parameters_st.feedback_gain_f32	= 0.5; 		// 50%
	// add function pointers
	self->callback = callback;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <init_guitar_effect_delay+0x28>)
	self->parameters_st.time_in_buffer_u32 	= 24000;	// 0.5 second delay
 8000772:	f8c0 1e14 	str.w	r1, [r0, #3604]	; 0xe14
	self->parameters_st.mix_f32				= 0.5; 		// 50%
 8000776:	f600 6c18 	addw	ip, r0, #3608	; 0xe18
	self->parameters_st.feedback_gain_f32	= 0.5; 		// 50%
 800077a:	f500 6162 	add.w	r1, r0, #3616	; 0xe20
	self->parameters_st.mix_f32				= 0.5; 		// 50%
 800077e:	f8cc 3000 	str.w	r3, [ip]
	self->parameters_st.feedback_gain_f32	= 0.5; 		// 50%
 8000782:	600b      	str	r3, [r1, #0]
	self->callback = callback;
 8000784:	f8c0 2e24 	str.w	r2, [r0, #3620]	; 0xe24
}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	080006b9 	.word	0x080006b9

08000790 <HAL_I2S_RxHalfCpltCallback>:
volatile int32_t output_test_ac;
volatile adc_data_bitfield adc_data_bf;
volatile adc_data_bitfield output_buffer;
volatile uint8_t ADC_READY_FLAG = 0;
volatile uint8_t DAC_HALF_COMPLETE_FLAG = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000790:	b410      	push	{r4}
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000792:	4c10      	ldr	r4, [pc, #64]	; (80007d4 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000794:	f004 021f 	and.w	r2, r4, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000798:	f3bf 8f4f 	dsb	sy
 800079c:	f104 0110 	add.w	r1, r4, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007a0:	4623      	mov	r3, r4
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <HAL_I2S_RxHalfCpltCallback+0x48>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80007a4:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007a6:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007aa:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80007ac:	1aca      	subs	r2, r1, r3
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	dcf9      	bgt.n	80007a6 <HAL_I2S_RxHalfCpltCallback+0x16>
 80007b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007b6:	f3bf 8f6f 	isb	sy
//	SCB_InvalidateDCache();
	SCB_InvalidateDCache_by_Addr(rx_data_i2s, sizeof(rx_data_i2s));
	ADC_READY_FLAG = 1;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_I2S_RxHalfCpltCallback+0x4c>)
 80007bc:	2101      	movs	r1, #1
//	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_I2S_RxHalfCpltCallback+0x50>)
	ADC_READY_FLAG = 1;
 80007c0:	7019      	strb	r1, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 80007c2:	8823      	ldrh	r3, [r4, #0]
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 80007c8:	8863      	ldrh	r3, [r4, #2]
}
 80007ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	8053      	strh	r3, [r2, #2]
}
 80007d2:	4770      	bx	lr
 80007d4:	24000304 	.word	0x24000304
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	2400004b 	.word	0x2400004b
 80007e0:	24000050 	.word	0x24000050

080007e4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 80007e4:	b410      	push	{r4}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007e6:	4c10      	ldr	r4, [pc, #64]	; (8000828 <HAL_I2S_RxCpltCallback+0x44>)
 80007e8:	f004 021f 	and.w	r2, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f104 0110 	add.w	r1, r4, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007f4:	4623      	mov	r3, r4
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <HAL_I2S_RxCpltCallback+0x48>)
      } while ( op_size > 0 );
 80007f8:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007fa:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007fe:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	2a00      	cmp	r2, #0
 8000804:	dcf9      	bgt.n	80007fa <HAL_I2S_RxCpltCallback+0x16>
 8000806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800080a:	f3bf 8f6f 	isb	sy
	SCB_InvalidateDCache_by_Addr(rx_data_i2s, sizeof(rx_data_i2s));
//	SCB_InvalidateDCache();
	ADC_READY_FLAG = 1;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_I2S_RxCpltCallback+0x4c>)
 8000810:	2101      	movs	r1, #1
	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_I2S_RxCpltCallback+0x50>)
	ADC_READY_FLAG = 1;
 8000814:	7019      	strb	r1, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000816:	8923      	ldrh	r3, [r4, #8]
 8000818:	b21b      	sxth	r3, r3
 800081a:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 800081c:	8963      	ldrh	r3, [r4, #10]
}
 800081e:	f85d 4b04 	ldr.w	r4, [sp], #4
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000822:	b21b      	sxth	r3, r3
 8000824:	8053      	strh	r3, [r2, #2]
}
 8000826:	4770      	bx	lr
 8000828:	24000304 	.word	0x24000304
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	2400004b 	.word	0x2400004b
 8000834:	24000050 	.word	0x24000050

08000838 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
	DAC_HALF_COMPLETE_FLAG = 1;
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_I2S_TxHalfCpltCallback+0x30>)
 800083a:	2101      	movs	r1, #1
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_I2S_TxHalfCpltCallback+0x34>)
 800083e:	7011      	strb	r1, [r2, #0]
 8000840:	f003 021f 	and.w	r2, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
 8000844:	f3bf 8f4f 	dsb	sy
 8000848:	f103 0110 	add.w	r1, r3, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <HAL_I2S_TxHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800084e:	4411      	add	r1, r2
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000850:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000854:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000856:	1aca      	subs	r2, r1, r3
 8000858:	2a00      	cmp	r2, #0
 800085a:	dcf9      	bgt.n	8000850 <HAL_I2S_TxHalfCpltCallback+0x18>
 800085c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
//	int32_t out2 = output_buffer.raw_low;
//	int32_t out3 = output_buffer.raw_high;
	SCB_CleanDCache_by_Addr(my_data, sizeof(my_data));
//	my_data[2] = out2;
//	my_data[3] = out3;
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400004c 	.word	0x2400004c
 800086c:	240002f0 	.word	0x240002f0
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s){
	DAC_HALF_COMPLETE_FLAG = 0;
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <HAL_I2S_TxCpltCallback+0x30>)
 8000876:	2100      	movs	r1, #0
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_I2S_TxCpltCallback+0x34>)
 800087a:	7011      	strb	r1, [r2, #0]
 800087c:	f003 021f 	and.w	r2, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f103 0110 	add.w	r1, r3, #16
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <HAL_I2S_TxCpltCallback+0x38>)
      } while ( op_size > 0 );
 800088a:	4411      	add	r1, r2
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800088c:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000890:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000892:	1aca      	subs	r2, r1, r3
 8000894:	2a00      	cmp	r2, #0
 8000896:	dcf9      	bgt.n	800088c <HAL_I2S_TxCpltCallback+0x18>
 8000898:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800089c:	f3bf 8f6f 	isb	sy
//	int32_t out2 = output_buffer.raw_low;
//	int32_t out3 = output_buffer.raw_high;
	SCB_CleanDCache_by_Addr(my_data, sizeof(my_data));
//	my_data[6] = out2;
//	my_data[7] = out3;
}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2400004c 	.word	0x2400004c
 80008a8:	240002f0 	.word	0x240002f0
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b510      	push	{r4, lr}
 80008b2:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b4:	224c      	movs	r2, #76	; 0x4c
 80008b6:	2100      	movs	r1, #0
 80008b8:	a80c      	add	r0, sp, #48	; 0x30
 80008ba:	f004 fc2d 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	a804      	add	r0, sp, #16
 80008c4:	f004 fc28 	bl	8005118 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f002 f8a1 	bl	8002a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <SystemClock_Config+0x100>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <SystemClock_Config+0x104>)
 80008d4:	9101      	str	r1, [sp, #4]
 80008d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008d8:	f021 0101 	bic.w	r1, r1, #1
 80008dc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	6993      	ldr	r3, [r2, #24]
 80008e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	6993      	ldr	r3, [r2, #24]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f8:	6993      	ldr	r3, [r2, #24]
 80008fa:	0499      	lsls	r1, r3, #18
 80008fc:	d5fc      	bpl.n	80008f8 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <SystemClock_Config+0x108>)
 8000900:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8000904:	f041 0102 	orr.w	r1, r1, #2
 8000908:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800090c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	9302      	str	r3, [sp, #8]
 8000918:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800091a:	9103      	str	r1, [sp, #12]
 800091c:	6991      	ldr	r1, [r2, #24]
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <SystemClock_Config+0x100>)
 8000920:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000924:	6191      	str	r1, [r2, #24]
 8000926:	6992      	ldr	r2, [r2, #24]
 8000928:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800092c:	9203      	str	r2, [sp, #12]
 800092e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000930:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000932:	f041 0101 	orr.w	r1, r1, #1
 8000936:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	9303      	str	r3, [sp, #12]
 8000940:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000942:	6993      	ldr	r3, [r2, #24]
 8000944:	049b      	lsls	r3, r3, #18
 8000946:	d5fc      	bpl.n	8000942 <SystemClock_Config+0x92>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000948:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLN = 192;
 800094a:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800094e:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000952:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80009a8 <SystemClock_Config+0xf8>
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000956:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800095a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000960:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000964:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096c:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f002 f910 	bl	8002b94 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	b108      	cbz	r0, 800097c <SystemClock_Config+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097a:	e7fe      	b.n	800097a <SystemClock_Config+0xca>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	213f      	movs	r1, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097e:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000982:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2103      	movs	r1, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098a:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800098c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000990:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000992:	e9cd 4207 	strd	r4, r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000996:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800099a:	f002 fc91 	bl	80032c0 <HAL_RCC_ClockConfig>
 800099e:	b108      	cbz	r0, 80009a4 <SystemClock_Config+0xf4>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <SystemClock_Config+0xf2>
}
 80009a4:	b020      	add	sp, #128	; 0x80
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	00000001 	.word	0x00000001
 80009ac:	00010000 	.word	0x00010000
 80009b0:	58000400 	.word	0x58000400
 80009b4:	58024800 	.word	0x58024800
 80009b8:	58024400 	.word	0x58024400

080009bc <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009bc:	4a9e      	ldr	r2, [pc, #632]	; (8000c38 <main+0x27c>)
 80009be:	6953      	ldr	r3, [r2, #20]
{
 80009c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80009c8:	f5ad 3d3b 	sub.w	sp, sp, #191488	; 0x2ec00
 80009cc:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80009d0:	d111      	bne.n	80009f6 <main+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 80009d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009d6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009da:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009e2:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e6:	6953      	ldr	r3, [r2, #20]
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009f2:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009f6:	4890      	ldr	r0, [pc, #576]	; (8000c38 <main+0x27c>)
 80009f8:	6943      	ldr	r3, [r0, #20]
 80009fa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80009fe:	d124      	bne.n	8000a4a <main+0x8e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a04:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000a08:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a0c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a10:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a14:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000a18:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1a:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a1e:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a20:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8000a24:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a26:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	d1f8      	bne.n	8000a20 <main+0x64>
    } while(sets-- != 0U);
 8000a2e:	3c20      	subs	r4, #32
 8000a30:	f114 0f20 	cmn.w	r4, #32
 8000a34:	d1f1      	bne.n	8000a1a <main+0x5e>
 8000a36:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a3a:	6943      	ldr	r3, [r0, #20]
 8000a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a40:	6143      	str	r3, [r0, #20]
 8000a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a46:	f3bf 8f6f 	isb	sy
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4c7c      	ldr	r4, [pc, #496]	; (8000c3c <main+0x280>)
  HAL_Init();
 8000a4c:	f000 fb96 	bl	800117c <HAL_Init>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a50:	466a      	mov	r2, sp
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	2500      	movs	r5, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000a58:	f44f 7880 	mov.w	r8, #256	; 0x100
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a5c:	f64b 3780 	movw	r7, #48000	; 0xbb80
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000a60:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000a6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	6813      	ldr	r3, [r2, #0]
  SystemClock_Config();
 8000a78:	f7ff ff1a 	bl	80008b0 <SystemClock_Config>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 8000a80:	a901      	add	r1, sp, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000a84:	486e      	ldr	r0, [pc, #440]	; (8000c40 <main+0x284>)
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a8a:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8000a8e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	609d      	str	r5, [r3, #8]
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000a94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	e9c3 5500 	strd	r5, r5, [r3]
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9c:	600a      	str	r2, [r1, #0]
 8000a9e:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa0:	aa04      	add	r2, sp, #16
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	e9c3 5503 	strd	r5, r5, [r3, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ab4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	aa05      	add	r2, sp, #20
 8000ac2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ace:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	aa06      	add	r2, sp, #24
 8000adc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ae8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	aa07      	add	r2, sp, #28
 8000af6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b02:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	aa08      	add	r2, sp, #32
 8000b10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000b36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	680b      	ldr	r3, [r1, #0]
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	f001 fd7f 	bl	8002648 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	2301      	movs	r3, #1
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000b50:	a90a      	add	r1, sp, #40	; 0x28
 8000b52:	483b      	ldr	r0, [pc, #236]	; (8000c40 <main+0x284>)
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000b54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f001 fc40 	bl	80023e4 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b64:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000b68:	aa02      	add	r2, sp, #8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b6a:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b70:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b72:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000b76:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	aa03      	add	r2, sp, #12
 8000b84:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000b90:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b9c:	462a      	mov	r2, r5
 8000b9e:	f000 fb59 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba2:	200b      	movs	r0, #11
 8000ba4:	f000 fb94 	bl	80012d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ba8:	462a      	mov	r2, r5
 8000baa:	4629      	mov	r1, r5
 8000bac:	2039      	movs	r0, #57	; 0x39
 8000bae:	f000 fb51 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb2:	2039      	movs	r0, #57	; 0x39
 8000bb4:	f000 fb8c 	bl	80012d0 <HAL_NVIC_EnableIRQ>
  hi2s2.Instance = SPI2;
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <main+0x288>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bba:	2304      	movs	r3, #4
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000bbc:	6246      	str	r6, [r0, #36]	; 0x24
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bbe:	e9c0 5802 	strd	r5, r8, [r0, #8]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bc2:	e9c0 5704 	strd	r5, r7, [r0, #16]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bc6:	e9c0 5506 	strd	r5, r5, [r0, #24]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bca:	4d1f      	ldr	r5, [pc, #124]	; (8000c48 <main+0x28c>)
 8000bcc:	e9c0 5300 	strd	r5, r3, [r0]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	6203      	str	r3, [r0, #32]
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000bd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000bda:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bdc:	f001 fd7a 	bl	80026d4 <HAL_I2S_Init>
 8000be0:	b108      	cbz	r0, 8000be6 <main+0x22a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000be2:	b672      	cpsid	i
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <main+0x228>
  hspi3.Instance = SPI3;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <main+0x290>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000be8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bec:	4918      	ldr	r1, [pc, #96]	; (8000c50 <main+0x294>)
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bee:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf2:	6098      	str	r0, [r3, #8]
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bf4:	6598      	str	r0, [r3, #88]	; 0x58
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	e9c3 1200 	strd	r1, r2, [r3]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c02:	e9c3 4206 	strd	r4, r2, [r3, #24]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c0a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8000c12:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c16:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1a:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c1e:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c22:	e9c3 0014 	strd	r0, r0, [r3, #80]	; 0x50
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c26:	4618      	mov	r0, r3
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2a:	f004 f841 	bl	8004cb0 <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b180      	cbz	r0, 8000c54 <main+0x298>
 8000c32:	b672      	cpsid	i
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <main+0x278>
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58021400 	.word	0x58021400
 8000c44:	240001bc 	.word	0x240001bc
 8000c48:	40003800 	.word	0x40003800
 8000c4c:	24000268 	.word	0x24000268
 8000c50:	40003c00 	.word	0x40003c00
  hi2s1.Instance = SPI1;
 8000c54:	4835      	ldr	r0, [pc, #212]	; (8000d2c <main+0x370>)
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <main+0x374>)
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c58:	6083      	str	r3, [r0, #8]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c5a:	6103      	str	r3, [r0, #16]
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000c5c:	6283      	str	r3, [r0, #40]	; 0x28
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c5e:	f8c0 800c 	str.w	r8, [r0, #12]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c62:	6147      	str	r7, [r0, #20]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000c64:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000c68:	e9c0 3608 	strd	r3, r6, [r0, #32]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000c72:	f001 fd2f 	bl	80026d4 <HAL_I2S_Init>
 8000c76:	4604      	mov	r4, r0
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d14c      	bne.n	8000d16 <main+0x35a>
	  rx_data_i2s[i]= 0x0000;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <main+0x378>)
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000c7e:	2101      	movs	r1, #1
	  my_data[i] = 0x0000;
 8000c80:	4d2d      	ldr	r5, [pc, #180]	; (8000d38 <main+0x37c>)
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <main+0x380>)
	  my_data[i] = 0x0000;
 8000c84:	8028      	strh	r0, [r5, #0]
	  rx_data_i2s[i]= 0x0000;
 8000c86:	8018      	strh	r0, [r3, #0]
	  my_data[i] = 0x0000;
 8000c88:	8068      	strh	r0, [r5, #2]
	  rx_data_i2s[i]= 0x0000;
 8000c8a:	8058      	strh	r0, [r3, #2]
	  my_data[i] = 0x0000;
 8000c8c:	80a8      	strh	r0, [r5, #4]
	  rx_data_i2s[i]= 0x0000;
 8000c8e:	8098      	strh	r0, [r3, #4]
	  my_data[i] = 0x0000;
 8000c90:	80e8      	strh	r0, [r5, #6]
	  rx_data_i2s[i]= 0x0000;
 8000c92:	80d8      	strh	r0, [r3, #6]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <main+0x384>)
 8000c96:	482b      	ldr	r0, [pc, #172]	; (8000d44 <main+0x388>)
 8000c98:	f004 fa32 	bl	8005100 <arm_biquad_cascade_df2T_init_f32>
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <main+0x38c>)
	  subband_ones[i] = 1.0;
 8000ca0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ca4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  for(uint8_t i = 0; i<numberofsubbands;i++){
 8000ca8:	3301      	adds	r3, #1
 8000caa:	2b37      	cmp	r3, #55	; 0x37
	  subband_ones[i] = 1.0;
 8000cac:	6011      	str	r1, [r2, #0]
  for(uint8_t i = 0; i<numberofsubbands;i++){
 8000cae:	d1f9      	bne.n	8000ca4 <main+0x2e8>
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	4921      	ldr	r1, [pc, #132]	; (8000d38 <main+0x37c>)
 8000cb4:	4825      	ldr	r0, [pc, #148]	; (8000d4c <main+0x390>)
		  ADC_READY_FLAG  = 0;
 8000cb6:	2600      	movs	r6, #0
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 8000cb8:	f001 fdf4 	bl	80028a4 <HAL_I2S_Transmit_DMA>
		output_buffer.value = delay_effect.callback(&delay_effect,value_from_ADC);
 8000cbc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8000d5c <main+0x3a0>
 8000cc0:	f50d 6365 	add.w	r3, sp, #3664	; 0xe50
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	491b      	ldr	r1, [pc, #108]	; (8000d34 <main+0x378>)
 8000cc8:	4818      	ldr	r0, [pc, #96]	; (8000d2c <main+0x370>)
		output_buffer.value = delay_effect.callback(&delay_effect,value_from_ADC);
 8000cca:	4499      	add	r9, r3
 8000ccc:	4c20      	ldr	r4, [pc, #128]	; (8000d50 <main+0x394>)
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 8000cce:	f001 fe43 	bl	8002958 <HAL_I2S_Receive_DMA>
  ad1939_init(&hspi3);
 8000cd2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000d60 <main+0x3a4>
 8000cd6:	481f      	ldr	r0, [pc, #124]	; (8000d54 <main+0x398>)
 8000cd8:	f8df a088 	ldr.w	sl, [pc, #136]	; 8000d64 <main+0x3a8>
 8000cdc:	f7ff fb6e 	bl	80003bc <ad1939_init>
  init_guitar_effect_delay(&delay_effect);
 8000ce0:	4f1d      	ldr	r7, [pc, #116]	; (8000d58 <main+0x39c>)
 8000ce2:	a80a      	add	r0, sp, #40	; 0x28
 8000ce4:	f7ff fd3e 	bl	8000764 <init_guitar_effect_delay>
	  if (ADC_READY_FLAG){
 8000ce8:	7823      	ldrb	r3, [r4, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0fc      	beq.n	8000ce8 <main+0x32c>
		output_buffer.value = delay_effect.callback(&delay_effect,value_from_ADC);
 8000cee:	f8d9 3e24 	ldr.w	r3, [r9, #3620]	; 0xe24
 8000cf2:	a80a      	add	r0, sp, #40	; 0x28
		  ADC_READY_FLAG  = 0;
 8000cf4:	7026      	strb	r6, [r4, #0]
		int32_t value_from_ADC = adc_data_bf.value; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 8000cf6:	f8d8 1000 	ldr.w	r1, [r8]
		output_buffer.value = delay_effect.callback(&delay_effect,value_from_ADC);
 8000cfa:	4798      	blx	r3
 8000cfc:	f8ca 0000 	str.w	r0, [sl]
		if ( DAC_HALF_COMPLETE_FLAG) {
 8000d00:	783b      	ldrb	r3, [r7, #0]
 8000d02:	b153      	cbz	r3, 8000d1a <main+0x35e>
			my_data[2] = output_buffer.raw_low;
 8000d04:	f8ba 3000 	ldrh.w	r3, [sl]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	80ab      	strh	r3, [r5, #4]
			my_data[3] = output_buffer.raw_high;
 8000d0c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	80eb      	strh	r3, [r5, #6]
 8000d14:	e7e8      	b.n	8000ce8 <main+0x32c>
 8000d16:	b672      	cpsid	i
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x35c>
			my_data[6] = output_buffer.raw_low;
 8000d1a:	f8ba 3000 	ldrh.w	r3, [sl]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	81ab      	strh	r3, [r5, #12]
			my_data[7] = output_buffer.raw_high;
 8000d22:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	81eb      	strh	r3, [r5, #14]
 8000d2a:	e7dd      	b.n	8000ce8 <main+0x32c>
 8000d2c:	24000144 	.word	0x24000144
 8000d30:	40013000 	.word	0x40013000
 8000d34:	24000304 	.word	0x24000304
 8000d38:	240002f0 	.word	0x240002f0
 8000d3c:	24000008 	.word	0x24000008
 8000d40:	24000240 	.word	0x24000240
 8000d44:	24000234 	.word	0x24000234
 8000d48:	24000314 	.word	0x24000314
 8000d4c:	240001bc 	.word	0x240001bc
 8000d50:	2400004b 	.word	0x2400004b
 8000d54:	24000268 	.word	0x24000268
 8000d58:	2400004c 	.word	0x2400004c
 8000d5c:	0002d1d8 	.word	0x0002d1d8
 8000d60:	24000050 	.word	0x24000050
 8000d64:	24000300 	.word	0x24000300

08000d68 <Error_Handler>:
 8000d68:	b672      	cpsid	i
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <Error_Handler+0x2>

08000d6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_MspInit+0x20>)
{
 8000d6e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d70:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000d74:	f042 0202 	orr.w	r2, r2, #2
 8000d78:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	b002      	add	sp, #8
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d90:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000d94:	b0be      	sub	sp, #248	; 0xf8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	2100      	movs	r1, #0
{
 8000d98:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9a:	22c8      	movs	r2, #200	; 0xc8
 8000d9c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	910a      	str	r1, [sp, #40]	; 0x28
 8000da0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000da4:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f004 f9b6 	bl	8005118 <memset>
  if(hi2s->Instance==SPI1)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	4a75      	ldr	r2, [pc, #468]	; (8000f84 <HAL_I2S_MspInit+0x1f4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d005      	beq.n	8000dc0 <HAL_I2S_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hi2s->Instance==SPI2)
 8000db4:	4a74      	ldr	r2, [pc, #464]	; (8000f88 <HAL_I2S_MspInit+0x1f8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d06d      	beq.n	8000e96 <HAL_I2S_MspInit+0x106>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dba:	b03e      	add	sp, #248	; 0xf8
 8000dbc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f002 fd1c 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	f040 80ce 	bne.w	8000f72 <HAL_I2S_MspInit+0x1e2>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	4b6d      	ldr	r3, [pc, #436]	; (8000f8c <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd8:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000dda:	f04f 0801 	mov.w	r8, #1
 8000dde:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	486a      	ldr	r0, [pc, #424]	; (8000f90 <HAL_I2S_MspInit+0x200>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000dec:	4d69      	ldr	r5, [pc, #420]	; (8000f94 <HAL_I2S_MspInit+0x204>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000df2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000df6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e0e:	f002 0201 	and.w	r2, r2, #1
 8000e12:	9201      	str	r2, [sp, #4]
 8000e14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000e22:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e28:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000e30:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000e3a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f001 fad1 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	2302      	movs	r3, #2
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e48:	a906      	add	r1, sp, #24
 8000e4a:	4853      	ldr	r0, [pc, #332]	; (8000f98 <HAL_I2S_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8000e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000e52:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f001 fac5 	bl	80023e4 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000e5c:	494f      	ldr	r1, [pc, #316]	; (8000f9c <HAL_I2S_MspInit+0x20c>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000e5e:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e60:	4628      	mov	r0, r5
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	622b      	str	r3, [r5, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000e66:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e72:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e76:	616a      	str	r2, [r5, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e80:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e84:	f000 fb2a 	bl	80014dc <HAL_DMA_Init>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d16f      	bne.n	8000f6c <HAL_I2S_MspInit+0x1dc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000e8c:	64a5      	str	r5, [r4, #72]	; 0x48
 8000e8e:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8000e90:	b03e      	add	sp, #248	; 0xf8
 8000e92:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e9a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f002 fcb1 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d166      	bne.n	8000f78 <HAL_I2S_MspInit+0x1e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eac:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eae:	f04f 0800 	mov.w	r8, #0
 8000eb2:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	4839      	ldr	r0, [pc, #228]	; (8000fa0 <HAL_I2S_MspInit+0x210>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8000ec0:	4d38      	ldr	r5, [pc, #224]	; (8000fa4 <HAL_I2S_MspInit+0x214>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ec2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000ec6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000eca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ece:	9203      	str	r2, [sp, #12]
 8000ed0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ed6:	f042 0204 	orr.w	r2, r2, #4
 8000eda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ede:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ee2:	f002 0204 	and.w	r2, r2, #4
 8000ee6:	9204      	str	r2, [sp, #16]
 8000ee8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eee:	f042 0202 	orr.w	r2, r2, #2
 8000ef2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ef6:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efc:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f04:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f0e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f001 fa67 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f16:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000f1a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	a906      	add	r1, sp, #24
 8000f1e:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <HAL_I2S_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f20:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f26:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f001 fa5b 	bl	80023e4 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000f2e:	2228      	movs	r2, #40	; 0x28
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	2300      	movs	r3, #0
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <HAL_I2S_MspInit+0x21c>)
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000f34:	606a      	str	r2, [r5, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f3c:	4628      	mov	r0, r5
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3e:	622b      	str	r3, [r5, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f40:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f46:	612a      	str	r2, [r5, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8000f4c:	6029      	str	r1, [r5, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4e:	2140      	movs	r1, #64	; 0x40
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f50:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f58:	60a9      	str	r1, [r5, #8]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000f5a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f5c:	f000 fabe 	bl	80014dc <HAL_DMA_Init>
 8000f60:	b968      	cbnz	r0, 8000f7e <HAL_I2S_MspInit+0x1ee>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000f62:	6465      	str	r5, [r4, #68]	; 0x44
 8000f64:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8000f66:	b03e      	add	sp, #248	; 0xf8
 8000f68:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8000f6c:	f7ff fefc 	bl	8000d68 <Error_Handler>
 8000f70:	e78c      	b.n	8000e8c <HAL_I2S_MspInit+0xfc>
      Error_Handler();
 8000f72:	f7ff fef9 	bl	8000d68 <Error_Handler>
 8000f76:	e72e      	b.n	8000dd6 <HAL_I2S_MspInit+0x46>
      Error_Handler();
 8000f78:	f7ff fef6 	bl	8000d68 <Error_Handler>
 8000f7c:	e795      	b.n	8000eaa <HAL_I2S_MspInit+0x11a>
      Error_Handler();
 8000f7e:	f7ff fef3 	bl	8000d68 <Error_Handler>
 8000f82:	e7ee      	b.n	8000f62 <HAL_I2S_MspInit+0x1d2>
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40003800 	.word	0x40003800
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020000 	.word	0x58020000
 8000f94:	24000054 	.word	0x24000054
 8000f98:	58021800 	.word	0x58021800
 8000f9c:	40020010 	.word	0x40020010
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	240000cc 	.word	0x240000cc
 8000fa8:	58020400 	.word	0x58020400
 8000fac:	40020428 	.word	0x40020428

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	b0bd      	sub	sp, #244	; 0xf4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	2100      	movs	r1, #0
{
 8000fb6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	9108      	str	r1, [sp, #32]
 8000fbe:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000fc2:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc6:	f004 f8a7 	bl	8005118 <memset>
  if(hspi->Instance==SPI3)
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <HAL_SPI_MspInit+0xe0>)
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fd2:	b03d      	add	sp, #244	; 0xf4
 8000fd4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fda:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe2:	f002 fc11 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d14f      	bne.n	800108a <HAL_SPI_MspInit+0xda>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fec:	2404      	movs	r4, #4
 8000fee:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ff0:	2107      	movs	r1, #7
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ff2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ffc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001000:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001004:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001008:	9201      	str	r2, [sp, #4]
 800100a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800101c:	f002 0202 	and.w	r2, r2, #2
 8001020:	9202      	str	r2, [sp, #8]
 8001022:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001028:	f042 0204 	orr.w	r2, r2, #4
 800102c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001034:	9108      	str	r1, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800103c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001040:	2400      	movs	r4, #0
 8001042:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	9303      	str	r3, [sp, #12]
 8001046:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001048:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f001 f9ca 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	a904      	add	r1, sp, #16
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800105a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105e:	2406      	movs	r4, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001060:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001064:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f001 f9bd 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800106a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	a904      	add	r1, sp, #16
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001074:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001076:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800107a:	2200      	movs	r2, #0
 800107c:	2303      	movs	r3, #3
 800107e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f001 f9af 	bl	80023e4 <HAL_GPIO_Init>
}
 8001086:	b03d      	add	sp, #244	; 0xf4
 8001088:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800108a:	f7ff fe6d 	bl	8000d68 <Error_Handler>
 800108e:	e7ac      	b.n	8000fea <HAL_SPI_MspInit+0x3a>
 8001090:	40003c00 	.word	0x40003c00
 8001094:	58024400 	.word	0x58024400
 8001098:	58020400 	.word	0x58020400
 800109c:	58020800 	.word	0x58020800

080010a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler>
 80010a2:	bf00      	nop

080010a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <HardFault_Handler>
 80010a6:	bf00      	nop

080010a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler>
 80010aa:	bf00      	nop

080010ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <BusFault_Handler>
 80010ae:	bf00      	nop

080010b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler>
 80010b2:	bf00      	nop

080010b4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <DebugMon_Handler>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <PendSV_Handler>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 b88c 	b.w	80011dc <HAL_IncTick>

080010c4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <DMA1_Stream0_IRQHandler+0x8>)
 80010c6:	f000 be3f 	b.w	8001d48 <HAL_DMA_IRQHandler>
 80010ca:	bf00      	nop
 80010cc:	24000054 	.word	0x24000054

080010d0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <DMA2_Stream1_IRQHandler+0x8>)
 80010d2:	f000 be39 	b.w	8001d48 <HAL_DMA_IRQHandler>
 80010d6:	bf00      	nop
 80010d8:	240000cc 	.word	0x240000cc

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e0:	f7ff f8fa 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f004 f80d 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fc55 	bl	80009bc <main>
  bx  lr
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001118:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800111c:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001120:	080051a8 	.word	0x080051a8
  ldr r2, =_sbss
 8001124:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001128:	240003f4 	.word	0x240003f4

0800112c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC3_IRQHandler>
	...

08001130 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_InitTick+0x40>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b90b      	cbnz	r3, 800113a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001138:	4770      	bx	lr
{
 800113a:	b510      	push	{r4, lr}
 800113c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800113e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_InitTick+0x44>)
 8001144:	fbb0 f3f3 	udiv	r3, r0, r3
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	fbb0 f0f3 	udiv	r0, r0, r3
 800114e:	f000 f8cd 	bl	80012ec <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	2c0f      	cmp	r4, #15
 8001154:	d800      	bhi.n	8001158 <HAL_InitTick+0x28>
 8001156:	b108      	cbz	r0, 800115c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
}
 800115a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	4621      	mov	r1, r4
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f876 	bl	8001254 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_InitTick+0x48>)
 800116a:	2000      	movs	r0, #0
 800116c:	601c      	str	r4, [r3, #0]
}
 800116e:	bd10      	pop	{r4, pc}
 8001170:	2400001c 	.word	0x2400001c
 8001174:	24000000 	.word	0x24000000
 8001178:	24000020 	.word	0x24000020

0800117c <HAL_Init>:
{
 800117c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001180:	4c12      	ldr	r4, [pc, #72]	; (80011cc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	f000 f855 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001186:	f001 fff9 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_Init+0x54>)
 800118c:	4911      	ldr	r1, [pc, #68]	; (80011d4 <HAL_Init+0x58>)
 800118e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001190:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001192:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001196:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800119a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800119e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011aa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80011ae:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b0:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011b2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b4:	f7ff ffbc 	bl	8001130 <HAL_InitTick>
 80011b8:	b110      	cbz	r0, 80011c0 <HAL_Init+0x44>
    return HAL_ERROR;
 80011ba:	2401      	movs	r4, #1
}
 80011bc:	4620      	mov	r0, r4
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	4604      	mov	r4, r0
  HAL_MspInit();
 80011c2:	f7ff fdd3 	bl	8000d6c <HAL_MspInit>
}
 80011c6:	4620      	mov	r0, r4
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	bf00      	nop
 80011cc:	24000004 	.word	0x24000004
 80011d0:	58024400 	.word	0x58024400
 80011d4:	08005188 	.word	0x08005188
 80011d8:	24000000 	.word	0x24000000

080011dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_IncTick+0x10>)
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_IncTick+0x14>)
 80011e0:	6811      	ldr	r1, [r2, #0]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	440b      	add	r3, r1
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	240003f0 	.word	0x240003f0
 80011f0:	2400001c 	.word	0x2400001c

080011f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011f4:	4b01      	ldr	r3, [pc, #4]	; (80011fc <HAL_GetTick+0x8>)
 80011f6:	6818      	ldr	r0, [r3, #0]
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	240003f0 	.word	0x240003f0

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fff6 	bl	80011f4 <HAL_GetTick>
 8001208:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	1c63      	adds	r3, r4, #1
 800120c:	d002      	beq.n	8001214 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_Delay+0x20>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	1b43      	subs	r3, r0, r5
 800121a:	42a3      	cmp	r3, r4
 800121c:	d3fa      	bcc.n	8001214 <HAL_Delay+0x14>
  {
  }
}
 800121e:	bd38      	pop	{r3, r4, r5, pc}
 8001220:	2400001c 	.word	0x2400001c

08001224 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetREVID+0x8>)
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	0c00      	lsrs	r0, r0, #16
 800122a:	4770      	bx	lr
 800122c:	5c001000 	.word	0x5c001000

08001230 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001236:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001240:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001246:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001248:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	05fa0000 	.word	0x05fa0000

08001254 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_NVIC_SetPriority+0x70>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001266:	f1be 0f04 	cmp.w	lr, #4
 800126a:	bf28      	it	cs
 800126c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001270:	f1bc 0f06 	cmp.w	ip, #6
 8001274:	d91a      	bls.n	80012ac <HAL_NVIC_SetPriority+0x58>
 8001276:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 3cff 	mov.w	ip, #4294967295
 800127c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001280:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001288:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800128e:	ea21 010c 	bic.w	r1, r1, ip
 8001292:	fa01 f103 	lsl.w	r1, r1, r3
 8001296:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800129a:	db0a      	blt.n	80012b2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	0109      	lsls	r1, r1, #4
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_NVIC_SetPriority+0x74>)
 80012a0:	b2c9      	uxtb	r1, r1
 80012a2:	4403      	add	r3, r0
 80012a4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	4613      	mov	r3, r2
 80012b0:	e7e8      	b.n	8001284 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	f000 000f 	and.w	r0, r0, #15
 80012b6:	0109      	lsls	r1, r1, #4
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_NVIC_SetPriority+0x78>)
 80012ba:	b2c9      	uxtb	r1, r1
 80012bc:	4403      	add	r3, r0
 80012be:	7619      	strb	r1, [r3, #24]
 80012c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ecfc 	.word	0xe000ecfc

080012d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012d0:	2800      	cmp	r0, #0
 80012d2:	db07      	blt.n	80012e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d4:	2301      	movs	r3, #1
 80012d6:	f000 011f 	and.w	r1, r0, #31
 80012da:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_NVIC_EnableIRQ+0x18>)
 80012dc:	0940      	lsrs	r0, r0, #5
 80012de:	408b      	lsls	r3, r1
 80012e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	1e43      	subs	r3, r0, #1
 80012ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f2:	d20c      	bcs.n	800130e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	4906      	ldr	r1, [pc, #24]	; (8001314 <HAL_SYSTICK_Config+0x28>)
 80012fc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001300:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001318:	6802      	ldr	r2, [r0, #0]
{
 800131a:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <DMA_CalcBaseAndBitshift+0xd0>)
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <DMA_CalcBaseAndBitshift+0xd4>)
{
 8001320:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001322:	4e33      	ldr	r6, [pc, #204]	; (80013f0 <DMA_CalcBaseAndBitshift+0xd8>)
 8001324:	4d33      	ldr	r5, [pc, #204]	; (80013f4 <DMA_CalcBaseAndBitshift+0xdc>)
 8001326:	42b2      	cmp	r2, r6
 8001328:	bf18      	it	ne
 800132a:	429a      	cmpne	r2, r3
 800132c:	4c32      	ldr	r4, [pc, #200]	; (80013f8 <DMA_CalcBaseAndBitshift+0xe0>)
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	42aa      	cmp	r2, r5
 8001336:	bf08      	it	eq
 8001338:	f043 0301 	orreq.w	r3, r3, #1
 800133c:	42a2      	cmp	r2, r4
 800133e:	bf08      	it	eq
 8001340:	f043 0301 	orreq.w	r3, r3, #1
 8001344:	3430      	adds	r4, #48	; 0x30
 8001346:	4282      	cmp	r2, r0
 8001348:	bf08      	it	eq
 800134a:	f043 0301 	orreq.w	r3, r3, #1
 800134e:	3030      	adds	r0, #48	; 0x30
 8001350:	42a2      	cmp	r2, r4
 8001352:	bf08      	it	eq
 8001354:	f043 0301 	orreq.w	r3, r3, #1
 8001358:	3430      	adds	r4, #48	; 0x30
 800135a:	4282      	cmp	r2, r0
 800135c:	bf08      	it	eq
 800135e:	f043 0301 	orreq.w	r3, r3, #1
 8001362:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001366:	42a2      	cmp	r2, r4
 8001368:	bf08      	it	eq
 800136a:	f043 0301 	orreq.w	r3, r3, #1
 800136e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001372:	4282      	cmp	r2, r0
 8001374:	bf08      	it	eq
 8001376:	f043 0301 	orreq.w	r3, r3, #1
 800137a:	3030      	adds	r0, #48	; 0x30
 800137c:	42a2      	cmp	r2, r4
 800137e:	bf08      	it	eq
 8001380:	f043 0301 	orreq.w	r3, r3, #1
 8001384:	3430      	adds	r4, #48	; 0x30
 8001386:	4282      	cmp	r2, r0
 8001388:	bf08      	it	eq
 800138a:	f043 0301 	orreq.w	r3, r3, #1
 800138e:	3030      	adds	r0, #48	; 0x30
 8001390:	42a2      	cmp	r2, r4
 8001392:	bf08      	it	eq
 8001394:	f043 0301 	orreq.w	r3, r3, #1
 8001398:	3430      	adds	r4, #48	; 0x30
 800139a:	4282      	cmp	r2, r0
 800139c:	bf08      	it	eq
 800139e:	f043 0301 	orreq.w	r3, r3, #1
 80013a2:	3030      	adds	r0, #48	; 0x30
 80013a4:	42a2      	cmp	r2, r4
 80013a6:	bf08      	it	eq
 80013a8:	f043 0301 	orreq.w	r3, r3, #1
 80013ac:	4282      	cmp	r2, r0
 80013ae:	bf08      	it	eq
 80013b0:	f043 0301 	orreq.w	r3, r3, #1
 80013b4:	b913      	cbnz	r3, 80013bc <DMA_CalcBaseAndBitshift+0xa4>
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <DMA_CalcBaseAndBitshift+0xe4>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d112      	bne.n	80013e2 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80013bc:	b2d3      	uxtb	r3, r2
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80013c0:	4c10      	ldr	r4, [pc, #64]	; (8001404 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80013c2:	3b10      	subs	r3, #16
 80013c4:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80013c8:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80013ca:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80013ce:	5c20      	ldrb	r0, [r4, r0]
 80013d0:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <DMA_CalcBaseAndBitshift+0xf0>)
 80013d4:	ea00 0002 	and.w	r0, r0, r2
 80013d8:	bf88      	it	hi
 80013da:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80013dc:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80013de:	bc70      	pop	{r4, r5, r6}
 80013e0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80013e2:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80013e6:	e7f9      	b.n	80013dc <DMA_CalcBaseAndBitshift+0xc4>
 80013e8:	40020010 	.word	0x40020010
 80013ec:	40020070 	.word	0x40020070
 80013f0:	40020028 	.word	0x40020028
 80013f4:	40020040 	.word	0x40020040
 80013f8:	40020058 	.word	0x40020058
 80013fc:	400204b8 	.word	0x400204b8
 8001400:	aaaaaaab 	.word	0xaaaaaaab
 8001404:	08005198 	.word	0x08005198
 8001408:	fffffc00 	.word	0xfffffc00

0800140c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800140c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800140e:	4a27      	ldr	r2, [pc, #156]	; (80014ac <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001410:	4927      	ldr	r1, [pc, #156]	; (80014b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8001412:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001414:	4d27      	ldr	r5, [pc, #156]	; (80014b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001416:	4c28      	ldr	r4, [pc, #160]	; (80014b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001418:	42ab      	cmp	r3, r5
 800141a:	bf18      	it	ne
 800141c:	4293      	cmpne	r3, r2
 800141e:	bf0c      	ite	eq
 8001420:	2201      	moveq	r2, #1
 8001422:	2200      	movne	r2, #0
 8001424:	428b      	cmp	r3, r1
 8001426:	bf08      	it	eq
 8001428:	f042 0201 	orreq.w	r2, r2, #1
 800142c:	3128      	adds	r1, #40	; 0x28
 800142e:	42a3      	cmp	r3, r4
 8001430:	bf08      	it	eq
 8001432:	f042 0201 	orreq.w	r2, r2, #1
 8001436:	3428      	adds	r4, #40	; 0x28
 8001438:	428b      	cmp	r3, r1
 800143a:	bf08      	it	eq
 800143c:	f042 0201 	orreq.w	r2, r2, #1
 8001440:	3128      	adds	r1, #40	; 0x28
 8001442:	42a3      	cmp	r3, r4
 8001444:	bf08      	it	eq
 8001446:	f042 0201 	orreq.w	r2, r2, #1
 800144a:	428b      	cmp	r3, r1
 800144c:	bf08      	it	eq
 800144e:	f042 0201 	orreq.w	r2, r2, #1
 8001452:	b912      	cbnz	r2, 800145a <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4918      	ldr	r1, [pc, #96]	; (80014c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001460:	3b08      	subs	r3, #8
 8001462:	4c19      	ldr	r4, [pc, #100]	; (80014c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001464:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001468:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800146a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800146e:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001472:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800147a:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800147e:	bc30      	pop	{r4, r5}
 8001480:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001482:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001486:	4c12      	ldr	r4, [pc, #72]	; (80014d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001488:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800148a:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800148c:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001490:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001492:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001496:	d800      	bhi.n	800149a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8001498:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800149c:	f001 041f 	and.w	r4, r1, #31
 80014a0:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80014a2:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80014a4:	40a3      	lsls	r3, r4
 80014a6:	4c0c      	ldr	r4, [pc, #48]	; (80014d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80014a8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80014aa:	e7e5      	b.n	8001478 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80014ac:	58025408 	.word	0x58025408
 80014b0:	58025430 	.word	0x58025430
 80014b4:	5802541c 	.word	0x5802541c
 80014b8:	58025444 	.word	0x58025444
 80014bc:	58025494 	.word	0x58025494
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	16009600 	.word	0x16009600
 80014c8:	58025880 	.word	0x58025880
 80014cc:	bffdfbf0 	.word	0xbffdfbf0
 80014d0:	aaaaaaab 	.word	0xaaaaaaab
 80014d4:	10008200 	.word	0x10008200
 80014d8:	40020880 	.word	0x40020880

080014dc <HAL_DMA_Init>:
{
 80014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e0:	4605      	mov	r5, r0
 80014e2:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fe86 	bl	80011f4 <HAL_GetTick>
  if(hdma == NULL)
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	f000 8199 	beq.w	8001820 <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014ee:	682c      	ldr	r4, [r5, #0]
 80014f0:	4606      	mov	r6, r0
 80014f2:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_DMA_Init+0x298>)
 80014f4:	429c      	cmp	r4, r3
 80014f6:	d048      	beq.n	800158a <HAL_DMA_Init+0xae>
 80014f8:	3318      	adds	r3, #24
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d045      	beq.n	800158a <HAL_DMA_Init+0xae>
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	4a9d      	ldr	r2, [pc, #628]	; (8001778 <HAL_DMA_Init+0x29c>)
 8001502:	4294      	cmp	r4, r2
 8001504:	bf18      	it	ne
 8001506:	429c      	cmpne	r4, r3
 8001508:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800150c:	bf0c      	ite	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	2300      	movne	r3, #0
 8001512:	4294      	cmp	r4, r2
 8001514:	bf08      	it	eq
 8001516:	f043 0301 	orreq.w	r3, r3, #1
 800151a:	3218      	adds	r2, #24
 800151c:	4294      	cmp	r4, r2
 800151e:	bf08      	it	eq
 8001520:	f043 0301 	orreq.w	r3, r3, #1
 8001524:	3218      	adds	r2, #24
 8001526:	4294      	cmp	r4, r2
 8001528:	bf08      	it	eq
 800152a:	f043 0301 	orreq.w	r3, r3, #1
 800152e:	3218      	adds	r2, #24
 8001530:	4294      	cmp	r4, r2
 8001532:	bf08      	it	eq
 8001534:	f043 0301 	orreq.w	r3, r3, #1
 8001538:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800153c:	4294      	cmp	r4, r2
 800153e:	bf08      	it	eq
 8001540:	f043 0301 	orreq.w	r3, r3, #1
 8001544:	3218      	adds	r2, #24
 8001546:	4294      	cmp	r4, r2
 8001548:	bf08      	it	eq
 800154a:	f043 0301 	orreq.w	r3, r3, #1
 800154e:	3218      	adds	r2, #24
 8001550:	4294      	cmp	r4, r2
 8001552:	bf08      	it	eq
 8001554:	f043 0301 	orreq.w	r3, r3, #1
 8001558:	3218      	adds	r2, #24
 800155a:	4294      	cmp	r4, r2
 800155c:	bf08      	it	eq
 800155e:	f043 0301 	orreq.w	r3, r3, #1
 8001562:	3218      	adds	r2, #24
 8001564:	4294      	cmp	r4, r2
 8001566:	bf08      	it	eq
 8001568:	f043 0301 	orreq.w	r3, r3, #1
 800156c:	3218      	adds	r2, #24
 800156e:	4294      	cmp	r4, r2
 8001570:	bf08      	it	eq
 8001572:	f043 0301 	orreq.w	r3, r3, #1
 8001576:	3218      	adds	r2, #24
 8001578:	4294      	cmp	r4, r2
 800157a:	bf08      	it	eq
 800157c:	f043 0301 	orreq.w	r3, r3, #1
 8001580:	b91b      	cbnz	r3, 800158a <HAL_DMA_Init+0xae>
 8001582:	4b7e      	ldr	r3, [pc, #504]	; (800177c <HAL_DMA_Init+0x2a0>)
 8001584:	429c      	cmp	r4, r3
 8001586:	f040 81a4 	bne.w	80018d2 <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001590:	2300      	movs	r3, #0
 8001592:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	e006      	b.n	80015ae <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a0:	f7ff fe28 	bl	80011f4 <HAL_GetTick>
 80015a4:	1b80      	subs	r0, r0, r6
 80015a6:	2805      	cmp	r0, #5
 80015a8:	f200 8120 	bhi.w	80017ec <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015ac:	682c      	ldr	r4, [r5, #0]
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	07df      	lsls	r7, r3, #31
 80015b2:	d4f5      	bmi.n	80015a0 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 80015b4:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 80015ba:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015be:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6969      	ldr	r1, [r5, #20]
 80015c4:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	69e9      	ldr	r1, [r5, #28]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015cc:	496c      	ldr	r1, [pc, #432]	; (8001780 <HAL_DMA_Init+0x2a4>)
 80015ce:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	6a28      	ldr	r0, [r5, #32]
 80015d2:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015d4:	486b      	ldr	r0, [pc, #428]	; (8001784 <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 80015d6:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015da:	2904      	cmp	r1, #4
 80015dc:	f000 8124 	beq.w	8001828 <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015e0:	6806      	ldr	r6, [r0, #0]
 80015e2:	4869      	ldr	r0, [pc, #420]	; (8001788 <HAL_DMA_Init+0x2ac>)
 80015e4:	4030      	ands	r0, r6
 80015e6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80015ea:	f080 80dd 	bcs.w	80017a8 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015ee:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015f0:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80015f6:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015f8:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7ff fe8c 	bl	8001318 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001600:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001602:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001604:	495b      	ldr	r1, [pc, #364]	; (8001774 <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001606:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800160a:	4e60      	ldr	r6, [pc, #384]	; (800178c <HAL_DMA_Init+0x2b0>)
 800160c:	4f60      	ldr	r7, [pc, #384]	; (8001790 <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800160e:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001610:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_DMA_Init+0x2b8>)
 8001612:	1ba6      	subs	r6, r4, r6
 8001614:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001616:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001618:	eba4 0b02 	sub.w	fp, r4, r2
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_DMA_Init+0x2bc>)
 800161e:	fab6 f686 	clz	r6, r6
 8001622:	fabb fb8b 	clz	fp, fp
 8001626:	fab7 f787 	clz	r7, r7
 800162a:	eba4 0a03 	sub.w	sl, r4, r3
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_DMA_Init+0x2c0>)
 8001630:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001634:	485a      	ldr	r0, [pc, #360]	; (80017a0 <HAL_DMA_Init+0x2c4>)
 8001636:	429c      	cmp	r4, r3
 8001638:	bf18      	it	ne
 800163a:	428c      	cmpne	r4, r1
 800163c:	f103 0318 	add.w	r3, r3, #24
 8001640:	faba fa8a 	clz	sl, sl
 8001644:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8001648:	bf0c      	ite	eq
 800164a:	2101      	moveq	r1, #1
 800164c:	2100      	movne	r1, #0
 800164e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001652:	1a22      	subs	r2, r4, r0
 8001654:	429c      	cmp	r4, r3
 8001656:	bf08      	it	eq
 8001658:	f041 0101 	orreq.w	r1, r1, #1
 800165c:	3318      	adds	r3, #24
 800165e:	097f      	lsrs	r7, r7, #5
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	429c      	cmp	r4, r3
 8001666:	bf08      	it	eq
 8001668:	f041 0101 	orreq.w	r1, r1, #1
 800166c:	3318      	adds	r3, #24
 800166e:	0952      	lsrs	r2, r2, #5
 8001670:	429c      	cmp	r4, r3
 8001672:	bf08      	it	eq
 8001674:	f041 0101 	orreq.w	r1, r1, #1
 8001678:	3318      	adds	r3, #24
 800167a:	9201      	str	r2, [sp, #4]
 800167c:	429c      	cmp	r4, r3
 800167e:	bf08      	it	eq
 8001680:	f041 0101 	orreq.w	r1, r1, #1
 8001684:	3318      	adds	r3, #24
 8001686:	429c      	cmp	r4, r3
 8001688:	bf08      	it	eq
 800168a:	f041 0101 	orreq.w	r1, r1, #1
 800168e:	3318      	adds	r3, #24
 8001690:	429c      	cmp	r4, r3
 8001692:	bf08      	it	eq
 8001694:	f041 0101 	orreq.w	r1, r1, #1
 8001698:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800169c:	429c      	cmp	r4, r3
 800169e:	bf08      	it	eq
 80016a0:	f041 0101 	orreq.w	r1, r1, #1
 80016a4:	3318      	adds	r3, #24
 80016a6:	429c      	cmp	r4, r3
 80016a8:	bf08      	it	eq
 80016aa:	f041 0101 	orreq.w	r1, r1, #1
 80016ae:	3318      	adds	r3, #24
 80016b0:	429c      	cmp	r4, r3
 80016b2:	bf08      	it	eq
 80016b4:	f041 0101 	orreq.w	r1, r1, #1
 80016b8:	3318      	adds	r3, #24
 80016ba:	429c      	cmp	r4, r3
 80016bc:	bf08      	it	eq
 80016be:	f041 0101 	orreq.w	r1, r1, #1
 80016c2:	3318      	adds	r3, #24
 80016c4:	429c      	cmp	r4, r3
 80016c6:	bf08      	it	eq
 80016c8:	f041 0101 	orreq.w	r1, r1, #1
 80016cc:	3318      	adds	r3, #24
 80016ce:	429c      	cmp	r4, r3
 80016d0:	bf08      	it	eq
 80016d2:	f041 0101 	orreq.w	r1, r1, #1
 80016d6:	3318      	adds	r3, #24
 80016d8:	429c      	cmp	r4, r3
 80016da:	bf08      	it	eq
 80016dc:	f041 0101 	orreq.w	r1, r1, #1
 80016e0:	3318      	adds	r3, #24
 80016e2:	429c      	cmp	r4, r3
 80016e4:	bf08      	it	eq
 80016e6:	f041 0101 	orreq.w	r1, r1, #1
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_DMA_Init+0x2c8>)
 80016ec:	ea4b 0101 	orr.w	r1, fp, r1
 80016f0:	eba4 0803 	sub.w	r8, r4, r3
 80016f4:	3314      	adds	r3, #20
 80016f6:	ea4a 0101 	orr.w	r1, sl, r1
 80016fa:	fab8 f888 	clz	r8, r8
 80016fe:	eba4 0903 	sub.w	r9, r4, r3
 8001702:	3314      	adds	r3, #20
 8001704:	4331      	orrs	r1, r6
 8001706:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800170a:	fab9 f989 	clz	r9, r9
 800170e:	1ae3      	subs	r3, r4, r3
 8001710:	4339      	orrs	r1, r7
 8001712:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	ea48 0101 	orr.w	r1, r8, r1
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	ea49 0101 	orr.w	r1, r9, r1
 8001724:	4319      	orrs	r1, r3
 8001726:	d100      	bne.n	800172a <HAL_DMA_Init+0x24e>
 8001728:	b1da      	cbz	r2, 8001762 <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800172a:	4628      	mov	r0, r5
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f7ff fe6d 	bl	800140c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001732:	68a9      	ldr	r1, [r5, #8]
 8001734:	9b00      	ldr	r3, [sp, #0]
 8001736:	2980      	cmp	r1, #128	; 0x80
 8001738:	d066      	beq.n	8001808 <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800173a:	6868      	ldr	r0, [r5, #4]
 800173c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800173e:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001740:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001742:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001746:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001748:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174a:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800174e:	d862      	bhi.n	8001816 <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001750:	1e61      	subs	r1, r4, #1
 8001752:	2907      	cmp	r1, #7
 8001754:	d979      	bls.n	800184a <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001756:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8001758:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800175c:	2100      	movs	r1, #0
 800175e:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001760:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001762:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001764:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001766:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001768:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800176c:	b003      	add	sp, #12
 800176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	40020010 	.word	0x40020010
 8001778:	40020040 	.word	0x40020040
 800177c:	400204b8 	.word	0x400204b8
 8001780:	fe10803f 	.word	0xfe10803f
 8001784:	5c001000 	.word	0x5c001000
 8001788:	ffff0000 	.word	0xffff0000
 800178c:	58025430 	.word	0x58025430
 8001790:	58025444 	.word	0x58025444
 8001794:	58025408 	.word	0x58025408
 8001798:	5802541c 	.word	0x5802541c
 800179c:	40020028 	.word	0x40020028
 80017a0:	58025494 	.word	0x58025494
 80017a4:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017a8:	6868      	ldr	r0, [r5, #4]
 80017aa:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 80017ae:	2e1f      	cmp	r6, #31
 80017b0:	d925      	bls.n	80017fe <HAL_DMA_Init+0x322>
 80017b2:	384f      	subs	r0, #79	; 0x4f
 80017b4:	2803      	cmp	r0, #3
 80017b6:	d801      	bhi.n	80017bc <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 80017b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017bc:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017be:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017c0:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80017c6:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ca:	f47f af15 	bne.w	80015f8 <HAL_DMA_Init+0x11c>
 80017ce:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80017d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80017d2:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017d4:	2800      	cmp	r0, #0
 80017d6:	f43f af0f 	beq.w	80015f8 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d153      	bne.n	8001886 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 80017de:	2901      	cmp	r1, #1
 80017e0:	d072      	beq.n	80018c8 <HAL_DMA_Init+0x3ec>
 80017e2:	f031 0202 	bics.w	r2, r1, #2
 80017e6:	f47f af07 	bne.w	80015f8 <HAL_DMA_Init+0x11c>
 80017ea:	e054      	b.n	8001896 <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ec:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80017ee:	2303      	movs	r3, #3
        return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f2:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80017f4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80017f8:	b003      	add	sp, #12
 80017fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017fe:	4878      	ldr	r0, [pc, #480]	; (80019e0 <HAL_DMA_Init+0x504>)
 8001800:	40f0      	lsrs	r0, r6
 8001802:	07c0      	lsls	r0, r0, #31
 8001804:	d5da      	bpl.n	80017bc <HAL_DMA_Init+0x2e0>
 8001806:	e7d7      	b.n	80017b8 <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001808:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800180c:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001810:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001812:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001814:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8001816:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001818:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800181c:	676b      	str	r3, [r5, #116]	; 0x74
 800181e:	e7a0      	b.n	8001762 <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
}
 8001822:	b003      	add	sp, #12
 8001824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001828:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800182a:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 800182e:	4306      	orrs	r6, r0
 8001830:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001832:	4e6c      	ldr	r6, [pc, #432]	; (80019e4 <HAL_DMA_Init+0x508>)
 8001834:	403e      	ands	r6, r7
 8001836:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800183a:	d2b5      	bcs.n	80017a8 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800183c:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800183e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001840:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001844:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001848:	e7c2      	b.n	80017d0 <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800184a:	9a01      	ldr	r2, [sp, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	ea49 0902 	orr.w	r9, r9, r2
 8001852:	ea48 0809 	orr.w	r8, r8, r9
 8001856:	ea47 0708 	orr.w	r7, r7, r8
 800185a:	433e      	orrs	r6, r7
 800185c:	ea5a 0606 	orrs.w	r6, sl, r6
 8001860:	d107      	bne.n	8001872 <HAL_DMA_Init+0x396>
 8001862:	f1bb 0f00 	cmp.w	fp, #0
 8001866:	d104      	bne.n	8001872 <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001868:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800186a:	4860      	ldr	r0, [pc, #384]	; (80019ec <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800186c:	4423      	add	r3, r4
 800186e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001870:	e003      	b.n	800187a <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001874:	485f      	ldr	r0, [pc, #380]	; (80019f4 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001876:	4423      	add	r3, r4
 8001878:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800187a:	2201      	movs	r2, #1
 800187c:	408a      	lsls	r2, r1
 800187e:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 8001882:	676a      	str	r2, [r5, #116]	; 0x74
 8001884:	e76a      	b.n	800175c <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001886:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 800188c:	2902      	cmp	r1, #2
 800188e:	d905      	bls.n	800189c <HAL_DMA_Init+0x3c0>
 8001890:	2903      	cmp	r1, #3
 8001892:	f47f aeb1 	bne.w	80015f8 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001896:	01c2      	lsls	r2, r0, #7
 8001898:	f57f aeae 	bpl.w	80015f8 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 800189c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800189e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80018a0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a2:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80018a4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 80018a8:	e7a6      	b.n	80017f8 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 80018aa:	2903      	cmp	r1, #3
 80018ac:	f63f aea4 	bhi.w	80015f8 <HAL_DMA_Init+0x11c>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_DMA_Init+0x3dc>)
 80018b2:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	0800189d 	.word	0x0800189d
 80018bc:	08001897 	.word	0x08001897
 80018c0:	0800189d 	.word	0x0800189d
 80018c4:	080018c9 	.word	0x080018c9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c8:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80018cc:	f47f ae94 	bne.w	80015f8 <HAL_DMA_Init+0x11c>
 80018d0:	e7e4      	b.n	800189c <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <HAL_DMA_Init+0x51c>)
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_DMA_Init+0x520>)
 80018d6:	eba4 0b02 	sub.w	fp, r4, r2
 80018da:	4e49      	ldr	r6, [pc, #292]	; (8001a00 <HAL_DMA_Init+0x524>)
 80018dc:	eba4 0a03 	sub.w	sl, r4, r3
 80018e0:	4f48      	ldr	r7, [pc, #288]	; (8001a04 <HAL_DMA_Init+0x528>)
 80018e2:	fabb fb8b 	clz	fp, fp
 80018e6:	1ba6      	subs	r6, r4, r6
 80018e8:	faba fa8a 	clz	sl, sl
 80018ec:	333c      	adds	r3, #60	; 0x3c
 80018ee:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80018f2:	fab6 f686 	clz	r6, r6
 80018f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80018fa:	1be7      	subs	r7, r4, r7
 80018fc:	eba4 0803 	sub.w	r8, r4, r3
 8001900:	0976      	lsrs	r6, r6, #5
 8001902:	3314      	adds	r3, #20
 8001904:	fab7 f787 	clz	r7, r7
 8001908:	ea4b 010a 	orr.w	r1, fp, sl
 800190c:	fab8 f888 	clz	r8, r8
 8001910:	eba4 0903 	sub.w	r9, r4, r3
 8001914:	097f      	lsrs	r7, r7, #5
 8001916:	4331      	orrs	r1, r6
 8001918:	3314      	adds	r3, #20
 800191a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800191e:	fab9 f989 	clz	r9, r9
 8001922:	4339      	orrs	r1, r7
 8001924:	1ae3      	subs	r3, r4, r3
 8001926:	4838      	ldr	r0, [pc, #224]	; (8001a08 <HAL_DMA_Init+0x52c>)
 8001928:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800192c:	ea48 0101 	orr.w	r1, r8, r1
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	1a22      	subs	r2, r4, r0
 8001936:	ea49 0101 	orr.w	r1, r9, r1
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	fab2 f282 	clz	r2, r2
 8001940:	4319      	orrs	r1, r3
 8001942:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001946:	9201      	str	r2, [sp, #4]
 8001948:	d101      	bne.n	800194e <HAL_DMA_Init+0x472>
 800194a:	2a00      	cmp	r2, #0
 800194c:	d041      	beq.n	80019d2 <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800194e:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001950:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001a14 <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001954:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001958:	2100      	movs	r1, #0
 800195a:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800195e:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001960:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001964:	68a9      	ldr	r1, [r5, #8]
 8001966:	2940      	cmp	r1, #64	; 0x40
 8001968:	d030      	beq.n	80019cc <HAL_DMA_Init+0x4f0>
 800196a:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800196e:	fab1 f181 	clz	r1, r1
 8001972:	0949      	lsrs	r1, r1, #5
 8001974:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001978:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800197a:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800197c:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800197e:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_DMA_Init+0x530>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001986:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001988:	4422      	add	r2, r4
 800198a:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800198e:	69a9      	ldr	r1, [r5, #24]
 8001990:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001994:	69e9      	ldr	r1, [r5, #28]
 8001996:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800199a:	6a29      	ldr	r1, [r5, #32]
 800199c:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 80019a0:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019a4:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019a8:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019aa:	4919      	ldr	r1, [pc, #100]	; (8001a10 <HAL_DMA_Init+0x534>)
 80019ac:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b0:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019b2:	0909      	lsrs	r1, r1, #4
 80019b4:	0089      	lsls	r1, r1, #2
 80019b6:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b8:	f7ff fcae 	bl	8001318 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019bc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	f001 041f 	and.w	r4, r1, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	40a1      	lsls	r1, r4
 80019c8:	6041      	str	r1, [r0, #4]
 80019ca:	e6ae      	b.n	800172a <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019cc:	f04f 0e10 	mov.w	lr, #16
 80019d0:	e7d2      	b.n	8001978 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019d4:	2303      	movs	r3, #3
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d8:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019da:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 80019de:	e70b      	b.n	80017f8 <HAL_DMA_Init+0x31c>
 80019e0:	c3c0003f 	.word	0xc3c0003f
 80019e4:	ffff0000 	.word	0xffff0000
 80019e8:	1000823f 	.word	0x1000823f
 80019ec:	40020940 	.word	0x40020940
 80019f0:	1600963f 	.word	0x1600963f
 80019f4:	58025940 	.word	0x58025940
 80019f8:	58025408 	.word	0x58025408
 80019fc:	5802541c 	.word	0x5802541c
 8001a00:	58025430 	.word	0x58025430
 8001a04:	58025444 	.word	0x58025444
 8001a08:	58025494 	.word	0x58025494
 8001a0c:	a7fdabf8 	.word	0xa7fdabf8
 8001a10:	cccccccd 	.word	0xcccccccd
 8001a14:	fffe000f 	.word	0xfffe000f

08001a18 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	f000 8177 	beq.w	8001d0c <HAL_DMA_Start_IT+0x2f4>
 8001a1e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8001a20:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001a24:	2801      	cmp	r0, #1
 8001a26:	f000 8173 	beq.w	8001d10 <HAL_DMA_Start_IT+0x2f8>
 8001a2a:	2001      	movs	r0, #1
{
 8001a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a30:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001a34:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a38:	4284      	cmp	r4, r0
 8001a3a:	d008      	beq.n	8001a4e <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001a40:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a42:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001a46:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8001a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8001a50:	f8dc 4000 	ldr.w	r4, [ip]
 8001a54:	4d53      	ldr	r5, [pc, #332]	; (8001ba4 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a56:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	4e52      	ldr	r6, [pc, #328]	; (8001ba8 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001a62:	4852      	ldr	r0, [pc, #328]	; (8001bac <HAL_DMA_Start_IT+0x194>)
 8001a64:	42ac      	cmp	r4, r5
 8001a66:	bf18      	it	ne
 8001a68:	4284      	cmpne	r4, r0
 8001a6a:	f105 0518 	add.w	r5, r5, #24
 8001a6e:	bf0c      	ite	eq
 8001a70:	2001      	moveq	r0, #1
 8001a72:	2000      	movne	r0, #0
 8001a74:	42ac      	cmp	r4, r5
 8001a76:	bf08      	it	eq
 8001a78:	f040 0001 	orreq.w	r0, r0, #1
 8001a7c:	3518      	adds	r5, #24
 8001a7e:	42ac      	cmp	r4, r5
 8001a80:	bf08      	it	eq
 8001a82:	f040 0001 	orreq.w	r0, r0, #1
 8001a86:	3518      	adds	r5, #24
 8001a88:	42ac      	cmp	r4, r5
 8001a8a:	bf08      	it	eq
 8001a8c:	f040 0001 	orreq.w	r0, r0, #1
 8001a90:	3518      	adds	r5, #24
 8001a92:	42ac      	cmp	r4, r5
 8001a94:	bf08      	it	eq
 8001a96:	f040 0001 	orreq.w	r0, r0, #1
 8001a9a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001a9e:	42ac      	cmp	r4, r5
 8001aa0:	bf08      	it	eq
 8001aa2:	f040 0001 	orreq.w	r0, r0, #1
 8001aa6:	3518      	adds	r5, #24
 8001aa8:	42ac      	cmp	r4, r5
 8001aaa:	bf08      	it	eq
 8001aac:	f040 0001 	orreq.w	r0, r0, #1
 8001ab0:	3518      	adds	r5, #24
 8001ab2:	42ac      	cmp	r4, r5
 8001ab4:	bf08      	it	eq
 8001ab6:	f040 0001 	orreq.w	r0, r0, #1
 8001aba:	3518      	adds	r5, #24
 8001abc:	42ac      	cmp	r4, r5
 8001abe:	bf08      	it	eq
 8001ac0:	f040 0001 	orreq.w	r0, r0, #1
 8001ac4:	3518      	adds	r5, #24
 8001ac6:	42ac      	cmp	r4, r5
 8001ac8:	bf08      	it	eq
 8001aca:	f040 0001 	orreq.w	r0, r0, #1
 8001ace:	3518      	adds	r5, #24
 8001ad0:	42ac      	cmp	r4, r5
 8001ad2:	bf08      	it	eq
 8001ad4:	f040 0001 	orreq.w	r0, r0, #1
 8001ad8:	3518      	adds	r5, #24
 8001ada:	42ac      	cmp	r4, r5
 8001adc:	bf08      	it	eq
 8001ade:	f040 0001 	orreq.w	r0, r0, #1
 8001ae2:	3518      	adds	r5, #24
 8001ae4:	42ac      	cmp	r4, r5
 8001ae6:	bf14      	ite	ne
 8001ae8:	4681      	movne	r9, r0
 8001aea:	f040 0901 	orreq.w	r9, r0, #1
 8001aee:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 8001af2:	42b4      	cmp	r4, r6
 8001af4:	bf18      	it	ne
 8001af6:	42ac      	cmpne	r4, r5
 8001af8:	bf0c      	ite	eq
 8001afa:	2501      	moveq	r5, #1
 8001afc:	2500      	movne	r5, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_DMA_Start_IT+0xee>
 8001b00:	f1b9 0f00 	cmp.w	r9, #0
 8001b04:	d054      	beq.n	8001bb0 <HAL_DMA_Start_IT+0x198>
 8001b06:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b08:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	f026 0601 	bic.w	r6, r6, #1
 8001b10:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b12:	2d00      	cmp	r5, #0
 8001b14:	d078      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b16:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8001b1a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001b1c:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001b20:	b117      	cbz	r7, 8001b28 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b22:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8001b26:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b28:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8001b2c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8001b30:	f006 081f 	and.w	r8, r6, #31
 8001b34:	fa0e fe08 	lsl.w	lr, lr, r8
 8001b38:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b3c:	6826      	ldr	r6, [r4, #0]
 8001b3e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8001b42:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001b44:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b46:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	f000 80e2 	beq.w	8001d14 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001b50:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001b52:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b54:	b91d      	cbnz	r5, 8001b5e <HAL_DMA_Start_IT+0x146>
 8001b56:	f1b9 0f00 	cmp.w	r9, #0
 8001b5a:	f000 80e1 	beq.w	8001d20 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	f023 031e 	bic.w	r3, r3, #30
 8001b64:	f043 0316 	orr.w	r3, r3, #22
 8001b68:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001b6a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001b6e:	b11b      	cbz	r3, 8001b78 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b78:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	03d2      	lsls	r2, r2, #15
 8001b80:	d503      	bpl.n	8001b8a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001b8a:	b11f      	cbz	r7, 8001b94 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b94:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6023      	str	r3, [r4, #0]
}
 8001b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40020058 	.word	0x40020058
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bb0:	4f61      	ldr	r7, [pc, #388]	; (8001d38 <HAL_DMA_Start_IT+0x320>)
 8001bb2:	4e62      	ldr	r6, [pc, #392]	; (8001d3c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bb8:	42b4      	cmp	r4, r6
 8001bba:	bf18      	it	ne
 8001bbc:	42bc      	cmpne	r4, r7
 8001bbe:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2701      	moveq	r7, #1
 8001bc6:	2700      	movne	r7, #0
 8001bc8:	42b4      	cmp	r4, r6
 8001bca:	bf08      	it	eq
 8001bcc:	f047 0701 	orreq.w	r7, r7, #1
 8001bd0:	3614      	adds	r6, #20
 8001bd2:	42b4      	cmp	r4, r6
 8001bd4:	bf08      	it	eq
 8001bd6:	f047 0701 	orreq.w	r7, r7, #1
 8001bda:	3614      	adds	r6, #20
 8001bdc:	42b4      	cmp	r4, r6
 8001bde:	bf08      	it	eq
 8001be0:	f047 0701 	orreq.w	r7, r7, #1
 8001be4:	3614      	adds	r6, #20
 8001be6:	42b4      	cmp	r4, r6
 8001be8:	bf08      	it	eq
 8001bea:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8001bee:	6826      	ldr	r6, [r4, #0]
 8001bf0:	f026 0601 	bic.w	r6, r6, #1
 8001bf4:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bf6:	4e52      	ldr	r6, [pc, #328]	; (8001d40 <HAL_DMA_Start_IT+0x328>)
 8001bf8:	42b4      	cmp	r4, r6
 8001bfa:	bf08      	it	eq
 8001bfc:	f047 0701 	orreq.w	r7, r7, #1
 8001c00:	b917      	cbnz	r7, 8001c08 <HAL_DMA_Start_IT+0x1f0>
 8001c02:	4f50      	ldr	r7, [pc, #320]	; (8001d44 <HAL_DMA_Start_IT+0x32c>)
 8001c04:	42bc      	cmp	r4, r7
 8001c06:	d10b      	bne.n	8001c20 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c08:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8001c0c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001c0e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001c12:	b117      	cbz	r7, 8001c1a <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c14:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8001c18:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c1a:	f1b9 0f00 	cmp.w	r9, #0
 8001c1e:	d183      	bne.n	8001b28 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c20:	4f46      	ldr	r7, [pc, #280]	; (8001d3c <HAL_DMA_Start_IT+0x324>)
 8001c22:	f8df e114 	ldr.w	lr, [pc, #276]	; 8001d38 <HAL_DMA_Start_IT+0x320>
 8001c26:	4574      	cmp	r4, lr
 8001c28:	bf18      	it	ne
 8001c2a:	42bc      	cmpne	r4, r7
 8001c2c:	f10e 0e14 	add.w	lr, lr, #20
 8001c30:	bf0c      	ite	eq
 8001c32:	2701      	moveq	r7, #1
 8001c34:	2700      	movne	r7, #0
 8001c36:	4574      	cmp	r4, lr
 8001c38:	bf08      	it	eq
 8001c3a:	f047 0701 	orreq.w	r7, r7, #1
 8001c3e:	f10e 0e14 	add.w	lr, lr, #20
 8001c42:	4574      	cmp	r4, lr
 8001c44:	bf08      	it	eq
 8001c46:	f047 0701 	orreq.w	r7, r7, #1
 8001c4a:	f10e 0e14 	add.w	lr, lr, #20
 8001c4e:	4574      	cmp	r4, lr
 8001c50:	bf08      	it	eq
 8001c52:	f047 0701 	orreq.w	r7, r7, #1
 8001c56:	f10e 0e14 	add.w	lr, lr, #20
 8001c5a:	4574      	cmp	r4, lr
 8001c5c:	bf08      	it	eq
 8001c5e:	f047 0701 	orreq.w	r7, r7, #1
 8001c62:	f10e 0e14 	add.w	lr, lr, #20
 8001c66:	4574      	cmp	r4, lr
 8001c68:	bf08      	it	eq
 8001c6a:	f047 0701 	orreq.w	r7, r7, #1
 8001c6e:	b917      	cbnz	r7, 8001c76 <HAL_DMA_Start_IT+0x25e>
 8001c70:	4f34      	ldr	r7, [pc, #208]	; (8001d44 <HAL_DMA_Start_IT+0x32c>)
 8001c72:	42bc      	cmp	r4, r7
 8001c74:	d154      	bne.n	8001d20 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c76:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8001c7a:	2701      	movs	r7, #1
 8001c7c:	f000 0e1f 	and.w	lr, r0, #31
 8001c80:	fa07 f70e 	lsl.w	r7, r7, lr
 8001c84:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001c88:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d043      	beq.n	8001d1a <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001c92:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001c94:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	f023 030e 	bic.w	r3, r3, #14
 8001c9c:	f043 030a 	orr.w	r3, r3, #10
 8001ca0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001ca2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d02d      	beq.n	8001d06 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_DMA_Start_IT+0x320>)
 8001cb4:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_DMA_Start_IT+0x324>)
 8001cb6:	4294      	cmp	r4, r2
 8001cb8:	bf18      	it	ne
 8001cba:	429c      	cmpne	r4, r3
 8001cbc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	4294      	cmp	r4, r2
 8001cc8:	bf08      	it	eq
 8001cca:	f043 0301 	orreq.w	r3, r3, #1
 8001cce:	3214      	adds	r2, #20
 8001cd0:	4294      	cmp	r4, r2
 8001cd2:	bf08      	it	eq
 8001cd4:	f043 0301 	orreq.w	r3, r3, #1
 8001cd8:	3214      	adds	r2, #20
 8001cda:	4294      	cmp	r4, r2
 8001cdc:	bf08      	it	eq
 8001cde:	f043 0301 	orreq.w	r3, r3, #1
 8001ce2:	3214      	adds	r2, #20
 8001ce4:	4294      	cmp	r4, r2
 8001ce6:	bf08      	it	eq
 8001ce8:	f043 0301 	orreq.w	r3, r3, #1
 8001cec:	3214      	adds	r2, #20
 8001cee:	4294      	cmp	r4, r2
 8001cf0:	bf08      	it	eq
 8001cf2:	f043 0301 	orreq.w	r3, r3, #1
 8001cf6:	3214      	adds	r2, #20
 8001cf8:	4294      	cmp	r4, r2
 8001cfa:	bf08      	it	eq
 8001cfc:	f043 0301 	orreq.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f43f af47 	beq.w	8001b94 <HAL_DMA_Start_IT+0x17c>
 8001d06:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8001d0a:	e735      	b.n	8001b78 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001d10:	2002      	movs	r0, #2
}
 8001d12:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001d14:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001d16:	60e1      	str	r1, [r4, #12]
 8001d18:	e71c      	b.n	8001b54 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001d1a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001d1c:	60e1      	str	r1, [r4, #12]
 8001d1e:	e7ba      	b.n	8001c96 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	f023 030e 	bic.w	r3, r3, #14
 8001d26:	f043 030a 	orr.w	r3, r3, #10
 8001d2a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ba      	bne.n	8001caa <HAL_DMA_Start_IT+0x292>
 8001d34:	e7bd      	b.n	8001cb2 <HAL_DMA_Start_IT+0x29a>
 8001d36:	bf00      	nop
 8001d38:	5802541c 	.word	0x5802541c
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	58025480 	.word	0x58025480
 8001d44:	58025494 	.word	0x58025494

08001d48 <HAL_DMA_IRQHandler>:
{
 8001d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8001d4c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d4e:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <HAL_DMA_IRQHandler+0x280>)
{
 8001d50:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d52:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8001d54:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d56:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8001d58:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	4a9b      	ldr	r2, [pc, #620]	; (8001fcc <HAL_DMA_IRQHandler+0x284>)
 8001d5e:	489c      	ldr	r0, [pc, #624]	; (8001fd0 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8001d60:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d62:	4293      	cmp	r3, r2
 8001d64:	bf18      	it	ne
 8001d66:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8001d68:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2001      	moveq	r0, #1
 8001d6e:	2000      	movne	r0, #0
 8001d70:	d04f      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xca>
 8001d72:	3218      	adds	r2, #24
 8001d74:	f8df c260 	ldr.w	ip, [pc, #608]	; 8001fd8 <HAL_DMA_IRQHandler+0x290>
 8001d78:	4563      	cmp	r3, ip
 8001d7a:	bf18      	it	ne
 8001d7c:	4293      	cmpne	r3, r2
 8001d7e:	f10c 0c18 	add.w	ip, ip, #24
 8001d82:	bf0c      	ite	eq
 8001d84:	2201      	moveq	r2, #1
 8001d86:	2200      	movne	r2, #0
 8001d88:	4563      	cmp	r3, ip
 8001d8a:	bf08      	it	eq
 8001d8c:	f042 0201 	orreq.w	r2, r2, #1
 8001d90:	f10c 0c18 	add.w	ip, ip, #24
 8001d94:	4563      	cmp	r3, ip
 8001d96:	bf08      	it	eq
 8001d98:	f042 0201 	orreq.w	r2, r2, #1
 8001d9c:	f10c 0c18 	add.w	ip, ip, #24
 8001da0:	4563      	cmp	r3, ip
 8001da2:	bf08      	it	eq
 8001da4:	f042 0201 	orreq.w	r2, r2, #1
 8001da8:	f10c 0c18 	add.w	ip, ip, #24
 8001dac:	4563      	cmp	r3, ip
 8001dae:	bf08      	it	eq
 8001db0:	f042 0201 	orreq.w	r2, r2, #1
 8001db4:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 8001db8:	4563      	cmp	r3, ip
 8001dba:	bf08      	it	eq
 8001dbc:	f042 0201 	orreq.w	r2, r2, #1
 8001dc0:	f10c 0c18 	add.w	ip, ip, #24
 8001dc4:	4563      	cmp	r3, ip
 8001dc6:	bf08      	it	eq
 8001dc8:	f042 0201 	orreq.w	r2, r2, #1
 8001dcc:	f10c 0c18 	add.w	ip, ip, #24
 8001dd0:	4563      	cmp	r3, ip
 8001dd2:	bf08      	it	eq
 8001dd4:	f042 0201 	orreq.w	r2, r2, #1
 8001dd8:	f10c 0c18 	add.w	ip, ip, #24
 8001ddc:	4563      	cmp	r3, ip
 8001dde:	bf08      	it	eq
 8001de0:	f042 0201 	orreq.w	r2, r2, #1
 8001de4:	f10c 0c18 	add.w	ip, ip, #24
 8001de8:	4563      	cmp	r3, ip
 8001dea:	bf08      	it	eq
 8001dec:	f042 0201 	orreq.w	r2, r2, #1
 8001df0:	f10c 0c18 	add.w	ip, ip, #24
 8001df4:	4563      	cmp	r3, ip
 8001df6:	bf08      	it	eq
 8001df8:	f042 0201 	orreq.w	r2, r2, #1
 8001dfc:	f10c 0c18 	add.w	ip, ip, #24
 8001e00:	4563      	cmp	r3, ip
 8001e02:	bf08      	it	eq
 8001e04:	f042 0201 	orreq.w	r2, r2, #1
 8001e08:	b91a      	cbnz	r2, 8001e12 <HAL_DMA_IRQHandler+0xca>
 8001e0a:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_DMA_IRQHandler+0x28c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 824b 	bne.w	80022a8 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e12:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8001e14:	2208      	movs	r2, #8
 8001e16:	f001 0c1f 	and.w	ip, r1, #31
 8001e1a:	fa02 f20c 	lsl.w	r2, r2, ip
 8001e1e:	4217      	tst	r7, r2
 8001e20:	f040 817d 	bne.w	800211e <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e24:	fa27 f20c 	lsr.w	r2, r7, ip
 8001e28:	07d2      	lsls	r2, r2, #31
 8001e2a:	d50a      	bpl.n	8001e42 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	0612      	lsls	r2, r2, #24
 8001e30:	d507      	bpl.n	8001e42 <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e32:	2201      	movs	r2, #1
 8001e34:	fa02 f20c 	lsl.w	r2, r2, ip
 8001e38:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e3a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001e3c:	f042 0202 	orr.w	r2, r2, #2
 8001e40:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e42:	f04f 0e04 	mov.w	lr, #4
 8001e46:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001e4a:	ea1e 0f07 	tst.w	lr, r7
 8001e4e:	d05a      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d14f      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x1ac>
 8001e54:	4a60      	ldr	r2, [pc, #384]	; (8001fd8 <HAL_DMA_IRQHandler+0x290>)
 8001e56:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001fdc <HAL_DMA_IRQHandler+0x294>
 8001e5a:	4543      	cmp	r3, r8
 8001e5c:	bf18      	it	ne
 8001e5e:	4293      	cmpne	r3, r2
 8001e60:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8001e64:	bf0c      	ite	eq
 8001e66:	2201      	moveq	r2, #1
 8001e68:	2200      	movne	r2, #0
 8001e6a:	4543      	cmp	r3, r8
 8001e6c:	bf08      	it	eq
 8001e6e:	f042 0201 	orreq.w	r2, r2, #1
 8001e72:	f108 0818 	add.w	r8, r8, #24
 8001e76:	4543      	cmp	r3, r8
 8001e78:	bf08      	it	eq
 8001e7a:	f042 0201 	orreq.w	r2, r2, #1
 8001e7e:	f108 0818 	add.w	r8, r8, #24
 8001e82:	4543      	cmp	r3, r8
 8001e84:	bf08      	it	eq
 8001e86:	f042 0201 	orreq.w	r2, r2, #1
 8001e8a:	f108 0818 	add.w	r8, r8, #24
 8001e8e:	4543      	cmp	r3, r8
 8001e90:	bf08      	it	eq
 8001e92:	f042 0201 	orreq.w	r2, r2, #1
 8001e96:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8001e9a:	4543      	cmp	r3, r8
 8001e9c:	bf08      	it	eq
 8001e9e:	f042 0201 	orreq.w	r2, r2, #1
 8001ea2:	f108 0818 	add.w	r8, r8, #24
 8001ea6:	4543      	cmp	r3, r8
 8001ea8:	bf08      	it	eq
 8001eaa:	f042 0201 	orreq.w	r2, r2, #1
 8001eae:	f108 0818 	add.w	r8, r8, #24
 8001eb2:	4543      	cmp	r3, r8
 8001eb4:	bf08      	it	eq
 8001eb6:	f042 0201 	orreq.w	r2, r2, #1
 8001eba:	f108 0818 	add.w	r8, r8, #24
 8001ebe:	4543      	cmp	r3, r8
 8001ec0:	bf08      	it	eq
 8001ec2:	f042 0201 	orreq.w	r2, r2, #1
 8001ec6:	f108 0818 	add.w	r8, r8, #24
 8001eca:	4543      	cmp	r3, r8
 8001ecc:	bf08      	it	eq
 8001ece:	f042 0201 	orreq.w	r2, r2, #1
 8001ed2:	f108 0818 	add.w	r8, r8, #24
 8001ed6:	4543      	cmp	r3, r8
 8001ed8:	bf08      	it	eq
 8001eda:	f042 0201 	orreq.w	r2, r2, #1
 8001ede:	f108 0818 	add.w	r8, r8, #24
 8001ee2:	4543      	cmp	r3, r8
 8001ee4:	bf08      	it	eq
 8001ee6:	f042 0201 	orreq.w	r2, r2, #1
 8001eea:	b91a      	cbnz	r2, 8001ef4 <HAL_DMA_IRQHandler+0x1ac>
 8001eec:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <HAL_DMA_IRQHandler+0x28c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f040 8214 	bne.w	800231c <HAL_DMA_IRQHandler+0x5d4>
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	0792      	lsls	r2, r2, #30
 8001ef8:	d505      	bpl.n	8001f06 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001efa:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001efe:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001f00:	f042 0204 	orr.w	r2, r2, #4
 8001f04:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f06:	2210      	movs	r2, #16
 8001f08:	fa02 fc0c 	lsl.w	ip, r2, ip
 8001f0c:	ea1c 0f07 	tst.w	ip, r7
 8001f10:	d069      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d145      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x25a>
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_DMA_IRQHandler+0x290>)
 8001f18:	4830      	ldr	r0, [pc, #192]	; (8001fdc <HAL_DMA_IRQHandler+0x294>)
 8001f1a:	4283      	cmp	r3, r0
 8001f1c:	bf18      	it	ne
 8001f1e:	4293      	cmpne	r3, r2
 8001f20:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001f24:	bf0c      	ite	eq
 8001f26:	2201      	moveq	r2, #1
 8001f28:	2200      	movne	r2, #0
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	bf08      	it	eq
 8001f2e:	f042 0201 	orreq.w	r2, r2, #1
 8001f32:	3018      	adds	r0, #24
 8001f34:	4283      	cmp	r3, r0
 8001f36:	bf08      	it	eq
 8001f38:	f042 0201 	orreq.w	r2, r2, #1
 8001f3c:	3018      	adds	r0, #24
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	bf08      	it	eq
 8001f42:	f042 0201 	orreq.w	r2, r2, #1
 8001f46:	3018      	adds	r0, #24
 8001f48:	4283      	cmp	r3, r0
 8001f4a:	bf08      	it	eq
 8001f4c:	f042 0201 	orreq.w	r2, r2, #1
 8001f50:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8001f54:	4283      	cmp	r3, r0
 8001f56:	bf08      	it	eq
 8001f58:	f042 0201 	orreq.w	r2, r2, #1
 8001f5c:	3018      	adds	r0, #24
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	bf08      	it	eq
 8001f62:	f042 0201 	orreq.w	r2, r2, #1
 8001f66:	3018      	adds	r0, #24
 8001f68:	4283      	cmp	r3, r0
 8001f6a:	bf08      	it	eq
 8001f6c:	f042 0201 	orreq.w	r2, r2, #1
 8001f70:	3018      	adds	r0, #24
 8001f72:	4283      	cmp	r3, r0
 8001f74:	bf08      	it	eq
 8001f76:	f042 0201 	orreq.w	r2, r2, #1
 8001f7a:	3018      	adds	r0, #24
 8001f7c:	4283      	cmp	r3, r0
 8001f7e:	bf08      	it	eq
 8001f80:	f042 0201 	orreq.w	r2, r2, #1
 8001f84:	3018      	adds	r0, #24
 8001f86:	4283      	cmp	r3, r0
 8001f88:	bf08      	it	eq
 8001f8a:	f042 0201 	orreq.w	r2, r2, #1
 8001f8e:	3018      	adds	r0, #24
 8001f90:	4283      	cmp	r3, r0
 8001f92:	bf08      	it	eq
 8001f94:	f042 0201 	orreq.w	r2, r2, #1
 8001f98:	b91a      	cbnz	r2, 8001fa2 <HAL_DMA_IRQHandler+0x25a>
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_DMA_IRQHandler+0x28c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	f040 81c5 	bne.w	800232c <HAL_DMA_IRQHandler+0x5e4>
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	0712      	lsls	r2, r2, #28
 8001fa6:	d51e      	bpl.n	8001fe6 <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fa8:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	0352      	lsls	r2, r2, #13
 8001fb0:	f100 814e 	bmi.w	8002250 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	05d2      	lsls	r2, r2, #23
 8001fb8:	d403      	bmi.n	8001fc2 <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001fc4:	b17b      	cbz	r3, 8001fe6 <HAL_DMA_IRQHandler+0x29e>
 8001fc6:	e00b      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x298>
 8001fc8:	24000000 	.word	0x24000000
 8001fcc:	40020028 	.word	0x40020028
 8001fd0:	40020010 	.word	0x40020010
 8001fd4:	400204b8 	.word	0x400204b8
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	4798      	blx	r3
 8001fe4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe6:	f001 011f 	and.w	r1, r1, #31
 8001fea:	2020      	movs	r0, #32
 8001fec:	4088      	lsls	r0, r1
 8001fee:	4238      	tst	r0, r7
 8001ff0:	d066      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ff2:	6832      	ldr	r2, [r6, #0]
 8001ff4:	4ba4      	ldr	r3, [pc, #656]	; (8002288 <HAL_DMA_IRQHandler+0x540>)
 8001ff6:	4fa5      	ldr	r7, [pc, #660]	; (800228c <HAL_DMA_IRQHandler+0x544>)
 8001ff8:	42ba      	cmp	r2, r7
 8001ffa:	bf18      	it	ne
 8001ffc:	429a      	cmpne	r2, r3
 8001ffe:	f107 0718 	add.w	r7, r7, #24
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	42ba      	cmp	r2, r7
 800200a:	bf08      	it	eq
 800200c:	f043 0301 	orreq.w	r3, r3, #1
 8002010:	3718      	adds	r7, #24
 8002012:	42ba      	cmp	r2, r7
 8002014:	bf08      	it	eq
 8002016:	f043 0301 	orreq.w	r3, r3, #1
 800201a:	3718      	adds	r7, #24
 800201c:	42ba      	cmp	r2, r7
 800201e:	bf08      	it	eq
 8002020:	f043 0301 	orreq.w	r3, r3, #1
 8002024:	3718      	adds	r7, #24
 8002026:	42ba      	cmp	r2, r7
 8002028:	bf08      	it	eq
 800202a:	f043 0301 	orreq.w	r3, r3, #1
 800202e:	3718      	adds	r7, #24
 8002030:	42ba      	cmp	r2, r7
 8002032:	bf08      	it	eq
 8002034:	f043 0301 	orreq.w	r3, r3, #1
 8002038:	3718      	adds	r7, #24
 800203a:	42ba      	cmp	r2, r7
 800203c:	bf08      	it	eq
 800203e:	f043 0301 	orreq.w	r3, r3, #1
 8002042:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002046:	42ba      	cmp	r2, r7
 8002048:	bf08      	it	eq
 800204a:	f043 0301 	orreq.w	r3, r3, #1
 800204e:	3718      	adds	r7, #24
 8002050:	42ba      	cmp	r2, r7
 8002052:	bf08      	it	eq
 8002054:	f043 0301 	orreq.w	r3, r3, #1
 8002058:	3718      	adds	r7, #24
 800205a:	42ba      	cmp	r2, r7
 800205c:	bf08      	it	eq
 800205e:	f043 0301 	orreq.w	r3, r3, #1
 8002062:	3718      	adds	r7, #24
 8002064:	42ba      	cmp	r2, r7
 8002066:	bf08      	it	eq
 8002068:	f043 0301 	orreq.w	r3, r3, #1
 800206c:	3718      	adds	r7, #24
 800206e:	42ba      	cmp	r2, r7
 8002070:	bf08      	it	eq
 8002072:	f043 0301 	orreq.w	r3, r3, #1
 8002076:	3718      	adds	r7, #24
 8002078:	42ba      	cmp	r2, r7
 800207a:	bf08      	it	eq
 800207c:	f043 0301 	orreq.w	r3, r3, #1
 8002080:	3718      	adds	r7, #24
 8002082:	42ba      	cmp	r2, r7
 8002084:	bf08      	it	eq
 8002086:	f043 0301 	orreq.w	r3, r3, #1
 800208a:	b91b      	cbnz	r3, 8002094 <HAL_DMA_IRQHandler+0x34c>
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_DMA_IRQHandler+0x548>)
 800208e:	429a      	cmp	r2, r3
 8002090:	f040 8161 	bne.w	8002356 <HAL_DMA_IRQHandler+0x60e>
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	06df      	lsls	r7, r3, #27
 8002098:	d512      	bpl.n	80020c0 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800209a:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800209c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80020a0:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80020a4:	f000 80b6 	beq.w	8002214 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80020ac:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020ae:	f000 80d8 	beq.w	8002262 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80020b2:	031f      	lsls	r7, r3, #12
 80020b4:	f140 80e3 	bpl.w	800227e <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 80020b8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80020ba:	b10b      	cbz	r3, 80020c0 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 80020bc:	4630      	mov	r0, r6
 80020be:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80c1 	beq.w	800224a <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80020c8:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80020ca:	07dc      	lsls	r4, r3, #31
 80020cc:	d51e      	bpl.n	800210c <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 80020ce:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80020d0:	2104      	movs	r1, #4
 80020d2:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d6:	496f      	ldr	r1, [pc, #444]	; (8002294 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 80020d8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020da:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 80020de:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e2:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e002      	b.n	80020ee <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	07d8      	lsls	r0, r3, #31
 80020ec:	d504      	bpl.n	80020f8 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	428b      	cmp	r3, r1
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	d9f7      	bls.n	80020e8 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80020fc:	bf4c      	ite	mi
 80020fe:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002100:	2301      	movpl	r3, #1
 8002102:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002106:	2300      	movs	r3, #0
 8002108:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800210c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 809b 	beq.w	800224a <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 8002114:	4630      	mov	r0, r6
}
 8002116:	b002      	add	sp, #8
 8002118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800211c:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800211e:	f8d3 e000 	ldr.w	lr, [r3]
 8002122:	f01e 0f04 	tst.w	lr, #4
 8002126:	d00a      	beq.n	800213e <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002128:	f8d3 e000 	ldr.w	lr, [r3]
 800212c:	f02e 0e04 	bic.w	lr, lr, #4
 8002130:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002134:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002136:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800213e:	fa27 f20c 	lsr.w	r2, r7, ip
 8002142:	07d2      	lsls	r2, r2, #31
 8002144:	f57f ae7d 	bpl.w	8001e42 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002148:	4a53      	ldr	r2, [pc, #332]	; (8002298 <HAL_DMA_IRQHandler+0x550>)
 800214a:	f8df e150 	ldr.w	lr, [pc, #336]	; 800229c <HAL_DMA_IRQHandler+0x554>
 800214e:	4573      	cmp	r3, lr
 8002150:	bf18      	it	ne
 8002152:	4293      	cmpne	r3, r2
 8002154:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002158:	bf0c      	ite	eq
 800215a:	2201      	moveq	r2, #1
 800215c:	2200      	movne	r2, #0
 800215e:	4573      	cmp	r3, lr
 8002160:	bf08      	it	eq
 8002162:	f042 0201 	orreq.w	r2, r2, #1
 8002166:	f10e 0e18 	add.w	lr, lr, #24
 800216a:	4573      	cmp	r3, lr
 800216c:	bf08      	it	eq
 800216e:	f042 0201 	orreq.w	r2, r2, #1
 8002172:	f10e 0e18 	add.w	lr, lr, #24
 8002176:	4573      	cmp	r3, lr
 8002178:	bf08      	it	eq
 800217a:	f042 0201 	orreq.w	r2, r2, #1
 800217e:	f10e 0e18 	add.w	lr, lr, #24
 8002182:	4573      	cmp	r3, lr
 8002184:	bf08      	it	eq
 8002186:	f042 0201 	orreq.w	r2, r2, #1
 800218a:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 800218e:	4573      	cmp	r3, lr
 8002190:	bf08      	it	eq
 8002192:	f042 0201 	orreq.w	r2, r2, #1
 8002196:	f10e 0e18 	add.w	lr, lr, #24
 800219a:	4573      	cmp	r3, lr
 800219c:	bf08      	it	eq
 800219e:	f042 0201 	orreq.w	r2, r2, #1
 80021a2:	f10e 0e18 	add.w	lr, lr, #24
 80021a6:	4573      	cmp	r3, lr
 80021a8:	bf08      	it	eq
 80021aa:	f042 0201 	orreq.w	r2, r2, #1
 80021ae:	f10e 0e18 	add.w	lr, lr, #24
 80021b2:	4573      	cmp	r3, lr
 80021b4:	bf08      	it	eq
 80021b6:	f042 0201 	orreq.w	r2, r2, #1
 80021ba:	f10e 0e18 	add.w	lr, lr, #24
 80021be:	4573      	cmp	r3, lr
 80021c0:	bf08      	it	eq
 80021c2:	f042 0201 	orreq.w	r2, r2, #1
 80021c6:	f10e 0e18 	add.w	lr, lr, #24
 80021ca:	4573      	cmp	r3, lr
 80021cc:	bf08      	it	eq
 80021ce:	f042 0201 	orreq.w	r2, r2, #1
 80021d2:	f10e 0e18 	add.w	lr, lr, #24
 80021d6:	4573      	cmp	r3, lr
 80021d8:	bf08      	it	eq
 80021da:	f042 0201 	orreq.w	r2, r2, #1
 80021de:	f10e 0e18 	add.w	lr, lr, #24
 80021e2:	4573      	cmp	r3, lr
 80021e4:	bf08      	it	eq
 80021e6:	f042 0201 	orreq.w	r2, r2, #1
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	f47f ae1e 	bne.w	8001e2c <HAL_DMA_IRQHandler+0xe4>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	f47f ae1b 	bne.w	8001e2c <HAL_DMA_IRQHandler+0xe4>
 80021f6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021f8:	2204      	movs	r2, #4
 80021fa:	fa02 f20c 	lsl.w	r2, r2, ip
 80021fe:	423a      	tst	r2, r7
 8002200:	f040 808c 	bne.w	800231c <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002204:	2210      	movs	r2, #16
 8002206:	fa02 fc0c 	lsl.w	ip, r2, ip
 800220a:	ea17 0f0c 	tst.w	r7, ip
 800220e:	f43f aeea 	beq.w	8001fe6 <HAL_DMA_IRQHandler+0x29e>
 8002212:	e680      	b.n	8001f16 <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002214:	f023 0316 	bic.w	r3, r3, #22
 8002218:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800221a:	6953      	ldr	r3, [r2, #20]
 800221c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002220:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	f023 0308 	bic.w	r3, r3, #8
 800222e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002230:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8002232:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8002234:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002236:	408b      	lsls	r3, r1
 8002238:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800223a:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800223c:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002240:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f af65 	bne.w	8002114 <HAL_DMA_IRQHandler+0x3cc>
}
 800224a:	b002      	add	sp, #8
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0318      	lsls	r0, r3, #12
 8002254:	f57f aeb5 	bpl.w	8001fc2 <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002258:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f aec0 	bne.w	8001fe0 <HAL_DMA_IRQHandler+0x298>
 8002260:	e6c1      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002262:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002266:	f47f af27 	bne.w	80020b8 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800226a:	6811      	ldr	r1, [r2, #0]
 800226c:	f021 0110 	bic.w	r1, r1, #16
 8002270:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002272:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8002274:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002278:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800227c:	e71c      	b.n	80020b8 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800227e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002280:	2b00      	cmp	r3, #0
 8002282:	f47f af1b 	bne.w	80020bc <HAL_DMA_IRQHandler+0x374>
 8002286:	e71b      	b.n	80020c0 <HAL_DMA_IRQHandler+0x378>
 8002288:	40020010 	.word	0x40020010
 800228c:	40020028 	.word	0x40020028
 8002290:	400204b8 	.word	0x400204b8
 8002294:	1b4e81b5 	.word	0x1b4e81b5
 8002298:	40020058 	.word	0x40020058
 800229c:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1c0      	bne.n	8002228 <HAL_DMA_IRQHandler+0x4e0>
 80022a6:	e7c3      	b.n	8002230 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_DMA_IRQHandler+0x690>)
 80022aa:	484c      	ldr	r0, [pc, #304]	; (80023dc <HAL_DMA_IRQHandler+0x694>)
 80022ac:	4283      	cmp	r3, r0
 80022ae:	bf18      	it	ne
 80022b0:	4293      	cmpne	r3, r2
 80022b2:	f100 0014 	add.w	r0, r0, #20
 80022b6:	bf0c      	ite	eq
 80022b8:	2201      	moveq	r2, #1
 80022ba:	2200      	movne	r2, #0
 80022bc:	4283      	cmp	r3, r0
 80022be:	bf08      	it	eq
 80022c0:	f042 0201 	orreq.w	r2, r2, #1
 80022c4:	3014      	adds	r0, #20
 80022c6:	4283      	cmp	r3, r0
 80022c8:	bf08      	it	eq
 80022ca:	f042 0201 	orreq.w	r2, r2, #1
 80022ce:	3014      	adds	r0, #20
 80022d0:	4283      	cmp	r3, r0
 80022d2:	bf08      	it	eq
 80022d4:	f042 0201 	orreq.w	r2, r2, #1
 80022d8:	3014      	adds	r0, #20
 80022da:	4283      	cmp	r3, r0
 80022dc:	bf08      	it	eq
 80022de:	f042 0201 	orreq.w	r2, r2, #1
 80022e2:	3014      	adds	r0, #20
 80022e4:	4283      	cmp	r3, r0
 80022e6:	bf08      	it	eq
 80022e8:	f042 0201 	orreq.w	r2, r2, #1
 80022ec:	b912      	cbnz	r2, 80022f4 <HAL_DMA_IRQHandler+0x5ac>
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <HAL_DMA_IRQHandler+0x698>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d1aa      	bne.n	800224a <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80022f4:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 80022f6:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80022f8:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80022fa:	f000 001f 	and.w	r0, r0, #31
 80022fe:	4085      	lsls	r5, r0
 8002300:	420d      	tst	r5, r1
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x5ee>
 8002304:	0757      	lsls	r7, r2, #29
 8002306:	d516      	bpl.n	8002336 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002308:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800230a:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800230c:	d547      	bpl.n	800239e <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800230e:	03d1      	lsls	r1, r2, #15
 8002310:	d44b      	bmi.n	80023aa <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002312:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f aefd 	bne.w	8002114 <HAL_DMA_IRQHandler+0x3cc>
 800231a:	e796      	b.n	800224a <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800231c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800231e:	2210      	movs	r2, #16
 8002320:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002324:	ea17 0f0c 	tst.w	r7, ip
 8002328:	f43f ae5d 	beq.w	8001fe6 <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	0750      	lsls	r0, r2, #29
 8002330:	f57f ae59 	bpl.w	8001fe6 <HAL_DMA_IRQHandler+0x29e>
 8002334:	e638      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002336:	2502      	movs	r5, #2
 8002338:	4085      	lsls	r5, r0
 800233a:	420d      	tst	r5, r1
 800233c:	d010      	beq.n	8002360 <HAL_DMA_IRQHandler+0x618>
 800233e:	0797      	lsls	r7, r2, #30
 8002340:	d50e      	bpl.n	8002360 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002342:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002344:	0414      	lsls	r4, r2, #16
 8002346:	d535      	bpl.n	80023b4 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002348:	03d0      	lsls	r0, r2, #15
 800234a:	d43f      	bmi.n	80023cc <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 800234c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800234e:	2b00      	cmp	r3, #0
 8002350:	f47f aee0 	bne.w	8002114 <HAL_DMA_IRQHandler+0x3cc>
 8002354:	e779      	b.n	800224a <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002356:	6813      	ldr	r3, [r2, #0]
 8002358:	079b      	lsls	r3, r3, #30
 800235a:	f57f aeb1 	bpl.w	80020c0 <HAL_DMA_IRQHandler+0x378>
 800235e:	e69c      	b.n	800209a <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002360:	2508      	movs	r5, #8
 8002362:	4085      	lsls	r5, r0
 8002364:	420d      	tst	r5, r1
 8002366:	f43f af70 	beq.w	800224a <HAL_DMA_IRQHandler+0x502>
 800236a:	0711      	lsls	r1, r2, #28
 800236c:	f57f af6d 	bpl.w	800224a <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002370:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8002372:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	f022 020e 	bic.w	r2, r2, #14
 8002378:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800237a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800237c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800237e:	fa03 f000 	lsl.w	r0, r3, r0
 8002382:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002384:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8002386:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800238a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800238e:	2a00      	cmp	r2, #0
 8002390:	f43f af5b 	beq.w	800224a <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 8002394:	4630      	mov	r0, r6
}
 8002396:	b002      	add	sp, #8
 8002398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800239c:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800239e:	0692      	lsls	r2, r2, #26
 80023a0:	d403      	bmi.n	80023aa <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f022 0204 	bic.w	r2, r2, #4
 80023a8:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80023aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f aeb1 	bne.w	8002114 <HAL_DMA_IRQHandler+0x3cc>
 80023b2:	e74a      	b.n	800224a <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80023b4:	f012 0220 	ands.w	r2, r2, #32
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ba:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80023bc:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023be:	f021 010a 	bic.w	r1, r1, #10
 80023c2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80023c4:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80023c8:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80023cc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f47f aea0 	bne.w	8002114 <HAL_DMA_IRQHandler+0x3cc>
 80023d4:	e739      	b.n	800224a <HAL_DMA_IRQHandler+0x502>
 80023d6:	bf00      	nop
 80023d8:	58025408 	.word	0x58025408
 80023dc:	5802541c 	.word	0x5802541c
 80023e0:	58025494 	.word	0x58025494

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023e8:	680c      	ldr	r4, [r1, #0]
{
 80023ea:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	f000 80a7 	beq.w	8002540 <HAL_GPIO_Init+0x15c>
 80023f2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	4f8a      	ldr	r7, [pc, #552]	; (8002620 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 80023f8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80023fe:	ea12 0e04 	ands.w	lr, r2, r4
 8002402:	f000 8096 	beq.w	8002532 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002406:	684d      	ldr	r5, [r1, #4]
 8002408:	f005 0903 	and.w	r9, r5, #3
 800240c:	f109 36ff 	add.w	r6, r9, #4294967295
 8002410:	2e01      	cmp	r6, #1
 8002412:	f240 8098 	bls.w	8002546 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002416:	f1b9 0f03 	cmp.w	r9, #3
 800241a:	f040 80d2 	bne.w	80025c2 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800241e:	fa09 f20c 	lsl.w	r2, r9, ip
 8002422:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8002426:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800242c:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002434:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002436:	d07c      	beq.n	8002532 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800243c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002440:	f003 0903 	and.w	r9, r3, #3
 8002444:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	f042 0202 	orr.w	r2, r2, #2
 800244a:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800244e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002456:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800245a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800245e:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	f002 0202 	and.w	r2, r2, #2
 8002466:	9201      	str	r2, [sp, #4]
 8002468:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800246e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002472:	4e6c      	ldr	r6, [pc, #432]	; (8002624 <HAL_GPIO_Init+0x240>)
 8002474:	42b0      	cmp	r0, r6
 8002476:	d028      	beq.n	80024ca <HAL_GPIO_Init+0xe6>
 8002478:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800247c:	42b0      	cmp	r0, r6
 800247e:	f000 80ac 	beq.w	80025da <HAL_GPIO_Init+0x1f6>
 8002482:	4e69      	ldr	r6, [pc, #420]	; (8002628 <HAL_GPIO_Init+0x244>)
 8002484:	42b0      	cmp	r0, r6
 8002486:	f000 80ad 	beq.w	80025e4 <HAL_GPIO_Init+0x200>
 800248a:	4e68      	ldr	r6, [pc, #416]	; (800262c <HAL_GPIO_Init+0x248>)
 800248c:	42b0      	cmp	r0, r6
 800248e:	f000 809f 	beq.w	80025d0 <HAL_GPIO_Init+0x1ec>
 8002492:	4e67      	ldr	r6, [pc, #412]	; (8002630 <HAL_GPIO_Init+0x24c>)
 8002494:	42b0      	cmp	r0, r6
 8002496:	f000 80af 	beq.w	80025f8 <HAL_GPIO_Init+0x214>
 800249a:	4e66      	ldr	r6, [pc, #408]	; (8002634 <HAL_GPIO_Init+0x250>)
 800249c:	42b0      	cmp	r0, r6
 800249e:	f000 80b0 	beq.w	8002602 <HAL_GPIO_Init+0x21e>
 80024a2:	4e65      	ldr	r6, [pc, #404]	; (8002638 <HAL_GPIO_Init+0x254>)
 80024a4:	42b0      	cmp	r0, r6
 80024a6:	f000 80a2 	beq.w	80025ee <HAL_GPIO_Init+0x20a>
 80024aa:	4e64      	ldr	r6, [pc, #400]	; (800263c <HAL_GPIO_Init+0x258>)
 80024ac:	42b0      	cmp	r0, r6
 80024ae:	f000 80ad 	beq.w	800260c <HAL_GPIO_Init+0x228>
 80024b2:	4e63      	ldr	r6, [pc, #396]	; (8002640 <HAL_GPIO_Init+0x25c>)
 80024b4:	42b0      	cmp	r0, r6
 80024b6:	f000 80ae 	beq.w	8002616 <HAL_GPIO_Init+0x232>
 80024ba:	4e62      	ldr	r6, [pc, #392]	; (8002644 <HAL_GPIO_Init+0x260>)
 80024bc:	42b0      	cmp	r0, r6
 80024be:	bf0c      	ite	eq
 80024c0:	2609      	moveq	r6, #9
 80024c2:	260a      	movne	r6, #10
 80024c4:	fa06 f609 	lsl.w	r6, r6, r9
 80024c8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ca:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80024d6:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 80024da:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80024dc:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80024e0:	bf0c      	ite	eq
 80024e2:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80024e4:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80024ec:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 80024f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80024f4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80024f8:	bf0c      	ite	eq
 80024fa:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80024fc:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002500:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8002504:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002508:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800250c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002510:	bf0c      	ite	eq
 8002512:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002514:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800251a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800251e:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002522:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8002526:	bf54      	ite	pl
 8002528:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800252a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800252e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8002532:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002534:	f10c 0c02 	add.w	ip, ip, #2
 8002538:	fa34 f203 	lsrs.w	r2, r4, r3
 800253c:	f47f af5d 	bne.w	80023fa <HAL_GPIO_Init+0x16>
  }
}
 8002540:	b003      	add	sp, #12
 8002542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002546:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800254a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800254c:	fa08 f80c 	lsl.w	r8, r8, ip
 8002550:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002554:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002556:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	fa06 f60c 	lsl.w	r6, r6, ip
 800255e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002562:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002564:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002568:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002574:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002576:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257e:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002582:	fa06 f60c 	lsl.w	r6, r6, ip
 8002586:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 800258a:	fa09 f20c 	lsl.w	r2, r9, ip
 800258e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	f47f af49 	bne.w	8002426 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8002594:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002598:	f003 0b07 	and.w	fp, r3, #7
 800259c:	260f      	movs	r6, #15
 800259e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80025a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80025a6:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025aa:	fa06 f60b 	lsl.w	r6, r6, fp
 80025ae:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b2:	690e      	ldr	r6, [r1, #16]
 80025b4:	fa06 f60b 	lsl.w	r6, r6, fp
 80025b8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80025bc:	f8c9 6020 	str.w	r6, [r9, #32]
 80025c0:	e731      	b.n	8002426 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025c2:	f04f 0803 	mov.w	r8, #3
 80025c6:	fa08 f80c 	lsl.w	r8, r8, ip
 80025ca:	ea6f 0808 	mvn.w	r8, r8
 80025ce:	e7d2      	b.n	8002576 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d0:	2603      	movs	r6, #3
 80025d2:	fa06 f609 	lsl.w	r6, r6, r9
 80025d6:	4332      	orrs	r2, r6
 80025d8:	e777      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 80025da:	2601      	movs	r6, #1
 80025dc:	fa06 f609 	lsl.w	r6, r6, r9
 80025e0:	4332      	orrs	r2, r6
 80025e2:	e772      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 80025e4:	2602      	movs	r6, #2
 80025e6:	fa06 f609 	lsl.w	r6, r6, r9
 80025ea:	4332      	orrs	r2, r6
 80025ec:	e76d      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 80025ee:	2606      	movs	r6, #6
 80025f0:	fa06 f609 	lsl.w	r6, r6, r9
 80025f4:	4332      	orrs	r2, r6
 80025f6:	e768      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 80025f8:	2604      	movs	r6, #4
 80025fa:	fa06 f609 	lsl.w	r6, r6, r9
 80025fe:	4332      	orrs	r2, r6
 8002600:	e763      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 8002602:	2605      	movs	r6, #5
 8002604:	fa06 f609 	lsl.w	r6, r6, r9
 8002608:	4332      	orrs	r2, r6
 800260a:	e75e      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 800260c:	2607      	movs	r6, #7
 800260e:	fa06 f609 	lsl.w	r6, r6, r9
 8002612:	4332      	orrs	r2, r6
 8002614:	e759      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 8002616:	2608      	movs	r6, #8
 8002618:	fa06 f609 	lsl.w	r6, r6, r9
 800261c:	4332      	orrs	r2, r6
 800261e:	e754      	b.n	80024ca <HAL_GPIO_Init+0xe6>
 8002620:	58024400 	.word	0x58024400
 8002624:	58020000 	.word	0x58020000
 8002628:	58020800 	.word	0x58020800
 800262c:	58020c00 	.word	0x58020c00
 8002630:	58021000 	.word	0x58021000
 8002634:	58021400 	.word	0x58021400
 8002638:	58021800 	.word	0x58021800
 800263c:	58021c00 	.word	0x58021c00
 8002640:	58022000 	.word	0x58022000
 8002644:	58022400 	.word	0x58022400

08002648 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002648:	b902      	cbnz	r2, 800264c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800264a:	0409      	lsls	r1, r1, #16
 800264c:	6181      	str	r1, [r0, #24]
  }
}
 800264e:	4770      	bx	lr

08002650 <I2S_DMATxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002650:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002652:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002654:	b94b      	cbnz	r3, 800266a <I2S_DMATxCplt+0x1a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002656:	6801      	ldr	r1, [r0, #0]

    hi2s->TxXferCount = (uint16_t) 0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 8002658:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800265c:	688a      	ldr	r2, [r1, #8]
 800265e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002662:	608a      	str	r2, [r1, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 8002664:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002666:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 800266a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800266c:	4718      	bx	r3
 800266e:	bf00      	nop

08002670 <I2S_DMATxHalfCplt>:
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002670:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 8002672:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002674:	4718      	bx	r3
 8002676:	bf00      	nop

08002678 <I2S_DMARxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002678:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800267a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800267c:	b94b      	cbnz	r3, 8002692 <I2S_DMARxCplt+0x1a>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800267e:	6801      	ldr	r1, [r0, #0]
    hi2s->RxXferCount = (uint16_t)0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 8002680:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002684:	688a      	ldr	r2, [r1, #8]
 8002686:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800268a:	608a      	str	r2, [r1, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 800268c:	8743      	strh	r3, [r0, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 800268e:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 8002692:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002694:	4718      	bx	r3
 8002696:	bf00      	nop

08002698 <I2S_DMARxHalfCplt>:
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002698:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 800269a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800269c:	4718      	bx	r3
 800269e:	bf00      	nop

080026a0 <I2S_DMAError>:
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
  hi2s->TxXferCount = (uint16_t) 0UL;
 80026a2:	2200      	movs	r2, #0
  hi2s->RxXferCount = (uint16_t) 0UL;

  hi2s->State = HAL_I2S_STATE_READY;
 80026a4:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80026a8:	6801      	ldr	r1, [r0, #0]
 80026aa:	688b      	ldr	r3, [r1, #8]
 80026ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b0:	608b      	str	r3, [r1, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80026b2:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80026b4:	8742      	strh	r2, [r0, #58]	; 0x3a
  hi2s->State = HAL_I2S_STATE_READY;
 80026b6:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 80026bc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6503      	str	r3, [r0, #80]	; 0x50
  hi2s->ErrorCallback(hi2s);
 80026c4:	4710      	bx	r2
 80026c6:	bf00      	nop

080026c8 <HAL_I2S_ErrorCallback>:
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <HAL_I2SEx_TxRxHalfCpltCallback>:
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <HAL_I2SEx_TxRxCpltCallback>:
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <HAL_I2S_Init>:
  if (hi2s == NULL)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	f000 80b6 	beq.w	8002846 <HAL_I2S_Init+0x172>
{
 80026da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026dc:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80026e0:	4604      	mov	r4, r0
 80026e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026e6:	b9ab      	cbnz	r3, 8002714 <HAL_I2S_Init+0x40>
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 80026e8:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_I2S_Init+0x1a4>)
    hi2s->Lock = HAL_UNLOCKED;
 80026ea:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 80026ee:	6543      	str	r3, [r0, #84]	; 0x54
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 80026f0:	4962      	ldr	r1, [pc, #392]	; (800287c <HAL_I2S_Init+0x1a8>)
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_I2S_Init+0x1ac>)
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 80026f4:	4d63      	ldr	r5, [pc, #396]	; (8002884 <HAL_I2S_Init+0x1b0>)
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 80026f6:	4864      	ldr	r0, [pc, #400]	; (8002888 <HAL_I2S_Init+0x1b4>)
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 80026f8:	4a64      	ldr	r2, [pc, #400]	; (800288c <HAL_I2S_Init+0x1b8>)
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 80026fa:	e9c4 5116 	strd	r5, r1, [r4, #88]	; 0x58
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 80026fe:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8002702:	4963      	ldr	r1, [pc, #396]	; (8002890 <HAL_I2S_Init+0x1bc>)
    if (hi2s->MspInitCallback == NULL)
 8002704:	6f23      	ldr	r3, [r4, #112]	; 0x70
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8002706:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
    if (hi2s->MspInitCallback == NULL)
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80a1 	beq.w	8002852 <HAL_I2S_Init+0x17e>
    hi2s->MspInitCallback(hi2s);
 8002710:	4620      	mov	r0, r4
 8002712:	4798      	blx	r3
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002714:	2302      	movs	r3, #2
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002716:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002718:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	07db      	lsls	r3, r3, #31
 8002720:	d448      	bmi.n	80027b4 <HAL_I2S_Init+0xe0>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002722:	6865      	ldr	r5, [r4, #4]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002724:	2300      	movs	r3, #0
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002726:	f025 0002 	bic.w	r0, r5, #2
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800272a:	6513      	str	r3, [r2, #80]	; 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800272c:	2d0a      	cmp	r5, #10
 800272e:	bf18      	it	ne
 8002730:	2804      	cmpne	r0, #4
 8002732:	bf0c      	ite	eq
 8002734:	2001      	moveq	r0, #1
 8002736:	2000      	movne	r0, #0
 8002738:	d141      	bne.n	80027be <HAL_I2S_Init+0xea>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800273a:	6963      	ldr	r3, [r4, #20]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d06b      	beq.n	8002818 <HAL_I2S_Init+0x144>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002740:	2100      	movs	r1, #0
 8002742:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002746:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        packetlength = 1UL;
 800274a:	2a00      	cmp	r2, #0
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800274c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
        packetlength = 1UL;
 8002750:	bf14      	ite	ne
 8002752:	2602      	movne	r6, #2
 8002754:	2601      	moveq	r6, #1
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002756:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800275a:	f002 f885 	bl	8004868 <HAL_RCCEx_GetPeriphCLKFreq>
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800275e:	6921      	ldr	r1, [r4, #16]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002760:	fab5 f585 	clz	r5, r5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002764:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002768:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800276c:	d06d      	beq.n	800284a <HAL_I2S_Init+0x176>
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800276e:	2320      	movs	r3, #32
 8002770:	40eb      	lsrs	r3, r5
 8002772:	fb06 f303 	mul.w	r3, r6, r3
 8002776:	6962      	ldr	r2, [r4, #20]
 8002778:	fbb0 f0f3 	udiv	r0, r0, r3
 800277c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002780:	0043      	lsls	r3, r0, #1
 8002782:	fbb3 f3f2 	udiv	r3, r3, r2
      tmp = tmp / 10UL;
 8002786:	4a43      	ldr	r2, [pc, #268]	; (8002894 <HAL_I2S_Init+0x1c0>)
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002788:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800278e:	091e      	lsrs	r6, r3, #4
 8002790:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002794:	f1a6 0201 	sub.w	r2, r6, #1
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	0952      	lsrs	r2, r2, #5
 800279e:	ea12 02d3 	ands.w	r2, r2, r3, lsr #3
 80027a2:	d101      	bne.n	80027a8 <HAL_I2S_Init+0xd4>
 80027a4:	2eff      	cmp	r6, #255	; 0xff
 80027a6:	d940      	bls.n	800282a <HAL_I2S_Init+0x156>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      return  HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	6523      	str	r3, [r4, #80]	; 0x50
}
 80027b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2S_DISABLE(hi2s);
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e7b1      	b.n	8002722 <HAL_I2S_Init+0x4e>
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80027be:	6921      	ldr	r1, [r4, #16]
 80027c0:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80027c2:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 80027c6:	4333      	orrs	r3, r6
 80027c8:	4e33      	ldr	r6, [pc, #204]	; (8002898 <HAL_I2S_Init+0x1c4>)
 80027ca:	403e      	ands	r6, r7
 80027cc:	4333      	orrs	r3, r6
 80027ce:	69a6      	ldr	r6, [r4, #24]
 80027d0:	4333      	orrs	r3, r6
 80027d2:	6a26      	ldr	r6, [r4, #32]
 80027d4:	4333      	orrs	r3, r6
 80027d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80027d8:	4333      	orrs	r3, r6
 80027da:	432b      	orrs	r3, r5
 80027dc:	430b      	orrs	r3, r1
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80027de:	f640 71f8 	movw	r1, #4088	; 0xff8
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6513      	str	r3, [r2, #80]	; 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80027e8:	6191      	str	r1, [r2, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80027ea:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80027ec:	69e1      	ldr	r1, [r4, #28]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80027f4:	68d3      	ldr	r3, [r2, #12]
 80027f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027fa:	430b      	orrs	r3, r1
 80027fc:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80027fe:	b128      	cbz	r0, 800280c <HAL_I2S_Init+0x138>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002800:	68d3      	ldr	r3, [r2, #12]
 8002802:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002808:	430b      	orrs	r3, r1
 800280a:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800280c:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800280e:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002810:	6520      	str	r0, [r4, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002812:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 8002816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002818:	6921      	ldr	r1, [r4, #16]
 800281a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800281e:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_I2S_Init+0x1c8>)
 8002822:	403b      	ands	r3, r7
 8002824:	4333      	orrs	r3, r6
 8002826:	6513      	str	r3, [r2, #80]	; 0x50
 8002828:	e7ca      	b.n	80027c0 <HAL_I2S_Init+0xec>
    if (i2sdiv == 0UL)
 800282a:	b9b6      	cbnz	r6, 800285a <HAL_I2S_Init+0x186>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800282c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002830:	e9d4 2500 	ldrd	r2, r5, [r4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002834:	f025 0002 	bic.w	r0, r5, #2
 8002838:	2d0a      	cmp	r5, #10
 800283a:	bf18      	it	ne
 800283c:	2804      	cmpne	r0, #4
 800283e:	bf0c      	ite	eq
 8002840:	2001      	moveq	r0, #1
 8002842:	2000      	movne	r0, #0
 8002844:	e7eb      	b.n	800281e <HAL_I2S_Init+0x14a>
    return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
}
 8002848:	4770      	bx	lr
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	40eb      	lsrs	r3, r5
 8002850:	e791      	b.n	8002776 <HAL_I2S_Init+0xa2>
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_I2S_Init+0x1cc>)
 8002854:	4613      	mov	r3, r2
 8002856:	6722      	str	r2, [r4, #112]	; 0x70
 8002858:	e75a      	b.n	8002710 <HAL_I2S_Init+0x3c>
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800285a:	062d      	lsls	r5, r5, #24
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002862:	6865      	ldr	r5, [r4, #4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002864:	f025 0002 	bic.w	r0, r5, #2
 8002868:	2d0a      	cmp	r5, #10
 800286a:	bf18      	it	ne
 800286c:	2804      	cmpne	r0, #4
 800286e:	bf0c      	ite	eq
 8002870:	2001      	moveq	r0, #1
 8002872:	2000      	movne	r0, #0
 8002874:	e7d3      	b.n	800281e <HAL_I2S_Init+0x14a>
 8002876:	bf00      	nop
 8002878:	08000875 	.word	0x08000875
 800287c:	080026d1 	.word	0x080026d1
 8002880:	08000791 	.word	0x08000791
 8002884:	080007e5 	.word	0x080007e5
 8002888:	08000839 	.word	0x08000839
 800288c:	080026c9 	.word	0x080026c9
 8002890:	080026cd 	.word	0x080026cd
 8002894:	cccccccd 	.word	0xcccccccd
 8002898:	fdff9040 	.word	0xfdff9040
 800289c:	fe00ffff 	.word	0xfe00ffff
 80028a0:	08000d91 	.word	0x08000d91

080028a4 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d04e      	beq.n	8002946 <HAL_I2S_Transmit_DMA+0xa2>
{
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 80028aa:	fab2 f582 	clz	r5, r2
 80028ae:	096d      	lsrs	r5, r5, #5
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d03c      	beq.n	800292e <HAL_I2S_Transmit_DMA+0x8a>
 80028b4:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 80028b6:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
 80028ba:	2801      	cmp	r0, #1
 80028bc:	b2c6      	uxtb	r6, r0
 80028be:	d134      	bne.n	800292a <HAL_I2S_Transmit_DMA+0x86>
  __HAL_LOCK(hi2s);
 80028c0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 80028c4:	2801      	cmp	r0, #1
 80028c6:	d030      	beq.n	800292a <HAL_I2S_Transmit_DMA+0x86>
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80028c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80028ca:	2303      	movs	r3, #3
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80028cc:	4f1f      	ldr	r7, [pc, #124]	; (800294c <HAL_I2S_Transmit_DMA+0xa8>)
  __HAL_LOCK(hi2s);
 80028ce:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 80028d2:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80028d4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->pRxBuffPtr  = NULL;
 80028d8:	6365      	str	r5, [r4, #52]	; 0x34
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80028da:	6525      	str	r5, [r4, #80]	; 0x50
  hi2s->TxXferSize  = Size;
 80028dc:	8622      	strh	r2, [r4, #48]	; 0x30
  hi2s->TxXferCount = Size;
 80028de:	8662      	strh	r2, [r4, #50]	; 0x32
  hi2s->RxXferSize  = (uint16_t)0UL;
 80028e0:	8725      	strh	r5, [r4, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80028e2:	6822      	ldr	r2, [r4, #0]
  hi2s->RxXferCount = (uint16_t)0UL;
 80028e4:	8765      	strh	r5, [r4, #58]	; 0x3a
                                 hi2s->TxXferCount))
 80028e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80028e8:	3220      	adds	r2, #32
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80028ea:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80028ec:	4f18      	ldr	r7, [pc, #96]	; (8002950 <HAL_I2S_Transmit_DMA+0xac>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80028ee:	b29b      	uxth	r3, r3
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80028f0:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80028f2:	4f18      	ldr	r7, [pc, #96]	; (8002954 <HAL_I2S_Transmit_DMA+0xb0>)
 80028f4:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80028f6:	f7ff f88f 	bl	8001a18 <HAL_DMA_Start_IT>
 80028fa:	b9d0      	cbnz	r0, 8002932 <HAL_I2S_Transmit_DMA+0x8e>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	0411      	lsls	r1, r2, #16
 8002902:	d403      	bmi.n	800290c <HAL_I2S_Transmit_DMA+0x68>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290a:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	07d2      	lsls	r2, r2, #31
 8002910:	d403      	bmi.n	800291a <HAL_I2S_Transmit_DMA+0x76>
    __HAL_I2S_ENABLE(hi2s);
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 800291a:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 800291c:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002924:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 8002928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800292a:	2002      	movs	r0, #2
}
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800292e:	2001      	movs	r0, #1
}
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002932:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 8002934:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800293c:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8002940:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8002944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8002946:	2001      	movs	r0, #1
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	08002671 	.word	0x08002671
 8002950:	08002651 	.word	0x08002651
 8002954:	080026a1 	.word	0x080026a1

08002958 <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002958:	2900      	cmp	r1, #0
 800295a:	d050      	beq.n	80029fe <HAL_I2S_Receive_DMA+0xa6>
{
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 800295e:	fab2 f582 	clz	r5, r2
 8002962:	4613      	mov	r3, r2
 8002964:	096d      	lsrs	r5, r5, #5
 8002966:	2a00      	cmp	r2, #0
 8002968:	d03d      	beq.n	80029e6 <HAL_I2S_Receive_DMA+0x8e>
  if (hi2s->State != HAL_I2S_STATE_READY)
 800296a:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 800296e:	4604      	mov	r4, r0
 8002970:	2a01      	cmp	r2, #1
 8002972:	b2d6      	uxtb	r6, r2
 8002974:	d135      	bne.n	80029e2 <HAL_I2S_Receive_DMA+0x8a>
  __HAL_LOCK(hi2s);
 8002976:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 800297a:	2a01      	cmp	r2, #1
 800297c:	d031      	beq.n	80029e2 <HAL_I2S_Receive_DMA+0x8a>
  hi2s->pRxBuffPtr  = pData;
 800297e:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002980:	460a      	mov	r2, r1
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8002982:	2104      	movs	r1, #4
  __HAL_LOCK(hi2s);
 8002984:	f880 604c 	strb.w	r6, [r0, #76]	; 0x4c
  hi2s->pTxBuffPtr  = NULL;
 8002988:	62c5      	str	r5, [r0, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 800298a:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800298e:	4f1d      	ldr	r7, [pc, #116]	; (8002a04 <HAL_I2S_Receive_DMA+0xac>)
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8002990:	6505      	str	r5, [r0, #80]	; 0x50
  hi2s->RxXferSize  = Size;
 8002992:	8703      	strh	r3, [r0, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8002994:	8743      	strh	r3, [r0, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002996:	6c80      	ldr	r0, [r0, #72]	; 0x48
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002998:	6821      	ldr	r1, [r4, #0]
  hi2s->TxXferSize  = (uint16_t)0UL;
 800299a:	8625      	strh	r5, [r4, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 800299c:	8665      	strh	r5, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 800299e:	3130      	adds	r1, #48	; 0x30
                                 hi2s->RxXferCount))
 80029a0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80029a2:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80029a4:	4f18      	ldr	r7, [pc, #96]	; (8002a08 <HAL_I2S_Receive_DMA+0xb0>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80029a6:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80029a8:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80029aa:	4f18      	ldr	r7, [pc, #96]	; (8002a0c <HAL_I2S_Receive_DMA+0xb4>)
 80029ac:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80029ae:	f7ff f833 	bl	8001a18 <HAL_DMA_Start_IT>
 80029b2:	b9d0      	cbnz	r0, 80029ea <HAL_I2S_Receive_DMA+0x92>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	0451      	lsls	r1, r2, #17
 80029ba:	d403      	bmi.n	80029c4 <HAL_I2S_Receive_DMA+0x6c>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c2:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	07d2      	lsls	r2, r2, #31
 80029c8:	d403      	bmi.n	80029d2 <HAL_I2S_Receive_DMA+0x7a>
    __HAL_I2S_ENABLE(hi2s);
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80029d2:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 80029d4:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 80029dc:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 80029e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80029e2:	2002      	movs	r0, #2
}
 80029e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
}
 80029e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 80029ec:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80029f4:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 80029f8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	08002699 	.word	0x08002699
 8002a08:	08002679 	.word	0x08002679
 8002a0c:	080026a1 	.word	0x080026a1

08002a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a10:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a12:	4c1c      	ldr	r4, [pc, #112]	; (8002a84 <HAL_PWREx_ConfigSupply+0x74>)
{
 8002a14:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a16:	68e3      	ldr	r3, [r4, #12]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a1e:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a20:	d005      	beq.n	8002a2e <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a26:	1a18      	subs	r0, r3, r0
 8002a28:	bf18      	it	ne
 8002a2a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a32:	4303      	orrs	r3, r0
 8002a34:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002a36:	f7fe fbdd 	bl	80011f4 <HAL_GetTick>
 8002a3a:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a3c:	e005      	b.n	8002a4a <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a3e:	f7fe fbd9 	bl	80011f4 <HAL_GetTick>
 8002a42:	1b83      	subs	r3, r0, r6
 8002a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a48:	d81a      	bhi.n	8002a80 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	049a      	lsls	r2, r3, #18
 8002a4e:	d5f6      	bpl.n	8002a3e <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a50:	f1a5 031d 	sub.w	r3, r5, #29
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d904      	bls.n	8002a62 <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8002a58:	3d2d      	subs	r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a5a:	2d01      	cmp	r5, #1
 8002a5c:	d901      	bls.n	8002a62 <HAL_PWREx_ConfigSupply+0x52>
  return HAL_OK;
 8002a5e:	2000      	movs	r0, #0
}
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8002a62:	f7fe fbc7 	bl	80011f4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a66:	4d07      	ldr	r5, [pc, #28]	; (8002a84 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8002a68:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a6a:	e005      	b.n	8002a78 <HAL_PWREx_ConfigSupply+0x68>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a6c:	f7fe fbc2 	bl	80011f4 <HAL_GetTick>
 8002a70:	1b00      	subs	r0, r0, r4
 8002a72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a76:	d803      	bhi.n	8002a80 <HAL_PWREx_ConfigSupply+0x70>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a78:	68eb      	ldr	r3, [r5, #12]
 8002a7a:	03db      	lsls	r3, r3, #15
 8002a7c:	d5f6      	bpl.n	8002a6c <HAL_PWREx_ConfigSupply+0x5c>
 8002a7e:	e7ee      	b.n	8002a5e <HAL_PWREx_ConfigSupply+0x4e>
      return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
}
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	58024800 	.word	0x58024800

08002a88 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a88:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002a8a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a8e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a90:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002a92:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a98:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002a9c:	d038      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a9e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002aa2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aa6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002aaa:	fb05 f101 	mul.w	r1, r5, r1
 8002aae:	2a01      	cmp	r2, #1
 8002ab0:	ee07 1a90 	vmov	s15, r1
 8002ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8002aba:	2a02      	cmp	r2, #2
 8002abc:	d050      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8002abe:	b34a      	cbz	r2, 8002b14 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac0:	ee07 0a90 	vmov	s15, r0
 8002ac4:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8002b80 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002ad2:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002b84 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8002ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002aea:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002aee:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002afa:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002b10:	bc30      	pop	{r4, r5}
 8002b12:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	0692      	lsls	r2, r2, #26
 8002b18:	d529      	bpl.n	8002b6e <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b1a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b1c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b28:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8002b84 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b38:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b3a:	ee06 3a10 	vmov	s12, r3
 8002b3e:	ee05 2a90 	vmov	s11, r2
 8002b42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002b46:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002b4a:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002b4e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8002b52:	eef0 7a46 	vmov.f32	s15, s12
 8002b56:	eee7 7a05 	vfma.f32	s15, s14, s10
 8002b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b5e:	e7c8      	b.n	8002af2 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b60:	ee07 0a90 	vmov	s15, r0
 8002b64:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8002b8c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8002b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6c:	e7ae      	b.n	8002acc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b6e:	ee07 0a90 	vmov	s15, r0
 8002b72:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002b90 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8002b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7a:	e7a7      	b.n	8002acc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	4a742400 	.word	0x4a742400
 8002b84:	39000000 	.word	0x39000000
 8002b88:	03d09000 	.word	0x03d09000
 8002b8c:	4bbebc20 	.word	0x4bbebc20
 8002b90:	4c742400 	.word	0x4c742400

08002b94 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f000 81e8 	beq.w	8002f6a <HAL_RCC_OscConfig+0x3d6>
{
 8002b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9c:	6803      	ldr	r3, [r0, #0]
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	07d9      	lsls	r1, r3, #31
 8002ba2:	d52e      	bpl.n	8002c02 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba4:	49a4      	ldr	r1, [pc, #656]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002ba6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bae:	2a10      	cmp	r2, #16
 8002bb0:	f000 8107 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x22e>
 8002bb4:	2a18      	cmp	r2, #24
 8002bb6:	f000 80ff 	beq.w	8002db8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	f000 812a 	beq.w	8002e18 <HAL_RCC_OscConfig+0x284>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8168 	beq.w	8002e9a <HAL_RCC_OscConfig+0x306>
 8002bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bce:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f000 8289 	beq.w	80030e8 <HAL_RCC_OscConfig+0x554>
 8002bd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002be2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002be4:	f7fe fb06 	bl	80011f4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be8:	4e93      	ldr	r6, [pc, #588]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8002bea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bec:	e005      	b.n	8002bfa <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bee:	f7fe fb01 	bl	80011f4 <HAL_GetTick>
 8002bf2:	1b40      	subs	r0, r0, r5
 8002bf4:	2864      	cmp	r0, #100	; 0x64
 8002bf6:	f200 814e 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfa:	6833      	ldr	r3, [r6, #0]
 8002bfc:	039b      	lsls	r3, r3, #14
 8002bfe:	d5f6      	bpl.n	8002bee <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	079d      	lsls	r5, r3, #30
 8002c04:	f100 808a 	bmi.w	8002d1c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c08:	06d9      	lsls	r1, r3, #27
 8002c0a:	d533      	bpl.n	8002c74 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0c:	4a8a      	ldr	r2, [pc, #552]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002c0e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c10:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	f000 80e3 	beq.w	8002de2 <HAL_RCC_OscConfig+0x24e>
 8002c1c:	2b18      	cmp	r3, #24
 8002c1e:	f000 80db 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c22:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002c24:	4d84      	ldr	r5, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 816f 	beq.w	8002f0a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c34:	f7fe fade 	bl	80011f4 <HAL_GetTick>
 8002c38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fada 	bl	80011f4 <HAL_GetTick>
 8002c40:	1b80      	subs	r0, r0, r6
 8002c42:	2802      	cmp	r0, #2
 8002c44:	f200 8127 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	d5f6      	bpl.n	8002c3c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4e:	f7fe fae9 	bl	8001224 <HAL_GetREVID>
 8002c52:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c56:	4298      	cmp	r0, r3
 8002c58:	f200 826d 	bhi.w	8003136 <HAL_RCC_OscConfig+0x5a2>
 8002c5c:	6a22      	ldr	r2, [r4, #32]
 8002c5e:	686b      	ldr	r3, [r5, #4]
 8002c60:	2a20      	cmp	r2, #32
 8002c62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c66:	bf0c      	ite	eq
 8002c68:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002c70:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	071d      	lsls	r5, r3, #28
 8002c76:	d516      	bpl.n	8002ca6 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c78:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4d6f      	ldr	r5, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8122 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8002c82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fab3 	bl	80011f4 <HAL_GetTick>
 8002c8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c90:	e005      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fe faaf 	bl	80011f4 <HAL_GetTick>
 8002c96:	1b80      	subs	r0, r0, r6
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	f200 80fc 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ca0:	0798      	lsls	r0, r3, #30
 8002ca2:	d5f6      	bpl.n	8002c92 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	069a      	lsls	r2, r3, #26
 8002ca8:	d516      	bpl.n	8002cd8 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002caa:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002cac:	4d62      	ldr	r5, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 811a 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fa9a 	bl	80011f4 <HAL_GetTick>
 8002cc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc2:	e005      	b.n	8002cd0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc4:	f7fe fa96 	bl	80011f4 <HAL_GetTick>
 8002cc8:	1b80      	subs	r0, r0, r6
 8002cca:	2802      	cmp	r0, #2
 8002ccc:	f200 80e3 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	049f      	lsls	r7, r3, #18
 8002cd4:	d5f6      	bpl.n	8002cc4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0759      	lsls	r1, r3, #29
 8002cda:	f100 80a3 	bmi.w	8002e24 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ce0:	b1d0      	cbz	r0, 8002d18 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ce2:	4d55      	ldr	r5, [pc, #340]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002ce4:	692b      	ldr	r3, [r5, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cea:	2b18      	cmp	r3, #24
 8002cec:	f000 81ae 	beq.w	800304c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8002cf0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	f000 8142 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fa79 	bl	80011f4 <HAL_GetTick>
 8002d02:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d04:	e005      	b.n	8002d12 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fa75 	bl	80011f4 <HAL_GetTick>
 8002d0a:	1b00      	subs	r0, r0, r4
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	f200 80c2 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	d4f6      	bmi.n	8002d06 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
}
 8002d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1c:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002d1e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d20:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d22:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002d26:	d12d      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002d2a:	68e2      	ldr	r2, [r4, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0759      	lsls	r1, r3, #29
 8002d30:	d501      	bpl.n	8002d36 <HAL_RCC_OscConfig+0x1a2>
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	d04e      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d36:	4d40      	ldr	r5, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	f023 0319 	bic.w	r3, r3, #25
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d42:	f7fe fa57 	bl	80011f4 <HAL_GetTick>
 8002d46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d48:	e005      	b.n	8002d56 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fa53 	bl	80011f4 <HAL_GetTick>
 8002d4e:	1b80      	subs	r0, r0, r6
 8002d50:	2802      	cmp	r0, #2
 8002d52:	f200 80a0 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	075b      	lsls	r3, r3, #29
 8002d5a:	d5f6      	bpl.n	8002d4a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	f7fe fa62 	bl	8001224 <HAL_GetREVID>
 8002d60:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d64:	4298      	cmp	r0, r3
 8002d66:	f200 80f7 	bhi.w	8002f58 <HAL_RCC_OscConfig+0x3c4>
 8002d6a:	6922      	ldr	r2, [r4, #16]
 8002d6c:	686b      	ldr	r3, [r5, #4]
 8002d6e:	2a40      	cmp	r2, #64	; 0x40
 8002d70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d74:	bf0c      	ite	eq
 8002d76:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002d7a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002d7e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	e741      	b.n	8002c08 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d84:	2b18      	cmp	r3, #24
 8002d86:	f000 80e3 	beq.w	8002f50 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d8a:	4d2b      	ldr	r5, [pc, #172]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d8c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d8e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	f000 80cc 	beq.w	8002f2e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d96:	f023 0319 	bic.w	r3, r3, #25
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fa29 	bl	80011f4 <HAL_GetTick>
 8002da2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da4:	e004      	b.n	8002db0 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe fa25 	bl	80011f4 <HAL_GetTick>
 8002daa:	1b80      	subs	r0, r0, r6
 8002dac:	2802      	cmp	r0, #2
 8002dae:	d872      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	075f      	lsls	r7, r3, #29
 8002db4:	d5f7      	bpl.n	8002da6 <HAL_RCC_OscConfig+0x212>
 8002db6:	e7d1      	b.n	8002d5c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002db8:	f001 0103 	and.w	r1, r1, #3
 8002dbc:	2902      	cmp	r1, #2
 8002dbe:	f47f aefc 	bne.w	8002bba <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	0392      	lsls	r2, r2, #14
 8002dc8:	f57f af1b 	bpl.w	8002c02 <HAL_RCC_OscConfig+0x6e>
 8002dcc:	6862      	ldr	r2, [r4, #4]
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	f47f af17 	bne.w	8002c02 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002dd4:	2001      	movs	r0, #1
}
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dd8:	f002 0203 	and.w	r2, r2, #3
 8002ddc:	2a01      	cmp	r2, #1
 8002dde:	f47f af20 	bne.w	8002c22 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	05da      	lsls	r2, r3, #23
 8002de8:	d502      	bpl.n	8002df0 <HAL_RCC_OscConfig+0x25c>
 8002dea:	69e3      	ldr	r3, [r4, #28]
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d1f1      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df0:	f7fe fa18 	bl	8001224 <HAL_GetREVID>
 8002df4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	f200 80b8 	bhi.w	8002f6e <HAL_RCC_OscConfig+0x3da>
 8002dfe:	6a22      	ldr	r2, [r4, #32]
 8002e00:	2a20      	cmp	r2, #32
 8002e02:	f000 81a7 	beq.w	8003154 <HAL_RCC_OscConfig+0x5c0>
 8002e06:	490c      	ldr	r1, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002e08:	684b      	ldr	r3, [r1, #4]
 8002e0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e0e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002e12:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	e72d      	b.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RCC_OscConfig+0x2a4>)
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e22:	e6df      	b.n	8002be4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002e24:	4d05      	ldr	r5, [pc, #20]	; (8002e3c <HAL_RCC_OscConfig+0x2a8>)
 8002e26:	682b      	ldr	r3, [r5, #0]
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002e2e:	f7fe f9e1 	bl	80011f4 <HAL_GetTick>
 8002e32:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e34:	e009      	b.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
 8002e36:	bf00      	nop
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f9d8 	bl	80011f4 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	2864      	cmp	r0, #100	; 0x64
 8002e48:	d825      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	05da      	lsls	r2, r3, #23
 8002e4e:	d5f7      	bpl.n	8002e40 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	68a3      	ldr	r3, [r4, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f000 8178 	beq.w	8003148 <HAL_RCC_OscConfig+0x5b4>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8153 	beq.w	8003104 <HAL_RCC_OscConfig+0x570>
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	4ba5      	ldr	r3, [pc, #660]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
 8002e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e64:	f000 817f 	beq.w	8003166 <HAL_RCC_OscConfig+0x5d2>
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e70:	f022 0204 	bic.w	r2, r2, #4
 8002e74:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002e76:	f7fe f9bd 	bl	80011f4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7a:	4e9f      	ldr	r6, [pc, #636]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e82:	e004      	b.n	8002e8e <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe f9b6 	bl	80011f4 <HAL_GetTick>
 8002e88:	1b40      	subs	r0, r0, r5
 8002e8a:	42b8      	cmp	r0, r7
 8002e8c:	d803      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002e90:	079b      	lsls	r3, r3, #30
 8002e92:	d5f7      	bpl.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
 8002e94:	e723      	b.n	8002cde <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8002e96:	2003      	movs	r0, #3
}
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	4d97      	ldr	r5, [pc, #604]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002eac:	f7fe f9a2 	bl	80011f4 <HAL_GetTick>
 8002eb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb2:	e004      	b.n	8002ebe <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe f99e 	bl	80011f4 <HAL_GetTick>
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	2864      	cmp	r0, #100	; 0x64
 8002ebc:	d8eb      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	039f      	lsls	r7, r3, #14
 8002ec2:	d4f7      	bmi.n	8002eb4 <HAL_RCC_OscConfig+0x320>
 8002ec4:	e69c      	b.n	8002c00 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002ece:	f7fe f991 	bl	80011f4 <HAL_GetTick>
 8002ed2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f98d 	bl	80011f4 <HAL_GetTick>
 8002eda:	1b80      	subs	r0, r0, r6
 8002edc:	2802      	cmp	r0, #2
 8002ede:	d8da      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ee2:	0799      	lsls	r1, r3, #30
 8002ee4:	d4f7      	bmi.n	8002ed6 <HAL_RCC_OscConfig+0x342>
 8002ee6:	e6dd      	b.n	8002ca4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f980 	bl	80011f4 <HAL_GetTick>
 8002ef4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ef6:	e004      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef8:	f7fe f97c 	bl	80011f4 <HAL_GetTick>
 8002efc:	1b80      	subs	r0, r0, r6
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d8c9      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	0498      	lsls	r0, r3, #18
 8002f06:	d4f7      	bmi.n	8002ef8 <HAL_RCC_OscConfig+0x364>
 8002f08:	e6e5      	b.n	8002cd6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f12:	f7fe f96f 	bl	80011f4 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f18:	e004      	b.n	8002f24 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f96b 	bl	80011f4 <HAL_GetTick>
 8002f1e:	1b80      	subs	r0, r0, r6
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d8b8      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	05df      	lsls	r7, r3, #23
 8002f28:	d4f7      	bmi.n	8002f1a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	e6a2      	b.n	8002c74 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f34:	f7fe f95e 	bl	80011f4 <HAL_GetTick>
 8002f38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f3a:	e004      	b.n	8002f46 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe f95a 	bl	80011f4 <HAL_GetTick>
 8002f40:	1b80      	subs	r0, r0, r6
 8002f42:	2802      	cmp	r0, #2
 8002f44:	d8a7      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	0758      	lsls	r0, r3, #29
 8002f4a:	d4f7      	bmi.n	8002f3c <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	e65b      	b.n	8002c08 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f50:	0790      	lsls	r0, r2, #30
 8002f52:	f47f af1a 	bne.w	8002d8a <HAL_RCC_OscConfig+0x1f6>
 8002f56:	e6e7      	b.n	8002d28 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	686b      	ldr	r3, [r5, #4]
 8002f5a:	6922      	ldr	r2, [r4, #16]
 8002f5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f64:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	e64e      	b.n	8002c08 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
}
 8002f6c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f6e:	4a62      	ldr	r2, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
 8002f70:	6a21      	ldr	r1, [r4, #32]
 8002f72:	68d3      	ldr	r3, [r2, #12]
 8002f74:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002f78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f7c:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	e678      	b.n	8002c74 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8002f82:	f7fe f937 	bl	80011f4 <HAL_GetTick>
 8002f86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f88:	e004      	b.n	8002f94 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe f933 	bl	80011f4 <HAL_GetTick>
 8002f8e:	1b80      	subs	r0, r0, r6
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d880      	bhi.n	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	0199      	lsls	r1, r3, #6
 8002f98:	d4f7      	bmi.n	8002f8a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002f9c:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x568>)
 8002f9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fa0:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fa2:	4957      	ldr	r1, [pc, #348]	; (8003100 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa4:	4e54      	ldr	r6, [pc, #336]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002faa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fae:	62ab      	str	r3, [r5, #40]	; 0x28
 8002fb0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	0412      	lsls	r2, r2, #16
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0612      	lsls	r2, r2, #24
 8002fd4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fe4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002fe6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fe8:	4011      	ands	r1, r2
 8002fea:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002fee:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ff4:	f023 030c 	bic.w	r3, r3, #12
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ffc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ffe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	4313      	orrs	r3, r2
 8003006:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003008:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003016:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003018:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800301a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003020:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003030:	f7fe f8e0 	bl	80011f4 <HAL_GetTick>
 8003034:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003036:	e005      	b.n	8003044 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f8dc 	bl	80011f4 <HAL_GetTick>
 800303c:	1b00      	subs	r0, r0, r4
 800303e:	2802      	cmp	r0, #2
 8003040:	f63f af29 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	019a      	lsls	r2, r3, #6
 8003048:	d5f6      	bpl.n	8003038 <HAL_RCC_OscConfig+0x4a4>
 800304a:	e665      	b.n	8002d18 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800304e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003050:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	f43f ae62 	beq.w	8002d1a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800305c:	428b      	cmp	r3, r1
 800305e:	f47f aeb9 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003062:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003068:	429a      	cmp	r2, r3
 800306a:	f47f aeb3 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003070:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8003074:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	f47f aeac 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800307e:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8003082:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	f47f aea5 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800308a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800308c:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8003090:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	f47f ae9e 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309a:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800309e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a0:	429e      	cmp	r6, r3
 80030a2:	f47f ae97 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030aa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f43f ae32 	beq.w	8002d18 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
 80030b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80030be:	f7fe f899 	bl	80011f4 <HAL_GetTick>
 80030c2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80030c4:	f7fe f896 	bl	80011f4 <HAL_GetTick>
 80030c8:	42a8      	cmp	r0, r5
 80030ca:	d0fb      	beq.n	80030c4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_OscConfig+0x56c>)
 80030d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80030d6:	4023      	ands	r3, r4
 80030d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030dc:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80030de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80030e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e575      	b.n	8002be4 <HAL_RCC_OscConfig+0x50>
 80030f8:	58024400 	.word	0x58024400
 80030fc:	fffffc0c 	.word	0xfffffc0c
 8003100:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	4d1c      	ldr	r5, [pc, #112]	; (8003178 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	672b      	str	r3, [r5, #112]	; 0x70
 8003112:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800311a:	f7fe f86b 	bl	80011f4 <HAL_GetTick>
 800311e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003120:	e005      	b.n	800312e <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe f867 	bl	80011f4 <HAL_GetTick>
 8003126:	1b80      	subs	r0, r0, r6
 8003128:	42b8      	cmp	r0, r7
 800312a:	f63f aeb4 	bhi.w	8002e96 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800312e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003130:	0798      	lsls	r0, r3, #30
 8003132:	d4f6      	bmi.n	8003122 <HAL_RCC_OscConfig+0x58e>
 8003134:	e5d3      	b.n	8002cde <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003136:	68eb      	ldr	r3, [r5, #12]
 8003138:	6a22      	ldr	r2, [r4, #32]
 800313a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800313e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003142:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	e595      	b.n	8002c74 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x5e4>)
 800314a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003152:	e690      	b.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x5e4>)
 8003156:	6853      	ldr	r3, [r2, #4]
 8003158:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800315c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003160:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	e586      	b.n	8002c74 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	671a      	str	r2, [r3, #112]	; 0x70
 800316c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	671a      	str	r2, [r3, #112]	; 0x70
 8003174:	e67f      	b.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
 8003176:	bf00      	nop
 8003178:	58024400 	.word	0x58024400

0800317c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317c:	4a48      	ldr	r2, [pc, #288]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x124>)
 800317e:	6913      	ldr	r3, [r2, #16]
 8003180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003184:	2b10      	cmp	r3, #16
 8003186:	d004      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x16>
 8003188:	2b18      	cmp	r3, #24
 800318a:	d00d      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800318c:	b11b      	cbz	r3, 8003196 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800318e:	4845      	ldr	r0, [pc, #276]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x128>)
 8003190:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003192:	4845      	ldr	r0, [pc, #276]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003194:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	0699      	lsls	r1, r3, #26
 800319a:	d54a      	bpl.n	8003232 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	4843      	ldr	r0, [pc, #268]	; (80032ac <HAL_RCC_GetSysClockFreq+0x130>)
 80031a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80031a4:	40d8      	lsrs	r0, r3
 80031a6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80031aa:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031ac:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031ae:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80031b0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031b4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031b6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80031ba:	d038      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031bc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031c0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031c4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031c8:	fb05 f101 	mul.w	r1, r5, r1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	ee07 1a90 	vmov	s15, r1
 80031d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80031d6:	d002      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x62>
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d02c      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0xba>
 80031dc:	b393      	cbz	r3, 8003244 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031de:	ee07 0a90 	vmov	s15, r0
 80031e2:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80032b0 <HAL_RCC_GetSysClockFreq+0x134>
 80031e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031ec:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80031f0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x138>
 80031f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003204:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003208:	eee7 7a06 	vfma.f32	s15, s14, s12
 800320c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x124>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003218:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800322a:	ee17 0a90 	vmov	r0, s15
}
 800322e:	bc30      	pop	{r4, r5}
 8003230:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003232:	481e      	ldr	r0, [pc, #120]	; (80032ac <HAL_RCC_GetSysClockFreq+0x130>)
}
 8003234:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003236:	ee07 0a90 	vmov	s15, r0
 800323a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80032b8 <HAL_RCC_GetSysClockFreq+0x13c>
 800323e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003242:	e7d2      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	069b      	lsls	r3, r3, #26
 8003248:	d522      	bpl.n	8003290 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800324a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003256:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003258:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800325c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003260:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x138>
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003268:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326a:	ee06 3a10 	vmov	s12, r3
 800326e:	ee05 1a90 	vmov	s11, r1
 8003272:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003276:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800327a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800327e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003282:	eef0 7a46 	vmov.f32	s15, s12
 8003286:	eee7 7a05 	vfma.f32	s15, s14, s10
 800328a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800328e:	e7bf      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	ee07 0a90 	vmov	s15, r0
 8003294:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80032bc <HAL_RCC_GetSysClockFreq+0x140>
 8003298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329c:	e7a5      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x6e>
 800329e:	bf00      	nop
 80032a0:	58024400 	.word	0x58024400
 80032a4:	003d0900 	.word	0x003d0900
 80032a8:	017d7840 	.word	0x017d7840
 80032ac:	03d09000 	.word	0x03d09000
 80032b0:	4a742400 	.word	0x4a742400
 80032b4:	39000000 	.word	0x39000000
 80032b8:	4bbebc20 	.word	0x4bbebc20
 80032bc:	4c742400 	.word	0x4c742400

080032c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80032c0:	2800      	cmp	r0, #0
 80032c2:	f000 810c 	beq.w	80034de <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c6:	4a8c      	ldr	r2, [pc, #560]	; (80034f8 <HAL_RCC_ClockConfig+0x238>)
 80032c8:	6813      	ldr	r3, [r2, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	428b      	cmp	r3, r1
{
 80032d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	428b      	cmp	r3, r1
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
}
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	075f      	lsls	r7, r3, #29
 80032f8:	d50b      	bpl.n	8003312 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032fa:	4980      	ldr	r1, [pc, #512]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 80032fc:	6920      	ldr	r0, [r4, #16]
 80032fe:	698a      	ldr	r2, [r1, #24]
 8003300:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003304:	4290      	cmp	r0, r2
 8003306:	d904      	bls.n	8003312 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003308:	698a      	ldr	r2, [r1, #24]
 800330a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800330e:	4302      	orrs	r2, r0
 8003310:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003312:	071e      	lsls	r6, r3, #28
 8003314:	d50b      	bpl.n	800332e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003316:	4979      	ldr	r1, [pc, #484]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 8003318:	6960      	ldr	r0, [r4, #20]
 800331a:	69ca      	ldr	r2, [r1, #28]
 800331c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003320:	4290      	cmp	r0, r2
 8003322:	d904      	bls.n	800332e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003324:	69ca      	ldr	r2, [r1, #28]
 8003326:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800332a:	4302      	orrs	r2, r0
 800332c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	06d8      	lsls	r0, r3, #27
 8003330:	d50b      	bpl.n	800334a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003332:	4972      	ldr	r1, [pc, #456]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 8003334:	69a0      	ldr	r0, [r4, #24]
 8003336:	69ca      	ldr	r2, [r1, #28]
 8003338:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800333c:	4290      	cmp	r0, r2
 800333e:	d904      	bls.n	800334a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003340:	69ca      	ldr	r2, [r1, #28]
 8003342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003346:	4302      	orrs	r2, r0
 8003348:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800334a:	0699      	lsls	r1, r3, #26
 800334c:	d50b      	bpl.n	8003366 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800334e:	496b      	ldr	r1, [pc, #428]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 8003350:	69e0      	ldr	r0, [r4, #28]
 8003352:	6a0a      	ldr	r2, [r1, #32]
 8003354:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003358:	4290      	cmp	r0, r2
 800335a:	d904      	bls.n	8003366 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800335c:	6a0a      	ldr	r2, [r1, #32]
 800335e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003362:	4302      	orrs	r2, r0
 8003364:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003366:	079a      	lsls	r2, r3, #30
 8003368:	f140 80ab 	bpl.w	80034c2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800336c:	4863      	ldr	r0, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 800336e:	68e1      	ldr	r1, [r4, #12]
 8003370:	6982      	ldr	r2, [r0, #24]
 8003372:	f002 020f 	and.w	r2, r2, #15
 8003376:	4291      	cmp	r1, r2
 8003378:	d904      	bls.n	8003384 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337a:	6982      	ldr	r2, [r0, #24]
 800337c:	f022 020f 	bic.w	r2, r2, #15
 8003380:	430a      	orrs	r2, r1
 8003382:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003384:	07d8      	lsls	r0, r3, #31
 8003386:	d530      	bpl.n	80033ea <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003388:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 800338a:	68a1      	ldr	r1, [r4, #8]
 800338c:	6993      	ldr	r3, [r2, #24]
 800338e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003392:	430b      	orrs	r3, r1
 8003394:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003398:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	2902      	cmp	r1, #2
 800339c:	f000 80a1 	beq.w	80034e2 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a0:	2903      	cmp	r1, #3
 80033a2:	f000 8098 	beq.w	80034d6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033a6:	2901      	cmp	r1, #1
 80033a8:	f000 80a1 	beq.w	80034ee <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ac:	0758      	lsls	r0, r3, #29
 80033ae:	d59e      	bpl.n	80032ee <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033b0:	4e52      	ldr	r6, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	6933      	ldr	r3, [r6, #16]
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	430b      	orrs	r3, r1
 80033be:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80033c0:	f7fd ff18 	bl	80011f4 <HAL_GetTick>
 80033c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fd ff14 	bl	80011f4 <HAL_GetTick>
 80033cc:	1bc0      	subs	r0, r0, r7
 80033ce:	4540      	cmp	r0, r8
 80033d0:	f200 808b 	bhi.w	80034ea <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d4:	6933      	ldr	r3, [r6, #16]
 80033d6:	6862      	ldr	r2, [r4, #4]
 80033d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033dc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80033e0:	d1f2      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0799      	lsls	r1, r3, #30
 80033e6:	d506      	bpl.n	80033f6 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033e8:	68e1      	ldr	r1, [r4, #12]
 80033ea:	4844      	ldr	r0, [pc, #272]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 80033ec:	6982      	ldr	r2, [r0, #24]
 80033ee:	f002 020f 	and.w	r2, r2, #15
 80033f2:	428a      	cmp	r2, r1
 80033f4:	d869      	bhi.n	80034ca <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f6:	4940      	ldr	r1, [pc, #256]	; (80034f8 <HAL_RCC_ClockConfig+0x238>)
 80033f8:	680a      	ldr	r2, [r1, #0]
 80033fa:	f002 020f 	and.w	r2, r2, #15
 80033fe:	42aa      	cmp	r2, r5
 8003400:	d90a      	bls.n	8003418 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	680a      	ldr	r2, [r1, #0]
 8003404:	f022 020f 	bic.w	r2, r2, #15
 8003408:	432a      	orrs	r2, r5
 800340a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	f002 020f 	and.w	r2, r2, #15
 8003412:	42aa      	cmp	r2, r5
 8003414:	f47f af6b 	bne.w	80032ee <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003418:	075a      	lsls	r2, r3, #29
 800341a:	d50b      	bpl.n	8003434 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 800341e:	6920      	ldr	r0, [r4, #16]
 8003420:	698a      	ldr	r2, [r1, #24]
 8003422:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003426:	4290      	cmp	r0, r2
 8003428:	d204      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800342a:	698a      	ldr	r2, [r1, #24]
 800342c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003430:	4302      	orrs	r2, r0
 8003432:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	071f      	lsls	r7, r3, #28
 8003436:	d50b      	bpl.n	8003450 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003438:	4930      	ldr	r1, [pc, #192]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 800343a:	6960      	ldr	r0, [r4, #20]
 800343c:	69ca      	ldr	r2, [r1, #28]
 800343e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003442:	4290      	cmp	r0, r2
 8003444:	d204      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003446:	69ca      	ldr	r2, [r1, #28]
 8003448:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800344c:	4302      	orrs	r2, r0
 800344e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	06de      	lsls	r6, r3, #27
 8003452:	d50b      	bpl.n	800346c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003454:	4929      	ldr	r1, [pc, #164]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 8003456:	69a0      	ldr	r0, [r4, #24]
 8003458:	69ca      	ldr	r2, [r1, #28]
 800345a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800345e:	4290      	cmp	r0, r2
 8003460:	d204      	bcs.n	800346c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003462:	69ca      	ldr	r2, [r1, #28]
 8003464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003468:	4302      	orrs	r2, r0
 800346a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800346c:	069d      	lsls	r5, r3, #26
 800346e:	d50b      	bpl.n	8003488 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003470:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 8003472:	69e1      	ldr	r1, [r4, #28]
 8003474:	6a13      	ldr	r3, [r2, #32]
 8003476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800347a:	4299      	cmp	r1, r3
 800347c:	d204      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800347e:	6a13      	ldr	r3, [r2, #32]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	430b      	orrs	r3, r1
 8003486:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003488:	f7ff fe78 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <HAL_RCC_ClockConfig+0x23c>)
 800348e:	4603      	mov	r3, r0
 8003490:	481b      	ldr	r0, [pc, #108]	; (8003500 <HAL_RCC_ClockConfig+0x240>)
 8003492:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003494:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003496:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800349a:	4d1a      	ldr	r5, [pc, #104]	; (8003504 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349c:	f002 020f 	and.w	r2, r2, #15
 80034a0:	4c19      	ldr	r4, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034a4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80034aa:	4818      	ldr	r0, [pc, #96]	; (800350c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ac:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034b0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80034b2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80034b4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	6023      	str	r3, [r4, #0]
}
 80034ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80034be:	f7fd be37 	b.w	8001130 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	07da      	lsls	r2, r3, #31
 80034c4:	f53f af60 	bmi.w	8003388 <HAL_RCC_ClockConfig+0xc8>
 80034c8:	e795      	b.n	80033f6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ca:	6982      	ldr	r2, [r0, #24]
 80034cc:	f022 020f 	bic.w	r2, r2, #15
 80034d0:	430a      	orrs	r2, r1
 80034d2:	6182      	str	r2, [r0, #24]
 80034d4:	e78f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034d6:	019f      	lsls	r7, r3, #6
 80034d8:	f53f af6a 	bmi.w	80033b0 <HAL_RCC_ClockConfig+0xf0>
 80034dc:	e707      	b.n	80032ee <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80034de:	2001      	movs	r0, #1
}
 80034e0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e2:	039b      	lsls	r3, r3, #14
 80034e4:	f53f af64 	bmi.w	80033b0 <HAL_RCC_ClockConfig+0xf0>
 80034e8:	e701      	b.n	80032ee <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80034ea:	2003      	movs	r0, #3
 80034ec:	e700      	b.n	80032f0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ee:	05de      	lsls	r6, r3, #23
 80034f0:	f53f af5e 	bmi.w	80033b0 <HAL_RCC_ClockConfig+0xf0>
 80034f4:	e6fb      	b.n	80032ee <HAL_RCC_ClockConfig+0x2e>
 80034f6:	bf00      	nop
 80034f8:	52002000 	.word	0x52002000
 80034fc:	58024400 	.word	0x58024400
 8003500:	08005188 	.word	0x08005188
 8003504:	24000000 	.word	0x24000000
 8003508:	24000004 	.word	0x24000004
 800350c:	24000020 	.word	0x24000020

08003510 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003512:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003514:	6913      	ldr	r3, [r2, #16]
 8003516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351a:	2b10      	cmp	r3, #16
 800351c:	d01a      	beq.n	8003554 <HAL_RCC_GetHCLKFreq+0x44>
 800351e:	2b18      	cmp	r3, #24
 8003520:	d023      	beq.n	800356a <HAL_RCC_GetHCLKFreq+0x5a>
 8003522:	b1cb      	cbz	r3, 8003558 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8003524:	4814      	ldr	r0, [pc, #80]	; (8003578 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_GetHCLKFreq+0x64>)
 8003528:	4914      	ldr	r1, [pc, #80]	; (800357c <HAL_RCC_GetHCLKFreq+0x6c>)
 800352a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800352c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800352e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003532:	4c13      	ldr	r4, [pc, #76]	; (8003580 <HAL_RCC_GetHCLKFreq+0x70>)
 8003534:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003538:	4d12      	ldr	r5, [pc, #72]	; (8003584 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800353a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800353c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800353e:	f002 021f 	and.w	r2, r2, #31
 8003542:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003546:	f003 001f 	and.w	r0, r3, #31
 800354a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800354e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003550:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003552:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003554:	480c      	ldr	r0, [pc, #48]	; (8003588 <HAL_RCC_GetHCLKFreq+0x78>)
 8003556:	e7e6      	b.n	8003526 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	069b      	lsls	r3, r3, #26
 800355c:	d508      	bpl.n	8003570 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <HAL_RCC_GetHCLKFreq+0x7c>)
 8003562:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003566:	40d8      	lsrs	r0, r3
 8003568:	e7dd      	b.n	8003526 <HAL_RCC_GetHCLKFreq+0x16>
 800356a:	f7ff fa8d 	bl	8002a88 <HAL_RCC_GetSysClockFreq.part.0>
 800356e:	e7da      	b.n	8003526 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003570:	4806      	ldr	r0, [pc, #24]	; (800358c <HAL_RCC_GetHCLKFreq+0x7c>)
 8003572:	e7d8      	b.n	8003526 <HAL_RCC_GetHCLKFreq+0x16>
 8003574:	58024400 	.word	0x58024400
 8003578:	003d0900 	.word	0x003d0900
 800357c:	08005188 	.word	0x08005188
 8003580:	24000004 	.word	0x24000004
 8003584:	24000000 	.word	0x24000000
 8003588:	017d7840 	.word	0x017d7840
 800358c:	03d09000 	.word	0x03d09000

08003590 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003592:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003594:	6913      	ldr	r3, [r2, #16]
 8003596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800359a:	2b10      	cmp	r3, #16
 800359c:	d021      	beq.n	80035e2 <HAL_RCC_GetPCLK1Freq+0x52>
 800359e:	2b18      	cmp	r3, #24
 80035a0:	d02a      	beq.n	80035f8 <HAL_RCC_GetPCLK1Freq+0x68>
 80035a2:	b303      	cbz	r3, 80035e6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 80035a4:	4818      	ldr	r0, [pc, #96]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035a6:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x74>)
 80035a8:	4918      	ldr	r1, [pc, #96]	; (800360c <HAL_RCC_GetPCLK1Freq+0x7c>)
 80035aa:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ac:	4c18      	ldr	r4, [pc, #96]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ae:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 80035b2:	4d18      	ldr	r5, [pc, #96]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035bc:	6993      	ldr	r3, [r2, #24]
 80035be:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 80035c2:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	fa20 f303 	lsr.w	r3, r0, r3
 80035ce:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035d0:	69d2      	ldr	r2, [r2, #28]
 80035d2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80035d6:	5c88      	ldrb	r0, [r1, r2]
 80035d8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035dc:	fa23 f000 	lsr.w	r0, r3, r0
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e2:	480d      	ldr	r0, [pc, #52]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x88>)
 80035e4:	e7df      	b.n	80035a6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	069b      	lsls	r3, r3, #26
 80035ea:	d508      	bpl.n	80035fe <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	480b      	ldr	r0, [pc, #44]	; (800361c <HAL_RCC_GetPCLK1Freq+0x8c>)
 80035f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80035f4:	40d8      	lsrs	r0, r3
 80035f6:	e7d6      	b.n	80035a6 <HAL_RCC_GetPCLK1Freq+0x16>
 80035f8:	f7ff fa46 	bl	8002a88 <HAL_RCC_GetSysClockFreq.part.0>
 80035fc:	e7d3      	b.n	80035a6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035fe:	4807      	ldr	r0, [pc, #28]	; (800361c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003600:	e7d1      	b.n	80035a6 <HAL_RCC_GetPCLK1Freq+0x16>
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
 8003608:	003d0900 	.word	0x003d0900
 800360c:	08005188 	.word	0x08005188
 8003610:	24000004 	.word	0x24000004
 8003614:	24000000 	.word	0x24000000
 8003618:	017d7840 	.word	0x017d7840
 800361c:	03d09000 	.word	0x03d09000

08003620 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003622:	4c3a      	ldr	r4, [pc, #232]	; (800370c <RCCEx_PLL2_Config+0xec>)
 8003624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d067      	beq.n	80036fe <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	4606      	mov	r6, r0
 8003632:	460f      	mov	r7, r1
 8003634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003638:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363a:	f7fd fddb 	bl	80011f4 <HAL_GetTick>
 800363e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003640:	e004      	b.n	800364c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003642:	f7fd fdd7 	bl	80011f4 <HAL_GetTick>
 8003646:	1b43      	subs	r3, r0, r5
 8003648:	2b02      	cmp	r3, #2
 800364a:	d856      	bhi.n	80036fa <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	011a      	lsls	r2, r3, #4
 8003650:	d4f7      	bmi.n	8003642 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003654:	6832      	ldr	r2, [r6, #0]
 8003656:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800365a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800365e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003660:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003664:	3b01      	subs	r3, #1
 8003666:	3a01      	subs	r2, #1
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	0412      	lsls	r2, r2, #16
 800366c:	b29b      	uxth	r3, r3
 800366e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003672:	4313      	orrs	r3, r2
 8003674:	6872      	ldr	r2, [r6, #4]
 8003676:	3a01      	subs	r2, #1
 8003678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367c:	4313      	orrs	r3, r2
 800367e:	6932      	ldr	r2, [r6, #16]
 8003680:	3a01      	subs	r2, #1
 8003682:	0612      	lsls	r2, r2, #24
 8003684:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003688:	4313      	orrs	r3, r2
 800368a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800368c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800368e:	6972      	ldr	r2, [r6, #20]
 8003690:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003694:	4313      	orrs	r3, r2
 8003696:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800369a:	69b3      	ldr	r3, [r6, #24]
 800369c:	f022 0220 	bic.w	r2, r2, #32
 80036a0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80036a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80036a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036a8:	f022 0210 	bic.w	r2, r2, #16
 80036ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80036ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80036b0:	69f2      	ldr	r2, [r6, #28]
 80036b2:	400b      	ands	r3, r1
 80036b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036b8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80036ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036bc:	f043 0310 	orr.w	r3, r3, #16
 80036c0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80036c4:	b1ef      	cbz	r7, 8003702 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80036c6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80036c8:	bf0c      	ite	eq
 80036ca:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036ce:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80036d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036d4:	4c0d      	ldr	r4, [pc, #52]	; (800370c <RCCEx_PLL2_Config+0xec>)
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036de:	f7fd fd89 	bl	80011f4 <HAL_GetTick>
 80036e2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036e4:	e004      	b.n	80036f0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036e6:	f7fd fd85 	bl	80011f4 <HAL_GetTick>
 80036ea:	1b40      	subs	r0, r0, r5
 80036ec:	2802      	cmp	r0, #2
 80036ee:	d804      	bhi.n	80036fa <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	d5f7      	bpl.n	80036e6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80036f6:	2000      	movs	r0, #0
}
 80036f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
}
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80036fe:	2001      	movs	r0, #1
}
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003708:	e7e4      	b.n	80036d4 <RCCEx_PLL2_Config+0xb4>
 800370a:	bf00      	nop
 800370c:	58024400 	.word	0x58024400
 8003710:	ffff0007 	.word	0xffff0007

08003714 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003716:	4c3a      	ldr	r4, [pc, #232]	; (8003800 <RCCEx_PLL3_Config+0xec>)
 8003718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d067      	beq.n	80037f2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	4606      	mov	r6, r0
 8003726:	460f      	mov	r7, r1
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372e:	f7fd fd61 	bl	80011f4 <HAL_GetTick>
 8003732:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003734:	e004      	b.n	8003740 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003736:	f7fd fd5d 	bl	80011f4 <HAL_GetTick>
 800373a:	1b43      	subs	r3, r0, r5
 800373c:	2b02      	cmp	r3, #2
 800373e:	d856      	bhi.n	80037ee <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	d4f7      	bmi.n	8003736 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003748:	6832      	ldr	r2, [r6, #0]
 800374a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800374e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003752:	62a3      	str	r3, [r4, #40]	; 0x28
 8003754:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003758:	3b01      	subs	r3, #1
 800375a:	3a01      	subs	r2, #1
 800375c:	025b      	lsls	r3, r3, #9
 800375e:	0412      	lsls	r2, r2, #16
 8003760:	b29b      	uxth	r3, r3
 8003762:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003766:	4313      	orrs	r3, r2
 8003768:	6872      	ldr	r2, [r6, #4]
 800376a:	3a01      	subs	r2, #1
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	4313      	orrs	r3, r2
 8003772:	6932      	ldr	r2, [r6, #16]
 8003774:	3a01      	subs	r2, #1
 8003776:	0612      	lsls	r2, r2, #24
 8003778:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800377c:	4313      	orrs	r3, r2
 800377e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003782:	6972      	ldr	r2, [r6, #20]
 8003784:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003788:	4313      	orrs	r3, r2
 800378a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800378c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800378e:	69b3      	ldr	r3, [r6, #24]
 8003790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003794:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003798:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800379a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800379c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037a4:	69f2      	ldr	r2, [r6, #28]
 80037a6:	400b      	ands	r3, r1
 80037a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037ac:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80037b8:	b1ef      	cbz	r7, 80037f6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80037ba:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037bc:	bf0c      	ite	eq
 80037be:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037c2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80037c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037c8:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <RCCEx_PLL3_Config+0xec>)
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d2:	f7fd fd0f 	bl	80011f4 <HAL_GetTick>
 80037d6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037d8:	e004      	b.n	80037e4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80037da:	f7fd fd0b 	bl	80011f4 <HAL_GetTick>
 80037de:	1b40      	subs	r0, r0, r5
 80037e0:	2802      	cmp	r0, #2
 80037e2:	d804      	bhi.n	80037ee <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	d5f7      	bpl.n	80037da <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
}
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
}
 80037f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037fc:	e7e4      	b.n	80037c8 <RCCEx_PLL3_Config+0xb4>
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
 8003804:	ffff0007 	.word	0xffff0007

08003808 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800380c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003810:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003812:	011f      	lsls	r7, r3, #4
 8003814:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8003818:	d51d      	bpl.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800381a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800381c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003820:	f000 8560 	beq.w	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003824:	d824      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003826:	2900      	cmp	r1, #0
 8003828:	f000 8479 	beq.w	800411e <HAL_RCCEx_PeriphCLKConfig+0x916>
 800382c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003830:	d121      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003832:	2102      	movs	r1, #2
 8003834:	3008      	adds	r0, #8
 8003836:	f7ff fef3 	bl	8003620 <RCCEx_PLL2_Config>
 800383a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800383c:	2e00      	cmp	r6, #0
 800383e:	f040 854d 	bne.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003842:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003844:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003848:	4dad      	ldr	r5, [pc, #692]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800384a:	2600      	movs	r6, #0
 800384c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800384e:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003852:	4301      	orrs	r1, r0
 8003854:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003856:	05dd      	lsls	r5, r3, #23
 8003858:	d511      	bpl.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 800385a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800385c:	2904      	cmp	r1, #4
 800385e:	f200 85ef 	bhi.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0xc38>
 8003862:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003866:	0570      	.short	0x0570
 8003868:	05800577 	.word	0x05800577
 800386c:	03380338 	.word	0x03380338
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003870:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003874:	d0e8      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003876:	05dd      	lsls	r5, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003878:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800387c:	d4ed      	bmi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch (PeriphClkInit->Sai1ClockSelection)
 800387e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003880:	0598      	lsls	r0, r3, #22
 8003882:	d51d      	bpl.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003884:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003886:	2980      	cmp	r1, #128	; 0x80
 8003888:	f000 8549 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0xb16>
 800388c:	f200 8107 	bhi.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003890:	2900      	cmp	r1, #0
 8003892:	f000 8451 	beq.w	8004138 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8003896:	2940      	cmp	r1, #64	; 0x40
 8003898:	f040 8108 	bne.w	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389c:	2100      	movs	r1, #0
 800389e:	f104 0008 	add.w	r0, r4, #8
 80038a2:	f7ff febd 	bl	8003620 <RCCEx_PLL2_Config>
 80038a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80038ac:	2d00      	cmp	r5, #0
 80038ae:	f040 8418 	bne.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038b2:	4f93      	ldr	r7, [pc, #588]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80038b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80038b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038b8:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 80038bc:	4301      	orrs	r1, r0
 80038be:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038c0:	0559      	lsls	r1, r3, #21
 80038c2:	d521      	bpl.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4AClockSelection)
 80038c4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80038c8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80038cc:	f000 8513 	beq.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80038d0:	f200 80ef 	bhi.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80038d4:	2900      	cmp	r1, #0
 80038d6:	f000 8436 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80038da:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80038de:	f040 80f0 	bne.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e2:	2100      	movs	r1, #0
 80038e4:	f104 0008 	add.w	r0, r4, #8
 80038e8:	f7ff fe9a 	bl	8003620 <RCCEx_PLL2_Config>
 80038ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80038f2:	2d00      	cmp	r5, #0
 80038f4:	f040 83f8 	bne.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038f8:	4f81      	ldr	r7, [pc, #516]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80038fa:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80038fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003900:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8003904:	4301      	orrs	r1, r0
 8003906:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003908:	051f      	lsls	r7, r3, #20
 800390a:	d521      	bpl.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->Sai4BClockSelection)
 800390c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8003910:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003914:	f000 84f9 	beq.w	800430a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003918:	f200 80d6 	bhi.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800391c:	2900      	cmp	r1, #0
 800391e:	f000 8419 	beq.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8003922:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003926:	f040 80d7 	bne.w	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	2100      	movs	r1, #0
 800392c:	f104 0008 	add.w	r0, r4, #8
 8003930:	f7ff fe76 	bl	8003620 <RCCEx_PLL2_Config>
 8003934:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003936:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800393a:	2d00      	cmp	r5, #0
 800393c:	f040 83db 	bne.w	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003940:	4f6f      	ldr	r7, [pc, #444]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003942:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8003946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003948:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800394c:	4301      	orrs	r1, r0
 800394e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003950:	0198      	lsls	r0, r3, #6
 8003952:	d518      	bpl.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->QspiClockSelection)
 8003954:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003956:	2920      	cmp	r1, #32
 8003958:	f000 8499 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800395c:	f200 80bf 	bhi.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003960:	b139      	cbz	r1, 8003972 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003962:	2910      	cmp	r1, #16
 8003964:	f040 80be 	bne.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4865      	ldr	r0, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800396a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800396c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003970:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003972:	2d00      	cmp	r5, #0
 8003974:	f040 8405 	bne.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003978:	4f61      	ldr	r7, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800397a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800397c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800397e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8003982:	4301      	orrs	r1, r0
 8003984:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003986:	04d9      	lsls	r1, r3, #19
 8003988:	d51f      	bpl.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 800398a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800398c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003990:	f000 84cf 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003994:	f200 80a9 	bhi.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003998:	2900      	cmp	r1, #0
 800399a:	f000 83c7 	beq.w	800412c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800399e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80039a2:	f040 80aa 	bne.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039a6:	2100      	movs	r1, #0
 80039a8:	f104 0008 	add.w	r0, r4, #8
 80039ac:	f7ff fe38 	bl	8003620 <RCCEx_PLL2_Config>
 80039b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	f040 839b 	bne.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039bc:	4f50      	ldr	r7, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80039be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80039c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039c2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80039c6:	4301      	orrs	r1, r0
 80039c8:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ca:	049f      	lsls	r7, r3, #18
 80039cc:	d51d      	bpl.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80039d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80039d4:	f000 840e 	beq.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80039d8:	f200 8094 	bhi.w	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80039dc:	b159      	cbz	r1, 80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80039e2:	f040 8099 	bne.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x310>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e6:	2101      	movs	r1, #1
 80039e8:	f104 0008 	add.w	r0, r4, #8
 80039ec:	f7ff fe18 	bl	8003620 <RCCEx_PLL2_Config>
 80039f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	f040 83bf 	bne.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039fc:	4f40      	ldr	r7, [pc, #256]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80039fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003a00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a02:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8003a06:	4301      	orrs	r1, r0
 8003a08:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a0a:	0458      	lsls	r0, r3, #17
 8003a0c:	d51f      	bpl.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a0e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003a12:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003a16:	f000 83f9 	beq.w	800420c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003a1a:	f200 8080 	bhi.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003a1e:	b159      	cbz	r1, 8003a38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a20:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003a24:	f040 8083 	bne.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x326>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	f104 0008 	add.w	r0, r4, #8
 8003a2e:	f7ff fdf7 	bl	8003620 <RCCEx_PLL2_Config>
 8003a32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003a34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	f040 8396 	bne.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a3e:	4f30      	ldr	r7, [pc, #192]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003a40:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8003a44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a46:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003a4a:	4301      	orrs	r1, r0
 8003a4c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003a4e:	0159      	lsls	r1, r3, #5
 8003a50:	d509      	bpl.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->DsiClockSelection)
 8003a52:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003a54:	2900      	cmp	r1, #0
 8003a56:	f000 8290 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x772>
 8003a5a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003a5e:	f000 8284 	beq.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x762>
 8003a62:	2601      	movs	r6, #1
 8003a64:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a66:	041f      	lsls	r7, r3, #16
 8003a68:	d50d      	bpl.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch (PeriphClkInit->FdcanClockSelection)
 8003a6a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003a6c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003a70:	f000 83e2 	beq.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a74:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003a78:	f000 823c 	beq.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	f000 8241 	beq.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8003a82:	2601      	movs	r6, #1
 8003a84:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a86:	01d8      	lsls	r0, r3, #7
 8003a88:	d563      	bpl.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->FmcClockSelection)
 8003a8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003a8c:	2903      	cmp	r1, #3
 8003a8e:	f200 84d0 	bhi.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 8003a92:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003a96:	0054      	.short	0x0054
 8003a98:	03d9004f 	.word	0x03d9004f
 8003a9c:	0054      	.short	0x0054
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a9e:	29c0      	cmp	r1, #192	; 0xc0
 8003aa0:	f43f af04 	beq.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003aa4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003aa8:	f43f af00 	beq.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003aac:	2601      	movs	r6, #1
 8003aae:	4635      	mov	r5, r6
 8003ab0:	e706      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ab2:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8003ab6:	f43f af1c 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003aba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003abe:	f43f af18 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003ac2:	2601      	movs	r6, #1
 8003ac4:	4635      	mov	r5, r6
 8003ac6:	e71f      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ac8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003acc:	f43f af35 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003ad0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003ad4:	f43f af31 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003ad8:	2601      	movs	r6, #1
 8003ada:	4635      	mov	r5, r6
 8003adc:	e738      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->QspiClockSelection)
 8003ade:	2930      	cmp	r1, #48	; 0x30
 8003ae0:	f43f af47 	beq.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003ae4:	2601      	movs	r6, #1
 8003ae6:	4635      	mov	r5, r6
 8003ae8:	e74d      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003aea:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8003aee:	f43f af62 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003af2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003af6:	f43f af5e 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003afa:	2601      	movs	r6, #1
 8003afc:	4635      	mov	r5, r6
 8003afe:	e764      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b00:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b04:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8003b08:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8003b0c:	f43f af73 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b10:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8003b14:	f43f af6f 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b18:	2601      	movs	r6, #1
 8003b1a:	4635      	mov	r5, r6
 8003b1c:	e775      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b1e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8003b22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b26:	d087      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b28:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8003b2c:	d084      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b2e:	2601      	movs	r6, #1
 8003b30:	4635      	mov	r5, r6
 8003b32:	e78c      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x246>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4839      	ldr	r0, [pc, #228]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003b36:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b38:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003b3c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	f040 8315 	bne.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x966>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b44:	4f35      	ldr	r7, [pc, #212]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003b46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003b48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b4a:	f021 0103 	bic.w	r1, r1, #3
 8003b4e:	4301      	orrs	r1, r0
 8003b50:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b52:	0259      	lsls	r1, r3, #9
 8003b54:	f100 823f 	bmi.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b58:	07d8      	lsls	r0, r3, #31
 8003b5a:	d530      	bpl.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b5c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b60:	2928      	cmp	r1, #40	; 0x28
 8003b62:	d82a      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8003b64:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b68:	0029021c 	.word	0x0029021c
 8003b6c:	00290029 	.word	0x00290029
 8003b70:	00290029 	.word	0x00290029
 8003b74:	00290029 	.word	0x00290029
 8003b78:	00290214 	.word	0x00290214
 8003b7c:	00290029 	.word	0x00290029
 8003b80:	00290029 	.word	0x00290029
 8003b84:	00290029 	.word	0x00290029
 8003b88:	00290420 	.word	0x00290420
 8003b8c:	00290029 	.word	0x00290029
 8003b90:	00290029 	.word	0x00290029
 8003b94:	00290029 	.word	0x00290029
 8003b98:	0029021c 	.word	0x0029021c
 8003b9c:	00290029 	.word	0x00290029
 8003ba0:	00290029 	.word	0x00290029
 8003ba4:	00290029 	.word	0x00290029
 8003ba8:	0029021c 	.word	0x0029021c
 8003bac:	00290029 	.word	0x00290029
 8003bb0:	00290029 	.word	0x00290029
 8003bb4:	00290029 	.word	0x00290029
 8003bb8:	021c      	.short	0x021c
 8003bba:	2601      	movs	r6, #1
 8003bbc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bbe:	0799      	lsls	r1, r3, #30
 8003bc0:	d51d      	bpl.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003bc2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003bc4:	2905      	cmp	r1, #5
 8003bc6:	f200 8430 	bhi.w	800442a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003bca:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003bce:	000e      	.short	0x000e
 8003bd0:	03d50006 	.word	0x03d50006
 8003bd4:	000e000e 	.word	0x000e000e
 8003bd8:	000e      	.short	0x000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bda:	2101      	movs	r1, #1
 8003bdc:	f104 0008 	add.w	r0, r4, #8
 8003be0:	f7ff fd1e 	bl	8003620 <RCCEx_PLL2_Config>
 8003be4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	f040 82c1 	bne.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bf0:	4f0a      	ldr	r7, [pc, #40]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003bf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bf6:	f021 0107 	bic.w	r1, r1, #7
 8003bfa:	4301      	orrs	r1, r0
 8003bfc:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bfe:	075f      	lsls	r7, r3, #29
 8003c00:	d521      	bpl.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c02:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003c06:	2905      	cmp	r1, #5
 8003c08:	f200 8417 	bhi.w	800443a <HAL_RCCEx_PeriphCLKConfig+0xc32>
 8003c0c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c10:	00080010 	.word	0x00080010
 8003c14:	001003c0 	.word	0x001003c0
 8003c18:	00100010 	.word	0x00100010
 8003c1c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c20:	2101      	movs	r1, #1
 8003c22:	f104 0008 	add.w	r0, r4, #8
 8003c26:	f7ff fcfb 	bl	8003620 <RCCEx_PLL2_Config>
 8003c2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c30:	2d00      	cmp	r5, #0
 8003c32:	f040 82a0 	bne.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c36:	4fae      	ldr	r7, [pc, #696]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003c38:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8003c3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c3e:	f021 0107 	bic.w	r1, r1, #7
 8003c42:	4301      	orrs	r1, r0
 8003c44:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c46:	0698      	lsls	r0, r3, #26
 8003c48:	d51f      	bpl.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c4a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003c4e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003c52:	f000 82e6 	beq.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003c56:	f200 810b 	bhi.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8003c5a:	b159      	cbz	r1, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003c5c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003c60:	f040 8110 	bne.w	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c64:	2100      	movs	r1, #0
 8003c66:	f104 0008 	add.w	r0, r4, #8
 8003c6a:	f7ff fcd9 	bl	8003620 <RCCEx_PLL2_Config>
 8003c6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	f040 8287 	bne.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7a:	4f9d      	ldr	r7, [pc, #628]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003c7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8003c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c82:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003c86:	4301      	orrs	r1, r0
 8003c88:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c8a:	0659      	lsls	r1, r3, #25
 8003c8c:	d51f      	bpl.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c8e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003c92:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003c96:	f000 82e2 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0xa56>
 8003c9a:	f200 80f6 	bhi.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c9e:	b159      	cbz	r1, 8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003ca0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003ca4:	f040 80fb 	bne.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x696>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	f104 0008 	add.w	r0, r4, #8
 8003cae:	f7ff fcb7 	bl	8003620 <RCCEx_PLL2_Config>
 8003cb2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cb4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	f040 8254 	bne.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cbe:	4f8c      	ldr	r7, [pc, #560]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003cc0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003cc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cc6:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8003cca:	4301      	orrs	r1, r0
 8003ccc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cce:	061f      	lsls	r7, r3, #24
 8003cd0:	d51f      	bpl.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003cd2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003cd6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003cda:	f000 82cc 	beq.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8003cde:	f200 80e1 	bhi.w	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003ce2:	b159      	cbz	r1, 8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003ce4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003ce8:	f040 80e6 	bne.w	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cec:	2100      	movs	r1, #0
 8003cee:	f104 0008 	add.w	r0, r4, #8
 8003cf2:	f7ff fc95 	bl	8003620 <RCCEx_PLL2_Config>
 8003cf6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f040 823e 	bne.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x976>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d02:	4f7b      	ldr	r7, [pc, #492]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d04:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8003d08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d0a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003d0e:	4301      	orrs	r1, r0
 8003d10:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d12:	0718      	lsls	r0, r3, #28
 8003d14:	d50b      	bpl.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x526>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d16:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003d1a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003d1e:	f000 82c3 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d22:	4f73      	ldr	r7, [pc, #460]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d26:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003d2a:	4301      	orrs	r1, r0
 8003d2c:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d2e:	06d9      	lsls	r1, r3, #27
 8003d30:	d50b      	bpl.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x542>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d32:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8003d36:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003d3a:	f000 82c2 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d3e:	4f6c      	ldr	r7, [pc, #432]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003d40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d42:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003d46:	4301      	orrs	r1, r0
 8003d48:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d4a:	031f      	lsls	r7, r3, #12
 8003d4c:	d50e      	bpl.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->AdcClockSelection)
 8003d4e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003d52:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003d56:	f000 80e0 	beq.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x712>
 8003d5a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003d5e:	f000 80e4 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x722>
 8003d62:	2900      	cmp	r1, #0
 8003d64:	f000 8235 	beq.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8003d68:	2601      	movs	r6, #1
 8003d6a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6c:	0358      	lsls	r0, r3, #13
 8003d6e:	d50f      	bpl.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x588>
    switch (PeriphClkInit->UsbClockSelection)
 8003d70:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003d74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003d78:	f000 80e3 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003d7c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003d80:	f000 80e7 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003d84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003d88:	f000 821b 	beq.w	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003d8c:	2601      	movs	r6, #1
 8003d8e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d90:	03d9      	lsls	r1, r3, #15
 8003d92:	d509      	bpl.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003d94:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003d96:	2900      	cmp	r1, #0
 8003d98:	f000 820a 	beq.w	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003d9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003da0:	f000 81ab 	beq.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003da4:	2601      	movs	r6, #1
 8003da6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003da8:	009f      	lsls	r7, r3, #2
 8003daa:	f100 8156 	bmi.w	800405a <HAL_RCCEx_PeriphCLKConfig+0x852>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dae:	0398      	lsls	r0, r3, #14
 8003db0:	d50c      	bpl.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->RngClockSelection)
 8003db2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003db6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003dba:	f000 81ef 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003dbe:	d97e      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003dc0:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8003dc4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003dc8:	d07b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003dca:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dcc:	02d9      	lsls	r1, r3, #11
 8003dce:	d506      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dd0:	4847      	ldr	r0, [pc, #284]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003dd2:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 8003dd4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003dd6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003dda:	4329      	orrs	r1, r5
 8003ddc:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dde:	00df      	lsls	r7, r3, #3
 8003de0:	d507      	bpl.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003de2:	4843      	ldr	r0, [pc, #268]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003de4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8003de8:	6901      	ldr	r1, [r0, #16]
 8003dea:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003dee:	4329      	orrs	r1, r5
 8003df0:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003df2:	029d      	lsls	r5, r3, #10
 8003df4:	d506      	bpl.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003df6:	483e      	ldr	r0, [pc, #248]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003df8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003dfa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003dfc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003e00:	4329      	orrs	r1, r5
 8003e02:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e04:	0058      	lsls	r0, r3, #1
 8003e06:	d509      	bpl.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e08:	4939      	ldr	r1, [pc, #228]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003e0a:	6908      	ldr	r0, [r1, #16]
 8003e0c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8003e10:	6108      	str	r0, [r1, #16]
 8003e12:	6908      	ldr	r0, [r1, #16]
 8003e14:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8003e18:	4328      	orrs	r0, r5
 8003e1a:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da06      	bge.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e20:	4833      	ldr	r0, [pc, #204]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003e22:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003e24:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003e26:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003e2a:	4329      	orrs	r1, r5
 8003e2c:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e2e:	0219      	lsls	r1, r3, #8
 8003e30:	d507      	bpl.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e32:	492f      	ldr	r1, [pc, #188]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003e34:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8003e38:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003e3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e42:	07d3      	lsls	r3, r2, #31
 8003e44:	f100 8136 	bmi.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e48:	0797      	lsls	r7, r2, #30
 8003e4a:	f100 8128 	bmi.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x896>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e4e:	0755      	lsls	r5, r2, #29
 8003e50:	f100 811a 	bmi.w	8004088 <HAL_RCCEx_PeriphCLKConfig+0x880>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e54:	0710      	lsls	r0, r2, #28
 8003e56:	f100 810c 	bmi.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e5a:	06d1      	lsls	r1, r2, #27
 8003e5c:	f100 80ac 	bmi.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e60:	0692      	lsls	r2, r2, #26
 8003e62:	f100 8132 	bmi.w	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
    return HAL_OK;
 8003e66:	1e30      	subs	r0, r6, #0
 8003e68:	bf18      	it	ne
 8003e6a:	2001      	movne	r0, #1
}
 8003e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e70:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8003e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e78:	f43f aefc 	beq.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003e7c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8003e80:	f43f aef8 	beq.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003e84:	2601      	movs	r6, #1
 8003e86:	4635      	mov	r5, r6
 8003e88:	e6ff      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e8a:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8003e8e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8003e92:	f43f af11 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e96:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8003e9a:	f43f af0d 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e9e:	2601      	movs	r6, #1
 8003ea0:	4635      	mov	r5, r6
 8003ea2:	e714      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ea4:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8003ea8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003eac:	f43f af26 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003eb0:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8003eb4:	f43f af22 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003eb8:	2601      	movs	r6, #1
 8003eba:	4635      	mov	r5, r6
 8003ebc:	e729      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->RngClockSelection)
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	d183      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	f040 8168 	bne.w	8004198 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec8:	4d09      	ldr	r5, [pc, #36]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003eca:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8003ecc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003ed0:	4301      	orrs	r1, r0
 8003ed2:	6569      	str	r1, [r5, #84]	; 0x54
 8003ed4:	e77a      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ed6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	f040 8107 	bne.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ede:	4f04      	ldr	r7, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8003ee0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ee4:	f021 0107 	bic.w	r1, r1, #7
 8003ee8:	4301      	orrs	r1, r0
 8003eea:	6539      	str	r1, [r7, #80]	; 0x50
 8003eec:	e4c8      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	f104 0008 	add.w	r0, r4, #8
 8003efa:	f7ff fb91 	bl	8003620 <RCCEx_PLL2_Config>
 8003efe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	f040 8145 	bne.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f0a:	4fb8      	ldr	r7, [pc, #736]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003f0c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f10:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003f14:	4301      	orrs	r1, r0
 8003f16:	6539      	str	r1, [r7, #80]	; 0x50
 8003f18:	e5b5      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003f20:	f7ff fbf8 	bl	8003714 <RCCEx_PLL3_Config>
 8003f24:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f26:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	f040 8130 	bne.w	8004190 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f30:	4fae      	ldr	r7, [pc, #696]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003f32:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f38:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f3c:	4301      	orrs	r1, r0
 8003f3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f40:	e714      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x564>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f42:	2101      	movs	r1, #1
 8003f44:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003f48:	f7ff fbe4 	bl	8003714 <RCCEx_PLL3_Config>
 8003f4c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f4e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	f040 811a 	bne.w	800418c <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f58:	4fa4      	ldr	r7, [pc, #656]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003f5a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f60:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8003f64:	4301      	orrs	r1, r0
 8003f66:	6579      	str	r1, [r7, #84]	; 0x54
 8003f68:	e712      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	f104 0008 	add.w	r0, r4, #8
 8003f70:	f7ff fb56 	bl	8003620 <RCCEx_PLL2_Config>
 8003f74:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	f040 8116 	bne.w	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f80:	4f9a      	ldr	r7, [pc, #616]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003f82:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003f84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003f86:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f8a:	4301      	orrs	r1, r0
 8003f8c:	64f9      	str	r1, [r7, #76]	; 0x4c
 8003f8e:	e56a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f90:	2101      	movs	r1, #1
 8003f92:	f104 0008 	add.w	r0, r4, #8
 8003f96:	f7ff fb43 	bl	8003620 <RCCEx_PLL2_Config>
 8003f9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	f040 80de 	bne.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fa6:	4f91      	ldr	r7, [pc, #580]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003fa8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fae:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8003fb2:	4301      	orrs	r1, r0
 8003fb4:	6579      	str	r1, [r7, #84]	; 0x54
 8003fb6:	e602      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fb8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f7ff fba8 	bl	8003714 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f000 810e 	beq.w	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fca:	6863      	ldr	r3, [r4, #4]
 8003fcc:	069b      	lsls	r3, r3, #26
 8003fce:	f140 8085 	bpl.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	e07b      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd6:	4f86      	ldr	r7, [pc, #536]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fde:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003fe0:	f7fd f908 	bl	80011f4 <HAL_GetTick>
 8003fe4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe6:	e006      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fd f904 	bl	80011f4 <HAL_GetTick>
 8003fec:	eba0 0008 	sub.w	r0, r0, r8
 8003ff0:	2864      	cmp	r0, #100	; 0x64
 8003ff2:	f200 81e5 	bhi.w	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	05da      	lsls	r2, r3, #23
 8003ffa:	d5f5      	bpl.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	f040 820f 	bne.w	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004002:	4a7a      	ldr	r2, [pc, #488]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004004:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004008:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800400a:	4059      	eors	r1, r3
 800400c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8004010:	d00b      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x822>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004012:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004014:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004016:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800401a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800401e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8004022:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004026:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004028:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	f000 81d9 	beq.w	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004032:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004036:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800403a:	f000 81e7 	beq.w	800440c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800403e:	496b      	ldr	r1, [pc, #428]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004040:	690a      	ldr	r2, [r1, #16]
 8004042:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004046:	610a      	str	r2, [r1, #16]
 8004048:	4868      	ldr	r0, [pc, #416]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800404a:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800404e:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8004050:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004052:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004056:	6701      	str	r1, [r0, #112]	; 0x70
 8004058:	e57e      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800405a:	2102      	movs	r1, #2
 800405c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004060:	f7ff fb58 	bl	8003714 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004064:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004068:	2800      	cmp	r0, #0
 800406a:	f43f aea0 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = HAL_ERROR;
 800406e:	2601      	movs	r6, #1
 8004070:	e69d      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004072:	2100      	movs	r1, #0
 8004074:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004078:	f7ff fb4c 	bl	8003714 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800407c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800407e:	2800      	cmp	r0, #0
 8004080:	f43f aeeb 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x652>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004084:	4606      	mov	r6, r0
 8004086:	e6e8      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x652>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004088:	2102      	movs	r1, #2
 800408a:	f104 0008 	add.w	r0, r4, #8
 800408e:	f7ff fac7 	bl	8003620 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004092:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004094:	2800      	cmp	r0, #0
 8004096:	f43f aedd 	beq.w	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800409a:	4606      	mov	r6, r0
 800409c:	e6da      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800409e:	2101      	movs	r1, #1
 80040a0:	f104 0008 	add.w	r0, r4, #8
 80040a4:	f7ff fabc 	bl	8003620 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80040aa:	2800      	cmp	r0, #0
 80040ac:	f43f aecf 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x646>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040b0:	4606      	mov	r6, r0
 80040b2:	e6cc      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x646>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b4:	2100      	movs	r1, #0
 80040b6:	f104 0008 	add.w	r0, r4, #8
 80040ba:	f7ff fab1 	bl	8003620 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040be:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80040c0:	2800      	cmp	r0, #0
 80040c2:	f43f aec1 	beq.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x640>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040c6:	4606      	mov	r6, r0
 80040c8:	e6be      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x640>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ca:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ce:	2102      	movs	r1, #2
 80040d0:	4628      	mov	r0, r5
 80040d2:	f7ff fb1f 	bl	8003714 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f43f aec5 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x65e>
  return HAL_ERROR;
 80040dc:	2001      	movs	r0, #1
}
 80040de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040e2:	462e      	mov	r6, r5
 80040e4:	f7ff bbec 	b.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80040e8:	462e      	mov	r6, r5
 80040ea:	e40d      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80040ec:	462e      	mov	r6, r5
 80040ee:	f7ff bbc7 	b.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040f2:	462e      	mov	r6, r5
 80040f4:	e469      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80040f6:	462e      	mov	r6, r5
 80040f8:	e42a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x148>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040fa:	2102      	movs	r1, #2
 80040fc:	f104 0008 	add.w	r0, r4, #8
 8004100:	f7ff fa8e 	bl	8003620 <RCCEx_PLL2_Config>
 8004104:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004106:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800410a:	2d00      	cmp	r5, #0
 800410c:	d157      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800410e:	4f37      	ldr	r7, [pc, #220]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004112:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004114:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004118:	4301      	orrs	r1, r0
 800411a:	64f9      	str	r1, [r7, #76]	; 0x4c
 800411c:	e644      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411e:	4d33      	ldr	r5, [pc, #204]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004120:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004122:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004126:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8004128:	f7ff bb8e 	b.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x40>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412c:	482f      	ldr	r0, [pc, #188]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800412e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004130:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004134:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004136:	e43e      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	482c      	ldr	r0, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800413a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800413c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004140:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004142:	f7ff bbb3 	b.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4829      	ldr	r0, [pc, #164]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004148:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800414a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800414e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004150:	f7ff bbcf 	b.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004154:	4825      	ldr	r0, [pc, #148]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004156:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004158:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800415c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800415e:	f7ff bbec 	b.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004162:	462e      	mov	r6, r5
 8004164:	e52b      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004166:	462e      	mov	r6, r5
 8004168:	e5b1      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800416a:	462e      	mov	r6, r5
 800416c:	e46f      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x246>
 800416e:	462e      	mov	r6, r5
 8004170:	e4ef      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004172:	462e      	mov	r6, r5
 8004174:	e543      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004176:	462e      	mov	r6, r5
 8004178:	e565      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800417a:	462e      	mov	r6, r5
 800417c:	e445      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800417e:	462e      	mov	r6, r5
 8004180:	e5c7      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004182:	462e      	mov	r6, r5
 8004184:	f7ff bbff 	b.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004188:	462e      	mov	r6, r5
 800418a:	e57e      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800418c:	462e      	mov	r6, r5
 800418e:	e5ff      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004190:	462e      	mov	r6, r5
 8004192:	e5eb      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x564>
 8004194:	462e      	mov	r6, r5
 8004196:	e476      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004198:	462e      	mov	r6, r5
 800419a:	e617      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4f13      	ldr	r7, [pc, #76]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800419e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041a0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	d1f6      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80041aa:	e68d      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80041ac:	462e      	mov	r6, r5
 80041ae:	e45a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	480e      	ldr	r0, [pc, #56]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80041b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041b4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80041b8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	d0a7      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x906>
 80041be:	462e      	mov	r6, r5
 80041c0:	e5f2      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	480a      	ldr	r0, [pc, #40]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80041c4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041c6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80041ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	d1dd      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80041d0:	e6c2      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x750>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d2:	f104 0008 	add.w	r0, r4, #8
 80041d6:	f7ff fa23 	bl	8003620 <RCCEx_PLL2_Config>
 80041da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	d1d5      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80041e4:	e6a4      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	e63a      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400
 80041f0:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f4:	2101      	movs	r1, #1
 80041f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80041fa:	f7ff fa8b 	bl	8003714 <RCCEx_PLL3_Config>
 80041fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004200:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004204:	2d00      	cmp	r5, #0
 8004206:	d1b8      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004208:	f7ff bbf8 	b.w	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800420c:	2101      	movs	r1, #1
 800420e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004212:	f7ff fa7f 	bl	8003714 <RCCEx_PLL3_Config>
 8004216:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004218:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800421c:	2d00      	cmp	r5, #0
 800421e:	d1a4      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004220:	e40d      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004222:	2102      	movs	r1, #2
 8004224:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004228:	f7ff fa74 	bl	8003714 <RCCEx_PLL3_Config>
 800422c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800422e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004232:	2d00      	cmp	r5, #0
 8004234:	d1a8      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004236:	e520      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x472>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4883      	ldr	r0, [pc, #524]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 800423a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800423c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004240:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004242:	2d00      	cmp	r5, #0
 8004244:	d1a6      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004246:	e660      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004248:	2102      	movs	r1, #2
 800424a:	f104 0008 	add.w	r0, r4, #8
 800424e:	f7ff f9e7 	bl	8003620 <RCCEx_PLL2_Config>
 8004252:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004254:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004258:	2d00      	cmp	r5, #0
 800425a:	d188      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800425c:	e472      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425e:	2102      	movs	r1, #2
 8004260:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004264:	f7ff fa56 	bl	8003714 <RCCEx_PLL3_Config>
 8004268:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800426a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800426e:	2d00      	cmp	r5, #0
 8004270:	f47f af79 	bne.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8004274:	e523      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004276:	2102      	movs	r1, #2
 8004278:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800427c:	f7ff fa4a 	bl	8003714 <RCCEx_PLL3_Config>
 8004280:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004282:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004286:	2d00      	cmp	r5, #0
 8004288:	f47f af79 	bne.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800428c:	e539      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800428e:	2102      	movs	r1, #2
 8004290:	f104 0008 	add.w	r0, r4, #8
 8004294:	f7ff f9c4 	bl	8003620 <RCCEx_PLL2_Config>
 8004298:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800429a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800429e:	2d00      	cmp	r5, #0
 80042a0:	f47f af6f 	bne.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80042a4:	f7ff bb68 	b.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x170>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042a8:	2102      	movs	r1, #2
 80042aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042ae:	f7ff fa31 	bl	8003714 <RCCEx_PLL3_Config>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f040 808a 	bne.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80042c0:	e52f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042c2:	2102      	movs	r1, #2
 80042c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042c8:	f7ff fa24 	bl	8003714 <RCCEx_PLL3_Config>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f040 8083 	bne.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042d2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80042da:	e530      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80042e0:	f7ff bab9 	b.w	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042e4:	2102      	movs	r1, #2
 80042e6:	3028      	adds	r0, #40	; 0x28
 80042e8:	f7ff fa14 	bl	8003714 <RCCEx_PLL3_Config>
 80042ec:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	f43f aaa7 	beq.w	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80042f4:	e7f2      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xad4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042f6:	2100      	movs	r1, #0
 80042f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042fc:	f7ff fa0a 	bl	8003714 <RCCEx_PLL3_Config>
 8004300:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004302:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004306:	f7ff baf4 	b.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800430a:	2100      	movs	r1, #0
 800430c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004310:	f7ff fa00 	bl	8003714 <RCCEx_PLL3_Config>
 8004314:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004316:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800431a:	f7ff bb0e 	b.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800431e:	2100      	movs	r1, #0
 8004320:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004324:	f7ff f9f6 	bl	8003714 <RCCEx_PLL3_Config>
 8004328:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800432a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800432e:	f7ff babd 	b.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004332:	2100      	movs	r1, #0
 8004334:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004338:	f7ff f9ec 	bl	8003714 <RCCEx_PLL3_Config>
 800433c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800433e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004342:	f7ff bb38 	b.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004346:	4840      	ldr	r0, [pc, #256]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
        break;
 8004348:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800434c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004350:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004352:	e5c1      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004354:	2100      	movs	r1, #0
 8004356:	f104 0008 	add.w	r0, r4, #8
 800435a:	f7ff f961 	bl	8003620 <RCCEx_PLL2_Config>
 800435e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004360:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004364:	e5b8      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004366:	2100      	movs	r1, #0
 8004368:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800436c:	f7ff f9d2 	bl	8003714 <RCCEx_PLL3_Config>
 8004370:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004372:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004376:	e5af      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004378:	2101      	movs	r1, #1
 800437a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800437e:	f7ff f9c9 	bl	8003714 <RCCEx_PLL3_Config>
 8004382:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004384:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004388:	2d00      	cmp	r5, #0
 800438a:	f47f aef2 	bne.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800438e:	e42f      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004390:	2101      	movs	r1, #1
 8004392:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004396:	f7ff f9bd 	bl	8003714 <RCCEx_PLL3_Config>
 800439a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800439c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	f47f aee8 	bne.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043a6:	e446      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a8:	2101      	movs	r1, #1
 80043aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043ae:	f7ff f9b1 	bl	8003714 <RCCEx_PLL3_Config>
 80043b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	f47f aed2 	bne.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80043be:	e5f2      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        status = ret;
 80043c0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80043c6:	4635      	mov	r5, r6
 80043c8:	f7ff bbc6 	b.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
        status = HAL_ERROR;
 80043d0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80043d6:	e4a4      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
        status = HAL_ERROR;
 80043dc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80043e2:	e4ac      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x536>
        tickstart = HAL_GetTick();
 80043e4:	f7fc ff06 	bl	80011f4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004448 <HAL_RCCEx_PeriphCLKConfig+0xc40>
        tickstart = HAL_GetTick();
 80043ec:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fc fefe 	bl	80011f4 <HAL_GetTick>
 80043f8:	1bc0      	subs	r0, r0, r7
 80043fa:	4548      	cmp	r0, r9
 80043fc:	d8e0      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fe:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8004402:	079b      	lsls	r3, r3, #30
 8004404:	d5f6      	bpl.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004406:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800440a:	e612      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800440c:	480e      	ldr	r0, [pc, #56]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 800440e:	4a0f      	ldr	r2, [pc, #60]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004410:	6901      	ldr	r1, [r0, #16]
 8004412:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004416:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800441a:	430a      	orrs	r2, r1
 800441c:	6102      	str	r2, [r0, #16]
 800441e:	e613      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004420:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004424:	462e      	mov	r6, r5
 8004426:	f7ff bb97 	b.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800442a:	2601      	movs	r6, #1
 800442c:	4635      	mov	r5, r6
 800442e:	f7ff bbe6 	b.w	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->FmcClockSelection)
 8004432:	2601      	movs	r6, #1
 8004434:	4635      	mov	r5, r6
 8004436:	f7ff bb8c 	b.w	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800443a:	2601      	movs	r6, #1
 800443c:	4635      	mov	r5, r6
 800443e:	e402      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004440:	2601      	movs	r6, #1
 8004442:	f7ff ba1c 	b.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
 800444c:	00ffffcf 	.word	0x00ffffcf

08004450 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004450:	4a50      	ldr	r2, [pc, #320]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8004452:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004454:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004456:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004458:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800445a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800445e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004462:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004464:	d05d      	beq.n	8004522 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004466:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800446a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800446e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004472:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004476:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004478:	ee07 4a90 	vmov	s15, r4
 800447c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8004482:	2902      	cmp	r1, #2
 8004484:	d078      	beq.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8004486:	2900      	cmp	r1, #0
 8004488:	d050      	beq.n	800452c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8004492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004496:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004498:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800449c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80044ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80044b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80044b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80044bc:	4a35      	ldr	r2, [pc, #212]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 80044be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80044c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80044c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80044d0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80044d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044de:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80044e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80044e4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80044f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80044fc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004500:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004502:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004506:	ee07 3a10 	vmov	s14, r3
 800450a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800450e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451a:	ee17 3a90 	vmov	r3, s15
 800451e:	6083      	str	r3, [r0, #8]
}
 8004520:	4770      	bx	lr
 8004522:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004524:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004528:	6083      	str	r3, [r0, #8]
}
 800452a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800452c:	6811      	ldr	r1, [r2, #0]
 800452e:	0689      	lsls	r1, r1, #26
 8004530:	d529      	bpl.n	8004586 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004532:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004534:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004538:	4919      	ldr	r1, [pc, #100]	; (80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004540:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004548:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004550:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004552:	ee06 3a10 	vmov	s12, r3
 8004556:	ee05 1a90 	vmov	s11, r1
 800455a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800455e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004562:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004566:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800456a:	eef0 7a46 	vmov.f32	s15, s12
 800456e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004576:	e7a1      	b.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8004580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004584:	e787      	b.n	8004496 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800458e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004592:	e780      	b.n	8004496 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004594:	58024400 	.word	0x58024400
 8004598:	4a742400 	.word	0x4a742400
 800459c:	39000000 	.word	0x39000000
 80045a0:	03d09000 	.word	0x03d09000
 80045a4:	4bbebc20 	.word	0x4bbebc20
 80045a8:	4c742400 	.word	0x4c742400

080045ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ac:	4a50      	ldr	r2, [pc, #320]	; (80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 80045ae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045b2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045b4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80045b6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045ba:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045be:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80045c0:	d05d      	beq.n	800467e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045c2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045c6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ca:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045ce:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80045d2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045d4:	ee07 4a90 	vmov	s15, r4
 80045d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80045dc:	d003      	beq.n	80045e6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80045de:	2902      	cmp	r1, #2
 80045e0:	d078      	beq.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d050      	beq.n	8004688 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80046f4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80045ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045f4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80045f8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800460c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004610:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004614:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800461a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800461e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004620:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800462c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800462e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004636:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800463a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800463e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004640:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800464c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004654:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004658:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800465c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800465e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004662:	ee07 3a10 	vmov	s14, r3
 8004666:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800466a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800466e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004676:	ee17 3a90 	vmov	r3, s15
 800467a:	6083      	str	r3, [r0, #8]
}
 800467c:	4770      	bx	lr
 800467e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004680:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004684:	6083      	str	r3, [r0, #8]
}
 8004686:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004688:	6811      	ldr	r1, [r2, #0]
 800468a:	0689      	lsls	r1, r1, #26
 800468c:	d529      	bpl.n	80046e2 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800468e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004690:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004694:	4919      	ldr	r1, [pc, #100]	; (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800469c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046ac:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046ae:	ee06 3a10 	vmov	s12, r3
 80046b2:	ee05 1a90 	vmov	s11, r1
 80046b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80046ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80046be:	ee36 6a26 	vadd.f32	s12, s12, s13
 80046c2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80046c6:	eef0 7a46 	vmov.f32	s15, s12
 80046ca:	eee7 7a05 	vfma.f32	s15, s14, s10
 80046ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d2:	e7a1      	b.n	8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80046dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e0:	e787      	b.n	80045f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 80046ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ee:	e780      	b.n	80045f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80046f0:	58024400 	.word	0x58024400
 80046f4:	4a742400 	.word	0x4a742400
 80046f8:	39000000 	.word	0x39000000
 80046fc:	03d09000 	.word	0x03d09000
 8004700:	4bbebc20 	.word	0x4bbebc20
 8004704:	4c742400 	.word	0x4c742400

08004708 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004708:	4a51      	ldr	r2, [pc, #324]	; (8004850 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 800470a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800470c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800470e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004710:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8004712:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004716:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800471a:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800471c:	d05e      	beq.n	80047dc <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800471e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004722:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004726:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800472a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800472e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004730:	ee07 4a90 	vmov	s15, r4
 8004734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004738:	f000 8082 	beq.w	8004840 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 800473c:	2902      	cmp	r1, #2
 800473e:	d078      	beq.n	8004832 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8004740:	2900      	cmp	r1, #0
 8004742:	d050      	beq.n	80047e6 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004854 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800474c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004750:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004752:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004756:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004858 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800476e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004772:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004776:	4a36      	ldr	r2, [pc, #216]	; (8004850 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8004778:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800477c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800477e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800478a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800478c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004794:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004798:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800479c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800479e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80047b6:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80047ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047bc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80047c0:	ee07 3a10 	vmov	s14, r3
 80047c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80047c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 3a90 	vmov	r3, s15
 80047d8:	6083      	str	r3, [r0, #8]
}
 80047da:	4770      	bx	lr
 80047dc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80047de:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80047e2:	6083      	str	r3, [r0, #8]
}
 80047e4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e6:	6811      	ldr	r1, [r2, #0]
 80047e8:	0689      	lsls	r1, r1, #26
 80047ea:	d5ab      	bpl.n	8004744 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ee:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f2:	491a      	ldr	r1, [pc, #104]	; (800485c <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047fa:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004802:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8004858 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800480a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800480c:	ee06 3a10 	vmov	s12, r3
 8004810:	ee05 1a90 	vmov	s11, r1
 8004814:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004818:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800481c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004820:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004824:	eef0 7a46 	vmov.f32	s15, s12
 8004828:	eee7 7a05 	vfma.f32	s15, s14, s10
 800482c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004830:	e7a1      	b.n	8004776 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8004860 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483e:	e787      	b.n	8004750 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004864 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8004848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800484c:	e780      	b.n	8004750 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800484e:	bf00      	nop
 8004850:	58024400 	.word	0x58024400
 8004854:	4c742400 	.word	0x4c742400
 8004858:	39000000 	.word	0x39000000
 800485c:	03d09000 	.word	0x03d09000
 8004860:	4bbebc20 	.word	0x4bbebc20
 8004864:	4a742400 	.word	0x4a742400

08004868 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004868:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800486c:	430b      	orrs	r3, r1
{
 800486e:	b500      	push	{lr}
 8004870:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004872:	f000 8083 	beq.w	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004876:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800487a:	430b      	orrs	r3, r1
 800487c:	d038      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800487e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8004882:	430b      	orrs	r3, r1
 8004884:	f000 80e6 	beq.w	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004888:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800488c:	430b      	orrs	r3, r1
 800488e:	f000 8089 	beq.w	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004892:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8004896:	430b      	orrs	r3, r1
 8004898:	d060      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800489a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800489e:	430b      	orrs	r3, r1
 80048a0:	f000 8112 	beq.w	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80048a4:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f000 80a3 	beq.w	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80048ae:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80048b2:	430b      	orrs	r3, r1
 80048b4:	f000 80fa 	beq.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80048b8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80048bc:	430b      	orrs	r3, r1
 80048be:	f000 8143 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80048c2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80048c6:	4308      	orrs	r0, r1
 80048c8:	d137      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80048ca:	4a9a      	ldr	r2, [pc, #616]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80048ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80048d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d6:	f000 8084 	beq.w	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80048da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048de:	f000 8157 	beq.w	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80048e2:	bb53      	cbnz	r3, 800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048e4:	6810      	ldr	r0, [r2, #0]
 80048e6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80048ea:	d044      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80048ec:	4892      	ldr	r0, [pc, #584]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80048ee:	e042      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80048f0:	4a90      	ldr	r2, [pc, #576]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80048f4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	f000 80a6 	beq.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80048fe:	d920      	bls.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004900:	2bc0      	cmp	r3, #192	; 0xc0
 8004902:	d037      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004908:	d117      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800490a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800490c:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800490e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004912:	0749      	lsls	r1, r1, #29
 8004914:	d502      	bpl.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80c2 	beq.w	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800491c:	4a85      	ldr	r2, [pc, #532]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	05d0      	lsls	r0, r2, #23
 8004922:	d503      	bpl.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004928:	f000 8102 	beq.w	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800492c:	4a81      	ldr	r2, [pc, #516]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	0391      	lsls	r1, r2, #14
 8004932:	d502      	bpl.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004938:	d0d8      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800493a:	2000      	movs	r0, #0
}
 800493c:	b005      	add	sp, #20
 800493e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04d      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d1f7      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800494a:	6810      	ldr	r0, [r2, #0]
 800494c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004950:	d011      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004952:	a801      	add	r0, sp, #4
 8004954:	f7ff fd7c 	bl	8004450 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004958:	9801      	ldr	r0, [sp, #4]
 800495a:	e00c      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800495c:	4a75      	ldr	r2, [pc, #468]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800495e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004960:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d06f      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800496a:	d938      	bls.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800496c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004970:	f040 8088 	bne.w	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004974:	4871      	ldr	r0, [pc, #452]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004976:	b005      	add	sp, #20
 8004978:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800497c:	4b6d      	ldr	r3, [pc, #436]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004984:	2b04      	cmp	r3, #4
 8004986:	d8d8      	bhi.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	08004a33 	.word	0x08004a33
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a1f 	.word	0x08004a1f
 800499c:	08004975 	.word	0x08004975
 80049a0:	08004a1b 	.word	0x08004a1b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80049a4:	4a63      	ldr	r2, [pc, #396]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80049a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 80049ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049b0:	d04b      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80049b2:	d944      	bls.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80049b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049b8:	d0dc      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80049ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049be:	d1bc      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049c2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049c8:	0752      	lsls	r2, r2, #29
 80049ca:	d5a7      	bpl.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1a5      	bne.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049d0:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049d2:	485b      	ldr	r0, [pc, #364]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80049da:	40d8      	lsrs	r0, r3
 80049dc:	e7cb      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d154      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049e2:	6810      	ldr	r0, [r2, #0]
 80049e4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80049e8:	d0c5      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ea:	a801      	add	r0, sp, #4
 80049ec:	f7ff fe8c 	bl	8004708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049f0:	9802      	ldr	r0, [sp, #8]
 80049f2:	e7c0      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049f4:	4a4f      	ldr	r2, [pc, #316]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80049f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	f000 80d0 	beq.w	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a08:	d0da      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d195      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a0e:	4b49      	ldr	r3, [pc, #292]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004a16:	d0ae      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004a18:	e79b      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a1a:	4a46      	ldr	r2, [pc, #280]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a1c:	e775      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a1e:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004a26:	d0a6      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a28:	a801      	add	r0, sp, #4
 8004a2a:	f7ff fdbf 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a2e:	9801      	ldr	r0, [sp, #4]
 8004a30:	e7a1      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a32:	4b40      	ldr	r3, [pc, #256]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004a3a:	d09c      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004a3c:	e7d5      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0cf      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004a42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a46:	d080      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004a48:	e777      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a4a:	6810      	ldr	r0, [r2, #0]
 8004a4c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004a50:	d091      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004a52:	e7e9      	b.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004a54:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a58:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a60:	d0f3      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004a62:	d806      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0bc      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6c:	f43f af6d 	beq.w	800494a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004a70:	e763      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a76:	f43f af7d 	beq.w	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a7e:	f43f af44 	beq.w	800490a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8004a82:	e75a      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a88:	d09a      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004a8a:	e756      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	f43f af5b 	beq.w	800494a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004a94:	e751      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a96:	6810      	ldr	r0, [r2, #0]
 8004a98:	f010 0004 	ands.w	r0, r0, #4
 8004a9c:	f43f af6b 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	4827      	ldr	r0, [pc, #156]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004aa4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004aa8:	40d8      	lsrs	r0, r3
 8004aaa:	e764      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8004ab0:	03d2      	lsls	r2, r2, #15
 8004ab2:	d5bf      	bpl.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004aba:	f43f af5c 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004abe:	a801      	add	r0, sp, #4
 8004ac0:	f7ff fcc6 	bl	8004450 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ac4:	9803      	ldr	r0, [sp, #12]
 8004ac6:	e756      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004acc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8004ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ad4:	d0df      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004ad6:	d810      	bhi.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004adc:	d058      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae2:	d118      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004aec:	f43f af43 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af0:	a801      	add	r0, sp, #4
 8004af2:	f7ff fd5b 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004af6:	9802      	ldr	r0, [sp, #8]
 8004af8:	e73d      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afe:	d012      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b04:	f47f af19 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004b10:	f43f af31 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004b14:	e6ea      	b.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f47f af0f 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8004b1c:	b005      	add	sp, #20
 8004b1e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004b22:	f7fe bd35 	b.w	8003590 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004b26:	6810      	ldr	r0, [r2, #0]
 8004b28:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004b2c:	f43f af23 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8004b30:	4804      	ldr	r0, [pc, #16]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004b32:	e720      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004b34:	58024400 	.word	0x58024400
 8004b38:	017d7840 	.word	0x017d7840
 8004b3c:	00bb8000 	.word	0x00bb8000
 8004b40:	03d09000 	.word	0x03d09000
 8004b44:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8004b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b54:	d037      	beq.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8004b56:	d814      	bhi.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5c:	d03f      	beq.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b62:	d0bf      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f aee8 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b6a:	f7fe fcd1 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8004b6e:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b78:	5cd3      	ldrb	r3, [r2, r3]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	40d8      	lsrs	r0, r3
        break;
 8004b80:	e6f9      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d017      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8004b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b8c:	d0bc      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004b8e:	e6d4      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b90:	6810      	ldr	r0, [r2, #0]
 8004b92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004b96:	f43f aeee 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b9a:	a801      	add	r0, sp, #4
 8004b9c:	f7ff fc58 	bl	8004450 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ba0:	9802      	ldr	r0, [sp, #8]
 8004ba2:	e6e8      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ba4:	6810      	ldr	r0, [r2, #0]
 8004ba6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004baa:	f43f aee4 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bae:	a801      	add	r0, sp, #4
 8004bb0:	f7ff fcfc 	bl	80045ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004bb4:	9803      	ldr	r0, [sp, #12]
 8004bb6:	e6de      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004bc0:	f43f aed9 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004bc4:	e7b4      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	f010 0004 	ands.w	r0, r0, #4
 8004bce:	f43f aed2 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8004bd6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004bda:	40d8      	lsrs	r0, r3
 8004bdc:	e6cb      	b.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bde:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004be6:	f43f aec6 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004bea:	e7d6      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	08005188 	.word	0x08005188
 8004bf4:	03d09000 	.word	0x03d09000

08004bf8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8004bf8:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004bfa:	492c      	ldr	r1, [pc, #176]	; (8004cac <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8004bfc:	695a      	ldr	r2, [r3, #20]
{
 8004bfe:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004c00:	699c      	ldr	r4, [r3, #24]
 8004c02:	f044 0408 	orr.w	r4, r4, #8
 8004c06:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004c08:	699c      	ldr	r4, [r3, #24]
 8004c0a:	f044 0410 	orr.w	r4, r4, #16
 8004c0e:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8004c10:	681c      	ldr	r4, [r3, #0]
 8004c12:	f024 0401 	bic.w	r4, r4, #1
 8004c16:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004c18:	691c      	ldr	r4, [r3, #16]
 8004c1a:	4021      	ands	r1, r4
 8004c1c:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8004c24:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c26:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8004c2a:	2904      	cmp	r1, #4
 8004c2c:	d001      	beq.n	8004c32 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004c2e:	0691      	lsls	r1, r2, #26
 8004c30:	d430      	bmi.n	8004c94 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c32:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8004c36:	2903      	cmp	r1, #3
 8004c38:	d001      	beq.n	8004c3e <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004c3a:	0654      	lsls	r4, r2, #25
 8004c3c:	d41f      	bmi.n	8004c7e <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004c3e:	0591      	lsls	r1, r2, #22
 8004c40:	d509      	bpl.n	8004c56 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c42:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004c46:	f041 0101 	orr.w	r1, r1, #1
 8004c4a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c4e:	6999      	ldr	r1, [r3, #24]
 8004c50:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004c54:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004c56:	05d2      	lsls	r2, r2, #23
 8004c58:	d509      	bpl.n	8004c6e <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c5a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004c6e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8004c70:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8004c74:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004c78:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8004c7c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c7e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004c82:	f041 0104 	orr.w	r1, r1, #4
 8004c86:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004c90:	6199      	str	r1, [r3, #24]
 8004c92:	e7d4      	b.n	8004c3e <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004c94:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004c98:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004c9c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	f041 0120 	orr.w	r1, r1, #32
 8004ca6:	6199      	str	r1, [r3, #24]
 8004ca8:	e7c3      	b.n	8004c32 <SPI_CloseTransfer+0x3a>
 8004caa:	bf00      	nop
 8004cac:	fffffc90 	.word	0xfffffc90

08004cb0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f000 80c9 	beq.w	8004e48 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cb6:	4a66      	ldr	r2, [pc, #408]	; (8004e50 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb8:	2100      	movs	r1, #0
{
 8004cba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc2:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d017      	beq.n	8004cf8 <HAL_SPI_Init+0x48>
 8004cc8:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <HAL_SPI_Init+0x48>
 8004cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	68c2      	ldr	r2, [r0, #12]
 8004cd8:	f000 80ae 	beq.w	8004e38 <HAL_SPI_Init+0x188>
 8004cdc:	2a0f      	cmp	r2, #15
 8004cde:	d808      	bhi.n	8004cf2 <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ce0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ce2:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ce6:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004ce8:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8004cea:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cee:	2908      	cmp	r1, #8
 8004cf0:	d916      	bls.n	8004d20 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
}
 8004cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004cf8:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004cfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004cfc:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d00:	4e53      	ldr	r6, [pc, #332]	; (8004e50 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d02:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004d04:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8004d06:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d0a:	4d52      	ldr	r5, [pc, #328]	; (8004e54 <HAL_SPI_Init+0x1a4>)
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	bf18      	it	ne
 8004d10:	42b3      	cmpne	r3, r6
 8004d12:	d003      	beq.n	8004d1c <HAL_SPI_Init+0x6c>
 8004d14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	d101      	bne.n	8004d20 <HAL_SPI_Init+0x70>
 8004d1c:	2910      	cmp	r1, #16
 8004d1e:	d8e8      	bhi.n	8004cf2 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d20:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8004d24:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d07a      	beq.n	8004e22 <HAL_SPI_Init+0x172>
 8004d2c:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d30:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d32:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d36:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d3a:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	f021 0101 	bic.w	r1, r1, #1
 8004d44:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d46:	6899      	ldr	r1, [r3, #8]
 8004d48:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	d058      	beq.n	8004e02 <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004d50:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8004d54:	d001      	beq.n	8004d5a <HAL_SPI_Init+0xaa>
 8004d56:	2a06      	cmp	r2, #6
 8004d58:	d849      	bhi.n	8004dee <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004d5a:	f8d3 e000 	ldr.w	lr, [r3]
 8004d5e:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8004d62:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004d66:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004d68:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004d6c:	4337      	orrs	r7, r6
 8004d6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d70:	4337      	orrs	r7, r6
 8004d72:	6926      	ldr	r6, [r4, #16]
 8004d74:	4337      	orrs	r7, r6
 8004d76:	6966      	ldr	r6, [r4, #20]
 8004d78:	4337      	orrs	r7, r6
 8004d7a:	6a26      	ldr	r6, [r4, #32]
 8004d7c:	4337      	orrs	r7, r6
 8004d7e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8004d80:	4337      	orrs	r7, r6
 8004d82:	68a6      	ldr	r6, [r4, #8]
 8004d84:	4337      	orrs	r7, r6
 8004d86:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8004d88:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004d8a:	69e6      	ldr	r6, [r4, #28]
 8004d8c:	4332      	orrs	r2, r6
 8004d8e:	4302      	orrs	r2, r0
 8004d90:	ea42 020c 	orr.w	r2, r2, ip
 8004d94:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004d96:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004d98:	433a      	orrs	r2, r7
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	432a      	orrs	r2, r5
 8004d9e:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004da0:	b9b9      	cbnz	r1, 8004dd2 <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dc2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004dc4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dc6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004dca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8004dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004dda:	f1b9 0f00 	cmp.w	r9, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004de4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004de8:	430a      	orrs	r2, r1
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e7e9      	b.n	8004dc2 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004dee:	f8d3 e000 	ldr.w	lr, [r3]
 8004df2:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8004df4:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8004df8:	ea4e 0e06 	orr.w	lr, lr, r6
 8004dfc:	f8c3 e000 	str.w	lr, [r3]
 8004e00:	e7b1      	b.n	8004d66 <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e02:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004e06:	d006      	beq.n	8004e16 <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	d1a1      	bne.n	8004d50 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e0c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e12:	4689      	mov	r9, r1
 8004e14:	e7a1      	b.n	8004d5a <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e16:	b9cd      	cbnz	r5, 8004e4c <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e18:	681e      	ldr	r6, [r3, #0]
 8004e1a:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8004e1e:	601e      	str	r6, [r3, #0]
 8004e20:	e796      	b.n	8004d50 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 8004e22:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004e24:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8004e28:	f7fc f8c2 	bl	8000fb0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004e2c:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e2e:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e30:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8004e34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e36:	e77b      	b.n	8004d30 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004e38:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004e3a:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004e3e:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004e40:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8004e42:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004e46:	e769      	b.n	8004d1c <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8004e48:	2001      	movs	r0, #1
}
 8004e4a:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e4c:	4689      	mov	r9, r1
 8004e4e:	e782      	b.n	8004d56 <HAL_SPI_Init+0xa6>
 8004e50:	40013000 	.word	0x40013000
 8004e54:	40003800 	.word	0x40003800

08004e58 <HAL_SPI_TransmitReceive>:
{
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004e5e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8004e62:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f000 80b9 	beq.w	8004fdc <HAL_SPI_TransmitReceive+0x184>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4688      	mov	r8, r1
 8004e70:	4691      	mov	r9, r2
 8004e72:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004e76:	f8d0 a000 	ldr.w	sl, [r0]
  tickstart = HAL_GetTick();
 8004e7a:	f7fc f9bb 	bl	80011f4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e7e:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8004e82:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e84:	2901      	cmp	r1, #1
 8004e86:	b2cb      	uxtb	r3, r1
 8004e88:	f040 80a1 	bne.w	8004fce <HAL_SPI_TransmitReceive+0x176>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	bf18      	it	ne
 8004e92:	f1b8 0f00 	cmpne.w	r8, #0
 8004e96:	f000 8094 	beq.w	8004fc2 <HAL_SPI_TransmitReceive+0x16a>
 8004e9a:	fab5 f285 	clz	r2, r5
 8004e9e:	0952      	lsrs	r2, r2, #5
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	f000 808e 	beq.w	8004fc2 <HAL_SPI_TransmitReceive+0x16a>
  SPI_2LINES(hspi);
 8004ea6:	6823      	ldr	r3, [r4, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004ea8:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eaa:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004eae:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8004eb6:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8004eba:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ebe:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->RxXferSize  = Size;
 8004ec2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxXferSize  = Size;
 8004ec6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8004eca:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8004ed4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ed6:	4a89      	ldr	r2, [pc, #548]	; (80050fc <HAL_SPI_TransmitReceive+0x2a4>)
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	400a      	ands	r2, r1
 8004edc:	432a      	orrs	r2, r5
 8004ede:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee8:	6862      	ldr	r2, [r4, #4]
 8004eea:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004eee:	f000 80ee 	beq.w	80050ce <HAL_SPI_TransmitReceive+0x276>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef2:	f117 0901 	adds.w	r9, r7, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ef6:	68e2      	ldr	r2, [r4, #12]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef8:	46a8      	mov	r8, r5
 8004efa:	bf18      	it	ne
 8004efc:	f04f 0901 	movne.w	r9, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f00:	2a0f      	cmp	r2, #15
 8004f02:	f200 80aa 	bhi.w	800505a <HAL_SPI_TransmitReceive+0x202>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f06:	2a07      	cmp	r2, #7
 8004f08:	d96d      	bls.n	8004fe6 <HAL_SPI_TransmitReceive+0x18e>
 8004f0a:	e000      	b.n	8004f0e <HAL_SPI_TransmitReceive+0xb6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f0c:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	0792      	lsls	r2, r2, #30
 8004f12:	d50f      	bpl.n	8004f34 <HAL_SPI_TransmitReceive+0xdc>
 8004f14:	b175      	cbz	r5, 8004f34 <HAL_SPI_TransmitReceive+0xdc>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f18:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004f1c:	f8aa 1020 	strh.w	r1, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f20:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8004f22:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8004f26:	3a01      	subs	r2, #1
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004f2e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8004f32:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	07d8      	lsls	r0, r3, #31
 8004f38:	d512      	bpl.n	8004f60 <HAL_SPI_TransmitReceive+0x108>
 8004f3a:	f1b8 0f00 	cmp.w	r8, #0
 8004f3e:	d00f      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x108>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004f40:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8004f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f46:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f4a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8004f4c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004f58:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8004f5c:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f60:	f7fc f948 	bl	80011f4 <HAL_GetTick>
 8004f64:	1b80      	subs	r0, r0, r6
 8004f66:	42b8      	cmp	r0, r7
 8004f68:	d303      	bcc.n	8004f72 <HAL_SPI_TransmitReceive+0x11a>
 8004f6a:	f1b9 0f00 	cmp.w	r9, #0
 8004f6e:	f040 80b3 	bne.w	80050d8 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f72:	ea45 0308 	orr.w	r3, r5, r8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1c7      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0xb4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	d40d      	bmi.n	8004fa0 <HAL_SPI_TransmitReceive+0x148>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f84:	f7fc f936 	bl	80011f4 <HAL_GetTick>
 8004f88:	1b80      	subs	r0, r0, r6
 8004f8a:	4287      	cmp	r7, r0
 8004f8c:	d8f6      	bhi.n	8004f7c <HAL_SPI_TransmitReceive+0x124>
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d0f3      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f98:	f043 0320 	orr.w	r3, r3, #32
 8004f9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7ff fe29 	bl	8004bf8 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8004fa8:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004faa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8004fb2:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 8004fce:	2200      	movs	r2, #0
    return errorcode;
 8004fd0:	2302      	movs	r3, #2
    __HAL_UNLOCK(hspi);
 8004fd2:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8004fdc:	2302      	movs	r3, #2
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004fe4:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	0791      	lsls	r1, r2, #30
 8004fea:	d511      	bpl.n	8005010 <HAL_SPI_TransmitReceive+0x1b8>
 8004fec:	b185      	cbz	r5, 8005010 <HAL_SPI_TransmitReceive+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->TxXferCount--;
 8004ff6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005002:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 8005004:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005008:	3301      	adds	r3, #1
        initial_TxXferCount = hspi->TxXferCount;
 800500a:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800500c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	07d2      	lsls	r2, r2, #31
 8005014:	d513      	bpl.n	800503e <HAL_SPI_TransmitReceive+0x1e6>
 8005016:	f1b8 0f00 	cmp.w	r8, #0
 800501a:	d010      	beq.n	800503e <HAL_SPI_TransmitReceive+0x1e6>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800501c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005020:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005022:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8005024:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005028:	3b01      	subs	r3, #1
 800502a:	b29b      	uxth	r3, r3
 800502c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005030:	6e63      	ldr	r3, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 8005032:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005036:	3301      	adds	r3, #1
        initial_RxXferCount = hspi->RxXferCount;
 8005038:	fa1f f888 	uxth.w	r8, r8
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800503c:	6663      	str	r3, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503e:	f7fc f8d9 	bl	80011f4 <HAL_GetTick>
 8005042:	1b80      	subs	r0, r0, r6
 8005044:	42b8      	cmp	r0, r7
 8005046:	d302      	bcc.n	800504e <HAL_SPI_TransmitReceive+0x1f6>
 8005048:	f1b9 0f00 	cmp.w	r9, #0
 800504c:	d144      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800504e:	ea45 0308 	orr.w	r3, r5, r8
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1c5      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x18c>
 8005058:	e790      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x124>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800505a:	f248 0a08 	movw	sl, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	0791      	lsls	r1, r2, #30
 8005062:	d50e      	bpl.n	8005082 <HAL_SPI_TransmitReceive+0x22a>
 8005064:	b16d      	cbz	r5, 8005082 <HAL_SPI_TransmitReceive+0x22a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005066:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005068:	f852 1b04 	ldr.w	r1, [r2], #4
 800506c:	6219      	str	r1, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800506e:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005070:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005074:	3a01      	subs	r2, #1
 8005076:	b292      	uxth	r2, r2
 8005078:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800507c:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005080:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	ea12 0f0a 	tst.w	r2, sl
 8005088:	d011      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x256>
 800508a:	f1b8 0f00 	cmp.w	r8, #0
 800508e:	d00e      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x256>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005090:	6b19      	ldr	r1, [r3, #48]	; 0x30
        hspi->RxXferCount --;
 8005092:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005096:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005098:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800509a:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 800509e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80050a0:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 80050a2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80050a6:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 80050aa:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fc f8a1 	bl	80011f4 <HAL_GetTick>
 80050b2:	1b80      	subs	r0, r0, r6
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050b4:	ea45 0308 	orr.w	r3, r5, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b8:	42b8      	cmp	r0, r7
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050ba:	b29b      	uxth	r3, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050bc:	d302      	bcc.n	80050c4 <HAL_SPI_TransmitReceive+0x26c>
 80050be:	f1b9 0f00 	cmp.w	r9, #0
 80050c2:	d109      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f43f af59 	beq.w	8004f7c <HAL_SPI_TransmitReceive+0x124>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	e7c7      	b.n	800505e <HAL_SPI_TransmitReceive+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e70c      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x9a>
        SPI_CloseTransfer(hspi);
 80050d8:	4620      	mov	r0, r4
 80050da:	f7ff fd8d 	bl	8004bf8 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80050e2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 80050e4:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
        __HAL_UNLOCK(hspi);
 80050ec:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050f0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80050f4:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
        return HAL_TIMEOUT;
 80050f8:	e766      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x170>
 80050fa:	bf00      	nop
 80050fc:	ffff0000 	.word	0xffff0000

08005100 <arm_biquad_cascade_df2T_init_f32>:
 8005100:	b510      	push	{r4, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
 8005106:	2100      	movs	r1, #0
 8005108:	60a2      	str	r2, [r4, #8]
 800510a:	00c2      	lsls	r2, r0, #3
 800510c:	7020      	strb	r0, [r4, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f802 	bl	8005118 <memset>
 8005114:	6060      	str	r0, [r4, #4]
 8005116:	bd10      	pop	{r4, pc}

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	; (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	; (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	; (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	; (800516c <__libc_init_array+0x44>)
 800513c:	f000 f818 	bl	8005170 <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080051a0 	.word	0x080051a0
 8005164:	080051a0 	.word	0x080051a0
 8005168:	080051a0 	.word	0x080051a0
 800516c:	080051a4 	.word	0x080051a4

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
