
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008290  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008540  08008540  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008540  08008540  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008540  08008540  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008540  08008540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  24000010  08008558  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002b4  08008558  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3de  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002314  00000000  00000000  0002f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cf  00000000  00000000  000323b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ef87  00000000  00000000  00032c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ee8  00000000  00000000  00071c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019593b  00000000  00000000  00082aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f80  00000000  00000000  0021842c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0021b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001c6  00000000  00000000  0021b446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0021b60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008510 	.word	0x08008510

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008510 	.word	0x08008510

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <ad1939_write_reg>:
#include "AD1939_driver.h"

// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af02      	add	r7, sp, #8
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	4613      	mov	r3, r2
 8000412:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <ad1939_write_reg+0x64>)
 800041a:	2208      	movs	r2, #8
 800041c:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <ad1939_write_reg+0x64>)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 8000424:	4a10      	ldr	r2, [pc, #64]	; (8000468 <ad1939_write_reg+0x64>)
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	7093      	strb	r3, [r2, #2]

	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <ad1939_write_reg+0x68>)
 8000432:	f003 faf9 	bl	8003a28 <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <ad1939_write_reg+0x6c>)
 8000438:	6818      	ldr	r0, [r3, #0]
 800043a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2303      	movs	r3, #3
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <ad1939_write_reg+0x70>)
 8000444:	4908      	ldr	r1, [pc, #32]	; (8000468 <ad1939_write_reg+0x64>)
 8000446:	f007 fced 	bl	8007e24 <HAL_SPI_TransmitReceive>
 800044a:	4603      	mov	r3, r0
 800044c:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <ad1939_write_reg+0x68>)
 8000456:	f003 fae7 	bl	8003a28 <HAL_GPIO_WritePin>

	 //HAL_Delay(10);
	return retval;
 800045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	24000030 	.word	0x24000030
 800046c:	58021400 	.word	0x58021400
 8000470:	2400002c 	.word	0x2400002c
 8000474:	24000034 	.word	0x24000034

08000478 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <ad1939_pll_locked+0x54>)
 8000480:	2209      	movs	r2, #9
 8000482:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <ad1939_pll_locked+0x54>)
 8000486:	2201      	movs	r2, #1
 8000488:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <ad1939_pll_locked+0x54>)
 800048c:	2204      	movs	r2, #4
 800048e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 8000490:	200a      	movs	r0, #10
 8000492:	f000 ff01 	bl	8001298 <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <ad1939_pll_locked+0x58>)
 800049e:	f003 fac3 	bl	8003a28 <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <ad1939_pll_locked+0x5c>)
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2303      	movs	r3, #3
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <ad1939_pll_locked+0x60>)
 80004b0:	4906      	ldr	r1, [pc, #24]	; (80004cc <ad1939_pll_locked+0x54>)
 80004b2:	f007 fcb7 	bl	8007e24 <HAL_SPI_TransmitReceive>
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <ad1939_pll_locked+0x58>)
 80004be:	f003 fab3 	bl	8003a28 <HAL_GPIO_WritePin>

	 return 0;
 80004c2:	2300      	movs	r3, #0
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	24000030 	.word	0x24000030
 80004d0:	58021400 	.word	0x58021400
 80004d4:	2400002c 	.word	0x2400002c
 80004d8:	24000034 	.word	0x24000034

080004dc <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80004e4:	4a44      	ldr	r2, [pc, #272]	; (80005f8 <ad1939_init+0x11c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 80004ea:	2199      	movs	r1, #153	; 0x99
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff ff89 	bl	8000404 <ad1939_write_reg>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <ad1939_init+0x22>
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	e077      	b.n	80005ee <ad1939_init+0x112>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80004fe:	21be      	movs	r1, #190	; 0xbe
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ff7f 	bl	8000404 <ad1939_write_reg>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <ad1939_init+0x36>
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	e06d      	b.n	80005ee <ad1939_init+0x112>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000512:	2104      	movs	r1, #4
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ff75 	bl	8000404 <ad1939_write_reg>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <ad1939_init+0x4a>
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	e063      	b.n	80005ee <ad1939_init+0x112>





    HAL_Delay(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 feb6 	bl	8001298 <HAL_Delay>

    while(ad1939_pll_locked()){
 800052c:	bf00      	nop
 800052e:	f7ff ffa3 	bl	8000478 <ad1939_pll_locked>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1fa      	bne.n	800052e <ad1939_init+0x52>
    	// wait till pll is locked takes about 10 ms acc to datasheet
    }
    // DAC settings
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0x00)) return -1;
 8000538:	2100      	movs	r1, #0
 800053a:	2002      	movs	r0, #2
 800053c:	f7ff ff62 	bl	8000404 <ad1939_write_reg>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <ad1939_init+0x70>
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e050      	b.n	80005ee <ad1939_init+0x112>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800054c:	2100      	movs	r1, #0
 800054e:	2003      	movs	r0, #3
 8000550:	f7ff ff58 	bl	8000404 <ad1939_write_reg>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d002      	beq.n	8000560 <ad1939_init+0x84>
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e046      	b.n	80005ee <ad1939_init+0x112>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000110)) return -1;
 8000560:	2106      	movs	r1, #6
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff4e 	bl	8000404 <ad1939_write_reg>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <ad1939_init+0x98>
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e03c      	b.n	80005ee <ad1939_init+0x112>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000574:	2100      	movs	r1, #0
 8000576:	2005      	movs	r0, #5
 8000578:	f7ff ff44 	bl	8000404 <ad1939_write_reg>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <ad1939_init+0xac>
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e032      	b.n	80005ee <ad1939_init+0x112>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 8000588:	2100      	movs	r1, #0
 800058a:	2008      	movs	r0, #8
 800058c:	f7ff ff3a 	bl	8000404 <ad1939_write_reg>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d002      	beq.n	800059c <ad1939_init+0xc0>
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	e028      	b.n	80005ee <ad1939_init+0x112>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 800059c:	2100      	movs	r1, #0
 800059e:	2009      	movs	r0, #9
 80005a0:	f7ff ff30 	bl	8000404 <ad1939_write_reg>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <ad1939_init+0xd4>
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e01e      	b.n	80005ee <ad1939_init+0x112>

    // ADC settings
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b000001000)) return -1;
 80005b0:	2108      	movs	r1, #8
 80005b2:	200e      	movs	r0, #14
 80005b4:	f7ff ff26 	bl	8000404 <ad1939_write_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <ad1939_init+0xe8>
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	e014      	b.n	80005ee <ad1939_init+0x112>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 80005c4:	2100      	movs	r1, #0
 80005c6:	200f      	movs	r0, #15
 80005c8:	f7ff ff1c 	bl	8000404 <ad1939_write_reg>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <ad1939_init+0xfc>
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e00a      	b.n	80005ee <ad1939_init+0x112>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 80005d8:	2100      	movs	r1, #0
 80005da:	2010      	movs	r0, #16
 80005dc:	f7ff ff12 	bl	8000404 <ad1939_write_reg>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <ad1939_init+0x110>
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e000      	b.n	80005ee <ad1939_init+0x112>



    return 0; // Return 0 if all writes are successful
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2400002c 	.word	0x2400002c

080005fc <HAL_I2S_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint16_t my_data[4];
volatile uint16_t rx_data_i2s[4];

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	my_data[0]++;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_I2S_RxCpltCallback+0x24>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_I2S_RxCpltCallback+0x24>)
 8000610:	801a      	strh	r2, [r3, #0]
	// ADD SOUND FUNCTION HERE

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	240002a0 	.word	0x240002a0

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b097      	sub	sp, #92	; 0x5c
 8000628:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fda3 	bl	8001174 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <main+0x1a8>)
 8000630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000634:	4a65      	ldr	r2, [pc, #404]	; (80007cc <main+0x1a8>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800063e:	4b63      	ldr	r3, [pc, #396]	; (80007cc <main+0x1a8>)
 8000640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f8cc 	bl	80007e8 <SystemClock_Config>
	//}
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_SPI1_CLK_ENABLE();
 8000650:	4b5e      	ldr	r3, [pc, #376]	; (80007cc <main+0x1a8>)
 8000652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000656:	4a5d      	ldr	r2, [pc, #372]	; (80007cc <main+0x1a8>)
 8000658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <main+0x1a8>)
 8000662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 fa61 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000672:	f000 fa27 	bl	8000ac4 <MX_DMA_Init>
  MX_I2S2_Init();
 8000676:	f000 f999 	bl	80009ac <MX_I2S2_Init>
  MX_SPI3_Init();
 800067a:	f000 f9cd 	bl	8000a18 <MX_SPI3_Init>
  MX_I2S1_Init();
 800067e:	f000 f961 	bl	8000944 <MX_I2S1_Init>
//	uint8_t AD1939_REG_ADDRESS 	= 0;// 0 CLOCK CONTROL 0
//	uint8_t AD1939_DATA 	 	= 134;// 0 CLOCK CONTROL 0A
//	uint8_t TXdata[3];
//	uint8_t RXdata[3];

  for(int i=0; i<8; i++){
 8000682:	2300      	movs	r3, #0
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
 8000686:	e007      	b.n	8000698 <main+0x74>
	  my_data[i] = 0x0000;
 8000688:	4a51      	ldr	r2, [pc, #324]	; (80007d0 <main+0x1ac>)
 800068a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800068c:	2100      	movs	r1, #0
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0; i<8; i++){
 8000692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000694:	3301      	adds	r3, #1
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
 8000698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800069a:	2b07      	cmp	r3, #7
 800069c:	ddf4      	ble.n	8000688 <main+0x64>
  }

  my_data[1] = 0x0000;
 800069e:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <main+0x1ac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	805a      	strh	r2, [r3, #2]
  my_data[0] = 0x0000;
 80006a4:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <main+0x1ac>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	801a      	strh	r2, [r3, #0]

  my_data[3] = 0x0000;
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <main+0x1ac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	80da      	strh	r2, [r3, #6]
  my_data[2] = 0x0000;
 80006b0:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <main+0x1ac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	809a      	strh	r2, [r3, #4]

  float32_t subbandfilter_a1[3];
  float32_t subbandfilter_dn1[3];
  float32_t subbandfilter_A1[3];
  uint32_t numberofsubbands = 3;
 80006b6:	2303      	movs	r3, #3
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  arm_abs_f32(subbandfilter_A1, subbandfilter_dn1, numberofsubbands);
 80006ba:	f107 0114 	add.w	r1, r7, #20
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 feb3 	bl	8008430 <arm_abs_f32>


  //HAL_I2S_Transmit_DMA(&hi2s2, my_data, 4);
  float n=0;
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  float fract = 100;
 80006d0:	4b40      	ldr	r3, [pc, #256]	; (80007d4 <main+0x1b0>)
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44


//  HAL_I2S_Transmit_DMA(&hi2s2, my_data, 4);


  HAL_I2S_Transmit_DMA(&hi2s2, my_data, 4);
 80006d4:	2204      	movs	r2, #4
 80006d6:	493e      	ldr	r1, [pc, #248]	; (80007d0 <main+0x1ac>)
 80006d8:	483f      	ldr	r0, [pc, #252]	; (80007d8 <main+0x1b4>)
 80006da:	f003 fb0d 	bl	8003cf8 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s1, rx_data_i2s, 4);
 80006de:	2204      	movs	r2, #4
 80006e0:	493e      	ldr	r1, [pc, #248]	; (80007dc <main+0x1b8>)
 80006e2:	483f      	ldr	r0, [pc, #252]	; (80007e0 <main+0x1bc>)
 80006e4:	f003 fbaa 	bl	8003e3c <HAL_I2S_Receive_DMA>
  ad1939_init(&hspi3);
 80006e8:	483e      	ldr	r0, [pc, #248]	; (80007e4 <main+0x1c0>)
 80006ea:	f7ff fef7 	bl	80004dc <ad1939_init>

//  HAL_I2S_Transmit_DMA(&hi2s2, my_data, 120);
  //HAL_I2S_Receive_DMA(&hi2s1, rx_data_i2s, 4);

//  HAL_I2S_Transmit_DMA(&hi2s2, my_data, 2);
  uint32_t delay_time = 1; // ms
 80006ee:	2301      	movs	r3, #1
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40

  uint32_t amp=2000;
 80006f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t ch0 = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t ch1 = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t test_val  = 25000;
 8000700:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000704:	867b      	strh	r3, [r7, #50]	; 0x32

  HAL_Delay(10);
 8000706:	200a      	movs	r0, #10
 8000708:	f000 fdc6 	bl	8001298 <HAL_Delay>
  uint32_t timeVariable = HAL_GetTick();
 800070c:	f000 fdb8 	bl	8001280 <HAL_GetTick>
 8000710:	64f8      	str	r0, [r7, #76]	; 0x4c

  uint8_t channel = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  while (1)
  {
	  static HAL_StatusTypeDef err;
	  //err = HAL_I2S_Receive(&hi2s1, rx_data_i2s, 4,1000);
	  uint32_t myvar = rx_data_i2s[1]<<8 | (uint32_t)rx_data_i2s[0]<<8;
 8000718:	4b30      	ldr	r3, [pc, #192]	; (80007dc <main+0x1b8>)
 800071a:	885b      	ldrh	r3, [r3, #2]
 800071c:	b29b      	uxth	r3, r3
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	461a      	mov	r2, r3
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <main+0x1b8>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	4313      	orrs	r3, r2
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  my_data[0] = rx_data_i2s[0]<<8;
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <main+0x1b8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <main+0x1ac>)
 800073a:	801a      	strh	r2, [r3, #0]
	  my_data[1] = (rx_data_i2s[1]<<8) | (rx_data_i2s[0]>>8);
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0x1b8>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	b29b      	uxth	r3, r3
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <main+0x1b8>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <main+0x1ac>)
 800075a:	805a      	strh	r2, [r3, #2]
	  my_data[2] = rx_data_i2s[0]<<8;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <main+0x1b8>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <main+0x1ac>)
 8000768:	809a      	strh	r2, [r3, #4]
	  my_data[3] = (rx_data_i2s[1]<<8) | (rx_data_i2s[0]>>8);
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <main+0x1b8>)
 800076c:	885b      	ldrh	r3, [r3, #2]
 800076e:	b29b      	uxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0x1b8>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	b29b      	uxth	r3, r3
 800077e:	b21b      	sxth	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b21b      	sxth	r3, r3
 8000784:	b29a      	uxth	r2, r3
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <main+0x1ac>)
 8000788:	80da      	strh	r2, [r3, #6]

//	  my_data[2] = rx_data_i2s[channel];
//	  my_data[3] = rx_data_i2s[channel+1];


	  if(( (timeVariable&0x0000FFFF) + 1 )< HAL_GetTick()){
 800078a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800078c:	b29b      	uxth	r3, r3
 800078e:	1c5c      	adds	r4, r3, #1
 8000790:	f000 fd76 	bl	8001280 <HAL_GetTick>
 8000794:	4603      	mov	r3, r0
 8000796:	429c      	cmp	r4, r3
 8000798:	d20a      	bcs.n	80007b0 <main+0x18c>
		  n++;
 800079a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800079e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
//		  if (my_data[2]  >= 0x7FFF){
//			  my_data[2] = my_data[2];
//		  }
		  //my_data[2] = amp*n;
		  //my_data[3]++; //= amp*n;
		  timeVariable = HAL_GetTick();
 80007aa:	f000 fd69 	bl	8001280 <HAL_GetTick>
 80007ae:	64f8      	str	r0, [r7, #76]	; 0x4c
	  }

	  if(n>10){
 80007b0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80007b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80007b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c0:	dd02      	ble.n	80007c8 <main+0x1a4>
		  n=0;
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	653b      	str	r3, [r7, #80]	; 0x50
  {
 80007c8:	e7a6      	b.n	8000718 <main+0xf4>
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	240002a0 	.word	0x240002a0
 80007d4:	42c80000 	.word	0x42c80000
 80007d8:	240000b0 	.word	0x240000b0
 80007dc:	240002a8 	.word	0x240002a8
 80007e0:	24000038 	.word	0x24000038
 80007e4:	24000218 	.word	0x24000218

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	; 0x78
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f2:	224c      	movs	r2, #76	; 0x4c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f007 fe5e 	bl	80084b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2220      	movs	r2, #32
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f007 fe57 	bl	80084b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800080a:	2002      	movs	r0, #2
 800080c:	f003 fc7e 	bl	800410c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b48      	ldr	r3, [pc, #288]	; (8000938 <SystemClock_Config+0x150>)
 8000816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000818:	4a47      	ldr	r2, [pc, #284]	; (8000938 <SystemClock_Config+0x150>)
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000820:	4b45      	ldr	r3, [pc, #276]	; (8000938 <SystemClock_Config+0x150>)
 8000822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <SystemClock_Config+0x154>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a43      	ldr	r2, [pc, #268]	; (800093c <SystemClock_Config+0x154>)
 8000830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b41      	ldr	r3, [pc, #260]	; (800093c <SystemClock_Config+0x154>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000842:	bf00      	nop
 8000844:	4b3d      	ldr	r3, [pc, #244]	; (800093c <SystemClock_Config+0x154>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	d1f8      	bne.n	8000844 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <SystemClock_Config+0x158>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	4a39      	ldr	r2, [pc, #228]	; (8000940 <SystemClock_Config+0x158>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000862:	4b37      	ldr	r3, [pc, #220]	; (8000940 <SystemClock_Config+0x158>)
 8000864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <SystemClock_Config+0x154>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a30      	ldr	r2, [pc, #192]	; (800093c <SystemClock_Config+0x154>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <SystemClock_Config+0x154>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <SystemClock_Config+0x150>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <SystemClock_Config+0x150>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <SystemClock_Config+0x150>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a2:	bf00      	nop
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0x154>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b0:	d1f8      	bne.n	80008a4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c0:	2302      	movs	r3, #2
 80008c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 56;
 80008c8:	2338      	movs	r3, #56	; 0x38
 80008ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d8:	230c      	movs	r3, #12
 80008da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008dc:	2300      	movs	r3, #0
 80008de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fc69 	bl	80041c0 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80008f4:	f000 f9a0 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	233f      	movs	r3, #63	; 0x3f
 80008fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000904:	2308      	movs	r3, #8
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f004 f8a7 	bl	8004a74 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800092c:	f000 f984 	bl	8000c38 <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3778      	adds	r7, #120	; 0x78
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58000400 	.word	0x58000400
 800093c:	58024800 	.word	0x58024800
 8000940:	58024400 	.word	0x58024400

08000944 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_I2S1_Init+0x60>)
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_I2S1_Init+0x64>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000950:	2206      	movs	r2, #6
 8000952:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2S1_Init+0x60>)
 800095c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000960:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2S1_Init+0x60>)
 800096a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800096e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2S1_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2S1_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2S1_Init+0x60>)
 8000990:	f003 f864 	bl	8003a5c <HAL_I2S_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 f94d 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24000038 	.word	0x24000038
 80009a8:	40013000 	.word	0x40013000

080009ac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <MX_I2S2_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009d2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009d6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2S2_Init+0x64>)
 80009fe:	f003 f82d 	bl	8003a5c <HAL_I2S_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2S2_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 f916 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	240000b0 	.word	0x240000b0
 8000a14:	40003800 	.word	0x40003800

08000a18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_SPI3_Init+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_SPI3_Init+0xa4>)
 8000aaa:	f007 f897 	bl	8007bdc <HAL_SPI_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000ab4:	f000 f8c0 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000218 	.word	0x24000218
 8000ac0:	40003c00 	.word	0x40003c00

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DMA_Init+0x6c>)
 8000afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200e      	movs	r0, #14
 8000b0c:	f000 fccf 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b10:	200e      	movs	r0, #14
 8000b12:	f000 fce6 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2044      	movs	r0, #68	; 0x44
 8000b1c:	f000 fcc7 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b20:	2044      	movs	r0, #68	; 0x44
 8000b22:	f000 fcde 	bl	80014e2 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024400 	.word	0x58024400

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a37      	ldr	r2, [pc, #220]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_GPIO_Init+0xfc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <MX_GPIO_Init+0x100>)
 8000c06:	f002 ff0f 	bl	8003a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_CS_Pin */
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0x100>)
 8000c24:	f002 fd50 	bl	80036c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58021400 	.word	0x58021400

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x30>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0c0      	sub	sp, #256	; 0x100
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	22c8      	movs	r2, #200	; 0xc8
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fc0d 	bl	80084b8 <memset>
  if(hi2s->Instance==SPI1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4aa3      	ldr	r2, [pc, #652]	; (8000f30 <HAL_I2S_MspInit+0x2b8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	f040 809c 	bne.w	8000de2 <HAL_I2S_MspInit+0x16a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 fa4d 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000ccc:	f7ff ffb4 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd0:	4b98      	ldr	r3, [pc, #608]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd6:	4a97      	ldr	r2, [pc, #604]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ce0:	4b94      	ldr	r3, [pc, #592]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a8f      	ldr	r2, [pc, #572]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0c:	4b89      	ldr	r3, [pc, #548]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a88      	ldr	r2, [pc, #544]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b85      	ldr	r3, [pc, #532]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PG9     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8000d2a:	2330      	movs	r3, #48	; 0x30
 8000d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d42:	2305      	movs	r3, #5
 8000d44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	487a      	ldr	r0, [pc, #488]	; (8000f38 <HAL_I2S_MspInit+0x2c0>)
 8000d50:	f002 fcba 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4870      	ldr	r0, [pc, #448]	; (8000f3c <HAL_I2S_MspInit+0x2c4>)
 8000d7c:	f002 fca4 	bl	80036c8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream3;
 8000d80:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000d82:	4a70      	ldr	r2, [pc, #448]	; (8000f44 <HAL_I2S_MspInit+0x2cc>)
 8000d84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d86:	4b6e      	ldr	r3, [pc, #440]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000d88:	2225      	movs	r2, #37	; 0x25
 8000d8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8c:	4b6c      	ldr	r3, [pc, #432]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d92:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d98:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000da0:	4b67      	ldr	r3, [pc, #412]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000da2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000db0:	4b63      	ldr	r3, [pc, #396]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dbe:	4b60      	ldr	r3, [pc, #384]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000dc4:	485e      	ldr	r0, [pc, #376]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000dc6:	f000 fba7 	bl	8001518 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 8000dd0:	f7ff ff32 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a5a      	ldr	r2, [pc, #360]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000dd8:	649a      	str	r2, [r3, #72]	; 0x48
 8000dda:	4a59      	ldr	r2, [pc, #356]	; (8000f40 <HAL_I2S_MspInit+0x2c8>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000de0:	e0a0      	b.n	8000f24 <HAL_I2S_MspInit+0x2ac>
  else if(hi2s->Instance==SPI2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <HAL_I2S_MspInit+0x2d0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f040 809b 	bne.w	8000f24 <HAL_I2S_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 f9ab 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_I2S_MspInit+0x19c>
      Error_Handler();
 8000e10:	f7ff ff12 	bl	8000c38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e14:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1a:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e24:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_I2S_MspInit+0x2bc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	2305      	movs	r3, #5
 8000e88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e90:	4619      	mov	r1, r3
 8000e92:	482e      	ldr	r0, [pc, #184]	; (8000f4c <HAL_I2S_MspInit+0x2d4>)
 8000e94:	f002 fc18 	bl	80036c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4824      	ldr	r0, [pc, #144]	; (8000f50 <HAL_I2S_MspInit+0x2d8>)
 8000ec0:	f002 fc02 	bl	80036c8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA2_Stream5;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ec6:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_I2S_MspInit+0x2e0>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ecc:	2228      	movs	r2, #40	; 0x28
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ee6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f08:	4812      	ldr	r0, [pc, #72]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000f0a:	f000 fb05 	bl	8001518 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2S_MspInit+0x2a0>
      Error_Handler();
 8000f14:	f7ff fe90 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_I2S_MspInit+0x2dc>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f24:	bf00      	nop
 8000f26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013000 	.word	0x40013000
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020000 	.word	0x58020000
 8000f3c:	58021800 	.word	0x58021800
 8000f40:	24000128 	.word	0x24000128
 8000f44:	40020058 	.word	0x40020058
 8000f48:	40003800 	.word	0x40003800
 8000f4c:	58020800 	.word	0x58020800
 8000f50:	58020400 	.word	0x58020400
 8000f54:	240001a0 	.word	0x240001a0
 8000f58:	40020488 	.word	0x40020488

08000f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0be      	sub	sp, #248	; 0xf8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	22c8      	movs	r2, #200	; 0xc8
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fa9b 	bl	80084b8 <memset>
  if(hspi->Instance==SPI3)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a43      	ldr	r2, [pc, #268]	; (8001094 <HAL_SPI_MspInit+0x138>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d17f      	bne.n	800108c <HAL_SPI_MspInit+0x130>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 f8dd 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fac:	f7ff fe44 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb6:	4a38      	ldr	r2, [pc, #224]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a30      	ldr	r2, [pc, #192]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_SPI_MspInit+0x13c>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100a:	2304      	movs	r3, #4
 800100c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001022:	2307      	movs	r3, #7
 8001024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800102c:	4619      	mov	r1, r3
 800102e:	481b      	ldr	r0, [pc, #108]	; (800109c <HAL_SPI_MspInit+0x140>)
 8001030:	f002 fb4a 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104e:	2306      	movs	r3, #6
 8001050:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <HAL_SPI_MspInit+0x144>)
 800105c:	f002 fb34 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800107a:	2306      	movs	r3, #6
 800107c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HAL_SPI_MspInit+0x144>)
 8001088:	f002 fb1e 	bl	80036c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	37f8      	adds	r7, #248	; 0xf8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003c00 	.word	0x40003c00
 8001098:	58024400 	.word	0x58024400
 800109c:	58020400 	.word	0x58020400
 80010a0:	58020800 	.word	0x58020800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f8b2 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA1_Stream3_IRQHandler+0x10>)
 80010fe:	f000 ffd1 	bl	80020a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24000128 	.word	0x24000128

0800110c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA2_Stream5_IRQHandler+0x10>)
 8001112:	f000 ffc7 	bl	80020a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	240001a0 	.word	0x240001a0

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff f8d8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f007 f9bb 	bl	80084c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fa67 	bl	8000624 <main>
  bx  lr
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800115c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001160:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001164:	08008548 	.word	0x08008548
  ldr r2, =_sbss
 8001168:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800116c:	240002b4 	.word	0x240002b4

08001170 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC3_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f98c 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001180:	f003 fe2e 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_Init+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <HAL_Init+0x6c>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_Init+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_Init+0x6c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_Init+0x70>)
 80011b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_Init+0x74>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f814 	bl	80011ec <HAL_InitTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e002      	b.n	80011d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ce:	f7ff fd39 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400
 80011e0:	08008528 	.word	0x08008528
 80011e4:	24000004 	.word	0x24000004
 80011e8:	24000000 	.word	0x24000000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e021      	b.n	8001244 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_InitTick+0x64>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f971 	bl	80014fe <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f93b 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x68>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2400000c 	.word	0x2400000c
 8001250:	24000000 	.word	0x24000000
 8001254:	24000008 	.word	0x24000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c
 800127c:	240002b0 	.word	0x240002b0

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	240002b0 	.word	0x240002b0

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2400000c 	.word	0x2400000c

080012e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetREVID+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0c1b      	lsrs	r3, r3, #16
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	5c001000 	.word	0x5c001000

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	05fa0000 	.word	0x05fa0000

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff40 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff33 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa4 	bl	8001454 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff feae 	bl	8001280 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e316      	b.n	8001b5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <HAL_DMA_Init+0x1b8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d04a      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a65      	ldr	r2, [pc, #404]	; (80016d4 <HAL_DMA_Init+0x1bc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d045      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <HAL_DMA_Init+0x1c0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d040      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a62      	ldr	r2, [pc, #392]	; (80016dc <HAL_DMA_Init+0x1c4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d03b      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a60      	ldr	r2, [pc, #384]	; (80016e0 <HAL_DMA_Init+0x1c8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d036      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5f      	ldr	r2, [pc, #380]	; (80016e4 <HAL_DMA_Init+0x1cc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d031      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <HAL_DMA_Init+0x1d0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d02c      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5c      	ldr	r2, [pc, #368]	; (80016ec <HAL_DMA_Init+0x1d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d027      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_DMA_Init+0x1d8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d022      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <HAL_DMA_Init+0x1dc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d01d      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_DMA_Init+0x1e0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d018      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_DMA_Init+0x1e4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_DMA_Init+0x1e8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00e      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_DMA_Init+0x1ec>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d009      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_DMA_Init+0x1f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d004      	beq.n	80015d0 <HAL_DMA_Init+0xb8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_DMA_Init+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_DMA_Init+0xbc>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_DMA_Init+0xbe>
 80015d4:	2300      	movs	r3, #0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 813b 	beq.w	8001852 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <HAL_DMA_Init+0x1b8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d04a      	beq.n	800168c <HAL_DMA_Init+0x174>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a36      	ldr	r2, [pc, #216]	; (80016d4 <HAL_DMA_Init+0x1bc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d045      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_DMA_Init+0x1c0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d040      	beq.n	800168c <HAL_DMA_Init+0x174>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_DMA_Init+0x1c4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d03b      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <HAL_DMA_Init+0x1c8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d036      	beq.n	800168c <HAL_DMA_Init+0x174>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a30      	ldr	r2, [pc, #192]	; (80016e4 <HAL_DMA_Init+0x1cc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d031      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <HAL_DMA_Init+0x1d0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02c      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_DMA_Init+0x1d4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d027      	beq.n	800168c <HAL_DMA_Init+0x174>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_DMA_Init+0x1d8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d022      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <HAL_DMA_Init+0x1dc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01d      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <HAL_DMA_Init+0x1e0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d018      	beq.n	800168c <HAL_DMA_Init+0x174>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a27      	ldr	r2, [pc, #156]	; (80016fc <HAL_DMA_Init+0x1e4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_DMA_Init+0x1e8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00e      	beq.n	800168c <HAL_DMA_Init+0x174>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_DMA_Init+0x1ec>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_Init+0x1f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Init+0x174>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DMA_Init+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d108      	bne.n	800169e <HAL_DMA_Init+0x186>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_DMA_Init+0x196>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016ae:	e02f      	b.n	8001710 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b0:	f7ff fde6 	bl	8001280 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d928      	bls.n	8001710 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e246      	b.n	8001b5e <HAL_DMA_Init+0x646>
 80016d0:	40020010 	.word	0x40020010
 80016d4:	40020028 	.word	0x40020028
 80016d8:	40020040 	.word	0x40020040
 80016dc:	40020058 	.word	0x40020058
 80016e0:	40020070 	.word	0x40020070
 80016e4:	40020088 	.word	0x40020088
 80016e8:	400200a0 	.word	0x400200a0
 80016ec:	400200b8 	.word	0x400200b8
 80016f0:	40020410 	.word	0x40020410
 80016f4:	40020428 	.word	0x40020428
 80016f8:	40020440 	.word	0x40020440
 80016fc:	40020458 	.word	0x40020458
 8001700:	40020470 	.word	0x40020470
 8001704:	40020488 	.word	0x40020488
 8001708:	400204a0 	.word	0x400204a0
 800170c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1c8      	bne.n	80016b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_DMA_Init+0x420>)
 800172a:	4013      	ands	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001736:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001742:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2b04      	cmp	r3, #4
 8001762:	d107      	bne.n	8001774 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4313      	orrs	r3, r2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <HAL_DMA_Init+0x424>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b71      	ldr	r3, [pc, #452]	; (8001940 <HAL_DMA_Init+0x428>)
 800177a:	4013      	ands	r3, r2
 800177c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001780:	d328      	bcc.n	80017d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b28      	cmp	r3, #40	; 0x28
 8001788:	d903      	bls.n	8001792 <HAL_DMA_Init+0x27a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b2e      	cmp	r3, #46	; 0x2e
 8001790:	d917      	bls.n	80017c2 <HAL_DMA_Init+0x2aa>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b3e      	cmp	r3, #62	; 0x3e
 8001798:	d903      	bls.n	80017a2 <HAL_DMA_Init+0x28a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b42      	cmp	r3, #66	; 0x42
 80017a0:	d90f      	bls.n	80017c2 <HAL_DMA_Init+0x2aa>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b46      	cmp	r3, #70	; 0x46
 80017a8:	d903      	bls.n	80017b2 <HAL_DMA_Init+0x29a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b48      	cmp	r3, #72	; 0x48
 80017b0:	d907      	bls.n	80017c2 <HAL_DMA_Init+0x2aa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b4e      	cmp	r3, #78	; 0x4e
 80017b8:	d905      	bls.n	80017c6 <HAL_DMA_Init+0x2ae>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b52      	cmp	r3, #82	; 0x52
 80017c0:	d801      	bhi.n	80017c6 <HAL_DMA_Init+0x2ae>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_DMA_Init+0x2b0>
 80017c6:	2300      	movs	r3, #0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f023 0307 	bic.w	r3, r3, #7
 80017ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d117      	bne.n	800182e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 fdcf 	bl	80033b4 <DMA_CheckFifoParam>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e197      	b.n	8001b5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f001 fd0a 	bl	8003250 <DMA_CalcBaseAndBitshift>
 800183c:	4603      	mov	r3, r0
 800183e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	223f      	movs	r2, #63	; 0x3f
 800184a:	409a      	lsls	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	e0cd      	b.n	80019ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a3b      	ldr	r2, [pc, #236]	; (8001944 <HAL_DMA_Init+0x42c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d022      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a39      	ldr	r2, [pc, #228]	; (8001948 <HAL_DMA_Init+0x430>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01d      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a38      	ldr	r2, [pc, #224]	; (800194c <HAL_DMA_Init+0x434>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d018      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a36      	ldr	r2, [pc, #216]	; (8001950 <HAL_DMA_Init+0x438>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a35      	ldr	r2, [pc, #212]	; (8001954 <HAL_DMA_Init+0x43c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00e      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_DMA_Init+0x440>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d009      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_DMA_Init+0x444>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d004      	beq.n	80018a2 <HAL_DMA_Init+0x38a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <HAL_DMA_Init+0x448>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_DMA_Init+0x38e>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_DMA_Init+0x390>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8097 	beq.w	80019dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a24      	ldr	r2, [pc, #144]	; (8001944 <HAL_DMA_Init+0x42c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d021      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	; (8001948 <HAL_DMA_Init+0x430>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01c      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a21      	ldr	r2, [pc, #132]	; (800194c <HAL_DMA_Init+0x434>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d017      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_DMA_Init+0x438>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d012      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_DMA_Init+0x43c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_DMA_Init+0x440>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_DMA_Init+0x444>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_DMA_Init+0x3e4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_DMA_Init+0x448>)
 80018fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_DMA_Init+0x44c>)
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	d021      	beq.n	8001968 <HAL_DMA_Init+0x450>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b80      	cmp	r3, #128	; 0x80
 800192a:	d102      	bne.n	8001932 <HAL_DMA_Init+0x41a>
 800192c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001930:	e01b      	b.n	800196a <HAL_DMA_Init+0x452>
 8001932:	2300      	movs	r3, #0
 8001934:	e019      	b.n	800196a <HAL_DMA_Init+0x452>
 8001936:	bf00      	nop
 8001938:	fe10803f 	.word	0xfe10803f
 800193c:	5c001000 	.word	0x5c001000
 8001940:	ffff0000 	.word	0xffff0000
 8001944:	58025408 	.word	0x58025408
 8001948:	5802541c 	.word	0x5802541c
 800194c:	58025430 	.word	0x58025430
 8001950:	58025444 	.word	0x58025444
 8001954:	58025458 	.word	0x58025458
 8001958:	5802546c 	.word	0x5802546c
 800195c:	58025480 	.word	0x58025480
 8001960:	58025494 	.word	0x58025494
 8001964:	fffe000f 	.word	0xfffe000f
 8001968:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68d2      	ldr	r2, [r2, #12]
 800196e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001998:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b6e      	ldr	r3, [pc, #440]	; (8001b68 <HAL_DMA_Init+0x650>)
 80019b0:	4413      	add	r3, r2
 80019b2:	4a6e      	ldr	r2, [pc, #440]	; (8001b6c <HAL_DMA_Init+0x654>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f001 fc45 	bl	8003250 <DMA_CalcBaseAndBitshift>
 80019c6:	4603      	mov	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2201      	movs	r2, #1
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e008      	b.n	80019ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0b7      	b.n	8001b5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_DMA_Init+0x658>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d072      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_DMA_Init+0x65c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d06d      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_DMA_Init+0x660>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d068      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_DMA_Init+0x664>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d063      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a59      	ldr	r2, [pc, #356]	; (8001b80 <HAL_DMA_Init+0x668>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d05e      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_DMA_Init+0x66c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d059      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_DMA_Init+0x670>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d054      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_DMA_Init+0x674>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d04f      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_DMA_Init+0x678>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d04a      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_DMA_Init+0x67c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d045      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_DMA_Init+0x680>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d040      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_DMA_Init+0x684>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d03b      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_DMA_Init+0x688>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d036      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_DMA_Init+0x68c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_DMA_Init+0x690>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d02c      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_DMA_Init+0x694>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d027      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <HAL_DMA_Init+0x698>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d022      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <HAL_DMA_Init+0x69c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <HAL_DMA_Init+0x6a0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_DMA_Init+0x6a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a41      	ldr	r2, [pc, #260]	; (8001bc0 <HAL_DMA_Init+0x6a8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <HAL_DMA_Init+0x6ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d009      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <HAL_DMA_Init+0x6b0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_Init+0x5c6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <HAL_DMA_Init+0x6b4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Init+0x5ca>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_DMA_Init+0x5cc>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d032      	beq.n	8001b4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f001 fcdf 	bl	80034ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b80      	cmp	r3, #128	; 0x80
 8001af4:	d102      	bne.n	8001afc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_DMA_Init+0x624>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d80c      	bhi.n	8001b3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f001 fd5c 	bl	80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	a7fdabf8 	.word	0xa7fdabf8
 8001b6c:	cccccccd 	.word	0xcccccccd
 8001b70:	40020010 	.word	0x40020010
 8001b74:	40020028 	.word	0x40020028
 8001b78:	40020040 	.word	0x40020040
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	40020070 	.word	0x40020070
 8001b84:	40020088 	.word	0x40020088
 8001b88:	400200a0 	.word	0x400200a0
 8001b8c:	400200b8 	.word	0x400200b8
 8001b90:	40020410 	.word	0x40020410
 8001b94:	40020428 	.word	0x40020428
 8001b98:	40020440 	.word	0x40020440
 8001b9c:	40020458 	.word	0x40020458
 8001ba0:	40020470 	.word	0x40020470
 8001ba4:	40020488 	.word	0x40020488
 8001ba8:	400204a0 	.word	0x400204a0
 8001bac:	400204b8 	.word	0x400204b8
 8001bb0:	58025408 	.word	0x58025408
 8001bb4:	5802541c 	.word	0x5802541c
 8001bb8:	58025430 	.word	0x58025430
 8001bbc:	58025444 	.word	0x58025444
 8001bc0:	58025458 	.word	0x58025458
 8001bc4:	5802546c 	.word	0x5802546c
 8001bc8:	58025480 	.word	0x58025480
 8001bcc:	58025494 	.word	0x58025494

08001bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e226      	b.n	800203a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Start_IT+0x2a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e21f      	b.n	800203a <HAL_DMA_Start_IT+0x46a>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 820a 	bne.w	8002024 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_DMA_Start_IT+0x1f4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04a      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_DMA_Start_IT+0x1f8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d045      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a65      	ldr	r2, [pc, #404]	; (8001dcc <HAL_DMA_Start_IT+0x1fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d040      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_DMA_Start_IT+0x200>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d03b      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a62      	ldr	r2, [pc, #392]	; (8001dd4 <HAL_DMA_Start_IT+0x204>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d036      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <HAL_DMA_Start_IT+0x208>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5f      	ldr	r2, [pc, #380]	; (8001ddc <HAL_DMA_Start_IT+0x20c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d02c      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5d      	ldr	r2, [pc, #372]	; (8001de0 <HAL_DMA_Start_IT+0x210>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <HAL_DMA_Start_IT+0x214>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	; (8001de8 <HAL_DMA_Start_IT+0x218>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01d      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a59      	ldr	r2, [pc, #356]	; (8001dec <HAL_DMA_Start_IT+0x21c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d018      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_DMA_Start_IT+0x220>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_DMA_Start_IT+0x224>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_DMA_Start_IT+0x228>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d009      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a53      	ldr	r2, [pc, #332]	; (8001dfc <HAL_DMA_Start_IT+0x22c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Start_IT+0xee>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_DMA_Start_IT+0x230>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d108      	bne.n	8001cd0 <HAL_DMA_Start_IT+0x100>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_DMA_Start_IT+0x110>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 f906 	bl	8002ef8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_DMA_Start_IT+0x1f4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d04a      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <HAL_DMA_Start_IT+0x1f8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d045      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <HAL_DMA_Start_IT+0x1fc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d040      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <HAL_DMA_Start_IT+0x200>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d03b      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2e      	ldr	r2, [pc, #184]	; (8001dd4 <HAL_DMA_Start_IT+0x204>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d036      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_DMA_Start_IT+0x208>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d031      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_DMA_Start_IT+0x20c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02c      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_DMA_Start_IT+0x210>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d027      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <HAL_DMA_Start_IT+0x214>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <HAL_DMA_Start_IT+0x218>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d01d      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <HAL_DMA_Start_IT+0x21c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <HAL_DMA_Start_IT+0x220>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_DMA_Start_IT+0x224>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <HAL_DMA_Start_IT+0x228>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_DMA_Start_IT+0x22c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Start_IT+0x1bc>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_DMA_Start_IT+0x230>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Start_IT+0x1c0>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_Start_IT+0x1c2>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d036      	beq.n	8001e04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 021e 	bic.w	r2, r3, #30
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0216 	orr.w	r2, r2, #22
 8001da8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03e      	beq.n	8001e30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0208 	orr.w	r2, r2, #8
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e035      	b.n	8001e30 <HAL_DMA_Start_IT+0x260>
 8001dc4:	40020010 	.word	0x40020010
 8001dc8:	40020028 	.word	0x40020028
 8001dcc:	40020040 	.word	0x40020040
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	40020070 	.word	0x40020070
 8001dd8:	40020088 	.word	0x40020088
 8001ddc:	400200a0 	.word	0x400200a0
 8001de0:	400200b8 	.word	0x400200b8
 8001de4:	40020410 	.word	0x40020410
 8001de8:	40020428 	.word	0x40020428
 8001dec:	40020440 	.word	0x40020440
 8001df0:	40020458 	.word	0x40020458
 8001df4:	40020470 	.word	0x40020470
 8001df8:	40020488 	.word	0x40020488
 8001dfc:	400204a0 	.word	0x400204a0
 8001e00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 020e 	bic.w	r2, r3, #14
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 020a 	orr.w	r2, r2, #10
 8001e16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0204 	orr.w	r2, r2, #4
 8001e2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a83      	ldr	r2, [pc, #524]	; (8002044 <HAL_DMA_Start_IT+0x474>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d072      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a82      	ldr	r2, [pc, #520]	; (8002048 <HAL_DMA_Start_IT+0x478>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d06d      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a80      	ldr	r2, [pc, #512]	; (800204c <HAL_DMA_Start_IT+0x47c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d068      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7f      	ldr	r2, [pc, #508]	; (8002050 <HAL_DMA_Start_IT+0x480>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d063      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a7d      	ldr	r2, [pc, #500]	; (8002054 <HAL_DMA_Start_IT+0x484>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d05e      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7c      	ldr	r2, [pc, #496]	; (8002058 <HAL_DMA_Start_IT+0x488>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d059      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a7a      	ldr	r2, [pc, #488]	; (800205c <HAL_DMA_Start_IT+0x48c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d054      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a79      	ldr	r2, [pc, #484]	; (8002060 <HAL_DMA_Start_IT+0x490>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04f      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_DMA_Start_IT+0x494>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d04a      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a76      	ldr	r2, [pc, #472]	; (8002068 <HAL_DMA_Start_IT+0x498>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d045      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a74      	ldr	r2, [pc, #464]	; (800206c <HAL_DMA_Start_IT+0x49c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d040      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a73      	ldr	r2, [pc, #460]	; (8002070 <HAL_DMA_Start_IT+0x4a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d03b      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_DMA_Start_IT+0x4a4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d036      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a70      	ldr	r2, [pc, #448]	; (8002078 <HAL_DMA_Start_IT+0x4a8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d031      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_DMA_Start_IT+0x4ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02c      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6d      	ldr	r2, [pc, #436]	; (8002080 <HAL_DMA_Start_IT+0x4b0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d027      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <HAL_DMA_Start_IT+0x4b4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d022      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_DMA_Start_IT+0x4b8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d01d      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a68      	ldr	r2, [pc, #416]	; (800208c <HAL_DMA_Start_IT+0x4bc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d018      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a67      	ldr	r2, [pc, #412]	; (8002090 <HAL_DMA_Start_IT+0x4c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_DMA_Start_IT+0x4c4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00e      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_DMA_Start_IT+0x4c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a62      	ldr	r2, [pc, #392]	; (800209c <HAL_DMA_Start_IT+0x4cc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d004      	beq.n	8001f20 <HAL_DMA_Start_IT+0x350>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_DMA_Start_IT+0x4d0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_DMA_Start_IT+0x354>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_DMA_Start_IT+0x356>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01a      	beq.n	8001f60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_DMA_Start_IT+0x474>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_DMA_Start_IT+0x478>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_DMA_Start_IT+0x47c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_DMA_Start_IT+0x480>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a31      	ldr	r2, [pc, #196]	; (8002054 <HAL_DMA_Start_IT+0x484>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a30      	ldr	r2, [pc, #192]	; (8002058 <HAL_DMA_Start_IT+0x488>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	; (800205c <HAL_DMA_Start_IT+0x48c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_DMA_Start_IT+0x490>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_DMA_Start_IT+0x494>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_DMA_Start_IT+0x498>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_DMA_Start_IT+0x49c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_DMA_Start_IT+0x4a0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_DMA_Start_IT+0x4a4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_Start_IT+0x4a8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_DMA_Start_IT+0x4ac>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Start_IT+0x430>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_Start_IT+0x4b0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <HAL_DMA_Start_IT+0x442>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e012      	b.n	8002038 <HAL_DMA_Start_IT+0x468>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e009      	b.n	8002038 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002038:	7dfb      	ldrb	r3, [r7, #23]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
 8002084:	58025408 	.word	0x58025408
 8002088:	5802541c 	.word	0x5802541c
 800208c:	58025430 	.word	0x58025430
 8002090:	58025444 	.word	0x58025444
 8002094:	58025458 	.word	0x58025458
 8002098:	5802546c 	.word	0x5802546c
 800209c:	58025480 	.word	0x58025480
 80020a0:	58025494 	.word	0x58025494

080020a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b0:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_DMA_IRQHandler+0x1ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a67      	ldr	r2, [pc, #412]	; (8002254 <HAL_DMA_IRQHandler+0x1b0>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5f      	ldr	r2, [pc, #380]	; (8002258 <HAL_DMA_IRQHandler+0x1b4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5d      	ldr	r2, [pc, #372]	; (800225c <HAL_DMA_IRQHandler+0x1b8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5c      	ldr	r2, [pc, #368]	; (8002260 <HAL_DMA_IRQHandler+0x1bc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_DMA_IRQHandler+0x1c0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_DMA_IRQHandler+0x1c4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_DMA_IRQHandler+0x1c8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <HAL_DMA_IRQHandler+0x1cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_DMA_IRQHandler+0x1d0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_DMA_IRQHandler+0x1d4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_DMA_IRQHandler+0x1d8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a50      	ldr	r2, [pc, #320]	; (8002280 <HAL_DMA_IRQHandler+0x1dc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_DMA_IRQHandler+0x1e0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4d      	ldr	r2, [pc, #308]	; (8002288 <HAL_DMA_IRQHandler+0x1e4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_DMA_IRQHandler+0x1e8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_DMA_IRQHandler+0x1ec>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_IRQHandler+0xd2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_DMA_IRQHandler+0x1f0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_DMA_IRQHandler+0xd6>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_DMA_IRQHandler+0xd8>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 842b 	beq.w	80029d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2208      	movs	r2, #8
 800218c:	409a      	lsls	r2, r3
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80a2 	beq.w	80022dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <HAL_DMA_IRQHandler+0x1b4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HAL_DMA_IRQHandler+0x1b8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d045      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_DMA_IRQHandler+0x1bc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d040      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_DMA_IRQHandler+0x1c0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d03b      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a28      	ldr	r2, [pc, #160]	; (8002268 <HAL_DMA_IRQHandler+0x1c4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d036      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_DMA_IRQHandler+0x1c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_DMA_IRQHandler+0x1cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02c      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a24      	ldr	r2, [pc, #144]	; (8002274 <HAL_DMA_IRQHandler+0x1d0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_DMA_IRQHandler+0x1d4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d022      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_DMA_IRQHandler+0x1d8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01d      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_DMA_IRQHandler+0x1dc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_DMA_IRQHandler+0x1e0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_DMA_IRQHandler+0x1e4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_DMA_IRQHandler+0x1e8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_DMA_IRQHandler+0x1ec>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_IRQHandler+0x194>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_DMA_IRQHandler+0x1f0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d12f      	bne.n	8002298 <HAL_DMA_IRQHandler+0x1f4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e02e      	b.n	80022ac <HAL_DMA_IRQHandler+0x208>
 800224e:	bf00      	nop
 8002250:	24000000 	.word	0x24000000
 8002254:	1b4e81b5 	.word	0x1b4e81b5
 8002258:	40020010 	.word	0x40020010
 800225c:	40020028 	.word	0x40020028
 8002260:	40020040 	.word	0x40020040
 8002264:	40020058 	.word	0x40020058
 8002268:	40020070 	.word	0x40020070
 800226c:	40020088 	.word	0x40020088
 8002270:	400200a0 	.word	0x400200a0
 8002274:	400200b8 	.word	0x400200b8
 8002278:	40020410 	.word	0x40020410
 800227c:	40020428 	.word	0x40020428
 8002280:	40020440 	.word	0x40020440
 8002284:	40020458 	.word	0x40020458
 8002288:	40020470 	.word	0x40020470
 800228c:	40020488 	.word	0x40020488
 8002290:	400204a0 	.word	0x400204a0
 8002294:	400204b8 	.word	0x400204b8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bf14      	ite	ne
 80022a6:	2301      	movne	r3, #1
 80022a8:	2300      	moveq	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2208      	movs	r2, #8
 80022ca:	409a      	lsls	r2, r3
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06e      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_DMA_IRQHandler+0x3f8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d04a      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_DMA_IRQHandler+0x3fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d045      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <HAL_DMA_IRQHandler+0x400>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d040      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <HAL_DMA_IRQHandler+0x404>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d03b      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a63      	ldr	r2, [pc, #396]	; (80024ac <HAL_DMA_IRQHandler+0x408>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d036      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_DMA_IRQHandler+0x40c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d031      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_DMA_IRQHandler+0x410>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d02c      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <HAL_DMA_IRQHandler+0x414>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d027      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_DMA_IRQHandler+0x418>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5b      	ldr	r2, [pc, #364]	; (80024c0 <HAL_DMA_IRQHandler+0x41c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_DMA_IRQHandler+0x420>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d018      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_DMA_IRQHandler+0x424>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_DMA_IRQHandler+0x428>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a55      	ldr	r2, [pc, #340]	; (80024d0 <HAL_DMA_IRQHandler+0x42c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_DMA_IRQHandler+0x430>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d004      	beq.n	8002392 <HAL_DMA_IRQHandler+0x2ee>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_DMA_IRQHandler+0x434>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10a      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x304>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e003      	b.n	80023b0 <HAL_DMA_IRQHandler+0x30c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0202 	orr.w	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2204      	movs	r2, #4
 80023da:	409a      	lsls	r2, r3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808f 	beq.w	8002504 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2c      	ldr	r2, [pc, #176]	; (800249c <HAL_DMA_IRQHandler+0x3f8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04a      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_DMA_IRQHandler+0x3fc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d045      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_DMA_IRQHandler+0x400>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d040      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_DMA_IRQHandler+0x404>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d03b      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <HAL_DMA_IRQHandler+0x408>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d036      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_DMA_IRQHandler+0x40c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d031      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <HAL_DMA_IRQHandler+0x410>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d02c      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_DMA_IRQHandler+0x414>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d027      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a20      	ldr	r2, [pc, #128]	; (80024bc <HAL_DMA_IRQHandler+0x418>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_DMA_IRQHandler+0x41c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01d      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_DMA_IRQHandler+0x420>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d018      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_DMA_IRQHandler+0x424>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_DMA_IRQHandler+0x428>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00e      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_DMA_IRQHandler+0x42c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_DMA_IRQHandler+0x430>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3e2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_DMA_IRQHandler+0x434>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12a      	bne.n	80024dc <HAL_DMA_IRQHandler+0x438>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e023      	b.n	80024e4 <HAL_DMA_IRQHandler+0x440>
 800249c:	40020010 	.word	0x40020010
 80024a0:	40020028 	.word	0x40020028
 80024a4:	40020040 	.word	0x40020040
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40020070 	.word	0x40020070
 80024b0:	40020088 	.word	0x40020088
 80024b4:	400200a0 	.word	0x400200a0
 80024b8:	400200b8 	.word	0x400200b8
 80024bc:	40020410 	.word	0x40020410
 80024c0:	40020428 	.word	0x40020428
 80024c4:	40020440 	.word	0x40020440
 80024c8:	40020458 	.word	0x40020458
 80024cc:	40020470 	.word	0x40020470
 80024d0:	40020488 	.word	0x40020488
 80024d4:	400204a0 	.word	0x400204a0
 80024d8:	400204b8 	.word	0x400204b8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2204      	movs	r2, #4
 80024f2:	409a      	lsls	r2, r3
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2210      	movs	r2, #16
 800250e:	409a      	lsls	r2, r3
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a6 	beq.w	8002666 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a85      	ldr	r2, [pc, #532]	; (8002734 <HAL_DMA_IRQHandler+0x690>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d04a      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_DMA_IRQHandler+0x694>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d045      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a82      	ldr	r2, [pc, #520]	; (800273c <HAL_DMA_IRQHandler+0x698>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d040      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_DMA_IRQHandler+0x69c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d03b      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7f      	ldr	r2, [pc, #508]	; (8002744 <HAL_DMA_IRQHandler+0x6a0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d036      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <HAL_DMA_IRQHandler+0x6a4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d031      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_DMA_IRQHandler+0x6a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d02c      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_DMA_IRQHandler+0x6ac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d027      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a79      	ldr	r2, [pc, #484]	; (8002754 <HAL_DMA_IRQHandler+0x6b0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d022      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_DMA_IRQHandler+0x6b4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01d      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a76      	ldr	r2, [pc, #472]	; (800275c <HAL_DMA_IRQHandler+0x6b8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a74      	ldr	r2, [pc, #464]	; (8002760 <HAL_DMA_IRQHandler+0x6bc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a73      	ldr	r2, [pc, #460]	; (8002764 <HAL_DMA_IRQHandler+0x6c0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a71      	ldr	r2, [pc, #452]	; (8002768 <HAL_DMA_IRQHandler+0x6c4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a70      	ldr	r2, [pc, #448]	; (800276c <HAL_DMA_IRQHandler+0x6c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_DMA_IRQHandler+0x516>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_DMA_IRQHandler+0x6cc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10a      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x52c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e009      	b.n	80025e4 <HAL_DMA_IRQHandler+0x540>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03e      	beq.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2210      	movs	r2, #16
 80025f2:	409a      	lsls	r2, r3
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d024      	beq.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e01f      	b.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01b      	beq.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e016      	b.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0208 	bic.w	r2, r2, #8
 8002654:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2220      	movs	r2, #32
 8002670:	409a      	lsls	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8110 	beq.w	800289c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <HAL_DMA_IRQHandler+0x690>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04a      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <HAL_DMA_IRQHandler+0x694>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d045      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_DMA_IRQHandler+0x698>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_DMA_IRQHandler+0x69c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <HAL_DMA_IRQHandler+0x6a0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d036      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a25      	ldr	r2, [pc, #148]	; (8002748 <HAL_DMA_IRQHandler+0x6a4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d031      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_DMA_IRQHandler+0x6a8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_DMA_IRQHandler+0x6ac>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_DMA_IRQHandler+0x6b0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_IRQHandler+0x6b4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_DMA_IRQHandler+0x6b8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_DMA_IRQHandler+0x6bc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_DMA_IRQHandler+0x6c0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_DMA_IRQHandler+0x6c4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_DMA_IRQHandler+0x6c8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_DMA_IRQHandler+0x678>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_DMA_IRQHandler+0x6cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d12b      	bne.n	8002774 <HAL_DMA_IRQHandler+0x6d0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e02a      	b.n	8002788 <HAL_DMA_IRQHandler+0x6e4>
 8002732:	bf00      	nop
 8002734:	40020010 	.word	0x40020010
 8002738:	40020028 	.word	0x40020028
 800273c:	40020040 	.word	0x40020040
 8002740:	40020058 	.word	0x40020058
 8002744:	40020070 	.word	0x40020070
 8002748:	40020088 	.word	0x40020088
 800274c:	400200a0 	.word	0x400200a0
 8002750:	400200b8 	.word	0x400200b8
 8002754:	40020410 	.word	0x40020410
 8002758:	40020428 	.word	0x40020428
 800275c:	40020440 	.word	0x40020440
 8002760:	40020458 	.word	0x40020458
 8002764:	40020470 	.word	0x40020470
 8002768:	40020488 	.word	0x40020488
 800276c:	400204a0 	.word	0x400204a0
 8002770:	400204b8 	.word	0x400204b8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8087 	beq.w	800289c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2220      	movs	r2, #32
 8002798:	409a      	lsls	r2, r3
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d139      	bne.n	800281e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0216 	bic.w	r2, r2, #22
 80027b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <HAL_DMA_IRQHandler+0x736>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0208 	bic.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	223f      	movs	r2, #63	; 0x3f
 80027f4:	409a      	lsls	r2, r3
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 834a 	beq.w	8002ea8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
          }
          return;
 800281c:	e344      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	2b00      	cmp	r3, #0
 8002840:	d02c      	beq.n	800289c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e027      	b.n	800289c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d023      	beq.n	800289c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e01e      	b.n	800289c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0210 	bic.w	r2, r2, #16
 800287a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8306 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8088 	beq.w	80029c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2204      	movs	r2, #4
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7a      	ldr	r2, [pc, #488]	; (8002aac <HAL_DMA_IRQHandler+0xa08>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a79      	ldr	r2, [pc, #484]	; (8002ab0 <HAL_DMA_IRQHandler+0xa0c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d045      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a77      	ldr	r2, [pc, #476]	; (8002ab4 <HAL_DMA_IRQHandler+0xa10>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a76      	ldr	r2, [pc, #472]	; (8002ab8 <HAL_DMA_IRQHandler+0xa14>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d03b      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a74      	ldr	r2, [pc, #464]	; (8002abc <HAL_DMA_IRQHandler+0xa18>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d036      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a73      	ldr	r2, [pc, #460]	; (8002ac0 <HAL_DMA_IRQHandler+0xa1c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d031      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <HAL_DMA_IRQHandler+0xa20>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <HAL_DMA_IRQHandler+0xa24>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d027      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6e      	ldr	r2, [pc, #440]	; (8002acc <HAL_DMA_IRQHandler+0xa28>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6d      	ldr	r2, [pc, #436]	; (8002ad0 <HAL_DMA_IRQHandler+0xa2c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01d      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6b      	ldr	r2, [pc, #428]	; (8002ad4 <HAL_DMA_IRQHandler+0xa30>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6a      	ldr	r2, [pc, #424]	; (8002ad8 <HAL_DMA_IRQHandler+0xa34>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a68      	ldr	r2, [pc, #416]	; (8002adc <HAL_DMA_IRQHandler+0xa38>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_DMA_IRQHandler+0xa3c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_DMA_IRQHandler+0xa40>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_DMA_IRQHandler+0x8b8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a64      	ldr	r2, [pc, #400]	; (8002ae8 <HAL_DMA_IRQHandler+0xa44>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <HAL_DMA_IRQHandler+0x8ca>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_DMA_IRQHandler+0x8da>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	429a      	cmp	r2, r3
 8002988:	d307      	bcc.n	800299a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f2      	bne.n	800297e <HAL_DMA_IRQHandler+0x8da>
 8002998:	e000      	b.n	800299c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800299a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029b2:	e003      	b.n	80029bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8272 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e26c      	b.n	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a43      	ldr	r2, [pc, #268]	; (8002aec <HAL_DMA_IRQHandler+0xa48>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a42      	ldr	r2, [pc, #264]	; (8002af0 <HAL_DMA_IRQHandler+0xa4c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01d      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <HAL_DMA_IRQHandler+0xa50>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <HAL_DMA_IRQHandler+0xa54>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3d      	ldr	r2, [pc, #244]	; (8002afc <HAL_DMA_IRQHandler+0xa58>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <HAL_DMA_IRQHandler+0xa5c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <HAL_DMA_IRQHandler+0xa60>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x984>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a39      	ldr	r2, [pc, #228]	; (8002b08 <HAL_DMA_IRQHandler+0xa64>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x988>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_DMA_IRQHandler+0x98a>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 823f 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2204      	movs	r2, #4
 8002a46:	409a      	lsls	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80cd 	beq.w	8002bec <HAL_DMA_IRQHandler+0xb48>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80c7 	beq.w	8002bec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2204      	movs	r2, #4
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d049      	beq.n	8002b0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8210 	beq.w	8002eac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a94:	e20a      	b.n	8002eac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8206 	beq.w	8002eac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aa8:	e200      	b.n	8002eac <HAL_DMA_IRQHandler+0xe08>
 8002aaa:	bf00      	nop
 8002aac:	40020010 	.word	0x40020010
 8002ab0:	40020028 	.word	0x40020028
 8002ab4:	40020040 	.word	0x40020040
 8002ab8:	40020058 	.word	0x40020058
 8002abc:	40020070 	.word	0x40020070
 8002ac0:	40020088 	.word	0x40020088
 8002ac4:	400200a0 	.word	0x400200a0
 8002ac8:	400200b8 	.word	0x400200b8
 8002acc:	40020410 	.word	0x40020410
 8002ad0:	40020428 	.word	0x40020428
 8002ad4:	40020440 	.word	0x40020440
 8002ad8:	40020458 	.word	0x40020458
 8002adc:	40020470 	.word	0x40020470
 8002ae0:	40020488 	.word	0x40020488
 8002ae4:	400204a0 	.word	0x400204a0
 8002ae8:	400204b8 	.word	0x400204b8
 8002aec:	58025408 	.word	0x58025408
 8002af0:	5802541c 	.word	0x5802541c
 8002af4:	58025430 	.word	0x58025430
 8002af8:	58025444 	.word	0x58025444
 8002afc:	58025458 	.word	0x58025458
 8002b00:	5802546c 	.word	0x5802546c
 8002b04:	58025480 	.word	0x58025480
 8002b08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d160      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_DMA_IRQHandler+0xc74>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d04a      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7d      	ldr	r2, [pc, #500]	; (8002d1c <HAL_DMA_IRQHandler+0xc78>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d045      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_DMA_IRQHandler+0xc7c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d040      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_DMA_IRQHandler+0xc80>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d03b      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a79      	ldr	r2, [pc, #484]	; (8002d28 <HAL_DMA_IRQHandler+0xc84>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d036      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <HAL_DMA_IRQHandler+0xc88>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d031      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a76      	ldr	r2, [pc, #472]	; (8002d30 <HAL_DMA_IRQHandler+0xc8c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02c      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a74      	ldr	r2, [pc, #464]	; (8002d34 <HAL_DMA_IRQHandler+0xc90>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d027      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a73      	ldr	r2, [pc, #460]	; (8002d38 <HAL_DMA_IRQHandler+0xc94>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_DMA_IRQHandler+0xc98>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01d      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a70      	ldr	r2, [pc, #448]	; (8002d40 <HAL_DMA_IRQHandler+0xc9c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <HAL_DMA_IRQHandler+0xca0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6d      	ldr	r2, [pc, #436]	; (8002d48 <HAL_DMA_IRQHandler+0xca4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6b      	ldr	r2, [pc, #428]	; (8002d4c <HAL_DMA_IRQHandler+0xca8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_DMA_IRQHandler+0xcac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xb12>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a68      	ldr	r2, [pc, #416]	; (8002d54 <HAL_DMA_IRQHandler+0xcb0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0xb24>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e007      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb34>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8165 	beq.w	8002eac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bea:	e15f      	b.n	8002eac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80c5 	beq.w	8002d8c <HAL_DMA_IRQHandler+0xce8>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80bf 	beq.w	8002d8c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2202      	movs	r2, #2
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 813a 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c44:	e134      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8130 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c58:	e12a      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8089 	bne.w	8002d78 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <HAL_DMA_IRQHandler+0xc74>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04a      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_DMA_IRQHandler+0xc78>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d045      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_DMA_IRQHandler+0xc7c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d040      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <HAL_DMA_IRQHandler+0xc80>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_DMA_IRQHandler+0xc84>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_DMA_IRQHandler+0xc88>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_DMA_IRQHandler+0xc8c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d02c      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <HAL_DMA_IRQHandler+0xc90>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_DMA_IRQHandler+0xc94>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <HAL_DMA_IRQHandler+0xc98>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_DMA_IRQHandler+0xc9c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_DMA_IRQHandler+0xca0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <HAL_DMA_IRQHandler+0xca4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <HAL_DMA_IRQHandler+0xca8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <HAL_DMA_IRQHandler+0xcac>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xc62>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_DMA_IRQHandler+0xcb0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d128      	bne.n	8002d58 <HAL_DMA_IRQHandler+0xcb4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0214 	bic.w	r2, r2, #20
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e027      	b.n	8002d68 <HAL_DMA_IRQHandler+0xcc4>
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020a 	bic.w	r2, r2, #10
 8002d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8097 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d8a:	e091      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2208      	movs	r2, #8
 8002d96:	409a      	lsls	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8088 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8082 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <HAL_DMA_IRQHandler+0xe14>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04a      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_DMA_IRQHandler+0xe18>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d045      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <HAL_DMA_IRQHandler+0xe1c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_DMA_IRQHandler+0xe20>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03b      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3b      	ldr	r2, [pc, #236]	; (8002ec8 <HAL_DMA_IRQHandler+0xe24>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d036      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <HAL_DMA_IRQHandler+0xe28>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d031      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a38      	ldr	r2, [pc, #224]	; (8002ed0 <HAL_DMA_IRQHandler+0xe2c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02c      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a36      	ldr	r2, [pc, #216]	; (8002ed4 <HAL_DMA_IRQHandler+0xe30>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_DMA_IRQHandler+0xe34>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a33      	ldr	r2, [pc, #204]	; (8002edc <HAL_DMA_IRQHandler+0xe38>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a32      	ldr	r2, [pc, #200]	; (8002ee0 <HAL_DMA_IRQHandler+0xe3c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_DMA_IRQHandler+0xe40>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_DMA_IRQHandler+0xe44>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	; (8002eec <HAL_DMA_IRQHandler+0xe48>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <HAL_DMA_IRQHandler+0xe4c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xdaa>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <HAL_DMA_IRQHandler+0xe50>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <HAL_DMA_IRQHandler+0xdbc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 021c 	bic.w	r2, r2, #28
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e007      	b.n	8002e70 <HAL_DMA_IRQHandler+0xdcc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e004      	b.n	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eb0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8

08002ef8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <DMA_SetConfig+0x21c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d072      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7d      	ldr	r2, [pc, #500]	; (8003118 <DMA_SetConfig+0x220>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d06d      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <DMA_SetConfig+0x224>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d068      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7a      	ldr	r2, [pc, #488]	; (8003120 <DMA_SetConfig+0x228>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d063      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a79      	ldr	r2, [pc, #484]	; (8003124 <DMA_SetConfig+0x22c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a77      	ldr	r2, [pc, #476]	; (8003128 <DMA_SetConfig+0x230>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d059      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a76      	ldr	r2, [pc, #472]	; (800312c <DMA_SetConfig+0x234>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d054      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a74      	ldr	r2, [pc, #464]	; (8003130 <DMA_SetConfig+0x238>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04f      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a73      	ldr	r2, [pc, #460]	; (8003134 <DMA_SetConfig+0x23c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a71      	ldr	r2, [pc, #452]	; (8003138 <DMA_SetConfig+0x240>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a70      	ldr	r2, [pc, #448]	; (800313c <DMA_SetConfig+0x244>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <DMA_SetConfig+0x248>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <DMA_SetConfig+0x24c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6b      	ldr	r2, [pc, #428]	; (8003148 <DMA_SetConfig+0x250>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6a      	ldr	r2, [pc, #424]	; (800314c <DMA_SetConfig+0x254>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a68      	ldr	r2, [pc, #416]	; (8003150 <DMA_SetConfig+0x258>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <DMA_SetConfig+0x25c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a65      	ldr	r2, [pc, #404]	; (8003158 <DMA_SetConfig+0x260>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a64      	ldr	r2, [pc, #400]	; (800315c <DMA_SetConfig+0x264>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a62      	ldr	r2, [pc, #392]	; (8003160 <DMA_SetConfig+0x268>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <DMA_SetConfig+0x26c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5f      	ldr	r2, [pc, #380]	; (8003168 <DMA_SetConfig+0x270>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <DMA_SetConfig+0x274>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <DMA_SetConfig+0x10a>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <DMA_SetConfig+0x278>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <DMA_SetConfig+0x10e>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <DMA_SetConfig+0x110>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003014:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003026:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a39      	ldr	r2, [pc, #228]	; (8003114 <DMA_SetConfig+0x21c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d04a      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <DMA_SetConfig+0x220>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d045      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a36      	ldr	r2, [pc, #216]	; (800311c <DMA_SetConfig+0x224>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d040      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a35      	ldr	r2, [pc, #212]	; (8003120 <DMA_SetConfig+0x228>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d03b      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <DMA_SetConfig+0x22c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d036      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <DMA_SetConfig+0x230>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d031      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <DMA_SetConfig+0x234>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02c      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <DMA_SetConfig+0x238>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d027      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <DMA_SetConfig+0x23c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <DMA_SetConfig+0x240>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01d      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <DMA_SetConfig+0x244>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a29      	ldr	r2, [pc, #164]	; (8003140 <DMA_SetConfig+0x248>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a27      	ldr	r2, [pc, #156]	; (8003144 <DMA_SetConfig+0x24c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <DMA_SetConfig+0x250>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <DMA_SetConfig+0x254>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <DMA_SetConfig+0x1d0>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <DMA_SetConfig+0x258>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <DMA_SetConfig+0x1d4>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <DMA_SetConfig+0x1d6>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d059      	beq.n	8003186 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	223f      	movs	r2, #63	; 0x3f
 80030dc:	409a      	lsls	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d138      	bne.n	8003174 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003112:	e086      	b.n	8003222 <DMA_SetConfig+0x32a>
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	58025408 	.word	0x58025408
 8003158:	5802541c 	.word	0x5802541c
 800315c:	58025430 	.word	0x58025430
 8003160:	58025444 	.word	0x58025444
 8003164:	58025458 	.word	0x58025458
 8003168:	5802546c 	.word	0x5802546c
 800316c:	58025480 	.word	0x58025480
 8003170:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
}
 8003184:	e04d      	b.n	8003222 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <DMA_SetConfig+0x338>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <DMA_SetConfig+0x33c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a26      	ldr	r2, [pc, #152]	; (8003238 <DMA_SetConfig+0x340>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <DMA_SetConfig+0x344>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a23      	ldr	r2, [pc, #140]	; (8003240 <DMA_SetConfig+0x348>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <DMA_SetConfig+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <DMA_SetConfig+0x350>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <DMA_SetConfig+0x2de>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <DMA_SetConfig+0x354>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <DMA_SetConfig+0x2e2>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <DMA_SetConfig+0x2e4>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2201      	movs	r2, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d108      	bne.n	8003212 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	60da      	str	r2, [r3, #12]
}
 8003210:	e007      	b.n	8003222 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	60da      	str	r2, [r3, #12]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	58025408 	.word	0x58025408
 8003234:	5802541c 	.word	0x5802541c
 8003238:	58025430 	.word	0x58025430
 800323c:	58025444 	.word	0x58025444
 8003240:	58025458 	.word	0x58025458
 8003244:	5802546c 	.word	0x5802546c
 8003248:	58025480 	.word	0x58025480
 800324c:	58025494 	.word	0x58025494

08003250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <DMA_CalcBaseAndBitshift+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <DMA_CalcBaseAndBitshift+0x11c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <DMA_CalcBaseAndBitshift+0x120>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <DMA_CalcBaseAndBitshift+0x124>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <DMA_CalcBaseAndBitshift+0x128>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3b      	ldr	r2, [pc, #236]	; (800337c <DMA_CalcBaseAndBitshift+0x12c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a39      	ldr	r2, [pc, #228]	; (8003380 <DMA_CalcBaseAndBitshift+0x130>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a38      	ldr	r2, [pc, #224]	; (8003384 <DMA_CalcBaseAndBitshift+0x134>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a36      	ldr	r2, [pc, #216]	; (8003388 <DMA_CalcBaseAndBitshift+0x138>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a35      	ldr	r2, [pc, #212]	; (800338c <DMA_CalcBaseAndBitshift+0x13c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a33      	ldr	r2, [pc, #204]	; (8003390 <DMA_CalcBaseAndBitshift+0x140>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a32      	ldr	r2, [pc, #200]	; (8003394 <DMA_CalcBaseAndBitshift+0x144>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a30      	ldr	r2, [pc, #192]	; (8003398 <DMA_CalcBaseAndBitshift+0x148>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2f      	ldr	r2, [pc, #188]	; (800339c <DMA_CalcBaseAndBitshift+0x14c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <DMA_CalcBaseAndBitshift+0x150>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <DMA_CalcBaseAndBitshift+0xa8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <DMA_CalcBaseAndBitshift+0x154>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <DMA_CalcBaseAndBitshift+0xac>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <DMA_CalcBaseAndBitshift+0xae>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d024      	beq.n	800334c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	3b10      	subs	r3, #16
 800330a:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <DMA_CalcBaseAndBitshift+0x158>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	4a24      	ldr	r2, [pc, #144]	; (80033ac <DMA_CalcBaseAndBitshift+0x15c>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d908      	bls.n	800333c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <DMA_CalcBaseAndBitshift+0x160>)
 8003332:	4013      	ands	r3, r2
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58
 800333a:	e00d      	b.n	8003358 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <DMA_CalcBaseAndBitshift+0x160>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
 800334a:	e005      	b.n	8003358 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40020010 	.word	0x40020010
 800336c:	40020028 	.word	0x40020028
 8003370:	40020040 	.word	0x40020040
 8003374:	40020058 	.word	0x40020058
 8003378:	40020070 	.word	0x40020070
 800337c:	40020088 	.word	0x40020088
 8003380:	400200a0 	.word	0x400200a0
 8003384:	400200b8 	.word	0x400200b8
 8003388:	40020410 	.word	0x40020410
 800338c:	40020428 	.word	0x40020428
 8003390:	40020440 	.word	0x40020440
 8003394:	40020458 	.word	0x40020458
 8003398:	40020470 	.word	0x40020470
 800339c:	40020488 	.word	0x40020488
 80033a0:	400204a0 	.word	0x400204a0
 80033a4:	400204b8 	.word	0x400204b8
 80033a8:	aaaaaaab 	.word	0xaaaaaaab
 80033ac:	08008538 	.word	0x08008538
 80033b0:	fffffc00 	.word	0xfffffc00

080033b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d120      	bne.n	800340a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d858      	bhi.n	8003482 <DMA_CheckFifoParam+0xce>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x24>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033fb 	.word	0x080033fb
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003483 	.word	0x08003483
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d048      	beq.n	8003486 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033f8:	e045      	b.n	8003486 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003402:	d142      	bne.n	800348a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003408:	e03f      	b.n	800348a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	d123      	bne.n	800345c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2b03      	cmp	r3, #3
 800341a:	d838      	bhi.n	800348e <DMA_CheckFifoParam+0xda>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <DMA_CheckFifoParam+0x70>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003435 	.word	0x08003435
 8003428:	0800343b 	.word	0x0800343b
 800342c:	08003435 	.word	0x08003435
 8003430:	0800344d 	.word	0x0800344d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
        break;
 8003438:	e030      	b.n	800349c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d025      	beq.n	8003492 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800344a:	e022      	b.n	8003492 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003454:	d11f      	bne.n	8003496 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800345a:	e01c      	b.n	8003496 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <DMA_CheckFifoParam+0xb6>
 8003464:	2b03      	cmp	r3, #3
 8003466:	d003      	beq.n	8003470 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003468:	e018      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
        break;
 800346e:	e015      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
    break;
 8003480:	e00b      	b.n	800349a <DMA_CheckFifoParam+0xe6>
        break;
 8003482:	bf00      	nop
 8003484:	e00a      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        break;
 8003486:	bf00      	nop
 8003488:	e008      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        break;
 800348a:	bf00      	nop
 800348c:	e006      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <DMA_CheckFifoParam+0xe8>
        break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <DMA_CheckFifoParam+0xe8>
    break;
 800349a:	bf00      	nop
    }
  }

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop

080034ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a36      	ldr	r2, [pc, #216]	; (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01a      	beq.n	800354a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	3b08      	subs	r3, #8
 800351c:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	461a      	mov	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003538:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003548:	e024      	b.n	8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3b10      	subs	r3, #16
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d806      	bhi.n	8003572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d902      	bls.n	8003572 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3308      	adds	r3, #8
 8003570:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003584:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2201      	movs	r2, #1
 800358e:	409a      	lsls	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	58025408 	.word	0x58025408
 80035a4:	5802541c 	.word	0x5802541c
 80035a8:	58025430 	.word	0x58025430
 80035ac:	58025444 	.word	0x58025444
 80035b0:	58025458 	.word	0x58025458
 80035b4:	5802546c 	.word	0x5802546c
 80035b8:	58025480 	.word	0x58025480
 80035bc:	58025494 	.word	0x58025494
 80035c0:	cccccccd 	.word	0xcccccccd
 80035c4:	16009600 	.word	0x16009600
 80035c8:	58025880 	.word	0x58025880
 80035cc:	aaaaaaab 	.word	0xaaaaaaab
 80035d0:	400204b8 	.word	0x400204b8
 80035d4:	4002040f 	.word	0x4002040f
 80035d8:	10008200 	.word	0x10008200
 80035dc:	40020880 	.word	0x40020880

080035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d04a      	beq.n	800368c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d847      	bhi.n	800368c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a24      	ldr	r2, [pc, #144]	; (800369c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003668:	671a      	str	r2, [r3, #112]	; 0x70
 800366a:	e009      	b.n	8003680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800367e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3b01      	subs	r3, #1
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	58025408 	.word	0x58025408
 800369c:	5802541c 	.word	0x5802541c
 80036a0:	58025430 	.word	0x58025430
 80036a4:	58025444 	.word	0x58025444
 80036a8:	58025458 	.word	0x58025458
 80036ac:	5802546c 	.word	0x5802546c
 80036b0:	58025480 	.word	0x58025480
 80036b4:	58025494 	.word	0x58025494
 80036b8:	1600963f 	.word	0x1600963f
 80036bc:	58025940 	.word	0x58025940
 80036c0:	1000823f 	.word	0x1000823f
 80036c4:	40020940 	.word	0x40020940

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <HAL_GPIO_Init+0x234>)
 80036d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036da:	e194      	b.n	8003a06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8186 	beq.w	8003a00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d005      	beq.n	800370c <HAL_GPIO_Init+0x44>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d130      	bne.n	800376e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003742:	2201      	movs	r2, #1
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0201 	and.w	r2, r3, #1
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b03      	cmp	r3, #3
 8003778:	d017      	beq.n	80037aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d123      	bne.n	80037fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3208      	adds	r2, #8
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	220f      	movs	r2, #15
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80e0 	beq.w	8003a00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_GPIO_Init+0x238>)
 8003852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_GPIO_Init+0x23c>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_GPIO_Init+0x240>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d052      	beq.n	8003930 <HAL_GPIO_Init+0x268>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_GPIO_Init+0x244>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_GPIO_Init+0x22e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_GPIO_Init+0x248>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <HAL_GPIO_Init+0x22a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_GPIO_Init+0x24c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x226>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_GPIO_Init+0x250>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x222>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <HAL_GPIO_Init+0x254>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x21e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <HAL_GPIO_Init+0x258>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x21a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_GPIO_Init+0x25c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x216>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x260>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x212>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_GPIO_Init+0x264>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x20e>
 80038d2:	2309      	movs	r3, #9
 80038d4:	e02d      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038d6:	230a      	movs	r3, #10
 80038d8:	e02b      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038da:	2308      	movs	r3, #8
 80038dc:	e029      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038de:	2307      	movs	r3, #7
 80038e0:	e027      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038e2:	2306      	movs	r3, #6
 80038e4:	e025      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e023      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e021      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e01f      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e01d      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01b      	b.n	8003932 <HAL_GPIO_Init+0x26a>
 80038fa:	bf00      	nop
 80038fc:	58000080 	.word	0x58000080
 8003900:	58024400 	.word	0x58024400
 8003904:	58000400 	.word	0x58000400
 8003908:	58020000 	.word	0x58020000
 800390c:	58020400 	.word	0x58020400
 8003910:	58020800 	.word	0x58020800
 8003914:	58020c00 	.word	0x58020c00
 8003918:	58021000 	.word	0x58021000
 800391c:	58021400 	.word	0x58021400
 8003920:	58021800 	.word	0x58021800
 8003924:	58021c00 	.word	0x58021c00
 8003928:	58022000 	.word	0x58022000
 800392c:	58022400 	.word	0x58022400
 8003930:	2300      	movs	r3, #0
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	f002 0203 	and.w	r2, r2, #3
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4093      	lsls	r3, r2
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003942:	4938      	ldr	r1, [pc, #224]	; (8003a24 <HAL_GPIO_Init+0x35c>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f ae63 	bne.w	80036dc <HAL_GPIO_Init+0x14>
  }
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	58000400 	.word	0x58000400

08003a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
 8003a34:	4613      	mov	r3, r2
 8003a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a44:	e003      	b.n	8003a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e12a      	b.n	8003cc4 <HAL_I2S_Init+0x268>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d123      	bne.n	8003ac2 <HAL_I2S_Init+0x66>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
    /* Init the I2S Callback settings */
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a91      	ldr	r2, [pc, #580]	; (8003ccc <HAL_I2S_Init+0x270>)
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a91      	ldr	r2, [pc, #580]	; (8003cd0 <HAL_I2S_Init+0x274>)
 8003a8c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a90      	ldr	r2, [pc, #576]	; (8003cd4 <HAL_I2S_Init+0x278>)
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a90      	ldr	r2, [pc, #576]	; (8003cd8 <HAL_I2S_Init+0x27c>)
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a8f      	ldr	r2, [pc, #572]	; (8003cdc <HAL_I2S_Init+0x280>)
 8003a9e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a8f      	ldr	r2, [pc, #572]	; (8003ce0 <HAL_I2S_Init+0x284>)
 8003aa4:	669a      	str	r2, [r3, #104]	; 0x68
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a8e      	ldr	r2, [pc, #568]	; (8003ce4 <HAL_I2S_Init+0x288>)
 8003aaa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (hi2s->MspInitCallback == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_I2S_Init+0x5e>
    {
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a8c      	ldr	r2, [pc, #560]	; (8003ce8 <HAL_I2S_Init+0x28c>)
 8003ab8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <HAL_I2S_Init+0x8c>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2200      	movs	r2, #0
 8003aee:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d008      	beq.n	8003b0a <HAL_I2S_Init+0xae>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d004      	beq.n	8003b0a <HAL_I2S_Init+0xae>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b0a      	cmp	r3, #10
 8003b06:	f040 8087 	bne.w	8003c18 <HAL_I2S_Init+0x1bc>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d05a      	beq.n	8003bc8 <HAL_I2S_Init+0x16c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_I2S_Init+0xc4>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003b20:	2301      	movs	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d003      	beq.n	8003b34 <HAL_I2S_Init+0xd8>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003b30:	2bb0      	cmp	r3, #176	; 0xb0
 8003b32:	d102      	bne.n	8003b3a <HAL_I2S_Init+0xde>
      {
        ispcm = 1UL;
 8003b34:	2301      	movs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e001      	b.n	8003b3e <HAL_I2S_Init+0xe2>
      }
      else
      {
        ispcm = 0UL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003b3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	f002 fd55 	bl	80065f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b4a:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b54:	d113      	bne.n	8003b7e <HAL_I2S_Init+0x122>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	3305      	adds	r3, #5
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e014      	b.n	8003ba8 <HAL_I2S_Init+0x14c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003b7e:	2220      	movs	r2, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	3305      	adds	r3, #5
 8003ba6:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4a50      	ldr	r2, [pc, #320]	; (8003cec <HAL_I2S_Init+0x290>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e003      	b.n	8003bd0 <HAL_I2S_Init+0x174>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d102      	bne.n	8003bdc <HAL_I2S_Init+0x180>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d002      	beq.n	8003be2 <HAL_I2S_Init+0x186>
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2bff      	cmp	r3, #255	; 0xff
 8003be0:	d907      	bls.n	8003bf2 <HAL_I2S_Init+0x196>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	f043 0210 	orr.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e068      	b.n	8003cc4 <HAL_I2S_Init+0x268>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_I2S_Init+0x1a0>
    {
      i2sodd = 1UL;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_I2S_Init+0x294>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	0411      	lsls	r1, r2, #16
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	0612      	lsls	r2, r2, #24
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_I2S_Init+0x298>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6851      	ldr	r1, [r2, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	68d2      	ldr	r2, [r2, #12]
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6992      	ldr	r2, [r2, #24]
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6a12      	ldr	r2, [r2, #32]
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6912      	ldr	r2, [r2, #16]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f640 72f8 	movw	r2, #4088	; 0xff8
 8003c5e:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c6e:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d007      	beq.n	8003c9e <HAL_I2S_Init+0x242>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d003      	beq.n	8003c9e <HAL_I2S_Init+0x242>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_I2S_Init+0x258>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	08003f95 	.word	0x08003f95
 8003cd0:	080005fd 	.word	0x080005fd
 8003cd4:	08003fd1 	.word	0x08003fd1
 8003cd8:	08003f81 	.word	0x08003f81
 8003cdc:	08003fa9 	.word	0x08003fa9
 8003ce0:	08003fbd 	.word	0x08003fbd
 8003ce4:	08003fe5 	.word	0x08003fe5
 8003ce8:	08000c79 	.word	0x08000c79
 8003cec:	cccccccd 	.word	0xcccccccd
 8003cf0:	fe00ffff 	.word	0xfe00ffff
 8003cf4:	fdff9040 	.word	0xfdff9040

08003cf8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_I2S_Transmit_DMA+0x1e>
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e086      	b.n	8003e28 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e07e      	b.n	8003e28 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2S_Transmit_DMA+0x42>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e076      	b.n	8003e28 <HAL_I2S_Transmit_DMA+0x130>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HAL_I2S_Transmit_DMA+0x138>)
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <HAL_I2S_Transmit_DMA+0x13c>)
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <HAL_I2S_Transmit_DMA+0x140>)
 8003d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4619      	mov	r1, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003da2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8003da4:	f7fd ff14 	bl	8001bd0 <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	f043 0208 	orr.w	r2, r3, #8
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	e02a      	b.n	8003e28 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dee:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	0800403d 	.word	0x0800403d
 8003e34:	08003ff9 	.word	0x08003ff9
 8003e38:	080040bd 	.word	0x080040bd

08003e3c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_I2S_Receive_DMA+0x1e>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e086      	b.n	8003f6c <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e07e      	b.n	8003f6c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_I2S_Receive_DMA+0x42>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e076      	b.n	8003f6c <HAL_I2S_Receive_DMA+0x130>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	865a      	strh	r2, [r3, #50]	; 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <HAL_I2S_Receive_DMA+0x138>)
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <HAL_I2S_Receive_DMA+0x13c>)
 8003ec6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_I2S_Receive_DMA+0x140>)
 8003ece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3330      	adds	r3, #48	; 0x30
 8003eda:	4619      	mov	r1, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003ee6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003ee8:	f7fd fe72 	bl	8001bd0 <HAL_DMA_Start_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d011      	beq.n	8003f16 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	f043 0208 	orr.w	r2, r3, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	e02a      	b.n	8003f6c <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	0800409f 	.word	0x0800409f
 8003f78:	0800405b 	.word	0x0800405b
 8003f7c:	080040bd 	.word	0x080040bd

08003f80 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2SEx_TxRxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10e      	bne.n	800402c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401c:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	4798      	blx	r3
#else
  HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	4798      	blx	r3
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10e      	bne.n	800408e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800407e:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	875a      	strh	r2, [r3, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	4798      	blx	r3
#else
  HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	4798      	blx	r3
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80040d8:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	4798      	blx	r3
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	2b06      	cmp	r3, #6
 800411e:	d00a      	beq.n	8004136 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d001      	beq.n	8004132 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e040      	b.n	80041b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e03e      	b.n	80041b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004136:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800413e:	491f      	ldr	r1, [pc, #124]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4313      	orrs	r3, r2
 8004144:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004146:	f7fd f89b 	bl	8001280 <HAL_GetTick>
 800414a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800414c:	e009      	b.n	8004162 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800414e:	f7fd f897 	bl	8001280 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800415c:	d901      	bls.n	8004162 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e028      	b.n	80041b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	d1ee      	bne.n	800414e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b1e      	cmp	r3, #30
 8004174:	d008      	beq.n	8004188 <HAL_PWREx_ConfigSupply+0x7c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b2e      	cmp	r3, #46	; 0x2e
 800417a:	d005      	beq.n	8004188 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b1d      	cmp	r3, #29
 8004180:	d002      	beq.n	8004188 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b2d      	cmp	r3, #45	; 0x2d
 8004186:	d114      	bne.n	80041b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004188:	f7fd f87a 	bl	8001280 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800418e:	e009      	b.n	80041a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004190:	f7fd f876 	bl	8001280 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800419e:	d901      	bls.n	80041a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e007      	b.n	80041b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PWREx_ConfigSupply+0xb0>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d1ee      	bne.n	8004190 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	58024800 	.word	0x58024800

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f000 bc48 	b.w	8004a64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8088 	beq.w	80042f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e2:	4b99      	ldr	r3, [pc, #612]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ec:	4b96      	ldr	r3, [pc, #600]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d007      	beq.n	8004208 <HAL_RCC_OscConfig+0x48>
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2b18      	cmp	r3, #24
 80041fc:	d111      	bne.n	8004222 <HAL_RCC_OscConfig+0x62>
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	4b8f      	ldr	r3, [pc, #572]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d06d      	beq.n	80042f0 <HAL_RCC_OscConfig+0x130>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d169      	bne.n	80042f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f000 bc21 	b.w	8004a64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x7a>
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a85      	ldr	r2, [pc, #532]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e02e      	b.n	8004298 <HAL_RCC_OscConfig+0xd8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x9c>
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b7e      	ldr	r3, [pc, #504]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7d      	ldr	r2, [pc, #500]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e01d      	b.n	8004298 <HAL_RCC_OscConfig+0xd8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0xc0>
 8004266:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b75      	ldr	r3, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0xd8>
 8004280:	4b71      	ldr	r3, [pc, #452]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a70      	ldr	r2, [pc, #448]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b6e      	ldr	r3, [pc, #440]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6d      	ldr	r2, [pc, #436]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc ffee 	bl	8001280 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fc ffea 	bl	8001280 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e3d4      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fc ffda 	bl	8001280 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fc ffd6 	bl	8001280 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e3c0      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042e2:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x110>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80ca 	beq.w	8004494 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004300:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004308:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800430a:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_RCC_OscConfig+0x166>
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2b18      	cmp	r3, #24
 800431a:	d156      	bne.n	80043ca <HAL_RCC_OscConfig+0x20a>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d151      	bne.n	80043ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004326:	4b48      	ldr	r3, [pc, #288]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e392      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 0219 	bic.w	r2, r3, #25
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	493f      	ldr	r1, [pc, #252]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fc ff96 	bl	8001280 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fc ff92 	bl	8001280 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e37c      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	f7fc ffb3 	bl	80012e0 <HAL_GetREVID>
 800437a:	4603      	mov	r3, r0
 800437c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004380:	4293      	cmp	r3, r2
 8004382:	d817      	bhi.n	80043b4 <HAL_RCC_OscConfig+0x1f4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d108      	bne.n	800439e <HAL_RCC_OscConfig+0x1de>
 800438c:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004394:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439c:	e07a      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	4926      	ldr	r1, [pc, #152]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b2:	e06f      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	4921      	ldr	r1, [pc, #132]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c8:	e064      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d047      	beq.n	8004462 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0219 	bic.w	r2, r3, #25
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	491a      	ldr	r1, [pc, #104]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fc ff4c 	bl	8001280 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fc ff48 	bl	8001280 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e332      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	f7fc ff69 	bl	80012e0 <HAL_GetREVID>
 800440e:	4603      	mov	r3, r0
 8004410:	f241 0203 	movw	r2, #4099	; 0x1003
 8004414:	4293      	cmp	r3, r2
 8004416:	d819      	bhi.n	800444c <HAL_RCC_OscConfig+0x28c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d108      	bne.n	8004432 <HAL_RCC_OscConfig+0x272>
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004428:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	6053      	str	r3, [r2, #4]
 8004430:	e030      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	031b      	lsls	r3, r3, #12
 8004440:	4901      	ldr	r1, [pc, #4]	; (8004448 <HAL_RCC_OscConfig+0x288>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 8004446:	e025      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
 8004448:	58024400 	.word	0x58024400
 800444c:	4b9a      	ldr	r3, [pc, #616]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	4997      	ldr	r1, [pc, #604]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	e018      	b.n	8004494 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b95      	ldr	r3, [pc, #596]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a94      	ldr	r2, [pc, #592]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fc ff07 	bl	8001280 <HAL_GetTick>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004476:	f7fc ff03 	bl	8001280 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e2ed      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004488:	4b8b      	ldr	r3, [pc, #556]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80a9 	beq.w	80045f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ac:	4b82      	ldr	r3, [pc, #520]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d007      	beq.n	80044c8 <HAL_RCC_OscConfig+0x308>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b18      	cmp	r3, #24
 80044bc:	d13a      	bne.n	8004534 <HAL_RCC_OscConfig+0x374>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d135      	bne.n	8004534 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044c8:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x320>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e2c1      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044e0:	f7fc fefe 	bl	80012e0 <HAL_GetREVID>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d817      	bhi.n	800451e <HAL_RCC_OscConfig+0x35e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d108      	bne.n	8004508 <HAL_RCC_OscConfig+0x348>
 80044f6:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044fe:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004504:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004506:	e075      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004508:	4b6b      	ldr	r3, [pc, #428]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	069b      	lsls	r3, r3, #26
 8004516:	4968      	ldr	r1, [pc, #416]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800451c:	e06a      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800451e:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	4962      	ldr	r1, [pc, #392]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004532:	e05f      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d042      	beq.n	80045c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800453c:	4b5e      	ldr	r3, [pc, #376]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5d      	ldr	r2, [pc, #372]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fc fe9a 	bl	8001280 <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004550:	f7fc fe96 	bl	8001280 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e280      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004562:	4b55      	ldr	r3, [pc, #340]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800456e:	f7fc feb7 	bl	80012e0 <HAL_GetREVID>
 8004572:	4603      	mov	r3, r0
 8004574:	f241 0203 	movw	r2, #4099	; 0x1003
 8004578:	4293      	cmp	r3, r2
 800457a:	d817      	bhi.n	80045ac <HAL_RCC_OscConfig+0x3ec>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	2b20      	cmp	r3, #32
 8004582:	d108      	bne.n	8004596 <HAL_RCC_OscConfig+0x3d6>
 8004584:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800458e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	e02e      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
 8004596:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	4944      	ldr	r1, [pc, #272]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
 80045aa:	e023      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
 80045ac:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	493f      	ldr	r1, [pc, #252]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	60cb      	str	r3, [r1, #12]
 80045c0:	e018      	b.n	80045f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fc fe57 	bl	8001280 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045d6:	f7fc fe53 	bl	8001280 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e23d      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045e8:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d036      	beq.n	800466e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d019      	beq.n	800463c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800460a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460c:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fc fe34 	bl	8001280 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461c:	f7fc fe30 	bl	8001280 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e21a      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x45c>
 800463a:	e018      	b.n	800466e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fc fe1a 	bl	8001280 <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004650:	f7fc fe16 	bl	8001280 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e200      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d039      	beq.n	80046ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01c      	beq.n	80046bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 8004688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800468c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800468e:	f7fc fdf7 	bl	8001280 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004696:	f7fc fdf3 	bl	8001280 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1dd      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <HAL_RCC_OscConfig+0x4f8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x4d6>
 80046b4:	e01b      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
 80046b6:	bf00      	nop
 80046b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046bc:	4b9b      	ldr	r3, [pc, #620]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a9a      	ldr	r2, [pc, #616]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80046c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046c8:	f7fc fdda 	bl	8001280 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d0:	f7fc fdd6 	bl	8001280 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1c0      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046e2:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8081 	beq.w	80047fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046fc:	4b8c      	ldr	r3, [pc, #560]	; (8004930 <HAL_RCC_OscConfig+0x770>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a8b      	ldr	r2, [pc, #556]	; (8004930 <HAL_RCC_OscConfig+0x770>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004708:	f7fc fdba 	bl	8001280 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004710:	f7fc fdb6 	bl	8001280 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1a0      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCC_OscConfig+0x770>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x584>
 8004736:	4b7d      	ldr	r3, [pc, #500]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a7c      	ldr	r2, [pc, #496]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	e02d      	b.n	80047a0 <HAL_RCC_OscConfig+0x5e0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_OscConfig+0x5a6>
 800474c:	4b77      	ldr	r3, [pc, #476]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	4a76      	ldr	r2, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6713      	str	r3, [r2, #112]	; 0x70
 8004758:	4b74      	ldr	r3, [pc, #464]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a73      	ldr	r2, [pc, #460]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800475e:	f023 0304 	bic.w	r3, r3, #4
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	e01c      	b.n	80047a0 <HAL_RCC_OscConfig+0x5e0>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b05      	cmp	r3, #5
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c8>
 800476e:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004774:	f043 0304 	orr.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
 800477a:	4b6c      	ldr	r3, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a6b      	ldr	r2, [pc, #428]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0x5e0>
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	4a67      	ldr	r2, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6713      	str	r3, [r2, #112]	; 0x70
 8004794:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4a64      	ldr	r2, [pc, #400]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800479a:	f023 0304 	bic.w	r3, r3, #4
 800479e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fc fd6a 	bl	8001280 <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fc fd66 	bl	8001280 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e14e      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c6:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <HAL_RCC_OscConfig+0x5f0>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fc fd54 	bl	8001280 <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fc fd50 	bl	8001280 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e138      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047f2:	4b4e      	ldr	r3, [pc, #312]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ee      	bne.n	80047dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 812d 	beq.w	8004a62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004808:	4b48      	ldr	r3, [pc, #288]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004810:	2b18      	cmp	r3, #24
 8004812:	f000 80bd 	beq.w	8004990 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b02      	cmp	r3, #2
 800481c:	f040 809e 	bne.w	800495c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b42      	ldr	r3, [pc, #264]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a41      	ldr	r2, [pc, #260]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fc fd28 	bl	8001280 <HAL_GetTick>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fc fd24 	bl	8001280 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e10e      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <HAL_RCC_OscConfig+0x774>)
 8004858:	4013      	ands	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	430a      	orrs	r2, r1
 8004866:	4931      	ldr	r1, [pc, #196]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004868:	4313      	orrs	r3, r2
 800486a:	628b      	str	r3, [r1, #40]	; 0x28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	3b01      	subs	r3, #1
 8004872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	3b01      	subs	r3, #1
 800487c:	025b      	lsls	r3, r3, #9
 800487e:	b29b      	uxth	r3, r3
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	3b01      	subs	r3, #1
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800489c:	4923      	ldr	r1, [pc, #140]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_RCC_OscConfig+0x778>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048c2:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f023 020c 	bic.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4917      	ldr	r1, [pc, #92]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048d4:	4b15      	ldr	r3, [pc, #84]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	f023 0202 	bic.w	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	4912      	ldr	r1, [pc, #72]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f2:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	4a07      	ldr	r2, [pc, #28]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_RCC_OscConfig+0x76c>)
 800491c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fc fcad 	bl	8001280 <HAL_GetTick>
 8004926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004928:	e011      	b.n	800494e <HAL_RCC_OscConfig+0x78e>
 800492a:	bf00      	nop
 800492c:	58024400 	.word	0x58024400
 8004930:	58024800 	.word	0x58024800
 8004934:	fffffc0c 	.word	0xfffffc0c
 8004938:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fc fca0 	bl	8001280 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e08a      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x77c>
 800495a:	e082      	b.n	8004a62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a42      	ldr	r2, [pc, #264]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fc fc8a 	bl	8001280 <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fc fc86 	bl	8001280 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e070      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004982:	4b3a      	ldr	r3, [pc, #232]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x7b0>
 800498e:	e068      	b.n	8004a62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004996:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d031      	beq.n	8004a08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f003 0203 	and.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d12a      	bne.n	8004a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d122      	bne.n	8004a08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11a      	bne.n	8004a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d111      	bne.n	8004a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	0e1b      	lsrs	r3, r3, #24
 80049fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e02b      	b.n	8004a64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d01f      	beq.n	8004a62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a2e:	f7fc fc27 	bl	8001280 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a34:	bf00      	nop
 8004a36:	f7fc fc23 	bl	8001280 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d0f9      	beq.n	8004a36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_OscConfig+0x8b0>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a4e:	00d2      	lsls	r2, r2, #3
 8004a50:	4906      	ldr	r1, [pc, #24]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_RCC_OscConfig+0x8ac>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3730      	adds	r7, #48	; 0x30
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	ffff0007 	.word	0xffff0007

08004a74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e19c      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d910      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 020f 	bic.w	r2, r3, #15
 8004a9e:	4985      	ldr	r1, [pc, #532]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b83      	ldr	r3, [pc, #524]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e184      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d908      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ad4:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	4975      	ldr	r1, [pc, #468]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	4b70      	ldr	r3, [pc, #448]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d908      	bls.n	8004b14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b02:	4b6d      	ldr	r3, [pc, #436]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	496a      	ldr	r1, [pc, #424]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699a      	ldr	r2, [r3, #24]
 8004b24:	4b64      	ldr	r3, [pc, #400]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d908      	bls.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b30:	4b61      	ldr	r3, [pc, #388]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	495e      	ldr	r1, [pc, #376]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d010      	beq.n	8004b70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d908      	bls.n	8004b70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b5e:	4b56      	ldr	r3, [pc, #344]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4953      	ldr	r1, [pc, #332]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d010      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d908      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b4a      	ldr	r3, [pc, #296]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f023 020f 	bic.w	r2, r3, #15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4947      	ldr	r1, [pc, #284]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d055      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004baa:	4b43      	ldr	r3, [pc, #268]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4940      	ldr	r1, [pc, #256]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc4:	4b3c      	ldr	r3, [pc, #240]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d121      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0f6      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bdc:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d115      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0ea      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0de      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0d6      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f023 0207 	bic.w	r2, r3, #7
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4925      	ldr	r1, [pc, #148]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fc fb2b 	bl	8001280 <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2c:	e00a      	b.n	8004c44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2e:	f7fc fb27 	bl	8001280 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0be      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c44:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d1eb      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d208      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f023 020f 	bic.w	r2, r3, #15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d214      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 020f 	bic.w	r2, r3, #15
 8004c9a:	4906      	ldr	r1, [pc, #24]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <HAL_RCC_ClockConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e086      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x34e>
 8004cb4:	52002000 	.word	0x52002000
 8004cb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d208      	bcs.n	8004cea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cd8:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	4939      	ldr	r1, [pc, #228]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d208      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d06:	4b31      	ldr	r3, [pc, #196]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	492e      	ldr	r1, [pc, #184]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d208      	bcs.n	8004d46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	4922      	ldr	r1, [pc, #136]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d208      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4917      	ldr	r1, [pc, #92]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d74:	f000 f834 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	4912      	ldr	r1, [pc, #72]	; (8004dd0 <HAL_RCC_ClockConfig+0x35c>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_RCC_ClockConfig+0x358>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	4a0d      	ldr	r2, [pc, #52]	; (8004dd0 <HAL_RCC_ClockConfig+0x35c>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <HAL_RCC_ClockConfig+0x360>)
 8004daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dac:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <HAL_RCC_ClockConfig+0x364>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x368>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fa18 	bl	80011ec <HAL_InitTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	08008528 	.word	0x08008528
 8004dd4:	24000004 	.word	0x24000004
 8004dd8:	24000000 	.word	0x24000000
 8004ddc:	24000008 	.word	0x24000008

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de6:	4bb3      	ldr	r3, [pc, #716]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dee:	2b18      	cmp	r3, #24
 8004df0:	f200 8155 	bhi.w	800509e <HAL_RCC_GetSysClockFreq+0x2be>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	0800509f 	.word	0x0800509f
 8004e04:	0800509f 	.word	0x0800509f
 8004e08:	0800509f 	.word	0x0800509f
 8004e0c:	0800509f 	.word	0x0800509f
 8004e10:	0800509f 	.word	0x0800509f
 8004e14:	0800509f 	.word	0x0800509f
 8004e18:	0800509f 	.word	0x0800509f
 8004e1c:	08004e87 	.word	0x08004e87
 8004e20:	0800509f 	.word	0x0800509f
 8004e24:	0800509f 	.word	0x0800509f
 8004e28:	0800509f 	.word	0x0800509f
 8004e2c:	0800509f 	.word	0x0800509f
 8004e30:	0800509f 	.word	0x0800509f
 8004e34:	0800509f 	.word	0x0800509f
 8004e38:	0800509f 	.word	0x0800509f
 8004e3c:	08004e8d 	.word	0x08004e8d
 8004e40:	0800509f 	.word	0x0800509f
 8004e44:	0800509f 	.word	0x0800509f
 8004e48:	0800509f 	.word	0x0800509f
 8004e4c:	0800509f 	.word	0x0800509f
 8004e50:	0800509f 	.word	0x0800509f
 8004e54:	0800509f 	.word	0x0800509f
 8004e58:	0800509f 	.word	0x0800509f
 8004e5c:	08004e93 	.word	0x08004e93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e60:	4b94      	ldr	r3, [pc, #592]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e6c:	4b91      	ldr	r3, [pc, #580]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	4a90      	ldr	r2, [pc, #576]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e7e:	e111      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e80:	4b8d      	ldr	r3, [pc, #564]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e82:	61bb      	str	r3, [r7, #24]
      break;
 8004e84:	e10e      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e86:	4b8d      	ldr	r3, [pc, #564]	; (80050bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e88:	61bb      	str	r3, [r7, #24]
      break;
 8004e8a:	e10b      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e8c:	4b8c      	ldr	r3, [pc, #560]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e8e:	61bb      	str	r3, [r7, #24]
      break;
 8004e90:	e108      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e92:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e9c:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ea8:	4b82      	ldr	r3, [pc, #520]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004eb2:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80e1 	beq.w	8005098 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f000 8083 	beq.w	8004fe4 <HAL_RCC_GetSysClockFreq+0x204>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f200 80a1 	bhi.w	8005028 <HAL_RCC_GetSysClockFreq+0x248>
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x114>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d056      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ef2:	e099      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f00:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	4a6b      	ldr	r2, [pc, #428]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b62      	ldr	r3, [pc, #392]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f5a:	e087      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b51      	ldr	r3, [pc, #324]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f82:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f9e:	e065      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b40      	ldr	r3, [pc, #256]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fe2:	e043      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a02 	vldr	s12, [r7, #8]
 800500a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005026:	e021      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a02 	vldr	s12, [r7, #8]
 800504e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800506a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005076:	3301      	adds	r3, #1
 8005078:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005084:	edd7 6a07 	vldr	s13, [r7, #28]
 8005088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005090:	ee17 3a90 	vmov	r3, s15
 8005094:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005096:	e005      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
      break;
 800509c:	e002      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050a0:	61bb      	str	r3, [r7, #24]
      break;
 80050a2:	bf00      	nop
  }

  return sysclockfreq;
 80050a4:	69bb      	ldr	r3, [r7, #24]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	003d0900 	.word	0x003d0900
 80050c0:	017d7840 	.word	0x017d7840
 80050c4:	46000000 	.word	0x46000000
 80050c8:	4c742400 	.word	0x4c742400
 80050cc:	4a742400 	.word	0x4a742400
 80050d0:	4bbebc20 	.word	0x4bbebc20

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050da:	f7ff fe81 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4b10      	ldr	r3, [pc, #64]	; (8005124 <HAL_RCC_GetHCLKFreq+0x50>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	490f      	ldr	r1, [pc, #60]	; (8005128 <HAL_RCC_GetHCLKFreq+0x54>)
 80050ec:	5ccb      	ldrb	r3, [r1, r3]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <HAL_RCC_GetHCLKFreq+0x50>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_GetHCLKFreq+0x54>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <HAL_RCC_GetHCLKFreq+0x58>)
 8005110:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005112:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <HAL_RCC_GetHCLKFreq+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	58024400 	.word	0x58024400
 8005128:	08008528 	.word	0x08008528
 800512c:	24000004 	.word	0x24000004
 8005130:	24000000 	.word	0x24000000

08005134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005138:	f7ff ffcc 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_RCC_GetPCLK1Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	08008528 	.word	0x08008528

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b0cc      	sub	sp, #304	; 0x130
 8005166:	af00      	add	r7, sp, #0
 8005168:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800516c:	2300      	movs	r3, #0
 800516e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005172:	2300      	movs	r3, #0
 8005174:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005178:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005184:	2500      	movs	r5, #0
 8005186:	ea54 0305 	orrs.w	r3, r4, r5
 800518a:	d049      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800518c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005196:	d02f      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800519c:	d828      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800519e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a2:	d01a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a8:	d822      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d007      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051b4:	e01c      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4bb8      	ldr	r3, [pc, #736]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4ab7      	ldr	r2, [pc, #732]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051c2:	e01a      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051c8:	3308      	adds	r3, #8
 80051ca:	2102      	movs	r1, #2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 fba1 	bl	8007914 <RCCEx_PLL2_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051d8:	e00f      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051de:	3328      	adds	r3, #40	; 0x28
 80051e0:	2102      	movs	r1, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fc48 	bl	8007a78 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051ee:	e004      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005202:	4ba5      	ldr	r3, [pc, #660]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800520a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	4aa1      	ldr	r2, [pc, #644]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005212:	430b      	orrs	r3, r1
 8005214:	6513      	str	r3, [r2, #80]	; 0x50
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800521c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800522c:	f04f 0900 	mov.w	r9, #0
 8005230:	ea58 0309 	orrs.w	r3, r8, r9
 8005234:	d047      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	2b04      	cmp	r3, #4
 800523e:	d82a      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800525d 	.word	0x0800525d
 800524c:	0800526b 	.word	0x0800526b
 8005250:	08005281 	.word	0x08005281
 8005254:	0800529f 	.word	0x0800529f
 8005258:	0800529f 	.word	0x0800529f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525c:	4b8e      	ldr	r3, [pc, #568]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a8d      	ldr	r2, [pc, #564]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005268:	e01a      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800526e:	3308      	adds	r3, #8
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f002 fb4e 	bl	8007914 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800527e:	e00f      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005280:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fbf5 	bl	8007a78 <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005294:	e004      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800529c:	e000      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800529e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a8:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	f023 0107 	bic.w	r1, r3, #7
 80052b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	4a78      	ldr	r2, [pc, #480]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6513      	str	r3, [r2, #80]	; 0x50
 80052bc:	e003      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052d2:	f04f 0b00 	mov.w	fp, #0
 80052d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80052da:	d04c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e6:	d030      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ec:	d829      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ee:	2bc0      	cmp	r3, #192	; 0xc0
 80052f0:	d02d      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052f2:	2bc0      	cmp	r3, #192	; 0xc0
 80052f4:	d825      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d018      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d821      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d007      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005306:	e01c      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a62      	ldr	r2, [pc, #392]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005314:	e01c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800531a:	3308      	adds	r3, #8
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f002 faf8 	bl	8007914 <RCCEx_PLL2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005330:	3328      	adds	r3, #40	; 0x28
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f002 fb9f 	bl	8007a78 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800534e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005350:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005358:	4b4f      	ldr	r3, [pc, #316]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005360:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005366:	4a4c      	ldr	r2, [pc, #304]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6513      	str	r3, [r2, #80]	; 0x50
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005372:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800538c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d053      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800539a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800539e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a2:	d035      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a8:	d82e      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053ae:	d031      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053b4:	d828      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ba:	d01a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c0:	d822      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ca:	d007      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053cc:	e01c      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ce:	4b32      	ldr	r3, [pc, #200]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053da:	e01c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053e0:	3308      	adds	r3, #8
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fa95 	bl	8007914 <RCCEx_PLL2_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053f0:	e011      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053f6:	3328      	adds	r3, #40	; 0x28
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 fb3c 	bl	8007a78 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005406:	e006      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005416:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800542a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800542e:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800543a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800543e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800544a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005454:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005458:	460b      	mov	r3, r1
 800545a:	4313      	orrs	r3, r2
 800545c:	d056      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546a:	d038      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800546c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005470:	d831      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005476:	d034      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800547c:	d82b      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800547e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005482:	d01d      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005488:	d825      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800548e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005494:	e01f      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549c:	4ba2      	ldr	r3, [pc, #648]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4aa1      	ldr	r2, [pc, #644]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a8:	e01c      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ae:	3308      	adds	r3, #8
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 fa2e 	bl	8007914 <RCCEx_PLL2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054be:	e011      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054c4:	3328      	adds	r3, #40	; 0x28
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 fad5 	bl	8007a78 <RCCEx_PLL3_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054ec:	4b8e      	ldr	r3, [pc, #568]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fc:	4a8a      	ldr	r2, [pc, #552]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	6593      	str	r3, [r2, #88]	; 0x58
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005508:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800550c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005522:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800552c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d01f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005536:	2b30      	cmp	r3, #48	; 0x30
 8005538:	d819      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d00c      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d815      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005546:	2b10      	cmp	r3, #16
 8005548:	d111      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4b77      	ldr	r3, [pc, #476]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800555c:	3308      	adds	r3, #8
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f002 f9d7 	bl	8007914 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800557a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005584:	4b68      	ldr	r3, [pc, #416]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800558c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005594:	430b      	orrs	r3, r1
 8005596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800559e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055b8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80055bc:	460b      	mov	r3, r1
 80055be:	4313      	orrs	r3, r2
 80055c0:	d051      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055cc:	d035      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d82e      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d8:	d031      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055de:	d828      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e4:	d01a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d822      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d007      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055f6:	e01c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a4a      	ldr	r2, [pc, #296]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005604:	e01c      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800560a:	3308      	adds	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f002 f980 	bl	8007914 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800561c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005620:	3328      	adds	r3, #40	; 0x28
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f002 fa27 	bl	8007a78 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6513      	str	r3, [r2, #80]	; 0x50
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005662:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800567c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d056      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005686:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d033      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005696:	d82c      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569c:	d02f      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800569e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a2:	d826      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a8:	d02b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80056aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ae:	d820      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b4:	d012      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ba:	d81a      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d115      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ca:	3308      	adds	r3, #8
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 f920 	bl	8007914 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056da:	e015      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056e0:	3328      	adds	r3, #40	; 0x28
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f002 f9c7 	bl	8007a78 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800571c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571e:	4a02      	ldr	r2, [pc, #8]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	; 0x50
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005730:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800574a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d055      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005760:	d033      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005766:	d82c      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d02f      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d826      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005778:	d02b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800577a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800577e:	d820      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005784:	d012      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578a:	d81a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d022      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005794:	d115      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800579a:	3308      	adds	r3, #8
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 f8b8 	bl	8007914 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057aa:	e015      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057b0:	3328      	adds	r3, #40	; 0x28
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 f95f 	bl	8007a78 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80057c8:	e006      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ca:	bf00      	nop
 80057cc:	e004      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057e0:	4bb6      	ldr	r3, [pc, #728]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057f0:	4ab2      	ldr	r2, [pc, #712]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800580c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005816:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d02a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d011      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d10a      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005834:	3308      	adds	r3, #8
 8005836:	2101      	movs	r1, #1
 8005838:	4618      	mov	r0, r3
 800583a:	f002 f86b 	bl	8007914 <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005844:	e004      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800584c:	e000      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800584e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005850:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005858:	4b98      	ldr	r3, [pc, #608]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	4a95      	ldr	r2, [pc, #596]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005868:	430b      	orrs	r3, r1
 800586a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005872:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005886:	2300      	movs	r3, #0
 8005888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800588c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d037      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800589a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a0:	d00e      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80058a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a6:	d816      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d018      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b0:	d111      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b2:	4b82      	ldr	r3, [pc, #520]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	4a81      	ldr	r2, [pc, #516]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058be:	e00f      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058c4:	3308      	adds	r3, #8
 80058c6:	2101      	movs	r1, #1
 80058c8:	4618      	mov	r0, r3
 80058ca:	f002 f823 	bl	8007914 <RCCEx_PLL2_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058d4:	e004      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80058de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058e8:	4b74      	ldr	r3, [pc, #464]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	4a71      	ldr	r2, [pc, #452]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6513      	str	r3, [r2, #80]	; 0x50
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005902:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005912:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800591c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d03a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592c:	2b03      	cmp	r3, #3
 800592e:	d81d      	bhi.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	08005975 	.word	0x08005975
 800593c:	08005949 	.word	0x08005949
 8005940:	08005957 	.word	0x08005957
 8005944:	08005975 	.word	0x08005975
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005948:	4b5c      	ldr	r3, [pc, #368]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a5b      	ldr	r2, [pc, #364]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800594e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005954:	e00f      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800595a:	3308      	adds	r3, #8
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 ffd8 	bl	8007914 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800596a:	e004      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005972:	e000      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005976:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800597e:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005982:	f023 0103 	bic.w	r1, r3, #3
 8005986:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	4a4b      	ldr	r2, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800598e:	430b      	orrs	r3, r1
 8005990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005992:	e003      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005998:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800599c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80059a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f000 80a0 	beq.w	8005afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059be:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80059c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ca:	f7fb fc59 	bl	8001280 <HAL_GetTick>
 80059ce:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d2:	e00b      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d4:	f7fb fc54 	bl	8001280 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d903      	bls.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80059ea:	e005      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ec:	4b34      	ldr	r3, [pc, #208]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ed      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80059f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d17a      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a00:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a0c:	4053      	eors	r3, r2
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a16:	4b29      	ldr	r3, [pc, #164]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a22:	4b26      	ldr	r3, [pc, #152]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a22      	ldr	r2, [pc, #136]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d118      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fb fc16 	bl	8001280 <HAL_GetTick>
 8005a54:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a58:	e00d      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fb fc11 	bl	8001280 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d903      	bls.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8005a74:	e005      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0eb      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d130      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9a:	d115      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005a9c:	4b07      	ldr	r3, [pc, #28]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005aac:	091a      	lsrs	r2, r3, #4
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	4a02      	ldr	r2, [pc, #8]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6113      	str	r3, [r2, #16]
 8005ab8:	e00c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	58024800 	.word	0x58024800
 8005ac4:	00ffffcf 	.word	0x00ffffcf
 8005ac8:	4bd4      	ldr	r3, [pc, #848]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4ad3      	ldr	r2, [pc, #844]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ace:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ad2:	6113      	str	r3, [r2, #16]
 8005ad4:	4bd1      	ldr	r3, [pc, #836]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ad6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae4:	4acd      	ldr	r2, [pc, #820]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	e008      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005af0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005afa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f002 0301 	and.w	r3, r2, #1
 8005b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f000 808b 	beq.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b28:	2b28      	cmp	r3, #40	; 0x28
 8005b2a:	d86b      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005c0d 	.word	0x08005c0d
 8005b38:	08005c05 	.word	0x08005c05
 8005b3c:	08005c05 	.word	0x08005c05
 8005b40:	08005c05 	.word	0x08005c05
 8005b44:	08005c05 	.word	0x08005c05
 8005b48:	08005c05 	.word	0x08005c05
 8005b4c:	08005c05 	.word	0x08005c05
 8005b50:	08005c05 	.word	0x08005c05
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005c05 	.word	0x08005c05
 8005b5c:	08005c05 	.word	0x08005c05
 8005b60:	08005c05 	.word	0x08005c05
 8005b64:	08005c05 	.word	0x08005c05
 8005b68:	08005c05 	.word	0x08005c05
 8005b6c:	08005c05 	.word	0x08005c05
 8005b70:	08005c05 	.word	0x08005c05
 8005b74:	08005bef 	.word	0x08005bef
 8005b78:	08005c05 	.word	0x08005c05
 8005b7c:	08005c05 	.word	0x08005c05
 8005b80:	08005c05 	.word	0x08005c05
 8005b84:	08005c05 	.word	0x08005c05
 8005b88:	08005c05 	.word	0x08005c05
 8005b8c:	08005c05 	.word	0x08005c05
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c0d 	.word	0x08005c0d
 8005b98:	08005c05 	.word	0x08005c05
 8005b9c:	08005c05 	.word	0x08005c05
 8005ba0:	08005c05 	.word	0x08005c05
 8005ba4:	08005c05 	.word	0x08005c05
 8005ba8:	08005c05 	.word	0x08005c05
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c05 	.word	0x08005c05
 8005bbc:	08005c05 	.word	0x08005c05
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c05 	.word	0x08005c05
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005c05 	.word	0x08005c05
 8005bd0:	08005c05 	.word	0x08005c05
 8005bd4:	08005c0d 	.word	0x08005c0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bdc:	3308      	adds	r3, #8
 8005bde:	2101      	movs	r1, #1
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 fe97 	bl	8007914 <RCCEx_PLL2_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005bec:	e00f      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bf2:	3328      	adds	r3, #40	; 0x28
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 ff3e 	bl	8007a78 <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c02:	e004      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c16:	4b81      	ldr	r3, [pc, #516]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c26:	4a7d      	ldr	r2, [pc, #500]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6553      	str	r3, [r2, #84]	; 0x54
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f002 0302 	and.w	r3, r2, #2
 8005c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d042      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d825      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005cb5 	.word	0x08005cb5
 8005c6c:	08005c81 	.word	0x08005c81
 8005c70:	08005c97 	.word	0x08005c97
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005cb5 	.word	0x08005cb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c84:	3308      	adds	r3, #8
 8005c86:	2101      	movs	r1, #1
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fe43 	bl	8007914 <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c9a:	3328      	adds	r3, #40	; 0x28
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 feea 	bl	8007a78 <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005caa:	e004      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005cbe:	4b57      	ldr	r3, [pc, #348]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f023 0107 	bic.w	r1, r3, #7
 8005cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ccc:	4a53      	ldr	r2, [pc, #332]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6553      	str	r3, [r2, #84]	; 0x54
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f002 0304 	and.w	r3, r2, #4
 8005ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d044      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	d825      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d29 	.word	0x08005d29
 8005d18:	08005d3f 	.word	0x08005d3f
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	2101      	movs	r1, #1
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fdef 	bl	8007914 <RCCEx_PLL2_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d42:	3328      	adds	r3, #40	; 0x28
 8005d44:	2101      	movs	r1, #1
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fe96 	bl	8007a78 <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	f023 0107 	bic.w	r1, r3, #7
 8005d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d76:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7c:	e003      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d82:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f002 0320 	and.w	r3, r2, #32
 8005d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d96:	2300      	movs	r3, #0
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005da0:	460b      	mov	r3, r1
 8005da2:	4313      	orrs	r3, r2
 8005da4:	d057      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db2:	d035      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db8:	d82c      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbe:	d031      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d826      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dca:	d02d      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dd0:	d820      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd6:	d012      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ddc:	d81a      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d024      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de6:	d115      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dec:	3308      	adds	r3, #8
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fd8f 	bl	8007914 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005dfc:	e017      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e02:	3328      	adds	r3, #40	; 0x28
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fe36 	bl	8007a78 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e12:	e00c      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e1a:	e008      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005e1c:	58024400 	.word	0x58024400
        break;
 8005e20:	bf00      	nop
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e36:	4bc2      	ldr	r3, [pc, #776]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e46:	4abe      	ldr	r2, [pc, #760]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6553      	str	r3, [r2, #84]	; 0x54
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e52:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d055      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e82:	d033      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005e84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e88:	d82c      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d02f      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d826      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e9a:	d02b      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea0:	d820      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea6:	d012      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eac:	d81a      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d022      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb6:	d115      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fd27 	bl	8007914 <RCCEx_PLL2_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e015      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed2:	3328      	adds	r3, #40	; 0x28
 8005ed4:	2102      	movs	r1, #2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fdce 	bl	8007a78 <RCCEx_PLL3_Config>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ee2:	e00a      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005eea:	e006      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005eec:	bf00      	nop
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ef0:	bf00      	nop
 8005ef2:	e002      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10b      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f02:	4b8f      	ldr	r3, [pc, #572]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f12:	4a8b      	ldr	r2, [pc, #556]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6593      	str	r3, [r2, #88]	; 0x58
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f32:	2300      	movs	r3, #0
 8005f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d055      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f4e:	d033      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005f50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f54:	d82c      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5a:	d02f      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	d826      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f66:	d02b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005f68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f6c:	d820      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f72:	d012      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f78:	d81a      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	d115      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fcc1 	bl	8007914 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f98:	e015      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f9e:	3328      	adds	r3, #40	; 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fd68 	bl	8007a78 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005fce:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fde:	4a58      	ldr	r2, [pc, #352]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f002 0308 	and.w	r3, r2, #8
 8005ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006004:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006008:	460b      	mov	r3, r1
 800600a:	4313      	orrs	r3, r2
 800600c:	d01e      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800600e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601a:	d10c      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800601c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006020:	3328      	adds	r3, #40	; 0x28
 8006022:	2102      	movs	r1, #2
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fd27 	bl	8007a78 <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006036:	4b42      	ldr	r3, [pc, #264]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800603e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800604c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f002 0310 	and.w	r3, r2, #16
 8006058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006062:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d01e      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800606c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d10c      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800607a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800607e:	3328      	adds	r3, #40	; 0x28
 8006080:	2102      	movs	r1, #2
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fcf8 	bl	8007a78 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060a4:	4a26      	ldr	r2, [pc, #152]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060a6:	430b      	orrs	r3, r1
 80060a8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80060b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80060c4:	460b      	mov	r3, r1
 80060c6:	4313      	orrs	r3, r2
 80060c8:	d040      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80060ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d6:	d022      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80060d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060dc:	d81b      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80060e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e6:	d00b      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80060e8:	e015      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ee:	3308      	adds	r3, #8
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fc0e 	bl	8007914 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060fe:	e00f      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006104:	3328      	adds	r3, #40	; 0x28
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fcb5 	bl	8007a78 <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006138:	4a01      	ldr	r2, [pc, #4]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800613a:	430b      	orrs	r3, r1
 800613c:	6593      	str	r3, [r2, #88]	; 0x58
 800613e:	e005      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006148:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006158:	67bb      	str	r3, [r7, #120]	; 0x78
 800615a:	2300      	movs	r3, #0
 800615c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800615e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800616c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006174:	d01f      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800617a:	d818      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	d003      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006186:	d007      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006188:	e011      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618a:	4b64      	ldr	r3, [pc, #400]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	4a63      	ldr	r2, [pc, #396]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006196:	e00f      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800619c:	3328      	adds	r3, #40	; 0x28
 800619e:	2101      	movs	r1, #1
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fc69 	bl	8007a78 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80061ac:	e004      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061c0:	4b56      	ldr	r3, [pc, #344]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80061c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d0:	4a52      	ldr	r2, [pc, #328]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	; 0x54
 80061d6:	e003      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80061ec:	673b      	str	r3, [r7, #112]	; 0x70
 80061ee:	2300      	movs	r3, #0
 80061f0:	677b      	str	r3, [r7, #116]	; 0x74
 80061f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d031      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80061fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d007      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800620c:	e011      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620e:	4b43      	ldr	r3, [pc, #268]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	4a42      	ldr	r2, [pc, #264]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800621a:	e00e      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800621c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006220:	3308      	adds	r3, #8
 8006222:	2102      	movs	r1, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fb75 	bl	8007914 <RCCEx_PLL2_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006230:	e003      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006242:	4b36      	ldr	r3, [pc, #216]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800624a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	4a32      	ldr	r2, [pc, #200]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006252:	430b      	orrs	r3, r1
 8006254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800625c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800626c:	66bb      	str	r3, [r7, #104]	; 0x68
 800626e:	2300      	movs	r3, #0
 8006270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006272:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d00c      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800627c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006280:	3328      	adds	r3, #40	; 0x28
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fbf7 	bl	8007a78 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062a2:	663b      	str	r3, [r7, #96]	; 0x60
 80062a4:	2300      	movs	r3, #0
 80062a6:	667b      	str	r3, [r7, #100]	; 0x64
 80062a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80062ac:	460b      	mov	r3, r1
 80062ae:	4313      	orrs	r3, r2
 80062b0:	d03a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062be:	d018      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80062c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c4:	d811      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80062c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ca:	d014      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80062cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d0:	d80b      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80062d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062da:	d106      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	4a0e      	ldr	r2, [pc, #56]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80062e8:	e008      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80062fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10d      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800630c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006314:	4a01      	ldr	r2, [pc, #4]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6553      	str	r3, [r2, #84]	; 0x54
 800631a:	e005      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800631c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006324:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006334:	65bb      	str	r3, [r7, #88]	; 0x58
 8006336:	2300      	movs	r3, #0
 8006338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	d009      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006344:	4baa      	ldr	r3, [pc, #680]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800634c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006352:	4aa7      	ldr	r2, [pc, #668]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
 8006366:	2300      	movs	r3, #0
 8006368:	657b      	str	r3, [r7, #84]	; 0x54
 800636a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800636e:	460b      	mov	r3, r1
 8006370:	4313      	orrs	r3, r2
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006374:	4b9e      	ldr	r3, [pc, #632]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800637c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006380:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006384:	4a9a      	ldr	r2, [pc, #616]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800638a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
 8006398:	2300      	movs	r3, #0
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063a6:	4b92      	ldr	r3, [pc, #584]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80063ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	4a8e      	ldr	r2, [pc, #568]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063b6:	430b      	orrs	r3, r1
 80063b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80063c6:	643b      	str	r3, [r7, #64]	; 0x40
 80063c8:	2300      	movs	r3, #0
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063d6:	4b86      	ldr	r3, [pc, #536]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	4a85      	ldr	r2, [pc, #532]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063e0:	6113      	str	r3, [r2, #16]
 80063e2:	4b83      	ldr	r3, [pc, #524]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063e4:	6919      	ldr	r1, [r3, #16]
 80063e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063ee:	4a80      	ldr	r2, [pc, #512]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006400:	63bb      	str	r3, [r7, #56]	; 0x38
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006406:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800640a:	460b      	mov	r3, r1
 800640c:	4313      	orrs	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006410:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006414:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	4a74      	ldr	r2, [pc, #464]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006420:	430b      	orrs	r3, r1
 8006422:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800643a:	460b      	mov	r3, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006440:	4b6b      	ldr	r3, [pc, #428]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006448:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006450:	4a67      	ldr	r2, [pc, #412]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006452:	430b      	orrs	r3, r1
 8006454:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	2100      	movs	r1, #0
 8006460:	62b9      	str	r1, [r7, #40]	; 0x28
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006468:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d011      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fa4a 	bl	8007914 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006486:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006492:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006496:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	2100      	movs	r1, #0
 80064a0:	6239      	str	r1, [r7, #32]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
 80064a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d011      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b6:	3308      	adds	r3, #8
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fa2a 	bl	8007914 <RCCEx_PLL2_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80064c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	2100      	movs	r1, #0
 80064e0:	61b9      	str	r1, [r7, #24]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d011      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064f6:	3308      	adds	r3, #8
 80064f8:	2102      	movs	r1, #2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fa0a 	bl	8007914 <RCCEx_PLL2_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006506:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006512:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	2100      	movs	r1, #0
 8006520:	6139      	str	r1, [r7, #16]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d011      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006536:	3328      	adds	r3, #40	; 0x28
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fa9c 	bl	8007a78 <RCCEx_PLL3_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8006546:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006552:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	2100      	movs	r1, #0
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d011      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006576:	3328      	adds	r3, #40	; 0x28
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fa7c 	bl	8007a78 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006586:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006592:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006596:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	2100      	movs	r1, #0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d011      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065b6:	3328      	adds	r3, #40	; 0x28
 80065b8:	2102      	movs	r1, #2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fa5c 	bl	8007a78 <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80065c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80065d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80065d6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065ea:	46bd      	mov	sp, r7
 80065ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f0:	58024400 	.word	0x58024400

080065f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b090      	sub	sp, #64	; 0x40
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006602:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006606:	430b      	orrs	r3, r1
 8006608:	f040 8094 	bne.w	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800660c:	4b9e      	ldr	r3, [pc, #632]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2b04      	cmp	r3, #4
 800661a:	f200 8087 	bhi.w	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006639 	.word	0x08006639
 8006628:	08006661 	.word	0x08006661
 800662c:	08006689 	.word	0x08006689
 8006630:	08006725 	.word	0x08006725
 8006634:	080066b1 	.word	0x080066b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006638:	4b93      	ldr	r3, [pc, #588]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006644:	d108      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f810 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006654:	f000 bd45 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800665c:	f000 bd41 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006660:	4b89      	ldr	r3, [pc, #548]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666c:	d108      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666e:	f107 0318 	add.w	r3, r7, #24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fd54 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800667c:	f000 bd31 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006684:	f000 bd2d 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006688:	4b7f      	ldr	r3, [pc, #508]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006694:	d108      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006696:	f107 030c 	add.w	r3, r7, #12
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fe94 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066a4:	f000 bd1d 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ac:	f000 bd19 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066b0:	4b75      	ldr	r3, [pc, #468]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066ba:	4b73      	ldr	r3, [pc, #460]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d10c      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066cc:	4b6e      	ldr	r3, [pc, #440]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	08db      	lsrs	r3, r3, #3
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	4a6d      	ldr	r2, [pc, #436]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066de:	e01f      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066e0:	4b69      	ldr	r3, [pc, #420]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ec:	d106      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f4:	d102      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066f6:	4b66      	ldr	r3, [pc, #408]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fa:	e011      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066fc:	4b62      	ldr	r3, [pc, #392]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006708:	d106      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d102      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006712:	4b60      	ldr	r3, [pc, #384]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	e003      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800671c:	f000 bce1 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006720:	f000 bcdf 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006724:	4b5c      	ldr	r3, [pc, #368]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006728:	f000 bcdb 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006730:	f000 bcd7 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006738:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800673c:	430b      	orrs	r3, r1
 800673e:	f040 80ad 	bne.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800674a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	d056      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675a:	f200 8090 	bhi.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2bc0      	cmp	r3, #192	; 0xc0
 8006762:	f000 8088 	beq.w	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2bc0      	cmp	r3, #192	; 0xc0
 800676a:	f200 8088 	bhi.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d032      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	f200 8081 	bhi.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d014      	beq.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006788:	e079      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800678a:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006796:	d108      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679c:	4618      	mov	r0, r3
 800679e:	f000 ff67 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a6:	f000 bc9c 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ae:	f000 bc98 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067b2:	4b35      	ldr	r3, [pc, #212]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067be:	d108      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c0:	f107 0318 	add.w	r3, r7, #24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fcab 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ce:	f000 bc88 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d6:	f000 bc84 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e6:	d108      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e8:	f107 030c 	add.w	r3, r7, #12
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fdeb 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	f000 bc74 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fe:	f000 bc70 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006802:	4b21      	ldr	r3, [pc, #132]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800680a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800680c:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b04      	cmp	r3, #4
 8006816:	d10c      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	08db      	lsrs	r3, r3, #3
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	4a18      	ldr	r2, [pc, #96]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006830:	e01f      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d106      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006846:	d102      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684c:	e011      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800685a:	d106      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006862:	d102      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	e003      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800686e:	f000 bc38 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006872:	f000 bc36 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800687a:	f000 bc32 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006882:	f000 bc2e 	b.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006886:	bf00      	nop
 8006888:	58024400 	.word	0x58024400
 800688c:	03d09000 	.word	0x03d09000
 8006890:	003d0900 	.word	0x003d0900
 8006894:	017d7840 	.word	0x017d7840
 8006898:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800689c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80068a4:	430b      	orrs	r3, r1
 80068a6:	f040 809c 	bne.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80068aa:	4b9e      	ldr	r3, [pc, #632]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068ba:	d054      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068c2:	f200 808b 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068cc:	f000 8083 	beq.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068d6:	f200 8081 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e0:	d02f      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e8:	d878      	bhi.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f6:	d012      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80068f8:	e070      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fa:	4b8a      	ldr	r3, [pc, #552]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f000 feaf 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006916:	e3e4      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691c:	e3e1      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800691e:	4b81      	ldr	r3, [pc, #516]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692c:	f107 0318 	add.w	r3, r7, #24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fbf5 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693a:	e3d2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006940:	e3cf      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006942:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fd37 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800695e:	e3c0      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e3bd      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006966:	4b6f      	ldr	r3, [pc, #444]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800696e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006970:	4b6c      	ldr	r3, [pc, #432]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d10c      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006982:	4b68      	ldr	r3, [pc, #416]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	4a66      	ldr	r2, [pc, #408]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006994:	e01e      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006996:	4b63      	ldr	r3, [pc, #396]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069aa:	d102      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069ac:	4b5f      	ldr	r3, [pc, #380]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	e010      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b2:	4b5c      	ldr	r3, [pc, #368]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069c8:	4b59      	ldr	r3, [pc, #356]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069d2:	e386      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069d4:	e385      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069d6:	4b57      	ldr	r3, [pc, #348]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069da:	e382      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e37f      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80069e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80069ea:	430b      	orrs	r3, r1
 80069ec:	f040 80a7 	bne.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80069f0:	4b4c      	ldr	r3, [pc, #304]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a00:	d055      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a08:	f200 8096 	bhi.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a12:	f000 8084 	beq.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a1c:	f200 808c 	bhi.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	d030      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a2e:	f200 8083 	bhi.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a3e:	d012      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006a40:	e07a      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fe0b 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5e:	e340      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a64:	e33d      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a66:	4b2f      	ldr	r3, [pc, #188]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d107      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a74:	f107 0318 	add.w	r3, r7, #24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fb51 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a82:	e32e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a88:	e32b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a8a:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fc93 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa6:	e31c      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aac:	e319      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aae:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d10c      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aca:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	08db      	lsrs	r3, r3, #3
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006adc:	e01e      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d106      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af2:	d102      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af8:	e010      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b06:	d106      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0e:	d102      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b14:	e002      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b1a:	e2e2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b1c:	e2e1      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b22:	e2de      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	003d0900 	.word	0x003d0900
 8006b30:	017d7840 	.word	0x017d7840
 8006b34:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3c:	e2d1      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b42:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006b46:	430b      	orrs	r3, r1
 8006b48:	f040 809c 	bne.w	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b4c:	4b93      	ldr	r3, [pc, #588]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b5c:	d054      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b64:	f200 808b 	bhi.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b6e:	f000 8083 	beq.w	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b78:	f200 8081 	bhi.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d02f      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8a:	d878      	bhi.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b98:	d012      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b9a:	e070      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b9c:	4b7f      	ldr	r3, [pc, #508]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fd5e 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb8:	e293      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bbe:	e290      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bc0:	4b76      	ldr	r3, [pc, #472]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bcc:	d107      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bce:	f107 0318 	add.w	r3, r7, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 faa4 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bdc:	e281      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be2:	e27e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006be4:	4b6d      	ldr	r3, [pc, #436]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf2:	f107 030c 	add.w	r3, r7, #12
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fbe6 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c00:	e26f      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c06:	e26c      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c08:	4b64      	ldr	r3, [pc, #400]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c12:	4b62      	ldr	r3, [pc, #392]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c24:	4b5d      	ldr	r3, [pc, #372]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	4a5c      	ldr	r2, [pc, #368]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c36:	e01e      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c38:	4b58      	ldr	r3, [pc, #352]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c44:	d106      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c4e:	4b55      	ldr	r3, [pc, #340]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	e010      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c54:	4b51      	ldr	r3, [pc, #324]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c60:	d106      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d102      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c6a:	4b4f      	ldr	r3, [pc, #316]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c74:	e235      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c76:	e234      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7c:	e231      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c82:	e22e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c88:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	f040 808f 	bne.w	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c92:	4b42      	ldr	r3, [pc, #264]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca2:	d06b      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006caa:	d874      	bhi.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb2:	d056      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cba:	d86c      	bhi.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cc2:	d03b      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cca:	d864      	bhi.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd2:	d021      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cda:	d85c      	bhi.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce8:	d004      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006cea:	e054      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fe fa22 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cf2:	e1f6      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf4:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d00:	d107      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d02:	f107 0318 	add.w	r3, r7, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fa0a 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d10:	e1e7      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d16:	e1e4      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d24:	d107      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d26:	f107 030c 	add.w	r3, r7, #12
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fb4c 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d34:	e1d5      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3a:	e1d2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d109      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d5a:	e1c2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d60:	e1bf      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d62:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d74:	e1b5      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7a:	e1b2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d7c:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d88:	d102      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006d8a:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	e1a8      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d94:	e1a5      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9a:	e1a2      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	03d09000 	.word	0x03d09000
 8006da4:	003d0900 	.word	0x003d0900
 8006da8:	017d7840 	.word	0x017d7840
 8006dac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006db8:	430b      	orrs	r3, r1
 8006dba:	d173      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006dbc:	4b9c      	ldr	r3, [pc, #624]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dcc:	d02f      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd4:	d863      	bhi.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de2:	d012      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006de4:	e05b      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de6:	4b92      	ldr	r3, [pc, #584]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df2:	d107      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df4:	f107 0318 	add.w	r3, r7, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f991 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e02:	e16e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e08:	e16b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e0a:	4b89      	ldr	r3, [pc, #548]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e16:	d107      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fad3 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e26:	e15c      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2c:	e159      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e2e:	4b80      	ldr	r3, [pc, #512]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e38:	4b7d      	ldr	r3, [pc, #500]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d10c      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e4a:	4b79      	ldr	r3, [pc, #484]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	4a77      	ldr	r2, [pc, #476]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e56:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e01e      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e5e:	4b74      	ldr	r3, [pc, #464]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e72:	d102      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e74:	4b70      	ldr	r3, [pc, #448]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	e010      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e7a:	4b6d      	ldr	r3, [pc, #436]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e86:	d106      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8e:	d102      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e90:	4b6a      	ldr	r3, [pc, #424]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e9a:	e122      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e9c:	e121      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea2:	e11e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006eac:	430b      	orrs	r3, r1
 8006eae:	d133      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006eb0:	4b5f      	ldr	r3, [pc, #380]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec6:	d012      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006ec8:	e023      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eca:	4b59      	ldr	r3, [pc, #356]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed6:	d107      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fbc7 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee6:	e0fc      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eec:	e0f9      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eee:	4b50      	ldr	r3, [pc, #320]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efc:	f107 0318 	add.w	r3, r7, #24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f90d 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0a:	e0ea      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f10:	e0e7      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f16:	e0e4      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006f20:	430b      	orrs	r3, r1
 8006f22:	f040 808d 	bne.w	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f26:	4b42      	ldr	r3, [pc, #264]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f36:	d06b      	beq.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f3e:	d874      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d056      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4e:	d86c      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f56:	d03b      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f5e:	d864      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f66:	d021      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6e:	d85c      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7c:	d004      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006f7e:	e054      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f80:	f000 f8b8 	bl	80070f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f86:	e0ac      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f88:	4b29      	ldr	r3, [pc, #164]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f96:	f107 0318 	add.w	r3, r7, #24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f8c0 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa4:	e09d      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006faa:	e09a      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d107      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fa02 	bl	80073c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc8:	e08b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fce:	e088      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d109      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fdc:	4b14      	ldr	r3, [pc, #80]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	4a13      	ldr	r2, [pc, #76]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fee:	e078      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff4:	e075      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007002:	d102      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	e06b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700e:	e068      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007022:	e05e      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007028:	e05b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702e:	e058      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007030:	58024400 	.word	0x58024400
 8007034:	03d09000 	.word	0x03d09000
 8007038:	003d0900 	.word	0x003d0900
 800703c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007044:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007048:	430b      	orrs	r3, r1
 800704a:	d148      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800704c:	4b27      	ldr	r3, [pc, #156]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800704e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d02a      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d838      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007072:	d00d      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007074:	e030      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007076:	4b1d      	ldr	r3, [pc, #116]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007084:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007088:	e02b      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708e:	e028      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007090:	4b16      	ldr	r3, [pc, #88]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800709e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fae4 	bl	8007670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ac:	e019      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e016      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070c0:	d107      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c2:	f107 0318 	add.w	r3, r7, #24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f82a 	bl	8007120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d0:	e007      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d6:	e004      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070dc:	e001      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3740      	adds	r7, #64	; 0x40
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	017d7840 	.word	0x017d7840

080070f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070f8:	f7fd ffec 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b06      	ldr	r3, [pc, #24]	; (8007118 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	091b      	lsrs	r3, r3, #4
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4904      	ldr	r1, [pc, #16]	; (800711c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	58024400 	.word	0x58024400
 800711c:	08008528 	.word	0x08008528

08007120 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	; 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007128:	4ba1      	ldr	r3, [pc, #644]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007132:	4b9f      	ldr	r3, [pc, #636]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	0b1b      	lsrs	r3, r3, #12
 8007138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800713c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800713e:	4b9c      	ldr	r3, [pc, #624]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800714a:	4b99      	ldr	r3, [pc, #612]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8111 	beq.w	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b02      	cmp	r3, #2
 8007172:	f000 8083 	beq.w	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b02      	cmp	r3, #2
 800717a:	f200 80a1 	bhi.w	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d056      	beq.n	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800718a:	e099      	b.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718c:	4b88      	ldr	r3, [pc, #544]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d02d      	beq.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007198:	4b85      	ldr	r3, [pc, #532]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	08db      	lsrs	r3, r3, #3
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	4a84      	ldr	r2, [pc, #528]	; (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
 80071a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b7b      	ldr	r3, [pc, #492]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071f2:	e087      	b.n	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b6a      	ldr	r3, [pc, #424]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	e065      	b.n	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	e043      	b.n	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b48      	ldr	r3, [pc, #288]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072be:	e021      	b.n	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b37      	ldr	r3, [pc, #220]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007302:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007304:	4b2a      	ldr	r3, [pc, #168]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	0a5b      	lsrs	r3, r3, #9
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 2a90 	vmov	r2, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007332:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007358:	ee17 2a90 	vmov	r2, s15
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007360:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737a:	edd7 6a07 	vldr	s13, [r7, #28]
 800737e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007386:	ee17 2a90 	vmov	r2, s15
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800738e:	e008      	b.n	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
}
 80073a2:	bf00      	nop
 80073a4:	3724      	adds	r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	58024400 	.word	0x58024400
 80073b4:	03d09000 	.word	0x03d09000
 80073b8:	46000000 	.word	0x46000000
 80073bc:	4c742400 	.word	0x4c742400
 80073c0:	4a742400 	.word	0x4a742400
 80073c4:	4bbebc20 	.word	0x4bbebc20

080073c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b089      	sub	sp, #36	; 0x24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073d0:	4ba1      	ldr	r3, [pc, #644]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073da:	4b9f      	ldr	r3, [pc, #636]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	0d1b      	lsrs	r3, r3, #20
 80073e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073e6:	4b9c      	ldr	r3, [pc, #624]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073f2:	4b99      	ldr	r3, [pc, #612]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8111 	beq.w	8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b02      	cmp	r3, #2
 800741a:	f000 8083 	beq.w	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b02      	cmp	r3, #2
 8007422:	f200 80a1 	bhi.w	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d056      	beq.n	80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007432:	e099      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007434:	4b88      	ldr	r3, [pc, #544]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02d      	beq.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007440:	4b85      	ldr	r3, [pc, #532]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	08db      	lsrs	r3, r3, #3
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	4a84      	ldr	r2, [pc, #528]	; (800765c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
 8007450:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746a:	4b7b      	ldr	r3, [pc, #492]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a03 	vldr	s12, [r7, #12]
 800747e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800749a:	e087      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ae:	4b6a      	ldr	r3, [pc, #424]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074de:	e065      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b59      	ldr	r3, [pc, #356]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a03 	vldr	s12, [r7, #12]
 8007506:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007522:	e043      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007536:	4b48      	ldr	r3, [pc, #288]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007546:	ed97 6a03 	vldr	s12, [r7, #12]
 800754a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007566:	e021      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757a:	4b37      	ldr	r3, [pc, #220]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758a:	ed97 6a03 	vldr	s12, [r7, #12]
 800758e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800759e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075ac:	4b2a      	ldr	r3, [pc, #168]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	0a5b      	lsrs	r3, r3, #9
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	ee17 2a90 	vmov	r2, s15
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075da:	4b1f      	ldr	r3, [pc, #124]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007600:	ee17 2a90 	vmov	r2, s15
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	0e1b      	lsrs	r3, r3, #24
 800760e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800761e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007622:	edd7 6a07 	vldr	s13, [r7, #28]
 8007626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800762e:	ee17 2a90 	vmov	r2, s15
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007636:	e008      	b.n	800764a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
}
 800764a:	bf00      	nop
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	03d09000 	.word	0x03d09000
 8007660:	46000000 	.word	0x46000000
 8007664:	4c742400 	.word	0x4c742400
 8007668:	4a742400 	.word	0x4a742400
 800766c:	4bbebc20 	.word	0x4bbebc20

08007670 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007670:	b480      	push	{r7}
 8007672:	b089      	sub	sp, #36	; 0x24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007678:	4ba0      	ldr	r3, [pc, #640]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007682:	4b9e      	ldr	r3, [pc, #632]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800768e:	4b9b      	ldr	r3, [pc, #620]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007698:	4b98      	ldr	r3, [pc, #608]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	08db      	lsrs	r3, r3, #3
 800769e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	fb02 f303 	mul.w	r3, r2, r3
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8111 	beq.w	80078de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	f000 8083 	beq.w	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	f200 80a1 	bhi.w	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d056      	beq.n	8007786 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076d8:	e099      	b.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076da:	4b88      	ldr	r3, [pc, #544]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d02d      	beq.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076e6:	4b85      	ldr	r3, [pc, #532]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	4a83      	ldr	r2, [pc, #524]	; (8007900 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007710:	4b7a      	ldr	r3, [pc, #488]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	ed97 6a03 	vldr	s12, [r7, #12]
 8007724:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007740:	e087      	b.n	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007754:	4b69      	ldr	r3, [pc, #420]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	ed97 6a03 	vldr	s12, [r7, #12]
 8007768:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800776c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007784:	e065      	b.n	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800790c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	4b58      	ldr	r3, [pc, #352]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c8:	e043      	b.n	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007910 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077dc:	4b47      	ldr	r3, [pc, #284]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780c:	e021      	b.n	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007818:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007908 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800781c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007830:	ed97 6a03 	vldr	s12, [r7, #12]
 8007834:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007850:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007852:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	0a5b      	lsrs	r3, r3, #9
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007878:	ee17 2a90 	vmov	r2, s15
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789a:	edd7 6a07 	vldr	s13, [r7, #28]
 800789e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a6:	ee17 2a90 	vmov	r2, s15
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d4:	ee17 2a90 	vmov	r2, s15
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078dc:	e008      	b.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	3724      	adds	r7, #36	; 0x24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	46000000 	.word	0x46000000
 8007908:	4c742400 	.word	0x4c742400
 800790c:	4a742400 	.word	0x4a742400
 8007910:	4bbebc20 	.word	0x4bbebc20

08007914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007922:	4b53      	ldr	r3, [pc, #332]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d101      	bne.n	8007932 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e099      	b.n	8007a66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007932:	4b4f      	ldr	r3, [pc, #316]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a4e      	ldr	r2, [pc, #312]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800793c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793e:	f7f9 fc9f 	bl	8001280 <HAL_GetTick>
 8007942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007944:	e008      	b.n	8007958 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007946:	f7f9 fc9b 	bl	8001280 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e086      	b.n	8007a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007958:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007964:	4b42      	ldr	r3, [pc, #264]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	031b      	lsls	r3, r3, #12
 8007972:	493f      	ldr	r1, [pc, #252]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007974:	4313      	orrs	r3, r2
 8007976:	628b      	str	r3, [r1, #40]	; 0x28
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	3b01      	subs	r3, #1
 800797e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	3b01      	subs	r3, #1
 8007988:	025b      	lsls	r3, r3, #9
 800798a:	b29b      	uxth	r3, r3
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	3b01      	subs	r3, #1
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	061b      	lsls	r3, r3, #24
 80079a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079a8:	4931      	ldr	r1, [pc, #196]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ae:	4b30      	ldr	r3, [pc, #192]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	492d      	ldr	r1, [pc, #180]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079c0:	4b2b      	ldr	r3, [pc, #172]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f023 0220 	bic.w	r2, r3, #32
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	4928      	ldr	r1, [pc, #160]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079d2:	4b27      	ldr	r3, [pc, #156]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	f023 0310 	bic.w	r3, r3, #16
 80079dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079de:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <RCCEx_PLL2_Config+0x160>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	69d2      	ldr	r2, [r2, #28]
 80079ea:	00d2      	lsls	r2, r2, #3
 80079ec:	4920      	ldr	r1, [pc, #128]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079f2:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	f043 0310 	orr.w	r3, r3, #16
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a04:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a10:	e00f      	b.n	8007a32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d106      	bne.n	8007a26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a18:	4b15      	ldr	r3, [pc, #84]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a24:	e005      	b.n	8007a32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a26:	4b12      	ldr	r3, [pc, #72]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a11      	ldr	r2, [pc, #68]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3e:	f7f9 fc1f 	bl	8001280 <HAL_GetTick>
 8007a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a44:	e008      	b.n	8007a58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a46:	f7f9 fc1b 	bl	8001280 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e006      	b.n	8007a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	58024400 	.word	0x58024400
 8007a74:	ffff0007 	.word	0xffff0007

08007a78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a86:	4b53      	ldr	r3, [pc, #332]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d101      	bne.n	8007a96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e099      	b.n	8007bca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a96:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a4e      	ldr	r2, [pc, #312]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa2:	f7f9 fbed 	bl	8001280 <HAL_GetTick>
 8007aa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007aa8:	e008      	b.n	8007abc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aaa:	f7f9 fbe9 	bl	8001280 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d901      	bls.n	8007abc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e086      	b.n	8007bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007abc:	4b45      	ldr	r3, [pc, #276]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f0      	bne.n	8007aaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ac8:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	051b      	lsls	r3, r3, #20
 8007ad6:	493f      	ldr	r1, [pc, #252]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	628b      	str	r3, [r1, #40]	; 0x28
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	025b      	lsls	r3, r3, #9
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b0c:	4931      	ldr	r1, [pc, #196]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b12:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	492d      	ldr	r1, [pc, #180]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	4928      	ldr	r1, [pc, #160]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a26      	ldr	r2, [pc, #152]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b42:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b46:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <RCCEx_PLL3_Config+0x160>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	69d2      	ldr	r2, [r2, #28]
 8007b4e:	00d2      	lsls	r2, r2, #3
 8007b50:	4920      	ldr	r1, [pc, #128]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b56:	4b1f      	ldr	r3, [pc, #124]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a19      	ldr	r2, [pc, #100]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b74:	e00f      	b.n	8007b96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d106      	bne.n	8007b8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b7c:	4b15      	ldr	r3, [pc, #84]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4a14      	ldr	r2, [pc, #80]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b88:	e005      	b.n	8007b96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	4a11      	ldr	r2, [pc, #68]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a0e      	ldr	r2, [pc, #56]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba2:	f7f9 fb6d 	bl	8001280 <HAL_GetTick>
 8007ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ba8:	e008      	b.n	8007bbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007baa:	f7f9 fb69 	bl	8001280 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d901      	bls.n	8007bbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	ffff0007 	.word	0xffff0007

08007bdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e10f      	b.n	8007e0e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a87      	ldr	r2, [pc, #540]	; (8007e18 <HAL_SPI_Init+0x23c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00f      	beq.n	8007c1e <HAL_SPI_Init+0x42>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a86      	ldr	r2, [pc, #536]	; (8007e1c <HAL_SPI_Init+0x240>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00a      	beq.n	8007c1e <HAL_SPI_Init+0x42>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a84      	ldr	r2, [pc, #528]	; (8007e20 <HAL_SPI_Init+0x244>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d005      	beq.n	8007c1e <HAL_SPI_Init+0x42>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b0f      	cmp	r3, #15
 8007c18:	d901      	bls.n	8007c1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e0f7      	b.n	8007e0e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbea 	bl	80083f8 <SPI_GetPacketSize>
 8007c24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a7b      	ldr	r2, [pc, #492]	; (8007e18 <HAL_SPI_Init+0x23c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00c      	beq.n	8007c4a <HAL_SPI_Init+0x6e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a79      	ldr	r2, [pc, #484]	; (8007e1c <HAL_SPI_Init+0x240>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <HAL_SPI_Init+0x6e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a78      	ldr	r2, [pc, #480]	; (8007e20 <HAL_SPI_Init+0x244>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d002      	beq.n	8007c4a <HAL_SPI_Init+0x6e>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d811      	bhi.n	8007c6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c4e:	4a72      	ldr	r2, [pc, #456]	; (8007e18 <HAL_SPI_Init+0x23c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d009      	beq.n	8007c68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a70      	ldr	r2, [pc, #448]	; (8007e1c <HAL_SPI_Init+0x240>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <HAL_SPI_Init+0x8c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a6f      	ldr	r2, [pc, #444]	; (8007e20 <HAL_SPI_Init+0x244>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d104      	bne.n	8007c72 <HAL_SPI_Init+0x96>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d901      	bls.n	8007c72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0cd      	b.n	8007e0e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7f9 f968 	bl	8000f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cb8:	d119      	bne.n	8007cee <HAL_SPI_Init+0x112>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc2:	d103      	bne.n	8007ccc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10c      	bne.n	8007cee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cdc:	d107      	bne.n	8007cee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00f      	beq.n	8007d1a <HAL_SPI_Init+0x13e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2b06      	cmp	r3, #6
 8007d00:	d90b      	bls.n	8007d1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e007      	b.n	8007d2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	431a      	orrs	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	ea42 0103 	orr.w	r1, r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8a:	ea42 0103 	orr.w	r1, r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d113      	bne.n	8007dca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007db4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40013000 	.word	0x40013000
 8007e1c:	40003800 	.word	0x40003800
 8007e20:	40003c00 	.word	0x40003c00

08007e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08c      	sub	sp, #48	; 0x30
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3320      	adds	r3, #32
 8007e3e:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3330      	adds	r3, #48	; 0x30
 8007e46:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_SPI_TransmitReceive+0x32>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e1fd      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e5e:	f7f9 fa0f 	bl	8001280 <HAL_GetTick>
 8007e62:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007e64:	887b      	ldrh	r3, [r7, #2]
 8007e66:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007e68:	887b      	ldrh	r3, [r7, #2]
 8007e6a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d009      	beq.n	8007e8c <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e8a:	e1e2      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <HAL_SPI_TransmitReceive+0x7a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_SPI_TransmitReceive+0x7a>
 8007e98:	887b      	ldrh	r3, [r7, #2]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eb0:	e1cf      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2205      	movs	r2, #5
 8007eb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	887a      	ldrh	r2, [r7, #2]
 8007ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	887a      	ldrh	r2, [r7, #2]
 8007ee2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	887a      	ldrh	r2, [r7, #2]
 8007eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007f08:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	4b82      	ldr	r3, [pc, #520]	; (800811c <HAL_SPI_TransmitReceive+0x2f8>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	8879      	ldrh	r1, [r7, #2]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0201 	orr.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f36:	d107      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2b0f      	cmp	r3, #15
 8007f4e:	d970      	bls.n	8008032 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f50:	e068      	b.n	8008024 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d11a      	bne.n	8007f96 <HAL_SPI_TransmitReceive+0x172>
 8007f60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d017      	beq.n	8007f96 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f76:	1d1a      	adds	r2, r3, #4
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f94:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	f248 0308 	movw	r3, #32776	; 0x8008
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01a      	beq.n	8007fdc <HAL_SPI_TransmitReceive+0x1b8>
 8007fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d017      	beq.n	8007fdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fb6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fbc:	1d1a      	adds	r2, r3, #4
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fda:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fdc:	f7f9 f950 	bl	8001280 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d803      	bhi.n	8007ff4 <HAL_SPI_TransmitReceive+0x1d0>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d102      	bne.n	8007ffa <HAL_SPI_TransmitReceive+0x1d6>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d114      	bne.n	8008024 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f92e 	bl	800825c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800800e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e116      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008026:	2b00      	cmp	r3, #0
 8008028:	d193      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x12e>
 800802a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d190      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x12e>
 8008030:	e0e8      	b.n	8008204 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b07      	cmp	r3, #7
 8008038:	f240 80de 	bls.w	80081f8 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800803c:	e066      	b.n	800810c <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d119      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x25c>
 800804c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800804e:	2b00      	cmp	r3, #0
 8008050:	d016      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	881a      	ldrh	r2, [r3, #0]
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008060:	1c9a      	adds	r2, r3, #2
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800806c:	b29b      	uxth	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800807e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b01      	cmp	r3, #1
 800808c:	d11a      	bne.n	80080c4 <HAL_SPI_TransmitReceive+0x2a0>
 800808e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d017      	beq.n	80080c4 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	8812      	ldrh	r2, [r2, #0]
 800809c:	b292      	uxth	r2, r2
 800809e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a4:	1c9a      	adds	r2, r3, #2
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080c2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c4:	f7f9 f8dc 	bl	8001280 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d803      	bhi.n	80080dc <HAL_SPI_TransmitReceive+0x2b8>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d102      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x2be>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d114      	bne.n	800810c <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f8ba 	bl	800825c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e0a2      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800810c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800810e:	2b00      	cmp	r3, #0
 8008110:	d195      	bne.n	800803e <HAL_SPI_TransmitReceive+0x21a>
 8008112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d192      	bne.n	800803e <HAL_SPI_TransmitReceive+0x21a>
 8008118:	e074      	b.n	8008204 <HAL_SPI_TransmitReceive+0x3e0>
 800811a:	bf00      	nop
 800811c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d11b      	bne.n	8008166 <HAL_SPI_TransmitReceive+0x342>
 800812e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008130:	2b00      	cmp	r3, #0
 8008132:	d018      	beq.n	8008166 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3320      	adds	r3, #32
 800813e:	7812      	ldrb	r2, [r2, #0]
 8008140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008164:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b01      	cmp	r3, #1
 8008172:	d11d      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x38c>
 8008174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01a      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008186:	7812      	ldrb	r2, [r2, #0]
 8008188:	b2d2      	uxtb	r2, r2
 800818a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ae:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081b0:	f7f9 f866 	bl	8001280 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081bc:	429a      	cmp	r2, r3
 80081be:	d803      	bhi.n	80081c8 <HAL_SPI_TransmitReceive+0x3a4>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d102      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x3aa>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d114      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f844 	bl	800825c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e02c      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80081f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d190      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x2fc>
 80081fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	d18d      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2200      	movs	r2, #0
 800820c:	2108      	movs	r1, #8
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f8c4 	bl	800839c <SPI_WaitOnFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008220:	f043 0220 	orr.w	r2, r3, #32
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f816 	bl	800825c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e001      	b.n	8008252 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800824e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	; 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop

0800825c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0210 	orr.w	r2, r2, #16
 800828a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0201 	bic.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b3c      	ldr	r3, [pc, #240]	; (8008398 <SPI_CloseTransfer+0x13c>)
 80082a8:	400b      	ands	r3, r1
 80082aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80082ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d014      	beq.n	80082f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0220 	orr.w	r2, r2, #32
 80082f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d014      	beq.n	8008328 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00f      	beq.n	8008328 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	f043 0204 	orr.w	r2, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008326:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00f      	beq.n	8008352 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008338:	f043 0201 	orr.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008350:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	fffffc90 	.word	0xfffffc90

0800839c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083ac:	e010      	b.n	80083d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ae:	f7f8 ff67 	bl	8001280 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d803      	bhi.n	80083c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d102      	bne.n	80083cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e00f      	b.n	80083f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4013      	ands	r3, r2
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	429a      	cmp	r2, r3
 80083de:	bf0c      	ite	eq
 80083e0:	2301      	moveq	r3, #1
 80083e2:	2300      	movne	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	461a      	mov	r2, r3
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d0df      	beq.n	80083ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3307      	adds	r3, #7
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <arm_abs_f32>:
 8008430:	b470      	push	{r4, r5, r6}
 8008432:	0896      	lsrs	r6, r2, #2
 8008434:	d025      	beq.n	8008482 <arm_abs_f32+0x52>
 8008436:	f100 0410 	add.w	r4, r0, #16
 800843a:	f101 0310 	add.w	r3, r1, #16
 800843e:	4635      	mov	r5, r6
 8008440:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008444:	3d01      	subs	r5, #1
 8008446:	f104 0410 	add.w	r4, r4, #16
 800844a:	f103 0310 	add.w	r3, r3, #16
 800844e:	eef0 7ae7 	vabs.f32	s15, s15
 8008452:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8008456:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800845a:	eef0 7ae7 	vabs.f32	s15, s15
 800845e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008462:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008466:	eef0 7ae7 	vabs.f32	s15, s15
 800846a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800846e:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008472:	eef0 7ae7 	vabs.f32	s15, s15
 8008476:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800847a:	d1e1      	bne.n	8008440 <arm_abs_f32+0x10>
 800847c:	0136      	lsls	r6, r6, #4
 800847e:	4430      	add	r0, r6
 8008480:	4431      	add	r1, r6
 8008482:	f012 0203 	ands.w	r2, r2, #3
 8008486:	d015      	beq.n	80084b4 <arm_abs_f32+0x84>
 8008488:	edd0 7a00 	vldr	s15, [r0]
 800848c:	3a01      	subs	r2, #1
 800848e:	eef0 7ae7 	vabs.f32	s15, s15
 8008492:	edc1 7a00 	vstr	s15, [r1]
 8008496:	d00d      	beq.n	80084b4 <arm_abs_f32+0x84>
 8008498:	edd0 7a01 	vldr	s15, [r0, #4]
 800849c:	2a01      	cmp	r2, #1
 800849e:	eef0 7ae7 	vabs.f32	s15, s15
 80084a2:	edc1 7a01 	vstr	s15, [r1, #4]
 80084a6:	d005      	beq.n	80084b4 <arm_abs_f32+0x84>
 80084a8:	edd0 7a02 	vldr	s15, [r0, #8]
 80084ac:	eef0 7ae7 	vabs.f32	s15, s15
 80084b0:	edc1 7a02 	vstr	s15, [r1, #8]
 80084b4:	bc70      	pop	{r4, r5, r6}
 80084b6:	4770      	bx	lr

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0d      	ldr	r5, [pc, #52]	; (8008500 <__libc_init_array+0x38>)
 80084cc:	4c0d      	ldr	r4, [pc, #52]	; (8008504 <__libc_init_array+0x3c>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d109      	bne.n	80084ec <__libc_init_array+0x24>
 80084d8:	4d0b      	ldr	r5, [pc, #44]	; (8008508 <__libc_init_array+0x40>)
 80084da:	4c0c      	ldr	r4, [pc, #48]	; (800850c <__libc_init_array+0x44>)
 80084dc:	f000 f818 	bl	8008510 <_init>
 80084e0:	1b64      	subs	r4, r4, r5
 80084e2:	10a4      	asrs	r4, r4, #2
 80084e4:	2600      	movs	r6, #0
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	d105      	bne.n	80084f6 <__libc_init_array+0x2e>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f0:	4798      	blx	r3
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7ee      	b.n	80084d4 <__libc_init_array+0xc>
 80084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fa:	4798      	blx	r3
 80084fc:	3601      	adds	r6, #1
 80084fe:	e7f2      	b.n	80084e6 <__libc_init_array+0x1e>
 8008500:	08008540 	.word	0x08008540
 8008504:	08008540 	.word	0x08008540
 8008508:	08008540 	.word	0x08008540
 800850c:	08008544 	.word	0x08008544

08008510 <_init>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr

0800851c <_fini>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr
