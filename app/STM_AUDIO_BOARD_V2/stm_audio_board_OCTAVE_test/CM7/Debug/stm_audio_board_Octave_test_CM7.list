
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007170  08007170  00017170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007360  08007360  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007360  08007360  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007360  08007360  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  24000000  08007368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00068ef8  240003a0  08007708  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24069298  08007708  00029298  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000203ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dd5  00000000  00000000  00020486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f8  00000000  00000000  0003825b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005af3  00000000  00000000  0003b953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  00041448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ba  00000000  00000000  00042128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f578  00000000  00000000  00042ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001762c  00000000  00000000  0008205a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196393  00000000  00000000  00099686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020e0  00000000  00000000  0022fa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00231afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000017a3  00000000  00000000  00231b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000070  00000000  00000000  00233339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240003a0 	.word	0x240003a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007158 	.word	0x08007158

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240003a4 	.word	0x240003a4
 80002d4:	08007158 	.word	0x08007158

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 80002da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80002e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002e6:	691a      	ldr	r2, [r3, #16]
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <SystemInit+0xbc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	2b06      	cmp	r3, #6
 80002f8:	d806      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fa:	4a26      	ldr	r2, [pc, #152]	; (8000394 <SystemInit+0xbc>)
 80002fc:	6813      	ldr	r3, [r2, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	f042 0201 	orr.w	r2, r2, #1
 8000310:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	4a20      	ldr	r2, [pc, #128]	; (800039c <SystemInit+0xc4>)
 800031a:	400a      	ands	r2, r1
 800031c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <SystemInit+0xbc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f013 0f08 	tst.w	r3, #8
 8000326:	d006      	beq.n	8000336 <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <SystemInit+0xbc>)
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	f043 0307 	orr.w	r3, r3, #7
 8000334:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <SystemInit+0xc0>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800033c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800033e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000340:	4917      	ldr	r1, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	4917      	ldr	r1, [pc, #92]	; (80003a4 <SystemInit+0xcc>)
 8000346:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000348:	4917      	ldr	r1, [pc, #92]	; (80003a8 <SystemInit+0xd0>)
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000364:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8000368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <SystemInit+0xd4>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <SystemInit+0xd8>)
 8000376:	4013      	ands	r3, r2
 8000378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800037c:	d203      	bcs.n	8000386 <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <SystemInit+0xdc>)
 8000380:	2201      	movs	r2, #1
 8000382:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <SystemInit+0xe0>)
 8000388:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800038c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	02020200 	.word	0x02020200
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	01010280 	.word	0x01010280
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	b083      	sub	sp, #12
	int8_t retval = 0;
	TXdata[0] = AD1939_Global_Address_Write;
 80003c0:	4c0f      	ldr	r4, [pc, #60]	; (8000400 <ad1939_write_reg+0x44>)
 80003c2:	2308      	movs	r3, #8
 80003c4:	7023      	strb	r3, [r4, #0]
	TXdata[1] = reg_address;
 80003c6:	7060      	strb	r0, [r4, #1]
	TXdata[2] = data;
 80003c8:	70a1      	strb	r1, [r4, #2]

	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003ca:	4d0e      	ldr	r5, [pc, #56]	; (8000404 <ad1939_write_reg+0x48>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4628      	mov	r0, r5
 80003d4:	f002 fd56 	bl	8002e84 <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2303      	movs	r3, #3
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <ad1939_write_reg+0x4c>)
 80003e2:	4621      	mov	r1, r4
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <ad1939_write_reg+0x50>)
 80003e6:	6800      	ldr	r0, [r0, #0]
 80003e8:	f005 fb9c 	bl	8005b24 <HAL_SPI_TransmitReceive>
 80003ec:	b244      	sxtb	r4, r0
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f4:	4628      	mov	r0, r5
 80003f6:	f002 fd45 	bl	8002e84 <HAL_GPIO_WritePin>

	 //HAL_Delay(10);
	return retval;
}
 80003fa:	4620      	mov	r0, r4
 80003fc:	b003      	add	sp, #12
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	240003c4 	.word	0x240003c4
 8000404:	58021400 	.word	0x58021400
 8000408:	240003c0 	.word	0x240003c0
 800040c:	240003bc 	.word	0x240003bc

08000410 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	b082      	sub	sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 8000414:	4c11      	ldr	r4, [pc, #68]	; (800045c <ad1939_pll_locked+0x4c>)
 8000416:	2309      	movs	r3, #9
 8000418:	7023      	strb	r3, [r4, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 800041a:	2601      	movs	r6, #1
 800041c:	7066      	strb	r6, [r4, #1]
	TXdata[2] = 0b00000100;
 800041e:	2304      	movs	r3, #4
 8000420:	70a3      	strb	r3, [r4, #2]
	HAL_Delay(10);
 8000422:	200a      	movs	r0, #10
 8000424:	f001 face 	bl	80019c4 <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000428:	4d0d      	ldr	r5, [pc, #52]	; (8000460 <ad1939_pll_locked+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4628      	mov	r0, r5
 8000432:	f002 fd27 	bl	8002e84 <HAL_GPIO_WritePin>
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2303      	movs	r3, #3
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <ad1939_pll_locked+0x54>)
 8000440:	4621      	mov	r1, r4
 8000442:	4809      	ldr	r0, [pc, #36]	; (8000468 <ad1939_pll_locked+0x58>)
 8000444:	6800      	ldr	r0, [r0, #0]
 8000446:	f005 fb6d 	bl	8005b24 <HAL_SPI_TransmitReceive>
	 // CS HIGH
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800044a:	4632      	mov	r2, r6
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	4628      	mov	r0, r5
 8000452:	f002 fd17 	bl	8002e84 <HAL_GPIO_WritePin>

	 return 0;
}
 8000456:	2000      	movs	r0, #0
 8000458:	b002      	add	sp, #8
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	240003c4 	.word	0x240003c4
 8000460:	58021400 	.word	0x58021400
 8000464:	240003c0 	.word	0x240003c0
 8000468:	240003bc 	.word	0x240003bc

0800046c <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 800046c:	b508      	push	{r3, lr}
    AD1939_spi = hspi_codec;
 800046e:	4b33      	ldr	r3, [pc, #204]	; (800053c <ad1939_init+0xd0>)
 8000470:	6018      	str	r0, [r3, #0]
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 8000472:	2199      	movs	r1, #153	; 0x99
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ffa1 	bl	80003bc <ad1939_write_reg>
 800047a:	bbd8      	cbnz	r0, 80004f4 <ad1939_init+0x88>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800047c:	21be      	movs	r1, #190	; 0xbe
 800047e:	f7ff ff9d 	bl	80003bc <ad1939_write_reg>
 8000482:	bbd0      	cbnz	r0, 80004fa <ad1939_init+0x8e>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000484:	2104      	movs	r1, #4
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff98 	bl	80003bc <ad1939_write_reg>
 800048c:	bbc0      	cbnz	r0, 8000500 <ad1939_init+0x94>





    HAL_Delay(100);
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f001 fa98 	bl	80019c4 <HAL_Delay>

    if(ad1939_pll_locked()){
 8000494:	f7ff ffbc 	bl	8000410 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000000)) return -1;
 8000498:	2100      	movs	r1, #0
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff ff8e 	bl	80003bc <ad1939_write_reg>
 80004a0:	bb88      	cbnz	r0, 8000506 <ad1939_init+0x9a>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 80004a2:	2100      	movs	r1, #0
 80004a4:	2003      	movs	r0, #3
 80004a6:	f7ff ff89 	bl	80003bc <ad1939_write_reg>
 80004aa:	bb78      	cbnz	r0, 800050c <ad1939_init+0xa0>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004ac:	2100      	movs	r1, #0
 80004ae:	2004      	movs	r0, #4
 80004b0:	f7ff ff84 	bl	80003bc <ad1939_write_reg>
 80004b4:	bb68      	cbnz	r0, 8000512 <ad1939_init+0xa6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004b6:	2100      	movs	r1, #0
 80004b8:	2005      	movs	r0, #5
 80004ba:	f7ff ff7f 	bl	80003bc <ad1939_write_reg>
 80004be:	bb58      	cbnz	r0, 8000518 <ad1939_init+0xac>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004c0:	2100      	movs	r1, #0
 80004c2:	2008      	movs	r0, #8
 80004c4:	f7ff ff7a 	bl	80003bc <ad1939_write_reg>
 80004c8:	bb48      	cbnz	r0, 800051e <ad1939_init+0xb2>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004ca:	2100      	movs	r1, #0
 80004cc:	2009      	movs	r0, #9
 80004ce:	f7ff ff75 	bl	80003bc <ad1939_write_reg>
 80004d2:	bb38      	cbnz	r0, 8000524 <ad1939_init+0xb8>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 80004d4:	2100      	movs	r1, #0
 80004d6:	200e      	movs	r0, #14
 80004d8:	f7ff ff70 	bl	80003bc <ad1939_write_reg>
 80004dc:	bb28      	cbnz	r0, 800052a <ad1939_init+0xbe>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 80004de:	2100      	movs	r1, #0
 80004e0:	200f      	movs	r0, #15
 80004e2:	f7ff ff6b 	bl	80003bc <ad1939_write_reg>
 80004e6:	bb18      	cbnz	r0, 8000530 <ad1939_init+0xc4>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 80004e8:	2100      	movs	r1, #0
 80004ea:	2010      	movs	r0, #16
 80004ec:	f7ff ff66 	bl	80003bc <ad1939_write_reg>
 80004f0:	bb08      	cbnz	r0, 8000536 <ad1939_init+0xca>



    return 0; // Return 0 if all writes are successful
}
 80004f2:	bd08      	pop	{r3, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	e7fb      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80004fa:	f04f 30ff 	mov.w	r0, #4294967295
 80004fe:	e7f8      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	e7f5      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000000)) return -1;
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	e7f2      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	e7ef      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	e7ec      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	e7e9      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800051e:	f04f 30ff 	mov.w	r0, #4294967295
 8000522:	e7e6      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	e7e3      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 800052a:	f04f 30ff 	mov.w	r0, #4294967295
 800052e:	e7e0      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	e7dd      	b.n	80004f2 <ad1939_init+0x86>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000536:	f04f 30ff 	mov.w	r0, #4294967295
 800053a:	e7da      	b.n	80004f2 <ad1939_init+0x86>
 800053c:	240003bc 	.word	0x240003bc

08000540 <calculate_buffer_location>:
 * 		calculates the position in the buffer where the delayed signal should be read from
 * 		For now this will only use the time_buffer_u32
 */
static void calculate_buffer_location(struct delay_effects_st* self){
	// current_pointer + buffer[time]
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 8000540:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 8000544:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8000548:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
 800054c:	440b      	add	r3, r1
 800054e:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c

	// if delay sample is bigger than the buffer go back
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <calculate_buffer_location+0x28>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d905      	bls.n	8000564 <calculate_buffer_location+0x24>
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <calculate_buffer_location+0x2c>)
 800055a:	441a      	add	r2, r3
 800055c:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 8000560:	f8c0 2c0c 	str.w	r2, [r0, #3084]	; 0xc0c
	}
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	000176ff 	.word	0x000176ff
 800056c:	fffe8901 	.word	0xfffe8901

08000570 <increment_current_sample_counter>:
 * 		increment_current_sample_counter()
 * DESC:
 * 		Increments the current sample counter
 */
static void increment_current_sample_counter(struct delay_effects_st* self){
	self->current_counter_u32++;
 8000570:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 8000574:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8000578:	3301      	adds	r3, #1
 800057a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <increment_current_sample_counter+0x20>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d904      	bls.n	800058e <increment_current_sample_counter+0x1e>
		self->current_counter_u32 = 0;
 8000584:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 8000588:	2300      	movs	r3, #0
 800058a:	f8c0 3c08 	str.w	r3, [r0, #3080]	; 0xc08
	}
}
 800058e:	4770      	bx	lr
 8000590:	000176ff 	.word	0x000176ff

08000594 <get_delayed_signal>:
 * 		get_delayed_signal()
 * DESC:
 * 		Returns the delayed signal value stored in buffer
 */
static int32_t get_delayed_signal(struct delay_effects_st* self){
	return self->buffer_ai32[self->delayed_counter_u32];
 8000594:	f500 23ba 	add.w	r3, r0, #380928	; 0x5d000
 8000598:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 800059c:	3302      	adds	r3, #2
}
 800059e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80005a2:	4770      	bx	lr
 80005a4:	0000      	movs	r0, r0
	...

080005a8 <callback>:
 * FUNC:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	ed2d 8b02 	vpush	{d8}
 80005ae:	4604      	mov	r4, r0

	self->input_i32 = input_signal_i32;
 80005b0:	6001      	str	r1, [r0, #0]
	calculate_buffer_location(self);
 80005b2:	f7ff ffc5 	bl	8000540 <calculate_buffer_location>

	// delay effect
	int32_t delayed_sample_i32 = get_delayed_signal(self);
 80005b6:	4620      	mov	r0, r4
 80005b8:	f7ff ffec 	bl	8000594 <get_delayed_signal>
 80005bc:	ee07 0a10 	vmov	s14, r0

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80005c0:	f504 25ba 	add.w	r5, r4, #380928	; 0x5d000
 80005c4:	f8d5 3c0c 	ldr.w	r3, [r5, #3084]	; 0xc0c
 80005c8:	3302      	adds	r3, #2
 80005ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80005ce:	edd3 7a00 	vldr	s15, [r3]
 80005d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d6:	f605 4334 	addw	r3, r5, #3124	; 0xc34
 80005da:	ed93 6a00 	vldr	s12, [r3]
 80005de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80005e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e6:	ee17 3a90 	vmov	r3, s15
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80005ea:	edd4 7a00 	vldr	s15, [r4]
 80005ee:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80005f2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80005f6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80005fa:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80005fe:	ee34 6b46 	vsub.f64	d6, d4, d6
 8000602:	ee25 6b06 	vmul.f64	d6, d5, d6
 8000606:	eebd 6bc6 	vcvt.s32.f64	s12, d6
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 800060a:	f8d5 2c08 	ldr.w	r2, [r5, #3080]	; 0xc08
 800060e:	ee16 1a10 	vmov	r1, s12
 8000612:	440b      	add	r3, r1
 8000614:	3202      	adds	r2, #2
 8000616:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800061a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800061e:	f605 432c 	addw	r3, r5, #3116	; 0xc2c
 8000622:	ed93 6a00 	vldr	s12, [r3]
 8000626:	ee27 7a06 	vmul.f32	s14, s14, s12
 800062a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 800062e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8000632:	ee34 4b46 	vsub.f64	d4, d4, d6
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000636:	ee05 7b04 	vmla.f64	d7, d5, d4
 800063a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800063e:	ed84 7a01 	vstr	s14, [r4, #4]

	increment_current_sample_counter(self);
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff ff94 	bl	8000570 <increment_current_sample_counter>

	// modulation
	if( self->modulation_on_u8 ){
 8000648:	f895 3c10 	ldrb.w	r3, [r5, #3088]	; 0xc10
 800064c:	b37b      	cbz	r3, 80006ae <callback+0x106>
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 800064e:	462e      	mov	r6, r5
 8000650:	f8d5 3c28 	ldr.w	r3, [r5, #3112]	; 0xc28
 8000654:	4d1a      	ldr	r5, [pc, #104]	; (80006c0 <callback+0x118>)
 8000656:	1aed      	subs	r5, r5, r3
 8000658:	f606 4324 	addw	r3, r6, #3108	; 0xc24
 800065c:	ed93 8a00 	vldr	s16, [r3]
 8000660:	f8d6 7c20 	ldr.w	r7, [r6, #3104]	; 0xc20
 8000664:	ee07 7a90 	vmov	s15, r7
 8000668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800066c:	f8d6 3c1c 	ldr.w	r3, [r6, #3100]	; 0xc1c
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800067c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000680:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80006b8 <callback+0x110>
 8000684:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000688:	f005 ff7a 	bl	8006580 <sin>
 800068c:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8000690:	ee07 5a90 	vmov	s15, r5
 8000694:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000698:	ee08 7b00 	vmla.f64	d7, d8, d0
 800069c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006a0:	ee17 3a10 	vmov	r3, s14
 80006a4:	f8c6 3c18 	str.w	r3, [r6, #3096]	; 0xc18
		self->parameters_st.modulation_counter_u32++;
 80006a8:	3701      	adds	r7, #1
 80006aa:	f8c6 7c20 	str.w	r7, [r6, #3104]	; 0xc20
	}

	return self->output_i32;
}
 80006ae:	6860      	ldr	r0, [r4, #4]
 80006b0:	ecbd 8b02 	vpop	{d8}
 80006b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	51eb851f 	.word	0x51eb851f
 80006bc:	40191eb8 	.word	0x40191eb8
 80006c0:	00017700 	.word	0x00017700

080006c4 <init_guitar_effect_delay>:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH - DELAY_BUFFER_LENGTH / 16;	// 12ms delay
 80006c4:	f500 22ba 	add.w	r2, r0, #380928	; 0x5d000
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <init_guitar_effect_delay+0x60>)
 80006ca:	f8c2 3c18 	str.w	r3, [r2, #3096]	; 0xc18
	self->modulation_on_u8 							= 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f882 3c10 	strb.w	r3, [r2, #3088]	; 0xc10
	self->parameters_st.modulation_counter_u32 		= 0;
 80006d4:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 80006d8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80006dc:	f8c2 1c1c 	str.w	r1, [r2, #3100]	; 0xc1c
	self->parameters_st.modulation_amplitude_i32	= 20;
 80006e0:	2114      	movs	r1, #20
 80006e2:	f8c2 1c24 	str.w	r1, [r2, #3108]	; 0xc24
	self->parameters_st.modulation_base_u32			= 50;
 80006e6:	2132      	movs	r1, #50	; 0x32
 80006e8:	f8c2 1c28 	str.w	r1, [r2, #3112]	; 0xc28
	self->parameters_st.mix_f32						= 0.5; 		// 50%
 80006ec:	f602 4c2c 	addw	ip, r2, #3116	; 0xc2c
 80006f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80006f4:	f8cc 1000 	str.w	r1, [ip]
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 80006f8:	f602 4c34 	addw	ip, r2, #3124	; 0xc34
 80006fc:	f8cc 1000 	str.w	r1, [ip]


	self->current_counter_u32 = 0;
 8000700:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08

	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 8000704:	e004      	b.n	8000710 <init_guitar_effect_delay+0x4c>
		self->buffer_ai32[i] = 0;
 8000706:	1c9a      	adds	r2, r3, #2
 8000708:	2100      	movs	r1, #0
 800070a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 800070e:	3301      	adds	r3, #1
 8000710:	4a05      	ldr	r2, [pc, #20]	; (8000728 <init_guitar_effect_delay+0x64>)
 8000712:	4293      	cmp	r3, r2
 8000714:	ddf7      	ble.n	8000706 <init_guitar_effect_delay+0x42>
	}
	// add function pointers
	self->callback = callback;
 8000716:	f500 20ba 	add.w	r0, r0, #380928	; 0x5d000
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <init_guitar_effect_delay+0x68>)
 800071c:	f8c0 3c38 	str.w	r3, [r0, #3128]	; 0xc38
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	00015f90 	.word	0x00015f90
 8000728:	000176ff 	.word	0x000176ff
 800072c:	080005a9 	.word	0x080005a9

08000730 <set_volumes>:



static void set_volumes(struct octave_effects_st* self){
	// reset output
	self->output_f32 = 0;
 8000730:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000778 <set_volumes+0x48>
 8000734:	ed80 7a06 	vstr	s14, [r0, #24]

	// calculate the new output defined by the voluem params
	self->output_f32 += self->input_f32 		* self->volumes_st.clean_f32;
 8000738:	edd0 7a05 	vldr	s15, [r0, #20]
 800073c:	edd0 6a02 	vldr	s13, [r0, #8]
 8000740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000748:	edc0 7a06 	vstr	s15, [r0, #24]
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 800074c:	ed90 7a07 	vldr	s14, [r0, #28]
 8000750:	edd0 6a03 	vldr	s13, [r0, #12]
 8000754:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800075c:	edc0 7a06 	vstr	s15, [r0, #24]
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 8000760:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8000764:	edd0 6a01 	vldr	s13, [r0, #4]
 8000768:	ee27 7a26 	vmul.f32	s14, s14, s13
 800076c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000770:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	00000000 	.word	0x00000000

0800077c <algorithm_octave_1_up>:
}

// Calculate the octave 1 HIGHER
static void algorithm_octave_1_up(struct octave_effects_st* self){
	// TODO
}
 800077c:	4770      	bx	lr

0800077e <algorithm_octave_1_down>:

// Calculate the octave 1 LOWER
static void algorithm_octave_1_down(struct octave_effects_st* self){
	// TODO
}
 800077e:	4770      	bx	lr

08000780 <subbandfilter_calculation>:
static void subbandfilter_calculation(struct octave_effects_st* self){
 8000780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000784:	4604      	mov	r4, r0
  float32_t input_f32=self->input_f32;
 8000786:	f8d0 c014 	ldr.w	ip, [r0, #20]
  for(int i=0;i<numberofsubbands;i++){
 800078a:	2300      	movs	r3, #0
 800078c:	e012      	b.n	80007b4 <subbandfilter_calculation+0x34>
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 800078e:	f103 01b6 	add.w	r1, r3, #182	; 0xb6
 8000792:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000796:	6808      	ldr	r0, [r1, #0]
 8000798:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800079c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80007a0:	6050      	str	r0, [r2, #4]
	  self->subbandfilter_dn1[i]		= self->subbandfilter_dn[i];
 80007a2:	f103 027e 	add.w	r2, r3, #126	; 0x7e
 80007a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80007aa:	6850      	ldr	r0, [r2, #4]
 80007ac:	6008      	str	r0, [r1, #0]
	  self->subbandfilter_dn[i]		= input_f32;
 80007ae:	f8c2 c004 	str.w	ip, [r2, #4]
  for(int i=0;i<numberofsubbands;i++){
 80007b2:	3301      	adds	r3, #1
 80007b4:	2b36      	cmp	r3, #54	; 0x36
 80007b6:	ddea      	ble.n	800078e <subbandfilter_calculation+0xe>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 80007b8:	f604 2594 	addw	r5, r4, #2708	; 0xa94
 80007bc:	2337      	movs	r3, #55	; 0x37
 80007be:	462a      	mov	r2, r5
 80007c0:	f504 6192 	add.w	r1, r4, #1168	; 0x490
 80007c4:	482d      	ldr	r0, [pc, #180]	; (800087c <subbandfilter_calculation+0xfc>)
 80007c6:	f005 fd59 	bl	800627c <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 80007ca:	f504 6737 	add.w	r7, r4, #2928	; 0xb70
 80007ce:	2337      	movs	r3, #55	; 0x37
 80007d0:	463a      	mov	r2, r7
 80007d2:	f204 516c 	addw	r1, r4, #1388	; 0x56c
 80007d6:	482a      	ldr	r0, [pc, #168]	; (8000880 <subbandfilter_calculation+0x100>)
 80007d8:	f005 fd50 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 80007dc:	f604 464c 	addw	r6, r4, #3148	; 0xc4c
 80007e0:	2337      	movs	r3, #55	; 0x37
 80007e2:	4632      	mov	r2, r6
 80007e4:	4639      	mov	r1, r7
 80007e6:	4628      	mov	r0, r5
 80007e8:	f005 fdfe 	bl	80063e8 <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 80007ec:	f604 6704 	addw	r7, r4, #3588	; 0xe04
 80007f0:	2337      	movs	r3, #55	; 0x37
 80007f2:	463a      	mov	r2, r7
 80007f4:	f504 7136 	add.w	r1, r4, #728	; 0x2d8
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <subbandfilter_calculation+0x104>)
 80007fa:	f005 fd3f 	bl	800627c <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 80007fe:	f504 686e 	add.w	r8, r4, #3808	; 0xee0
 8000802:	2337      	movs	r3, #55	; 0x37
 8000804:	4642      	mov	r2, r8
 8000806:	f504 716d 	add.w	r1, r4, #948	; 0x3b4
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <subbandfilter_calculation+0x108>)
 800080c:	f005 fd36 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000810:	f604 75bc 	addw	r5, r4, #4028	; 0xfbc
 8000814:	2337      	movs	r3, #55	; 0x37
 8000816:	462a      	mov	r2, r5
 8000818:	4641      	mov	r1, r8
 800081a:	4638      	mov	r0, r7
 800081c:	f005 fde4 	bl	80063e8 <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000820:	f604 5728 	addw	r7, r4, #3368	; 0xd28
 8000824:	2337      	movs	r3, #55	; 0x37
 8000826:	463a      	mov	r2, r7
 8000828:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <subbandfilter_calculation+0x10c>)
 800082e:	f005 fd25 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000832:	2337      	movs	r3, #55	; 0x37
 8000834:	462a      	mov	r2, r5
 8000836:	4639      	mov	r1, r7
 8000838:	4628      	mov	r0, r5
 800083a:	f005 fdd5 	bl	80063e8 <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 800083e:	2337      	movs	r3, #55	; 0x37
 8000840:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8000844:	4631      	mov	r1, r6
 8000846:	4628      	mov	r0, r5
 8000848:	f005 fcbe 	bl	80061c8 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 800084c:	2300      	movs	r3, #0
 800084e:	e010      	b.n	8000872 <subbandfilter_calculation+0xf2>
	  self->subbandfilter_yn2[i]		= self->subbandfilter_yn1[i];
 8000850:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8000854:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000858:	6810      	ldr	r0, [r2, #0]
 800085a:	f503 71ad 	add.w	r1, r3, #346	; 0x15a
 800085e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000862:	6048      	str	r0, [r1, #4]
	  self->subbandfilter_yn1[i]		= self->subbandfilter_output[i];
 8000864:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8000868:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800086c:	6809      	ldr	r1, [r1, #0]
 800086e:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000870:	3301      	adds	r3, #1
 8000872:	2b36      	cmp	r3, #54	; 0x36
 8000874:	ddec      	ble.n	8000850 <subbandfilter_calculation+0xd0>
}
 8000876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800087a:	bf00      	nop
 800087c:	2400001c 	.word	0x2400001c
 8000880:	240000f8 	.word	0x240000f8
 8000884:	240005c8 	.word	0x240005c8
 8000888:	240002b0 	.word	0x240002b0
 800088c:	240001d4 	.word	0x240001d4

08000890 <octave1up>:
static arm_biquad_cascade_df2T_instance_f32 highpass_iir_50hz_octave2;
static volatile float32_t highpass_coeff[5]={0.99538200, -1.99076399, 0.99538200, 1.99074267, -0.99078531};
static volatile float32_t highpass_state[10];


static void octave1up(struct octave_effects_st* self){
 8000890:	b538      	push	{r3, r4, r5, lr}
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 8000892:	4d0a      	ldr	r5, [pc, #40]	; (80008bc <octave1up+0x2c>)
 8000894:	2237      	movs	r2, #55	; 0x37
 8000896:	4629      	mov	r1, r5
 8000898:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800089c:	f005 fdfe 	bl	800649c <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 80008a0:	4c07      	ldr	r4, [pc, #28]	; (80008c0 <octave1up+0x30>)
 80008a2:	4623      	mov	r3, r4
 80008a4:	2237      	movs	r2, #55	; 0x37
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <octave1up+0x34>)
 80008a8:	4628      	mov	r0, r5
 80008aa:	f005 fd41 	bl	8006330 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 80008ae:	2301      	movs	r3, #1
 80008b0:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <octave1up+0x38>)
 80008b2:	4621      	mov	r1, r4
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <octave1up+0x3c>)
 80008b6:	f005 fabf 	bl	8005e38 <arm_biquad_cascade_df2T_f32>
}
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	24000410 	.word	0x24000410
 80008c0:	24000408 	.word	0x24000408
 80008c4:	240004ec 	.word	0x240004ec
 80008c8:	2400040c 	.word	0x2400040c
 80008cc:	240003c8 	.word	0x240003c8

080008d0 <octave2up>:

static void octave2up(struct octave_effects_st* self){
 80008d0:	b538      	push	{r3, r4, r5, lr}
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 80008d2:	4d0a      	ldr	r5, [pc, #40]	; (80008fc <octave2up+0x2c>)
 80008d4:	2237      	movs	r2, #55	; 0x37
 80008d6:	4629      	mov	r1, r5
 80008d8:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80008dc:	f005 fdde 	bl	800649c <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 80008e0:	4c07      	ldr	r4, [pc, #28]	; (8000900 <octave2up+0x30>)
 80008e2:	4623      	mov	r3, r4
 80008e4:	2237      	movs	r2, #55	; 0x37
 80008e6:	4907      	ldr	r1, [pc, #28]	; (8000904 <octave2up+0x34>)
 80008e8:	4628      	mov	r0, r5
 80008ea:	f005 fd21 	bl	8006330 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up_1, &octave1_up_filtered, 1);
 80008ee:	2301      	movs	r3, #1
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <octave2up+0x38>)
 80008f2:	4621      	mov	r1, r4
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <octave2up+0x3c>)
 80008f6:	f005 fa9f 	bl	8005e38 <arm_biquad_cascade_df2T_f32>
}
 80008fa:	bd38      	pop	{r3, r4, r5, pc}
 80008fc:	24000410 	.word	0x24000410
 8000900:	24000408 	.word	0x24000408
 8000904:	240004ec 	.word	0x240004ec
 8000908:	2400040c 	.word	0x2400040c
 800090c:	240003d4 	.word	0x240003d4

08000910 <subbandfilter_octave2_calculation>:
void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000914:	4604      	mov	r4, r0
  float32_t input_f32=self->input_f32;
 8000916:	f8d0 c014 	ldr.w	ip, [r0, #20]
  for(int i=0;i<numberofsubbands;i++){
 800091a:	2300      	movs	r3, #0
 800091c:	e012      	b.n	8000944 <subbandfilter_octave2_calculation+0x34>
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 800091e:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
 8000922:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000926:	6848      	ldr	r0, [r1, #4]
 8000928:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800092c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000930:	6010      	str	r0, [r2, #0]
	  self->subbandfilter_octave2_dn1[i]=self->subbandfilter_octave2_dn[i];
 8000932:	f503 72c9 	add.w	r2, r3, #402	; 0x192
 8000936:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800093a:	6810      	ldr	r0, [r2, #0]
 800093c:	6048      	str	r0, [r1, #4]
	  self->subbandfilter_octave2_dn[i] = input_f32;
 800093e:	f8c2 c000 	str.w	ip, [r2]
  for(int i=0;i<numberofsubbands;i++){
 8000942:	3301      	adds	r3, #1
 8000944:	2b36      	cmp	r3, #54	; 0x36
 8000946:	ddea      	ble.n	800091e <subbandfilter_octave2_calculation+0xe>
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000948:	f604 2594 	addw	r5, r4, #2708	; 0xa94
 800094c:	2337      	movs	r3, #55	; 0x37
 800094e:	462a      	mov	r2, r5
 8000950:	f604 01dc 	addw	r1, r4, #2268	; 0x8dc
 8000954:	482d      	ldr	r0, [pc, #180]	; (8000a0c <subbandfilter_octave2_calculation+0xfc>)
 8000956:	f005 fc91 	bl	800627c <arm_mult_f32>
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 800095a:	f504 6737 	add.w	r7, r4, #2928	; 0xb70
 800095e:	2337      	movs	r3, #55	; 0x37
 8000960:	463a      	mov	r2, r7
 8000962:	f604 11b8 	addw	r1, r4, #2488	; 0x9b8
 8000966:	482a      	ldr	r0, [pc, #168]	; (8000a10 <subbandfilter_octave2_calculation+0x100>)
 8000968:	f005 fc88 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 800096c:	f604 464c 	addw	r6, r4, #3148	; 0xc4c
 8000970:	2337      	movs	r3, #55	; 0x37
 8000972:	4632      	mov	r2, r6
 8000974:	4639      	mov	r1, r7
 8000976:	4628      	mov	r0, r5
 8000978:	f005 fd36 	bl	80063e8 <arm_add_f32>
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 800097c:	f604 6704 	addw	r7, r4, #3588	; 0xe04
 8000980:	2337      	movs	r3, #55	; 0x37
 8000982:	463a      	mov	r2, r7
 8000984:	f204 7124 	addw	r1, r4, #1828	; 0x724
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <subbandfilter_octave2_calculation+0x104>)
 800098a:	f005 fc77 	bl	800627c <arm_mult_f32>
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 800098e:	f504 686e 	add.w	r8, r4, #3808	; 0xee0
 8000992:	2337      	movs	r3, #55	; 0x37
 8000994:	4642      	mov	r2, r8
 8000996:	f504 6100 	add.w	r1, r4, #2048	; 0x800
 800099a:	481f      	ldr	r0, [pc, #124]	; (8000a18 <subbandfilter_octave2_calculation+0x108>)
 800099c:	f005 fc6e 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 80009a0:	f604 75bc 	addw	r5, r4, #4028	; 0xfbc
 80009a4:	2337      	movs	r3, #55	; 0x37
 80009a6:	462a      	mov	r2, r5
 80009a8:	4641      	mov	r1, r8
 80009aa:	4638      	mov	r0, r7
 80009ac:	f005 fd1c 	bl	80063e8 <arm_add_f32>
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 80009b0:	f604 5728 	addw	r7, r4, #3368	; 0xd28
 80009b4:	2337      	movs	r3, #55	; 0x37
 80009b6:	463a      	mov	r2, r7
 80009b8:	f504 61c9 	add.w	r1, r4, #1608	; 0x648
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <subbandfilter_octave2_calculation+0x10c>)
 80009be:	f005 fc5d 	bl	800627c <arm_mult_f32>
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 80009c2:	2337      	movs	r3, #55	; 0x37
 80009c4:	462a      	mov	r2, r5
 80009c6:	4639      	mov	r1, r7
 80009c8:	4628      	mov	r0, r5
 80009ca:	f005 fd0d 	bl	80063e8 <arm_add_f32>
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 80009ce:	2337      	movs	r3, #55	; 0x37
 80009d0:	f504 7290 	add.w	r2, r4, #288	; 0x120
 80009d4:	4631      	mov	r1, r6
 80009d6:	4628      	mov	r0, r5
 80009d8:	f005 fbf6 	bl	80061c8 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	e010      	b.n	8000a02 <subbandfilter_octave2_calculation+0xf2>
	  self->subbandfilter_octave2_yn2[i] 	= self->subbandfilter_octave2_yn1[i];
 80009e0:	f203 2236 	addw	r2, r3, #566	; 0x236
 80009e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80009e8:	6850      	ldr	r0, [r2, #4]
 80009ea:	f203 216e 	addw	r1, r3, #622	; 0x26e
 80009ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009f2:	6008      	str	r0, [r1, #0]
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 80009f4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80009f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	6051      	str	r1, [r2, #4]
  for(int i=0;i<numberofsubbands;i++){
 8000a00:	3301      	adds	r3, #1
 8000a02:	2b36      	cmp	r3, #54	; 0x36
 8000a04:	ddec      	ble.n	80009e0 <subbandfilter_octave2_calculation+0xd0>
}
 8000a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400001c 	.word	0x2400001c
 8000a10:	240000f8 	.word	0x240000f8
 8000a14:	240005c8 	.word	0x240005c8
 8000a18:	240002b0 	.word	0x240002b0
 8000a1c:	240001d4 	.word	0x240001d4

08000a20 <callback_octave_effect>:
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4604      	mov	r4, r0
 8000a24:	ee07 1a90 	vmov	s15, r1

	// 3. return value


	// LEGACY CODE
	self->input_f32 = (float32_t)input_i32;
 8000a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2c:	edc0 7a05 	vstr	s15, [r0, #20]
	// +1 octave
	subbandfilter_calculation(self);
 8000a30:	f7ff fea6 	bl	8000780 <subbandfilter_calculation>
	octave1up(self);
 8000a34:	4620      	mov	r0, r4
 8000a36:	f7ff ff2b 	bl	8000890 <octave1up>
	// save result
	self->octave_up_1_f32 = octave1_up_filtered;
 8000a3a:	4d1a      	ldr	r5, [pc, #104]	; (8000aa4 <callback_octave_effect+0x84>)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	61e3      	str	r3, [r4, #28]
//
	// +2 octave
	subbandfilter_octave2_calculation(self);
 8000a40:	4620      	mov	r0, r4
 8000a42:	f7ff ff65 	bl	8000910 <subbandfilter_octave2_calculation>
	octave2up(self);
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff ff42 	bl	80008d0 <octave2up>
	//		 save result
	self->octave_up_2_f32 = octave1_up_filtered;
 8000a4c:	edd5 7a00 	vldr	s15, [r5]
 8000a50:	edc4 7a08 	vstr	s15, [r4, #32]

	// Write to DAC
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a54:	ed94 7a07 	vldr	s14, [r4, #28]
 8000a58:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a5c:	edd4 6a03 	vldr	s13, [r4, #12]
 8000a60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a64:	ee27 7a26 	vmul.f32	s14, s14, s13
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a6c:	edd4 6a04 	vldr	s13, [r4, #16]
 8000a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a74:	ee67 7aa6 	vmul.f32	s15, s15, s13
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a78:	ee37 7a27 	vadd.f32	s14, s14, s15
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 8000a7c:	edd4 7a05 	vldr	s15, [r4, #20]
 8000a80:	edd4 6a02 	vldr	s13, [r4, #8]
 8000a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 8000a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a90:	ee77 7a87 	vadd.f32	s15, s15, s14
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8000a94:	edc4 7a06 	vstr	s15, [r4, #24]

	return self->output_f32;
}
 8000a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9c:	ee17 0a90 	vmov	r0, s15
 8000aa0:	bd38      	pop	{r3, r4, r5, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2400040c 	.word	0x2400040c

08000aa8 <init_guitar_effect_octave>:


void init_guitar_effect_octave(octave_effects_tst* self){
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	4604      	mov	r4, r0

	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 8000aac:	4e2f      	ldr	r6, [pc, #188]	; (8000b6c <init_guitar_effect_octave+0xc4>)
 8000aae:	4d30      	ldr	r5, [pc, #192]	; (8000b70 <init_guitar_effect_octave+0xc8>)
 8000ab0:	4633      	mov	r3, r6
 8000ab2:	462a      	mov	r2, r5
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	482f      	ldr	r0, [pc, #188]	; (8000b74 <init_guitar_effect_octave+0xcc>)
 8000ab8:	f005 fb7a 	bl	80061b0 <arm_biquad_cascade_df2T_init_f32>
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 8000abc:	4633      	mov	r3, r6
 8000abe:	462a      	mov	r2, r5
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	482d      	ldr	r0, [pc, #180]	; (8000b78 <init_guitar_effect_octave+0xd0>)
 8000ac4:	f005 fb74 	bl	80061b0 <arm_biquad_cascade_df2T_init_f32>
	// assign function pointers
	self->set_volumes			= set_volumes;
 8000ac8:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8000acc:	4a2b      	ldr	r2, [pc, #172]	; (8000b7c <init_guitar_effect_octave+0xd4>)
 8000ace:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <init_guitar_effect_octave+0xd8>)
 8000ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <init_guitar_effect_octave+0xdc>)
 8000ada:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	self->callback 				= callback_octave_effect;
 8000ade:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <init_guitar_effect_octave+0xe0>)
 8000ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	self->volumes_st.up_1_f32 = 1;
 8000ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ae8:	60e3      	str	r3, [r4, #12]
	self->volumes_st.up_2_f32 = 1;
 8000aea:	6123      	str	r3, [r4, #16]
	self->volumes_st.clean_f32      = 1;
 8000aec:	60a3      	str	r3, [r4, #8]
	for(int i=0; i<numberofsubbands;i++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	e039      	b.n	8000b66 <init_guitar_effect_octave+0xbe>
		subband_ones[i] = 1;
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <init_guitar_effect_octave+0xe4>)
 8000af4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000af8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000afc:	6011      	str	r1, [r2, #0]
		self->subbandfilter_dn2[i]		=	0;
 8000afe:	f103 01ec 	add.w	r1, r3, #236	; 0xec
 8000b02:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b06:	2200      	movs	r2, #0
 8000b08:	604a      	str	r2, [r1, #4]
		self->subbandfilter_dn1[i]		=	0;
 8000b0a:	f103 01b6 	add.w	r1, r3, #182	; 0xb6
 8000b0e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b12:	600a      	str	r2, [r1, #0]
		self->subbandfilter_dn[i]		=	0;
 8000b14:	f103 017e 	add.w	r1, r3, #126	; 0x7e
 8000b18:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b1c:	604a      	str	r2, [r1, #4]
		self->subbandfilter_yn1[i] 		= 	0;
 8000b1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8000b22:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b26:	600a      	str	r2, [r1, #0]
		self->subbandfilter_yn2[i] 		= 	0;
 8000b28:	f503 71ad 	add.w	r1, r3, #346	; 0x15a
 8000b2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b30:	604a      	str	r2, [r1, #4]

		self->subbandfilter_octave2_dn[i]		=	0;
 8000b32:	f503 71c9 	add.w	r1, r3, #402	; 0x192
 8000b36:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b3a:	600a      	str	r2, [r1, #0]
		self->subbandfilter_octave2_dn1[i]		=	0;
 8000b3c:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
 8000b40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b44:	604a      	str	r2, [r1, #4]
		self->subbandfilter_octave2_dn2[i]		=	0;
 8000b46:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8000b4a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b4e:	600a      	str	r2, [r1, #0]
		self->subbandfilter_octave2_yn1[i] 		= 	0;
 8000b50:	f203 2136 	addw	r1, r3, #566	; 0x236
 8000b54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b58:	604a      	str	r2, [r1, #4]
		self->subbandfilter_octave2_yn2[i] 		= 	0;
 8000b5a:	f203 216e 	addw	r1, r3, #622	; 0x26e
 8000b5e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000b62:	600a      	str	r2, [r1, #0]
	for(int i=0; i<numberofsubbands;i++){
 8000b64:	3301      	adds	r3, #1
 8000b66:	2b36      	cmp	r3, #54	; 0x36
 8000b68:	ddc3      	ble.n	8000af2 <init_guitar_effect_octave+0x4a>
	}

	// zero out the IIR filter states


}
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	240003e0 	.word	0x240003e0
 8000b70:	24000008 	.word	0x24000008
 8000b74:	240003c8 	.word	0x240003c8
 8000b78:	240003d4 	.word	0x240003d4
 8000b7c:	08000731 	.word	0x08000731
 8000b80:	0800077f 	.word	0x0800077f
 8000b84:	0800077d 	.word	0x0800077d
 8000b88:	08000a21 	.word	0x08000a21
 8000b8c:	240004ec 	.word	0x240004ec

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	9307      	str	r3, [sp, #28]
 8000b98:	9308      	str	r3, [sp, #32]
 8000b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8000b9e:	930b      	str	r3, [sp, #44]	; 0x2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0xcc>)
 8000ba2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000baa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bbe:	f042 0204 	orr.w	r2, r2, #4
 8000bc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bca:	f002 0204 	and.w	r2, r2, #4
 8000bce:	9202      	str	r2, [sp, #8]
 8000bd0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000be2:	f002 0201 	and.w	r2, r2, #1
 8000be6:	9203      	str	r2, [sp, #12]
 8000be8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bee:	f042 0202 	orr.w	r2, r2, #2
 8000bf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bfa:	f002 0202 	and.w	r2, r2, #2
 8000bfe:	9204      	str	r2, [sp, #16]
 8000c00:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c06:	f042 0220 	orr.w	r2, r2, #32
 8000c0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c12:	f002 0220 	and.w	r2, r2, #32
 8000c16:	9205      	str	r2, [sp, #20]
 8000c18:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2e:	9306      	str	r3, [sp, #24]
 8000c30:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000c32:	4c0b      	ldr	r4, [pc, #44]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f002 f922 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_CS_Pin */
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000c50:	a907      	add	r1, sp, #28
 8000c52:	4620      	mov	r0, r4
 8000c54:	f002 f806 	bl	8002c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	b00c      	add	sp, #48	; 0x30
 8000c5a:	bd10      	pop	{r4, pc}
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58021400 	.word	0x58021400

08000c64 <MX_DMA_Init>:
{
 8000c64:	b500      	push	{lr}
 8000c66:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_DMA_Init+0x5c>)
 8000c6a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c6e:	f042 0202 	orr.w	r2, r2, #2
 8000c72:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c76:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c7a:	f002 0202 	and.w	r2, r2, #2
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	200b      	movs	r0, #11
 8000ca0:	f000 febc 	bl	8001a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca4:	200b      	movs	r0, #11
 8000ca6:	f000 feef 	bl	8001a88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	4611      	mov	r1, r2
 8000cae:	2039      	movs	r0, #57	; 0x39
 8000cb0:	f000 feb4 	bl	8001a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cb4:	2039      	movs	r0, #57	; 0x39
 8000cb6:	f000 fee7 	bl	8001a88 <HAL_NVIC_EnableIRQ>
}
 8000cba:	b003      	add	sp, #12
 8000cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc0:	58024400 	.word	0x58024400

08000cc4 <Do_HighPass>:
int Do_HighPass (int inSample) {
 8000cc4:	ee07 0a10 	vmov	s14, r0
		a0 = 0.9547676565107223;
 8000cc8:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8000d50 <Do_HighPass+0x8c>
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <Do_HighPass+0x90>)
 8000cce:	ed83 6a00 	vstr	s12, [r3]
		a1 = -1.9095353130214445;
 8000cd2:	eddf 5a21 	vldr	s11, [pc, #132]	; 8000d58 <Do_HighPass+0x94>
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <Do_HighPass+0x98>)
 8000cd8:	edc3 5a00 	vstr	s11, [r3]
		a2 = 0.9547676565107223;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <Do_HighPass+0x9c>)
 8000cde:	ed83 6a00 	vstr	s12, [r3]
		b1 =-1.9074888914066748;
 8000ce2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000d64 <Do_HighPass+0xa0>
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <Do_HighPass+0xa4>)
 8000ce8:	edc3 6a00 	vstr	s13, [r3]
		b2 =0.9115817346362142;
 8000cec:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8000d6c <Do_HighPass+0xa8>
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <Do_HighPass+0xac>)
 8000cf2:	edc3 4a00 	vstr	s9, [r3]
	float inSampleF = (float)inSample;
 8000cf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			a0 * inSampleF
 8000cfa:	ee67 7a06 	vmul.f32	s15, s14, s12
			+ a1 * hp_in_z1
 8000cfe:	491d      	ldr	r1, [pc, #116]	; (8000d74 <Do_HighPass+0xb0>)
 8000d00:	ed91 5a00 	vldr	s10, [r1]
 8000d04:	ee65 5a25 	vmul.f32	s11, s10, s11
 8000d08:	ee77 7aa5 	vadd.f32	s15, s15, s11
			+ a2 * hp_in_z2
 8000d0c:	481a      	ldr	r0, [pc, #104]	; (8000d78 <Do_HighPass+0xb4>)
 8000d0e:	edd0 5a00 	vldr	s11, [r0]
 8000d12:	ee25 6a86 	vmul.f32	s12, s11, s12
 8000d16:	ee77 7a86 	vadd.f32	s15, s15, s12
			- b1 * hp_out_z1
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <Do_HighPass+0xb8>)
 8000d1c:	ed93 6a00 	vldr	s12, [r3]
 8000d20:	ee66 6a26 	vmul.f32	s13, s12, s13
 8000d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
			- b2 * hp_out_z2;
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <Do_HighPass+0xbc>)
 8000d2a:	edd2 6a00 	vldr	s13, [r2]
 8000d2e:	ee66 6aa4 	vmul.f32	s13, s13, s9
	float outSampleF =
 8000d32:	ee77 7ae6 	vsub.f32	s15, s15, s13
	hp_in_z2 = hp_in_z1;
 8000d36:	ed80 5a00 	vstr	s10, [r0]
	hp_in_z1 = inSampleF;
 8000d3a:	ed81 7a00 	vstr	s14, [r1]
	hp_out_z2 = hp_out_z1;
 8000d3e:	ed82 6a00 	vstr	s12, [r2]
	hp_out_z1 = outSampleF;
 8000d42:	edc3 7a00 	vstr	s15, [r3]
}
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	ee17 0a90 	vmov	r0, s15
 8000d4e:	4770      	bx	lr
 8000d50:	3f746ba7 	.word	0x3f746ba7
 8000d54:	2400a2f8 	.word	0x2400a2f8
 8000d58:	bff46ba7 	.word	0xbff46ba7
 8000d5c:	2400a2fc 	.word	0x2400a2fc
 8000d60:	2400a300 	.word	0x2400a300
 8000d64:	bff42899 	.word	0xbff42899
 8000d68:	2400a308 	.word	0x2400a308
 8000d6c:	3f695d6c 	.word	0x3f695d6c
 8000d70:	2400a30c 	.word	0x2400a30c
 8000d74:	2406812c 	.word	0x2406812c
 8000d78:	24068130 	.word	0x24068130
 8000d7c:	24068134 	.word	0x24068134
 8000d80:	24068138 	.word	0x24068138

08000d84 <Do_PitchShift>:
int Do_PitchShift(int sample) {
 8000d84:	b508      	push	{r3, lr}
	int sum = Do_HighPass(sample);
 8000d86:	f7ff ff9d 	bl	8000cc4 <Do_HighPass>
	Buf[WtrP] = sum;
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <Do_PitchShift+0x1b8>)
 8000d90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	int RdPtr_Int = roundf(Rd_P);
 8000d94:	4b6a      	ldr	r3, [pc, #424]	; (8000f40 <Do_PitchShift+0x1bc>)
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	fef8 7a67 	vrinta.f32	s15, s15
 8000d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da2:	ee17 3a90 	vmov	r3, s15
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000da6:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <Do_PitchShift+0x1c0>)
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	db3d      	blt.n	8000e2a <Do_PitchShift+0xa6>
 8000dae:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8000db2:	db3e      	blt.n	8000e32 <Do_PitchShift+0xae>
 8000db4:	4a63      	ldr	r2, [pc, #396]	; (8000f44 <Do_PitchShift+0x1c0>)
 8000db6:	6811      	ldr	r1, [r2, #0]
 8000db8:	2900      	cmp	r1, #0
 8000dba:	db38      	blt.n	8000e2e <Do_PitchShift+0xaa>
 8000dbc:	eba3 0161 	sub.w	r1, r3, r1, asr #1
	float Rd0 = (float) Buf[RdPtr_Int];
 8000dc0:	4a5e      	ldr	r2, [pc, #376]	; (8000f3c <Do_PitchShift+0x1b8>)
 8000dc2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8000dc6:	ed90 7a00 	vldr	s14, [r0]
 8000dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000dce:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000dd2:	edd2 6a00 	vldr	s13, [r2]
 8000dd6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000dda:	4a57      	ldr	r2, [pc, #348]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4859      	ldr	r0, [pc, #356]	; (8000f48 <Do_PitchShift+0x1c4>)
 8000de2:	6800      	ldr	r0, [r0, #0]
 8000de4:	4282      	cmp	r2, r0
 8000de6:	dc2d      	bgt.n	8000e44 <Do_PitchShift+0xc0>
 8000de8:	4a53      	ldr	r2, [pc, #332]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	db28      	blt.n	8000e44 <Do_PitchShift+0xc0>
 8000df2:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <Do_PitchShift+0x1c8>)
 8000df4:	ed92 6a00 	vldr	s12, [r2]
 8000df8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000dfc:	eeb4 6a67 	vcmp.f32	s12, s15
 8000e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e04:	d01e      	beq.n	8000e44 <Do_PitchShift+0xc0>
		int rel = WtrP-RdPtr_Int;
 8000e06:	4a4c      	ldr	r2, [pc, #304]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	1ad2      	subs	r2, r2, r3
		CrossFade = ((float)rel)/(float)Overlap;
 8000e0c:	ee07 2a90 	vmov	s15, r2
 8000e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e14:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <Do_PitchShift+0x1c4>)
 8000e16:	ed93 6a00 	vldr	s12, [r3]
 8000e1a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000e1e:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8000e22:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <Do_PitchShift+0x1cc>)
 8000e24:	edc3 5a00 	vstr	s11, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000e28:	e010      	b.n	8000e4c <Do_PitchShift+0xc8>
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000e2a:	3201      	adds	r2, #1
 8000e2c:	e7bf      	b.n	8000dae <Do_PitchShift+0x2a>
 8000e2e:	3101      	adds	r1, #1
 8000e30:	e7c4      	b.n	8000dbc <Do_PitchShift+0x38>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000e32:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <Do_PitchShift+0x1c0>)
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	2900      	cmp	r1, #0
 8000e38:	db02      	blt.n	8000e40 <Do_PitchShift+0xbc>
 8000e3a:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8000e3e:	e7bf      	b.n	8000dc0 <Do_PitchShift+0x3c>
 8000e40:	3101      	adds	r1, #1
 8000e42:	e7fa      	b.n	8000e3a <Do_PitchShift+0xb6>
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000e44:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d02b      	beq.n	8000ea4 <Do_PitchShift+0x120>
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <Do_PitchShift+0x1c4>)
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	dc28      	bgt.n	8000eac <Do_PitchShift+0x128>
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1a5b      	subs	r3, r3, r1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db23      	blt.n	8000eac <Do_PitchShift+0x128>
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <Do_PitchShift+0x1c8>)
 8000e66:	ed93 6a00 	vldr	s12, [r3]
 8000e6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e6e:	eeb4 6a67 	vcmp.f32	s12, s15
 8000e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e76:	d019      	beq.n	8000eac <Do_PitchShift+0x128>
			int rel = WtrP-RdPtr_Int2;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1a5b      	subs	r3, r3, r1
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <Do_PitchShift+0x1c4>)
 8000e88:	ed93 6a00 	vldr	s12, [r3]
 8000e8c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000e90:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8000e94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e98:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <Do_PitchShift+0x1cc>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000ea2:	e007      	b.n	8000eb4 <Do_PitchShift+0x130>
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <Do_PitchShift+0x1cc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e7cf      	b.n	8000e4c <Do_PitchShift+0xc8>
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d038      	beq.n	8000f26 <Do_PitchShift+0x1a2>
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <Do_PitchShift+0x1cc>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	ed93 6a00 	vldr	s12, [r3]
 8000ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ec6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000eca:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Rd_P += Shift;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <Do_PitchShift+0x1bc>)
 8000ed8:	ed93 7a00 	vldr	s14, [r3]
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <Do_PitchShift+0x1c8>)
 8000ede:	edd2 6a00 	vldr	s13, [r2]
 8000ee2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000ee6:	ed83 7a00 	vstr	s14, [r3]
	WtrP++;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	3201      	adds	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
	if (WtrP == BufSize) WtrP = 0;
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Do_PitchShift+0x1c0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d019      	beq.n	8000f30 <Do_PitchShift+0x1ac>
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <Do_PitchShift+0x1bc>)
 8000efe:	edd3 6a00 	vldr	s13, [r3]
 8000f02:	fef8 6a66 	vrinta.f32	s13, s13
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <Do_PitchShift+0x1c0>)
 8000f08:	ed93 7a00 	vldr	s14, [r3]
 8000f0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f10:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db02      	blt.n	8000f20 <Do_PitchShift+0x19c>
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <Do_PitchShift+0x1bc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	ee17 0a90 	vmov	r0, s15
 8000f24:	bd08      	pop	{r3, pc}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <Do_PitchShift+0x1cc>)
 8000f28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e7c1      	b.n	8000eb4 <Do_PitchShift+0x130>
	if (WtrP == BufSize) WtrP = 0;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <Do_PitchShift+0x1b4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e7e1      	b.n	8000efc <Do_PitchShift+0x178>
 8000f38:	2400a2f4 	.word	0x2400a2f4
 8000f3c:	240006a8 	.word	0x240006a8
 8000f40:	2400a2f0 	.word	0x2400a2f0
 8000f44:	2400038c 	.word	0x2400038c
 8000f48:	24000390 	.word	0x24000390
 8000f4c:	24000394 	.word	0x24000394
 8000f50:	2400a2e8 	.word	0x2400a2e8

08000f54 <HAL_I2S_RxHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000f56:	f002 031f 	and.w	r3, r2, #31
 8000f5a:	3310      	adds	r3, #16
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5c:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000f62:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f66:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f68:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dcf8      	bgt.n	8000f60 <HAL_I2S_RxHalfCpltCallback+0xc>
 8000f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f72:	f3bf 8f6f 	isb	sy
	ADC_READY_FLAG = 1;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 8000f7c:	4904      	ldr	r1, [pc, #16]	; (8000f90 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000f7e:	880b      	ldrh	r3, [r1, #0]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_I2S_RxHalfCpltCallback+0x48>)
 8000f84:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 8000f86:	884b      	ldrh	r3, [r1, #2]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	8053      	strh	r3, [r2, #2]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	24069284 	.word	0x24069284
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	240006a4 	.word	0x240006a4
 8000f9c:	2400a304 	.word	0x2400a304

08000fa0 <HAL_I2S_RxCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_I2S_RxCpltCallback+0x3c>)
 8000fa2:	f002 031f 	and.w	r3, r2, #31
 8000fa6:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa8:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <HAL_I2S_RxCpltCallback+0x40>)
 8000fae:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000fb2:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fb4:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dcf8      	bgt.n	8000fac <HAL_I2S_RxCpltCallback+0xc>
 8000fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fbe:	f3bf 8f6f 	isb	sy
	ADC_READY_FLAG = 1;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_I2S_RxCpltCallback+0x44>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000fc8:	4904      	ldr	r1, [pc, #16]	; (8000fdc <HAL_I2S_RxCpltCallback+0x3c>)
 8000fca:	890b      	ldrh	r3, [r1, #8]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_I2S_RxCpltCallback+0x48>)
 8000fd0:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000fd2:	894b      	ldrh	r3, [r1, #10]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	8053      	strh	r3, [r2, #2]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	24069284 	.word	0x24069284
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	240006a4 	.word	0x240006a4
 8000fe8:	2400a304 	.word	0x2400a304

08000fec <HAL_I2S_TxHalfCpltCallback>:
	DAC_HALF_COMPLETE_FLAG = 1;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_I2S_TxHalfCpltCallback+0x30>)
 8000ff4:	f002 031f 	and.w	r3, r2, #31
 8000ff8:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <HAL_I2S_TxHalfCpltCallback+0x34>)
 8001000:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001004:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001006:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001008:	2b00      	cmp	r3, #0
 800100a:	dcf8      	bgt.n	8000ffe <HAL_I2S_TxHalfCpltCallback+0x12>
 800100c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001010:	f3bf 8f6f 	isb	sy
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2400a2ec 	.word	0x2400a2ec
 800101c:	240681c4 	.word	0x240681c4
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_I2S_TxCpltCallback>:
	DAC_HALF_COMPLETE_FLAG = 0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_I2S_TxCpltCallback+0x2c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_I2S_TxCpltCallback+0x30>)
 800102c:	f002 031f 	and.w	r3, r2, #31
 8001030:	3310      	adds	r3, #16
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <HAL_I2S_TxCpltCallback+0x34>)
 8001038:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800103c:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800103e:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001040:	2b00      	cmp	r3, #0
 8001042:	dcf8      	bgt.n	8001036 <HAL_I2S_TxCpltCallback+0x12>
 8001044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2400a2ec 	.word	0x2400a2ec
 8001054:	240681c4 	.word	0x240681c4
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105e:	e7fe      	b.n	800105e <Error_Handler+0x2>

08001060 <MX_I2S2_Init>:
{
 8001060:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <MX_I2S2_Init+0x40>)
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_I2S2_Init+0x44>)
 8001066:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001068:	2304      	movs	r3, #4
 800106a:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800106c:	2300      	movs	r3, #0
 800106e:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001074:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001076:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001078:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800107c:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800107e:	6183      	str	r3, [r0, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001080:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8001082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001086:	6203      	str	r3, [r0, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8001088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800108c:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 800108e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001092:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001094:	f001 ff42 	bl	8002f1c <HAL_I2S_Init>
 8001098:	b900      	cbnz	r0, 800109c <MX_I2S2_Init+0x3c>
}
 800109a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800109c:	f7ff ffde 	bl	800105c <Error_Handler>
 80010a0:	240680b4 	.word	0x240680b4
 80010a4:	40003800 	.word	0x40003800

080010a8 <MX_SPI3_Init>:
{
 80010a8:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <MX_SPI3_Init+0x54>)
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_SPI3_Init+0x58>)
 80010ae:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	2300      	movs	r3, #0
 80010b8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ba:	2207      	movs	r2, #7
 80010bc:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c0:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010c6:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010cc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ce:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80010d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	6342      	str	r2, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010dc:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010de:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010e0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010e2:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010e4:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010e6:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010e8:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ea:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ec:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ee:	f004 fc51 	bl	8005994 <HAL_SPI_Init>
 80010f2:	b900      	cbnz	r0, 80010f6 <MX_SPI3_Init+0x4e>
}
 80010f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010f6:	f7ff ffb1 	bl	800105c <Error_Handler>
 80010fa:	bf00      	nop
 80010fc:	2406813c 	.word	0x2406813c
 8001100:	40003c00 	.word	0x40003c00

08001104 <MX_I2S1_Init>:
{
 8001104:	b508      	push	{r3, lr}
  hi2s1.Instance = SPI1;
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_I2S1_Init+0x38>)
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <MX_I2S1_Init+0x3c>)
 800110a:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800110c:	2306      	movs	r3, #6
 800110e:	6043      	str	r3, [r0, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001110:	2300      	movs	r3, #0
 8001112:	6083      	str	r3, [r0, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	60c2      	str	r2, [r0, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800111a:	6103      	str	r3, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800111c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001120:	6142      	str	r2, [r0, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001122:	6183      	str	r3, [r0, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001124:	61c3      	str	r3, [r0, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001126:	6203      	str	r3, [r0, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8001128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112c:	6242      	str	r2, [r0, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800112e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001130:	f001 fef4 	bl	8002f1c <HAL_I2S_Init>
 8001134:	b900      	cbnz	r0, 8001138 <MX_I2S1_Init+0x34>
}
 8001136:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001138:	f7ff ff90 	bl	800105c <Error_Handler>
 800113c:	2406803c 	.word	0x2406803c
 8001140:	40013000 	.word	0x40013000

08001144 <SystemClock_Config>:
{
 8001144:	b500      	push	{lr}
 8001146:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001148:	224c      	movs	r2, #76	; 0x4c
 800114a:	2100      	movs	r1, #0
 800114c:	a80b      	add	r0, sp, #44	; 0x2c
 800114e:	f005 f9e9 	bl	8006524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001152:	2220      	movs	r2, #32
 8001154:	2100      	movs	r1, #0
 8001156:	a803      	add	r0, sp, #12
 8001158:	f005 f9e4 	bl	8006524 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800115c:	2002      	movs	r0, #2
 800115e:	f002 f885 	bl	800326c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <SystemClock_Config+0x108>)
 8001168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <SystemClock_Config+0x10c>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001180:	619a      	str	r2, [r3, #24]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <SystemClock_Config+0x10c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001194:	d0fa      	beq.n	800118c <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <SystemClock_Config+0x110>)
 8001198:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800119c:	f042 0202 	orr.w	r2, r2, #2
 80011a0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <SystemClock_Config+0x10c>)
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <SystemClock_Config+0x108>)
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <SystemClock_Config+0x10c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80011e2:	d0fa      	beq.n	80011da <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80011f4:	2205      	movs	r2, #5
 80011f6:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011f8:	21c0      	movs	r1, #192	; 0xc0
 80011fa:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011fc:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011fe:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001200:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001202:	2308      	movs	r3, #8
 8001204:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001206:	2300      	movs	r3, #0
 8001208:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800120a:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	a80b      	add	r0, sp, #44	; 0x2c
 800120e:	f002 f877 	bl	8003300 <HAL_RCC_OscConfig>
 8001212:	b9b0      	cbnz	r0, 8001242 <SystemClock_Config+0xfe>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	233f      	movs	r3, #63	; 0x3f
 8001216:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2303      	movs	r3, #3
 800121a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001220:	2308      	movs	r3, #8
 8001222:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001228:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001230:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001232:	2104      	movs	r1, #4
 8001234:	a803      	add	r0, sp, #12
 8001236:	f002 fcb7 	bl	8003ba8 <HAL_RCC_ClockConfig>
 800123a:	b920      	cbnz	r0, 8001246 <SystemClock_Config+0x102>
}
 800123c:	b01f      	add	sp, #124	; 0x7c
 800123e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001242:	f7ff ff0b 	bl	800105c <Error_Handler>
    Error_Handler();
 8001246:	f7ff ff09 	bl	800105c <Error_Handler>
 800124a:	bf00      	nop
 800124c:	58000400 	.word	0x58000400
 8001250:	58024800 	.word	0x58024800
 8001254:	58024400 	.word	0x58024400

08001258 <main>:
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	ed2d 8b02 	vpush	{d8}
 800125e:	b085      	sub	sp, #20
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001260:	4ba9      	ldr	r3, [pc, #676]	; (8001508 <main+0x2b0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001268:	d113      	bne.n	8001292 <main+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 800126a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800126e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001272:	4ba5      	ldr	r3, [pc, #660]	; (8001508 <main+0x2b0>)
 8001274:	2200      	movs	r2, #0
 8001276:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800127a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800127e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001288:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800128e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001292:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <main+0x2b0>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800129a:	d127      	bne.n	80012ec <main+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <main+0x2b0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80012a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012ac:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80012b0:	e000      	b.n	80012b4 <main+0x5c>
    } while(sets-- != 0U);
 80012b2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012b4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012b8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012bc:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80012c0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80012c4:	4990      	ldr	r1, [pc, #576]	; (8001508 <main+0x2b0>)
 80012c6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80012ca:	4613      	mov	r3, r2
 80012cc:	3a01      	subs	r2, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f2      	bne.n	80012b8 <main+0x60>
    } while(sets-- != 0U);
 80012d2:	1e43      	subs	r3, r0, #1
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d1ec      	bne.n	80012b2 <main+0x5a>
 80012d8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012dc:	694b      	ldr	r3, [r1, #20]
 80012de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e2:	614b      	str	r3, [r1, #20]
 80012e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012e8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80012ec:	f000 fb2a 	bl	8001944 <HAL_Init>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4c86      	ldr	r4, [pc, #536]	; (800150c <main+0x2b4>)
 80012f2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80012fe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 800130a:	f7ff ff1b 	bl	8001144 <SystemClock_Config>
  __HAL_RCC_SPI1_CLK_ENABLE();
 800130e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8001312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001316:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800131a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800131e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	9b01      	ldr	r3, [sp, #4]
  MX_GPIO_Init();
 8001326:	f7ff fc33 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 800132a:	f7ff fc9b 	bl	8000c64 <MX_DMA_Init>
  MX_I2S2_Init();
 800132e:	f7ff fe97 	bl	8001060 <MX_I2S2_Init>
  MX_SPI3_Init();
 8001332:	f7ff feb9 	bl	80010a8 <MX_SPI3_Init>
  MX_I2S1_Init();
 8001336:	f7ff fee5 	bl	8001104 <MX_I2S1_Init>
  for(int i=0; i<4; i++){
 800133a:	2300      	movs	r3, #0
 800133c:	e007      	b.n	800134e <main+0xf6>
	  my_data[i] = 0x0000;
 800133e:	2200      	movs	r2, #0
 8001340:	4973      	ldr	r1, [pc, #460]	; (8001510 <main+0x2b8>)
 8001342:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  rx_data_i2s[i]= 0x0000;
 8001346:	4973      	ldr	r1, [pc, #460]	; (8001514 <main+0x2bc>)
 8001348:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0; i<4; i++){
 800134c:	3301      	adds	r3, #1
 800134e:	2b03      	cmp	r3, #3
 8001350:	ddf5      	ble.n	800133e <main+0xe6>
  ad1939_init(&hspi3);
 8001352:	4871      	ldr	r0, [pc, #452]	; (8001518 <main+0x2c0>)
 8001354:	f7ff f88a 	bl	800046c <ad1939_init>
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 8001358:	2204      	movs	r2, #4
 800135a:	496d      	ldr	r1, [pc, #436]	; (8001510 <main+0x2b8>)
 800135c:	486f      	ldr	r0, [pc, #444]	; (800151c <main+0x2c4>)
 800135e:	f001 febd 	bl	80030dc <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 8001362:	2204      	movs	r2, #4
 8001364:	496b      	ldr	r1, [pc, #428]	; (8001514 <main+0x2bc>)
 8001366:	486e      	ldr	r0, [pc, #440]	; (8001520 <main+0x2c8>)
 8001368:	f001 ff1c 	bl	80031a4 <HAL_I2S_Receive_DMA>
  init_guitar_effect_delay(&delay_effect);
 800136c:	486d      	ldr	r0, [pc, #436]	; (8001524 <main+0x2cc>)
 800136e:	f7ff f9a9 	bl	80006c4 <init_guitar_effect_delay>
  init_guitar_effect_octave(&octave_effects_st);
 8001372:	486d      	ldr	r0, [pc, #436]	; (8001528 <main+0x2d0>)
 8001374:	f7ff fb98 	bl	8000aa8 <init_guitar_effect_octave>
	volatile float32_t len_f32 = 48000;
 8001378:	4b6c      	ldr	r3, [pc, #432]	; (800152c <main+0x2d4>)
 800137a:	9302      	str	r3, [sp, #8]
	int state = 1;
 800137c:	2601      	movs	r6, #1
 800137e:	e028      	b.n	80013d2 <main+0x17a>
		int32_t value_from_ADC = adc_data_bf.value/2; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 8001380:	1c6c      	adds	r4, r5, #1
 8001382:	e032      	b.n	80013ea <main+0x192>
			len_f32 += 0.1;
 8001384:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001388:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800138c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80014f8 <main+0x2a0>
 8001390:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001394:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001398:	ed8d 7a02 	vstr	s14, [sp, #8]
 800139c:	e03a      	b.n	8001414 <main+0x1bc>
			mul_val_f32=(float)n_2/len_f32;
 800139e:	ed9d 7a03 	vldr	s14, [sp, #12]
 80013a2:	eddd 7a02 	vldr	s15, [sp, #8]
 80013a6:	ee87 8a27 	vdiv.f32	s16, s14, s15
			n_2= n_2-1;
 80013aa:	eddd 7a03 	vldr	s15, [sp, #12]
 80013ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b6:	edcd 7a03 	vstr	s15, [sp, #12]
 80013ba:	e046      	b.n	800144a <main+0x1f2>
		mul_val_f32 +=(sin(freq_f32*6.28*n/len_f32)>0-0.5)/(float)len;
 80013bc:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001530 <main+0x2d8>
 80013c0:	e071      	b.n	80014a6 <main+0x24e>
			my_data[6] = output_buffer.raw_low;
 80013c2:	495c      	ldr	r1, [pc, #368]	; (8001534 <main+0x2dc>)
 80013c4:	880b      	ldrh	r3, [r1, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4a51      	ldr	r2, [pc, #324]	; (8001510 <main+0x2b8>)
 80013ca:	8193      	strh	r3, [r2, #12]
			my_data[7] = output_buffer.raw_high;
 80013cc:	884b      	ldrh	r3, [r1, #2]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	81d3      	strh	r3, [r2, #14]
	  if (ADC_READY_FLAG){
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <main+0x2e0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0fb      	beq.n	80013d2 <main+0x17a>
		  ADC_READY_FLAG  = 0;
 80013da:	4b57      	ldr	r3, [pc, #348]	; (8001538 <main+0x2e0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
		int32_t value_from_ADC = adc_data_bf.value/2; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 80013e0:	4b56      	ldr	r3, [pc, #344]	; (800153c <main+0x2e4>)
 80013e2:	681d      	ldr	r5, [r3, #0]
 80013e4:	462c      	mov	r4, r5
 80013e6:	4295      	cmp	r5, r2
 80013e8:	dbca      	blt.n	8001380 <main+0x128>
 80013ea:	1064      	asrs	r4, r4, #1
		output_buffer.value =octave_effects_st.callback(&octave_effects_st,value_from_ADC);
 80013ec:	484e      	ldr	r0, [pc, #312]	; (8001528 <main+0x2d0>)
 80013ee:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80013f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013f6:	4621      	mov	r1, r4
 80013f8:	4798      	blx	r3
 80013fa:	4f4e      	ldr	r7, [pc, #312]	; (8001534 <main+0x2dc>)
 80013fc:	6038      	str	r0, [r7, #0]
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_buffer.value;
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff fcc0 	bl	8000d84 <Do_PitchShift>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4418      	add	r0, r3
 8001408:	6038      	str	r0, [r7, #0]
		if(value_from_ADC>0x1FFFFF00){
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <main+0x2e8>)
 800140c:	429d      	cmp	r5, r3
 800140e:	ddb9      	ble.n	8001384 <main+0x12c>
			len_f32 = 500;
 8001410:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <main+0x2ec>)
 8001412:	9302      	str	r3, [sp, #8]
		if( len_f32 > 10000){
 8001414:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001418:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8001548 <main+0x2f0>
 800141c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	dd01      	ble.n	800142a <main+0x1d2>
			len_f32  = 10000;
 8001426:	edcd 7a02 	vstr	s15, [sp, #8]
		if(state){
 800142a:	2e00      	cmp	r6, #0
 800142c:	d0b7      	beq.n	800139e <main+0x146>
			mul_val_f32=(float)n_2/len_f32;
 800142e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001432:	eddd 7a02 	vldr	s15, [sp, #8]
 8001436:	ee87 8a27 	vdiv.f32	s16, s14, s15
			n_2=n_2+1;
 800143a:	eddd 7a03 	vldr	s15, [sp, #12]
 800143e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001442:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001446:	edcd 7a03 	vstr	s15, [sp, #12]
		if(n_2>=len_f32){
 800144a:	ed9d 7a03 	vldr	s14, [sp, #12]
 800144e:	eddd 7a02 	vldr	s15, [sp, #8]
 8001452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	db00      	blt.n	800145e <main+0x206>
			state= 0;
 800145c:	2600      	movs	r6, #0
		if(n_2 == 0){
 800145e:	eddd 7a03 	vldr	s15, [sp, #12]
 8001462:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	d100      	bne.n	800146e <main+0x216>
			state=1;
 800146c:	2601      	movs	r6, #1
		if(mul_val_f32 >1.0){
 800146e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001472:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd01      	ble.n	8001480 <main+0x228>
			mul_val_f32 = 1.0;
 800147c:	eeb0 8a67 	vmov.f32	s16, s15
		mul_val_f32 +=(sin(freq_f32*6.28*n/len_f32)>0-0.5)/(float)len;
 8001480:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001484:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001488:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8001500 <main+0x2a8>
 800148c:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8001490:	f005 f876 	bl	8006580 <sin>
 8001494:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
 8001498:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd8c      	ble.n	80013bc <main+0x164>
 80014a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014a6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800154c <main+0x2f4>
 80014aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ae:	ee38 8a27 	vadd.f32	s16, s16, s15
		output_buffer.value = (int32_t)((float32_t)output_buffer.value * mul_val_f32);
 80014b2:	4c20      	ldr	r4, [pc, #128]	; (8001534 <main+0x2dc>)
 80014b4:	edd4 7a00 	vldr	s15, [r4]
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80014c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c4:	edc4 7a00 	vstr	s15, [r4]
		output_buffer.value = delay_effect.callback(&delay_effect,output_buffer.value);
 80014c8:	4816      	ldr	r0, [pc, #88]	; (8001524 <main+0x2cc>)
 80014ca:	f500 23ba 	add.w	r3, r0, #380928	; 0x5d000
 80014ce:	f8d3 3c38 	ldr.w	r3, [r3, #3128]	; 0xc38
 80014d2:	6821      	ldr	r1, [r4, #0]
 80014d4:	4798      	blx	r3
 80014d6:	6020      	str	r0, [r4, #0]
		if ( DAC_HALF_COMPLETE_FLAG) {
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <main+0x2f8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f43f af70 	beq.w	80013c2 <main+0x16a>
			my_data[2] = output_buffer.raw_low;
 80014e2:	8823      	ldrh	r3, [r4, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <main+0x2b8>)
 80014e8:	8093      	strh	r3, [r2, #4]
			my_data[3] = output_buffer.raw_high;
 80014ea:	8863      	ldrh	r3, [r4, #2]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	80d3      	strh	r3, [r2, #6]
 80014f0:	e76f      	b.n	80013d2 <main+0x17a>
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	9999999a 	.word	0x9999999a
 80014fc:	3fb99999 	.word	0x3fb99999
	...
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	58024400 	.word	0x58024400
 8001510:	240681c4 	.word	0x240681c4
 8001514:	24069284 	.word	0x24069284
 8001518:	2406813c 	.word	0x2406813c
 800151c:	240680b4 	.word	0x240680b4
 8001520:	2406803c 	.word	0x2406803c
 8001524:	2400a310 	.word	0x2400a310
 8001528:	240681d4 	.word	0x240681d4
 800152c:	473b8000 	.word	0x473b8000
 8001530:	00000000 	.word	0x00000000
 8001534:	24069280 	.word	0x24069280
 8001538:	240006a4 	.word	0x240006a4
 800153c:	2400a304 	.word	0x2400a304
 8001540:	3ffffe01 	.word	0x3ffffe01
 8001544:	43fa0000 	.word	0x43fa0000
 8001548:	461c4000 	.word	0x461c4000
 800154c:	459c4000 	.word	0x459c4000
 8001550:	2400a2ec 	.word	0x2400a2ec

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_MspInit+0x20>)
 8001558:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800155c:	f042 0202 	orr.w	r2, r2, #2
 8001560:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	b002      	add	sp, #8
 8001572:	4770      	bx	lr
 8001574:	58024400 	.word	0x58024400

08001578 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800157c:	b0be      	sub	sp, #248	; 0xf8
 800157e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	2100      	movs	r1, #0
 8001582:	9139      	str	r1, [sp, #228]	; 0xe4
 8001584:	913a      	str	r1, [sp, #232]	; 0xe8
 8001586:	913b      	str	r1, [sp, #236]	; 0xec
 8001588:	913c      	str	r1, [sp, #240]	; 0xf0
 800158a:	913d      	str	r1, [sp, #244]	; 0xf4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	22c8      	movs	r2, #200	; 0xc8
 800158e:	a806      	add	r0, sp, #24
 8001590:	f004 ffc8 	bl	8006524 <memset>
  if(hi2s->Instance==SPI1)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	4a6f      	ldr	r2, [pc, #444]	; (8001754 <HAL_I2S_MspInit+0x1dc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d005      	beq.n	80015a8 <HAL_I2S_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hi2s->Instance==SPI2)
 800159c:	4a6e      	ldr	r2, [pc, #440]	; (8001758 <HAL_I2S_MspInit+0x1e0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d06f      	beq.n	8001682 <HAL_I2S_MspInit+0x10a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015a2:	b03e      	add	sp, #248	; 0xf8
 80015a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ac:	2300      	movs	r3, #0
 80015ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	a806      	add	r0, sp, #24
 80015b4:	f002 fd82 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d15c      	bne.n	8001676 <HAL_I2S_MspInit+0xfe>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015bc:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_I2S_MspInit+0x1e4>)
 80015be:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80015ca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015d2:	9200      	str	r2, [sp, #0]
 80015d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015e6:	f002 0201 	and.w	r2, r2, #1
 80015ea:	9201      	str	r2, [sp, #4]
 80015ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8001606:	2330      	movs	r3, #48	; 0x30
 8001608:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	f04f 0802 	mov.w	r8, #2
 800160e:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2701      	movs	r7, #1
 8001614:	973b      	str	r7, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2500      	movs	r5, #0
 8001618:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161a:	2605      	movs	r6, #5
 800161c:	963d      	str	r6, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	a939      	add	r1, sp, #228	; 0xe4
 8001620:	484f      	ldr	r0, [pc, #316]	; (8001760 <HAL_I2S_MspInit+0x1e8>)
 8001622:	f001 fb1f 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	973b      	str	r7, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001634:	963d      	str	r6, [sp, #244]	; 0xf4
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001636:	a939      	add	r1, sp, #228	; 0xe4
 8001638:	484a      	ldr	r0, [pc, #296]	; (8001764 <HAL_I2S_MspInit+0x1ec>)
 800163a:	f001 fb13 	bl	8002c64 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800163e:	484a      	ldr	r0, [pc, #296]	; (8001768 <HAL_I2S_MspInit+0x1f0>)
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_I2S_MspInit+0x1f4>)
 8001642:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001644:	2325      	movs	r3, #37	; 0x25
 8001646:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001648:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164a:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001658:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165c:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800165e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001662:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001664:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001666:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001668:	f000 fc42 	bl	8001ef0 <HAL_DMA_Init>
 800166c:	b930      	cbnz	r0, 800167c <HAL_I2S_MspInit+0x104>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_I2S_MspInit+0x1f0>)
 8001670:	64a3      	str	r3, [r4, #72]	; 0x48
 8001672:	639c      	str	r4, [r3, #56]	; 0x38
 8001674:	e795      	b.n	80015a2 <HAL_I2S_MspInit+0x2a>
      Error_Handler();
 8001676:	f7ff fcf1 	bl	800105c <Error_Handler>
 800167a:	e79f      	b.n	80015bc <HAL_I2S_MspInit+0x44>
      Error_Handler();
 800167c:	f7ff fcee 	bl	800105c <Error_Handler>
 8001680:	e7f5      	b.n	800166e <HAL_I2S_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001686:	2300      	movs	r3, #0
 8001688:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	a806      	add	r0, sp, #24
 800168e:	f002 fd15 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 8001692:	2800      	cmp	r0, #0
 8001694:	d158      	bne.n	8001748 <HAL_I2S_MspInit+0x1d0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_I2S_MspInit+0x1e4>)
 8001698:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800169c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80016a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80016a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016ac:	9203      	str	r2, [sp, #12]
 80016ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016b4:	f042 0204 	orr.w	r2, r2, #4
 80016b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016c0:	f002 0204 	and.w	r2, r2, #4
 80016c4:	9204      	str	r2, [sp, #16]
 80016c6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016cc:	f042 0202 	orr.w	r2, r2, #2
 80016d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	9305      	str	r3, [sp, #20]
 80016de:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e0:	2602      	movs	r6, #2
 80016e2:	9639      	str	r6, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2500      	movs	r5, #0
 80016e8:	953b      	str	r5, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ec:	2705      	movs	r7, #5
 80016ee:	973d      	str	r7, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	a939      	add	r1, sp, #228	; 0xe4
 80016f2:	481f      	ldr	r0, [pc, #124]	; (8001770 <HAL_I2S_MspInit+0x1f8>)
 80016f4:	f001 fab6 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016fc:	9339      	str	r3, [sp, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	963a      	str	r6, [sp, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	953b      	str	r5, [sp, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	953c      	str	r5, [sp, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001704:	973d      	str	r7, [sp, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	a939      	add	r1, sp, #228	; 0xe4
 8001708:	481a      	ldr	r0, [pc, #104]	; (8001774 <HAL_I2S_MspInit+0x1fc>)
 800170a:	f001 faab 	bl	8002c64 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA2_Stream1;
 800170e:	481a      	ldr	r0, [pc, #104]	; (8001778 <HAL_I2S_MspInit+0x200>)
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_I2S_MspInit+0x204>)
 8001712:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001714:	2328      	movs	r3, #40	; 0x28
 8001716:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001722:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172e:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001734:	61c3      	str	r3, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800173a:	f000 fbd9 	bl	8001ef0 <HAL_DMA_Init>
 800173e:	b930      	cbnz	r0, 800174e <HAL_I2S_MspInit+0x1d6>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_I2S_MspInit+0x200>)
 8001742:	6463      	str	r3, [r4, #68]	; 0x44
 8001744:	639c      	str	r4, [r3, #56]	; 0x38
}
 8001746:	e72c      	b.n	80015a2 <HAL_I2S_MspInit+0x2a>
      Error_Handler();
 8001748:	f7ff fc88 	bl	800105c <Error_Handler>
 800174c:	e7a3      	b.n	8001696 <HAL_I2S_MspInit+0x11e>
      Error_Handler();
 800174e:	f7ff fc85 	bl	800105c <Error_Handler>
 8001752:	e7f5      	b.n	8001740 <HAL_I2S_MspInit+0x1c8>
 8001754:	40013000 	.word	0x40013000
 8001758:	40003800 	.word	0x40003800
 800175c:	58024400 	.word	0x58024400
 8001760:	58020000 	.word	0x58020000
 8001764:	58021800 	.word	0x58021800
 8001768:	24067f4c 	.word	0x24067f4c
 800176c:	40020010 	.word	0x40020010
 8001770:	58020800 	.word	0x58020800
 8001774:	58020400 	.word	0x58020400
 8001778:	24067fc4 	.word	0x24067fc4
 800177c:	40020428 	.word	0x40020428

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b0bd      	sub	sp, #244	; 0xf4
 8001784:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	2100      	movs	r1, #0
 8001788:	9137      	str	r1, [sp, #220]	; 0xdc
 800178a:	9138      	str	r1, [sp, #224]	; 0xe0
 800178c:	9139      	str	r1, [sp, #228]	; 0xe4
 800178e:	913a      	str	r1, [sp, #232]	; 0xe8
 8001790:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001792:	22c8      	movs	r2, #200	; 0xc8
 8001794:	a804      	add	r0, sp, #16
 8001796:	f004 fec5 	bl	8006524 <memset>
  if(hspi->Instance==SPI3)
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_SPI_MspInit+0xd8>)
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017a2:	b03d      	add	sp, #244	; 0xf4
 80017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80017a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017aa:	2300      	movs	r3, #0
 80017ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b0:	a804      	add	r0, sp, #16
 80017b2:	f002 fc83 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d14b      	bne.n	8001852 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_SPI_MspInit+0xdc>)
 80017bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80017c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017cc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80017d0:	9201      	str	r2, [sp, #4]
 80017d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017d8:	f042 0202 	orr.w	r2, r2, #2
 80017dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017e4:	f002 0202 	and.w	r2, r2, #2
 80017e8:	9202      	str	r2, [sp, #8]
 80017ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017f0:	f042 0204 	orr.w	r2, r2, #4
 80017f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	9303      	str	r3, [sp, #12]
 8001802:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2502      	movs	r5, #2
 800180a:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2400      	movs	r4, #0
 800180e:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001812:	2307      	movs	r3, #7
 8001814:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	a937      	add	r1, sp, #220	; 0xdc
 8001818:	4811      	ldr	r0, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0xe0>)
 800181a:	f001 fa23 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	943a      	str	r4, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800182a:	2706      	movs	r7, #6
 800182c:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	4e0d      	ldr	r6, [pc, #52]	; (8001864 <HAL_SPI_MspInit+0xe4>)
 8001830:	a937      	add	r1, sp, #220	; 0xdc
 8001832:	4630      	mov	r0, r6
 8001834:	f001 fa16 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800183c:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	9439      	str	r4, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	933a      	str	r3, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001846:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	a937      	add	r1, sp, #220	; 0xdc
 800184a:	4630      	mov	r0, r6
 800184c:	f001 fa0a 	bl	8002c64 <HAL_GPIO_Init>
}
 8001850:	e7a7      	b.n	80017a2 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8001852:	f7ff fc03 	bl	800105c <Error_Handler>
 8001856:	e7b0      	b.n	80017ba <HAL_SPI_MspInit+0x3a>
 8001858:	40003c00 	.word	0x40003c00
 800185c:	58024400 	.word	0x58024400
 8001860:	58020400 	.word	0x58020400
 8001864:	58020800 	.word	0x58020800

08001868 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler>

0800186a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler>

0800186c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <MemManage_Handler>

0800186e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler>

08001870 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler>

08001872 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f891 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187e:	bd08      	pop	{r3, pc}

08001880 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <DMA1_Stream0_IRQHandler+0xc>)
 8001884:	f000 fe52 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001888:	bd08      	pop	{r3, pc}
 800188a:	bf00      	nop
 800188c:	24067f4c 	.word	0x24067f4c

08001890 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001890:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA2_Stream1_IRQHandler+0xc>)
 8001894:	f000 fe4a 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001898:	bd08      	pop	{r3, pc}
 800189a:	bf00      	nop
 800189c:	24067fc4 	.word	0x24067fc4

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a4:	f7fe fd18 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	; (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f004 fe31 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fcc1 	bl	8001258 <main>
  bx  lr
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e0:	240003a0 	.word	0x240003a0
  ldr r2, =_sidata
 80018e4:	08007368 	.word	0x08007368
  ldr r2, =_sbss
 80018e8:	240003a0 	.word	0x240003a0
  ldr r4, =_ebss
 80018ec:	24069298 	.word	0x24069298

080018f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC3_IRQHandler>
	...

080018f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_InitTick+0x44>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b90b      	cbnz	r3, 80018fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80018fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018fc:	4770      	bx	lr
{
 80018fe:	b510      	push	{r4, lr}
 8001900:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_InitTick+0x48>)
 800190c:	6810      	ldr	r0, [r2, #0]
 800190e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001912:	f000 f8c7 	bl	8001aa4 <HAL_SYSTICK_Config>
 8001916:	b968      	cbnz	r0, 8001934 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001918:	2c0f      	cmp	r4, #15
 800191a:	d901      	bls.n	8001920 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
 800191e:	e00a      	b.n	8001936 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	4621      	mov	r1, r4
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f878 	bl	8001a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_InitTick+0x4c>)
 800192e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001930:	2000      	movs	r0, #0
 8001932:	e000      	b.n	8001936 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	bd10      	pop	{r4, pc}
 8001938:	24000398 	.word	0x24000398
 800193c:	24000000 	.word	0x24000000
 8001940:	2400039c 	.word	0x2400039c

08001944 <HAL_Init>:
{
 8001944:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001946:	2003      	movs	r0, #3
 8001948:	f000 f856 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800194c:	f002 f832 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8001950:	490f      	ldr	r1, [pc, #60]	; (8001990 <HAL_Init+0x4c>)
 8001952:	698b      	ldr	r3, [r1, #24]
 8001954:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_Init+0x50>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001962:	698b      	ldr	r3, [r1, #24]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	fa20 f303 	lsr.w	r3, r0, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_Init+0x54>)
 8001974:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_Init+0x58>)
 8001978:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197a:	200f      	movs	r0, #15
 800197c:	f7ff ffba 	bl	80018f4 <HAL_InitTick>
 8001980:	b110      	cbz	r0, 8001988 <HAL_Init+0x44>
    return HAL_ERROR;
 8001982:	2401      	movs	r4, #1
}
 8001984:	4620      	mov	r0, r4
 8001986:	bd10      	pop	{r4, pc}
 8001988:	4604      	mov	r4, r0
  HAL_MspInit();
 800198a:	f7ff fde3 	bl	8001554 <HAL_MspInit>
  return HAL_OK;
 800198e:	e7f9      	b.n	8001984 <HAL_Init+0x40>
 8001990:	58024400 	.word	0x58024400
 8001994:	08007170 	.word	0x08007170
 8001998:	24000004 	.word	0x24000004
 800199c:	24000000 	.word	0x24000000

080019a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_IncTick+0x10>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_IncTick+0x14>)
 80019a6:	6811      	ldr	r1, [r2, #0]
 80019a8:	440b      	add	r3, r1
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	24000398 	.word	0x24000398
 80019b4:	24069294 	.word	0x24069294

080019b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019b8:	4b01      	ldr	r3, [pc, #4]	; (80019c0 <HAL_GetTick+0x8>)
 80019ba:	6818      	ldr	r0, [r3, #0]
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	24069294 	.word	0x24069294

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fff6 	bl	80019b8 <HAL_GetTick>
 80019cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019d2:	d002      	beq.n	80019da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_Delay+0x24>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019da:	f7ff ffed 	bl	80019b8 <HAL_GetTick>
 80019de:	1b40      	subs	r0, r0, r5
 80019e0:	42a0      	cmp	r0, r4
 80019e2:	d3fa      	bcc.n	80019da <HAL_Delay+0x16>
  {
  }
}
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	bf00      	nop
 80019e8:	24000398 	.word	0x24000398

080019ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_GetREVID+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
}
 80019f0:	0c00      	lsrs	r0, r0, #16
 80019f2:	4770      	bx	lr
 80019f4:	5c001000 	.word	0x5c001000

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4906      	ldr	r1, [pc, #24]	; (8001a14 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80019fa:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	0200      	lsls	r0, r0, #8
 8001a06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a0c:	4a02      	ldr	r2, [pc, #8]	; (8001a18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a0e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001a10:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	05fa0000 	.word	0x05fa0000

08001a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_NVIC_SetPriority+0x60>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a26:	f1c3 0c07 	rsb	ip, r3, #7
 8001a2a:	f1bc 0f04 	cmp.w	ip, #4
 8001a2e:	bf28      	it	cs
 8001a30:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a34:	f103 0e04 	add.w	lr, r3, #4
 8001a38:	f1be 0f06 	cmp.w	lr, #6
 8001a3c:	d914      	bls.n	8001a68 <HAL_NVIC_SetPriority+0x4c>
 8001a3e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 3eff 	mov.w	lr, #4294967295
 8001a44:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001a48:	ea21 010c 	bic.w	r1, r1, ip
 8001a4c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a52:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a56:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	db07      	blt.n	8001a6c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_NVIC_SetPriority+0x64>)
 8001a62:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a64:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e7e9      	b.n	8001a40 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	f000 000f 	and.w	r0, r0, #15
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_NVIC_SetPriority+0x68>)
 8001a76:	541a      	strb	r2, [r3, r0]
 8001a78:	e7f4      	b.n	8001a64 <HAL_NVIC_SetPriority+0x48>
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	e000e400 	.word	0xe000e400
 8001a84:	e000ed14 	.word	0xe000ed14

08001a88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	db07      	blt.n	8001a9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8c:	f000 021f 	and.w	r2, r0, #31
 8001a90:	0940      	lsrs	r0, r0, #5
 8001a92:	2301      	movs	r3, #1
 8001a94:	4093      	lsls	r3, r2
 8001a96:	4a02      	ldr	r2, [pc, #8]	; (8001aa0 <HAL_NVIC_EnableIRQ+0x18>)
 8001a98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	3801      	subs	r0, #1
 8001aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001aaa:	d20b      	bcs.n	8001ac4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ab0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_SYSTICK_Config+0x24>)
 8001ab4:	21f0      	movs	r1, #240	; 0xf0
 8001ab6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aba:	2000      	movs	r0, #0
 8001abc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	2207      	movs	r2, #7
 8001ac0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ac4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001acc:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ad0:	6804      	ldr	r4, [r0, #0]
 8001ad2:	4e66      	ldr	r6, [pc, #408]	; (8001c6c <DMA_SetConfig+0x1a0>)
 8001ad4:	4d66      	ldr	r5, [pc, #408]	; (8001c70 <DMA_SetConfig+0x1a4>)
 8001ad6:	42ac      	cmp	r4, r5
 8001ad8:	bf18      	it	ne
 8001ada:	42b4      	cmpne	r4, r6
 8001adc:	d042      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001ade:	3518      	adds	r5, #24
 8001ae0:	42ac      	cmp	r4, r5
 8001ae2:	d03f      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001ae4:	3518      	adds	r5, #24
 8001ae6:	42ac      	cmp	r4, r5
 8001ae8:	d03c      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001aea:	3518      	adds	r5, #24
 8001aec:	42ac      	cmp	r4, r5
 8001aee:	d039      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001af0:	3518      	adds	r5, #24
 8001af2:	42ac      	cmp	r4, r5
 8001af4:	d036      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001af6:	3518      	adds	r5, #24
 8001af8:	42ac      	cmp	r4, r5
 8001afa:	d033      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001afc:	3518      	adds	r5, #24
 8001afe:	42ac      	cmp	r4, r5
 8001b00:	d030      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b02:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	d02c      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b0a:	3518      	adds	r5, #24
 8001b0c:	42ac      	cmp	r4, r5
 8001b0e:	d029      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b10:	3518      	adds	r5, #24
 8001b12:	42ac      	cmp	r4, r5
 8001b14:	d026      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b16:	3518      	adds	r5, #24
 8001b18:	42ac      	cmp	r4, r5
 8001b1a:	d023      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b1c:	3518      	adds	r5, #24
 8001b1e:	42ac      	cmp	r4, r5
 8001b20:	d020      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b22:	3518      	adds	r5, #24
 8001b24:	42ac      	cmp	r4, r5
 8001b26:	d01d      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b28:	3518      	adds	r5, #24
 8001b2a:	42ac      	cmp	r4, r5
 8001b2c:	d01a      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b2e:	3518      	adds	r5, #24
 8001b30:	42ac      	cmp	r4, r5
 8001b32:	d017      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b34:	4d4f      	ldr	r5, [pc, #316]	; (8001c74 <DMA_SetConfig+0x1a8>)
 8001b36:	42ac      	cmp	r4, r5
 8001b38:	d014      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b3a:	3514      	adds	r5, #20
 8001b3c:	42ac      	cmp	r4, r5
 8001b3e:	d011      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b40:	3514      	adds	r5, #20
 8001b42:	42ac      	cmp	r4, r5
 8001b44:	d00e      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b46:	3514      	adds	r5, #20
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	d00b      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b4c:	3514      	adds	r5, #20
 8001b4e:	42ac      	cmp	r4, r5
 8001b50:	d008      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b52:	3514      	adds	r5, #20
 8001b54:	42ac      	cmp	r4, r5
 8001b56:	d005      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b58:	3514      	adds	r5, #20
 8001b5a:	42ac      	cmp	r4, r5
 8001b5c:	d002      	beq.n	8001b64 <DMA_SetConfig+0x98>
 8001b5e:	3514      	adds	r5, #20
 8001b60:	42ac      	cmp	r4, r5
 8001b62:	d107      	bne.n	8001b74 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b64:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001b66:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001b68:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b6a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001b6c:	b114      	cbz	r4, 8001b74 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b6e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8001b70:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001b72:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b74:	6804      	ldr	r4, [r0, #0]
 8001b76:	4e3d      	ldr	r6, [pc, #244]	; (8001c6c <DMA_SetConfig+0x1a0>)
 8001b78:	4d3d      	ldr	r5, [pc, #244]	; (8001c70 <DMA_SetConfig+0x1a4>)
 8001b7a:	42ac      	cmp	r4, r5
 8001b7c:	bf18      	it	ne
 8001b7e:	42b4      	cmpne	r4, r6
 8001b80:	d052      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001b82:	3518      	adds	r5, #24
 8001b84:	42ac      	cmp	r4, r5
 8001b86:	d04f      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001b88:	3518      	adds	r5, #24
 8001b8a:	42ac      	cmp	r4, r5
 8001b8c:	d04c      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001b8e:	3518      	adds	r5, #24
 8001b90:	42ac      	cmp	r4, r5
 8001b92:	d049      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001b94:	3518      	adds	r5, #24
 8001b96:	42ac      	cmp	r4, r5
 8001b98:	d046      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001b9a:	3518      	adds	r5, #24
 8001b9c:	42ac      	cmp	r4, r5
 8001b9e:	d043      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001ba0:	3518      	adds	r5, #24
 8001ba2:	42ac      	cmp	r4, r5
 8001ba4:	d040      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001ba6:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001baa:	42ac      	cmp	r4, r5
 8001bac:	d03c      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bae:	3518      	adds	r5, #24
 8001bb0:	42ac      	cmp	r4, r5
 8001bb2:	d039      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bb4:	3518      	adds	r5, #24
 8001bb6:	42ac      	cmp	r4, r5
 8001bb8:	d036      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bba:	3518      	adds	r5, #24
 8001bbc:	42ac      	cmp	r4, r5
 8001bbe:	d033      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bc0:	3518      	adds	r5, #24
 8001bc2:	42ac      	cmp	r4, r5
 8001bc4:	d030      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bc6:	3518      	adds	r5, #24
 8001bc8:	42ac      	cmp	r4, r5
 8001bca:	d02d      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bcc:	3518      	adds	r5, #24
 8001bce:	42ac      	cmp	r4, r5
 8001bd0:	d02a      	beq.n	8001c28 <DMA_SetConfig+0x15c>
 8001bd2:	3518      	adds	r5, #24
 8001bd4:	42ac      	cmp	r4, r5
 8001bd6:	d027      	beq.n	8001c28 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bd8:	4e26      	ldr	r6, [pc, #152]	; (8001c74 <DMA_SetConfig+0x1a8>)
 8001bda:	4d27      	ldr	r5, [pc, #156]	; (8001c78 <DMA_SetConfig+0x1ac>)
 8001bdc:	42ac      	cmp	r4, r5
 8001bde:	bf18      	it	ne
 8001be0:	42b4      	cmpne	r4, r6
 8001be2:	d011      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001be4:	4d25      	ldr	r5, [pc, #148]	; (8001c7c <DMA_SetConfig+0x1b0>)
 8001be6:	42ac      	cmp	r4, r5
 8001be8:	d00e      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001bea:	3514      	adds	r5, #20
 8001bec:	42ac      	cmp	r4, r5
 8001bee:	d00b      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001bf0:	3514      	adds	r5, #20
 8001bf2:	42ac      	cmp	r4, r5
 8001bf4:	d008      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001bf6:	3514      	adds	r5, #20
 8001bf8:	42ac      	cmp	r4, r5
 8001bfa:	d005      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001bfc:	3514      	adds	r5, #20
 8001bfe:	42ac      	cmp	r4, r5
 8001c00:	d002      	beq.n	8001c08 <DMA_SetConfig+0x13c>
 8001c02:	3514      	adds	r5, #20
 8001c04:	42ac      	cmp	r4, r5
 8001c06:	d124      	bne.n	8001c52 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001c08:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001c0a:	f004 051f 	and.w	r5, r4, #31
 8001c0e:	2401      	movs	r4, #1
 8001c10:	40ac      	lsls	r4, r5
 8001c12:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001c14:	6804      	ldr	r4, [r0, #0]
 8001c16:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c18:	6883      	ldr	r3, [r0, #8]
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d020      	beq.n	8001c60 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001c26:	e014      	b.n	8001c52 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c28:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001c2a:	f004 0c1f 	and.w	ip, r4, #31
 8001c2e:	243f      	movs	r4, #63	; 0x3f
 8001c30:	fa04 f40c 	lsl.w	r4, r4, ip
 8001c34:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c36:	6805      	ldr	r5, [r0, #0]
 8001c38:	682c      	ldr	r4, [r5, #0]
 8001c3a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001c3e:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001c40:	6804      	ldr	r4, [r0, #0]
 8001c42:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c44:	6883      	ldr	r3, [r0, #8]
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d005      	beq.n	8001c56 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001c4e:	6803      	ldr	r3, [r0, #0]
 8001c50:	60da      	str	r2, [r3, #12]
}
 8001c52:	bcf0      	pop	{r4, r5, r6, r7}
 8001c54:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8001c56:	6803      	ldr	r3, [r0, #0]
 8001c58:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001c5a:	6803      	ldr	r3, [r0, #0]
 8001c5c:	60d9      	str	r1, [r3, #12]
 8001c5e:	e7f8      	b.n	8001c52 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001c60:	6803      	ldr	r3, [r0, #0]
 8001c62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001c64:	6803      	ldr	r3, [r0, #0]
 8001c66:	60d9      	str	r1, [r3, #12]
 8001c68:	e7f3      	b.n	8001c52 <DMA_SetConfig+0x186>
 8001c6a:	bf00      	nop
 8001c6c:	40020010 	.word	0x40020010
 8001c70:	40020028 	.word	0x40020028
 8001c74:	58025408 	.word	0x58025408
 8001c78:	5802541c 	.word	0x5802541c
 8001c7c:	58025430 	.word	0x58025430

08001c80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <DMA_CalcBaseAndBitshift+0xa0>)
 8001c84:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <DMA_CalcBaseAndBitshift+0xa4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	bf18      	it	ne
 8001c8a:	428b      	cmpne	r3, r1
 8001c8c:	d02f      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001c8e:	3218      	adds	r2, #24
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d02c      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001c94:	3218      	adds	r2, #24
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d029      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001c9a:	3218      	adds	r2, #24
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d026      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001ca0:	3218      	adds	r2, #24
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d023      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001ca6:	3218      	adds	r2, #24
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d020      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cac:	3218      	adds	r2, #24
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01d      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cb2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cba:	3218      	adds	r2, #24
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d016      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cc0:	3218      	adds	r2, #24
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cc6:	3218      	adds	r2, #24
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d010      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001ccc:	3218      	adds	r2, #24
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cd2:	3218      	adds	r2, #24
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00a      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cd8:	3218      	adds	r2, #24
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
 8001cde:	3218      	adds	r2, #24
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001ce4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ce8:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001cea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001cec:	4770      	bx	lr
{
 8001cee:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001cf0:	b2d9      	uxtb	r1, r3
 8001cf2:	3910      	subs	r1, #16
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <DMA_CalcBaseAndBitshift+0xa8>)
 8001cf6:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001cfa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001cfe:	4c0b      	ldr	r4, [pc, #44]	; (8001d2c <DMA_CalcBaseAndBitshift+0xac>)
 8001d00:	5ca2      	ldrb	r2, [r4, r2]
 8001d02:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8001d04:	295f      	cmp	r1, #95	; 0x5f
 8001d06:	d907      	bls.n	8001d18 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <DMA_CalcBaseAndBitshift+0xb0>)
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	3204      	adds	r2, #4
 8001d0e:	6582      	str	r2, [r0, #88]	; 0x58
}
 8001d10:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d16:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <DMA_CalcBaseAndBitshift+0xb0>)
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	6582      	str	r2, [r0, #88]	; 0x58
 8001d1e:	e7f7      	b.n	8001d10 <DMA_CalcBaseAndBitshift+0x90>
 8001d20:	40020010 	.word	0x40020010
 8001d24:	40020028 	.word	0x40020028
 8001d28:	aaaaaaab 	.word	0xaaaaaaab
 8001d2c:	08007180 	.word	0x08007180
 8001d30:	fffffc00 	.word	0xfffffc00

08001d34 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d34:	6983      	ldr	r3, [r0, #24]
 8001d36:	b99b      	cbnz	r3, 8001d60 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8001d38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d00a      	beq.n	8001d54 <DMA_CheckFifoParam+0x20>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d002      	beq.n	8001d48 <DMA_CheckFifoParam+0x14>
 8001d42:	b10b      	cbz	r3, 8001d48 <DMA_CheckFifoParam+0x14>
 8001d44:	2000      	movs	r0, #0
 8001d46:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d4e:	d12a      	bne.n	8001da6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d5a:	d026      	beq.n	8001daa <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d64:	d00a      	beq.n	8001d7c <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8001d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d926      	bls.n	8001dba <DMA_CheckFifoParam+0x86>
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d126      	bne.n	8001dbe <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d72:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d76:	d124      	bne.n	8001dc2 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2000      	movs	r0, #0
 8001d7a:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001d7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d803      	bhi.n	8001d8a <DMA_CheckFifoParam+0x56>
 8001d82:	e8df f003 	tbb	[pc, r3]
 8001d86:	0414      	.short	0x0414
 8001d88:	0a14      	.short	0x0a14
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d94:	d10d      	bne.n	8001db2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2000      	movs	r0, #0
 8001d98:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da0:	d009      	beq.n	8001db6 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2000      	movs	r0, #0
 8001da4:	4770      	bx	lr
          status = HAL_ERROR;
 8001da6:	2001      	movs	r0, #1
 8001da8:	4770      	bx	lr
          status = HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
 8001dac:	4770      	bx	lr
        status = HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	4770      	bx	lr
          status = HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	4770      	bx	lr
          status = HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	4770      	bx	lr
        status = HAL_ERROR;
 8001dba:	2001      	movs	r0, #1
 8001dbc:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001dc8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001dca:	4921      	ldr	r1, [pc, #132]	; (8001e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001dcc:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bf18      	it	ne
 8001dd2:	428b      	cmpne	r3, r1
 8001dd4:	d027      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001dd6:	3214      	adds	r2, #20
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d024      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001ddc:	3214      	adds	r2, #20
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d021      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001de2:	3214      	adds	r2, #20
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d01e      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001de8:	3214      	adds	r2, #20
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01b      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001dee:	3214      	adds	r2, #20
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d018      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8001df4:	3214      	adds	r2, #20
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d015      	beq.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	3a10      	subs	r2, #16
 8001dfe:	4916      	ldr	r1, [pc, #88]	; (8001e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001e00:	fba1 1202 	umull	r1, r2, r1, r2
 8001e04:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001e06:	4915      	ldr	r1, [pc, #84]	; (8001e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8001e08:	4419      	add	r1, r3
 8001e0a:	29a8      	cmp	r1, #168	; 0xa8
 8001e0c:	d91e      	bls.n	8001e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001e18:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2301      	movs	r3, #1
 8001e20:	4093      	lsls	r3, r2
 8001e22:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8001e24:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001e32:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001e3c:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001e3e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	6683      	str	r3, [r0, #104]	; 0x68
 8001e4a:	4770      	bx	lr
      stream_number += 8U;
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	e7de      	b.n	8001e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8001e50:	58025408 	.word	0x58025408
 8001e54:	5802541c 	.word	0x5802541c
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	bffdfbf0 	.word	0xbffdfbf0
 8001e60:	10008200 	.word	0x10008200
 8001e64:	40020880 	.word	0x40020880
 8001e68:	cccccccd 	.word	0xcccccccd
 8001e6c:	16009600 	.word	0x16009600
 8001e70:	58025880 	.word	0x58025880

08001e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e74:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001e76:	1e4a      	subs	r2, r1, #1
 8001e78:	2a07      	cmp	r2, #7
 8001e7a:	d82b      	bhi.n	8001ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8001e7c:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e7e:	6803      	ldr	r3, [r0, #0]
 8001e80:	4d15      	ldr	r5, [pc, #84]	; (8001ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001e82:	4c16      	ldr	r4, [pc, #88]	; (8001edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	bf18      	it	ne
 8001e88:	42ab      	cmpne	r3, r5
 8001e8a:	d018      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001e8c:	3414      	adds	r4, #20
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	d015      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001e92:	3414      	adds	r4, #20
 8001e94:	42a3      	cmp	r3, r4
 8001e96:	d012      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001e98:	3414      	adds	r4, #20
 8001e9a:	42a3      	cmp	r3, r4
 8001e9c:	d00f      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001e9e:	3414      	adds	r4, #20
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	d00c      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001ea4:	3414      	adds	r4, #20
 8001ea6:	42a3      	cmp	r3, r4
 8001ea8:	d009      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8001eaa:	3414      	adds	r4, #20
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	d006      	beq.n	8001ebe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001eb2:	440b      	add	r3, r1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8001eba:	6703      	str	r3, [r0, #112]	; 0x70
 8001ebc:	e005      	b.n	8001eca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8001ec0:	440b      	add	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8001ec8:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8001ed0:	bc30      	pop	{r4, r5}
 8001ed2:	4770      	bx	lr
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	58025408 	.word	0x58025408
 8001edc:	5802541c 	.word	0x5802541c
 8001ee0:	1000823f 	.word	0x1000823f
 8001ee4:	40020940 	.word	0x40020940
 8001ee8:	1600963f 	.word	0x1600963f
 8001eec:	58025940 	.word	0x58025940

08001ef0 <HAL_DMA_Init>:
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fd60 	bl	80019b8 <HAL_GetTick>
  if(hdma == NULL)
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	f000 81b6 	beq.w	800226a <HAL_DMA_Init+0x37a>
 8001efe:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	4953      	ldr	r1, [pc, #332]	; (8002050 <HAL_DMA_Init+0x160>)
 8001f04:	4a53      	ldr	r2, [pc, #332]	; (8002054 <HAL_DMA_Init+0x164>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	bf18      	it	ne
 8001f0a:	428b      	cmpne	r3, r1
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2101      	moveq	r1, #1
 8001f10:	2100      	movne	r1, #0
 8001f12:	d050      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f14:	3218      	adds	r2, #24
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04d      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f1a:	3218      	adds	r2, #24
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f20:	3218      	adds	r2, #24
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d047      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f26:	3218      	adds	r2, #24
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d044      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f2c:	3218      	adds	r2, #24
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d041      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f32:	3218      	adds	r2, #24
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d03e      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f38:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d03a      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f40:	3218      	adds	r2, #24
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f46:	3218      	adds	r2, #24
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d034      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f4c:	3218      	adds	r2, #24
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f52:	3218      	adds	r2, #24
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02e      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f58:	3218      	adds	r2, #24
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02b      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f5e:	3218      	adds	r2, #24
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d028      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
 8001f64:	3218      	adds	r2, #24
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d025      	beq.n	8001fb6 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f6a:	493b      	ldr	r1, [pc, #236]	; (8002058 <HAL_DMA_Init+0x168>)
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	; (800205c <HAL_DMA_Init+0x16c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	bf18      	it	ne
 8001f72:	428b      	cmpne	r3, r1
 8001f74:	f000 8131 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001f78:	4a39      	ldr	r2, [pc, #228]	; (8002060 <HAL_DMA_Init+0x170>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f000 812d 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001f80:	3214      	adds	r2, #20
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f000 8129 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001f88:	3214      	adds	r2, #20
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f000 8125 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001f90:	3214      	adds	r2, #20
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f000 8121 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001f98:	3214      	adds	r2, #20
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	f000 811d 	beq.w	80021da <HAL_DMA_Init+0x2ea>
 8001fa0:	3214      	adds	r2, #20
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f000 8119 	beq.w	80021da <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e04a      	b.n	800204c <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	bb79      	cbnz	r1, 8002024 <HAL_DMA_Init+0x134>
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_DMA_Init+0x174>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02c      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fca:	3218      	adds	r2, #24
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d029      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fd0:	3218      	adds	r2, #24
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d026      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fd6:	3218      	adds	r2, #24
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fdc:	3218      	adds	r2, #24
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d020      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fe2:	3218      	adds	r2, #24
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d01d      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001fe8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d019      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001ff0:	3218      	adds	r2, #24
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d016      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001ff6:	3218      	adds	r2, #24
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8001ffc:	3218      	adds	r2, #24
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d010      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8002002:	3218      	adds	r2, #24
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8002008:	3218      	adds	r2, #24
 800200a:	4293      	cmp	r3, r2
 800200c:	d00a      	beq.n	8002024 <HAL_DMA_Init+0x134>
 800200e:	3218      	adds	r2, #24
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_DMA_Init+0x134>
 8002014:	3218      	adds	r2, #24
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Init+0x134>
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e003      	b.n	800202c <HAL_DMA_Init+0x13c>
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	f012 0f01 	tst.w	r2, #1
 8002034:	d018      	beq.n	8002068 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002036:	f7ff fcbf 	bl	80019b8 <HAL_GetTick>
 800203a:	1b43      	subs	r3, r0, r5
 800203c:	2b05      	cmp	r3, #5
 800203e:	d9f5      	bls.n	800202c <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002040:	2320      	movs	r3, #32
 8002042:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002044:	2303      	movs	r3, #3
 8002046:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 800204a:	2001      	movs	r0, #1
}
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	bf00      	nop
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	58025408 	.word	0x58025408
 800205c:	5802541c 	.word	0x5802541c
 8002060:	58025430 	.word	0x58025430
 8002064:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002068:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800206a:	4981      	ldr	r1, [pc, #516]	; (8002270 <HAL_DMA_Init+0x380>)
 800206c:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 800206e:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002070:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8002072:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	6920      	ldr	r0, [r4, #16]
 8002076:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002078:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207c:	69a0      	ldr	r0, [r4, #24]
 800207e:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002080:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002082:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002084:	6a20      	ldr	r0, [r4, #32]
 8002086:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8002088:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800208c:	2904      	cmp	r1, #4
 800208e:	f000 8099 	beq.w	80021c4 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002092:	4978      	ldr	r1, [pc, #480]	; (8002274 <HAL_DMA_Init+0x384>)
 8002094:	6808      	ldr	r0, [r1, #0]
 8002096:	4978      	ldr	r1, [pc, #480]	; (8002278 <HAL_DMA_Init+0x388>)
 8002098:	4001      	ands	r1, r0
 800209a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800209e:	d311      	bcc.n	80020c4 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020a0:	6861      	ldr	r1, [r4, #4]
 80020a2:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 80020a6:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 80020aa:	2803      	cmp	r0, #3
 80020ac:	bf88      	it	hi
 80020ae:	2d05      	cmphi	r5, #5
 80020b0:	d906      	bls.n	80020c0 <HAL_DMA_Init+0x1d0>
 80020b2:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 80020b6:	2801      	cmp	r0, #1
 80020b8:	d902      	bls.n	80020c0 <HAL_DMA_Init+0x1d0>
 80020ba:	394f      	subs	r1, #79	; 0x4f
 80020bc:	2903      	cmp	r1, #3
 80020be:	d801      	bhi.n	80020c4 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 80020c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020c4:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020c6:	6826      	ldr	r6, [r4, #0]
 80020c8:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ca:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 80020ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d0:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d108      	bne.n	80020e8 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 80020d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d8:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020dc:	b123      	cbz	r3, 80020e8 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fe28 	bl	8001d34 <DMA_CheckFifoParam>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d172      	bne.n	80021ce <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020e8:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff fdc8 	bl	8001c80 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020f2:	f003 021f 	and.w	r2, r3, #31
 80020f6:	233f      	movs	r3, #63	; 0x3f
 80020f8:	4093      	lsls	r3, r2
 80020fa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	495f      	ldr	r1, [pc, #380]	; (800227c <HAL_DMA_Init+0x38c>)
 8002100:	4a5f      	ldr	r2, [pc, #380]	; (8002280 <HAL_DMA_Init+0x390>)
 8002102:	4293      	cmp	r3, r2
 8002104:	bf18      	it	ne
 8002106:	428b      	cmpne	r3, r1
 8002108:	d042      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800210a:	3218      	adds	r2, #24
 800210c:	4293      	cmp	r3, r2
 800210e:	d03f      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002110:	3218      	adds	r2, #24
 8002112:	4293      	cmp	r3, r2
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002116:	3218      	adds	r2, #24
 8002118:	4293      	cmp	r3, r2
 800211a:	d039      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800211c:	3218      	adds	r2, #24
 800211e:	4293      	cmp	r3, r2
 8002120:	d036      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002122:	3218      	adds	r2, #24
 8002124:	4293      	cmp	r3, r2
 8002126:	d033      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002128:	3218      	adds	r2, #24
 800212a:	4293      	cmp	r3, r2
 800212c:	d030      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800212e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002132:	4293      	cmp	r3, r2
 8002134:	d02c      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002136:	3218      	adds	r2, #24
 8002138:	4293      	cmp	r3, r2
 800213a:	d029      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800213c:	3218      	adds	r2, #24
 800213e:	4293      	cmp	r3, r2
 8002140:	d026      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002142:	3218      	adds	r2, #24
 8002144:	4293      	cmp	r3, r2
 8002146:	d023      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002148:	3218      	adds	r2, #24
 800214a:	4293      	cmp	r3, r2
 800214c:	d020      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800214e:	3218      	adds	r2, #24
 8002150:	4293      	cmp	r3, r2
 8002152:	d01d      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002154:	3218      	adds	r2, #24
 8002156:	4293      	cmp	r3, r2
 8002158:	d01a      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800215a:	3218      	adds	r2, #24
 800215c:	4293      	cmp	r3, r2
 800215e:	d017      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002160:	4a48      	ldr	r2, [pc, #288]	; (8002284 <HAL_DMA_Init+0x394>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d014      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002166:	3214      	adds	r2, #20
 8002168:	4293      	cmp	r3, r2
 800216a:	d011      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800216c:	3214      	adds	r2, #20
 800216e:	4293      	cmp	r3, r2
 8002170:	d00e      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002172:	3214      	adds	r2, #20
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002178:	3214      	adds	r2, #20
 800217a:	4293      	cmp	r3, r2
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800217e:	3214      	adds	r2, #20
 8002180:	4293      	cmp	r3, r2
 8002182:	d005      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 8002184:	3214      	adds	r2, #20
 8002186:	4293      	cmp	r3, r2
 8002188:	d002      	beq.n	8002190 <HAL_DMA_Init+0x2a0>
 800218a:	3214      	adds	r2, #20
 800218c:	4293      	cmp	r3, r2
 800218e:	d113      	bne.n	80021b8 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff fe19 	bl	8001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002196:	68a3      	ldr	r3, [r4, #8]
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d059      	beq.n	8002250 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800219c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800219e:	7922      	ldrb	r2, [r4, #4]
 80021a0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021a4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80021a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021a8:	6863      	ldr	r3, [r4, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	2b07      	cmp	r3, #7
 80021ae:	d952      	bls.n	8002256 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021b4:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021b6:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	2000      	movs	r0, #0
 80021ba:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80021bc:	2301      	movs	r3, #1
 80021be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80021c2:	e743      	b.n	800204c <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021c8:	4301      	orrs	r1, r0
 80021ca:	430a      	orrs	r2, r1
 80021cc:	e761      	b.n	8002092 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ce:	2340      	movs	r3, #64	; 0x40
 80021d0:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80021d2:	2001      	movs	r0, #1
 80021d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 80021d8:	e738      	b.n	800204c <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80021da:	2202      	movs	r2, #2
 80021dc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021e6:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021e8:	4927      	ldr	r1, [pc, #156]	; (8002288 <HAL_DMA_Init+0x398>)
 80021ea:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021ec:	68a2      	ldr	r2, [r4, #8]
 80021ee:	2a40      	cmp	r2, #64	; 0x40
 80021f0:	d02c      	beq.n	800224c <HAL_DMA_Init+0x35c>
 80021f2:	2a80      	cmp	r2, #128	; 0x80
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Init+0x356>
 80021f6:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021f8:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021fa:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021fe:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002200:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002204:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002206:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800220a:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800220c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002210:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002212:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002216:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002218:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800221c:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800221e:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_DMA_Init+0x39c>)
 8002224:	4413      	add	r3, r2
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_DMA_Init+0x3a0>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fd24 	bl	8001c80 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002238:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800223a:	f002 011f 	and.w	r1, r2, #31
 800223e:	2201      	movs	r2, #1
 8002240:	408a      	lsls	r2, r1
 8002242:	6042      	str	r2, [r0, #4]
 8002244:	e75a      	b.n	80020fc <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224a:	e7d5      	b.n	80021f8 <HAL_DMA_Init+0x308>
 800224c:	2210      	movs	r2, #16
 800224e:	e7d3      	b.n	80021f8 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002250:	2300      	movs	r3, #0
 8002252:	6063      	str	r3, [r4, #4]
 8002254:	e7a2      	b.n	800219c <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff fe0c 	bl	8001e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800225c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002262:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002264:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	e7a6      	b.n	80021b8 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	e6ee      	b.n	800204c <HAL_DMA_Init+0x15c>
 800226e:	bf00      	nop
 8002270:	fe10803f 	.word	0xfe10803f
 8002274:	5c001000 	.word	0x5c001000
 8002278:	ffff0000 	.word	0xffff0000
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	58025408 	.word	0x58025408
 8002288:	fffe000f 	.word	0xfffe000f
 800228c:	a7fdabf8 	.word	0xa7fdabf8
 8002290:	cccccccd 	.word	0xcccccccd

08002294 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002294:	2800      	cmp	r0, #0
 8002296:	f000 813e 	beq.w	8002516 <HAL_DMA_Start_IT+0x282>
{
 800229a:	b570      	push	{r4, r5, r6, lr}
 800229c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800229e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80022a2:	2801      	cmp	r0, #1
 80022a4:	f000 8139 	beq.w	800251a <HAL_DMA_Start_IT+0x286>
 80022a8:	2001      	movs	r0, #1
 80022aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ae:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80022b2:	b2c0      	uxtb	r0, r0
 80022b4:	2801      	cmp	r0, #1
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022bc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
}
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	2002      	movs	r0, #2
 80022ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ce:	2000      	movs	r0, #0
 80022d0:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	4e92      	ldr	r6, [pc, #584]	; (8002520 <HAL_DMA_Start_IT+0x28c>)
 80022d6:	4d93      	ldr	r5, [pc, #588]	; (8002524 <HAL_DMA_Start_IT+0x290>)
 80022d8:	42a8      	cmp	r0, r5
 80022da:	bf18      	it	ne
 80022dc:	42b0      	cmpne	r0, r6
 80022de:	d02f      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022e0:	3518      	adds	r5, #24
 80022e2:	42a8      	cmp	r0, r5
 80022e4:	d02c      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022e6:	3518      	adds	r5, #24
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d029      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022ec:	3518      	adds	r5, #24
 80022ee:	42a8      	cmp	r0, r5
 80022f0:	d026      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022f2:	3518      	adds	r5, #24
 80022f4:	42a8      	cmp	r0, r5
 80022f6:	d023      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022f8:	3518      	adds	r5, #24
 80022fa:	42a8      	cmp	r0, r5
 80022fc:	d020      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 80022fe:	3518      	adds	r5, #24
 8002300:	42a8      	cmp	r0, r5
 8002302:	d01d      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002304:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8002308:	42a8      	cmp	r0, r5
 800230a:	d019      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 800230c:	3518      	adds	r5, #24
 800230e:	42a8      	cmp	r0, r5
 8002310:	d016      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002312:	3518      	adds	r5, #24
 8002314:	42a8      	cmp	r0, r5
 8002316:	d013      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002318:	3518      	adds	r5, #24
 800231a:	42a8      	cmp	r0, r5
 800231c:	d010      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 800231e:	3518      	adds	r5, #24
 8002320:	42a8      	cmp	r0, r5
 8002322:	d00d      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002324:	3518      	adds	r5, #24
 8002326:	42a8      	cmp	r0, r5
 8002328:	d00a      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 800232a:	3518      	adds	r5, #24
 800232c:	42a8      	cmp	r0, r5
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002330:	3518      	adds	r5, #24
 8002332:	42a8      	cmp	r0, r5
 8002334:	d004      	beq.n	8002340 <HAL_DMA_Start_IT+0xac>
 8002336:	6805      	ldr	r5, [r0, #0]
 8002338:	f025 0501 	bic.w	r5, r5, #1
 800233c:	6005      	str	r5, [r0, #0]
 800233e:	e003      	b.n	8002348 <HAL_DMA_Start_IT+0xb4>
 8002340:	6805      	ldr	r5, [r0, #0]
 8002342:	f025 0501 	bic.w	r5, r5, #1
 8002346:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fbbf 	bl	8001acc <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	4973      	ldr	r1, [pc, #460]	; (8002520 <HAL_DMA_Start_IT+0x28c>)
 8002352:	4a74      	ldr	r2, [pc, #464]	; (8002524 <HAL_DMA_Start_IT+0x290>)
 8002354:	4293      	cmp	r3, r2
 8002356:	bf18      	it	ne
 8002358:	428b      	cmpne	r3, r1
 800235a:	d038      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 800235c:	3218      	adds	r2, #24
 800235e:	4293      	cmp	r3, r2
 8002360:	d035      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002362:	3218      	adds	r2, #24
 8002364:	4293      	cmp	r3, r2
 8002366:	d032      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002368:	3218      	adds	r2, #24
 800236a:	4293      	cmp	r3, r2
 800236c:	d02f      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 800236e:	3218      	adds	r2, #24
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002374:	3218      	adds	r2, #24
 8002376:	4293      	cmp	r3, r2
 8002378:	d029      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 800237a:	3218      	adds	r2, #24
 800237c:	4293      	cmp	r3, r2
 800237e:	d026      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002380:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002388:	3218      	adds	r2, #24
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 800238e:	3218      	adds	r2, #24
 8002390:	4293      	cmp	r3, r2
 8002392:	d01c      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 8002394:	3218      	adds	r2, #24
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 800239a:	3218      	adds	r2, #24
 800239c:	4293      	cmp	r3, r2
 800239e:	d016      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 80023a0:	3218      	adds	r2, #24
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 80023a6:	3218      	adds	r2, #24
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d010      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
 80023ac:	3218      	adds	r2, #24
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f022 020e 	bic.w	r2, r2, #14
 80023b8:	f042 020a 	orr.w	r2, r2, #10
 80023bc:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80023be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023c0:	b193      	cbz	r3, 80023e8 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	6813      	ldr	r3, [r2, #0]
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e00c      	b.n	80023e8 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f022 021e 	bic.w	r2, r2, #30
 80023d4:	f042 0216 	orr.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80023da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023dc:	b123      	cbz	r3, 80023e8 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	f043 0308 	orr.w	r3, r3, #8
 80023e6:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_DMA_Start_IT+0x28c>)
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_DMA_Start_IT+0x290>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	bf18      	it	ne
 80023f2:	428b      	cmpne	r3, r1
 80023f4:	d042      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 80023f6:	3218      	adds	r2, #24
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d03f      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 80023fc:	3218      	adds	r2, #24
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03c      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002402:	3218      	adds	r2, #24
 8002404:	4293      	cmp	r3, r2
 8002406:	d039      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002408:	3218      	adds	r2, #24
 800240a:	4293      	cmp	r3, r2
 800240c:	d036      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800240e:	3218      	adds	r2, #24
 8002410:	4293      	cmp	r3, r2
 8002412:	d033      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002414:	3218      	adds	r2, #24
 8002416:	4293      	cmp	r3, r2
 8002418:	d030      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800241a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800241e:	4293      	cmp	r3, r2
 8002420:	d02c      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002422:	3218      	adds	r2, #24
 8002424:	4293      	cmp	r3, r2
 8002426:	d029      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002428:	3218      	adds	r2, #24
 800242a:	4293      	cmp	r3, r2
 800242c:	d026      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800242e:	3218      	adds	r2, #24
 8002430:	4293      	cmp	r3, r2
 8002432:	d023      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002434:	3218      	adds	r2, #24
 8002436:	4293      	cmp	r3, r2
 8002438:	d020      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800243a:	3218      	adds	r2, #24
 800243c:	4293      	cmp	r3, r2
 800243e:	d01d      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002440:	3218      	adds	r2, #24
 8002442:	4293      	cmp	r3, r2
 8002444:	d01a      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002446:	3218      	adds	r2, #24
 8002448:	4293      	cmp	r3, r2
 800244a:	d017      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800244c:	4a36      	ldr	r2, [pc, #216]	; (8002528 <HAL_DMA_Start_IT+0x294>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d014      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002452:	3214      	adds	r2, #20
 8002454:	4293      	cmp	r3, r2
 8002456:	d011      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002458:	3214      	adds	r2, #20
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800245e:	3214      	adds	r2, #20
 8002460:	4293      	cmp	r3, r2
 8002462:	d00b      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002464:	3214      	adds	r2, #20
 8002466:	4293      	cmp	r3, r2
 8002468:	d008      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 800246a:	3214      	adds	r2, #20
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002470:	3214      	adds	r2, #20
 8002472:	4293      	cmp	r3, r2
 8002474:	d002      	beq.n	800247c <HAL_DMA_Start_IT+0x1e8>
 8002476:	3214      	adds	r2, #20
 8002478:	4293      	cmp	r3, r2
 800247a:	d10e      	bne.n	800249a <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800247c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002484:	d003      	beq.n	800248e <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800248e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002490:	b11b      	cbz	r3, 800249a <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	4920      	ldr	r1, [pc, #128]	; (8002520 <HAL_DMA_Start_IT+0x28c>)
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_DMA_Start_IT+0x290>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	bf18      	it	ne
 80024a4:	428b      	cmpne	r3, r1
 80024a6:	d030      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024a8:	3218      	adds	r2, #24
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02d      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024ae:	3218      	adds	r2, #24
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d02a      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024b4:	3218      	adds	r2, #24
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024ba:	3218      	adds	r2, #24
 80024bc:	4293      	cmp	r3, r2
 80024be:	d024      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024c0:	3218      	adds	r2, #24
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d021      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024c6:	3218      	adds	r2, #24
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01e      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024cc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01a      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024d4:	3218      	adds	r2, #24
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d017      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024da:	3218      	adds	r2, #24
 80024dc:	4293      	cmp	r3, r2
 80024de:	d014      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024e0:	3218      	adds	r2, #24
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d011      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024e6:	3218      	adds	r2, #24
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024ec:	3218      	adds	r2, #24
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024f2:	3218      	adds	r2, #24
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d008      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024f8:	3218      	adds	r2, #24
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d005      	beq.n	800250a <HAL_DMA_Start_IT+0x276>
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2000      	movs	r0, #0
 8002508:	e6dd      	b.n	80022c6 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002514:	e6d7      	b.n	80022c6 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8002516:	2001      	movs	r0, #1
}
 8002518:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800251a:	2002      	movs	r0, #2
 800251c:	e6d3      	b.n	80022c6 <HAL_DMA_Start_IT+0x32>
 800251e:	bf00      	nop
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	58025408 	.word	0x58025408

0800252c <HAL_DMA_IRQHandler>:
{
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	b083      	sub	sp, #12
 8002530:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_DMA_IRQHandler+0x200>)
 8002538:	681d      	ldr	r5, [r3, #0]
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_DMA_IRQHandler+0x204>)
 800253c:	fba3 3505 	umull	r3, r5, r3, r5
 8002540:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002544:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002546:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	4979      	ldr	r1, [pc, #484]	; (8002734 <HAL_DMA_IRQHandler+0x208>)
 800254e:	487a      	ldr	r0, [pc, #488]	; (8002738 <HAL_DMA_IRQHandler+0x20c>)
 8002550:	4283      	cmp	r3, r0
 8002552:	bf18      	it	ne
 8002554:	428b      	cmpne	r3, r1
 8002556:	bf0c      	ite	eq
 8002558:	2001      	moveq	r0, #1
 800255a:	2000      	movne	r0, #0
 800255c:	d061      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 800255e:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_DMA_IRQHandler+0x210>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d05e      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002564:	3218      	adds	r2, #24
 8002566:	4293      	cmp	r3, r2
 8002568:	d05b      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 800256a:	3218      	adds	r2, #24
 800256c:	4293      	cmp	r3, r2
 800256e:	d058      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002570:	3218      	adds	r2, #24
 8002572:	4293      	cmp	r3, r2
 8002574:	d055      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002576:	3218      	adds	r2, #24
 8002578:	4293      	cmp	r3, r2
 800257a:	d052      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 800257c:	3218      	adds	r2, #24
 800257e:	4293      	cmp	r3, r2
 8002580:	d04f      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002582:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002586:	4293      	cmp	r3, r2
 8002588:	d04b      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 800258a:	3218      	adds	r2, #24
 800258c:	4293      	cmp	r3, r2
 800258e:	d048      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002590:	3218      	adds	r2, #24
 8002592:	4293      	cmp	r3, r2
 8002594:	d045      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 8002596:	3218      	adds	r2, #24
 8002598:	4293      	cmp	r3, r2
 800259a:	d042      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 800259c:	3218      	adds	r2, #24
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03f      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 80025a2:	3218      	adds	r2, #24
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d03c      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 80025a8:	3218      	adds	r2, #24
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d039      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
 80025ae:	3218      	adds	r2, #24
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d036      	beq.n	8002622 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025b4:	4962      	ldr	r1, [pc, #392]	; (8002740 <HAL_DMA_IRQHandler+0x214>)
 80025b6:	4a63      	ldr	r2, [pc, #396]	; (8002744 <HAL_DMA_IRQHandler+0x218>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	bf18      	it	ne
 80025bc:	428b      	cmpne	r3, r1
 80025be:	d012      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025c0:	4a61      	ldr	r2, [pc, #388]	; (8002748 <HAL_DMA_IRQHandler+0x21c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00f      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025c6:	3214      	adds	r2, #20
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00c      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025cc:	3214      	adds	r2, #20
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025d2:	3214      	adds	r2, #20
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d006      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025d8:	3214      	adds	r2, #20
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xba>
 80025de:	3214      	adds	r2, #20
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 8261 	bne.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80025e6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80025e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80025ea:	f001 011f 	and.w	r1, r1, #31
 80025ee:	2004      	movs	r0, #4
 80025f0:	4088      	lsls	r0, r1
 80025f2:	ea10 0f0c 	tst.w	r0, ip
 80025f6:	f000 82a7 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x61c>
 80025fa:	f012 0f04 	tst.w	r2, #4
 80025fe:	f000 82a3 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002602:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002604:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002608:	f000 825a 	beq.w	8002ac0 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800260c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002610:	f040 8250 	bne.w	8002ab4 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8246 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 800261c:	4620      	mov	r0, r4
 800261e:	4798      	blx	r3
 8002620:	e242      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002622:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002624:	f002 011f 	and.w	r1, r2, #31
 8002628:	2208      	movs	r2, #8
 800262a:	408a      	lsls	r2, r1
 800262c:	4232      	tst	r2, r6
 800262e:	d041      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002630:	bb70      	cbnz	r0, 8002690 <HAL_DMA_IRQHandler+0x164>
 8002632:	4a42      	ldr	r2, [pc, #264]	; (800273c <HAL_DMA_IRQHandler+0x210>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d02b      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002638:	3218      	adds	r2, #24
 800263a:	4293      	cmp	r3, r2
 800263c:	d028      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 800263e:	3218      	adds	r2, #24
 8002640:	4293      	cmp	r3, r2
 8002642:	d025      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002644:	3218      	adds	r2, #24
 8002646:	4293      	cmp	r3, r2
 8002648:	d022      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 800264a:	3218      	adds	r2, #24
 800264c:	4293      	cmp	r3, r2
 800264e:	d01f      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002650:	3218      	adds	r2, #24
 8002652:	4293      	cmp	r3, r2
 8002654:	d01c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002656:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800265a:	4293      	cmp	r3, r2
 800265c:	d018      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 800265e:	3218      	adds	r2, #24
 8002660:	4293      	cmp	r3, r2
 8002662:	d015      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002664:	3218      	adds	r2, #24
 8002666:	4293      	cmp	r3, r2
 8002668:	d012      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 800266a:	3218      	adds	r2, #24
 800266c:	4293      	cmp	r3, r2
 800266e:	d00f      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002670:	3218      	adds	r2, #24
 8002672:	4293      	cmp	r3, r2
 8002674:	d00c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002676:	3218      	adds	r2, #24
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 800267c:	3218      	adds	r2, #24
 800267e:	4293      	cmp	r3, r2
 8002680:	d006      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002682:	3218      	adds	r2, #24
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <HAL_DMA_IRQHandler+0x164>
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800268e:	e002      	b.n	8002696 <HAL_DMA_IRQHandler+0x16a>
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002696:	b16a      	cbz	r2, 80026b4 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026a2:	f003 021f 	and.w	r2, r3, #31
 80026a6:	2308      	movs	r3, #8
 80026a8:	4093      	lsls	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	fa26 f302 	lsr.w	r3, r6, r2
 80026be:	f013 0f01 	tst.w	r3, #1
 80026c2:	d047      	beq.n	8002754 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	481b      	ldr	r0, [pc, #108]	; (8002734 <HAL_DMA_IRQHandler+0x208>)
 80026c8:	491b      	ldr	r1, [pc, #108]	; (8002738 <HAL_DMA_IRQHandler+0x20c>)
 80026ca:	428b      	cmp	r3, r1
 80026cc:	bf18      	it	ne
 80026ce:	4283      	cmpne	r3, r0
 80026d0:	d03c      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026d2:	3118      	adds	r1, #24
 80026d4:	428b      	cmp	r3, r1
 80026d6:	d039      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026d8:	3118      	adds	r1, #24
 80026da:	428b      	cmp	r3, r1
 80026dc:	d036      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026de:	3118      	adds	r1, #24
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d033      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026e4:	3118      	adds	r1, #24
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d030      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026ea:	3118      	adds	r1, #24
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d02d      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026f0:	3118      	adds	r1, #24
 80026f2:	428b      	cmp	r3, r1
 80026f4:	d02a      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026f6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80026fa:	428b      	cmp	r3, r1
 80026fc:	d026      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 80026fe:	3118      	adds	r1, #24
 8002700:	428b      	cmp	r3, r1
 8002702:	d023      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 8002704:	3118      	adds	r1, #24
 8002706:	428b      	cmp	r3, r1
 8002708:	d020      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 800270a:	3118      	adds	r1, #24
 800270c:	428b      	cmp	r3, r1
 800270e:	d01d      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 8002710:	3118      	adds	r1, #24
 8002712:	428b      	cmp	r3, r1
 8002714:	d01a      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 8002716:	3118      	adds	r1, #24
 8002718:	428b      	cmp	r3, r1
 800271a:	d017      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 800271c:	3118      	adds	r1, #24
 800271e:	428b      	cmp	r3, r1
 8002720:	d014      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 8002722:	3118      	adds	r1, #24
 8002724:	428b      	cmp	r3, r1
 8002726:	d011      	beq.n	800274c <HAL_DMA_IRQHandler+0x220>
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e013      	b.n	8002754 <HAL_DMA_IRQHandler+0x228>
 800272c:	24000000 	.word	0x24000000
 8002730:	1b4e81b5 	.word	0x1b4e81b5
 8002734:	40020010 	.word	0x40020010
 8002738:	40020028 	.word	0x40020028
 800273c:	40020040 	.word	0x40020040
 8002740:	58025408 	.word	0x58025408
 8002744:	5802541c 	.word	0x5802541c
 8002748:	58025430 	.word	0x58025430
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002752:	d13b      	bne.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002754:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2204      	movs	r2, #4
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	4233      	tst	r3, r6
 8002762:	d03f      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	4896      	ldr	r0, [pc, #600]	; (80029c0 <HAL_DMA_IRQHandler+0x494>)
 8002768:	4996      	ldr	r1, [pc, #600]	; (80029c4 <HAL_DMA_IRQHandler+0x498>)
 800276a:	428a      	cmp	r2, r1
 800276c:	bf18      	it	ne
 800276e:	4282      	cmpne	r2, r0
 8002770:	d034      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 8002772:	3118      	adds	r1, #24
 8002774:	428a      	cmp	r2, r1
 8002776:	d031      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 8002778:	3118      	adds	r1, #24
 800277a:	428a      	cmp	r2, r1
 800277c:	d02e      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 800277e:	3118      	adds	r1, #24
 8002780:	428a      	cmp	r2, r1
 8002782:	d02b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 8002784:	3118      	adds	r1, #24
 8002786:	428a      	cmp	r2, r1
 8002788:	d028      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 800278a:	3118      	adds	r1, #24
 800278c:	428a      	cmp	r2, r1
 800278e:	d025      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 8002790:	3118      	adds	r1, #24
 8002792:	428a      	cmp	r2, r1
 8002794:	d022      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 8002796:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800279a:	428a      	cmp	r2, r1
 800279c:	d01e      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 800279e:	3118      	adds	r1, #24
 80027a0:	428a      	cmp	r2, r1
 80027a2:	d01b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027a4:	3118      	adds	r1, #24
 80027a6:	428a      	cmp	r2, r1
 80027a8:	d018      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027aa:	3118      	adds	r1, #24
 80027ac:	428a      	cmp	r2, r1
 80027ae:	d015      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027b0:	3118      	adds	r1, #24
 80027b2:	428a      	cmp	r2, r1
 80027b4:	d012      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027b6:	3118      	adds	r1, #24
 80027b8:	428a      	cmp	r2, r1
 80027ba:	d00f      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027bc:	3118      	adds	r1, #24
 80027be:	428a      	cmp	r2, r1
 80027c0:	d00c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027c2:	3118      	adds	r1, #24
 80027c4:	428a      	cmp	r2, r1
 80027c6:	d009      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2b0>
 80027c8:	6813      	ldr	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027cc:	2301      	movs	r3, #1
 80027ce:	4093      	lsls	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6563      	str	r3, [r4, #84]	; 0x54
 80027da:	e7bb      	b.n	8002754 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	f012 0f02 	tst.w	r2, #2
 80027e2:	d13d      	bne.n	8002860 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2210      	movs	r2, #16
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	4233      	tst	r3, r6
 80027f2:	d05f      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	4872      	ldr	r0, [pc, #456]	; (80029c0 <HAL_DMA_IRQHandler+0x494>)
 80027f8:	4972      	ldr	r1, [pc, #456]	; (80029c4 <HAL_DMA_IRQHandler+0x498>)
 80027fa:	428a      	cmp	r2, r1
 80027fc:	bf18      	it	ne
 80027fe:	4282      	cmpne	r2, r0
 8002800:	d034      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002802:	3118      	adds	r1, #24
 8002804:	428a      	cmp	r2, r1
 8002806:	d031      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002808:	3118      	adds	r1, #24
 800280a:	428a      	cmp	r2, r1
 800280c:	d02e      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 800280e:	3118      	adds	r1, #24
 8002810:	428a      	cmp	r2, r1
 8002812:	d02b      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002814:	3118      	adds	r1, #24
 8002816:	428a      	cmp	r2, r1
 8002818:	d028      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 800281a:	3118      	adds	r1, #24
 800281c:	428a      	cmp	r2, r1
 800281e:	d025      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002820:	3118      	adds	r1, #24
 8002822:	428a      	cmp	r2, r1
 8002824:	d022      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002826:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800282a:	428a      	cmp	r2, r1
 800282c:	d01e      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 800282e:	3118      	adds	r1, #24
 8002830:	428a      	cmp	r2, r1
 8002832:	d01b      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002834:	3118      	adds	r1, #24
 8002836:	428a      	cmp	r2, r1
 8002838:	d018      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 800283a:	3118      	adds	r1, #24
 800283c:	428a      	cmp	r2, r1
 800283e:	d015      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002840:	3118      	adds	r1, #24
 8002842:	428a      	cmp	r2, r1
 8002844:	d012      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002846:	3118      	adds	r1, #24
 8002848:	428a      	cmp	r2, r1
 800284a:	d00f      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 800284c:	3118      	adds	r1, #24
 800284e:	428a      	cmp	r2, r1
 8002850:	d00c      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002852:	3118      	adds	r1, #24
 8002854:	428a      	cmp	r2, r1
 8002856:	d009      	beq.n	800286c <HAL_DMA_IRQHandler+0x340>
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800285e:	e008      	b.n	8002872 <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002860:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002862:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6563      	str	r3, [r4, #84]	; 0x54
 800286a:	e7bb      	b.n	80027e4 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002872:	b1fa      	cbz	r2, 80028b4 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002874:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800287e:	d00d      	beq.n	800289c <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002886:	d104      	bne.n	8002892 <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8002888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800288a:	b19b      	cbz	r3, 80028b4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 800288c:	4620      	mov	r0, r4
 800288e:	4798      	blx	r3
 8002890:	e010      	b.n	80028b4 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002892:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002894:	b173      	cbz	r3, 80028b4 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 8002896:	4620      	mov	r0, r4
 8002898:	4798      	blx	r3
 800289a:	e00b      	b.n	80028b4 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f412 7f80 	tst.w	r2, #256	; 0x100
 80028a2:	d103      	bne.n	80028ac <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f022 0208 	bic.w	r2, r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028ae:	b10b      	cbz	r3, 80028b4 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 80028b0:	4620      	mov	r0, r4
 80028b2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2220      	movs	r2, #32
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	4233      	tst	r3, r6
 80028c2:	f000 8093 	beq.w	80029ec <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028c6:	6822      	ldr	r2, [r4, #0]
 80028c8:	483d      	ldr	r0, [pc, #244]	; (80029c0 <HAL_DMA_IRQHandler+0x494>)
 80028ca:	493e      	ldr	r1, [pc, #248]	; (80029c4 <HAL_DMA_IRQHandler+0x498>)
 80028cc:	428a      	cmp	r2, r1
 80028ce:	bf18      	it	ne
 80028d0:	4282      	cmpne	r2, r0
 80028d2:	d02e      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028d4:	3118      	adds	r1, #24
 80028d6:	428a      	cmp	r2, r1
 80028d8:	d02b      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028da:	3118      	adds	r1, #24
 80028dc:	428a      	cmp	r2, r1
 80028de:	d028      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028e0:	3118      	adds	r1, #24
 80028e2:	428a      	cmp	r2, r1
 80028e4:	d025      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028e6:	3118      	adds	r1, #24
 80028e8:	428a      	cmp	r2, r1
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028ec:	3118      	adds	r1, #24
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d01f      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028f2:	3118      	adds	r1, #24
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d01c      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 80028f8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80028fc:	428a      	cmp	r2, r1
 80028fe:	d018      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 8002900:	3118      	adds	r1, #24
 8002902:	428a      	cmp	r2, r1
 8002904:	d015      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 8002906:	3118      	adds	r1, #24
 8002908:	428a      	cmp	r2, r1
 800290a:	d012      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 800290c:	3118      	adds	r1, #24
 800290e:	428a      	cmp	r2, r1
 8002910:	d00f      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 8002912:	3118      	adds	r1, #24
 8002914:	428a      	cmp	r2, r1
 8002916:	d00c      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 8002918:	3118      	adds	r1, #24
 800291a:	428a      	cmp	r2, r1
 800291c:	d009      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 800291e:	3118      	adds	r1, #24
 8002920:	428a      	cmp	r2, r1
 8002922:	d006      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 8002924:	3118      	adds	r1, #24
 8002926:	428a      	cmp	r2, r1
 8002928:	d003      	beq.n	8002932 <HAL_DMA_IRQHandler+0x406>
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002930:	e002      	b.n	8002938 <HAL_DMA_IRQHandler+0x40c>
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002938:	2a00      	cmp	r2, #0
 800293a:	d057      	beq.n	80029ec <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800293c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800293e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00e      	beq.n	8002966 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002950:	d03a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002958:	d12d      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 800295a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800295c:	2b00      	cmp	r3, #0
 800295e:	d045      	beq.n	80029ec <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8002960:	4620      	mov	r0, r4
 8002962:	4798      	blx	r3
 8002964:	e042      	b.n	80029ec <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002966:	6822      	ldr	r2, [r4, #0]
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f023 0316 	bic.w	r3, r3, #22
 800296e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	6953      	ldr	r3, [r2, #20]
 8002974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002978:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800297a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800297c:	b1bb      	cbz	r3, 80029ae <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	6813      	ldr	r3, [r2, #0]
 8002982:	f023 0308 	bic.w	r3, r3, #8
 8002986:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002988:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	233f      	movs	r3, #63	; 0x3f
 8002990:	4093      	lsls	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002994:	2301      	movs	r3, #1
 8002996:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800299a:	2300      	movs	r3, #0
 800299c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80029a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8080 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80029a8:	4620      	mov	r0, r4
 80029aa:	4798      	blx	r3
          return;
 80029ac:	e07c      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e4      	bne.n	800297e <HAL_DMA_IRQHandler+0x452>
 80029b4:	e7e8      	b.n	8002988 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 80029b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029b8:	b1c3      	cbz	r3, 80029ec <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 80029ba:	4620      	mov	r0, r4
 80029bc:	4798      	blx	r3
 80029be:	e015      	b.n	80029ec <HAL_DMA_IRQHandler+0x4c0>
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 80029ce:	d109      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f022 0210 	bic.w	r2, r2, #16
 80029d6:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80029d8:	2301      	movs	r3, #1
 80029da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80029de:	2300      	movs	r3, #0
 80029e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 80029e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029e6:	b10b      	cbz	r3, 80029ec <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 80029e8:	4620      	mov	r0, r4
 80029ea:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d05a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80029f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029f4:	f013 0f01 	tst.w	r3, #1
 80029f8:	d052      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	2304      	movs	r3, #4
 80029fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	4996      	ldr	r1, [pc, #600]	; (8002c5c <HAL_DMA_IRQHandler+0x730>)
 8002a04:	4a96      	ldr	r2, [pc, #600]	; (8002c60 <HAL_DMA_IRQHandler+0x734>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	bf18      	it	ne
 8002a0a:	428b      	cmpne	r3, r1
 8002a0c:	d02f      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a0e:	3218      	adds	r2, #24
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a14:	3218      	adds	r2, #24
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d029      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a1a:	3218      	adds	r2, #24
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d026      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a20:	3218      	adds	r2, #24
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d023      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a26:	3218      	adds	r2, #24
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d020      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a2c:	3218      	adds	r2, #24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a32:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a3a:	3218      	adds	r2, #24
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d016      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a40:	3218      	adds	r2, #24
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a46:	3218      	adds	r2, #24
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d010      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a4c:	3218      	adds	r2, #24
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a52:	3218      	adds	r2, #24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00a      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a58:	3218      	adds	r2, #24
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a5e:	3218      	adds	r2, #24
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x542>
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e003      	b.n	8002a76 <HAL_DMA_IRQHandler+0x54a>
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	d804      	bhi.n	8002a8a <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f013 0f01 	tst.w	r3, #1
 8002a88:	d1f5      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f013 0f01 	tst.w	r3, #1
 8002a92:	d00b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a94:	2303      	movs	r3, #3
 8002a96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8002aa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002aa2:	b10b      	cbz	r3, 8002aa8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4798      	blx	r3
}
 8002aa8:	b003      	add	sp, #12
 8002aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8002ab2:	e7f2      	b.n	8002a9a <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f6      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8002aba:	4620      	mov	r0, r4
 8002abc:	4798      	blx	r3
 8002abe:	e7f3      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ac0:	f012 0f20 	tst.w	r2, #32
 8002ac4:	d13a      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	4964      	ldr	r1, [pc, #400]	; (8002c5c <HAL_DMA_IRQHandler+0x730>)
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_DMA_IRQHandler+0x734>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	bf18      	it	ne
 8002ad0:	428b      	cmpne	r3, r1
 8002ad2:	d02f      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002ad4:	3218      	adds	r2, #24
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002ada:	3218      	adds	r2, #24
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d029      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002ae0:	3218      	adds	r2, #24
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d026      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002ae6:	3218      	adds	r2, #24
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d023      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002aec:	3218      	adds	r2, #24
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d020      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002af2:	3218      	adds	r2, #24
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002af8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d019      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b00:	3218      	adds	r2, #24
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d016      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b06:	3218      	adds	r2, #24
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b0c:	3218      	adds	r2, #24
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d010      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b12:	3218      	adds	r2, #24
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00d      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b18:	3218      	adds	r2, #24
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00a      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b1e:	3218      	adds	r2, #24
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b24:	3218      	adds	r2, #24
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x608>
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f022 0204 	bic.w	r2, r2, #4
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e003      	b.n	8002b3c <HAL_DMA_IRQHandler+0x610>
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f022 0208 	bic.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0b2      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8002b42:	4620      	mov	r0, r4
 8002b44:	4798      	blx	r3
 8002b46:	e7af      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002b48:	2002      	movs	r0, #2
 8002b4a:	4088      	lsls	r0, r1
 8002b4c:	ea10 0f0c 	tst.w	r0, ip
 8002b50:	d060      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6e8>
 8002b52:	f012 0f02 	tst.w	r2, #2
 8002b56:	d05d      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002b58:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b60:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002b64:	d105      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8002b66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d09d      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4798      	blx	r3
 8002b70:	e79a      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8002b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d097      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4798      	blx	r3
 8002b7c:	e794      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b7e:	f012 0f20 	tst.w	r2, #32
 8002b82:	d140      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_DMA_IRQHandler+0x730>)
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <HAL_DMA_IRQHandler+0x734>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	bf18      	it	ne
 8002b8e:	428b      	cmpne	r3, r1
 8002b90:	d02f      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002b92:	3218      	adds	r2, #24
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d02c      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002b98:	3218      	adds	r2, #24
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d029      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002b9e:	3218      	adds	r2, #24
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d026      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002ba4:	3218      	adds	r2, #24
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d023      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002baa:	3218      	adds	r2, #24
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d020      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bb0:	3218      	adds	r2, #24
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bb6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bbe:	3218      	adds	r2, #24
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d016      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bc4:	3218      	adds	r2, #24
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bca:	3218      	adds	r2, #24
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d010      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bd0:	3218      	adds	r2, #24
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bd6:	3218      	adds	r2, #24
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00a      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002bdc:	3218      	adds	r2, #24
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002be2:	3218      	adds	r2, #24
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x6c6>
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f022 020a 	bic.w	r2, r2, #10
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e003      	b.n	8002bfa <HAL_DMA_IRQHandler+0x6ce>
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	f022 0214 	bic.w	r2, r2, #20
 8002bf8:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002c00:	2300      	movs	r3, #0
 8002c02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002c06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f43f af4d 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4798      	blx	r3
 8002c12:	e749      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c14:	2008      	movs	r0, #8
 8002c16:	fa00 f101 	lsl.w	r1, r0, r1
 8002c1a:	ea11 0f0c 	tst.w	r1, ip
 8002c1e:	f43f af43 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
 8002c22:	f012 0f08 	tst.w	r2, #8
 8002c26:	f43f af3f 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f022 020e 	bic.w	r2, r2, #14
 8002c30:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2201      	movs	r2, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c40:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8002c42:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002c46:	2300      	movs	r3, #0
 8002c48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8002c4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f43f af2a 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8002c54:	4620      	mov	r0, r4
 8002c56:	4798      	blx	r3
  }
 8002c58:	e726      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x57c>
 8002c5a:	bf00      	nop
 8002c5c:	40020010 	.word	0x40020010
 8002c60:	40020028 	.word	0x40020028

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002c68:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c6a:	e06b      	b.n	8002d44 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c6e:	005e      	lsls	r6, r3, #1
 8002c70:	2403      	movs	r4, #3
 8002c72:	40b4      	lsls	r4, r6
 8002c74:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c78:	68cc      	ldr	r4, [r1, #12]
 8002c7a:	40b4      	lsls	r4, r6
 8002c7c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002c7e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c80:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c82:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c86:	684c      	ldr	r4, [r1, #4]
 8002c88:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002c8c:	409c      	lsls	r4, r3
 8002c8e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002c90:	6044      	str	r4, [r0, #4]
 8002c92:	e069      	b.n	8002d68 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c94:	08dd      	lsrs	r5, r3, #3
 8002c96:	3508      	adds	r5, #8
 8002c98:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c9c:	f003 0c07 	and.w	ip, r3, #7
 8002ca0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002ca4:	f04f 0e0f 	mov.w	lr, #15
 8002ca8:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002cac:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cb0:	690c      	ldr	r4, [r1, #16]
 8002cb2:	fa04 f40c 	lsl.w	r4, r4, ip
 8002cb6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002cba:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002cbe:	e06b      	b.n	8002d98 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cc0:	2409      	movs	r4, #9
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002cc4:	2400      	movs	r4, #0
 8002cc6:	fa04 f40e 	lsl.w	r4, r4, lr
 8002cca:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ccc:	f10c 0c02 	add.w	ip, ip, #2
 8002cd0:	4d69      	ldr	r5, [pc, #420]	; (8002e78 <HAL_GPIO_Init+0x214>)
 8002cd2:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8002cda:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002cdc:	43d4      	mvns	r4, r2
 8002cde:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ce2:	684f      	ldr	r7, [r1, #4]
 8002ce4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002ce8:	d001      	beq.n	8002cee <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8002cea:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002cee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002cf2:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002cf4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002cf6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfa:	684f      	ldr	r7, [r1, #4]
 8002cfc:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002d00:	d001      	beq.n	8002d06 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8002d02:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002d06:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002d0a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d0c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8002d10:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d14:	684f      	ldr	r7, [r1, #4]
 8002d16:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002d1a:	d001      	beq.n	8002d20 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002d1c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d20:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002d24:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d28:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8002d2c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2e:	684e      	ldr	r6, [r1, #4]
 8002d30:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002d34:	d001      	beq.n	8002d3a <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8002d36:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8002d42:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d44:	680a      	ldr	r2, [r1, #0]
 8002d46:	fa32 f403 	lsrs.w	r4, r2, r3
 8002d4a:	f000 8092 	beq.w	8002e72 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d4e:	f04f 0c01 	mov.w	ip, #1
 8002d52:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8002d56:	ea1c 0202 	ands.w	r2, ip, r2
 8002d5a:	d0f2      	beq.n	8002d42 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d5c:	684c      	ldr	r4, [r1, #4]
 8002d5e:	f004 0403 	and.w	r4, r4, #3
 8002d62:	3c01      	subs	r4, #1
 8002d64:	2c01      	cmp	r4, #1
 8002d66:	d981      	bls.n	8002c6c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d68:	684c      	ldr	r4, [r1, #4]
 8002d6a:	f004 0403 	and.w	r4, r4, #3
 8002d6e:	2c03      	cmp	r4, #3
 8002d70:	d00c      	beq.n	8002d8c <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8002d72:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d74:	005d      	lsls	r5, r3, #1
 8002d76:	f04f 0c03 	mov.w	ip, #3
 8002d7a:	fa0c fc05 	lsl.w	ip, ip, r5
 8002d7e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d82:	688c      	ldr	r4, [r1, #8]
 8002d84:	40ac      	lsls	r4, r5
 8002d86:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8002d8a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8c:	684c      	ldr	r4, [r1, #4]
 8002d8e:	f004 0403 	and.w	r4, r4, #3
 8002d92:	2c02      	cmp	r4, #2
 8002d94:	f43f af7e 	beq.w	8002c94 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8002d98:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d9a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002d9e:	f04f 0c03 	mov.w	ip, #3
 8002da2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002da6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002daa:	684c      	ldr	r4, [r1, #4]
 8002dac:	f004 0403 	and.w	r4, r4, #3
 8002db0:	fa04 f40e 	lsl.w	r4, r4, lr
 8002db4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002db8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dba:	684c      	ldr	r4, [r1, #4]
 8002dbc:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002dc0:	d0bf      	beq.n	8002d42 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4c2e      	ldr	r4, [pc, #184]	; (8002e7c <HAL_GPIO_Init+0x218>)
 8002dc4:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002dc8:	f045 0502 	orr.w	r5, r5, #2
 8002dcc:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8002dd0:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8002dd4:	f004 0402 	and.w	r4, r4, #2
 8002dd8:	9401      	str	r4, [sp, #4]
 8002dda:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ddc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002de0:	f10c 0502 	add.w	r5, ip, #2
 8002de4:	4c24      	ldr	r4, [pc, #144]	; (8002e78 <HAL_GPIO_Init+0x214>)
 8002de6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dea:	f003 0e03 	and.w	lr, r3, #3
 8002dee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002df2:	240f      	movs	r4, #15
 8002df4:	fa04 f40e 	lsl.w	r4, r4, lr
 8002df8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dfc:	4c20      	ldr	r4, [pc, #128]	; (8002e80 <HAL_GPIO_Init+0x21c>)
 8002dfe:	42a0      	cmp	r0, r4
 8002e00:	f43f af60 	beq.w	8002cc4 <HAL_GPIO_Init+0x60>
 8002e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e08:	42a0      	cmp	r0, r4
 8002e0a:	d022      	beq.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e10:	42a0      	cmp	r0, r4
 8002e12:	d020      	beq.n	8002e56 <HAL_GPIO_Init+0x1f2>
 8002e14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e18:	42a0      	cmp	r0, r4
 8002e1a:	d01e      	beq.n	8002e5a <HAL_GPIO_Init+0x1f6>
 8002e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d01c      	beq.n	8002e5e <HAL_GPIO_Init+0x1fa>
 8002e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e28:	42a0      	cmp	r0, r4
 8002e2a:	d01a      	beq.n	8002e62 <HAL_GPIO_Init+0x1fe>
 8002e2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e30:	42a0      	cmp	r0, r4
 8002e32:	d018      	beq.n	8002e66 <HAL_GPIO_Init+0x202>
 8002e34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d016      	beq.n	8002e6a <HAL_GPIO_Init+0x206>
 8002e3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e40:	42a0      	cmp	r0, r4
 8002e42:	d014      	beq.n	8002e6e <HAL_GPIO_Init+0x20a>
 8002e44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e48:	42a0      	cmp	r0, r4
 8002e4a:	f43f af39 	beq.w	8002cc0 <HAL_GPIO_Init+0x5c>
 8002e4e:	240a      	movs	r4, #10
 8002e50:	e739      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e52:	2401      	movs	r4, #1
 8002e54:	e737      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e56:	2402      	movs	r4, #2
 8002e58:	e735      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e5a:	2403      	movs	r4, #3
 8002e5c:	e733      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e5e:	2404      	movs	r4, #4
 8002e60:	e731      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e62:	2405      	movs	r4, #5
 8002e64:	e72f      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e66:	2406      	movs	r4, #6
 8002e68:	e72d      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e6a:	2407      	movs	r4, #7
 8002e6c:	e72b      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
 8002e6e:	2408      	movs	r4, #8
 8002e70:	e729      	b.n	8002cc6 <HAL_GPIO_Init+0x62>
  }
}
 8002e72:	b003      	add	sp, #12
 8002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	58000400 	.word	0x58000400
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	58020000 	.word	0x58020000

08002e84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e84:	b10a      	cbz	r2, 8002e8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e86:	6181      	str	r1, [r0, #24]
 8002e88:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e8a:	0409      	lsls	r1, r1, #16
 8002e8c:	6181      	str	r1, [r0, #24]
  }
}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_I2SEx_TxRxHalfCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e92:	4770      	bx	lr

08002e94 <HAL_I2S_ErrorCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e94:	4770      	bx	lr

08002e96 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002e96:	b508      	push	{r3, lr}
 8002e98:	4603      	mov	r3, r0
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9a:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	b94b      	cbnz	r3, 8002eb4 <I2S_DMATxCplt+0x1e>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002ea0:	6802      	ldr	r2, [r0, #0]
 8002ea2:	6893      	ldr	r3, [r2, #8]
 8002ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ea8:	6093      	str	r3, [r2, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 8002eb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002eb6:	4798      	blx	r3
#else
  HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002eb8:	bd08      	pop	{r3, pc}

08002eba <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002eba:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 8002ebe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002ec0:	4798      	blx	r3
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ec2:	bd08      	pop	{r3, pc}

08002ec4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b508      	push	{r3, lr}
 8002ec6:	4603      	mov	r3, r0
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec8:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	b94b      	cbnz	r3, 8002ee2 <I2S_DMARxCplt+0x1e>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002ece:	6802      	ldr	r2, [r0, #0]
 8002ed0:	6893      	ldr	r3, [r2, #8]
 8002ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed6:	6093      	str	r3, [r2, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	8743      	strh	r3, [r0, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 8002ee2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002ee4:	4798      	blx	r3
#else
  HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ee6:	bd08      	pop	{r3, pc}

08002ee8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eea:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 8002eec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002eee:	4798      	blx	r3
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ef0:	bd08      	pop	{r3, pc}

08002ef2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ef2:	b508      	push	{r3, lr}
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002ef6:	6802      	ldr	r2, [r0, #0]
 8002ef8:	6893      	ldr	r3, [r2, #8]
 8002efa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002efe:	6093      	str	r3, [r2, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8002f04:	8743      	strh	r3, [r0, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	6503      	str	r3, [r0, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 8002f14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002f16:	4798      	blx	r3
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f18:	bd08      	pop	{r3, pc}
	...

08002f1c <HAL_I2S_Init>:
  if (hi2s == NULL)
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f000 80c5 	beq.w	80030ac <HAL_I2S_Init+0x190>
{
 8002f22:	b570      	push	{r4, r5, r6, lr}
 8002f24:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f26:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8002f2a:	b9ab      	cbnz	r3, 8002f58 <HAL_I2S_Init+0x3c>
    hi2s->Lock = HAL_UNLOCKED;
 8002f2c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_I2S_Init+0x194>)
 8002f32:	6543      	str	r3, [r0, #84]	; 0x54
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8002f34:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_I2S_Init+0x198>)
 8002f36:	6583      	str	r3, [r0, #88]	; 0x58
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_I2S_Init+0x19c>)
 8002f3a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 8002f3c:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <HAL_I2S_Init+0x1a0>)
 8002f3e:	6603      	str	r3, [r0, #96]	; 0x60
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_I2S_Init+0x1a4>)
 8002f42:	6643      	str	r3, [r0, #100]	; 0x64
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8002f44:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_I2S_Init+0x1a8>)
 8002f46:	6683      	str	r3, [r0, #104]	; 0x68
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8002f48:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_I2S_Init+0x1ac>)
 8002f4a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (hi2s->MspInitCallback == NULL)
 8002f4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d051      	beq.n	8002ff6 <HAL_I2S_Init+0xda>
    hi2s->MspInitCallback(hi2s);
 8002f52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002f54:	4620      	mov	r0, r4
 8002f56:	4798      	blx	r3
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f012 0f01 	tst.w	r2, #1
 8002f66:	d003      	beq.n	8002f70 <HAL_I2S_Init+0x54>
    __HAL_I2S_DISABLE(hi2s);
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	651a      	str	r2, [r3, #80]	; 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002f76:	6863      	ldr	r3, [r4, #4]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	bf18      	it	ne
 8002f7c:	2b04      	cmpne	r3, #4
 8002f7e:	d03d      	beq.n	8002ffc <HAL_I2S_Init+0xe0>
 8002f80:	2b0a      	cmp	r3, #10
 8002f82:	d03b      	beq.n	8002ffc <HAL_I2S_Init+0xe0>
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002f84:	6821      	ldr	r1, [r4, #0]
 8002f86:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002f88:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_I2S_Init+0x1b0>)
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	68a0      	ldr	r0, [r4, #8]
 8002f90:	4303      	orrs	r3, r0
 8002f92:	68e0      	ldr	r0, [r4, #12]
 8002f94:	4303      	orrs	r3, r0
 8002f96:	69a0      	ldr	r0, [r4, #24]
 8002f98:	4303      	orrs	r3, r0
 8002f9a:	6a20      	ldr	r0, [r4, #32]
 8002f9c:	4303      	orrs	r3, r0
 8002f9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002fa0:	4303      	orrs	r3, r0
 8002fa2:	6920      	ldr	r0, [r4, #16]
 8002fa4:	4303      	orrs	r3, r0
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	650a      	str	r2, [r1, #80]	; 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002fb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	6813      	ldr	r3, [r2, #0]
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	68d3      	ldr	r3, [r2, #12]
 8002fc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fc8:	69e1      	ldr	r1, [r4, #28]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002fce:	6863      	ldr	r3, [r4, #4]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	bf18      	it	ne
 8002fd4:	2b04      	cmpne	r3, #4
 8002fd6:	d001      	beq.n	8002fdc <HAL_I2S_Init+0xc0>
 8002fd8:	2b0a      	cmp	r3, #10
 8002fda:	d106      	bne.n	8002fea <HAL_I2S_Init+0xce>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	68d3      	ldr	r3, [r2, #12]
 8002fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fe4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fea:	2000      	movs	r0, #0
 8002fec:	6520      	str	r0, [r4, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_I2S_Init+0x1b4>)
 8002ff8:	6703      	str	r3, [r0, #112]	; 0x70
 8002ffa:	e7aa      	b.n	8002f52 <HAL_I2S_Init+0x36>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ffc:	6963      	ldr	r3, [r4, #20]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d04c      	beq.n	800309c <HAL_I2S_Init+0x180>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d038      	beq.n	800307a <HAL_I2S_Init+0x15e>
        packetlength = 2UL;
 8003008:	2602      	movs	r6, #2
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800300a:	68a3      	ldr	r3, [r4, #8]
 800300c:	2bb0      	cmp	r3, #176	; 0xb0
 800300e:	bf18      	it	ne
 8003010:	2b30      	cmpne	r3, #48	; 0x30
 8003012:	d134      	bne.n	800307e <HAL_I2S_Init+0x162>
        ispcm = 1UL;
 8003014:	2501      	movs	r5, #1
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003016:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800301a:	2100      	movs	r1, #0
 800301c:	f002 f8be 	bl	800519c <HAL_RCCEx_GetPeriphCLKFreq>
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003026:	d02c      	beq.n	8003082 <HAL_I2S_Init+0x166>
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003028:	2320      	movs	r3, #32
 800302a:	40eb      	lsrs	r3, r5
 800302c:	fb06 f303 	mul.w	r3, r6, r3
 8003030:	fbb0 f0f3 	udiv	r0, r0, r3
 8003034:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003038:	0043      	lsls	r3, r0, #1
 800303a:	6962      	ldr	r2, [r4, #20]
 800303c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003040:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 8003042:	4a24      	ldr	r2, [pc, #144]	; (80030d4 <HAL_I2S_Init+0x1b8>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003048:	f3c3 02c0 	ubfx	r2, r3, #3, #1
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800304c:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8003050:	085b      	lsrs	r3, r3, #1
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003052:	2b01      	cmp	r3, #1
 8003054:	bf14      	ite	ne
 8003056:	2100      	movne	r1, #0
 8003058:	f002 0101 	andeq.w	r1, r2, #1
 800305c:	bb01      	cbnz	r1, 80030a0 <HAL_I2S_Init+0x184>
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d81e      	bhi.n	80030a0 <HAL_I2S_Init+0x184>
    if (i2sdiv == 0UL)
 8003062:	b903      	cbnz	r3, 8003066 <HAL_I2S_Init+0x14a>
      i2sodd = 1UL;
 8003064:	2201      	movs	r2, #1
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800306a:	491b      	ldr	r1, [pc, #108]	; (80030d8 <HAL_I2S_Init+0x1bc>)
 800306c:	4029      	ands	r1, r5
 800306e:	0612      	lsls	r2, r2, #24
 8003070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003074:	4311      	orrs	r1, r2
 8003076:	6501      	str	r1, [r0, #80]	; 0x50
 8003078:	e784      	b.n	8002f84 <HAL_I2S_Init+0x68>
        packetlength = 1UL;
 800307a:	2601      	movs	r6, #1
 800307c:	e7c5      	b.n	800300a <HAL_I2S_Init+0xee>
        ispcm = 0UL;
 800307e:	2500      	movs	r5, #0
 8003080:	e7c9      	b.n	8003016 <HAL_I2S_Init+0xfa>
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003086:	40eb      	lsrs	r3, r5
 8003088:	fbb0 f0f3 	udiv	r0, r0, r3
 800308c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003090:	0043      	lsls	r3, r0, #1
 8003092:	6962      	ldr	r2, [r4, #20]
 8003094:	fbb3 f3f2 	udiv	r3, r3, r2
 8003098:	3305      	adds	r3, #5
 800309a:	e7d2      	b.n	8003042 <HAL_I2S_Init+0x126>
      i2sodd = 0UL;
 800309c:	2200      	movs	r2, #0
 800309e:	e7d8      	b.n	8003052 <HAL_I2S_Init+0x136>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6523      	str	r3, [r4, #80]	; 0x50
      return  HAL_ERROR;
 80030a8:	2001      	movs	r0, #1
 80030aa:	e7a3      	b.n	8002ff4 <HAL_I2S_Init+0xd8>
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
}
 80030ae:	4770      	bx	lr
 80030b0:	08001025 	.word	0x08001025
 80030b4:	08000fa1 	.word	0x08000fa1
 80030b8:	08002e93 	.word	0x08002e93
 80030bc:	08000fed 	.word	0x08000fed
 80030c0:	08000f55 	.word	0x08000f55
 80030c4:	08002e91 	.word	0x08002e91
 80030c8:	08002e95 	.word	0x08002e95
 80030cc:	fdff9040 	.word	0xfdff9040
 80030d0:	08001579 	.word	0x08001579
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	fe00ffff 	.word	0xfe00ffff

080030dc <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 80030dc:	2a00      	cmp	r2, #0
 80030de:	bf18      	it	ne
 80030e0:	2900      	cmpne	r1, #0
 80030e2:	d052      	beq.n	800318a <HAL_I2S_Transmit_DMA+0xae>
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 80030e8:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
 80030ec:	b2ed      	uxtb	r5, r5
 80030ee:	2d01      	cmp	r5, #1
 80030f0:	d14d      	bne.n	800318e <HAL_I2S_Transmit_DMA+0xb2>
  __HAL_LOCK(hi2s);
 80030f2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d04a      	beq.n	8003192 <HAL_I2S_Transmit_DMA+0xb6>
 80030fc:	2301      	movs	r3, #1
 80030fe:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8003102:	2303      	movs	r3, #3
 8003104:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8003108:	2300      	movs	r3, #0
 800310a:	6523      	str	r3, [r4, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 800310c:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 800310e:	8622      	strh	r2, [r4, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8003110:	8662      	strh	r2, [r4, #50]	; 0x32
  hi2s->pRxBuffPtr  = NULL;
 8003112:	6363      	str	r3, [r4, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8003114:	8723      	strh	r3, [r4, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8003116:	8763      	strh	r3, [r4, #58]	; 0x3a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003118:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_I2S_Transmit_DMA+0xbc>)
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800311e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003120:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_I2S_Transmit_DMA+0xc0>)
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003124:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_I2S_Transmit_DMA+0xc4>)
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 800312a:	6822      	ldr	r2, [r4, #0]
                                 hi2s->TxXferCount))
 800312c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 800312e:	b29b      	uxth	r3, r3
 8003130:	3220      	adds	r2, #32
 8003132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003134:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003136:	f7ff f8ad 	bl	8002294 <HAL_DMA_Start_IT>
 800313a:	b9d0      	cbnz	r0, 8003172 <HAL_I2S_Transmit_DMA+0x96>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003144:	d103      	bne.n	800314e <HAL_I2S_Transmit_DMA+0x72>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314c:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f012 0f01 	tst.w	r2, #1
 8003156:	d103      	bne.n	8003160 <HAL_I2S_Transmit_DMA+0x84>
    __HAL_I2S_ENABLE(hi2s);
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003168:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2s);
 800316a:	2300      	movs	r3, #0
 800316c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return errorcode;
 8003170:	e00e      	b.n	8003190 <HAL_I2S_Transmit_DMA+0xb4>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800317a:	2301      	movs	r3, #1
 800317c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8003180:	2300      	movs	r3, #0
 8003182:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return errorcode;
 8003186:	4628      	mov	r0, r5
 8003188:	e002      	b.n	8003190 <HAL_I2S_Transmit_DMA+0xb4>
    return  HAL_ERROR;
 800318a:	2001      	movs	r0, #1
}
 800318c:	4770      	bx	lr
    return HAL_BUSY;
 800318e:	2002      	movs	r0, #2
}
 8003190:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hi2s);
 8003192:	2002      	movs	r0, #2
 8003194:	e7fc      	b.n	8003190 <HAL_I2S_Transmit_DMA+0xb4>
 8003196:	bf00      	nop
 8003198:	08002ebb 	.word	0x08002ebb
 800319c:	08002e97 	.word	0x08002e97
 80031a0:	08002ef3 	.word	0x08002ef3

080031a4 <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	bf18      	it	ne
 80031a8:	2900      	cmpne	r1, #0
 80031aa:	d052      	beq.n	8003252 <HAL_I2S_Receive_DMA+0xae>
{
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 80031b0:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
 80031b4:	b2ed      	uxtb	r5, r5
 80031b6:	2d01      	cmp	r5, #1
 80031b8:	d14d      	bne.n	8003256 <HAL_I2S_Receive_DMA+0xb2>
  __HAL_LOCK(hi2s);
 80031ba:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d04a      	beq.n	800325a <HAL_I2S_Receive_DMA+0xb6>
 80031c4:	2301      	movs	r3, #1
 80031c6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80031ca:	2304      	movs	r3, #4
 80031cc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	6523      	str	r3, [r4, #80]	; 0x50
  hi2s->pRxBuffPtr  = pData;
 80031d4:	6361      	str	r1, [r4, #52]	; 0x34
  hi2s->RxXferSize  = Size;
 80031d6:	8722      	strh	r2, [r4, #56]	; 0x38
  hi2s->RxXferCount = Size;
 80031d8:	8762      	strh	r2, [r4, #58]	; 0x3a
  hi2s->pTxBuffPtr  = NULL;
 80031da:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 80031dc:	8623      	strh	r3, [r4, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 80031de:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80031e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_I2S_Receive_DMA+0xbc>)
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80031e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_I2S_Receive_DMA+0xc0>)
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80031ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80031ee:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <HAL_I2S_Receive_DMA+0xc4>)
 80031f0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80031f2:	6821      	ldr	r1, [r4, #0]
                                 hi2s->RxXferCount))
 80031f4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031fa:	3130      	adds	r1, #48	; 0x30
 80031fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80031fe:	f7ff f849 	bl	8002294 <HAL_DMA_Start_IT>
 8003202:	b9d0      	cbnz	r0, 800323a <HAL_I2S_Receive_DMA+0x96>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800320c:	d103      	bne.n	8003216 <HAL_I2S_Receive_DMA+0x72>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003214:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f012 0f01 	tst.w	r2, #1
 800321e:	d103      	bne.n	8003228 <HAL_I2S_Receive_DMA+0x84>
    __HAL_I2S_ENABLE(hi2s);
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003230:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2s);
 8003232:	2300      	movs	r3, #0
 8003234:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return errorcode;
 8003238:	e00e      	b.n	8003258 <HAL_I2S_Receive_DMA+0xb4>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800323a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003242:	2301      	movs	r3, #1
 8003244:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8003248:	2300      	movs	r3, #0
 800324a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return errorcode;
 800324e:	4628      	mov	r0, r5
 8003250:	e002      	b.n	8003258 <HAL_I2S_Receive_DMA+0xb4>
    return HAL_ERROR;
 8003252:	2001      	movs	r0, #1
}
 8003254:	4770      	bx	lr
    return HAL_BUSY;
 8003256:	2002      	movs	r0, #2
}
 8003258:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hi2s);
 800325a:	2002      	movs	r0, #2
 800325c:	e7fc      	b.n	8003258 <HAL_I2S_Receive_DMA+0xb4>
 800325e:	bf00      	nop
 8003260:	08002ee9 	.word	0x08002ee9
 8003264:	08002ec5 	.word	0x08002ec5
 8003268:	08002ef3 	.word	0x08002ef3

0800326c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_PWREx_ConfigSupply+0x90>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	2b06      	cmp	r3, #6
 800327a:	d007      	beq.n	800328c <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_PWREx_ConfigSupply+0x90>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	4283      	cmp	r3, r0
 8003286:	d036      	beq.n	80032f6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800328a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_PWREx_ConfigSupply+0x90>)
 800328e:	68d3      	ldr	r3, [r2, #12]
 8003290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003294:	4303      	orrs	r3, r0
 8003296:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8003298:	f7fe fb8e 	bl	80019b8 <HAL_GetTick>
 800329c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_PWREx_ConfigSupply+0x90>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80032a6:	d107      	bne.n	80032b8 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032a8:	f7fe fb86 	bl	80019b8 <HAL_GetTick>
 80032ac:	1b43      	subs	r3, r0, r5
 80032ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b2:	d9f4      	bls.n	800329e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
 80032b6:	e7e8      	b.n	800328a <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032b8:	2c2e      	cmp	r4, #46	; 0x2e
 80032ba:	bf18      	it	ne
 80032bc:	2c1e      	cmpne	r4, #30
 80032be:	d008      	beq.n	80032d2 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80032c0:	2c2d      	cmp	r4, #45	; 0x2d
 80032c2:	bf14      	ite	ne
 80032c4:	2300      	movne	r3, #0
 80032c6:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032c8:	2c1d      	cmp	r4, #29
 80032ca:	d002      	beq.n	80032d2 <HAL_PWREx_ConfigSupply+0x66>
 80032cc:	b90b      	cbnz	r3, 80032d2 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 80032ce:	2000      	movs	r0, #0
 80032d0:	e7db      	b.n	800328a <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 80032d2:	f7fe fb71 	bl	80019b8 <HAL_GetTick>
 80032d6:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_PWREx_ConfigSupply+0x90>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032e0:	d107      	bne.n	80032f2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032e2:	f7fe fb69 	bl	80019b8 <HAL_GetTick>
 80032e6:	1b00      	subs	r0, r0, r4
 80032e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032ec:	d9f4      	bls.n	80032d8 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
 80032f0:	e7cb      	b.n	800328a <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 80032f2:	2000      	movs	r0, #0
 80032f4:	e7c9      	b.n	800328a <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 80032f6:	2000      	movs	r0, #0
 80032f8:	e7c7      	b.n	800328a <HAL_PWREx_ConfigSupply+0x1e>
 80032fa:	bf00      	nop
 80032fc:	58024800 	.word	0x58024800

08003300 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003300:	2800      	cmp	r0, #0
 8003302:	f000 8339 	beq.w	8003978 <HAL_RCC_OscConfig+0x678>
{
 8003306:	b538      	push	{r3, r4, r5, lr}
 8003308:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	f013 0f01 	tst.w	r3, #1
 8003310:	d025      	beq.n	800335e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4a94      	ldr	r2, [pc, #592]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 8003314:	6913      	ldr	r3, [r2, #16]
 8003316:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800331c:	2b10      	cmp	r3, #16
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x4c>
 8003320:	2b18      	cmp	r3, #24
 8003322:	d00f      	beq.n	8003344 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d03f      	beq.n	80033ac <HAL_RCC_OscConfig+0xac>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d153      	bne.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 8003330:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e038      	b.n	80033b6 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003344:	f002 0203 	and.w	r2, r2, #3
 8003348:	2a02      	cmp	r2, #2
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003354:	d003      	beq.n	800335e <HAL_RCC_OscConfig+0x5e>
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 830f 	beq.w	800397c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f013 0f02 	tst.w	r3, #2
 8003364:	f000 80a1 	beq.w	80034aa <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003368:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800336a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800336c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800336e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003372:	d05a      	beq.n	800342a <HAL_RCC_OscConfig+0x12a>
 8003374:	2b18      	cmp	r3, #24
 8003376:	d055      	beq.n	8003424 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003378:	68e3      	ldr	r3, [r4, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80de 	beq.w	800353c <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003380:	4978      	ldr	r1, [pc, #480]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 8003382:	680a      	ldr	r2, [r1, #0]
 8003384:	f022 0219 	bic.w	r2, r2, #25
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fb14 	bl	80019b8 <HAL_GetTick>
 8003390:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003392:	4b74      	ldr	r3, [pc, #464]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f013 0f04 	tst.w	r3, #4
 800339a:	f040 80ad 	bne.w	80034f8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7fe fb0b 	bl	80019b8 <HAL_GetTick>
 80033a2:	1b40      	subs	r0, r0, r5
 80033a4:	2802      	cmp	r0, #2
 80033a6:	d9f4      	bls.n	8003392 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80033a8:	2003      	movs	r0, #3
 80033aa:	e2ee      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	4a6d      	ldr	r2, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	b32b      	cbz	r3, 8003406 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80033ba:	f7fe fafd 	bl	80019b8 <HAL_GetTick>
 80033be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033c8:	d1c9      	bne.n	800335e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ca:	f7fe faf5 	bl	80019b8 <HAL_GetTick>
 80033ce:	1b40      	subs	r0, r0, r5
 80033d0:	2864      	cmp	r0, #100	; 0x64
 80033d2:	d9f5      	bls.n	80033c0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80033d4:	2003      	movs	r0, #3
 80033d6:	e2d8      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_OscConfig+0xf2>
 80033de:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e7e1      	b.n	80033b6 <HAL_RCC_OscConfig+0xb6>
 80033f2:	4b5c      	ldr	r3, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e7d7      	b.n	80033b6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003406:	f7fe fad7 	bl	80019b8 <HAL_GetTick>
 800340a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003414:	d0a3      	beq.n	800335e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003416:	f7fe facf 	bl	80019b8 <HAL_GetTick>
 800341a:	1b40      	subs	r0, r0, r5
 800341c:	2864      	cmp	r0, #100	; 0x64
 800341e:	d9f5      	bls.n	800340c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8003420:	2003      	movs	r0, #3
 8003422:	e2b2      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003424:	f012 0f03 	tst.w	r2, #3
 8003428:	d1a6      	bne.n	8003378 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342a:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f013 0f04 	tst.w	r3, #4
 8003432:	d003      	beq.n	800343c <HAL_RCC_OscConfig+0x13c>
 8003434:	68e3      	ldr	r3, [r4, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 82a2 	beq.w	8003980 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800343c:	4a49      	ldr	r2, [pc, #292]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f023 0319 	bic.w	r3, r3, #25
 8003444:	68e1      	ldr	r1, [r4, #12]
 8003446:	430b      	orrs	r3, r1
 8003448:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800344a:	f7fe fab5 	bl	80019b8 <HAL_GetTick>
 800344e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003450:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f013 0f04 	tst.w	r3, #4
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345a:	f7fe faad 	bl	80019b8 <HAL_GetTick>
 800345e:	1b40      	subs	r0, r0, r5
 8003460:	2802      	cmp	r0, #2
 8003462:	d9f5      	bls.n	8003450 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8003464:	2003      	movs	r0, #3
 8003466:	e290      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	f7fe fac0 	bl	80019ec <HAL_GetREVID>
 800346c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003470:	4298      	cmp	r0, r3
 8003472:	d812      	bhi.n	800349a <HAL_RCC_OscConfig+0x19a>
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	2a40      	cmp	r2, #64	; 0x40
 8003478:	d007      	beq.n	800348a <HAL_RCC_OscConfig+0x18a>
 800347a:	493a      	ldr	r1, [pc, #232]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800347c:	684b      	ldr	r3, [r1, #4]
 800347e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003482:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	e00f      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
 800348a:	4a36      	ldr	r2, [pc, #216]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800348c:	6853      	ldr	r3, [r2, #4]
 800348e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	6053      	str	r3, [r2, #4]
 8003498:	e007      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
 800349a:	4a32      	ldr	r2, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800349c:	6853      	ldr	r3, [r2, #4]
 800349e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034a2:	6921      	ldr	r1, [r4, #16]
 80034a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034a8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	f013 0f10 	tst.w	r3, #16
 80034b0:	f000 8088 	beq.w	80035c4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80034b6:	6913      	ldr	r3, [r2, #16]
 80034b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d056      	beq.n	8003570 <HAL_RCC_OscConfig+0x270>
 80034c2:	2b18      	cmp	r3, #24
 80034c4:	d050      	beq.n	8003568 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034c6:	69e3      	ldr	r3, [r4, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80b8 	beq.w	800363e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80034d0:	6813      	ldr	r3, [r2, #0]
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa6e 	bl	80019b8 <HAL_GetTick>
 80034dc:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034de:	4b21      	ldr	r3, [pc, #132]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034e6:	f040 8088 	bne.w	80035fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034ea:	f7fe fa65 	bl	80019b8 <HAL_GetTick>
 80034ee:	1b40      	subs	r0, r0, r5
 80034f0:	2802      	cmp	r0, #2
 80034f2:	d9f4      	bls.n	80034de <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 80034f4:	2003      	movs	r0, #3
 80034f6:	e248      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	f7fe fa78 	bl	80019ec <HAL_GetREVID>
 80034fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003500:	4298      	cmp	r0, r3
 8003502:	d812      	bhi.n	800352a <HAL_RCC_OscConfig+0x22a>
 8003504:	6922      	ldr	r2, [r4, #16]
 8003506:	2a40      	cmp	r2, #64	; 0x40
 8003508:	d007      	beq.n	800351a <HAL_RCC_OscConfig+0x21a>
 800350a:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800350c:	684b      	ldr	r3, [r1, #4]
 800350e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003512:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003516:	604b      	str	r3, [r1, #4]
 8003518:	e7c7      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800351c:	6853      	ldr	r3, [r2, #4]
 800351e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003526:	6053      	str	r3, [r2, #4]
 8003528:	e7bf      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800352c:	6853      	ldr	r3, [r2, #4]
 800352e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003532:	6921      	ldr	r1, [r4, #16]
 8003534:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003538:	6053      	str	r3, [r2, #4]
 800353a:	e7b6      	b.n	80034aa <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 800353c:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003546:	f7fe fa37 	bl	80019b8 <HAL_GetTick>
 800354a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_OscConfig+0x264>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f013 0f04 	tst.w	r3, #4
 8003554:	d0a9      	beq.n	80034aa <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fa2f 	bl	80019b8 <HAL_GetTick>
 800355a:	1b40      	subs	r0, r0, r5
 800355c:	2802      	cmp	r0, #2
 800355e:	d9f5      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8003560:	2003      	movs	r0, #3
 8003562:	e212      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 8003564:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003568:	f002 0203 	and.w	r2, r2, #3
 800356c:	2a01      	cmp	r2, #1
 800356e:	d1aa      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003570:	4ba1      	ldr	r3, [pc, #644]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003578:	d003      	beq.n	8003582 <HAL_RCC_OscConfig+0x282>
 800357a:	69e3      	ldr	r3, [r4, #28]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	f040 8201 	bne.w	8003984 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003582:	f7fe fa33 	bl	80019ec <HAL_GetREVID>
 8003586:	f241 0303 	movw	r3, #4099	; 0x1003
 800358a:	4298      	cmp	r0, r3
 800358c:	d812      	bhi.n	80035b4 <HAL_RCC_OscConfig+0x2b4>
 800358e:	6a22      	ldr	r2, [r4, #32]
 8003590:	2a20      	cmp	r2, #32
 8003592:	d007      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2a4>
 8003594:	4998      	ldr	r1, [pc, #608]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003596:	684b      	ldr	r3, [r1, #4]
 8003598:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800359c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80035a0:	604b      	str	r3, [r1, #4]
 80035a2:	e00f      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
 80035a4:	4a94      	ldr	r2, [pc, #592]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035a6:	6853      	ldr	r3, [r2, #4]
 80035a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035b0:	6053      	str	r3, [r2, #4]
 80035b2:	e007      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
 80035b4:	4a90      	ldr	r2, [pc, #576]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035b6:	68d3      	ldr	r3, [r2, #12]
 80035b8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80035bc:	6a21      	ldr	r1, [r4, #32]
 80035be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035c2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	f013 0f08 	tst.w	r3, #8
 80035ca:	d060      	beq.n	800368e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035cc:	6963      	ldr	r3, [r4, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d049      	beq.n	8003666 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4a89      	ldr	r2, [pc, #548]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe f9ec 	bl	80019b8 <HAL_GetTick>
 80035e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f013 0f02 	tst.w	r3, #2
 80035ea:	d150      	bne.n	800368e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fe f9e4 	bl	80019b8 <HAL_GetTick>
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	2802      	cmp	r0, #2
 80035f4:	d9f5      	bls.n	80035e2 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 80035f6:	2003      	movs	r0, #3
 80035f8:	e1c7      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035fa:	f7fe f9f7 	bl	80019ec <HAL_GetREVID>
 80035fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8003602:	4298      	cmp	r0, r3
 8003604:	d812      	bhi.n	800362c <HAL_RCC_OscConfig+0x32c>
 8003606:	6a22      	ldr	r2, [r4, #32]
 8003608:	2a20      	cmp	r2, #32
 800360a:	d007      	beq.n	800361c <HAL_RCC_OscConfig+0x31c>
 800360c:	497a      	ldr	r1, [pc, #488]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800360e:	684b      	ldr	r3, [r1, #4]
 8003610:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003614:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003618:	604b      	str	r3, [r1, #4]
 800361a:	e7d3      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
 800361c:	4a76      	ldr	r2, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800361e:	6853      	ldr	r3, [r2, #4]
 8003620:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e7cb      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
 800362c:	4a72      	ldr	r2, [pc, #456]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800362e:	68d3      	ldr	r3, [r2, #12]
 8003630:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003634:	6a21      	ldr	r1, [r4, #32]
 8003636:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800363a:	60d3      	str	r3, [r2, #12]
 800363c:	e7c2      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003646:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003648:	f7fe f9b6 	bl	80019b8 <HAL_GetTick>
 800364c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003656:	d0b5      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003658:	f7fe f9ae 	bl	80019b8 <HAL_GetTick>
 800365c:	1b40      	subs	r0, r0, r5
 800365e:	2802      	cmp	r0, #2
 8003660:	d9f5      	bls.n	800364e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8003662:	2003      	movs	r0, #3
 8003664:	e191      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003666:	4a64      	ldr	r2, [pc, #400]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe f9a2 	bl	80019b8 <HAL_GetTick>
 8003674:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003676:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	f013 0f02 	tst.w	r3, #2
 800367e:	d006      	beq.n	800368e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fe f99a 	bl	80019b8 <HAL_GetTick>
 8003684:	1b40      	subs	r0, r0, r5
 8003686:	2802      	cmp	r0, #2
 8003688:	d9f5      	bls.n	8003676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368a:	2003      	movs	r0, #3
 800368c:	e17d      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f013 0f20 	tst.w	r3, #32
 8003694:	d029      	beq.n	80036ea <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003696:	69a3      	ldr	r3, [r4, #24]
 8003698:	b19b      	cbz	r3, 80036c2 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369a:	4a57      	ldr	r2, [pc, #348]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036a4:	f7fe f988 	bl	80019b8 <HAL_GetTick>
 80036a8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80036b2:	d11a      	bne.n	80036ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7fe f980 	bl	80019b8 <HAL_GetTick>
 80036b8:	1b40      	subs	r0, r0, r5
 80036ba:	2802      	cmp	r0, #2
 80036bc:	d9f5      	bls.n	80036aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036be:	2003      	movs	r0, #3
 80036c0:	e163      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c2:	4a4d      	ldr	r2, [pc, #308]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036cc:	f7fe f974 	bl	80019b8 <HAL_GetTick>
 80036d0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036d2:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80036da:	d006      	beq.n	80036ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036dc:	f7fe f96c 	bl	80019b8 <HAL_GetTick>
 80036e0:	1b40      	subs	r0, r0, r5
 80036e2:	2802      	cmp	r0, #2
 80036e4:	d9f5      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80036e6:	2003      	movs	r0, #3
 80036e8:	e14f      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f013 0f04 	tst.w	r3, #4
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8147 	beq.w	8003988 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036fa:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	6912      	ldr	r2, [r2, #16]
 80036fe:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003702:	2a18      	cmp	r2, #24
 8003704:	f000 80ee 	beq.w	80038e4 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003708:	2b02      	cmp	r3, #2
 800370a:	d079      	beq.n	8003800 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe f94f 	bl	80019b8 <HAL_GetTick>
 800371a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003724:	f000 80dc 	beq.w	80038e0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe f946 	bl	80019b8 <HAL_GetTick>
 800372c:	1b00      	subs	r0, r0, r4
 800372e:	2802      	cmp	r0, #2
 8003730:	d9f4      	bls.n	800371c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
 8003734:	e129      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 8003736:	4a31      	ldr	r2, [pc, #196]	; (80037fc <HAL_RCC_OscConfig+0x4fc>)
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003740:	f7fe f93a 	bl	80019b8 <HAL_GetTick>
 8003744:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_OscConfig+0x4fc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003750:	f7fe f932 	bl	80019b8 <HAL_GetTick>
 8003754:	1b40      	subs	r0, r0, r5
 8003756:	2864      	cmp	r0, #100	; 0x64
 8003758:	d9f5      	bls.n	8003746 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 800375a:	2003      	movs	r0, #3
 800375c:	e115      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d00a      	beq.n	800377a <HAL_RCC_OscConfig+0x47a>
 8003764:	bb0b      	cbnz	r3, 80037aa <HAL_RCC_OscConfig+0x4aa>
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003768:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	671a      	str	r2, [r3, #112]	; 0x70
 8003770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	671a      	str	r2, [r3, #112]	; 0x70
 8003778:	e004      	b.n	8003784 <HAL_RCC_OscConfig+0x484>
 800377a:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003784:	68a3      	ldr	r3, [r4, #8]
 8003786:	b333      	cbz	r3, 80037d6 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8003788:	f7fe f916 	bl	80019b8 <HAL_GetTick>
 800378c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f013 0f02 	tst.w	r3, #2
 8003796:	d1ac      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe f90e 	bl	80019b8 <HAL_GetTick>
 800379c:	1b40      	subs	r0, r0, r5
 800379e:	f241 3388 	movw	r3, #5000	; 0x1388
 80037a2:	4298      	cmp	r0, r3
 80037a4:	d9f3      	bls.n	800378e <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 80037a6:	2003      	movs	r0, #3
 80037a8:	e0ef      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4c2>
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	671a      	str	r2, [r3, #112]	; 0x70
 80037b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	671a      	str	r2, [r3, #112]	; 0x70
 80037c0:	e7e0      	b.n	8003784 <HAL_RCC_OscConfig+0x484>
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c6:	f042 0204 	orr.w	r2, r2, #4
 80037ca:	671a      	str	r2, [r3, #112]	; 0x70
 80037cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	671a      	str	r2, [r3, #112]	; 0x70
 80037d4:	e7d6      	b.n	8003784 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80037d6:	f7fe f8ef 	bl	80019b8 <HAL_GetTick>
 80037da:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_OscConfig+0x4f8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f013 0f02 	tst.w	r3, #2
 80037e4:	d085      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe f8e7 	bl	80019b8 <HAL_GetTick>
 80037ea:	1b40      	subs	r0, r0, r5
 80037ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80037f0:	4298      	cmp	r0, r3
 80037f2:	d9f3      	bls.n	80037dc <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 80037f4:	2003      	movs	r0, #3
 80037f6:	e0c8      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 80037f8:	58024400 	.word	0x58024400
 80037fc:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8003800:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003808:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800380a:	f7fe f8d5 	bl	80019b8 <HAL_GetTick>
 800380e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003810:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003818:	d006      	beq.n	8003828 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fe f8cd 	bl	80019b8 <HAL_GetTick>
 800381e:	1b40      	subs	r0, r0, r5
 8003820:	2802      	cmp	r0, #2
 8003822:	d9f5      	bls.n	8003810 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8003824:	2003      	movs	r0, #3
 8003826:	e0b0      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003828:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 800382a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800382c:	4a5f      	ldr	r2, [pc, #380]	; (80039ac <HAL_RCC_OscConfig+0x6ac>)
 800382e:	400a      	ands	r2, r1
 8003830:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003834:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003838:	430a      	orrs	r2, r1
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
 800383c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800383e:	3a01      	subs	r2, #1
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003846:	3901      	subs	r1, #1
 8003848:	0249      	lsls	r1, r1, #9
 800384a:	b289      	uxth	r1, r1
 800384c:	430a      	orrs	r2, r1
 800384e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003850:	3901      	subs	r1, #1
 8003852:	0409      	lsls	r1, r1, #16
 8003854:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003858:	430a      	orrs	r2, r1
 800385a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800385c:	3901      	subs	r1, #1
 800385e:	0609      	lsls	r1, r1, #24
 8003860:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003864:	430a      	orrs	r2, r1
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003870:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003872:	4a4f      	ldr	r2, [pc, #316]	; (80039b0 <HAL_RCC_OscConfig+0x6b0>)
 8003874:	400a      	ands	r2, r1
 8003876:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003878:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800387c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	f022 020c 	bic.w	r2, r2, #12
 8003884:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003886:	430a      	orrs	r2, r1
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	f022 0202 	bic.w	r2, r2, #2
 8003890:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003892:	430a      	orrs	r2, r1
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038be:	f7fe f87b 	bl	80019b8 <HAL_GetTick>
 80038c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c4:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe f873 	bl	80019b8 <HAL_GetTick>
 80038d2:	1b00      	subs	r0, r0, r4
 80038d4:	2802      	cmp	r0, #2
 80038d6:	d9f5      	bls.n	80038c4 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 80038d8:	2003      	movs	r0, #3
 80038da:	e056      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80038dc:	2000      	movs	r0, #0
 80038de:	e054      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 80038e0:	2000      	movs	r0, #0
 80038e2:	e052      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038e4:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 80038e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038e8:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d04e      	beq.n	800398c <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	f001 0303 	and.w	r3, r1, #3
 80038f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d14b      	bne.n	8003990 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f8:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80038fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	4299      	cmp	r1, r3
 8003900:	d148      	bne.n	8003994 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003902:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003906:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003908:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d144      	bne.n	8003998 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800390e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003914:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d140      	bne.n	800399c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800391a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800391e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003920:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d13c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003926:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800392a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800392c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800392e:	4298      	cmp	r0, r3
 8003930:	d138      	bne.n	80039a4 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800393a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800393c:	429a      	cmp	r2, r3
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8003940:	2000      	movs	r0, #0
 8003942:	e022      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 8003946:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800394e:	f7fe f833 	bl	80019b8 <HAL_GetTick>
 8003952:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003954:	f7fe f830 	bl	80019b8 <HAL_GetTick>
 8003958:	42a8      	cmp	r0, r5
 800395a:	d0fb      	beq.n	8003954 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800395c:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x6a8>)
 800395e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_OscConfig+0x6b0>)
 8003962:	400b      	ands	r3, r1
 8003964:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003966:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800396a:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800396c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 8003974:	2000      	movs	r0, #0
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8003978:	2001      	movs	r0, #1
}
 800397a:	4770      	bx	lr
        return HAL_ERROR;
 800397c:	2001      	movs	r0, #1
 800397e:	e004      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e002      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8003984:	2001      	movs	r0, #1
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8003988:	2000      	movs	r0, #0
}
 800398a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7fc      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 8003990:	2001      	movs	r0, #1
 8003992:	e7fa      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 8003994:	2001      	movs	r0, #1
 8003996:	e7f8      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 8003998:	2001      	movs	r0, #1
 800399a:	e7f6      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 800399c:	2001      	movs	r0, #1
 800399e:	e7f4      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 80039a0:	2001      	movs	r0, #1
 80039a2:	e7f2      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 80039a4:	2001      	movs	r0, #1
 80039a6:	e7f0      	b.n	800398a <HAL_RCC_OscConfig+0x68a>
 80039a8:	58024400 	.word	0x58024400
 80039ac:	fffffc0c 	.word	0xfffffc0c
 80039b0:	ffff0007 	.word	0xffff0007

080039b4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b4:	4b74      	ldr	r3, [pc, #464]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039bc:	2b10      	cmp	r3, #16
 80039be:	f000 80de 	beq.w	8003b7e <HAL_RCC_GetSysClockFreq+0x1ca>
 80039c2:	2b18      	cmp	r3, #24
 80039c4:	d00f      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x32>
 80039c6:	b10b      	cbz	r3, 80039cc <HAL_RCC_GetSysClockFreq+0x18>
 80039c8:	4870      	ldr	r0, [pc, #448]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80039ca:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039cc:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f013 0f20 	tst.w	r3, #32
 80039d4:	f000 80d5 	beq.w	8003b82 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039d8:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80039e0:	486b      	ldr	r0, [pc, #428]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80039e2:	40d8      	lsrs	r0, r3
 80039e4:	4770      	bx	lr
{
 80039e6:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e8:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80039ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ec:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039f0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80039f2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039f8:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8003a0e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8003a12:	f000 8094 	beq.w	8003b3e <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 8003a16:	2a01      	cmp	r2, #1
 8003a18:	d066      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x134>
 8003a1a:	2a02      	cmp	r2, #2
 8003a1c:	f000 8092 	beq.w	8003b44 <HAL_RCC_GetSysClockFreq+0x190>
 8003a20:	b1e2      	cbz	r2, 8003a5c <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a22:	ee07 0a10 	vmov	s14, r0
 8003a26:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a2a:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003a2e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003a32:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee06 3a90 	vmov	s13, r3
 8003a3e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a42:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003a46:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8003a5a:	e061      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f013 0f20 	tst.w	r3, #32
 8003a64:	d023      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a66:	4948      	ldr	r1, [pc, #288]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003a68:	680a      	ldr	r2, [r1, #0]
 8003a6a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a6e:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003a70:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a72:	ee07 3a10 	vmov	s14, r3
 8003a76:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003a7a:	ee07 0a10 	vmov	s14, r0
 8003a7e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8003a82:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003a86:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	ee06 3a90 	vmov	s13, r3
 8003a90:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a94:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003a98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aac:	e038      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aae:	ee07 0a10 	vmov	s14, r0
 8003ab2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003ab6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003b9c <HAL_RCC_GetSysClockFreq+0x1e8>
 8003aba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee06 3a90 	vmov	s13, r3
 8003aca:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003ace:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003ad2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ae8:	ee07 0a10 	vmov	s14, r0
 8003aec:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003af0:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x1e0>
 8003af4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b00:	ee06 3a90 	vmov	s13, r3
 8003b04:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003b08:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003b0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003b28:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b36:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003b3a:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b42:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b44:	ee07 0a10 	vmov	s14, r0
 8003b48:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003b4c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	ee06 3a90 	vmov	s13, r3
 8003b60:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003b64:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003b68:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b78:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8003b7c:	e7d0      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 8003b7e:	4809      	ldr	r0, [pc, #36]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b80:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b82:	4803      	ldr	r0, [pc, #12]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	003d0900 	.word	0x003d0900
 8003b90:	03d09000 	.word	0x03d09000
 8003b94:	4a742400 	.word	0x4a742400
 8003b98:	39000000 	.word	0x39000000
 8003b9c:	4c742400 	.word	0x4c742400
 8003ba0:	4bbebc20 	.word	0x4bbebc20
 8003ba4:	017d7840 	.word	0x017d7840

08003ba8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f000 8132 	beq.w	8003e12 <HAL_RCC_ClockConfig+0x26a>
{
 8003bae:	b570      	push	{r4, r5, r6, lr}
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b9b      	ldr	r3, [pc, #620]	; (8003e24 <HAL_RCC_ClockConfig+0x27c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d20b      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc0:	4a98      	ldr	r2, [pc, #608]	; (8003e24 <HAL_RCC_ClockConfig+0x27c>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	428b      	cmp	r3, r1
 8003bd4:	f040 811f 	bne.w	8003e16 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	f013 0f04 	tst.w	r3, #4
 8003bde:	d00c      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003be0:	6922      	ldr	r2, [r4, #16]
 8003be2:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d905      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bee:	498e      	ldr	r1, [pc, #568]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003bf0:	698b      	ldr	r3, [r1, #24]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	f013 0f08 	tst.w	r3, #8
 8003c00:	d00c      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c02:	6962      	ldr	r2, [r4, #20]
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d905      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c10:	4985      	ldr	r1, [pc, #532]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c12:	69cb      	ldr	r3, [r1, #28]
 8003c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	f013 0f10 	tst.w	r3, #16
 8003c22:	d00c      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c24:	69a2      	ldr	r2, [r4, #24]
 8003c26:	4b80      	ldr	r3, [pc, #512]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d905      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c32:	497d      	ldr	r1, [pc, #500]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c34:	69cb      	ldr	r3, [r1, #28]
 8003c36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f013 0f20 	tst.w	r3, #32
 8003c44:	d00c      	beq.n	8003c60 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c46:	69e2      	ldr	r2, [r4, #28]
 8003c48:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d905      	bls.n	8003c60 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c54:	4974      	ldr	r1, [pc, #464]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c56:	6a0b      	ldr	r3, [r1, #32]
 8003c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	f013 0f02 	tst.w	r3, #2
 8003c66:	d00c      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c68:	68e2      	ldr	r2, [r4, #12]
 8003c6a:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d905      	bls.n	8003c82 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c76:	496c      	ldr	r1, [pc, #432]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c78:	698b      	ldr	r3, [r1, #24]
 8003c7a:	f023 030f 	bic.w	r3, r3, #15
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f013 0f01 	tst.w	r3, #1
 8003c88:	d041      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c8a:	4a67      	ldr	r2, [pc, #412]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003c8c:	6993      	ldr	r3, [r2, #24]
 8003c8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c92:	68a1      	ldr	r1, [r4, #8]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d027      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d02c      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca6:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	f012 0f04 	tst.w	r2, #4
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	e0ad      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003cba:	f000 80ae 	beq.w	8003e1a <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	495a      	ldr	r1, [pc, #360]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003cc0:	690a      	ldr	r2, [r1, #16]
 8003cc2:	f022 0207 	bic.w	r2, r2, #7
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8003cca:	f7fd fe75 	bl	80019b8 <HAL_GetTick>
 8003cce:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003cde:	d016      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fd fe6a 	bl	80019b8 <HAL_GetTick>
 8003ce4:	1b80      	subs	r0, r0, r6
 8003ce6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cea:	4298      	cmp	r0, r3
 8003cec:	d9f0      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8003cee:	2003      	movs	r0, #3
 8003cf0:	e08e      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf2:	4a4d      	ldr	r2, [pc, #308]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cfa:	d1e0      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	e087      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d00:	4a49      	ldr	r2, [pc, #292]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003d08:	d1d9      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	e080      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	f013 0f02 	tst.w	r3, #2
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d16:	68e2      	ldr	r2, [r4, #12]
 8003d18:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d205      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4940      	ldr	r1, [pc, #256]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d26:	698b      	ldr	r3, [r1, #24]
 8003d28:	f023 030f 	bic.w	r3, r3, #15
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <HAL_RCC_ClockConfig+0x27c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	d90a      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3c:	4a39      	ldr	r2, [pc, #228]	; (8003e24 <HAL_RCC_ClockConfig+0x27c>)
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f023 030f 	bic.w	r3, r3, #15
 8003d44:	432b      	orrs	r3, r5
 8003d46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	42ab      	cmp	r3, r5
 8003d50:	d165      	bne.n	8003e1e <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	f013 0f04 	tst.w	r3, #4
 8003d58:	d00c      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d5a:	6922      	ldr	r2, [r4, #16]
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d205      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d68:	492f      	ldr	r1, [pc, #188]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d6a:	698b      	ldr	r3, [r1, #24]
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	431a      	orrs	r2, r3
 8003d72:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f013 0f08 	tst.w	r3, #8
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d7c:	6962      	ldr	r2, [r4, #20]
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d205      	bcs.n	8003d96 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d8a:	4927      	ldr	r1, [pc, #156]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003d8c:	69cb      	ldr	r3, [r1, #28]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	431a      	orrs	r2, r3
 8003d94:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f013 0f10 	tst.w	r3, #16
 8003d9c:	d00c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d9e:	69a2      	ldr	r2, [r4, #24]
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d205      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dac:	491e      	ldr	r1, [pc, #120]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003dae:	69cb      	ldr	r3, [r1, #28]
 8003db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003db4:	431a      	orrs	r2, r3
 8003db6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	f013 0f20 	tst.w	r3, #32
 8003dbe:	d00c      	beq.n	8003dda <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dc0:	69e2      	ldr	r2, [r4, #28]
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d205      	bcs.n	8003dda <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dce:	4916      	ldr	r1, [pc, #88]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003dd0:	6a0b      	ldr	r3, [r1, #32]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dda:	f7ff fdeb 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003dde:	4912      	ldr	r1, [pc, #72]	; (8003e28 <HAL_RCC_ClockConfig+0x280>)
 8003de0:	698b      	ldr	r3, [r1, #24]
 8003de2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_RCC_ClockConfig+0x284>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003df0:	698b      	ldr	r3, [r1, #24]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa20 f303 	lsr.w	r3, r0, r3
 8003e00:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <HAL_RCC_ClockConfig+0x288>)
 8003e02:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_ClockConfig+0x28c>)
 8003e06:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x290>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	f7fd fd72 	bl	80018f4 <HAL_InitTick>
}
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003e12:	2001      	movs	r0, #1
}
 8003e14:	4770      	bx	lr
      return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
 8003e18:	e7fa      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e7f8      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
 8003e20:	e7f6      	b.n	8003e10 <HAL_RCC_ClockConfig+0x268>
 8003e22:	bf00      	nop
 8003e24:	52002000 	.word	0x52002000
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	08007170 	.word	0x08007170
 8003e30:	24000004 	.word	0x24000004
 8003e34:	24000000 	.word	0x24000000
 8003e38:	2400039c 	.word	0x2400039c

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e3e:	f7ff fdb9 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003e42:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e44:	6993      	ldr	r3, [r2, #24]
 8003e46:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003e4a:	490a      	ldr	r1, [pc, #40]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x38>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e56:	6992      	ldr	r2, [r2, #24]
 8003e58:	f002 020f 	and.w	r2, r2, #15
 8003e5c:	5c88      	ldrb	r0, [r1, r2]
 8003e5e:	f000 001f 	and.w	r0, r0, #31
 8003e62:	fa23 f000 	lsr.w	r0, r3, r0
 8003e66:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003e68:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x40>)
 8003e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003e6e:	bd08      	pop	{r3, pc}
 8003e70:	58024400 	.word	0x58024400
 8003e74:	08007170 	.word	0x08007170
 8003e78:	24000004 	.word	0x24000004
 8003e7c:	24000000 	.word	0x24000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e82:	f7ff ffdb 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
 8003e92:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e96:	40d8      	lsrs	r0, r3
 8003e98:	bd08      	pop	{r3, pc}
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	08007170 	.word	0x08007170

08003ea4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d079      	beq.n	8003fa4 <RCCEx_PLL2_Config+0x100>
{
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003eb6:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fd7a 	bl	80019b8 <HAL_GetTick>
 8003ec4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ec6:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ece:	d006      	beq.n	8003ede <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ed0:	f7fd fd72 	bl	80019b8 <HAL_GetTick>
 8003ed4:	1b03      	subs	r3, r0, r4
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d9f5      	bls.n	8003ec6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003eda:	2003      	movs	r0, #3

  }


  return status;
}
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003ee6:	6829      	ldr	r1, [r5, #0]
 8003ee8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
 8003eee:	686a      	ldr	r2, [r5, #4]
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef6:	68a9      	ldr	r1, [r5, #8]
 8003ef8:	3901      	subs	r1, #1
 8003efa:	0249      	lsls	r1, r1, #9
 8003efc:	b289      	uxth	r1, r1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	68e9      	ldr	r1, [r5, #12]
 8003f02:	3901      	subs	r1, #1
 8003f04:	0409      	lsls	r1, r1, #16
 8003f06:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	6929      	ldr	r1, [r5, #16]
 8003f0e:	3901      	subs	r1, #1
 8003f10:	0609      	lsls	r1, r1, #24
 8003f12:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003f16:	430a      	orrs	r2, r1
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f20:	6969      	ldr	r1, [r5, #20]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	f022 0220 	bic.w	r2, r2, #32
 8003f2c:	69a9      	ldr	r1, [r5, #24]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	f022 0210 	bic.w	r2, r2, #16
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <RCCEx_PLL2_Config+0x108>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	69e9      	ldr	r1, [r5, #28]
 8003f42:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4a:	f042 0210 	orr.w	r2, r2, #16
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003f50:	b9c6      	cbnz	r6, 8003f84 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f52:	461a      	mov	r2, r3
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f64:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f66:	f7fd fd27 	bl	80019b8 <HAL_GetTick>
 8003f6a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f74:	d114      	bne.n	8003fa0 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f76:	f7fd fd1f 	bl	80019b8 <HAL_GetTick>
 8003f7a:	1b00      	subs	r0, r0, r4
 8003f7c:	2802      	cmp	r0, #2
 8003f7e:	d9f5      	bls.n	8003f6c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8003f80:	2003      	movs	r0, #3
 8003f82:	e7ab      	b.n	8003edc <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f84:	2e01      	cmp	r6, #1
 8003f86:	d005      	beq.n	8003f94 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003f8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f92:	e7e3      	b.n	8003f5c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <RCCEx_PLL2_Config+0x104>)
 8003f96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f9e:	e7dd      	b.n	8003f5c <RCCEx_PLL2_Config+0xb8>
  return status;
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	e79b      	b.n	8003edc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
}
 8003fa6:	4770      	bx	lr
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	ffff0007 	.word	0xffff0007

08003fb0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d079      	beq.n	80040b0 <RCCEx_PLL3_Config+0x100>
{
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fcf4 	bl	80019b8 <HAL_GetTick>
 8003fd0:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003fda:	d006      	beq.n	8003fea <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fdc:	f7fd fcec 	bl	80019b8 <HAL_GetTick>
 8003fe0:	1b03      	subs	r3, r0, r4
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d9f5      	bls.n	8003fd2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003fe6:	2003      	movs	r0, #3

  }


  return status;
}
 8003fe8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fea:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 8003fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fee:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003ff2:	6829      	ldr	r1, [r5, #0]
 8003ff4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8003ffa:	686a      	ldr	r2, [r5, #4]
 8003ffc:	3a01      	subs	r2, #1
 8003ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004002:	68a9      	ldr	r1, [r5, #8]
 8004004:	3901      	subs	r1, #1
 8004006:	0249      	lsls	r1, r1, #9
 8004008:	b289      	uxth	r1, r1
 800400a:	430a      	orrs	r2, r1
 800400c:	68e9      	ldr	r1, [r5, #12]
 800400e:	3901      	subs	r1, #1
 8004010:	0409      	lsls	r1, r1, #16
 8004012:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004016:	430a      	orrs	r2, r1
 8004018:	6929      	ldr	r1, [r5, #16]
 800401a:	3901      	subs	r1, #1
 800401c:	0609      	lsls	r1, r1, #24
 800401e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004022:	430a      	orrs	r2, r1
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800402c:	6969      	ldr	r1, [r5, #20]
 800402e:	430a      	orrs	r2, r1
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004038:	69a9      	ldr	r1, [r5, #24]
 800403a:	430a      	orrs	r2, r1
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004046:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <RCCEx_PLL3_Config+0x108>)
 800404a:	400a      	ands	r2, r1
 800404c:	69e9      	ldr	r1, [r5, #28]
 800404e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004052:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800405c:	b9c6      	cbnz	r6, 8004090 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800405e:	461a      	mov	r2, r3
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8004068:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004070:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004072:	f7fd fca1 	bl	80019b8 <HAL_GetTick>
 8004076:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004080:	d114      	bne.n	80040ac <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004082:	f7fd fc99 	bl	80019b8 <HAL_GetTick>
 8004086:	1b00      	subs	r0, r0, r4
 8004088:	2802      	cmp	r0, #2
 800408a:	d9f5      	bls.n	8004078 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800408c:	2003      	movs	r0, #3
 800408e:	e7ab      	b.n	8003fe8 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004090:	2e01      	cmp	r6, #1
 8004092:	d005      	beq.n	80040a0 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 8004096:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800409e:	e7e3      	b.n	8004068 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <RCCEx_PLL3_Config+0x104>)
 80040a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040aa:	e7dd      	b.n	8004068 <RCCEx_PLL3_Config+0xb8>
  return status;
 80040ac:	2000      	movs	r0, #0
 80040ae:	e79b      	b.n	8003fe8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 80040b0:	2001      	movs	r0, #1
}
 80040b2:	4770      	bx	lr
 80040b4:	58024400 	.word	0x58024400
 80040b8:	ffff0007 	.word	0xffff0007

080040bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c0:	6803      	ldr	r3, [r0, #0]
 80040c2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80040c6:	d030      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80040c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80040ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ce:	d026      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040d0:	d80e      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80040d2:	b1eb      	cbz	r3, 8004110 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80040d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d8:	d107      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040da:	2102      	movs	r1, #2
 80040dc:	3008      	adds	r0, #8
 80040de:	f7ff fee1 	bl	8003ea4 <RCCEx_PLL2_Config>
 80040e2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80040e4:	b145      	cbz	r5, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80040e6:	462e      	mov	r6, r5
 80040e8:	e021      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80040ea:	2601      	movs	r6, #1
 80040ec:	4635      	mov	r5, r6
 80040ee:	e01e      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80040f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040f4:	d109      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80040f6:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040f8:	4a97      	ldr	r2, [pc, #604]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004100:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004102:	430b      	orrs	r3, r1
 8004104:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004106:	2600      	movs	r6, #0
 8004108:	e011      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800410a:	2601      	movs	r6, #1
 800410c:	4635      	mov	r5, r6
 800410e:	e00e      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004110:	4a91      	ldr	r2, [pc, #580]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004112:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800411a:	2500      	movs	r5, #0
 800411c:	e7ec      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800411e:	2102      	movs	r1, #2
 8004120:	3028      	adds	r0, #40	; 0x28
 8004122:	f7ff ff45 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004126:	4605      	mov	r5, r0
        break;
 8004128:	e7dc      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800412c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004134:	d027      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004136:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004138:	2b04      	cmp	r3, #4
 800413a:	d820      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800413c:	e8df f003 	tbb	[pc, r3]
 8004140:	08181103 	.word	0x08181103
 8004144:	08          	.byte	0x08
 8004145:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4a84      	ldr	r2, [pc, #528]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004150:	b9c5      	cbnz	r5, 8004184 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004152:	4a81      	ldr	r2, [pc, #516]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004154:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800415c:	430b      	orrs	r3, r1
 800415e:	6513      	str	r3, [r2, #80]	; 0x50
 8004160:	e011      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004162:	2100      	movs	r1, #0
 8004164:	f104 0008 	add.w	r0, r4, #8
 8004168:	f7ff fe9c 	bl	8003ea4 <RCCEx_PLL2_Config>
 800416c:	4605      	mov	r5, r0
        break;
 800416e:	e7ef      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004170:	2100      	movs	r1, #0
 8004172:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004176:	f7ff ff1b 	bl	8003fb0 <RCCEx_PLL3_Config>
 800417a:	4605      	mov	r5, r0
        break;
 800417c:	e7e8      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800417e:	2601      	movs	r6, #1
 8004180:	4635      	mov	r5, r6
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004184:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f413 7f00 	tst.w	r3, #512	; 0x200
 800418c:	d01d      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 800418e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d039      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004194:	d80c      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004196:	b38b      	cbz	r3, 80041fc <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800419c:	2100      	movs	r1, #0
 800419e:	f104 0008 	add.w	r0, r4, #8
 80041a2:	f7ff fe7f 	bl	8003ea4 <RCCEx_PLL2_Config>
 80041a6:	4605      	mov	r5, r0
        break;
 80041a8:	e007      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai23ClockSelection)
 80041aa:	2601      	movs	r6, #1
 80041ac:	4635      	mov	r5, r6
 80041ae:	e00c      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80041b0:	2bc0      	cmp	r3, #192	; 0xc0
 80041b2:	d002      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d11d      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 80041ba:	bb65      	cbnz	r5, 8004216 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041bc:	4a66      	ldr	r2, [pc, #408]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80041c0:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80041c4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80041d0:	d035      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4AClockSelection)
 80041d2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041da:	d04e      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80041dc:	d820      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d045      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d118      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e8:	2100      	movs	r1, #0
 80041ea:	f104 0008 	add.w	r0, r4, #8
 80041ee:	f7ff fe59 	bl	8003ea4 <RCCEx_PLL2_Config>
 80041f2:	4605      	mov	r5, r0
        break;
 80041f4:	e01a      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 80041f6:	2601      	movs	r6, #1
 80041f8:	4635      	mov	r5, r6
 80041fa:	e7e6      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4a56      	ldr	r2, [pc, #344]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80041fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004204:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004206:	e7d8      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004208:	2100      	movs	r1, #0
 800420a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800420e:	f7ff fecf 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004212:	4605      	mov	r5, r0
        break;
 8004214:	e7d1      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004216:	462e      	mov	r6, r5
 8004218:	e7d7      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai4AClockSelection)
 800421a:	2601      	movs	r6, #1
 800421c:	4635      	mov	r5, r6
 800421e:	e00e      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004220:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004224:	d002      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422a:	d11d      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    if (ret == HAL_OK)
 800422c:	bb65      	cbnz	r5, 8004288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800422e:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004230:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004232:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004236:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800423a:	430b      	orrs	r3, r1
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004244:	d046      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004246:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800424a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800424e:	d039      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004250:	d81f      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8004252:	b38b      	cbz	r3, 80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004258:	d118      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800425a:	2100      	movs	r1, #0
 800425c:	f104 0008 	add.w	r0, r4, #8
 8004260:	f7ff fe20 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004264:	4605      	mov	r5, r0
        break;
 8004266:	e01a      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004268:	2601      	movs	r6, #1
 800426a:	4635      	mov	r5, r6
 800426c:	e7e7      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426e:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004278:	e7d8      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800427a:	2100      	movs	r1, #0
 800427c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004280:	f7ff fe96 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004284:	4605      	mov	r5, r0
        break;
 8004286:	e7d1      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004288:	462e      	mov	r6, r5
 800428a:	e7d8      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4BClockSelection)
 800428c:	2601      	movs	r6, #1
 800428e:	4635      	mov	r5, r6
 8004290:	e020      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004296:	d002      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    if (ret == HAL_OK)
 800429e:	b9c5      	cbnz	r5, 80042d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042a0:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80042a4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042a8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6593      	str	r3, [r2, #88]	; 0x58
 80042b0:	e010      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 80042b2:	2601      	movs	r6, #1
 80042b4:	4635      	mov	r5, r6
 80042b6:	e00d      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4a27      	ldr	r2, [pc, #156]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80042c2:	e7ec      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042c4:	2100      	movs	r1, #0
 80042c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80042ca:	f7ff fe71 	bl	8003fb0 <RCCEx_PLL3_Config>
 80042ce:	4605      	mov	r5, r0
        break;
 80042d0:	e7e5      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042d2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042da:	d01b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 80042dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d02d      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x282>
 80042e2:	d813      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x250>
 80042e4:	b133      	cbz	r3, 80042f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d10d      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80042f4:	bb55      	cbnz	r5, 800434c <HAL_RCCEx_PeriphCLKConfig+0x290>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80042fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004300:	430b      	orrs	r3, r1
 8004302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 8004306:	2601      	movs	r6, #1
 8004308:	4635      	mov	r5, r6
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	d0f1      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004310:	2601      	movs	r6, #1
 8004312:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi123ClockSelection)
 800431c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	d050      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004324:	d81a      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d047      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d10f      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004330:	2100      	movs	r1, #0
 8004332:	f104 0008 	add.w	r0, r4, #8
 8004336:	f7ff fdb5 	bl	8003ea4 <RCCEx_PLL2_Config>
 800433a:	4605      	mov	r5, r0
        break;
 800433c:	e014      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800433e:	2102      	movs	r1, #2
 8004340:	f104 0008 	add.w	r0, r4, #8
 8004344:	f7ff fdae 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004348:	4605      	mov	r5, r0
        break;
 800434a:	e7d3      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800434c:	462e      	mov	r6, r5
 800434e:	e7e1      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004350:	2601      	movs	r6, #1
 8004352:	4635      	mov	r5, r6
 8004354:	e011      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400
 800435c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004360:	d002      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004366:	d125      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    if (ret == HAL_OK)
 8004368:	2d00      	cmp	r5, #0
 800436a:	d133      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800436c:	4a86      	ldr	r2, [pc, #536]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800436e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004374:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004376:	430b      	orrs	r3, r1
 8004378:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004380:	d038      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004382:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004388:	d053      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800438a:	d828      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x322>
 800438c:	b143      	cbz	r3, 80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d121      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004394:	2101      	movs	r1, #1
 8004396:	f104 0008 	add.w	r0, r4, #8
 800439a:	f7ff fd83 	bl	8003ea4 <RCCEx_PLL2_Config>
 800439e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	d14d      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043a4:	4a78      	ldr	r2, [pc, #480]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80043a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80043ac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6513      	str	r3, [r2, #80]	; 0x50
 80043b2:	e01f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi123ClockSelection)
 80043b4:	2601      	movs	r6, #1
 80043b6:	4635      	mov	r5, r6
 80043b8:	e7df      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ba:	4a73      	ldr	r2, [pc, #460]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80043bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80043be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80043c4:	e7d0      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043c6:	2100      	movs	r1, #0
 80043c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043cc:	f7ff fdf0 	bl	8003fb0 <RCCEx_PLL3_Config>
 80043d0:	4605      	mov	r5, r0
        break;
 80043d2:	e7c9      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80043d4:	462e      	mov	r6, r5
 80043d6:	e7d0      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi45ClockSelection)
 80043d8:	2601      	movs	r6, #1
 80043da:	4635      	mov	r5, r6
 80043dc:	e00a      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80043de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043e2:	d0dd      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e8:	d0da      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80043ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043ee:	d0d7      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80043f0:	2601      	movs	r6, #1
 80043f2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80043fa:	d031      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80043fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8004400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004404:	d044      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8004406:	d820      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8004408:	b143      	cbz	r3, 800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440e:	d119      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004410:	2101      	movs	r1, #1
 8004412:	f104 0008 	add.w	r0, r4, #8
 8004416:	f7ff fd45 	bl	8003ea4 <RCCEx_PLL2_Config>
 800441a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800441c:	2d00      	cmp	r5, #0
 800441e:	d13e      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004420:	4a59      	ldr	r2, [pc, #356]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004422:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004424:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004428:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800442c:	430b      	orrs	r3, r1
 800442e:	6593      	str	r3, [r2, #88]	; 0x58
 8004430:	e016      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004432:	2101      	movs	r1, #1
 8004434:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004438:	f7ff fdba 	bl	8003fb0 <RCCEx_PLL3_Config>
 800443c:	4605      	mov	r5, r0
        break;
 800443e:	e7af      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004440:	462e      	mov	r6, r5
 8004442:	e7d7      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004444:	2601      	movs	r6, #1
 8004446:	4635      	mov	r5, r6
 8004448:	e00a      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d0e5      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004454:	d0e2      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800445a:	d0df      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800445c:	2601      	movs	r6, #1
 800445e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004466:	d01e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    switch (PeriphClkInit->DsiClockSelection)
 8004468:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800446a:	b143      	cbz	r3, 800447e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800446c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004470:	d117      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004472:	2101      	movs	r1, #1
 8004474:	f104 0008 	add.w	r0, r4, #8
 8004478:	f7ff fd14 	bl	8003ea4 <RCCEx_PLL2_Config>
 800447c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800447e:	bb5d      	cbnz	r5, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004480:	4a41      	ldr	r2, [pc, #260]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004482:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800448a:	430b      	orrs	r3, r1
 800448c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800448e:	e00a      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004490:	2101      	movs	r1, #1
 8004492:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004496:	f7ff fd8b 	bl	8003fb0 <RCCEx_PLL3_Config>
 800449a:	4605      	mov	r5, r0
        break;
 800449c:	e7be      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800449e:	462e      	mov	r6, r5
 80044a0:	e7de      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->DsiClockSelection)
 80044a2:	2601      	movs	r6, #1
 80044a4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80044ac:	d009      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    switch (PeriphClkInit->FdcanClockSelection)
 80044ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80044b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b4:	d012      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80044b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ba:	d01d      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80044bc:	b19b      	cbz	r3, 80044e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80044be:	2601      	movs	r6, #1
 80044c0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80044c8:	d02c      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch (PeriphClkInit->FmcClockSelection)
 80044ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d855      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80044d0:	e8df f003 	tbb	[pc, r3]
 80044d4:	204d1b20 	.word	0x204d1b20
 80044d8:	462e      	mov	r6, r5
 80044da:	e7e4      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80044de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80044e6:	b975      	cbnz	r5, 8004506 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80044ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80044f0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6513      	str	r3, [r2, #80]	; 0x50
 80044f6:	e7e4      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044f8:	2101      	movs	r1, #1
 80044fa:	f104 0008 	add.w	r0, r4, #8
 80044fe:	f7ff fcd1 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004502:	4605      	mov	r5, r0
        break;
 8004504:	e7ef      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004506:	462e      	mov	r6, r5
 8004508:	e7db      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 800450c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004514:	bbad      	cbnz	r5, 8004582 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004518:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004520:	430b      	orrs	r3, r1
 8004522:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800452a:	d12f      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f013 0f01 	tst.w	r3, #1
 8004532:	f000 80a8 	beq.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004536:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800453a:	2b28      	cmp	r3, #40	; 0x28
 800453c:	f200 80a1 	bhi.w	8004682 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 8004540:	e8df f003 	tbb	[pc, r3]
 8004544:	9f9f9f8e 	.word	0x9f9f9f8e
 8004548:	9f9f9f9f 	.word	0x9f9f9f9f
 800454c:	9f9f9f88 	.word	0x9f9f9f88
 8004550:	9f9f9f9f 	.word	0x9f9f9f9f
 8004554:	9f9f9f98 	.word	0x9f9f9f98
 8004558:	9f9f9f9f 	.word	0x9f9f9f9f
 800455c:	9f9f9f8e 	.word	0x9f9f9f8e
 8004560:	9f9f9f9f 	.word	0x9f9f9f9f
 8004564:	9f9f9f8e 	.word	0x9f9f9f8e
 8004568:	9f9f9f9f 	.word	0x9f9f9f9f
 800456c:	8e          	.byte	0x8e
 800456d:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800456e:	2102      	movs	r1, #2
 8004570:	f104 0008 	add.w	r0, r4, #8
 8004574:	f7ff fc96 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004578:	4605      	mov	r5, r0
        break;
 800457a:	e7cb      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x458>
    switch (PeriphClkInit->FmcClockSelection)
 800457c:	2601      	movs	r6, #1
 800457e:	4635      	mov	r5, r6
 8004580:	e7d0      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004582:	462e      	mov	r6, r5
 8004584:	e7ce      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004586:	bf00      	nop
 8004588:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458c:	4a92      	ldr	r2, [pc, #584]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004596:	f7fd fa0f 	bl	80019b8 <HAL_GetTick>
 800459a:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459c:	4b8e      	ldr	r3, [pc, #568]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045a4:	d105      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a6:	f7fd fa07 	bl	80019b8 <HAL_GetTick>
 80045aa:	1bc0      	subs	r0, r0, r7
 80045ac:	2864      	cmp	r0, #100	; 0x64
 80045ae:	d9f5      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        ret = HAL_TIMEOUT;
 80045b0:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d14a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x590>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 80045be:	4053      	eors	r3, r2
 80045c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80045c4:	d00c      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c6:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80045c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045d0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80045d4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045d8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80045dc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80045de:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045e0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80045e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e8:	d015      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      if (ret == HAL_OK)
 80045ea:	bb8d      	cbnz	r5, 8004650 <HAL_RCCEx_PeriphCLKConfig+0x594>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ec:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80045f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80045f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80045f8:	d01e      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045fa:	4a78      	ldr	r2, [pc, #480]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80045fc:	6913      	ldr	r3, [r2, #16]
 80045fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004602:	6113      	str	r3, [r2, #16]
 8004604:	4975      	ldr	r1, [pc, #468]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004606:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004608:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 800460c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004610:	4313      	orrs	r3, r2
 8004612:	670b      	str	r3, [r1, #112]	; 0x70
 8004614:	e78a      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x470>
        tickstart = HAL_GetTick();
 8004616:	f7fd f9cf 	bl	80019b8 <HAL_GetTick>
 800461a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800461c:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	f013 0f02 	tst.w	r3, #2
 8004624:	d1e1      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fd f9c7 	bl	80019b8 <HAL_GetTick>
 800462a:	1bc0      	subs	r0, r0, r7
 800462c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004630:	4298      	cmp	r0, r3
 8004632:	d9f3      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x560>
            ret = HAL_TIMEOUT;
 8004634:	2503      	movs	r5, #3
 8004636:	e7d8      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004638:	4868      	ldr	r0, [pc, #416]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800463a:	6902      	ldr	r2, [r0, #16]
 800463c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004640:	4967      	ldr	r1, [pc, #412]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 8004642:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004646:	4313      	orrs	r3, r2
 8004648:	6103      	str	r3, [r0, #16]
 800464a:	e7db      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 800464c:	462e      	mov	r6, r5
 800464e:	e76d      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x470>
        status = ret;
 8004650:	462e      	mov	r6, r5
 8004652:	e76b      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004654:	2101      	movs	r1, #1
 8004656:	f104 0008 	add.w	r0, r4, #8
 800465a:	f7ff fc23 	bl	8003ea4 <RCCEx_PLL2_Config>
 800465e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004660:	b9ed      	cbnz	r5, 800469e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004662:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004664:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004666:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800466a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800466e:	430b      	orrs	r3, r1
 8004670:	6553      	str	r3, [r2, #84]	; 0x54
 8004672:	e008      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004674:	2101      	movs	r1, #1
 8004676:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800467a:	f7ff fc99 	bl	8003fb0 <RCCEx_PLL3_Config>
 800467e:	4605      	mov	r5, r0
        break;
 8004680:	e7ee      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004682:	2601      	movs	r6, #1
 8004684:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	f013 0f02 	tst.w	r3, #2
 800468c:	d017      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x602>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800468e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004690:	2b05      	cmp	r3, #5
 8004692:	d828      	bhi.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004694:	e8df f003 	tbb	[pc, r3]
 8004698:	0b20050b 	.word	0x0b20050b
 800469c:	0b0b      	.short	0x0b0b
 800469e:	462e      	mov	r6, r5
 80046a0:	e7f1      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a2:	2101      	movs	r1, #1
 80046a4:	f104 0008 	add.w	r0, r4, #8
 80046a8:	f7ff fbfc 	bl	8003ea4 <RCCEx_PLL2_Config>
 80046ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80046ae:	b9ed      	cbnz	r5, 80046ec <HAL_RCCEx_PeriphCLKConfig+0x630>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046b0:	4a4a      	ldr	r2, [pc, #296]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80046b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f013 0f04 	tst.w	r3, #4
 80046c4:	d023      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x652>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d845      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80046ce:	e8df f003 	tbb	[pc, r3]
 80046d2:	0f15      	.short	0x0f15
 80046d4:	1515153d 	.word	0x1515153d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046d8:	2101      	movs	r1, #1
 80046da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80046de:	f7ff fc67 	bl	8003fb0 <RCCEx_PLL3_Config>
 80046e2:	4605      	mov	r5, r0
        break;
 80046e4:	e7e3      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80046e6:	2601      	movs	r6, #1
 80046e8:	4635      	mov	r5, r6
 80046ea:	e7e8      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x602>
 80046ec:	462e      	mov	r6, r5
 80046ee:	e7e6      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x602>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f0:	2101      	movs	r1, #1
 80046f2:	f104 0008 	add.w	r0, r4, #8
 80046f6:	f7ff fbd5 	bl	8003ea4 <RCCEx_PLL2_Config>
 80046fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80046fc:	bb85      	cbnz	r5, 8004760 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046fe:	4a37      	ldr	r2, [pc, #220]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8004700:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004702:	f023 0307 	bic.w	r3, r3, #7
 8004706:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800470a:	430b      	orrs	r3, r1
 800470c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f013 0f20 	tst.w	r3, #32
 8004714:	d034      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004716:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800471a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471e:	d04e      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004720:	d823      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8004722:	b143      	cbz	r3, 8004736 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004728:	d11c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472a:	2100      	movs	r1, #0
 800472c:	f104 0008 	add.w	r0, r4, #8
 8004730:	f7ff fbb8 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004734:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004736:	2d00      	cmp	r5, #0
 8004738:	d148      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x710>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800473a:	4a28      	ldr	r2, [pc, #160]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800473c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800473e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004742:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004746:	430b      	orrs	r3, r1
 8004748:	6553      	str	r3, [r2, #84]	; 0x54
 800474a:	e019      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474c:	2101      	movs	r1, #1
 800474e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004752:	f7ff fc2d 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004756:	4605      	mov	r5, r0
        break;
 8004758:	e7d0      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800475a:	2601      	movs	r6, #1
 800475c:	4635      	mov	r5, r6
 800475e:	e7d6      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004760:	462e      	mov	r6, r5
 8004762:	e7d4      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x652>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004764:	2601      	movs	r6, #1
 8004766:	4635      	mov	r5, r6
 8004768:	e00a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d0e2      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004774:	d0df      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004776:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800477a:	d0dc      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800477c:	2601      	movs	r6, #1
 800477e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004786:	d038      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004788:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004790:	d054      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x780>
 8004792:	d827      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004794:	b143      	cbz	r3, 80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d119      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x714>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800479c:	2100      	movs	r1, #0
 800479e:	f104 0008 	add.w	r0, r4, #8
 80047a2:	f7ff fb7f 	bl	8003ea4 <RCCEx_PLL2_Config>
 80047a6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	d14e      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80047ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80047b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80047b4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6593      	str	r3, [r2, #88]	; 0x58
 80047bc:	e01d      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047be:	2102      	movs	r1, #2
 80047c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80047c4:	f7ff fbf4 	bl	8003fb0 <RCCEx_PLL3_Config>
 80047c8:	4605      	mov	r5, r0
        break;
 80047ca:	e7b4      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80047cc:	462e      	mov	r6, r5
 80047ce:	e7d7      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047d0:	2601      	movs	r6, #1
 80047d2:	4635      	mov	r5, r6
 80047d4:	e011      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047d6:	bf00      	nop
 80047d8:	58024800 	.word	0x58024800
 80047dc:	58024400 	.word	0x58024400
 80047e0:	00ffffcf 	.word	0x00ffffcf
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d0de      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80047ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047ee:	d0db      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80047f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f4:	d0d8      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80047f6:	2601      	movs	r6, #1
 80047f8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004800:	d033      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004802:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480a:	f000 80a3 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x898>
 800480e:	d821      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x798>
 8004810:	b143      	cbz	r3, 8004824 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004816:	d11a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x792>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004818:	2100      	movs	r1, #0
 800481a:	f104 0008 	add.w	r0, r4, #8
 800481e:	f7ff fb41 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004822:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004824:	2d00      	cmp	r5, #0
 8004826:	f040 809c 	bne.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800482a:	4a81      	ldr	r2, [pc, #516]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800482c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800482e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004832:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004836:	430b      	orrs	r3, r1
 8004838:	6593      	str	r3, [r2, #88]	; 0x58
 800483a:	e016      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800483c:	2102      	movs	r1, #2
 800483e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004842:	f7ff fbb5 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004846:	4605      	mov	r5, r0
        break;
 8004848:	e7ae      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800484a:	462e      	mov	r6, r5
 800484c:	e7d5      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800484e:	2601      	movs	r6, #1
 8004850:	4635      	mov	r5, r6
 8004852:	e00a      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	d0e4      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800485a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800485e:	d0e1      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004860:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004864:	d0de      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004866:	2601      	movs	r6, #1
 8004868:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	f013 0f08 	tst.w	r3, #8
 8004870:	d00c      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004872:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	d074      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800487c:	4a6c      	ldr	r2, [pc, #432]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800487e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004884:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004888:	430b      	orrs	r3, r1
 800488a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	f013 0f10 	tst.w	r3, #16
 8004892:	d00c      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004894:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d06c      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800489e:	4a64      	ldr	r2, [pc, #400]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80048a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80048b4:	d00b      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->AdcClockSelection)
 80048b6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d074      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80048c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c4:	d067      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d05f      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80048ca:	2601      	movs	r6, #1
 80048cc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch (PeriphClkInit->UsbClockSelection)
 80048d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80048da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048de:	d07c      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x91e>
 80048e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e4:	d06f      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ea:	d067      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x900>
 80048ec:	2601      	movs	r6, #1
 80048ee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch (PeriphClkInit->SdmmcClockSelection)
 80048f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d076      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x930>
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004902:	f000 8081 	beq.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8004906:	2601      	movs	r6, #1
 8004908:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004910:	f040 8083 	bne.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x95e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800491a:	f000 808e 	beq.w	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x97e>
    switch (PeriphClkInit->RngClockSelection)
 800491e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	f000 80ec 	beq.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 800492a:	f240 8083 	bls.w	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800492e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	f040 80e1 	bne.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0xa42>
    if (ret == HAL_OK)
 800493c:	2d00      	cmp	r5, #0
 800493e:	f040 80e6 	bne.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xa52>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004942:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004944:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800494e:	430b      	orrs	r3, r1
 8004950:	6553      	str	r3, [r2, #84]	; 0x54
 8004952:	e072      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x97e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004954:	2102      	movs	r1, #2
 8004956:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800495a:	f7ff fb29 	bl	8003fb0 <RCCEx_PLL3_Config>
 800495e:	4605      	mov	r5, r0
        break;
 8004960:	e760      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004962:	462e      	mov	r6, r5
 8004964:	e781      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004966:	2102      	movs	r1, #2
 8004968:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800496c:	f7ff fb20 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004970:	2800      	cmp	r0, #0
 8004972:	d083      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
        status = HAL_ERROR;
 8004974:	2601      	movs	r6, #1
 8004976:	e781      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004978:	2102      	movs	r1, #2
 800497a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800497e:	f7ff fb17 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004982:	2800      	cmp	r0, #0
 8004984:	d08b      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        status = HAL_ERROR;
 8004986:	2601      	movs	r6, #1
 8004988:	e789      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800498a:	2100      	movs	r1, #0
 800498c:	f104 0008 	add.w	r0, r4, #8
 8004990:	f7ff fa88 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004994:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004996:	b97d      	cbnz	r5, 80049b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800499a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800499c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049a0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	e791      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049aa:	2102      	movs	r1, #2
 80049ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049b0:	f7ff fafe 	bl	8003fb0 <RCCEx_PLL3_Config>
 80049b4:	4605      	mov	r5, r0
        break;
 80049b6:	e7ee      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80049b8:	462e      	mov	r6, r5
 80049ba:	e788      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x812>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80049be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80049c6:	b97d      	cbnz	r5, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c8:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80049ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80049cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049d0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6553      	str	r3, [r2, #84]	; 0x54
 80049d8:	e78a      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049da:	2101      	movs	r1, #1
 80049dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049e0:	f7ff fae6 	bl	8003fb0 <RCCEx_PLL3_Config>
 80049e4:	4605      	mov	r5, r0
        break;
 80049e6:	e7ee      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80049e8:	462e      	mov	r6, r5
 80049ea:	e781      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80049ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80049f6:	b975      	cbnz	r5, 8004a16 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049f8:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80049fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a02:	430b      	orrs	r3, r1
 8004a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a06:	e780      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a08:	2102      	movs	r1, #2
 8004a0a:	f104 0008 	add.w	r0, r4, #8
 8004a0e:	f7ff fa49 	bl	8003ea4 <RCCEx_PLL2_Config>
 8004a12:	4605      	mov	r5, r0
        break;
 8004a14:	e7ef      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 8004a16:	462e      	mov	r6, r5
 8004a18:	e777      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004a20:	f7ff fac6 	bl	8003fb0 <RCCEx_PLL3_Config>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f43f af75 	beq.w	8004914 <HAL_RCCEx_PeriphCLKConfig+0x858>
      status = HAL_ERROR;
 8004a2a:	2601      	movs	r6, #1
 8004a2c:	e772      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x858>
 8004a2e:	bf00      	nop
 8004a30:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d081      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004a38:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a40:	d006      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a42:	4a4f      	ldr	r2, [pc, #316]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004a44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a4a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004a56:	d007      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a58:	4a49      	ldr	r2, [pc, #292]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004a5a:	6913      	ldr	r3, [r2, #16]
 8004a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a60:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004a6e:	d006      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a70:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004a72:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a78:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a84:	d009      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a8e:	611a      	str	r2, [r3, #16]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8004a96:	430a      	orrs	r2, r1
 8004a98:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	da06      	bge.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004aa0:	4a37      	ldr	r2, [pc, #220]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004aa2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004aa4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004aa8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ab6:	4a32      	ldr	r2, [pc, #200]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004ab8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004aba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004abe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	f013 0f01 	tst.w	r3, #1
 8004acc:	d121      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xa56>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	f013 0f02 	tst.w	r3, #2
 8004ad4:	d126      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ad6:	6863      	ldr	r3, [r4, #4]
 8004ad8:	f013 0f04 	tst.w	r3, #4
 8004adc:	d12b      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	f013 0f08 	tst.w	r3, #8
 8004ae4:	d130      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ae6:	6863      	ldr	r3, [r4, #4]
 8004ae8:	f013 0f10 	tst.w	r3, #16
 8004aec:	d135      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	f013 0f20 	tst.w	r3, #32
 8004af4:	d13a      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xab0>
  if (status == HAL_OK)
 8004af6:	b106      	cbz	r6, 8004afa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  return HAL_ERROR;
 8004af8:	2601      	movs	r6, #1
}
 8004afa:	4630      	mov	r0, r6
 8004afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 8004afe:	2601      	movs	r6, #1
 8004b00:	e79b      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x97e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8004b04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004b0c:	e716      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004b0e:	462e      	mov	r6, r5
 8004b10:	e793      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x97e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b12:	2100      	movs	r1, #0
 8004b14:	f104 0008 	add.w	r0, r4, #8
 8004b18:	f7ff f9c4 	bl	8003ea4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d0d6      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa12>
      status = ret;
 8004b20:	4606      	mov	r6, r0
 8004b22:	e7d4      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa12>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b24:	2101      	movs	r1, #1
 8004b26:	f104 0008 	add.w	r0, r4, #8
 8004b2a:	f7ff f9bb 	bl	8003ea4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0d1      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      status = ret;
 8004b32:	4606      	mov	r6, r0
 8004b34:	e7cf      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b36:	2102      	movs	r1, #2
 8004b38:	f104 0008 	add.w	r0, r4, #8
 8004b3c:	f7ff f9b2 	bl	8003ea4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d0cc      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xa22>
      status = ret;
 8004b44:	4606      	mov	r6, r0
 8004b46:	e7ca      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xa22>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004b4e:	f7ff fa2f 	bl	8003fb0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d0c7      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
      status = ret;
 8004b56:	4606      	mov	r6, r0
 8004b58:	e7c5      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004b60:	f7ff fa26 	bl	8003fb0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0c2      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa32>
      status = ret;
 8004b68:	4606      	mov	r6, r0
 8004b6a:	e7c0      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa32>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004b72:	f7ff fa1d 	bl	8003fb0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d0bd      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
      status = ret;
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	e7bb      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400

08004b84 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004b84:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b86:	f7ff f959 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b92:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	f003 031f 	and.w	r3, r3, #31
}
 8004b9a:	40d8      	lsrs	r0, r3
 8004b9c:	bd08      	pop	{r3, pc}
 8004b9e:	bf00      	nop
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	08007170 	.word	0x08007170

08004ba8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004ba8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004baa:	4b78      	ldr	r3, [pc, #480]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004bae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004bb0:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bb6:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8004bc4:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8004bc8:	f000 80db 	beq.w	8004d82 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 8004bcc:	f002 0203 	and.w	r2, r2, #3
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004bd8:	2a01      	cmp	r2, #1
 8004bda:	d066      	beq.n	8004caa <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004bdc:	2a02      	cmp	r2, #2
 8004bde:	f000 80b3 	beq.w	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004be2:	b1e2      	cbz	r2, 8004c1e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be4:	ee07 ca10 	vmov	s14, ip
 8004be8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004bec:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004bf0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004bf4:	4b65      	ldr	r3, [pc, #404]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	ee06 3a90 	vmov	s13, r3
 8004c00:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004c04:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004c08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c18:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004c1c:	e061      	b.n	8004ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f013 0f20 	tst.w	r3, #32
 8004c26:	d023      	beq.n	8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c28:	4958      	ldr	r1, [pc, #352]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004c2a:	680a      	ldr	r2, [r1, #0]
 8004c2c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004c32:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c34:	ee07 3a10 	vmov	s14, r3
 8004c38:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004c3c:	ee07 ca10 	vmov	s14, ip
 8004c40:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004c44:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004c48:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee06 3a90 	vmov	s13, r3
 8004c52:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004c56:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004c5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c6e:	e038      	b.n	8004ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c70:	ee07 ca10 	vmov	s14, ip
 8004c74:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004c78:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8004c7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004c80:	4b42      	ldr	r3, [pc, #264]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	ee06 3a90 	vmov	s13, r3
 8004c8c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004c90:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004c94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca8:	e01b      	b.n	8004ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004caa:	ee07 ca10 	vmov	s14, ip
 8004cae:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004cb2:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004cb6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004cba:	4b34      	ldr	r3, [pc, #208]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	ee06 3a90 	vmov	s13, r3
 8004cc6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004cca:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004cce:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004ce4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004ce6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004cfe:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004d02:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d08:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d18:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004d1c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004d20:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d24:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d26:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d3a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004d3e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d46:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d48:	ee07 ca10 	vmov	s14, ip
 8004d4c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004d50:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8004d54:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	ee06 3a90 	vmov	s13, r3
 8004d64:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004d68:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004d6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004d80:	e7af      	b.n	8004ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d86:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d88:	6083      	str	r3, [r0, #8]
}
 8004d8a:	e7da      	b.n	8004d42 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	4a742400 	.word	0x4a742400
 8004d94:	39000000 	.word	0x39000000
 8004d98:	03d09000 	.word	0x03d09000
 8004d9c:	4c742400 	.word	0x4c742400
 8004da0:	4bbebc20 	.word	0x4bbebc20

08004da4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8004da4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da6:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004daa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004dac:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db2:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8004dc0:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8004dc4:	f000 80db 	beq.w	8004f7e <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8004dc8:	f002 0203 	and.w	r2, r2, #3
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004dd4:	2a01      	cmp	r2, #1
 8004dd6:	d066      	beq.n	8004ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8004dd8:	2a02      	cmp	r2, #2
 8004dda:	f000 80b3 	beq.w	8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004dde:	b1e2      	cbz	r2, 8004e1a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de0:	ee07 ca10 	vmov	s14, ip
 8004de4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004de8:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004dec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004df0:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	ee06 3a90 	vmov	s13, r3
 8004dfc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004e00:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004e04:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e14:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004e18:	e061      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e1a:	4b5b      	ldr	r3, [pc, #364]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f013 0f20 	tst.w	r3, #32
 8004e22:	d023      	beq.n	8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e24:	4958      	ldr	r1, [pc, #352]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004e26:	680a      	ldr	r2, [r1, #0]
 8004e28:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004e2e:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e30:	ee07 3a10 	vmov	s14, r3
 8004e34:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004e38:	ee07 ca10 	vmov	s14, ip
 8004e3c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004e40:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee06 3a90 	vmov	s13, r3
 8004e4e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004e52:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004e56:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e6a:	e038      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e6c:	ee07 ca10 	vmov	s14, ip
 8004e70:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004e74:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004e78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004e7c:	4b42      	ldr	r3, [pc, #264]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	ee06 3a90 	vmov	s13, r3
 8004e88:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004e8c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004e90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ea4:	e01b      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea6:	ee07 ca10 	vmov	s14, ip
 8004eaa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004eae:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004eb2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004eb6:	4b34      	ldr	r3, [pc, #208]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee06 3a90 	vmov	s13, r3
 8004ec2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ec6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004eca:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ede:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004ee0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ee2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004efa:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004efe:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f04:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f14:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004f18:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004f1c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f22:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f36:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004f3a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f42:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f44:	ee07 ca10 	vmov	s14, ip
 8004f48:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004f4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8004f50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5c:	ee06 3a90 	vmov	s13, r3
 8004f60:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004f64:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004f68:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f78:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8004f7c:	e7af      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f82:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f84:	6083      	str	r3, [r0, #8]
}
 8004f86:	e7da      	b.n	8004f3e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	4a742400 	.word	0x4a742400
 8004f90:	39000000 	.word	0x39000000
 8004f94:	03d09000 	.word	0x03d09000
 8004f98:	4c742400 	.word	0x4c742400
 8004f9c:	4bbebc20 	.word	0x4bbebc20

08004fa0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004fa0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa2:	4b78      	ldr	r3, [pc, #480]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004fa6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004fa8:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fae:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8004fbc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004fc0:	f000 80db 	beq.w	800517a <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8004fc4:	f002 0203 	and.w	r2, r2, #3
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004fd0:	2a01      	cmp	r2, #1
 8004fd2:	d066      	beq.n	80050a2 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8004fd4:	2a02      	cmp	r2, #2
 8004fd6:	f000 80b3 	beq.w	8005140 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8004fda:	b1e2      	cbz	r2, 8005016 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fdc:	ee07 ca10 	vmov	s14, ip
 8004fe0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004fe4:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8005188 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8004fe8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004fec:	4b65      	ldr	r3, [pc, #404]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	ee06 3a90 	vmov	s13, r3
 8004ff8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ffc:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800518c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005000:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005010:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005014:	e061      	b.n	80050da <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005016:	4b5b      	ldr	r3, [pc, #364]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f013 0f20 	tst.w	r3, #32
 800501e:	d023      	beq.n	8005068 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005020:	4958      	ldr	r1, [pc, #352]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005022:	680a      	ldr	r2, [r1, #0]
 8005024:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800502a:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800502c:	ee07 3a10 	vmov	s14, r3
 8005030:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005034:	ee07 ca10 	vmov	s14, ip
 8005038:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800503c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8005040:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005046:	ee06 3a90 	vmov	s13, r3
 800504a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800504e:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800518c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005052:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005066:	e038      	b.n	80050da <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005068:	ee07 ca10 	vmov	s14, ip
 800506c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005070:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8005188 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005074:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005078:	4b42      	ldr	r3, [pc, #264]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005080:	ee06 3a90 	vmov	s13, r3
 8005084:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005088:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800518c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800508c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050a0:	e01b      	b.n	80050da <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050a2:	ee07 ca10 	vmov	s14, ip
 80050a6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80050aa:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8005194 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80050ae:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80050b2:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee06 3a90 	vmov	s13, r3
 80050be:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80050c2:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800518c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80050c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80050ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d6:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80050da:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80050dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80050de:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80050f6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80050fa:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80050fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005100:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005110:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005114:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005118:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800511c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800511e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005132:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005136:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800513a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800513e:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005140:	ee07 ca10 	vmov	s14, ip
 8005144:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005148:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005198 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800514c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	ee06 3a90 	vmov	s13, r3
 800515c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005160:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800518c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005164:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005174:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005178:	e7af      	b.n	80050da <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800517e:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005180:	6083      	str	r3, [r0, #8]
}
 8005182:	e7da      	b.n	800513a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8005184:	58024400 	.word	0x58024400
 8005188:	4c742400 	.word	0x4c742400
 800518c:	39000000 	.word	0x39000000
 8005190:	03d09000 	.word	0x03d09000
 8005194:	4a742400 	.word	0x4a742400
 8005198:	4bbebc20 	.word	0x4bbebc20

0800519c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800519c:	b500      	push	{lr}
 800519e:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051a0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80051a4:	430b      	orrs	r3, r1
 80051a6:	d02d      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80051a8:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80051ac:	430b      	orrs	r3, r1
 80051ae:	d07d      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80051b0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80051b4:	430b      	orrs	r3, r1
 80051b6:	f000 80d3 	beq.w	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051ba:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80051be:	430b      	orrs	r3, r1
 80051c0:	f000 812b 	beq.w	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80051c4:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 80051c8:	430b      	orrs	r3, r1
 80051ca:	f000 818b 	beq.w	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80051ce:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f000 81e3 	beq.w	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80051d8:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 80051dc:	430b      	orrs	r3, r1
 80051de:	f000 822c 	beq.w	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051e2:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80051e6:	430b      	orrs	r3, r1
 80051e8:	f000 826f 	beq.w	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80051ec:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80051f0:	430b      	orrs	r3, r1
 80051f2:	f000 8290 	beq.w	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80051f6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80051fa:	4308      	orrs	r0, r1
 80051fc:	f000 82d4 	beq.w	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 8005200:	2000      	movs	r0, #0
 8005202:	e302      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005204:	4b95      	ldr	r3, [pc, #596]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800520c:	2b04      	cmp	r3, #4
 800520e:	f200 82f3 	bhi.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005212:	e8df f003 	tbb	[pc, r3]
 8005216:	1005      	.short	0x1005
 8005218:	031b      	.short	0x031b
 800521a:	26          	.byte	0x26
 800521b:	00          	.byte	0x00
 800521c:	4890      	ldr	r0, [pc, #576]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800521e:	e2f4      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005220:	4b8e      	ldr	r3, [pc, #568]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005228:	f000 82ef 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800522c:	a807      	add	r0, sp, #28
 800522e:	f7ff feb7 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005232:	9808      	ldr	r0, [sp, #32]
 8005234:	e2e9      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005236:	4b89      	ldr	r3, [pc, #548]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800523e:	f000 82e4 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005242:	a804      	add	r0, sp, #16
 8005244:	f7ff fcb0 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005248:	9804      	ldr	r0, [sp, #16]
 800524a:	e2de      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800524c:	4b83      	ldr	r3, [pc, #524]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005254:	f000 82d9 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005258:	a801      	add	r0, sp, #4
 800525a:	f7ff fda3 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800525e:	9801      	ldr	r0, [sp, #4]
 8005260:	e2d3      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005262:	4a7e      	ldr	r2, [pc, #504]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005264:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	f012 0f04 	tst.w	r2, #4
 8005270:	d007      	beq.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005272:	b933      	cbnz	r3, 8005282 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005274:	4b79      	ldr	r3, [pc, #484]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800527c:	4879      	ldr	r0, [pc, #484]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800527e:	40d8      	lsrs	r0, r3
 8005280:	e2c3      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005282:	4a76      	ldr	r2, [pc, #472]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	f412 7f80 	tst.w	r2, #256	; 0x100
 800528a:	d003      	beq.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800528c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005290:	f000 82b4 	beq.w	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005294:	4a71      	ldr	r2, [pc, #452]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800529c:	f000 82b0 	beq.w	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a4:	f000 82ae 	beq.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 80052a8:	2000      	movs	r0, #0
 80052aa:	e2ae      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80052ac:	4b6b      	ldr	r3, [pc, #428]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d033      	beq.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80052b8:	d915      	bls.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80052ba:	2bc0      	cmp	r3, #192	; 0xc0
 80052bc:	f000 82a4 	beq.w	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d11f      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052c6:	4a65      	ldr	r2, [pc, #404]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80052ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	f012 0f04 	tst.w	r2, #4
 80052d4:	d02f      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80052d6:	bb73      	cbnz	r3, 8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d8:	4b60      	ldr	r3, [pc, #384]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80052e0:	4860      	ldr	r0, [pc, #384]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80052e2:	40d8      	lsrs	r0, r3
 80052e4:	e291      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80052e6:	b183      	cbz	r3, 800530a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d10a      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ec:	4b5b      	ldr	r3, [pc, #364]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80052f4:	f000 8289 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f8:	a804      	add	r0, sp, #16
 80052fa:	f7ff fc55 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052fe:	9804      	ldr	r0, [sp, #16]
 8005300:	e283      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005302:	2000      	movs	r0, #0
 8005304:	e281      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005306:	2000      	movs	r0, #0
 8005308:	e27f      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800530a:	4b54      	ldr	r3, [pc, #336]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005312:	f000 827a 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005316:	a807      	add	r0, sp, #28
 8005318:	f7ff fe42 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800531c:	9808      	ldr	r0, [sp, #32]
 800531e:	e274      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005320:	4b4e      	ldr	r3, [pc, #312]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005328:	f000 826f 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800532c:	a801      	add	r0, sp, #4
 800532e:	f7ff fd39 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005332:	9801      	ldr	r0, [sp, #4]
 8005334:	e269      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005336:	4a49      	ldr	r2, [pc, #292]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800533e:	d003      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005344:	f000 8264 	beq.w	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005348:	4a44      	ldr	r2, [pc, #272]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005350:	f000 8260 	beq.w	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005358:	f000 825e 	beq.w	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 800535c:	2000      	movs	r0, #0
 800535e:	e254      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005360:	4b3e      	ldr	r3, [pc, #248]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800536c:	d035      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800536e:	d916      	bls.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005370:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005374:	f000 8252 	beq.w	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800537c:	d120      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005380:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	f012 0f04 	tst.w	r2, #4
 800538c:	d030      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800538e:	bb7b      	cbnz	r3, 80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005390:	4b32      	ldr	r3, [pc, #200]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005398:	4832      	ldr	r0, [pc, #200]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800539a:	40d8      	lsrs	r0, r3
 800539c:	e235      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800539e:	b18b      	cbz	r3, 80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80053a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053a4:	d10a      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053a6:	4b2d      	ldr	r3, [pc, #180]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80053ae:	f000 822c 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b2:	a804      	add	r0, sp, #16
 80053b4:	f7ff fbf8 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053b8:	9804      	ldr	r0, [sp, #16]
 80053ba:	e226      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80053bc:	2000      	movs	r0, #0
 80053be:	e224      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80053c0:	2000      	movs	r0, #0
 80053c2:	e222      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80053cc:	f000 821d 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d0:	a807      	add	r0, sp, #28
 80053d2:	f7ff fde5 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053d6:	9808      	ldr	r0, [sp, #32]
 80053d8:	e217      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80053e2:	f000 8212 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e6:	a801      	add	r0, sp, #4
 80053e8:	f7ff fcdc 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ec:	9801      	ldr	r0, [sp, #4]
 80053ee:	e20c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053f0:	4a1a      	ldr	r2, [pc, #104]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80053f8:	d003      	beq.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80053fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053fe:	f000 820f 	beq.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800540a:	f000 820b 	beq.w	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005412:	f000 8209 	beq.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 8005416:	2000      	movs	r0, #0
 8005418:	e1f7      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8005422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005426:	d03d      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005428:	d91e      	bls.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800542a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800542e:	f000 81fd 	beq.w	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8005432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005436:	d128      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800543a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800543c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f012 0f04 	tst.w	r2, #4
 8005446:	d038      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d136      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005456:	40d8      	lsrs	r0, r3
 8005458:	e1d7      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800545a:	bf00      	nop
 800545c:	58024400 	.word	0x58024400
 8005460:	00bb8000 	.word	0x00bb8000
 8005464:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 8005468:	b18b      	cbz	r3, 800548e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800546a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800546e:	d10a      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005470:	4b9a      	ldr	r3, [pc, #616]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005478:	f000 81c7 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800547c:	a804      	add	r0, sp, #16
 800547e:	f7ff fb93 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005482:	9804      	ldr	r0, [sp, #16]
 8005484:	e1c1      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005486:	2000      	movs	r0, #0
 8005488:	e1bf      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800548a:	2000      	movs	r0, #0
 800548c:	e1bd      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800548e:	4b93      	ldr	r3, [pc, #588]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005496:	f000 81b8 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800549a:	a807      	add	r0, sp, #28
 800549c:	f7ff fd80 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054a0:	9808      	ldr	r0, [sp, #32]
 80054a2:	e1b2      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054a4:	4b8d      	ldr	r3, [pc, #564]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80054ac:	f000 81ad 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b0:	a801      	add	r0, sp, #4
 80054b2:	f7ff fc77 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054b6:	9801      	ldr	r0, [sp, #4]
 80054b8:	e1a7      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054ba:	4a88      	ldr	r2, [pc, #544]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	f412 7f80 	tst.w	r2, #256	; 0x100
 80054c2:	d003      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80054c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c8:	f000 81b2 	beq.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054cc:	4a83      	ldr	r2, [pc, #524]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80054d4:	f000 81ae 	beq.w	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 80054d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054dc:	f000 81ac 	beq.w	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 80054e0:	2000      	movs	r0, #0
 80054e2:	e192      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80054e4:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d035      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80054f2:	d916      	bls.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80054f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054f8:	f000 81a0 	beq.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005500:	d120      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005502:	4a76      	ldr	r2, [pc, #472]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005504:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	f012 0f04 	tst.w	r2, #4
 8005510:	d030      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8005512:	bb7b      	cbnz	r3, 8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005514:	4b71      	ldr	r3, [pc, #452]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800551c:	4870      	ldr	r0, [pc, #448]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800551e:	40d8      	lsrs	r0, r3
 8005520:	e173      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005522:	b18b      	cbz	r3, 8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d10a      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800552a:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005532:	f000 816a 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005536:	a804      	add	r0, sp, #16
 8005538:	f7ff fb36 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800553c:	9804      	ldr	r0, [sp, #16]
 800553e:	e164      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8005540:	2000      	movs	r0, #0
 8005542:	e162      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005544:	2000      	movs	r0, #0
 8005546:	e160      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005548:	4b64      	ldr	r3, [pc, #400]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005550:	f000 815b 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005554:	a807      	add	r0, sp, #28
 8005556:	f7ff fd23 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800555a:	9808      	ldr	r0, [sp, #32]
 800555c:	e155      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800555e:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005566:	f000 8150 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	a801      	add	r0, sp, #4
 800556c:	f7ff fc1a 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005570:	9801      	ldr	r0, [sp, #4]
 8005572:	e14a      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005574:	4a59      	ldr	r2, [pc, #356]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	f412 7f80 	tst.w	r2, #256	; 0x100
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800557e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005582:	f000 815d 	beq.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005586:	4a55      	ldr	r2, [pc, #340]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800558e:	f000 8159 	beq.w	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 8005592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005596:	f000 8157 	beq.w	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 800559a:	2000      	movs	r0, #0
 800559c:	e135      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800559e:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80055a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055aa:	d032      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80055ac:	d816      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d023      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80055b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b8:	d10a      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055ba:	4b48      	ldr	r3, [pc, #288]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80055c2:	f000 8122 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055c6:	a801      	add	r0, sp, #4
 80055c8:	f7ff fbec 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055cc:	9802      	ldr	r0, [sp, #8]
 80055ce:	e11c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80055d0:	b913      	cbnz	r3, 80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80055d2:	f7fe fc55 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
        break;
 80055d6:	e118      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80055d8:	2000      	movs	r0, #0
 80055da:	e116      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80055dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e0:	d023      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80055e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e6:	d107      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055e8:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80055f0:	f000 810b 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80055f4:	483b      	ldr	r0, [pc, #236]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80055f6:	e108      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 80055f8:	2000      	movs	r0, #0
 80055fa:	e106      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005604:	f000 8101 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005608:	a804      	add	r0, sp, #16
 800560a:	f7ff facd 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800560e:	9805      	ldr	r0, [sp, #20]
 8005610:	e0fb      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005612:	4b32      	ldr	r3, [pc, #200]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f010 0004 	ands.w	r0, r0, #4
 800561a:	f000 80f6 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005624:	482e      	ldr	r0, [pc, #184]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8005626:	40d8      	lsrs	r0, r3
 8005628:	e0ef      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8005632:	f000 80ea 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005636:	482c      	ldr	r0, [pc, #176]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005638:	e0e7      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d010      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800564c:	d018      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800564e:	b10b      	cbz	r3, 8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005650:	2000      	movs	r0, #0
 8005652:	e0da      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800565c:	f000 80d5 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005660:	a804      	add	r0, sp, #16
 8005662:	f7ff faa1 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005666:	9804      	ldr	r0, [sp, #16]
 8005668:	e0cf      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800566a:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005672:	f000 80ca 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005676:	a801      	add	r0, sp, #4
 8005678:	f7ff fb94 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800567c:	9803      	ldr	r0, [sp, #12]
 800567e:	e0c4      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005682:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	f012 0f04 	tst.w	r2, #4
 800568e:	d007      	beq.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005690:	b933      	cbnz	r3, 80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800569a:	4811      	ldr	r0, [pc, #68]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800569c:	40d8      	lsrs	r0, r3
 800569e:	e0b4      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80056a8:	d003      	beq.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80056aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ae:	f000 80cd 	beq.w	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80056ba:	f000 80c9 	beq.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80056be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c2:	f000 80c7 	beq.w	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 80056c6:	2000      	movs	r0, #0
 80056c8:	e09f      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80056ca:	4b04      	ldr	r3, [pc, #16]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 80056ce:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80056d2:	d00b      	beq.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 80056d4:	b9ab      	cbnz	r3, 8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e097      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	017d7840 	.word	0x017d7840
 80056e8:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056ec:	4b5a      	ldr	r3, [pc, #360]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80056f4:	f000 8089 	beq.w	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056f8:	a807      	add	r0, sp, #28
 80056fa:	f7ff fc51 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056fe:	9808      	ldr	r0, [sp, #32]
 8005700:	e083      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005702:	4b55      	ldr	r3, [pc, #340]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800570a:	d07e      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800570c:	a804      	add	r0, sp, #16
 800570e:	f7ff fa4b 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005712:	9806      	ldr	r0, [sp, #24]
 8005714:	e079      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005716:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800571e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005722:	d02f      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005724:	d815      	bhi.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572a:	d021      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800572c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005730:	d109      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005732:	4b49      	ldr	r3, [pc, #292]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800573a:	d066      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800573c:	a801      	add	r0, sp, #4
 800573e:	f7ff fb31 	bl	8004da4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005742:	9802      	ldr	r0, [sp, #8]
 8005744:	e061      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8005746:	b913      	cbnz	r3, 800574e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005748:	f7ff fa1c 	bl	8004b84 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800574c:	e05d      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800574e:	2000      	movs	r0, #0
 8005750:	e05b      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d020      	beq.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800575c:	d106      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800575e:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005766:	d050      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005768:	483c      	ldr	r0, [pc, #240]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800576a:	e04e      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800576c:	2000      	movs	r0, #0
 800576e:	e04c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005770:	4b39      	ldr	r3, [pc, #228]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005778:	d047      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800577a:	a804      	add	r0, sp, #16
 800577c:	f7ff fa14 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005780:	9805      	ldr	r0, [sp, #20]
 8005782:	e042      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005784:	4b34      	ldr	r3, [pc, #208]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	f010 0004 	ands.w	r0, r0, #4
 800578c:	d03d      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005794:	4832      	ldr	r0, [pc, #200]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 8005796:	40d8      	lsrs	r0, r3
 8005798:	e037      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80057a2:	d032      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80057a4:	482f      	ldr	r0, [pc, #188]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80057a6:	e030      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80057a8:	4b2b      	ldr	r3, [pc, #172]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80057b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b4:	d00c      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ba:	d013      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80057bc:	b10b      	cbz	r3, 80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80057be:	2000      	movs	r0, #0
  return frequency;
 80057c0:	e023      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057c2:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80057ca:	d01e      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80057cc:	4823      	ldr	r0, [pc, #140]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80057ce:	e01c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057d0:	4b21      	ldr	r3, [pc, #132]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80057d8:	d017      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057da:	a807      	add	r0, sp, #28
 80057dc:	f7ff fbe0 	bl	8004fa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057e0:	9808      	ldr	r0, [sp, #32]
 80057e2:	e012      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e4:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80057ec:	d00d      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	a804      	add	r0, sp, #16
 80057f0:	f7ff f9da 	bl	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057f4:	9805      	ldr	r0, [sp, #20]
 80057f6:	e008      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80057f8:	2000      	movs	r0, #0
 80057fa:	e006      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80057fc:	4819      	ldr	r0, [pc, #100]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80057fe:	e004      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005800:	2000      	movs	r0, #0
 8005802:	e002      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005804:	4815      	ldr	r0, [pc, #84]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005806:	e000      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8005808:	4817      	ldr	r0, [pc, #92]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 800580a:	b00b      	add	sp, #44	; 0x2c
 800580c:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8005810:	4814      	ldr	r0, [pc, #80]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005812:	e7fa      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005814:	2000      	movs	r0, #0
 8005816:	e7f8      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005818:	4810      	ldr	r0, [pc, #64]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800581a:	e7f6      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800581c:	4812      	ldr	r0, [pc, #72]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800581e:	e7f4      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005820:	4810      	ldr	r0, [pc, #64]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005822:	e7f2      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005824:	2000      	movs	r0, #0
 8005826:	e7f0      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005828:	480c      	ldr	r0, [pc, #48]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800582a:	e7ee      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800582c:	480e      	ldr	r0, [pc, #56]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800582e:	e7ec      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005830:	480c      	ldr	r0, [pc, #48]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005832:	e7ea      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005834:	2000      	movs	r0, #0
 8005836:	e7e8      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800583a:	e7e6      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800583c:	480a      	ldr	r0, [pc, #40]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800583e:	e7e4      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8005840:	4808      	ldr	r0, [pc, #32]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8005842:	e7e2      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005844:	2000      	movs	r0, #0
 8005846:	e7e0      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005848:	4804      	ldr	r0, [pc, #16]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800584a:	e7de      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800584c:	4805      	ldr	r0, [pc, #20]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800584e:	e7dc      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8005850:	2000      	movs	r0, #0
 8005852:	e7da      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8005856:	e7d8      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005858:	58024400 	.word	0x58024400
 800585c:	017d7840 	.word	0x017d7840
 8005860:	03d09000 	.word	0x03d09000
 8005864:	003d0900 	.word	0x003d0900
 8005868:	00bb8000 	.word	0x00bb8000

0800586c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800586c:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800586e:	6802      	ldr	r2, [r0, #0]
 8005870:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005872:	6991      	ldr	r1, [r2, #24]
 8005874:	f041 0108 	orr.w	r1, r1, #8
 8005878:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800587a:	6801      	ldr	r1, [r0, #0]
 800587c:	698a      	ldr	r2, [r1, #24]
 800587e:	f042 0210 	orr.w	r2, r2, #16
 8005882:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005884:	6801      	ldr	r1, [r0, #0]
 8005886:	680a      	ldr	r2, [r1, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800588e:	6801      	ldr	r1, [r0, #0]
 8005890:	690c      	ldr	r4, [r1, #16]
 8005892:	4a29      	ldr	r2, [pc, #164]	; (8005938 <SPI_CloseTransfer+0xcc>)
 8005894:	4022      	ands	r2, r4
 8005896:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005898:	6801      	ldr	r1, [r0, #0]
 800589a:	688a      	ldr	r2, [r1, #8]
 800589c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80058a0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	2a04      	cmp	r2, #4
 80058aa:	d00d      	beq.n	80058c8 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058ac:	f013 0f20 	tst.w	r3, #32
 80058b0:	d00a      	beq.n	80058c8 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058b2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80058b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ba:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058be:	6801      	ldr	r1, [r0, #0]
 80058c0:	698a      	ldr	r2, [r1, #24]
 80058c2:	f042 0220 	orr.w	r2, r2, #32
 80058c6:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058c8:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	2a03      	cmp	r2, #3
 80058d0:	d00d      	beq.n	80058ee <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058d6:	d00a      	beq.n	80058ee <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058d8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80058dc:	f042 0204 	orr.w	r2, r2, #4
 80058e0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058e4:	6801      	ldr	r1, [r0, #0]
 80058e6:	698a      	ldr	r2, [r1, #24]
 80058e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ec:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80058ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80058f2:	d00a      	beq.n	800590a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058f4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005900:	6801      	ldr	r1, [r0, #0]
 8005902:	698a      	ldr	r2, [r1, #24]
 8005904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005908:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800590a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800590e:	d00a      	beq.n	8005926 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005910:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005914:	f043 0308 	orr.w	r3, r3, #8
 8005918:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800591c:	6802      	ldr	r2, [r0, #0]
 800591e:	6993      	ldr	r3, [r2, #24]
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005926:	2300      	movs	r3, #0
 8005928:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800592c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	fffffc90 	.word	0xfffffc90

0800593c <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800593c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800593e:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005940:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005942:	3008      	adds	r0, #8
 8005944:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8005946:	fb03 0000 	mla	r0, r3, r0, r0
 800594a:	4770      	bx	lr

0800594c <SPI_WaitOnFlagUntilTimeout>:
{
 800594c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005950:	4680      	mov	r8, r0
 8005952:	460f      	mov	r7, r1
 8005954:	4616      	mov	r6, r2
 8005956:	461d      	mov	r5, r3
 8005958:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800595c:	e000      	b.n	8005960 <SPI_WaitOnFlagUntilTimeout+0x14>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595e:	b1bd      	cbz	r5, 8005990 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005960:	f8d8 3000 	ldr.w	r3, [r8]
 8005964:	695c      	ldr	r4, [r3, #20]
 8005966:	ea37 0404 	bics.w	r4, r7, r4
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	42b3      	cmp	r3, r6
 8005972:	d10a      	bne.n	800598a <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005974:	f7fc f820 	bl	80019b8 <HAL_GetTick>
 8005978:	eba0 0009 	sub.w	r0, r0, r9
 800597c:	42a8      	cmp	r0, r5
 800597e:	d3ee      	bcc.n	800595e <SPI_WaitOnFlagUntilTimeout+0x12>
 8005980:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005984:	d0eb      	beq.n	800595e <SPI_WaitOnFlagUntilTimeout+0x12>
      return HAL_TIMEOUT;
 8005986:	2003      	movs	r0, #3
 8005988:	e000      	b.n	800598c <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800598a:	2000      	movs	r0, #0
}
 800598c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005990:	2003      	movs	r0, #3
 8005992:	e7fb      	b.n	800598c <SPI_WaitOnFlagUntilTimeout+0x40>

08005994 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005994:	2800      	cmp	r0, #0
 8005996:	f000 80b7 	beq.w	8005b08 <HAL_SPI_Init+0x174>
{
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800599e:	2300      	movs	r3, #0
 80059a0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059a2:	6805      	ldr	r5, [r0, #0]
 80059a4:	4b5c      	ldr	r3, [pc, #368]	; (8005b18 <HAL_SPI_Init+0x184>)
 80059a6:	4e5d      	ldr	r6, [pc, #372]	; (8005b1c <HAL_SPI_Init+0x188>)
 80059a8:	429d      	cmp	r5, r3
 80059aa:	bf18      	it	ne
 80059ac:	42b5      	cmpne	r5, r6
 80059ae:	bf14      	ite	ne
 80059b0:	2601      	movne	r6, #1
 80059b2:	2600      	moveq	r6, #0
 80059b4:	d007      	beq.n	80059c6 <HAL_SPI_Init+0x32>
 80059b6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80059ba:	429d      	cmp	r5, r3
 80059bc:	d003      	beq.n	80059c6 <HAL_SPI_Init+0x32>
 80059be:	68c3      	ldr	r3, [r0, #12]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	f200 80a3 	bhi.w	8005b0c <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff ffb8 	bl	800593c <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059cc:	b12e      	cbz	r6, 80059da <HAL_SPI_Init+0x46>
 80059ce:	4b54      	ldr	r3, [pc, #336]	; (8005b20 <HAL_SPI_Init+0x18c>)
 80059d0:	429d      	cmp	r5, r3
 80059d2:	d002      	beq.n	80059da <HAL_SPI_Init+0x46>
 80059d4:	2808      	cmp	r0, #8
 80059d6:	f200 809b 	bhi.w	8005b10 <HAL_SPI_Init+0x17c>
 80059da:	4a4f      	ldr	r2, [pc, #316]	; (8005b18 <HAL_SPI_Init+0x184>)
 80059dc:	4b4f      	ldr	r3, [pc, #316]	; (8005b1c <HAL_SPI_Init+0x188>)
 80059de:	429d      	cmp	r5, r3
 80059e0:	bf18      	it	ne
 80059e2:	4295      	cmpne	r5, r2
 80059e4:	d003      	beq.n	80059ee <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ea:	429d      	cmp	r5, r3
 80059ec:	d102      	bne.n	80059f4 <HAL_SPI_Init+0x60>
 80059ee:	2810      	cmp	r0, #16
 80059f0:	f200 8090 	bhi.w	8005b14 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059f4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80059f8:	b1f3      	cbz	r3, 8005a38 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80059fa:	2302      	movs	r3, #2
 80059fc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a12:	69a1      	ldr	r1, [r4, #24]
 8005a14:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005a18:	d014      	beq.n	8005a44 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005a20:	d023      	beq.n	8005a6a <HAL_SPI_Init+0xd6>
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d920      	bls.n	8005a6a <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005a28:	6821      	ldr	r1, [r4, #0]
 8005a2a:	680b      	ldr	r3, [r1, #0]
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a30:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005a32:	4303      	orrs	r3, r0
 8005a34:	600b      	str	r3, [r1, #0]
 8005a36:	e01d      	b.n	8005a74 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 8005a38:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7fb fe9f 	bl	8001780 <HAL_SPI_MspInit>
 8005a42:	e7da      	b.n	80059fa <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005a4a:	d006      	beq.n	8005a5a <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d1e4      	bne.n	8005a1a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a52:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005a56:	d1e0      	bne.n	8005a1a <HAL_SPI_Init+0x86>
 8005a58:	e002      	b.n	8005a60 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d1f5      	bne.n	8005a4c <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005a66:	6019      	str	r1, [r3, #0]
 8005a68:	e7d7      	b.n	8005a1a <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005a6a:	6821      	ldr	r1, [r4, #0]
 8005a6c:	680b      	ldr	r3, [r1, #0]
 8005a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a72:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a74:	69e3      	ldr	r3, [r4, #28]
 8005a76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	68e1      	ldr	r1, [r4, #12]
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a90:	4313      	orrs	r3, r2
 8005a92:	69a2      	ldr	r2, [r4, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	6962      	ldr	r2, [r4, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	6a22      	ldr	r2, [r4, #32]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	68a2      	ldr	r2, [r4, #8]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	b96b      	cbnz	r3, 8005ada <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	6893      	ldr	r3, [r2, #8]
 8005ac2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005ac6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005aca:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	6893      	ldr	r3, [r2, #8]
 8005ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005aea:	d006      	beq.n	8005afa <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	68d3      	ldr	r3, [r2, #12]
 8005af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005af4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005af6:	430b      	orrs	r3, r1
 8005af8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afa:	2000      	movs	r0, #0
 8005afc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005b08:	2001      	movs	r0, #1
}
 8005b0a:	4770      	bx	lr
    return HAL_ERROR;
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	e7fa      	b.n	8005b06 <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 8005b10:	2001      	movs	r0, #1
 8005b12:	e7f8      	b.n	8005b06 <HAL_SPI_Init+0x172>
 8005b14:	2001      	movs	r0, #1
 8005b16:	e7f6      	b.n	8005b06 <HAL_SPI_Init+0x172>
 8005b18:	40013000 	.word	0x40013000
 8005b1c:	40003800 	.word	0x40003800
 8005b20:	40003c00 	.word	0x40003c00

08005b24 <HAL_SPI_TransmitReceive>:
{
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005b2e:	f8d0 b000 	ldr.w	fp, [r0]
  __HAL_LOCK(hspi);
 8005b32:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f000 8178 	beq.w	8005e2c <HAL_SPI_TransmitReceive+0x308>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4689      	mov	r9, r1
 8005b40:	4692      	mov	sl, r2
 8005b42:	2301      	movs	r3, #1
 8005b44:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005b48:	f7fb ff36 	bl	80019b8 <HAL_GetTick>
 8005b4c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4e:	f894 8081 	ldrb.w	r8, [r4, #129]	; 0x81
 8005b52:	fa5f f888 	uxtb.w	r8, r8
 8005b56:	f1b8 0f01 	cmp.w	r8, #1
 8005b5a:	d137      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0xa8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005b5c:	f1ba 0f00 	cmp.w	sl, #0
 8005b60:	bf18      	it	ne
 8005b62:	f1b9 0f00 	cmpne.w	r9, #0
 8005b66:	d037      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0xb4>
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	d035      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0xb4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005b6c:	2305      	movs	r3, #5
 8005b6e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b78:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005b7c:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005b80:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b84:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005b88:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005b8c:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8005b90:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005b92:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	68d3      	ldr	r3, [r2, #12]
 8005b98:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8005b9c:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	6851      	ldr	r1, [r2, #4]
 8005ba2:	4ba4      	ldr	r3, [pc, #656]	; (8005e34 <HAL_SPI_TransmitReceive+0x310>)
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	432b      	orrs	r3, r5
 8005ba8:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	6813      	ldr	r3, [r2, #0]
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bba:	d014      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0xc2>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bbc:	68e3      	ldr	r3, [r4, #12]
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d86a      	bhi.n	8005c98 <HAL_SPI_TransmitReceive+0x174>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc2:	2b07      	cmp	r3, #7
 8005bc4:	f200 80be 	bhi.w	8005d44 <HAL_SPI_TransmitReceive+0x220>
  initial_RxXferCount = Size;
 8005bc8:	46a9      	mov	r9, r5
 8005bca:	e0c7      	b.n	8005d5c <HAL_SPI_TransmitReceive+0x238>
    __HAL_UNLOCK(hspi);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8005bd2:	f04f 0802 	mov.w	r8, #2
 8005bd6:	e002      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
    __HAL_UNLOCK(hspi);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005bde:	4640      	mov	r0, r8
 8005be0:	b003      	add	sp, #12
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e7e4      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x98>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf2:	f7fb fee1 	bl	80019b8 <HAL_GetTick>
 8005bf6:	1bc0      	subs	r0, r0, r7
 8005bf8:	42b0      	cmp	r0, r6
 8005bfa:	d302      	bcc.n	8005c02 <HAL_SPI_TransmitReceive+0xde>
 8005bfc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005c00:	d138      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x150>
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d036      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x150>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c06:	ea45 0309 	orr.w	r3, r5, r9
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80ee 	beq.w	8005dee <HAL_SPI_TransmitReceive+0x2ca>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	f012 0f02 	tst.w	r2, #2
 8005c1a:	d010      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x11a>
 8005c1c:	b17d      	cbz	r5, 8005c3e <HAL_SPI_TransmitReceive+0x11a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c26:	3304      	adds	r3, #4
 8005c28:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005c2a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c38:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005c3c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f248 0208 	movw	r2, #32776	; 0x8008
 8005c46:	4211      	tst	r1, r2
 8005c48:	d0d3      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0xce>
 8005c4a:	f1b9 0f00 	cmp.w	r9, #0
 8005c4e:	d0d0      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0xce>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c58:	3304      	adds	r3, #4
 8005c5a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8005c5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005c6a:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005c6e:	fa1f f989 	uxth.w	r9, r9
 8005c72:	e7be      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0xce>
        SPI_CloseTransfer(hspi);
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff fdf9 	bl	800586c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c92:	f04f 0803 	mov.w	r8, #3
 8005c96:	e7a2      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
  initial_RxXferCount = Size;
 8005c98:	46a9      	mov	r9, r5
 8005c9a:	e7b4      	b.n	8005c06 <HAL_SPI_TransmitReceive+0xe2>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9c:	f7fb fe8c 	bl	80019b8 <HAL_GetTick>
 8005ca0:	1bc0      	subs	r0, r0, r7
 8005ca2:	42b0      	cmp	r0, r6
 8005ca4:	d302      	bcc.n	8005cac <HAL_SPI_TransmitReceive+0x188>
 8005ca6:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005caa:	d139      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x1fc>
 8005cac:	2e00      	cmp	r6, #0
 8005cae:	d037      	beq.n	8005d20 <HAL_SPI_TransmitReceive+0x1fc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cb0:	ea45 0309 	orr.w	r3, r5, r9
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8099 	beq.w	8005dee <HAL_SPI_TransmitReceive+0x2ca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f013 0f02 	tst.w	r3, #2
 8005cc4:	d011      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x1c6>
 8005cc6:	b185      	cbz	r5, 8005cea <HAL_SPI_TransmitReceive+0x1c6>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	f8ab 3020 	strh.w	r3, [fp, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005cd6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ce4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005ce8:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f013 0f01 	tst.w	r3, #1
 8005cf2:	d0d3      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x178>
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	d0d0      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x178>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfc:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 8005d00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d04:	3302      	adds	r3, #2
 8005d06:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005d08:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005d16:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005d1a:	fa1f f989 	uxth.w	r9, r9
 8005d1e:	e7bd      	b.n	8005c9c <HAL_SPI_TransmitReceive+0x178>
        SPI_CloseTransfer(hspi);
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff fda3 	bl	800586c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005d26:	2300      	movs	r3, #0
 8005d28:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d2c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005d3e:	f04f 0803 	mov.w	r8, #3
 8005d42:	e74c      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
  initial_RxXferCount = Size;
 8005d44:	46a9      	mov	r9, r5
 8005d46:	e7b3      	b.n	8005cb0 <HAL_SPI_TransmitReceive+0x18c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d48:	f7fb fe36 	bl	80019b8 <HAL_GetTick>
 8005d4c:	1bc0      	subs	r0, r0, r7
 8005d4e:	42b0      	cmp	r0, r6
 8005d50:	d302      	bcc.n	8005d58 <HAL_SPI_TransmitReceive+0x234>
 8005d52:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005d56:	d138      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x2a6>
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	d036      	beq.n	8005dca <HAL_SPI_TransmitReceive+0x2a6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d5c:	ea45 0309 	orr.w	r3, r5, r9
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d043      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x2ca>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	f012 0f02 	tst.w	r2, #2
 8005d6e:	d011      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x270>
 8005d70:	b185      	cbz	r5, 8005d94 <HAL_SPI_TransmitReceive+0x270>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d80:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d8e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8005d92:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	f012 0f01 	tst.w	r2, #1
 8005d9c:	d0d4      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x224>
 8005d9e:	f1b9 0f00 	cmp.w	r9, #0
 8005da2:	d0d1      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x224>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005da4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005daa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dae:	3301      	adds	r3, #1
 8005db0:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005db2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005dc0:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8005dc4:	fa1f f989 	uxth.w	r9, r9
 8005dc8:	e7be      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x224>
        SPI_CloseTransfer(hspi);
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7ff fd4e 	bl	800586c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 8005de8:	f04f 0803 	mov.w	r8, #3
 8005dec:	e6f7      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	9700      	str	r7, [sp, #0]
 8005df0:	4633      	mov	r3, r6
 8005df2:	2200      	movs	r2, #0
 8005df4:	2108      	movs	r1, #8
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7ff fda8 	bl	800594c <SPI_WaitOnFlagUntilTimeout>
 8005dfc:	b128      	cbz	r0, 8005e0a <HAL_SPI_TransmitReceive+0x2e6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005e02:	f043 0320 	orr.w	r3, r3, #32
 8005e06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fd2e 	bl	800586c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8005e10:	2300      	movs	r3, #0
 8005e12:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f aedc 	bne.w	8005bde <HAL_SPI_TransmitReceive+0xba>
  return errorcode;
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	e6d8      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
  __HAL_LOCK(hspi);
 8005e2c:	f04f 0802 	mov.w	r8, #2
 8005e30:	e6d5      	b.n	8005bde <HAL_SPI_TransmitReceive+0xba>
 8005e32:	bf00      	nop
 8005e34:	ffff0000 	.word	0xffff0000

08005e38 <arm_biquad_cascade_df2T_f32>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	7807      	ldrb	r7, [r0, #0]
 8005e3e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005e42:	6885      	ldr	r5, [r0, #8]
 8005e44:	3514      	adds	r5, #20
 8005e46:	6846      	ldr	r6, [r0, #4]
 8005e48:	3608      	adds	r6, #8
 8005e4a:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8005e4e:	eb02 0b09 	add.w	fp, r2, r9
 8005e52:	f003 080f 	and.w	r8, r3, #15
 8005e56:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8005e5a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8005e5e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005e62:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005e66:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005e6a:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005e6e:	46b4      	mov	ip, r6
 8005e70:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005e74:	ed16 4a01 	vldr	s8, [r6, #-4]
 8005e78:	f1be 0f00 	cmp.w	lr, #0
 8005e7c:	f000 8195 	beq.w	80061aa <arm_biquad_cascade_df2T_f32+0x372>
 8005e80:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005e84:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8005e88:	4674      	mov	r4, lr
 8005e8a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005e8e:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005e92:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e96:	ee67 4a03 	vmul.f32	s9, s14, s6
 8005e9a:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005e9e:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005ea2:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005ea6:	ee26 3a83 	vmul.f32	s6, s13, s6
 8005eaa:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8005eae:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8005eb2:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8005eb6:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005eba:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005ebe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005ec2:	ee27 4a23 	vmul.f32	s8, s14, s7
 8005ec6:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005eca:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005ece:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005ed2:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8005ed6:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8005eda:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8005ede:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005ee2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005ee6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005eea:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005eee:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ef2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ef6:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005efa:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005efe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f02:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8005f06:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8005f0a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f0e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f12:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f16:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f1a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f1e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f22:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f26:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f2a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f2e:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8005f32:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8005f36:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f3a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f3e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f42:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f46:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f4a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f4e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f52:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f56:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f5a:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8005f5e:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8005f62:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f66:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f6a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f6e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f72:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f76:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f7a:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f7e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f82:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f86:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8005f8a:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8005f8e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f92:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f96:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f9a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f9e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fa2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005fa6:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005faa:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005fae:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fb2:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8005fb6:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8005fba:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005fbe:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005fc2:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005fc6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005fca:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005fce:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005fd2:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005fd6:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005fda:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005fde:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8005fe2:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8005fe6:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005fea:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005fee:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005ff2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ff6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ffa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005ffe:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006002:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006006:	ee66 3a84 	vmul.f32	s7, s13, s8
 800600a:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800600e:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8006012:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006016:	ee74 4a83 	vadd.f32	s9, s9, s6
 800601a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800601e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006022:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006026:	ee35 5a23 	vadd.f32	s10, s10, s7
 800602a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800602e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006032:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006036:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800603a:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800603e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006042:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006046:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800604a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800604e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006052:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006056:	ee26 3a05 	vmul.f32	s6, s12, s10
 800605a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800605e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006062:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8006066:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800606a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800606e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006072:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006076:	ee35 5a23 	vadd.f32	s10, s10, s7
 800607a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800607e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006082:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006086:	ee33 3a05 	vadd.f32	s6, s6, s10
 800608a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800608e:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8006092:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006096:	ee27 5a84 	vmul.f32	s10, s15, s8
 800609a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800609e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80060a2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80060a6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80060aa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80060ae:	ee26 3a05 	vmul.f32	s6, s12, s10
 80060b2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80060b6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80060ba:	ed03 5a04 	vstr	s10, [r3, #-16]
 80060be:	ed10 4a03 	vldr	s8, [r0, #-12]
 80060c2:	ee67 4a84 	vmul.f32	s9, s15, s8
 80060c6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80060ca:	ee25 5a85 	vmul.f32	s10, s11, s10
 80060ce:	ee35 5a23 	vadd.f32	s10, s10, s7
 80060d2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80060d6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80060da:	ee26 3a24 	vmul.f32	s6, s12, s9
 80060de:	ee33 3a05 	vadd.f32	s6, s6, s10
 80060e2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80060e6:	ed43 4a03 	vstr	s9, [r3, #-12]
 80060ea:	ed10 4a02 	vldr	s8, [r0, #-8]
 80060ee:	ee27 5a84 	vmul.f32	s10, s15, s8
 80060f2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80060f6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80060fa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80060fe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006102:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006106:	ee26 3a05 	vmul.f32	s6, s12, s10
 800610a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800610e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006112:	ed03 5a02 	vstr	s10, [r3, #-8]
 8006116:	ed10 4a01 	vldr	s8, [r0, #-4]
 800611a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800611e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006122:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006126:	ee35 5a23 	vadd.f32	s10, s10, s7
 800612a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800612e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006132:	ee66 3a24 	vmul.f32	s7, s12, s9
 8006136:	ee73 3a85 	vadd.f32	s7, s7, s10
 800613a:	ee26 5a84 	vmul.f32	s10, s13, s8
 800613e:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8006142:	ee34 4a05 	vadd.f32	s8, s8, s10
 8006146:	ed43 4a01 	vstr	s9, [r3, #-4]
 800614a:	3040      	adds	r0, #64	; 0x40
 800614c:	3340      	adds	r3, #64	; 0x40
 800614e:	3c01      	subs	r4, #1
 8006150:	f47f ae9b 	bne.w	8005e8a <arm_biquad_cascade_df2T_f32+0x52>
 8006154:	4449      	add	r1, r9
 8006156:	465b      	mov	r3, fp
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	d019      	beq.n	8006192 <arm_biquad_cascade_df2T_f32+0x35a>
 800615e:	eb01 000a 	add.w	r0, r1, sl
 8006162:	ecf1 2a01 	vldmia	r1!, {s5}
 8006166:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800616a:	ee33 3a23 	vadd.f32	s6, s6, s7
 800616e:	ee67 3a22 	vmul.f32	s7, s14, s5
 8006172:	ee33 4a84 	vadd.f32	s8, s7, s8
 8006176:	ee26 5a03 	vmul.f32	s10, s12, s6
 800617a:	ee75 3a04 	vadd.f32	s7, s10, s8
 800617e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8006182:	ee25 4a83 	vmul.f32	s8, s11, s6
 8006186:	ee34 4a22 	vadd.f32	s8, s8, s5
 800618a:	eca3 3a01 	vstmia	r3!, {s6}
 800618e:	4281      	cmp	r1, r0
 8006190:	d1e7      	bne.n	8006162 <arm_biquad_cascade_df2T_f32+0x32a>
 8006192:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8006196:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800619a:	3514      	adds	r5, #20
 800619c:	3608      	adds	r6, #8
 800619e:	4611      	mov	r1, r2
 80061a0:	3f01      	subs	r7, #1
 80061a2:	f47f ae5a 	bne.w	8005e5a <arm_biquad_cascade_df2T_f32+0x22>
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	4613      	mov	r3, r2
 80061ac:	e7d4      	b.n	8006158 <arm_biquad_cascade_df2T_f32+0x320>
	...

080061b0 <arm_biquad_cascade_df2T_init_f32>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	2100      	movs	r1, #0
 80061b8:	60a2      	str	r2, [r4, #8]
 80061ba:	00c2      	lsls	r2, r0, #3
 80061bc:	7020      	strb	r0, [r4, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f9b0 	bl	8006524 <memset>
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <arm_sub_f32>:
 80061c8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80061cc:	b4f0      	push	{r4, r5, r6, r7}
 80061ce:	d033      	beq.n	8006238 <arm_sub_f32+0x70>
 80061d0:	f100 0610 	add.w	r6, r0, #16
 80061d4:	f101 0510 	add.w	r5, r1, #16
 80061d8:	f102 0410 	add.w	r4, r2, #16
 80061dc:	4667      	mov	r7, ip
 80061de:	ed15 7a04 	vldr	s14, [r5, #-16]
 80061e2:	3f01      	subs	r7, #1
 80061e4:	ed56 7a04 	vldr	s15, [r6, #-16]
 80061e8:	f105 0510 	add.w	r5, r5, #16
 80061ec:	f106 0610 	add.w	r6, r6, #16
 80061f0:	f104 0410 	add.w	r4, r4, #16
 80061f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061f8:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80061fc:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8006200:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8006204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006208:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800620c:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8006210:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006214:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006218:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800621c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006220:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8006224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006228:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800622c:	d1d7      	bne.n	80061de <arm_sub_f32+0x16>
 800622e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8006232:	4420      	add	r0, r4
 8006234:	4421      	add	r1, r4
 8006236:	4422      	add	r2, r4
 8006238:	f013 0303 	ands.w	r3, r3, #3
 800623c:	d01b      	beq.n	8006276 <arm_sub_f32+0xae>
 800623e:	edd0 7a00 	vldr	s15, [r0]
 8006242:	3b01      	subs	r3, #1
 8006244:	ed91 7a00 	vldr	s14, [r1]
 8006248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800624c:	edc2 7a00 	vstr	s15, [r2]
 8006250:	d011      	beq.n	8006276 <arm_sub_f32+0xae>
 8006252:	edd0 7a01 	vldr	s15, [r0, #4]
 8006256:	2b01      	cmp	r3, #1
 8006258:	ed91 7a01 	vldr	s14, [r1, #4]
 800625c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006260:	edc2 7a01 	vstr	s15, [r2, #4]
 8006264:	d007      	beq.n	8006276 <arm_sub_f32+0xae>
 8006266:	edd0 7a02 	vldr	s15, [r0, #8]
 800626a:	ed91 7a02 	vldr	s14, [r1, #8]
 800626e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006272:	edc2 7a02 	vstr	s15, [r2, #8]
 8006276:	bcf0      	pop	{r4, r5, r6, r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <arm_mult_f32>:
 800627c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8006280:	b4f0      	push	{r4, r5, r6, r7}
 8006282:	d033      	beq.n	80062ec <arm_mult_f32+0x70>
 8006284:	f100 0610 	add.w	r6, r0, #16
 8006288:	f101 0510 	add.w	r5, r1, #16
 800628c:	f102 0410 	add.w	r4, r2, #16
 8006290:	4667      	mov	r7, ip
 8006292:	ed15 7a04 	vldr	s14, [r5, #-16]
 8006296:	3f01      	subs	r7, #1
 8006298:	ed56 7a04 	vldr	s15, [r6, #-16]
 800629c:	f105 0510 	add.w	r5, r5, #16
 80062a0:	f106 0610 	add.w	r6, r6, #16
 80062a4:	f104 0410 	add.w	r4, r4, #16
 80062a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ac:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80062b0:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80062b4:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80062b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062bc:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80062c0:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 80062c4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80062c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062cc:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80062d0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80062d4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80062d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062dc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80062e0:	d1d7      	bne.n	8006292 <arm_mult_f32+0x16>
 80062e2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80062e6:	4420      	add	r0, r4
 80062e8:	4421      	add	r1, r4
 80062ea:	4422      	add	r2, r4
 80062ec:	f013 0303 	ands.w	r3, r3, #3
 80062f0:	d01b      	beq.n	800632a <arm_mult_f32+0xae>
 80062f2:	edd1 7a00 	vldr	s15, [r1]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	ed90 7a00 	vldr	s14, [r0]
 80062fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006300:	edc2 7a00 	vstr	s15, [r2]
 8006304:	d011      	beq.n	800632a <arm_mult_f32+0xae>
 8006306:	edd0 7a01 	vldr	s15, [r0, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	ed91 7a01 	vldr	s14, [r1, #4]
 8006310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006314:	edc2 7a01 	vstr	s15, [r2, #4]
 8006318:	d007      	beq.n	800632a <arm_mult_f32+0xae>
 800631a:	edd0 7a02 	vldr	s15, [r0, #8]
 800631e:	ed91 7a02 	vldr	s14, [r1, #8]
 8006322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006326:	edc2 7a02 	vstr	s15, [r2, #8]
 800632a:	bcf0      	pop	{r4, r5, r6, r7}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop

08006330 <arm_dot_prod_f32>:
 8006330:	b4f0      	push	{r4, r5, r6, r7}
 8006332:	0897      	lsrs	r7, r2, #2
 8006334:	d052      	beq.n	80063dc <arm_dot_prod_f32+0xac>
 8006336:	f100 0510 	add.w	r5, r0, #16
 800633a:	f101 0410 	add.w	r4, r1, #16
 800633e:	463e      	mov	r6, r7
 8006340:	eddf 7a28 	vldr	s15, [pc, #160]	; 80063e4 <arm_dot_prod_f32+0xb4>
 8006344:	ed14 7a04 	vldr	s14, [r4, #-16]
 8006348:	3e01      	subs	r6, #1
 800634a:	ed15 6a04 	vldr	s12, [r5, #-16]
 800634e:	f104 0410 	add.w	r4, r4, #16
 8006352:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 8006356:	f105 0510 	add.w	r5, r5, #16
 800635a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800635e:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 8006362:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8006366:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800636a:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 800636e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006372:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8006376:	ee27 7a25 	vmul.f32	s14, s14, s11
 800637a:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 800637e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006382:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006386:	ee37 7a26 	vadd.f32	s14, s14, s13
 800638a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800638e:	d1d9      	bne.n	8006344 <arm_dot_prod_f32+0x14>
 8006390:	013f      	lsls	r7, r7, #4
 8006392:	4438      	add	r0, r7
 8006394:	4439      	add	r1, r7
 8006396:	f012 0203 	ands.w	r2, r2, #3
 800639a:	d01b      	beq.n	80063d4 <arm_dot_prod_f32+0xa4>
 800639c:	ed91 7a00 	vldr	s14, [r1]
 80063a0:	3a01      	subs	r2, #1
 80063a2:	edd0 6a00 	vldr	s13, [r0]
 80063a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ae:	d011      	beq.n	80063d4 <arm_dot_prod_f32+0xa4>
 80063b0:	ed91 7a01 	vldr	s14, [r1, #4]
 80063b4:	2a01      	cmp	r2, #1
 80063b6:	edd0 6a01 	vldr	s13, [r0, #4]
 80063ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063c2:	d007      	beq.n	80063d4 <arm_dot_prod_f32+0xa4>
 80063c4:	ed90 7a02 	vldr	s14, [r0, #8]
 80063c8:	edd1 6a02 	vldr	s13, [r1, #8]
 80063cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d4:	edc3 7a00 	vstr	s15, [r3]
 80063d8:	bcf0      	pop	{r4, r5, r6, r7}
 80063da:	4770      	bx	lr
 80063dc:	eddf 7a01 	vldr	s15, [pc, #4]	; 80063e4 <arm_dot_prod_f32+0xb4>
 80063e0:	e7d9      	b.n	8006396 <arm_dot_prod_f32+0x66>
 80063e2:	bf00      	nop
 80063e4:	00000000 	.word	0x00000000

080063e8 <arm_add_f32>:
 80063e8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80063ec:	b4f0      	push	{r4, r5, r6, r7}
 80063ee:	d033      	beq.n	8006458 <arm_add_f32+0x70>
 80063f0:	f100 0610 	add.w	r6, r0, #16
 80063f4:	f101 0510 	add.w	r5, r1, #16
 80063f8:	f102 0410 	add.w	r4, r2, #16
 80063fc:	4667      	mov	r7, ip
 80063fe:	ed15 7a04 	vldr	s14, [r5, #-16]
 8006402:	3f01      	subs	r7, #1
 8006404:	ed56 7a04 	vldr	s15, [r6, #-16]
 8006408:	f105 0510 	add.w	r5, r5, #16
 800640c:	f106 0610 	add.w	r6, r6, #16
 8006410:	f104 0410 	add.w	r4, r4, #16
 8006414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006418:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800641c:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8006420:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8006424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006428:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800642c:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8006430:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006438:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800643c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006440:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8006444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006448:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800644c:	d1d7      	bne.n	80063fe <arm_add_f32+0x16>
 800644e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8006452:	4420      	add	r0, r4
 8006454:	4421      	add	r1, r4
 8006456:	4422      	add	r2, r4
 8006458:	f013 0303 	ands.w	r3, r3, #3
 800645c:	d01b      	beq.n	8006496 <arm_add_f32+0xae>
 800645e:	edd1 7a00 	vldr	s15, [r1]
 8006462:	3b01      	subs	r3, #1
 8006464:	ed90 7a00 	vldr	s14, [r0]
 8006468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800646c:	edc2 7a00 	vstr	s15, [r2]
 8006470:	d011      	beq.n	8006496 <arm_add_f32+0xae>
 8006472:	edd0 7a01 	vldr	s15, [r0, #4]
 8006476:	2b01      	cmp	r3, #1
 8006478:	ed91 7a01 	vldr	s14, [r1, #4]
 800647c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006480:	edc2 7a01 	vstr	s15, [r2, #4]
 8006484:	d007      	beq.n	8006496 <arm_add_f32+0xae>
 8006486:	edd0 7a02 	vldr	s15, [r0, #8]
 800648a:	ed91 7a02 	vldr	s14, [r1, #8]
 800648e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006492:	edc2 7a02 	vstr	s15, [r2, #8]
 8006496:	bcf0      	pop	{r4, r5, r6, r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop

0800649c <arm_abs_f32>:
 800649c:	b470      	push	{r4, r5, r6}
 800649e:	0896      	lsrs	r6, r2, #2
 80064a0:	d025      	beq.n	80064ee <arm_abs_f32+0x52>
 80064a2:	f100 0410 	add.w	r4, r0, #16
 80064a6:	f101 0310 	add.w	r3, r1, #16
 80064aa:	4635      	mov	r5, r6
 80064ac:	ed54 7a04 	vldr	s15, [r4, #-16]
 80064b0:	3d01      	subs	r5, #1
 80064b2:	f104 0410 	add.w	r4, r4, #16
 80064b6:	f103 0310 	add.w	r3, r3, #16
 80064ba:	eef0 7ae7 	vabs.f32	s15, s15
 80064be:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80064c2:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80064c6:	eef0 7ae7 	vabs.f32	s15, s15
 80064ca:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80064ce:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80064d2:	eef0 7ae7 	vabs.f32	s15, s15
 80064d6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80064da:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80064de:	eef0 7ae7 	vabs.f32	s15, s15
 80064e2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80064e6:	d1e1      	bne.n	80064ac <arm_abs_f32+0x10>
 80064e8:	0136      	lsls	r6, r6, #4
 80064ea:	4430      	add	r0, r6
 80064ec:	4431      	add	r1, r6
 80064ee:	f012 0203 	ands.w	r2, r2, #3
 80064f2:	d015      	beq.n	8006520 <arm_abs_f32+0x84>
 80064f4:	edd0 7a00 	vldr	s15, [r0]
 80064f8:	3a01      	subs	r2, #1
 80064fa:	eef0 7ae7 	vabs.f32	s15, s15
 80064fe:	edc1 7a00 	vstr	s15, [r1]
 8006502:	d00d      	beq.n	8006520 <arm_abs_f32+0x84>
 8006504:	edd0 7a01 	vldr	s15, [r0, #4]
 8006508:	2a01      	cmp	r2, #1
 800650a:	eef0 7ae7 	vabs.f32	s15, s15
 800650e:	edc1 7a01 	vstr	s15, [r1, #4]
 8006512:	d005      	beq.n	8006520 <arm_abs_f32+0x84>
 8006514:	edd0 7a02 	vldr	s15, [r0, #8]
 8006518:	eef0 7ae7 	vabs.f32	s15, s15
 800651c:	edc1 7a02 	vstr	s15, [r1, #8]
 8006520:	bc70      	pop	{r4, r5, r6}
 8006522:	4770      	bx	lr

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	; (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	; (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	; (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	; (8006578 <__libc_init_array+0x44>)
 8006548:	f000 fe06 	bl	8007158 <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	08007360 	.word	0x08007360
 8006570:	08007360 	.word	0x08007360
 8006574:	08007360 	.word	0x08007360
 8006578:	08007364 	.word	0x08007364
 800657c:	00000000 	.word	0x00000000

08006580 <sin>:
 8006580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006582:	eeb0 7b40 	vmov.f64	d7, d0
 8006586:	ee17 3a90 	vmov	r3, s15
 800658a:	4a21      	ldr	r2, [pc, #132]	; (8006610 <sin+0x90>)
 800658c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006590:	4293      	cmp	r3, r2
 8006592:	dc07      	bgt.n	80065a4 <sin+0x24>
 8006594:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006608 <sin+0x88>
 8006598:	2000      	movs	r0, #0
 800659a:	b005      	add	sp, #20
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	f000 b8a6 	b.w	80066f0 <__kernel_sin>
 80065a4:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <sin+0x94>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	dd04      	ble.n	80065b4 <sin+0x34>
 80065aa:	ee30 0b40 	vsub.f64	d0, d0, d0
 80065ae:	b005      	add	sp, #20
 80065b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80065b4:	4668      	mov	r0, sp
 80065b6:	f000 f8f3 	bl	80067a0 <__ieee754_rem_pio2>
 80065ba:	f000 0003 	and.w	r0, r0, #3
 80065be:	2801      	cmp	r0, #1
 80065c0:	d00a      	beq.n	80065d8 <sin+0x58>
 80065c2:	2802      	cmp	r0, #2
 80065c4:	d00f      	beq.n	80065e6 <sin+0x66>
 80065c6:	b9c0      	cbnz	r0, 80065fa <sin+0x7a>
 80065c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065cc:	ed9d 0b00 	vldr	d0, [sp]
 80065d0:	2001      	movs	r0, #1
 80065d2:	f000 f88d 	bl	80066f0 <__kernel_sin>
 80065d6:	e7ea      	b.n	80065ae <sin+0x2e>
 80065d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065dc:	ed9d 0b00 	vldr	d0, [sp]
 80065e0:	f000 f81a 	bl	8006618 <__kernel_cos>
 80065e4:	e7e3      	b.n	80065ae <sin+0x2e>
 80065e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065ea:	ed9d 0b00 	vldr	d0, [sp]
 80065ee:	2001      	movs	r0, #1
 80065f0:	f000 f87e 	bl	80066f0 <__kernel_sin>
 80065f4:	eeb1 0b40 	vneg.f64	d0, d0
 80065f8:	e7d9      	b.n	80065ae <sin+0x2e>
 80065fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065fe:	ed9d 0b00 	vldr	d0, [sp]
 8006602:	f000 f809 	bl	8006618 <__kernel_cos>
 8006606:	e7f5      	b.n	80065f4 <sin+0x74>
	...
 8006610:	3fe921fb 	.word	0x3fe921fb
 8006614:	7fefffff 	.word	0x7fefffff

08006618 <__kernel_cos>:
 8006618:	ee10 1a90 	vmov	r1, s1
 800661c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006624:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006628:	da05      	bge.n	8006636 <__kernel_cos+0x1e>
 800662a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800662e:	ee17 3a90 	vmov	r3, s15
 8006632:	2b00      	cmp	r3, #0
 8006634:	d03d      	beq.n	80066b2 <__kernel_cos+0x9a>
 8006636:	ee20 5b00 	vmul.f64	d5, d0, d0
 800663a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800663e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 80066b8 <__kernel_cos+0xa0>
 8006642:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80066c0 <__kernel_cos+0xa8>
 8006646:	eea5 4b07 	vfma.f64	d4, d5, d7
 800664a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80066c8 <__kernel_cos+0xb0>
 800664e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006652:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80066d0 <__kernel_cos+0xb8>
 8006656:	eea7 4b05 	vfma.f64	d4, d7, d5
 800665a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80066d8 <__kernel_cos+0xc0>
 800665e:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <__kernel_cos+0xd0>)
 8006660:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006664:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80066e0 <__kernel_cos+0xc8>
 8006668:	4299      	cmp	r1, r3
 800666a:	eea7 4b05 	vfma.f64	d4, d7, d5
 800666e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006672:	ee24 4b05 	vmul.f64	d4, d4, d5
 8006676:	ee25 7b07 	vmul.f64	d7, d5, d7
 800667a:	eea5 1b04 	vfma.f64	d1, d5, d4
 800667e:	dc04      	bgt.n	800668a <__kernel_cos+0x72>
 8006680:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006684:	ee36 0b47 	vsub.f64	d0, d6, d7
 8006688:	4770      	bx	lr
 800668a:	4b18      	ldr	r3, [pc, #96]	; (80066ec <__kernel_cos+0xd4>)
 800668c:	4299      	cmp	r1, r3
 800668e:	dc0d      	bgt.n	80066ac <__kernel_cos+0x94>
 8006690:	2200      	movs	r2, #0
 8006692:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8006696:	ec43 2b15 	vmov	d5, r2, r3
 800669a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800669e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80066a2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80066a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80066aa:	4770      	bx	lr
 80066ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80066b0:	e7f3      	b.n	800669a <__kernel_cos+0x82>
 80066b2:	eeb0 0b46 	vmov.f64	d0, d6
 80066b6:	4770      	bx	lr
 80066b8:	be8838d4 	.word	0xbe8838d4
 80066bc:	bda8fae9 	.word	0xbda8fae9
 80066c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80066c4:	3e21ee9e 	.word	0x3e21ee9e
 80066c8:	809c52ad 	.word	0x809c52ad
 80066cc:	be927e4f 	.word	0xbe927e4f
 80066d0:	19cb1590 	.word	0x19cb1590
 80066d4:	3efa01a0 	.word	0x3efa01a0
 80066d8:	16c15177 	.word	0x16c15177
 80066dc:	bf56c16c 	.word	0xbf56c16c
 80066e0:	5555554c 	.word	0x5555554c
 80066e4:	3fa55555 	.word	0x3fa55555
 80066e8:	3fd33332 	.word	0x3fd33332
 80066ec:	3fe90000 	.word	0x3fe90000

080066f0 <__kernel_sin>:
 80066f0:	ee10 3a90 	vmov	r3, s1
 80066f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066fc:	da04      	bge.n	8006708 <__kernel_sin+0x18>
 80066fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006702:	ee17 3a90 	vmov	r3, s15
 8006706:	b35b      	cbz	r3, 8006760 <__kernel_sin+0x70>
 8006708:	ee20 6b00 	vmul.f64	d6, d0, d0
 800670c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006710:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006768 <__kernel_sin+0x78>
 8006714:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006770 <__kernel_sin+0x80>
 8006718:	eea6 4b07 	vfma.f64	d4, d6, d7
 800671c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006778 <__kernel_sin+0x88>
 8006720:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006724:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006780 <__kernel_sin+0x90>
 8006728:	eea7 4b06 	vfma.f64	d4, d7, d6
 800672c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006788 <__kernel_sin+0x98>
 8006730:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006734:	b930      	cbnz	r0, 8006744 <__kernel_sin+0x54>
 8006736:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006790 <__kernel_sin+0xa0>
 800673a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800673e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006742:	4770      	bx	lr
 8006744:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006748:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800674c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006750:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006754:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006798 <__kernel_sin+0xa8>
 8006758:	eea5 1b07 	vfma.f64	d1, d5, d7
 800675c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	f3af 8000 	nop.w
 8006768:	5acfd57c 	.word	0x5acfd57c
 800676c:	3de5d93a 	.word	0x3de5d93a
 8006770:	8a2b9ceb 	.word	0x8a2b9ceb
 8006774:	be5ae5e6 	.word	0xbe5ae5e6
 8006778:	57b1fe7d 	.word	0x57b1fe7d
 800677c:	3ec71de3 	.word	0x3ec71de3
 8006780:	19c161d5 	.word	0x19c161d5
 8006784:	bf2a01a0 	.word	0xbf2a01a0
 8006788:	1110f8a6 	.word	0x1110f8a6
 800678c:	3f811111 	.word	0x3f811111
 8006790:	55555549 	.word	0x55555549
 8006794:	bfc55555 	.word	0xbfc55555
 8006798:	55555549 	.word	0x55555549
 800679c:	3fc55555 	.word	0x3fc55555

080067a0 <__ieee754_rem_pio2>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	eeb0 7b40 	vmov.f64	d7, d0
 80067a6:	ee17 5a90 	vmov	r5, s15
 80067aa:	4b99      	ldr	r3, [pc, #612]	; (8006a10 <__ieee754_rem_pio2+0x270>)
 80067ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80067b0:	429e      	cmp	r6, r3
 80067b2:	b088      	sub	sp, #32
 80067b4:	4604      	mov	r4, r0
 80067b6:	dc07      	bgt.n	80067c8 <__ieee754_rem_pio2+0x28>
 80067b8:	2200      	movs	r2, #0
 80067ba:	2300      	movs	r3, #0
 80067bc:	ed84 0b00 	vstr	d0, [r4]
 80067c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067c4:	2000      	movs	r0, #0
 80067c6:	e01b      	b.n	8006800 <__ieee754_rem_pio2+0x60>
 80067c8:	4b92      	ldr	r3, [pc, #584]	; (8006a14 <__ieee754_rem_pio2+0x274>)
 80067ca:	429e      	cmp	r6, r3
 80067cc:	dc3b      	bgt.n	8006846 <__ieee754_rem_pio2+0xa6>
 80067ce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80069d0 <__ieee754_rem_pio2+0x230>
 80067d8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80067dc:	dd19      	ble.n	8006812 <__ieee754_rem_pio2+0x72>
 80067de:	ee30 7b46 	vsub.f64	d7, d0, d6
 80067e2:	429e      	cmp	r6, r3
 80067e4:	d00e      	beq.n	8006804 <__ieee754_rem_pio2+0x64>
 80067e6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80069d8 <__ieee754_rem_pio2+0x238>
 80067ea:	ee37 5b46 	vsub.f64	d5, d7, d6
 80067ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 80067f2:	ed84 5b00 	vstr	d5, [r4]
 80067f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80067fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80067fe:	2001      	movs	r0, #1
 8006800:	b008      	add	sp, #32
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80069e0 <__ieee754_rem_pio2+0x240>
 8006808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800680c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80069e8 <__ieee754_rem_pio2+0x248>
 8006810:	e7eb      	b.n	80067ea <__ieee754_rem_pio2+0x4a>
 8006812:	429e      	cmp	r6, r3
 8006814:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006818:	d00e      	beq.n	8006838 <__ieee754_rem_pio2+0x98>
 800681a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80069d8 <__ieee754_rem_pio2+0x238>
 800681e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006822:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006826:	ed84 5b00 	vstr	d5, [r4]
 800682a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	ed84 7b02 	vstr	d7, [r4, #8]
 8006836:	e7e3      	b.n	8006800 <__ieee754_rem_pio2+0x60>
 8006838:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80069e0 <__ieee754_rem_pio2+0x240>
 800683c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006840:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80069e8 <__ieee754_rem_pio2+0x248>
 8006844:	e7eb      	b.n	800681e <__ieee754_rem_pio2+0x7e>
 8006846:	4b74      	ldr	r3, [pc, #464]	; (8006a18 <__ieee754_rem_pio2+0x278>)
 8006848:	429e      	cmp	r6, r3
 800684a:	dc70      	bgt.n	800692e <__ieee754_rem_pio2+0x18e>
 800684c:	f000 f8ec 	bl	8006a28 <fabs>
 8006850:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006854:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80069f0 <__ieee754_rem_pio2+0x250>
 8006858:	eea0 7b06 	vfma.f64	d7, d0, d6
 800685c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006860:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006864:	ee17 0a90 	vmov	r0, s15
 8006868:	eeb1 4b45 	vneg.f64	d4, d5
 800686c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80069d0 <__ieee754_rem_pio2+0x230>
 8006870:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006874:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80069d8 <__ieee754_rem_pio2+0x238>
 8006878:	281f      	cmp	r0, #31
 800687a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800687e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006882:	dc08      	bgt.n	8006896 <__ieee754_rem_pio2+0xf6>
 8006884:	4b65      	ldr	r3, [pc, #404]	; (8006a1c <__ieee754_rem_pio2+0x27c>)
 8006886:	1e42      	subs	r2, r0, #1
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	42b3      	cmp	r3, r6
 800688e:	d002      	beq.n	8006896 <__ieee754_rem_pio2+0xf6>
 8006890:	ed84 6b00 	vstr	d6, [r4]
 8006894:	e024      	b.n	80068e0 <__ieee754_rem_pio2+0x140>
 8006896:	ee16 3a90 	vmov	r3, s13
 800689a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800689e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80068a8:	ddf2      	ble.n	8006890 <__ieee754_rem_pio2+0xf0>
 80068aa:	eeb0 6b40 	vmov.f64	d6, d0
 80068ae:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80069e0 <__ieee754_rem_pio2+0x240>
 80068b2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80068b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80068ba:	eea4 7b03 	vfma.f64	d7, d4, d3
 80068be:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80069e8 <__ieee754_rem_pio2+0x248>
 80068c2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80068c6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80068ca:	ee13 3a90 	vmov	r3, s7
 80068ce:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b31      	cmp	r3, #49	; 0x31
 80068d6:	dc17      	bgt.n	8006908 <__ieee754_rem_pio2+0x168>
 80068d8:	eeb0 0b46 	vmov.f64	d0, d6
 80068dc:	ed84 3b00 	vstr	d3, [r4]
 80068e0:	ed94 6b00 	vldr	d6, [r4]
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80068ea:	ee30 0b47 	vsub.f64	d0, d0, d7
 80068ee:	ed84 0b02 	vstr	d0, [r4, #8]
 80068f2:	da85      	bge.n	8006800 <__ieee754_rem_pio2+0x60>
 80068f4:	eeb1 6b46 	vneg.f64	d6, d6
 80068f8:	eeb1 0b40 	vneg.f64	d0, d0
 80068fc:	ed84 6b00 	vstr	d6, [r4]
 8006900:	ed84 0b02 	vstr	d0, [r4, #8]
 8006904:	4240      	negs	r0, r0
 8006906:	e77b      	b.n	8006800 <__ieee754_rem_pio2+0x60>
 8006908:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80069f8 <__ieee754_rem_pio2+0x258>
 800690c:	eeb0 0b46 	vmov.f64	d0, d6
 8006910:	eea4 0b07 	vfma.f64	d0, d4, d7
 8006914:	ee36 6b40 	vsub.f64	d6, d6, d0
 8006918:	eea4 6b07 	vfma.f64	d6, d4, d7
 800691c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8006a00 <__ieee754_rem_pio2+0x260>
 8006920:	eeb0 7b46 	vmov.f64	d7, d6
 8006924:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006928:	ee30 6b47 	vsub.f64	d6, d0, d7
 800692c:	e7b0      	b.n	8006890 <__ieee754_rem_pio2+0xf0>
 800692e:	4b3c      	ldr	r3, [pc, #240]	; (8006a20 <__ieee754_rem_pio2+0x280>)
 8006930:	429e      	cmp	r6, r3
 8006932:	dd06      	ble.n	8006942 <__ieee754_rem_pio2+0x1a2>
 8006934:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006938:	ed80 7b02 	vstr	d7, [r0, #8]
 800693c:	ed80 7b00 	vstr	d7, [r0]
 8006940:	e740      	b.n	80067c4 <__ieee754_rem_pio2+0x24>
 8006942:	1532      	asrs	r2, r6, #20
 8006944:	ee10 0a10 	vmov	r0, s0
 8006948:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800694c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006950:	ec41 0b17 	vmov	d7, r0, r1
 8006954:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006958:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8006a08 <__ieee754_rem_pio2+0x268>
 800695c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006960:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006964:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800696c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006970:	a808      	add	r0, sp, #32
 8006972:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006976:	ee37 7b46 	vsub.f64	d7, d7, d6
 800697a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800697e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006982:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006986:	2103      	movs	r1, #3
 8006988:	ed30 7b02 	vldmdb	r0!, {d7}
 800698c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006994:	460b      	mov	r3, r1
 8006996:	f101 31ff 	add.w	r1, r1, #4294967295
 800699a:	d0f5      	beq.n	8006988 <__ieee754_rem_pio2+0x1e8>
 800699c:	4921      	ldr	r1, [pc, #132]	; (8006a24 <__ieee754_rem_pio2+0x284>)
 800699e:	9101      	str	r1, [sp, #4]
 80069a0:	2102      	movs	r1, #2
 80069a2:	9100      	str	r1, [sp, #0]
 80069a4:	a802      	add	r0, sp, #8
 80069a6:	4621      	mov	r1, r4
 80069a8:	f000 f84a 	bl	8006a40 <__kernel_rem_pio2>
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	f6bf af27 	bge.w	8006800 <__ieee754_rem_pio2+0x60>
 80069b2:	ed94 7b00 	vldr	d7, [r4]
 80069b6:	eeb1 7b47 	vneg.f64	d7, d7
 80069ba:	ed84 7b00 	vstr	d7, [r4]
 80069be:	ed94 7b02 	vldr	d7, [r4, #8]
 80069c2:	eeb1 7b47 	vneg.f64	d7, d7
 80069c6:	ed84 7b02 	vstr	d7, [r4, #8]
 80069ca:	e79b      	b.n	8006904 <__ieee754_rem_pio2+0x164>
 80069cc:	f3af 8000 	nop.w
 80069d0:	54400000 	.word	0x54400000
 80069d4:	3ff921fb 	.word	0x3ff921fb
 80069d8:	1a626331 	.word	0x1a626331
 80069dc:	3dd0b461 	.word	0x3dd0b461
 80069e0:	1a600000 	.word	0x1a600000
 80069e4:	3dd0b461 	.word	0x3dd0b461
 80069e8:	2e037073 	.word	0x2e037073
 80069ec:	3ba3198a 	.word	0x3ba3198a
 80069f0:	6dc9c883 	.word	0x6dc9c883
 80069f4:	3fe45f30 	.word	0x3fe45f30
 80069f8:	2e000000 	.word	0x2e000000
 80069fc:	3ba3198a 	.word	0x3ba3198a
 8006a00:	252049c1 	.word	0x252049c1
 8006a04:	397b839a 	.word	0x397b839a
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	41700000 	.word	0x41700000
 8006a10:	3fe921fb 	.word	0x3fe921fb
 8006a14:	4002d97b 	.word	0x4002d97b
 8006a18:	413921fb 	.word	0x413921fb
 8006a1c:	08007188 	.word	0x08007188
 8006a20:	7fefffff 	.word	0x7fefffff
 8006a24:	08007208 	.word	0x08007208

08006a28 <fabs>:
 8006a28:	ec51 0b10 	vmov	r0, r1, d0
 8006a2c:	ee10 2a10 	vmov	r2, s0
 8006a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a34:	ec43 2b10 	vmov	d0, r2, r3
 8006a38:	4770      	bx	lr
 8006a3a:	0000      	movs	r0, r0
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <__kernel_rem_pio2>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	ed2d 8b06 	vpush	{d8-d10}
 8006a48:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	9002      	str	r0, [sp, #8]
 8006a50:	49c3      	ldr	r1, [pc, #780]	; (8006d60 <__kernel_rem_pio2+0x320>)
 8006a52:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8006a5a:	9901      	ldr	r1, [sp, #4]
 8006a5c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006a5e:	f112 0f14 	cmn.w	r2, #20
 8006a62:	bfa8      	it	ge
 8006a64:	1ed0      	subge	r0, r2, #3
 8006a66:	f101 3aff 	add.w	sl, r1, #4294967295
 8006a6a:	bfaa      	itet	ge
 8006a6c:	2418      	movge	r4, #24
 8006a6e:	2000      	movlt	r0, #0
 8006a70:	fb90 f0f4 	sdivge	r0, r0, r4
 8006a74:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8006d48 <__kernel_rem_pio2+0x308>
 8006a78:	f06f 0417 	mvn.w	r4, #23
 8006a7c:	fb00 4404 	mla	r4, r0, r4, r4
 8006a80:	eba0 060a 	sub.w	r6, r0, sl
 8006a84:	4414      	add	r4, r2
 8006a86:	eb09 0c0a 	add.w	ip, r9, sl
 8006a8a:	ad1a      	add	r5, sp, #104	; 0x68
 8006a8c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8006a90:	2200      	movs	r2, #0
 8006a92:	4562      	cmp	r2, ip
 8006a94:	dd10      	ble.n	8006ab8 <__kernel_rem_pio2+0x78>
 8006a96:	9a01      	ldr	r2, [sp, #4]
 8006a98:	a91a      	add	r1, sp, #104	; 0x68
 8006a9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006a9e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8006aa2:	f04f 0c00 	mov.w	ip, #0
 8006aa6:	45cc      	cmp	ip, r9
 8006aa8:	dc26      	bgt.n	8006af8 <__kernel_rem_pio2+0xb8>
 8006aaa:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8006d48 <__kernel_rem_pio2+0x308>
 8006aae:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006ab2:	4616      	mov	r6, r2
 8006ab4:	2500      	movs	r5, #0
 8006ab6:	e015      	b.n	8006ae4 <__kernel_rem_pio2+0xa4>
 8006ab8:	42d6      	cmn	r6, r2
 8006aba:	d409      	bmi.n	8006ad0 <__kernel_rem_pio2+0x90>
 8006abc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8006ac0:	ee07 1a90 	vmov	s15, r1
 8006ac4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ac8:	eca5 7b02 	vstmia	r5!, {d7}
 8006acc:	3201      	adds	r2, #1
 8006ace:	e7e0      	b.n	8006a92 <__kernel_rem_pio2+0x52>
 8006ad0:	eeb0 7b46 	vmov.f64	d7, d6
 8006ad4:	e7f8      	b.n	8006ac8 <__kernel_rem_pio2+0x88>
 8006ad6:	ecbe 5b02 	vldmia	lr!, {d5}
 8006ada:	ed96 6b00 	vldr	d6, [r6]
 8006ade:	3501      	adds	r5, #1
 8006ae0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006ae4:	4555      	cmp	r5, sl
 8006ae6:	f1a6 0608 	sub.w	r6, r6, #8
 8006aea:	ddf4      	ble.n	8006ad6 <__kernel_rem_pio2+0x96>
 8006aec:	eca8 7b02 	vstmia	r8!, {d7}
 8006af0:	f10c 0c01 	add.w	ip, ip, #1
 8006af4:	3208      	adds	r2, #8
 8006af6:	e7d6      	b.n	8006aa6 <__kernel_rem_pio2+0x66>
 8006af8:	aa06      	add	r2, sp, #24
 8006afa:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8006d50 <__kernel_rem_pio2+0x310>
 8006afe:	ed9f ab96 	vldr	d10, [pc, #600]	; 8006d58 <__kernel_rem_pio2+0x318>
 8006b02:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8006b06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	464d      	mov	r5, r9
 8006b10:	00eb      	lsls	r3, r5, #3
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	ab92      	add	r3, sp, #584	; 0x248
 8006b16:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006b1a:	f10d 0b18 	add.w	fp, sp, #24
 8006b1e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006b20:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006b24:	465e      	mov	r6, fp
 8006b26:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f1a2 0208 	sub.w	r2, r2, #8
 8006b32:	dc48      	bgt.n	8006bc6 <__kernel_rem_pio2+0x186>
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fa17 	bl	8006f68 <scalbn>
 8006b3a:	eeb0 8b40 	vmov.f64	d8, d0
 8006b3e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006b42:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006b46:	f000 fa8f 	bl	8007068 <floor>
 8006b4a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006b4e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006b52:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	ee17 8a90 	vmov	r8, s15
 8006b5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b60:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006b64:	dd41      	ble.n	8006bea <__kernel_rem_pio2+0x1aa>
 8006b66:	1e68      	subs	r0, r5, #1
 8006b68:	ab06      	add	r3, sp, #24
 8006b6a:	f1c4 0c18 	rsb	ip, r4, #24
 8006b6e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006b72:	fa46 f20c 	asr.w	r2, r6, ip
 8006b76:	4490      	add	r8, r2
 8006b78:	fa02 f20c 	lsl.w	r2, r2, ip
 8006b7c:	1ab6      	subs	r6, r6, r2
 8006b7e:	f1c4 0217 	rsb	r2, r4, #23
 8006b82:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006b86:	4116      	asrs	r6, r2
 8006b88:	2e00      	cmp	r6, #0
 8006b8a:	dd3d      	ble.n	8006c08 <__kernel_rem_pio2+0x1c8>
 8006b8c:	f04f 0c00 	mov.w	ip, #0
 8006b90:	f108 0801 	add.w	r8, r8, #1
 8006b94:	4660      	mov	r0, ip
 8006b96:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006b9a:	4565      	cmp	r5, ip
 8006b9c:	dc6a      	bgt.n	8006c74 <__kernel_rem_pio2+0x234>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	dd04      	ble.n	8006bac <__kernel_rem_pio2+0x16c>
 8006ba2:	2c01      	cmp	r4, #1
 8006ba4:	d07b      	beq.n	8006c9e <__kernel_rem_pio2+0x25e>
 8006ba6:	2c02      	cmp	r4, #2
 8006ba8:	f000 8083 	beq.w	8006cb2 <__kernel_rem_pio2+0x272>
 8006bac:	2e02      	cmp	r6, #2
 8006bae:	d12b      	bne.n	8006c08 <__kernel_rem_pio2+0x1c8>
 8006bb0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006bb4:	ee30 8b48 	vsub.f64	d8, d0, d8
 8006bb8:	b330      	cbz	r0, 8006c08 <__kernel_rem_pio2+0x1c8>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f9d4 	bl	8006f68 <scalbn>
 8006bc0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006bc4:	e020      	b.n	8006c08 <__kernel_rem_pio2+0x1c8>
 8006bc6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006bca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006bce:	3801      	subs	r0, #1
 8006bd0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006bd4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006bd8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006bdc:	eca6 0a01 	vstmia	r6!, {s0}
 8006be0:	ed92 0b00 	vldr	d0, [r2]
 8006be4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006be8:	e7a0      	b.n	8006b2c <__kernel_rem_pio2+0xec>
 8006bea:	d105      	bne.n	8006bf8 <__kernel_rem_pio2+0x1b8>
 8006bec:	1e6a      	subs	r2, r5, #1
 8006bee:	ab06      	add	r3, sp, #24
 8006bf0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8006bf4:	15f6      	asrs	r6, r6, #23
 8006bf6:	e7c7      	b.n	8006b88 <__kernel_rem_pio2+0x148>
 8006bf8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006bfc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	da34      	bge.n	8006c70 <__kernel_rem_pio2+0x230>
 8006c06:	2600      	movs	r6, #0
 8006c08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c10:	f040 80aa 	bne.w	8006d68 <__kernel_rem_pio2+0x328>
 8006c14:	f105 3bff 	add.w	fp, r5, #4294967295
 8006c18:	4658      	mov	r0, fp
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4548      	cmp	r0, r9
 8006c1e:	da50      	bge.n	8006cc2 <__kernel_rem_pio2+0x282>
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	d06b      	beq.n	8006cfc <__kernel_rem_pio2+0x2bc>
 8006c24:	ab06      	add	r3, sp, #24
 8006c26:	3c18      	subs	r4, #24
 8006c28:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8087 	beq.w	8006d40 <__kernel_rem_pio2+0x300>
 8006c32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f996 	bl	8006f68 <scalbn>
 8006c3c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8006d50 <__kernel_rem_pio2+0x310>
 8006c40:	f10b 0201 	add.w	r2, fp, #1
 8006c44:	a96a      	add	r1, sp, #424	; 0x1a8
 8006c46:	00d3      	lsls	r3, r2, #3
 8006c48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006c4c:	465a      	mov	r2, fp
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	f280 80b8 	bge.w	8006dc4 <__kernel_rem_pio2+0x384>
 8006c54:	465a      	mov	r2, fp
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	f2c0 80d6 	blt.w	8006e08 <__kernel_rem_pio2+0x3c8>
 8006c5c:	a96a      	add	r1, sp, #424	; 0x1a8
 8006c5e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8006c62:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8006d48 <__kernel_rem_pio2+0x308>
 8006c66:	4d3f      	ldr	r5, [pc, #252]	; (8006d64 <__kernel_rem_pio2+0x324>)
 8006c68:	2000      	movs	r0, #0
 8006c6a:	ebab 0102 	sub.w	r1, fp, r2
 8006c6e:	e0c0      	b.n	8006df2 <__kernel_rem_pio2+0x3b2>
 8006c70:	2602      	movs	r6, #2
 8006c72:	e78b      	b.n	8006b8c <__kernel_rem_pio2+0x14c>
 8006c74:	f8db 2000 	ldr.w	r2, [fp]
 8006c78:	b958      	cbnz	r0, 8006c92 <__kernel_rem_pio2+0x252>
 8006c7a:	b122      	cbz	r2, 8006c86 <__kernel_rem_pio2+0x246>
 8006c7c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006c80:	f8cb 2000 	str.w	r2, [fp]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f10c 0c01 	add.w	ip, ip, #1
 8006c8a:	f10b 0b04 	add.w	fp, fp, #4
 8006c8e:	4610      	mov	r0, r2
 8006c90:	e783      	b.n	8006b9a <__kernel_rem_pio2+0x15a>
 8006c92:	ebae 0202 	sub.w	r2, lr, r2
 8006c96:	f8cb 2000 	str.w	r2, [fp]
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	e7f3      	b.n	8006c86 <__kernel_rem_pio2+0x246>
 8006c9e:	f105 3cff 	add.w	ip, r5, #4294967295
 8006ca2:	ab06      	add	r3, sp, #24
 8006ca4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006ca8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006cac:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8006cb0:	e77c      	b.n	8006bac <__kernel_rem_pio2+0x16c>
 8006cb2:	f105 3cff 	add.w	ip, r5, #4294967295
 8006cb6:	ab06      	add	r3, sp, #24
 8006cb8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006cbc:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8006cc0:	e7f4      	b.n	8006cac <__kernel_rem_pio2+0x26c>
 8006cc2:	ab06      	add	r3, sp, #24
 8006cc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006cc8:	3801      	subs	r0, #1
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	e7a6      	b.n	8006c1c <__kernel_rem_pio2+0x1dc>
 8006cce:	3201      	adds	r2, #1
 8006cd0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006cd4:	2e00      	cmp	r6, #0
 8006cd6:	d0fa      	beq.n	8006cce <__kernel_rem_pio2+0x28e>
 8006cd8:	9b05      	ldr	r3, [sp, #20]
 8006cda:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006cde:	eb0d 0003 	add.w	r0, sp, r3
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	18ee      	adds	r6, r5, r3
 8006ce6:	ab1a      	add	r3, sp, #104	; 0x68
 8006ce8:	f105 0c01 	add.w	ip, r5, #1
 8006cec:	3898      	subs	r0, #152	; 0x98
 8006cee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006cf2:	442a      	add	r2, r5
 8006cf4:	4562      	cmp	r2, ip
 8006cf6:	da04      	bge.n	8006d02 <__kernel_rem_pio2+0x2c2>
 8006cf8:	4615      	mov	r5, r2
 8006cfa:	e709      	b.n	8006b10 <__kernel_rem_pio2+0xd0>
 8006cfc:	9804      	ldr	r0, [sp, #16]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	e7e6      	b.n	8006cd0 <__kernel_rem_pio2+0x290>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006d08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d16:	2500      	movs	r5, #0
 8006d18:	eca6 7b02 	vstmia	r6!, {d7}
 8006d1c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8006d48 <__kernel_rem_pio2+0x308>
 8006d20:	46b0      	mov	r8, r6
 8006d22:	4555      	cmp	r5, sl
 8006d24:	dd04      	ble.n	8006d30 <__kernel_rem_pio2+0x2f0>
 8006d26:	eca0 7b02 	vstmia	r0!, {d7}
 8006d2a:	f10c 0c01 	add.w	ip, ip, #1
 8006d2e:	e7e1      	b.n	8006cf4 <__kernel_rem_pio2+0x2b4>
 8006d30:	ecbe 5b02 	vldmia	lr!, {d5}
 8006d34:	ed38 6b02 	vldmdb	r8!, {d6}
 8006d38:	3501      	adds	r5, #1
 8006d3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006d3e:	e7f0      	b.n	8006d22 <__kernel_rem_pio2+0x2e2>
 8006d40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d44:	e76e      	b.n	8006c24 <__kernel_rem_pio2+0x1e4>
 8006d46:	bf00      	nop
	...
 8006d54:	3e700000 	.word	0x3e700000
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	41700000 	.word	0x41700000
 8006d60:	08007350 	.word	0x08007350
 8006d64:	08007310 	.word	0x08007310
 8006d68:	4260      	negs	r0, r4
 8006d6a:	eeb0 0b48 	vmov.f64	d0, d8
 8006d6e:	f000 f8fb 	bl	8006f68 <scalbn>
 8006d72:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006f50 <__kernel_rem_pio2+0x510>
 8006d76:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7e:	db18      	blt.n	8006db2 <__kernel_rem_pio2+0x372>
 8006d80:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006f58 <__kernel_rem_pio2+0x518>
 8006d84:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006d88:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006d8c:	aa06      	add	r2, sp, #24
 8006d8e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006d92:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006d96:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006d9a:	f105 0b01 	add.w	fp, r5, #1
 8006d9e:	ee10 3a10 	vmov	r3, s0
 8006da2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006da6:	ee17 3a10 	vmov	r3, s14
 8006daa:	3418      	adds	r4, #24
 8006dac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8006db0:	e73f      	b.n	8006c32 <__kernel_rem_pio2+0x1f2>
 8006db2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006db6:	aa06      	add	r2, sp, #24
 8006db8:	ee10 3a10 	vmov	r3, s0
 8006dbc:	46ab      	mov	fp, r5
 8006dbe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006dc2:	e736      	b.n	8006c32 <__kernel_rem_pio2+0x1f2>
 8006dc4:	a806      	add	r0, sp, #24
 8006dc6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	ee07 0a90 	vmov	s15, r0
 8006dd0:	3a01      	subs	r2, #1
 8006dd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dd6:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006dda:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006dde:	ed21 7b02 	vstmdb	r1!, {d7}
 8006de2:	e734      	b.n	8006c4e <__kernel_rem_pio2+0x20e>
 8006de4:	ecb5 5b02 	vldmia	r5!, {d5}
 8006de8:	ecb4 6b02 	vldmia	r4!, {d6}
 8006dec:	3001      	adds	r0, #1
 8006dee:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006df2:	4548      	cmp	r0, r9
 8006df4:	dc01      	bgt.n	8006dfa <__kernel_rem_pio2+0x3ba>
 8006df6:	4288      	cmp	r0, r1
 8006df8:	ddf4      	ble.n	8006de4 <__kernel_rem_pio2+0x3a4>
 8006dfa:	a842      	add	r0, sp, #264	; 0x108
 8006dfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8006e00:	ed81 7b00 	vstr	d7, [r1]
 8006e04:	3a01      	subs	r2, #1
 8006e06:	e726      	b.n	8006c56 <__kernel_rem_pio2+0x216>
 8006e08:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006e0a:	2a02      	cmp	r2, #2
 8006e0c:	dc0a      	bgt.n	8006e24 <__kernel_rem_pio2+0x3e4>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	dc2e      	bgt.n	8006e70 <__kernel_rem_pio2+0x430>
 8006e12:	d047      	beq.n	8006ea4 <__kernel_rem_pio2+0x464>
 8006e14:	f008 0007 	and.w	r0, r8, #7
 8006e18:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006e1c:	ecbd 8b06 	vpop	{d8-d10}
 8006e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006e26:	2a03      	cmp	r2, #3
 8006e28:	d1f4      	bne.n	8006e14 <__kernel_rem_pio2+0x3d4>
 8006e2a:	a942      	add	r1, sp, #264	; 0x108
 8006e2c:	f1a3 0208 	sub.w	r2, r3, #8
 8006e30:	440a      	add	r2, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	4658      	mov	r0, fp
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f1a1 0108 	sub.w	r1, r1, #8
 8006e3c:	dc55      	bgt.n	8006eea <__kernel_rem_pio2+0x4aa>
 8006e3e:	4659      	mov	r1, fp
 8006e40:	2901      	cmp	r1, #1
 8006e42:	f1a2 0208 	sub.w	r2, r2, #8
 8006e46:	dc60      	bgt.n	8006f0a <__kernel_rem_pio2+0x4ca>
 8006e48:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8006f60 <__kernel_rem_pio2+0x520>
 8006e4c:	aa42      	add	r2, sp, #264	; 0x108
 8006e4e:	4413      	add	r3, r2
 8006e50:	f1bb 0f01 	cmp.w	fp, #1
 8006e54:	dc69      	bgt.n	8006f2a <__kernel_rem_pio2+0x4ea>
 8006e56:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006e5a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d16a      	bne.n	8006f38 <__kernel_rem_pio2+0x4f8>
 8006e62:	ed87 5b00 	vstr	d5, [r7]
 8006e66:	ed87 6b02 	vstr	d6, [r7, #8]
 8006e6a:	ed87 7b04 	vstr	d7, [r7, #16]
 8006e6e:	e7d1      	b.n	8006e14 <__kernel_rem_pio2+0x3d4>
 8006e70:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8006f60 <__kernel_rem_pio2+0x520>
 8006e74:	aa42      	add	r2, sp, #264	; 0x108
 8006e76:	4413      	add	r3, r2
 8006e78:	465a      	mov	r2, fp
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	da26      	bge.n	8006ecc <__kernel_rem_pio2+0x48c>
 8006e7e:	b35e      	cbz	r6, 8006ed8 <__kernel_rem_pio2+0x498>
 8006e80:	eeb1 7b46 	vneg.f64	d7, d6
 8006e84:	ed87 7b00 	vstr	d7, [r7]
 8006e88:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006e8c:	aa44      	add	r2, sp, #272	; 0x110
 8006e8e:	2301      	movs	r3, #1
 8006e90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e94:	459b      	cmp	fp, r3
 8006e96:	da22      	bge.n	8006ede <__kernel_rem_pio2+0x49e>
 8006e98:	b10e      	cbz	r6, 8006e9e <__kernel_rem_pio2+0x45e>
 8006e9a:	eeb1 7b47 	vneg.f64	d7, d7
 8006e9e:	ed87 7b02 	vstr	d7, [r7, #8]
 8006ea2:	e7b7      	b.n	8006e14 <__kernel_rem_pio2+0x3d4>
 8006ea4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006f60 <__kernel_rem_pio2+0x520>
 8006ea8:	aa42      	add	r2, sp, #264	; 0x108
 8006eaa:	4413      	add	r3, r2
 8006eac:	f1bb 0f00 	cmp.w	fp, #0
 8006eb0:	da05      	bge.n	8006ebe <__kernel_rem_pio2+0x47e>
 8006eb2:	b10e      	cbz	r6, 8006eb8 <__kernel_rem_pio2+0x478>
 8006eb4:	eeb1 7b47 	vneg.f64	d7, d7
 8006eb8:	ed87 7b00 	vstr	d7, [r7]
 8006ebc:	e7aa      	b.n	8006e14 <__kernel_rem_pio2+0x3d4>
 8006ebe:	ed33 6b02 	vldmdb	r3!, {d6}
 8006ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ec6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eca:	e7ef      	b.n	8006eac <__kernel_rem_pio2+0x46c>
 8006ecc:	ed33 7b02 	vldmdb	r3!, {d7}
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ed6:	e7d0      	b.n	8006e7a <__kernel_rem_pio2+0x43a>
 8006ed8:	eeb0 7b46 	vmov.f64	d7, d6
 8006edc:	e7d2      	b.n	8006e84 <__kernel_rem_pio2+0x444>
 8006ede:	ecb2 6b02 	vldmia	r2!, {d6}
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ee8:	e7d4      	b.n	8006e94 <__kernel_rem_pio2+0x454>
 8006eea:	ed91 7b00 	vldr	d7, [r1]
 8006eee:	ed91 5b02 	vldr	d5, [r1, #8]
 8006ef2:	3801      	subs	r0, #1
 8006ef4:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006ef8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006efc:	ed81 6b00 	vstr	d6, [r1]
 8006f00:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006f04:	ed81 7b02 	vstr	d7, [r1, #8]
 8006f08:	e795      	b.n	8006e36 <__kernel_rem_pio2+0x3f6>
 8006f0a:	ed92 7b00 	vldr	d7, [r2]
 8006f0e:	ed92 5b02 	vldr	d5, [r2, #8]
 8006f12:	3901      	subs	r1, #1
 8006f14:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f1c:	ed82 6b00 	vstr	d6, [r2]
 8006f20:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006f24:	ed82 7b02 	vstr	d7, [r2, #8]
 8006f28:	e78a      	b.n	8006e40 <__kernel_rem_pio2+0x400>
 8006f2a:	ed33 6b02 	vldmdb	r3!, {d6}
 8006f2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f36:	e78b      	b.n	8006e50 <__kernel_rem_pio2+0x410>
 8006f38:	eeb1 5b45 	vneg.f64	d5, d5
 8006f3c:	eeb1 6b46 	vneg.f64	d6, d6
 8006f40:	ed87 5b00 	vstr	d5, [r7]
 8006f44:	eeb1 7b47 	vneg.f64	d7, d7
 8006f48:	ed87 6b02 	vstr	d6, [r7, #8]
 8006f4c:	e78d      	b.n	8006e6a <__kernel_rem_pio2+0x42a>
 8006f4e:	bf00      	nop
 8006f50:	00000000 	.word	0x00000000
 8006f54:	41700000 	.word	0x41700000
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	3e700000 	.word	0x3e700000
	...

08006f68 <scalbn>:
 8006f68:	ee10 1a90 	vmov	r1, s1
 8006f6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f70:	b98b      	cbnz	r3, 8006f96 <scalbn+0x2e>
 8006f72:	ee10 3a10 	vmov	r3, s0
 8006f76:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f7a:	4319      	orrs	r1, r3
 8006f7c:	d00a      	beq.n	8006f94 <scalbn+0x2c>
 8006f7e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8007030 <scalbn+0xc8>
 8006f82:	4b37      	ldr	r3, [pc, #220]	; (8007060 <scalbn+0xf8>)
 8006f84:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006f88:	4298      	cmp	r0, r3
 8006f8a:	da0b      	bge.n	8006fa4 <scalbn+0x3c>
 8006f8c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007038 <scalbn+0xd0>
 8006f90:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006f94:	4770      	bx	lr
 8006f96:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d107      	bne.n	8006fae <scalbn+0x46>
 8006f9e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006fa2:	4770      	bx	lr
 8006fa4:	ee10 1a90 	vmov	r1, s1
 8006fa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fac:	3b36      	subs	r3, #54	; 0x36
 8006fae:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006fb2:	4290      	cmp	r0, r2
 8006fb4:	dd0d      	ble.n	8006fd2 <scalbn+0x6a>
 8006fb6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007040 <scalbn+0xd8>
 8006fba:	ee10 3a90 	vmov	r3, s1
 8006fbe:	eeb0 6b47 	vmov.f64	d6, d7
 8006fc2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8007048 <scalbn+0xe0>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8006fcc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8006fd0:	4770      	bx	lr
 8006fd2:	4418      	add	r0, r3
 8006fd4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	dcec      	bgt.n	8006fb6 <scalbn+0x4e>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	dd0a      	ble.n	8006ff6 <scalbn+0x8e>
 8006fe0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006fe4:	ec53 2b10 	vmov	r2, r3, d0
 8006fe8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006fec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8006ff0:	ec43 2b10 	vmov	d0, r2, r3
 8006ff4:	4770      	bx	lr
 8006ff6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8006ffa:	da09      	bge.n	8007010 <scalbn+0xa8>
 8006ffc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007038 <scalbn+0xd0>
 8007000:	ee10 3a90 	vmov	r3, s1
 8007004:	eeb0 6b47 	vmov.f64	d6, d7
 8007008:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8007050 <scalbn+0xe8>
 800700c:	2b00      	cmp	r3, #0
 800700e:	e7db      	b.n	8006fc8 <scalbn+0x60>
 8007010:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8007014:	ec53 2b10 	vmov	r2, r3, d0
 8007018:	3036      	adds	r0, #54	; 0x36
 800701a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800701e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007022:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8007058 <scalbn+0xf0>
 8007026:	ec43 2b10 	vmov	d0, r2, r3
 800702a:	e7b1      	b.n	8006f90 <scalbn+0x28>
 800702c:	f3af 8000 	nop.w
 8007030:	00000000 	.word	0x00000000
 8007034:	43500000 	.word	0x43500000
 8007038:	c2f8f359 	.word	0xc2f8f359
 800703c:	01a56e1f 	.word	0x01a56e1f
 8007040:	8800759c 	.word	0x8800759c
 8007044:	7e37e43c 	.word	0x7e37e43c
 8007048:	8800759c 	.word	0x8800759c
 800704c:	fe37e43c 	.word	0xfe37e43c
 8007050:	c2f8f359 	.word	0xc2f8f359
 8007054:	81a56e1f 	.word	0x81a56e1f
 8007058:	00000000 	.word	0x00000000
 800705c:	3c900000 	.word	0x3c900000
 8007060:	ffff3cb0 	.word	0xffff3cb0
 8007064:	00000000 	.word	0x00000000

08007068 <floor>:
 8007068:	ee10 1a90 	vmov	r1, s1
 800706c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007070:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007074:	2b13      	cmp	r3, #19
 8007076:	b530      	push	{r4, r5, lr}
 8007078:	ee10 0a10 	vmov	r0, s0
 800707c:	ee10 5a10 	vmov	r5, s0
 8007080:	dc31      	bgt.n	80070e6 <floor+0x7e>
 8007082:	2b00      	cmp	r3, #0
 8007084:	da15      	bge.n	80070b2 <floor+0x4a>
 8007086:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007148 <floor+0xe0>
 800708a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800708e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007096:	dd07      	ble.n	80070a8 <floor+0x40>
 8007098:	2900      	cmp	r1, #0
 800709a:	da4e      	bge.n	800713a <floor+0xd2>
 800709c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070a0:	4308      	orrs	r0, r1
 80070a2:	d04d      	beq.n	8007140 <floor+0xd8>
 80070a4:	492a      	ldr	r1, [pc, #168]	; (8007150 <floor+0xe8>)
 80070a6:	2000      	movs	r0, #0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4602      	mov	r2, r0
 80070ac:	ec43 2b10 	vmov	d0, r2, r3
 80070b0:	e020      	b.n	80070f4 <floor+0x8c>
 80070b2:	4a28      	ldr	r2, [pc, #160]	; (8007154 <floor+0xec>)
 80070b4:	411a      	asrs	r2, r3
 80070b6:	ea01 0402 	and.w	r4, r1, r2
 80070ba:	4304      	orrs	r4, r0
 80070bc:	d01a      	beq.n	80070f4 <floor+0x8c>
 80070be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007148 <floor+0xe0>
 80070c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80070c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	ddeb      	ble.n	80070a8 <floor+0x40>
 80070d0:	2900      	cmp	r1, #0
 80070d2:	bfbe      	ittt	lt
 80070d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80070d8:	fa40 f303 	asrlt.w	r3, r0, r3
 80070dc:	18c9      	addlt	r1, r1, r3
 80070de:	ea21 0102 	bic.w	r1, r1, r2
 80070e2:	2000      	movs	r0, #0
 80070e4:	e7e0      	b.n	80070a8 <floor+0x40>
 80070e6:	2b33      	cmp	r3, #51	; 0x33
 80070e8:	dd05      	ble.n	80070f6 <floor+0x8e>
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ee:	d101      	bne.n	80070f4 <floor+0x8c>
 80070f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80070f4:	bd30      	pop	{r4, r5, pc}
 80070f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	40e2      	lsrs	r2, r4
 8007100:	4210      	tst	r0, r2
 8007102:	d0f7      	beq.n	80070f4 <floor+0x8c>
 8007104:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007148 <floor+0xe0>
 8007108:	ee30 0b07 	vadd.f64	d0, d0, d7
 800710c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007114:	ddc8      	ble.n	80070a8 <floor+0x40>
 8007116:	2900      	cmp	r1, #0
 8007118:	da02      	bge.n	8007120 <floor+0xb8>
 800711a:	2b14      	cmp	r3, #20
 800711c:	d103      	bne.n	8007126 <floor+0xbe>
 800711e:	3101      	adds	r1, #1
 8007120:	ea20 0002 	bic.w	r0, r0, r2
 8007124:	e7c0      	b.n	80070a8 <floor+0x40>
 8007126:	2401      	movs	r4, #1
 8007128:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800712c:	fa04 f303 	lsl.w	r3, r4, r3
 8007130:	4418      	add	r0, r3
 8007132:	4285      	cmp	r5, r0
 8007134:	bf88      	it	hi
 8007136:	1909      	addhi	r1, r1, r4
 8007138:	e7f2      	b.n	8007120 <floor+0xb8>
 800713a:	2000      	movs	r0, #0
 800713c:	4601      	mov	r1, r0
 800713e:	e7b3      	b.n	80070a8 <floor+0x40>
 8007140:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007144:	e7b0      	b.n	80070a8 <floor+0x40>
 8007146:	bf00      	nop
 8007148:	8800759c 	.word	0x8800759c
 800714c:	7e37e43c 	.word	0x7e37e43c
 8007150:	bff00000 	.word	0xbff00000
 8007154:	000fffff 	.word	0x000fffff

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
