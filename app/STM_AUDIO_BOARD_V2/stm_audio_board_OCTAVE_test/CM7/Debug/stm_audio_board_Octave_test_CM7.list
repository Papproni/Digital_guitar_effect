
stm_audio_board_Octave_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006960  08006960  00016960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  000203a4  2**0
                  CONTENTS
  4 .ARM          00000000  08006b50  08006b50  000203a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b50  08006b50  000203a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  24000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b168  240003a4  08006efc  000203a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400b50c  08006efc  0002b50c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000203d2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018401  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2d  00000000  00000000  0003888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006290  00000000  00000000  0003c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b28  00000000  00000000  00042548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cbb  00000000  00000000  00043070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ed1d  00000000  00000000  00043d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016d7b  00000000  00000000  00082a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001961fe  00000000  00000000  000997c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002178  00000000  00000000  0022f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00231b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000017a3  00000000  00000000  00231bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000070  00000000  00000000  00233379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240003a4 	.word	0x240003a4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006948 	.word	0x08006948

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240003a8 	.word	0x240003a8
 80002d4:	08006948 	.word	0x08006948

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCFGR = 0x01FF0000;
 8000338:	481a      	ldr	r0, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800033a:	4c1b      	ldr	r4, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000346:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
  RCC->PLL1DIVR = 0x01010280;
 800034a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800034e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000352:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000354:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800035c:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800035e:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000360:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000364:	4911      	ldr	r1, [pc, #68]	; (80003ac <SystemInit+0xd4>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8000366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <SystemInit+0xd8>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800036c:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000370:	680a      	ldr	r2, [r1, #0]
 8000372:	4013      	ands	r3, r2
 8000374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000378:	d203      	bcs.n	8000382 <SystemInit+0xaa>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <SystemInit+0xdc>)
 800037c:	2201      	movs	r2, #1
 800037e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SystemInit+0xe0>)
 8000384:	f243 02d2 	movw	r2, #12498	; 0x30d2
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000388:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	01ff0000 	.word	0x01ff0000
 80003a8:	02020200 	.word	0x02020200
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008000 	.word	0x51008000
 80003b8:	52004000 	.word	0x52004000

080003bc <ad1939_init>:

	 return 0;
}

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TXdata[2] = data;
 80003c0:	2399      	movs	r3, #153	; 0x99
	TXdata[0] = AD1939_Global_Address_Write;
 80003c2:	4cb9      	ldr	r4, [pc, #740]	; (80006a8 <ad1939_init+0x2ec>)
    AD1939_spi = hspi_codec;
 80003c4:	4db9      	ldr	r5, [pc, #740]	; (80006ac <ad1939_init+0x2f0>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003c6:	f04f 0808 	mov.w	r8, #8
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ca:	b082      	sub	sp, #8
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    AD1939_spi = hspi_codec;
 80003d6:	6028      	str	r0, [r5, #0]
	TXdata[2] = data;
 80003d8:	70a3      	strb	r3, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003da:	48b5      	ldr	r0, [pc, #724]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 80003dc:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80003e0:	f002 fbc6 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003e4:	4ab3      	ldr	r2, [pc, #716]	; (80006b4 <ad1939_init+0x2f8>)
 80003e6:	4621      	mov	r1, r4
 80003e8:	2303      	movs	r3, #3
 80003ea:	6828      	ldr	r0, [r5, #0]
 80003ec:	9600      	str	r6, [sp, #0]
 80003ee:	f004 ffc7 	bl	8005380 <HAL_SPI_TransmitReceive>
 80003f2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	48ad      	ldr	r0, [pc, #692]	; (80006b0 <ad1939_init+0x2f4>)
 80003fc:	f002 fbb8 	bl	8002b70 <HAL_GPIO_WritePin>
    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings

    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 8000400:	2f00      	cmp	r7, #0
 8000402:	f040 814b 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000406:	23be      	movs	r3, #190	; 0xbe
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000408:	463a      	mov	r2, r7
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	48a8      	ldr	r0, [pc, #672]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000410:	70a3      	strb	r3, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000412:	f8a4 8000 	strh.w	r8, [r4]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000416:	f002 fbab 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800041a:	4aa6      	ldr	r2, [pc, #664]	; (80006b4 <ad1939_init+0x2f8>)
 800041c:	4621      	mov	r1, r4
 800041e:	2303      	movs	r3, #3
 8000420:	6828      	ldr	r0, [r5, #0]
 8000422:	9600      	str	r6, [sp, #0]
 8000424:	f004 ffac 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000428:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	489f      	ldr	r0, [pc, #636]	; (80006b0 <ad1939_init+0x2f4>)
 8000432:	f002 fb9d 	bl	8002b70 <HAL_GPIO_WritePin>
// PLL LOCKS for some reason!! not output still
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 8000436:	2f00      	cmp	r7, #0
 8000438:	f040 8130 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800043c:	f44f 7384 	mov.w	r3, #264	; 0x108
	TXdata[2] = data;
 8000440:	f04f 0804 	mov.w	r8, #4
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000444:	463a      	mov	r2, r7
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4899      	ldr	r0, [pc, #612]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 800044c:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800044e:	f884 8002 	strb.w	r8, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000452:	f002 fb8d 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000456:	4a97      	ldr	r2, [pc, #604]	; (80006b4 <ad1939_init+0x2f8>)
 8000458:	4621      	mov	r1, r4
 800045a:	2303      	movs	r3, #3
 800045c:	6828      	ldr	r0, [r5, #0]
 800045e:	9600      	str	r6, [sp, #0]
 8000460:	f004 ff8e 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000464:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4890      	ldr	r0, [pc, #576]	; (80006b0 <ad1939_init+0x2f4>)
 800046e:	f002 fb7f 	bl	8002b70 <HAL_GPIO_WritePin>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2f00      	cmp	r7, #0
 8000474:	f040 8112 	bne.w	800069c <ad1939_init+0x2e0>





    HAL_Delay(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f001 f955 	bl	8001728 <HAL_Delay>
	TXdata[0] = AD1939_Global_Address_Read;
 800047e:	f240 1309 	movw	r3, #265	; 0x109
	HAL_Delay(10);
 8000482:	200a      	movs	r0, #10
	TXdata[2] = 0b00000100;
 8000484:	f884 8002 	strb.w	r8, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Read;
 8000488:	8023      	strh	r3, [r4, #0]
	HAL_Delay(10);
 800048a:	f001 f94d 	bl	8001728 <HAL_Delay>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800048e:	463a      	mov	r2, r7
 8000490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000494:	4886      	ldr	r0, [pc, #536]	; (80006b0 <ad1939_init+0x2f4>)
 8000496:	f002 fb6b 	bl	8002b70 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800049a:	2303      	movs	r3, #3
 800049c:	4a85      	ldr	r2, [pc, #532]	; (80006b4 <ad1939_init+0x2f8>)
 800049e:	4621      	mov	r1, r4
 80004a0:	6828      	ldr	r0, [r5, #0]
 80004a2:	9600      	str	r6, [sp, #0]
 80004a4:	f004 ff6c 	bl	8005380 <HAL_SPI_TransmitReceive>
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4880      	ldr	r0, [pc, #512]	; (80006b0 <ad1939_init+0x2f4>)
 80004b0:	f002 fb5e 	bl	8002b70 <HAL_GPIO_WritePin>
	TXdata[0] = AD1939_Global_Address_Write;
 80004b4:	f44f 7302 	mov.w	r3, #520	; 0x208
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004b8:	463a      	mov	r2, r7
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	487c      	ldr	r0, [pc, #496]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004c0:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004c2:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004c4:	f002 fb54 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004c8:	4a7a      	ldr	r2, [pc, #488]	; (80006b4 <ad1939_init+0x2f8>)
 80004ca:	4621      	mov	r1, r4
 80004cc:	2303      	movs	r3, #3
 80004ce:	6828      	ldr	r0, [r5, #0]
 80004d0:	9600      	str	r6, [sp, #0]
 80004d2:	f004 ff55 	bl	8005380 <HAL_SPI_TransmitReceive>
 80004d6:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4874      	ldr	r0, [pc, #464]	; (80006b0 <ad1939_init+0x2f4>)
 80004e0:	f002 fb46 	bl	8002b70 <HAL_GPIO_WritePin>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000000)) return -1;
 80004e4:	2f00      	cmp	r7, #0
 80004e6:	f040 80d9 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80004ea:	f44f 7342 	mov.w	r3, #776	; 0x308
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004ee:	463a      	mov	r2, r7
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	486e      	ldr	r0, [pc, #440]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80004f6:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80004f8:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80004fa:	f002 fb39 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80004fe:	4a6d      	ldr	r2, [pc, #436]	; (80006b4 <ad1939_init+0x2f8>)
 8000500:	4621      	mov	r1, r4
 8000502:	2303      	movs	r3, #3
 8000504:	6828      	ldr	r0, [r5, #0]
 8000506:	9600      	str	r6, [sp, #0]
 8000508:	f004 ff3a 	bl	8005380 <HAL_SPI_TransmitReceive>
 800050c:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4866      	ldr	r0, [pc, #408]	; (80006b0 <ad1939_init+0x2f4>)
 8000516:	f002 fb2b 	bl	8002b70 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000000)) return -1; // Slave setup
 800051a:	2f00      	cmp	r7, #0
 800051c:	f040 80be 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000520:	f44f 6381 	mov.w	r3, #1032	; 0x408
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000524:	463a      	mov	r2, r7
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4861      	ldr	r0, [pc, #388]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 800052c:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800052e:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000530:	f002 fb1e 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000534:	4a5f      	ldr	r2, [pc, #380]	; (80006b4 <ad1939_init+0x2f8>)
 8000536:	4621      	mov	r1, r4
 8000538:	2303      	movs	r3, #3
 800053a:	6828      	ldr	r0, [r5, #0]
 800053c:	9600      	str	r6, [sp, #0]
 800053e:	f004 ff1f 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000542:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4859      	ldr	r0, [pc, #356]	; (80006b0 <ad1939_init+0x2f4>)
 800054c:	f002 fb10 	bl	8002b70 <HAL_GPIO_WritePin>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000550:	2f00      	cmp	r7, #0
 8000552:	f040 80a3 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 8000556:	f44f 63a1 	mov.w	r3, #1288	; 0x508
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800055a:	463a      	mov	r2, r7
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4853      	ldr	r0, [pc, #332]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000562:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 8000564:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000566:	f002 fb03 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800056a:	4a52      	ldr	r2, [pc, #328]	; (80006b4 <ad1939_init+0x2f8>)
 800056c:	4621      	mov	r1, r4
 800056e:	2303      	movs	r3, #3
 8000570:	6828      	ldr	r0, [r5, #0]
 8000572:	9600      	str	r6, [sp, #0]
 8000574:	f004 ff04 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000578:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	484b      	ldr	r0, [pc, #300]	; (80006b0 <ad1939_init+0x2f4>)
 8000582:	f002 faf5 	bl	8002b70 <HAL_GPIO_WritePin>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000586:	2f00      	cmp	r7, #0
 8000588:	f040 8088 	bne.w	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800058c:	f640 0308 	movw	r3, #2056	; 0x808
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000590:	463a      	mov	r2, r7
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4846      	ldr	r0, [pc, #280]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 8000598:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 800059a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800059c:	f002 fae8 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005a0:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <ad1939_init+0x2f8>)
 80005a2:	4621      	mov	r1, r4
 80005a4:	2303      	movs	r3, #3
 80005a6:	6828      	ldr	r0, [r5, #0]
 80005a8:	9600      	str	r6, [sp, #0]
 80005aa:	f004 fee9 	bl	8005380 <HAL_SPI_TransmitReceive>
 80005ae:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	483e      	ldr	r0, [pc, #248]	; (80006b0 <ad1939_init+0x2f4>)
 80005b8:	f002 fada 	bl	8002b70 <HAL_GPIO_WritePin>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d16d      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005c0:	f640 1308 	movw	r3, #2312	; 0x908
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005c4:	463a      	mov	r2, r7
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4839      	ldr	r0, [pc, #228]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[2] = data;
 80005cc:	70a7      	strb	r7, [r4, #2]
	TXdata[0] = AD1939_Global_Address_Write;
 80005ce:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005d0:	f002 face 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <ad1939_init+0x2f8>)
 80005d6:	4621      	mov	r1, r4
 80005d8:	2303      	movs	r3, #3
 80005da:	6828      	ldr	r0, [r5, #0]
 80005dc:	9600      	str	r6, [sp, #0]
 80005de:	f004 fecf 	bl	8005380 <HAL_SPI_TransmitReceive>
 80005e2:	4607      	mov	r7, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4831      	ldr	r0, [pc, #196]	; (80006b0 <ad1939_init+0x2f4>)
 80005ec:	f002 fac0 	bl	8002b70 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d153      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 80005f4:	f640 6308 	movw	r3, #3592	; 0xe08
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 80005f8:	463a      	mov	r2, r7
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000600:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 8000602:	70a7      	strb	r7, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000604:	f002 fab4 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000608:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <ad1939_init+0x2f8>)
 800060a:	4621      	mov	r1, r4
 800060c:	9600      	str	r6, [sp, #0]
 800060e:	2303      	movs	r3, #3
 8000610:	6828      	ldr	r0, [r5, #0]
 8000612:	f004 feb5 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000616:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4824      	ldr	r0, [pc, #144]	; (80006b0 <ad1939_init+0x2f4>)
 8000620:	f002 faa6 	bl	8002b70 <HAL_GPIO_WritePin>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000624:	2e00      	cmp	r6, #0
 8000626:	d139      	bne.n	800069c <ad1939_init+0x2e0>
	TXdata[2] = data;
 8000628:	2200      	movs	r2, #0
	TXdata[0] = AD1939_Global_Address_Write;
 800062a:	f640 7308 	movw	r3, #3848	; 0xf08
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 800062e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <ad1939_init+0x2f4>)
	TXdata[0] = AD1939_Global_Address_Write;
 8000638:	8023      	strh	r3, [r4, #0]
	TXdata[2] = data;
 800063a:	70a2      	strb	r2, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800063c:	f002 fa98 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <ad1939_init+0x2f8>)
 8000642:	4919      	ldr	r1, [pc, #100]	; (80006a8 <ad1939_init+0x2ec>)
 8000644:	2303      	movs	r3, #3
 8000646:	6828      	ldr	r0, [r5, #0]
 8000648:	9700      	str	r7, [sp, #0]
 800064a:	f004 fe99 	bl	8005380 <HAL_SPI_TransmitReceive>
 800064e:	4606      	mov	r6, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <ad1939_init+0x2f4>)
 8000658:	f002 fa8a 	bl	8002b70 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0x00 )) return -1;
 800065c:	b9f6      	cbnz	r6, 800069c <ad1939_init+0x2e0>
	TXdata[0] = AD1939_Global_Address_Write;
 800065e:	f241 0308 	movw	r3, #4104	; 0x1008
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000662:	4632      	mov	r2, r6
	TXdata[2] = data;
 8000664:	70a6      	strb	r6, [r4, #2]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	TXdata[0] = AD1939_Global_Address_Write;
 800066a:	8023      	strh	r3, [r4, #0]
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <ad1939_init+0x2f4>)
 800066e:	f002 fa7f 	bl	8002b70 <HAL_GPIO_WritePin>
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000672:	2303      	movs	r3, #3
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <ad1939_init+0x2f8>)
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <ad1939_init+0x2ec>)
 8000678:	6828      	ldr	r0, [r5, #0]
 800067a:	9700      	str	r7, [sp, #0]
 800067c:	f004 fe80 	bl	8005380 <HAL_SPI_TransmitReceive>
 8000680:	4604      	mov	r4, r0
	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <ad1939_init+0x2f4>)
 800068a:	f002 fa71 	bl	8002b70 <HAL_GPIO_WritePin>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800068e:	1e20      	subs	r0, r4, #0
 8000690:	bf18      	it	ne
 8000692:	2001      	movne	r0, #1
 8000694:	4240      	negs	r0, r0



    return 0; // Return 0 if all writes are successful
}
 8000696:	b002      	add	sp, #8
 8000698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10011001)) return -1;
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006a0:	b002      	add	sp, #8
 80006a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a6:	bf00      	nop
 80006a8:	240003c8 	.word	0x240003c8
 80006ac:	240003c0 	.word	0x240003c0
 80006b0:	58021400 	.word	0x58021400
 80006b4:	240003c4 	.word	0x240003c4

080006b8 <callback>:
 * FUNC:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 80006b8:	b570      	push	{r4, r5, r6, lr}
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006ba:	f500 25ba 	add.w	r5, r0, #380928	; 0x5d000
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 80006be:	4c44      	ldr	r4, [pc, #272]	; (80007d0 <callback+0x118>)

	self->input_i32 = input_signal_i32;
 80006c0:	6001      	str	r1, [r0, #0]
	// delay effect
	int32_t delayed_sample_i32 = get_delayed_signal(self);

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006c2:	ee07 1a90 	vmov	s15, r1
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006c6:	f8d5 2c08 	ldr.w	r2, [r5, #3080]	; 0xc08
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006ca:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006ce:	f8d5 3c18 	ldr.w	r3, [r5, #3096]	; 0xc18
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006d2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80006d6:	1c91      	adds	r1, r2, #2
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 80006d8:	4413      	add	r3, r2
	self->current_counter_u32++;
 80006da:	3201      	adds	r2, #1
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 80006dc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 80006e0:	42a3      	cmp	r3, r4
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 80006e2:	bf88      	it	hi
 80006e4:	1b1b      	subhi	r3, r3, r4

	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 80006e6:	f605 442c 	addw	r4, r5, #3116	; 0xc2c
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 80006ea:	f8c5 3c0c 	str.w	r3, [r5, #3084]	; 0xc0c
	return self->buffer_ai32[self->delayed_counter_u32];
 80006ee:	3302      	adds	r3, #2
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 80006f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80006f4:	ed93 7a00 	vldr	s14, [r3]
 80006f8:	f605 4334 	addw	r3, r5, #3124	; 0xc34
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000704:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000708:	ee67 4a27 	vmul.f32	s9, s14, s15
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 800070c:	ee33 6b46 	vsub.f64	d6, d3, d6
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000710:	eefd 4ae4 	vcvt.s32.f32	s9, s9
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000714:	ee26 6b05 	vmul.f64	d6, d6, d5
 8000718:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 800071c:	ee17 3a90 	vmov	r3, s15
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000720:	edd4 7a00 	vldr	s15, [r4]
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000724:	ee14 4a90 	vmov	r4, s9
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000728:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800072c:	ee27 7a27 	vmul.f32	s14, s14, s15
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000730:	4423      	add	r3, r4
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000732:	ee33 3b46 	vsub.f64	d3, d3, d6
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000736:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 800073a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <callback+0x118>)
		self->current_counter_u32 = 0;
 8000740:	429a      	cmp	r2, r3
 8000742:	bf88      	it	hi
 8000744:	2200      	movhi	r2, #0
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000746:	eea5 7b03 	vfma.f64	d7, d5, d3
 800074a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800074e:	edc0 7a01 	vstr	s15, [r0, #4]
 8000752:	ee17 4a90 	vmov	r4, s15

	increment_current_sample_counter(self);

	// modulation
	if( self->modulation_on_u8 ){
 8000756:	f895 3c10 	ldrb.w	r3, [r5, #3088]	; 0xc10
 800075a:	f8c5 2c08 	str.w	r2, [r5, #3080]	; 0xc08
 800075e:	b373      	cbz	r3, 80007be <callback+0x106>
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 8000760:	f8d5 6c20 	ldr.w	r6, [r5, #3104]	; 0xc20
 8000764:	f8d5 3c1c 	ldr.w	r3, [r5, #3100]	; 0xc1c
 8000768:	ee07 6a10 	vmov	s14, r6
		self->parameters_st.modulation_counter_u32++;
 800076c:	3601      	adds	r6, #1
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8000776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800077a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80007c8 <callback+0x110>
 800077e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000782:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000786:	ee27 0b00 	vmul.f64	d0, d7, d0
 800078a:	f005 faf1 	bl	8005d70 <sin>
 800078e:	f8d5 2c28 	ldr.w	r2, [r5, #3112]	; 0xc28
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <callback+0x11c>)
		self->parameters_st.modulation_counter_u32++;
 8000794:	f8c5 6c20 	str.w	r6, [r5, #3104]	; 0xc20
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	f8d5 3c24 	ldr.w	r3, [r5, #3108]	; 0xc24
 80007a2:	ee06 3a90 	vmov	s13, r3
 80007a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007aa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80007ae:	eea6 7b00 	vfma.f64	d7, d6, d0
 80007b2:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80007b6:	ee17 3a10 	vmov	r3, s14
 80007ba:	f8c5 3c18 	str.w	r3, [r5, #3096]	; 0xc18
	}

	return self->output_i32;
}
 80007be:	4620      	mov	r0, r4
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	51eb851f 	.word	0x51eb851f
 80007cc:	40191eb8 	.word	0x40191eb8
 80007d0:	000176ff 	.word	0x000176ff
 80007d4:	00017700 	.word	0x00017700

080007d8 <init_guitar_effect_delay>:
 * FUNC:
 * 		init_guitar_effect_delay()
 * DESC:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){
 80007d8:	b538      	push	{r3, r4, r5, lr}

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH - DELAY_BUFFER_LENGTH / 16;	// 12ms delay
	self->modulation_on_u8 							= 0;
	self->parameters_st.modulation_counter_u32 		= 0;
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 80007da:	f246 12a8 	movw	r2, #25000	; 0x61a8
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH - DELAY_BUFFER_LENGTH / 16;	// 12ms delay
 80007de:	f500 24ba 	add.w	r4, r0, #380928	; 0x5d000
	self->parameters_st.modulation_amplitude_i32	= 20;
	self->parameters_st.modulation_base_u32			= 50;
	self->parameters_st.mix_f32						= 0.5; 		// 50%
 80007e2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	self->modulation_on_u8 							= 0;
 80007e6:	2100      	movs	r1, #0
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 80007e8:	f8c4 2c1c 	str.w	r2, [r4, #3100]	; 0xc1c
	self->parameters_st.modulation_amplitude_i32	= 20;
 80007ec:	2214      	movs	r2, #20
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH - DELAY_BUFFER_LENGTH / 16;	// 12ms delay
 80007ee:	4d0e      	ldr	r5, [pc, #56]	; (8000828 <init_guitar_effect_delay+0x50>)


	self->current_counter_u32 = 0;

	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
		self->buffer_ai32[i] = 0;
 80007f0:	3008      	adds	r0, #8
	self->parameters_st.modulation_amplitude_i32	= 20;
 80007f2:	f8c4 2c24 	str.w	r2, [r4, #3108]	; 0xc24
	self->parameters_st.modulation_base_u32			= 50;
 80007f6:	2232      	movs	r2, #50	; 0x32
	self->parameters_st.time_in_buffer_u32 			= DELAY_BUFFER_LENGTH - DELAY_BUFFER_LENGTH / 16;	// 12ms delay
 80007f8:	f8c4 5c18 	str.w	r5, [r4, #3096]	; 0xc18
	self->parameters_st.modulation_base_u32			= 50;
 80007fc:	f8c4 2c28 	str.w	r2, [r4, #3112]	; 0xc28
	self->parameters_st.mix_f32						= 0.5; 		// 50%
 8000800:	f604 422c 	addw	r2, r4, #3116	; 0xc2c
	self->modulation_on_u8 							= 0;
 8000804:	f884 1c10 	strb.w	r1, [r4, #3088]	; 0xc10
	self->parameters_st.modulation_counter_u32 		= 0;
 8000808:	f8c4 1c20 	str.w	r1, [r4, #3104]	; 0xc20
	self->parameters_st.mix_f32						= 0.5; 		// 50%
 800080c:	6013      	str	r3, [r2, #0]
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 800080e:	f604 4234 	addw	r2, r4, #3124	; 0xc34
 8000812:	6013      	str	r3, [r2, #0]
		self->buffer_ai32[i] = 0;
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <init_guitar_effect_delay+0x54>)
	self->current_counter_u32 = 0;
 8000816:	f8c4 1c08 	str.w	r1, [r4, #3080]	; 0xc08
		self->buffer_ai32[i] = 0;
 800081a:	f005 fa7b 	bl	8005d14 <memset>
	}
	// add function pointers
	self->callback = callback;
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <init_guitar_effect_delay+0x58>)
 8000820:	f8c4 3c38 	str.w	r3, [r4, #3128]	; 0xc38
}
 8000824:	bd38      	pop	{r3, r4, r5, pc}
 8000826:	bf00      	nop
 8000828:	00015f90 	.word	0x00015f90
 800082c:	0005dc00 	.word	0x0005dc00
 8000830:	080006b9 	.word	0x080006b9

08000834 <Do_PitchShift>:
	int sum = sample;
	//sum up and do high-pass


	//write to ringbuffer
	Buf[WtrP] = sum;
 8000834:	4952      	ldr	r1, [pc, #328]	; (8000980 <Do_PitchShift+0x14c>)
 8000836:	4a53      	ldr	r2, [pc, #332]	; (8000984 <Do_PitchShift+0x150>)
 8000838:	680b      	ldr	r3, [r1, #0]
int Do_PitchShift(int sample) {
 800083a:	b4f0      	push	{r4, r5, r6, r7}

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 800083c:	4c52      	ldr	r4, [pc, #328]	; (8000988 <Do_PitchShift+0x154>)
	int RdPtr_Int2 = 0;
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 800083e:	4d53      	ldr	r5, [pc, #332]	; (800098c <Do_PitchShift+0x158>)
	Buf[WtrP] = sum;
 8000840:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	int RdPtr_Int = roundf(Rd_P);
 8000844:	edd4 7a00 	vldr	s15, [r4]
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000848:	6828      	ldr	r0, [r5, #0]
	int RdPtr_Int = roundf(Rd_P);
 800084a:	fef8 7a67 	vrinta.f32	s15, s15
 800084e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000852:	2800      	cmp	r0, #0
	int RdPtr_Int = roundf(Rd_P);
 8000854:	ee17 3a90 	vmov	r3, s15
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000858:	bfb8      	it	lt
 800085a:	3001      	addlt	r0, #1
 800085c:	ebb3 0f60 	cmp.w	r3, r0, asr #1
 8000860:	6828      	ldr	r0, [r5, #0]
 8000862:	f2c0 8087 	blt.w	8000974 <Do_PitchShift+0x140>
 8000866:	2800      	cmp	r0, #0
 8000868:	bfb8      	it	lt
 800086a:	3001      	addlt	r0, #1
 800086c:	eba3 0060 	sub.w	r0, r3, r0, asr #1
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8000870:	eb02 0683 	add.w	r6, r2, r3, lsl #2
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000874:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	float Rd0 = (float) Buf[RdPtr_Int];
 8000878:	ed96 7a00 	vldr	s14, [r6]
	float Rd1 = (float) Buf[RdPtr_Int2];
 800087c:	ed92 6a00 	vldr	s12, [r2]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000880:	4e43      	ldr	r6, [pc, #268]	; (8000990 <Do_PitchShift+0x15c>)
	float Rd0 = (float) Buf[RdPtr_Int];
 8000882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000886:	680a      	ldr	r2, [r1, #0]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000888:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 800088c:	6837      	ldr	r7, [r6, #0]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	42ba      	cmp	r2, r7
 8000892:	dc5d      	bgt.n	8000950 <Do_PitchShift+0x11c>
 8000894:	680a      	ldr	r2, [r1, #0]
 8000896:	429a      	cmp	r2, r3
 8000898:	db5a      	blt.n	8000950 <Do_PitchShift+0x11c>
		int rel = WtrP-RdPtr_Int;
 800089a:	680a      	ldr	r2, [r1, #0]
		CrossFade = ((float)rel)/(float)Overlap;
 800089c:	edd6 6a00 	vldr	s13, [r6]
		int rel = WtrP-RdPtr_Int;
 80008a0:	1ad2      	subs	r2, r2, r3
		CrossFade = ((float)rel)/(float)Overlap;
 80008a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80008a6:	ee07 2a90 	vmov	s15, r2
 80008aa:	4a3a      	ldr	r2, [pc, #232]	; (8000994 <Do_PitchShift+0x160>)
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	eec7 5aa6 	vdiv.f32	s11, s15, s13
 80008b4:	edc2 5a00 	vstr	s11, [r2]
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 80008b8:	680b      	ldr	r3, [r1, #0]
 80008ba:	6837      	ldr	r7, [r6, #0]
 80008bc:	1a1b      	subs	r3, r3, r0
 80008be:	42bb      	cmp	r3, r7
 80008c0:	dc51      	bgt.n	8000966 <Do_PitchShift+0x132>
 80008c2:	680b      	ldr	r3, [r1, #0]
 80008c4:	4283      	cmp	r3, r0
 80008c6:	db4e      	blt.n	8000966 <Do_PitchShift+0x132>
			int rel = WtrP-RdPtr_Int2;
 80008c8:	680b      	ldr	r3, [r1, #0]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 80008ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008ce:	edd6 5a00 	vldr	s11, [r6]
			int rel = WtrP-RdPtr_Int2;
 80008d2:	1a1b      	subs	r3, r3, r0
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 80008d4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 80008e4:	ee76 7ac5 	vsub.f32	s15, s13, s10
 80008e8:	edc2 7a00 	vstr	s15, [r2]
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 80008ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80008f0:	edd2 5a00 	vldr	s11, [r2]
 80008f4:	edd2 4a00 	vldr	s9, [r2]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 80008f8:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80008fc:	edd4 6a00 	vldr	s13, [r4]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000900:	ee77 7ae4 	vsub.f32	s15, s15, s9
	Rd_P += Shift;
 8000904:	ee76 6a85 	vadd.f32	s13, s13, s10
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000908:	ee67 7a86 	vmul.f32	s15, s15, s12
	Rd_P += Shift;
 800090c:	edc4 6a00 	vstr	s13, [r4]
	WtrP++;
 8000910:	680b      	ldr	r3, [r1, #0]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000912:	eee5 7a87 	vfma.f32	s15, s11, s14
	WtrP++;
 8000916:	3301      	adds	r3, #1
 8000918:	600b      	str	r3, [r1, #0]
	if (WtrP == BufSize) WtrP = 0;
 800091a:	680a      	ldr	r2, [r1, #0]
 800091c:	682b      	ldr	r3, [r5, #0]
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	if (WtrP == BufSize) WtrP = 0;
 8000922:	429a      	cmp	r2, r3
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000924:	ee17 0a90 	vmov	r0, s15
	if (WtrP == BufSize) WtrP = 0;
 8000928:	d101      	bne.n	800092e <Do_PitchShift+0xfa>
 800092a:	2300      	movs	r3, #0
 800092c:	600b      	str	r3, [r1, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 800092e:	ed94 7a00 	vldr	s14, [r4]
 8000932:	edd5 7a00 	vldr	s15, [r5]
 8000936:	feb8 7a47 	vrinta.f32	s14, s14
 800093a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800093e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	db01      	blt.n	800094c <Do_PitchShift+0x118>
 8000948:	2300      	movs	r3, #0
 800094a:	6023      	str	r3, [r4, #0]

	return sum;
}
 800094c:	bcf0      	pop	{r4, r5, r6, r7}
 800094e:	4770      	bx	lr
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000950:	680a      	ldr	r2, [r1, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <Do_PitchShift+0x160>)
 8000956:	d1af      	bne.n	80008b8 <Do_PitchShift+0x84>
 8000958:	2300      	movs	r3, #0
 800095a:	6013      	str	r3, [r2, #0]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 800095c:	680b      	ldr	r3, [r1, #0]
 800095e:	6837      	ldr	r7, [r6, #0]
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	42bb      	cmp	r3, r7
 8000964:	ddad      	ble.n	80008c2 <Do_PitchShift+0x8e>
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000966:	680b      	ldr	r3, [r1, #0]
 8000968:	4283      	cmp	r3, r0
 800096a:	d1bf      	bne.n	80008ec <Do_PitchShift+0xb8>
 800096c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e7bb      	b.n	80008ec <Do_PitchShift+0xb8>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000974:	2800      	cmp	r0, #0
 8000976:	bfb8      	it	lt
 8000978:	3001      	addlt	r0, #1
 800097a:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800097e:	e777      	b.n	8000870 <Do_PitchShift+0x3c>
 8000980:	2400a018 	.word	0x2400a018
 8000984:	240003cc 	.word	0x240003cc
 8000988:	2400a014 	.word	0x2400a014
 800098c:	24000008 	.word	0x24000008
 8000990:	2400000c 	.word	0x2400000c
 8000994:	2400a00c 	.word	0x2400a00c

08000998 <subbandfilter_calculation>:
volatile float32_t subbandfilter_B1[numberofsubbands];
volatile float32_t subbandfilter_B2[numberofsubbands];
volatile float32_t subbandfilter_B[numberofsubbands];
// SUBBAND FILTER FUNCTION - DIRECT FORM 2 - normalfunction exectime: ~6us
void subbandfilter_calculation(int32_t input){
  float32_t input_f32=(float32_t)input;
 8000998:	ee07 0a90 	vmov	s15, r0
 800099c:	482f      	ldr	r0, [pc, #188]	; (8000a5c <subbandfilter_calculation+0xc4>)
 800099e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void subbandfilter_calculation(int32_t input){
 80009a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 80009a4:	2400      	movs	r4, #0
 80009a6:	4e2e      	ldr	r6, [pc, #184]	; (8000a60 <subbandfilter_calculation+0xc8>)
 80009a8:	4d2e      	ldr	r5, [pc, #184]	; (8000a64 <subbandfilter_calculation+0xcc>)
//			  subbandfilter_input[i]	= input_f32;
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80009aa:	eb06 0284 	add.w	r2, r6, r4, lsl #2
			  subbandfilter_dn1[i]		= subbandfilter_dn[i];
 80009ae:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80009b2:	f8d2 c000 	ldr.w	ip, [r2]
 80009b6:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 80009ba:	3401      	adds	r4, #1
			  subbandfilter_dn2[i]		= subbandfilter_dn1[i];
 80009bc:	f8c1 c000 	str.w	ip, [r1]
  for(int i=0;i<numberofsubbands;i++){
 80009c0:	2c37      	cmp	r4, #55	; 0x37
			  subbandfilter_dn1[i]		= subbandfilter_dn[i];
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	6011      	str	r1, [r2, #0]
			  subbandfilter_dn[i]		= input_f32;
 80009c6:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<numberofsubbands;i++){
 80009ca:	d1ee      	bne.n	80009aa <subbandfilter_calculation+0x12>

  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, subbandfilter_yn1, subbandfilter_A1, numberofsubbands);
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <subbandfilter_calculation+0xd0>)
 80009ce:	4623      	mov	r3, r4
 80009d0:	4926      	ldr	r1, [pc, #152]	; (8000a6c <subbandfilter_calculation+0xd4>)
 80009d2:	4827      	ldr	r0, [pc, #156]	; (8000a70 <subbandfilter_calculation+0xd8>)
 80009d4:	f005 f84a 	bl	8005a6c <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, subbandfilter_yn2, subbandfilter_A2, numberofsubbands);
 80009d8:	4623      	mov	r3, r4
 80009da:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <subbandfilter_calculation+0xdc>)
 80009dc:	4926      	ldr	r1, [pc, #152]	; (8000a78 <subbandfilter_calculation+0xe0>)
 80009de:	4827      	ldr	r0, [pc, #156]	; (8000a7c <subbandfilter_calculation+0xe4>)
 80009e0:	f005 f844 	bl	8005a6c <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_A, numberofsubbands);
 80009e4:	4623      	mov	r3, r4
 80009e6:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <subbandfilter_calculation+0xe8>)
 80009e8:	4922      	ldr	r1, [pc, #136]	; (8000a74 <subbandfilter_calculation+0xdc>)
 80009ea:	481f      	ldr	r0, [pc, #124]	; (8000a68 <subbandfilter_calculation+0xd0>)
 80009ec:	f005 f8f4 	bl	8005bd8 <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, subbandfilter_dn1, subbandfilter_B1, numberofsubbands);
 80009f0:	4623      	mov	r3, r4
 80009f2:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <subbandfilter_calculation+0xec>)
 80009f4:	491a      	ldr	r1, [pc, #104]	; (8000a60 <subbandfilter_calculation+0xc8>)
 80009f6:	4824      	ldr	r0, [pc, #144]	; (8000a88 <subbandfilter_calculation+0xf0>)
 80009f8:	f005 f838 	bl	8005a6c <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, subbandfilter_dn2, subbandfilter_B2, numberofsubbands);
 80009fc:	4623      	mov	r3, r4
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <subbandfilter_calculation+0xf4>)
 8000a00:	4918      	ldr	r1, [pc, #96]	; (8000a64 <subbandfilter_calculation+0xcc>)
 8000a02:	4823      	ldr	r0, [pc, #140]	; (8000a90 <subbandfilter_calculation+0xf8>)
 8000a04:	f005 f832 	bl	8005a6c <arm_mult_f32>
  // B1+B2
  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_B, numberofsubbands);
 8000a08:	4623      	mov	r3, r4
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <subbandfilter_calculation+0xfc>)
 8000a0c:	491f      	ldr	r1, [pc, #124]	; (8000a8c <subbandfilter_calculation+0xf4>)
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <subbandfilter_calculation+0xec>)
 8000a10:	f005 f8e2 	bl	8005bd8 <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, subbandfilter_dn, subbandfilter_B0, numberofsubbands);
 8000a14:	4623      	mov	r3, r4
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <subbandfilter_calculation+0x100>)
 8000a18:	4910      	ldr	r1, [pc, #64]	; (8000a5c <subbandfilter_calculation+0xc4>)
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <subbandfilter_calculation+0x104>)
 8000a1c:	f005 f826 	bl	8005a6c <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(subbandfilter_B, subbandfilter_B0, subbandfilter_B, numberofsubbands);
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <subbandfilter_calculation+0xfc>)
 8000a22:	4623      	mov	r3, r4
 8000a24:	491c      	ldr	r1, [pc, #112]	; (8000a98 <subbandfilter_calculation+0x100>)
 8000a26:	4610      	mov	r0, r2
 8000a28:	4f10      	ldr	r7, [pc, #64]	; (8000a6c <subbandfilter_calculation+0xd4>)
 8000a2a:	f005 f8d5 	bl	8005bd8 <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(subbandfilter_B,subbandfilter_A, subbandfilter_output, numberofsubbands);
 8000a2e:	4623      	mov	r3, r4
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <subbandfilter_calculation+0x108>)
 8000a32:	4913      	ldr	r1, [pc, #76]	; (8000a80 <subbandfilter_calculation+0xe8>)
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <subbandfilter_calculation+0xfc>)
 8000a36:	f004 ffbf 	bl	80059b8 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000a3a:	4e0f      	ldr	r6, [pc, #60]	; (8000a78 <subbandfilter_calculation+0xe0>)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4d18      	ldr	r5, [pc, #96]	; (8000aa0 <subbandfilter_calculation+0x108>)
	  subbandfilter_yn2[i]		= subbandfilter_yn1[i];
 8000a40:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8000a44:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000a48:	6814      	ldr	r4, [r2, #0]
	  subbandfilter_yn1[i]		= subbandfilter_output[i];
 8000a4a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 8000a4e:	3301      	adds	r3, #1
	  subbandfilter_yn2[i]		= subbandfilter_yn1[i];
 8000a50:	6004      	str	r4, [r0, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000a52:	2b37      	cmp	r3, #55	; 0x37
	  subbandfilter_yn1[i]		= subbandfilter_output[i];
 8000a54:	6809      	ldr	r1, [r1, #0]
 8000a56:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000a58:	d1f2      	bne.n	8000a40 <subbandfilter_calculation+0xa8>
   }
}
 8000a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a5c:	2400ab94 	.word	0x2400ab94
 8000a60:	2400ac70 	.word	0x2400ac70
 8000a64:	2400ad4c 	.word	0x2400ad4c
 8000a68:	2400a590 	.word	0x2400a590
 8000a6c:	2400b350 	.word	0x2400b350
 8000a70:	2400002c 	.word	0x2400002c
 8000a74:	2400a66c 	.word	0x2400a66c
 8000a78:	2400b42c 	.word	0x2400b42c
 8000a7c:	24000108 	.word	0x24000108
 8000a80:	2400a4b4 	.word	0x2400a4b4
 8000a84:	2400a900 	.word	0x2400a900
 8000a88:	2400aab8 	.word	0x2400aab8
 8000a8c:	2400a9dc 	.word	0x2400a9dc
 8000a90:	240002c0 	.word	0x240002c0
 8000a94:	2400a748 	.word	0x2400a748
 8000a98:	2400a824 	.word	0x2400a824
 8000a9c:	240001e4 	.word	0x240001e4
 8000aa0:	2400b274 	.word	0x2400b274

08000aa4 <subbandfilter_octave2_calculation>:

void subbandfilter_octave2_calculation(int32_t input){
  float32_t input_f32=(float32_t)input;
 8000aa4:	ee07 0a90 	vmov	s15, r0
 8000aa8:	482f      	ldr	r0, [pc, #188]	; (8000b68 <subbandfilter_octave2_calculation+0xc4>)
 8000aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void subbandfilter_octave2_calculation(int32_t input){
 8000aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	4e2e      	ldr	r6, [pc, #184]	; (8000b6c <subbandfilter_octave2_calculation+0xc8>)
 8000ab4:	4d2e      	ldr	r5, [pc, #184]	; (8000b70 <subbandfilter_octave2_calculation+0xcc>)
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 8000ab6:	eb06 0284 	add.w	r2, r6, r4, lsl #2
			  subbandfilter_octave2_dn1[i]=subbandfilter_octave2_dn[i];
 8000aba:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 8000abe:	f8d2 c000 	ldr.w	ip, [r2]
 8000ac2:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 8000ac6:	3401      	adds	r4, #1
			  subbandfilter_octave2_dn2[i]=subbandfilter_octave2_dn1[i];
 8000ac8:	f8c1 c000 	str.w	ip, [r1]
  for(int i=0;i<numberofsubbands;i++){
 8000acc:	2c37      	cmp	r4, #55	; 0x37
			  subbandfilter_octave2_dn1[i]=subbandfilter_octave2_dn[i];
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	6011      	str	r1, [r2, #0]
			  subbandfilter_octave2_dn[i] = input_f32;
 8000ad2:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0;i<numberofsubbands;i++){
 8000ad6:	d1ee      	bne.n	8000ab6 <subbandfilter_octave2_calculation+0x12>
  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, subbandfilter_octave2_yn1, subbandfilter_A1, numberofsubbands);
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <subbandfilter_octave2_calculation+0xd0>)
 8000ada:	4623      	mov	r3, r4
 8000adc:	4926      	ldr	r1, [pc, #152]	; (8000b78 <subbandfilter_octave2_calculation+0xd4>)
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <subbandfilter_octave2_calculation+0xd8>)
 8000ae0:	f004 ffc4 	bl	8005a6c <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, subbandfilter_octave2_yn2, subbandfilter_A2, numberofsubbands);
 8000ae4:	4623      	mov	r3, r4
 8000ae6:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <subbandfilter_octave2_calculation+0xdc>)
 8000ae8:	4926      	ldr	r1, [pc, #152]	; (8000b84 <subbandfilter_octave2_calculation+0xe0>)
 8000aea:	4827      	ldr	r0, [pc, #156]	; (8000b88 <subbandfilter_octave2_calculation+0xe4>)
 8000aec:	f004 ffbe 	bl	8005a6c <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(subbandfilter_A1, subbandfilter_A2, subbandfilter_A, numberofsubbands);
 8000af0:	4623      	mov	r3, r4
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <subbandfilter_octave2_calculation+0xe8>)
 8000af4:	4922      	ldr	r1, [pc, #136]	; (8000b80 <subbandfilter_octave2_calculation+0xdc>)
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <subbandfilter_octave2_calculation+0xd0>)
 8000af8:	f005 f86e 	bl	8005bd8 <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, subbandfilter_octave2_dn1, subbandfilter_B1, numberofsubbands);
 8000afc:	4623      	mov	r3, r4
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <subbandfilter_octave2_calculation+0xec>)
 8000b00:	491a      	ldr	r1, [pc, #104]	; (8000b6c <subbandfilter_octave2_calculation+0xc8>)
 8000b02:	4824      	ldr	r0, [pc, #144]	; (8000b94 <subbandfilter_octave2_calculation+0xf0>)
 8000b04:	f004 ffb2 	bl	8005a6c <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, subbandfilter_octave2_dn2, subbandfilter_B2, numberofsubbands);
 8000b08:	4623      	mov	r3, r4
 8000b0a:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <subbandfilter_octave2_calculation+0xf4>)
 8000b0c:	4918      	ldr	r1, [pc, #96]	; (8000b70 <subbandfilter_octave2_calculation+0xcc>)
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <subbandfilter_octave2_calculation+0xf8>)
 8000b10:	f004 ffac 	bl	8005a6c <arm_mult_f32>
  // B1+B2
  arm_add_f32(subbandfilter_B1, subbandfilter_B2, subbandfilter_B, numberofsubbands);
 8000b14:	4623      	mov	r3, r4
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <subbandfilter_octave2_calculation+0xfc>)
 8000b18:	491f      	ldr	r1, [pc, #124]	; (8000b98 <subbandfilter_octave2_calculation+0xf4>)
 8000b1a:	481d      	ldr	r0, [pc, #116]	; (8000b90 <subbandfilter_octave2_calculation+0xec>)
 8000b1c:	f005 f85c 	bl	8005bd8 <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, subbandfilter_octave2_dn, subbandfilter_B0, numberofsubbands);
 8000b20:	4623      	mov	r3, r4
 8000b22:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <subbandfilter_octave2_calculation+0x100>)
 8000b24:	4910      	ldr	r1, [pc, #64]	; (8000b68 <subbandfilter_octave2_calculation+0xc4>)
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <subbandfilter_octave2_calculation+0x104>)
 8000b28:	f004 ffa0 	bl	8005a6c <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(subbandfilter_B, subbandfilter_B0, subbandfilter_B, numberofsubbands);
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <subbandfilter_octave2_calculation+0xfc>)
 8000b2e:	4623      	mov	r3, r4
 8000b30:	491c      	ldr	r1, [pc, #112]	; (8000ba4 <subbandfilter_octave2_calculation+0x100>)
 8000b32:	4610      	mov	r0, r2
 8000b34:	4f10      	ldr	r7, [pc, #64]	; (8000b78 <subbandfilter_octave2_calculation+0xd4>)
 8000b36:	f005 f84f 	bl	8005bd8 <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(subbandfilter_B,subbandfilter_A, subbandfilter_output, numberofsubbands);
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <subbandfilter_octave2_calculation+0x108>)
 8000b3e:	4913      	ldr	r1, [pc, #76]	; (8000b8c <subbandfilter_octave2_calculation+0xe8>)
 8000b40:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <subbandfilter_octave2_calculation+0xfc>)
 8000b42:	f004 ff39 	bl	80059b8 <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000b46:	4e0f      	ldr	r6, [pc, #60]	; (8000b84 <subbandfilter_octave2_calculation+0xe0>)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	4d18      	ldr	r5, [pc, #96]	; (8000bac <subbandfilter_octave2_calculation+0x108>)
 			  subbandfilter_octave2_yn2[i] 	= subbandfilter_octave2_yn1[i];
 8000b4c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8000b50:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000b54:	6814      	ldr	r4, [r2, #0]
 			  subbandfilter_octave2_yn1[i]  = subbandfilter_output[i];
 8000b56:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  for(int i=0;i<numberofsubbands;i++){
 8000b5a:	3301      	adds	r3, #1
 			  subbandfilter_octave2_yn2[i] 	= subbandfilter_octave2_yn1[i];
 8000b5c:	6004      	str	r4, [r0, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000b5e:	2b37      	cmp	r3, #55	; 0x37
 			  subbandfilter_octave2_yn1[i]  = subbandfilter_output[i];
 8000b60:	6809      	ldr	r1, [r1, #0]
 8000b62:	6011      	str	r1, [r2, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000b64:	d1f2      	bne.n	8000b4c <subbandfilter_octave2_calculation+0xa8>
   }
}
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b68:	2400ae28 	.word	0x2400ae28
 8000b6c:	2400af04 	.word	0x2400af04
 8000b70:	2400afe0 	.word	0x2400afe0
 8000b74:	2400a590 	.word	0x2400a590
 8000b78:	2400b0bc 	.word	0x2400b0bc
 8000b7c:	2400002c 	.word	0x2400002c
 8000b80:	2400a66c 	.word	0x2400a66c
 8000b84:	2400b198 	.word	0x2400b198
 8000b88:	24000108 	.word	0x24000108
 8000b8c:	2400a4b4 	.word	0x2400a4b4
 8000b90:	2400a900 	.word	0x2400a900
 8000b94:	2400aab8 	.word	0x2400aab8
 8000b98:	2400a9dc 	.word	0x2400a9dc
 8000b9c:	240002c0 	.word	0x240002c0
 8000ba0:	2400a748 	.word	0x2400a748
 8000ba4:	2400a824 	.word	0x2400a824
 8000ba8:	240001e4 	.word	0x240001e4
 8000bac:	2400b274 	.word	0x2400b274

08000bb0 <HAL_I2S_RxHalfCpltCallback>:
volatile int32_t output_test_ac;
volatile adc_data_bitfield adc_data_bf;
volatile adc_data_bitfield output_buffer;
volatile uint8_t ADC_READY_FLAG = 0;
volatile uint8_t DAC_HALF_COMPLETE_FLAG = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000bb0:	b410      	push	{r4}
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bb2:	4c10      	ldr	r4, [pc, #64]	; (8000bf4 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000bb4:	f004 021f 	and.w	r2, r4, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	f104 0110 	add.w	r1, r4, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bc0:	4623      	mov	r3, r4
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <HAL_I2S_RxHalfCpltCallback+0x48>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000bc4:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bc6:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bca:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000bcc:	1aca      	subs	r2, r1, r3
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	dcf9      	bgt.n	8000bc6 <HAL_I2S_RxHalfCpltCallback+0x16>
 8000bd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bd6:	f3bf 8f6f 	isb	sy
//	SCB_InvalidateDCache();
	SCB_InvalidateDCache_by_Addr(rx_data_i2s, sizeof(rx_data_i2s));
	ADC_READY_FLAG = 1;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_I2S_RxHalfCpltCallback+0x4c>)
 8000bdc:	2101      	movs	r1, #1
//	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_I2S_RxHalfCpltCallback+0x50>)
	ADC_READY_FLAG = 1;
 8000be0:	7019      	strb	r1, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[0];
 8000be2:	8823      	ldrh	r3, [r4, #0]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 8000be8:	8863      	ldrh	r3, [r4, #2]
}
 8000bea:	f85d 4b04 	ldr.w	r4, [sp], #4
	adc_data_bf.raw_high 	= rx_data_i2s[1];
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	8053      	strh	r3, [r2, #2]
}
 8000bf2:	4770      	bx	lr
 8000bf4:	2400a2ec 	.word	0x2400a2ec
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	240003cb 	.word	0x240003cb
 8000c00:	2400a01c 	.word	0x2400a01c

08000c04 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000c04:	b410      	push	{r4}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c06:	4c10      	ldr	r4, [pc, #64]	; (8000c48 <HAL_I2S_RxCpltCallback+0x44>)
 8000c08:	f004 021f 	and.w	r2, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	f104 0110 	add.w	r1, r4, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c14:	4623      	mov	r3, r4
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <HAL_I2S_RxCpltCallback+0x48>)
      } while ( op_size > 0 );
 8000c18:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c1a:	f8c0 325c 	str.w	r3, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c1e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	dcf9      	bgt.n	8000c1a <HAL_I2S_RxCpltCallback+0x16>
 8000c26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c2a:	f3bf 8f6f 	isb	sy
	SCB_InvalidateDCache_by_Addr(rx_data_i2s, sizeof(rx_data_i2s));
//	SCB_InvalidateDCache();
	ADC_READY_FLAG = 1;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_I2S_RxCpltCallback+0x4c>)
 8000c30:	2101      	movs	r1, #1
	//	adc_data_bitfield adc_data_bf;
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2S_RxCpltCallback+0x50>)
	ADC_READY_FLAG = 1;
 8000c34:	7019      	strb	r1, [r3, #0]
	adc_data_bf.raw_low 	= rx_data_i2s[4];
 8000c36:	8923      	ldrh	r3, [r4, #8]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	8013      	strh	r3, [r2, #0]
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000c3c:	8963      	ldrh	r3, [r4, #10]
}
 8000c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
	adc_data_bf.raw_high 	= rx_data_i2s[5];
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	8053      	strh	r3, [r2, #2]
}
 8000c46:	4770      	bx	lr
 8000c48:	2400a2ec 	.word	0x2400a2ec
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	240003cb 	.word	0x240003cb
 8000c54:	2400a01c 	.word	0x2400a01c

08000c58 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
	DAC_HALF_COMPLETE_FLAG = 1;
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8000c5a:	2101      	movs	r1, #1
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_I2S_TxHalfCpltCallback+0x34>)
 8000c5e:	7011      	strb	r1, [r2, #0]
 8000c60:	f003 021f 	and.w	r2, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	f103 0110 	add.w	r1, r3, #16
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <HAL_I2S_TxHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000c6e:	4411      	add	r1, r2
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c70:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c74:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000c76:	1aca      	subs	r2, r1, r3
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	dcf9      	bgt.n	8000c70 <HAL_I2S_TxHalfCpltCallback+0x18>
 8000c7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c80:	f3bf 8f6f 	isb	sy
//	int32_t out2 = output_buffer.raw_low;
//	int32_t out3 = output_buffer.raw_high;
	SCB_CleanDCache_by_Addr(my_data, sizeof(my_data));
//	my_data[2] = out2;
//	my_data[3] = out3;
}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2400a010 	.word	0x2400a010
 8000c8c:	2400a2c8 	.word	0x2400a2c8
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s){
	DAC_HALF_COMPLETE_FLAG = 0;
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_I2S_TxCpltCallback+0x30>)
 8000c96:	2100      	movs	r1, #0
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_I2S_TxCpltCallback+0x34>)
 8000c9a:	7011      	strb	r1, [r2, #0]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	f103 0110 	add.w	r1, r3, #16
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <HAL_I2S_TxCpltCallback+0x38>)
      } while ( op_size > 0 );
 8000caa:	4411      	add	r1, r2
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cac:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000cb0:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000cb2:	1aca      	subs	r2, r1, r3
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	dcf9      	bgt.n	8000cac <HAL_I2S_TxCpltCallback+0x18>
 8000cb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cbc:	f3bf 8f6f 	isb	sy
//	int32_t out2 = output_buffer.raw_low;
//	int32_t out3 = output_buffer.raw_high;
	SCB_CleanDCache_by_Addr(my_data, sizeof(my_data));
//	my_data[6] = out2;
//	my_data[7] = out3;
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2400a010 	.word	0x2400a010
 8000cc8:	2400a2c8 	.word	0x2400a2c8
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd4:	224c      	movs	r2, #76	; 0x4c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	a80c      	add	r0, sp, #48	; 0x30
 8000cda:	f005 f81b 	bl	8005d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cde:	2220      	movs	r2, #32
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	a804      	add	r0, sp, #16
 8000ce4:	f005 f816 	bl	8005d14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f002 f925 	bl	8002f38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <SystemClock_Config+0x100>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <SystemClock_Config+0x104>)
 8000cf4:	9101      	str	r1, [sp, #4]
 8000cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf8:	f021 0101 	bic.w	r1, r1, #1
 8000cfc:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	6993      	ldr	r3, [r2, #24]
 8000d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	6993      	ldr	r3, [r2, #24]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d18:	6993      	ldr	r3, [r2, #24]
 8000d1a:	0499      	lsls	r1, r3, #18
 8000d1c:	d5fc      	bpl.n	8000d18 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <SystemClock_Config+0x108>)
 8000d20:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8000d24:	f041 0102 	orr.w	r1, r1, #2
 8000d28:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d2c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d3a:	9103      	str	r1, [sp, #12]
 8000d3c:	6991      	ldr	r1, [r2, #24]
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <SystemClock_Config+0x100>)
 8000d40:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000d44:	6191      	str	r1, [r2, #24]
 8000d46:	6992      	ldr	r2, [r2, #24]
 8000d48:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000d4c:	9203      	str	r2, [sp, #12]
 8000d4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d52:	f041 0101 	orr.w	r1, r1, #1
 8000d56:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d62:	6993      	ldr	r3, [r2, #24]
 8000d64:	049b      	lsls	r3, r3, #18
 8000d66:	d5fc      	bpl.n	8000d62 <SystemClock_Config+0x92>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d68:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d6a:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d6e:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d72:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8000dc8 <SystemClock_Config+0xf8>
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d76:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d80:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d84:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d8c:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f002 f994 	bl	80030bc <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b108      	cbz	r0, 8000d9c <SystemClock_Config+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <SystemClock_Config+0xca>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	213f      	movs	r1, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9e:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da8:	2103      	movs	r1, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000daa:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000db0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db2:	e9cd 4207 	strd	r4, r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dba:	f002 fd15 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000dbe:	b108      	cbz	r0, 8000dc4 <SystemClock_Config+0xf4>
 8000dc0:	b672      	cpsid	i
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <SystemClock_Config+0xf2>
}
 8000dc4:	b020      	add	sp, #128	; 0x80
 8000dc6:	bd10      	pop	{r4, pc}
 8000dc8:	00000001 	.word	0x00000001
 8000dcc:	00010000 	.word	0x00010000
 8000dd0:	58000400 	.word	0x58000400
 8000dd4:	58024800 	.word	0x58024800
 8000dd8:	58024400 	.word	0x58024400

08000ddc <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ddc:	4a9f      	ldr	r2, [pc, #636]	; (800105c <main+0x280>)
 8000dde:	6953      	ldr	r3, [r2, #20]
{
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000de8:	ed2d 8b02 	vpush	{d8}
 8000dec:	f5ad 2dbb 	sub.w	sp, sp, #382976	; 0x5d800
 8000df0:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8000df4:	d111      	bne.n	8000e1a <main+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000df6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dfa:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dfe:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e06:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e0a:	6953      	ldr	r3, [r2, #20]
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e16:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e1a:	4890      	ldr	r0, [pc, #576]	; (800105c <main+0x280>)
 8000e1c:	6943      	ldr	r3, [r0, #20]
 8000e1e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000e22:	d124      	bne.n	8000e6e <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e24:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e28:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000e2c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e30:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e34:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e38:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000e3c:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3e:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e42:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e44:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8000e48:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	d1f8      	bne.n	8000e44 <main+0x68>
    } while(sets-- != 0U);
 8000e52:	3c20      	subs	r4, #32
 8000e54:	f114 0f20 	cmn.w	r4, #32
 8000e58:	d1f1      	bne.n	8000e3e <main+0x62>
 8000e5a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e5e:	6943      	ldr	r3, [r0, #20]
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	6143      	str	r3, [r0, #20]
 8000e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e6a:	f3bf 8f6f 	isb	sy
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4c7c      	ldr	r4, [pc, #496]	; (8001060 <main+0x284>)
  HAL_Init();
 8000e70:	f000 fc18 	bl	80016a4 <HAL_Init>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	aa01      	add	r2, sp, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	2500      	movs	r5, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000e7c:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000e88:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	6813      	ldr	r3, [r2, #0]
  SystemClock_Config();
 8000e94:	f7ff ff1c 	bl	8000cd0 <SystemClock_Config>
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000e98:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 8000e9c:	a902      	add	r1, sp, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	ab0c      	add	r3, sp, #48	; 0x30
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000ea0:	4870      	ldr	r0, [pc, #448]	; (8001064 <main+0x288>)
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ea6:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8000eaa:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	609d      	str	r5, [r3, #8]
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	e9c3 5500 	strd	r5, r5, [r3]
  __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb8:	600a      	str	r2, [r1, #0]
 8000eba:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebc:	aa06      	add	r2, sp, #24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	e9c3 5503 	strd	r5, r5, [r3, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ed0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	aa07      	add	r2, sp, #28
 8000ede:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000eea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	aa08      	add	r2, sp, #32
 8000ef8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000f04:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	aa09      	add	r2, sp, #36	; 0x24
 8000f12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000f1e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2a:	aa0a      	add	r2, sp, #40	; 0x28
 8000f2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000f38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000f52:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	680b      	ldr	r3, [r1, #0]
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	f001 fe05 	bl	8002b70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	2301      	movs	r3, #1
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	a90c      	add	r1, sp, #48	; 0x30
 8000f6e:	483d      	ldr	r0, [pc, #244]	; (8001064 <main+0x288>)
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8000f70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000f74:	2201      	movs	r2, #1
 8000f76:	2303      	movs	r3, #3
 8000f78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f001 fcc6 	bl	800290c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f80:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000f84:	aa04      	add	r2, sp, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f86:	a905      	add	r1, sp, #20
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f88:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f8c:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f8e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000f92:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f9e:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000fac:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000fb0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	600b      	str	r3, [r1, #0]
 8000fba:	680b      	ldr	r3, [r1, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	f000 fbdd 	bl	800177c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f000 fc18 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fc8:	462a      	mov	r2, r5
 8000fca:	4629      	mov	r1, r5
 8000fcc:	2039      	movs	r0, #57	; 0x39
 8000fce:	f000 fbd5 	bl	800177c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fd2:	2039      	movs	r0, #57	; 0x39
 8000fd4:	f000 fc10 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  hi2s2.Instance = SPI2;
 8000fd8:	4823      	ldr	r0, [pc, #140]	; (8001068 <main+0x28c>)
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <main+0x290>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fdc:	2204      	movs	r2, #4
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fde:	6085      	str	r5, [r0, #8]
  hi2s2.Instance = SPI2;
 8000fe0:	6003      	str	r3, [r0, #0]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000fe6:	6105      	str	r5, [r0, #16]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_ENABLE;
 8000fe8:	6203      	str	r3, [r0, #32]
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000fea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fee:	6042      	str	r2, [r0, #4]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000ff0:	60c6      	str	r6, [r0, #12]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8000ff2:	6244      	str	r4, [r0, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_ENABLE;
 8000ff4:	6283      	str	r3, [r0, #40]	; 0x28
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000ff6:	e9c0 5506 	strd	r5, r5, [r0, #24]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000ffa:	f64b 3580 	movw	r5, #48000	; 0xbb80
 8000ffe:	6145      	str	r5, [r0, #20]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001000:	f001 fdfc 	bl	8002bfc <HAL_I2S_Init>
 8001004:	b108      	cbz	r0, 800100a <main+0x22e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x22c>
  hspi3.Instance = SPI3;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <main+0x294>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800100c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001010:	4918      	ldr	r1, [pc, #96]	; (8001074 <main+0x298>)
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001012:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	6098      	str	r0, [r3, #8]
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001018:	6598      	str	r0, [r3, #88]	; 0x58
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101a:	e9c3 1200 	strd	r1, r2, [r3]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800101e:	2207      	movs	r2, #7
 8001020:	60da      	str	r2, [r3, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001026:	e9c3 7206 	strd	r7, r2, [r3, #24]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8001036:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800103a:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800103e:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001042:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001046:	e9c3 0014 	strd	r0, r0, [r3, #80]	; 0x50
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800104a:	4618      	mov	r0, r3
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800104e:	f004 f8c3 	bl	80051d8 <HAL_SPI_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	b180      	cbz	r0, 8001078 <main+0x29c>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x27c>
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	58024400 	.word	0x58024400
 8001064:	58021400 	.word	0x58021400
 8001068:	2400a188 	.word	0x2400a188
 800106c:	40003800 	.word	0x40003800
 8001070:	2400a240 	.word	0x2400a240
 8001074:	40003c00 	.word	0x40003c00
  hi2s1.Instance = SPI1;
 8001078:	486c      	ldr	r0, [pc, #432]	; (800122c <main+0x450>)
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800107a:	4a6d      	ldr	r2, [pc, #436]	; (8001230 <main+0x454>)
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800107c:	6083      	str	r3, [r0, #8]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800107e:	6103      	str	r3, [r0, #16]
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001080:	6283      	str	r3, [r0, #40]	; 0x28
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001082:	60c6      	str	r6, [r0, #12]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001084:	6145      	str	r5, [r0, #20]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_LEFT;
 8001086:	e9c0 3408 	strd	r3, r4, [r0, #32]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800108a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800108e:	2306      	movs	r3, #6
 8001090:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001094:	f001 fdb2 	bl	8002bfc <HAL_I2S_Init>
 8001098:	4604      	mov	r4, r0
 800109a:	2800      	cmp	r0, #0
 800109c:	f040 80bb 	bne.w	8001216 <main+0x43a>
	  rx_data_i2s[i]= 0x0000;
 80010a0:	4b64      	ldr	r3, [pc, #400]	; (8001234 <main+0x458>)
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 80010a2:	2101      	movs	r1, #1
	  my_data[i] = 0x0000;
 80010a4:	4a64      	ldr	r2, [pc, #400]	; (8001238 <main+0x45c>)
 80010a6:	8010      	strh	r0, [r2, #0]
	  rx_data_i2s[i]= 0x0000;
 80010a8:	8018      	strh	r0, [r3, #0]
	  my_data[i] = 0x0000;
 80010aa:	8050      	strh	r0, [r2, #2]
	  rx_data_i2s[i]= 0x0000;
 80010ac:	8058      	strh	r0, [r3, #2]
	  my_data[i] = 0x0000;
 80010ae:	8090      	strh	r0, [r2, #4]
	  rx_data_i2s[i]= 0x0000;
 80010b0:	8098      	strh	r0, [r3, #4]
	  my_data[i] = 0x0000;
 80010b2:	80d0      	strh	r0, [r2, #6]
	  rx_data_i2s[i]= 0x0000;
 80010b4:	80d8      	strh	r0, [r3, #6]
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 80010b6:	4a61      	ldr	r2, [pc, #388]	; (800123c <main+0x460>)
 80010b8:	4b61      	ldr	r3, [pc, #388]	; (8001240 <main+0x464>)
 80010ba:	4862      	ldr	r0, [pc, #392]	; (8001244 <main+0x468>)
 80010bc:	f004 fc70 	bl	80059a0 <arm_biquad_cascade_df2T_init_f32>
  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <main+0x464>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	4860      	ldr	r0, [pc, #384]	; (8001248 <main+0x46c>)
 80010c6:	4a5d      	ldr	r2, [pc, #372]	; (800123c <main+0x460>)
 80010c8:	f004 fc6a 	bl	80059a0 <arm_biquad_cascade_df2T_init_f32>
 80010cc:	4623      	mov	r3, r4
 80010ce:	485f      	ldr	r0, [pc, #380]	; (800124c <main+0x470>)
	  subband_ones[i] = 1.0;
 80010d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010d4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  for(uint8_t i = 0; i<numberofsubbands;i++){
 80010d8:	3301      	adds	r3, #1
 80010da:	2b37      	cmp	r3, #55	; 0x37
	  subband_ones[i] = 1.0;
 80010dc:	6011      	str	r1, [r2, #0]
  for(uint8_t i = 0; i<numberofsubbands;i++){
 80010de:	d1f9      	bne.n	80010d4 <main+0x2f8>
  HAL_I2S_Transmit_DMA(	&hi2s2, 	my_data, 		4);
 80010e0:	2204      	movs	r2, #4
 80010e2:	4955      	ldr	r1, [pc, #340]	; (8001238 <main+0x45c>)
 80010e4:	485a      	ldr	r0, [pc, #360]	; (8001250 <main+0x474>)
 80010e6:	f001 fe71 	bl	8002dcc <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(	&hi2s1, 	rx_data_i2s, 	4);
 80010ea:	2204      	movs	r2, #4
 80010ec:	4951      	ldr	r1, [pc, #324]	; (8001234 <main+0x458>)
 80010ee:	484f      	ldr	r0, [pc, #316]	; (800122c <main+0x450>)
 80010f0:	f001 fec6 	bl	8002e80 <HAL_I2S_Receive_DMA>
  ad1939_init(&hspi3);
 80010f4:	4857      	ldr	r0, [pc, #348]	; (8001254 <main+0x478>)
 80010f6:	f7ff f961 	bl	80003bc <ad1939_init>
  init_guitar_effect_delay(&delay_effect);
 80010fa:	a80c      	add	r0, sp, #48	; 0x30
 80010fc:	f7ff fb6c 	bl	80007d8 <init_guitar_effect_delay>
	volatile float32_t len_f32 = 48000;
 8001100:	4c55      	ldr	r4, [pc, #340]	; (8001258 <main+0x47c>)
 8001102:	ab03      	add	r3, sp, #12
 8001104:	4a55      	ldr	r2, [pc, #340]	; (800125c <main+0x480>)
 8001106:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001284 <main+0x4a8>
 800110a:	4e55      	ldr	r6, [pc, #340]	; (8001260 <main+0x484>)
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 800110c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001288 <main+0x4ac>
 8001110:	f8df b178 	ldr.w	fp, [pc, #376]	; 800128c <main+0x4b0>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8001114:	4f53      	ldr	r7, [pc, #332]	; (8001264 <main+0x488>)
 8001116:	f8df a134 	ldr.w	sl, [pc, #308]	; 800124c <main+0x470>
	volatile float32_t len_f32 = 48000;
 800111a:	601a      	str	r2, [r3, #0]
	  if (ADC_READY_FLAG){
 800111c:	7823      	ldrb	r3, [r4, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0fc      	beq.n	800111c <main+0x340>
		  ADC_READY_FLAG  = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	7023      	strb	r3, [r4, #0]
		int32_t value_from_ADC = adc_data_bf.value/2; //value_from_ADC_HighByte | value_from_ADC_LowByte;
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <main+0x48c>)
 8001128:	681d      	ldr	r5, [r3, #0]
 800112a:	2d00      	cmp	r5, #0
 800112c:	bfb8      	it	lt
 800112e:	3501      	addlt	r5, #1
 8001130:	106d      	asrs	r5, r5, #1
		subbandfilter_calculation(value_from_ADC);
 8001132:	4628      	mov	r0, r5
 8001134:	f7ff fc30 	bl	8000998 <subbandfilter_calculation>
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 8001138:	4641      	mov	r1, r8
 800113a:	4658      	mov	r0, fp
 800113c:	2237      	movs	r2, #55	; 0x37
 800113e:	f004 fda5 	bl	8005c8c <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8001142:	463b      	mov	r3, r7
 8001144:	4651      	mov	r1, sl
 8001146:	4640      	mov	r0, r8
 8001148:	2237      	movs	r2, #55	; 0x37
 800114a:	f004 fce9 	bl	8005b20 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up, &octave1_up_filtered, 1);
 800114e:	2301      	movs	r3, #1
 8001150:	464a      	mov	r2, r9
 8001152:	4639      	mov	r1, r7
 8001154:	483b      	ldr	r0, [pc, #236]	; (8001244 <main+0x468>)
 8001156:	f004 fa67 	bl	8005628 <arm_biquad_cascade_df2T_f32>
		float32_t octave_1_up_f32 = octave1_up_filtered;
 800115a:	ed99 8a00 	vldr	s16, [r9]
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 800115e:	eef0 7a48 	vmov.f32	s15, s16
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 8001162:	eebd 8ac8 	vcvt.s32.f32	s16, s16
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 8001166:	eefe 7acf 	vcvt.s32.f32	s15, s15, #2
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 800116a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		subbandfilter_octave2_calculation((int32_t)(octave_1_up_f32*4));
 800116e:	ee17 0a90 	vmov	r0, s15
 8001172:	f7ff fc97 	bl	8000aa4 <subbandfilter_octave2_calculation>
	arm_abs_f32(subbandfilter_output, subband_absolute_value, numberofsubbands);
 8001176:	4641      	mov	r1, r8
 8001178:	4658      	mov	r0, fp
 800117a:	2237      	movs	r2, #55	; 0x37
 800117c:	f004 fd86 	bl	8005c8c <arm_abs_f32>
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up);
 8001180:	463b      	mov	r3, r7
 8001182:	4651      	mov	r1, sl
 8001184:	4640      	mov	r0, r8
 8001186:	2237      	movs	r2, #55	; 0x37
 8001188:	f004 fcca 	bl	8005b20 <arm_dot_prod_f32>
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up, &octave1_up_filtered, 1);
 800118c:	464a      	mov	r2, r9
 800118e:	4639      	mov	r1, r7
 8001190:	2301      	movs	r3, #1
 8001192:	482d      	ldr	r0, [pc, #180]	; (8001248 <main+0x46c>)
 8001194:	f004 fa48 	bl	8005628 <arm_biquad_cascade_df2T_f32>
		float32_t octave_2_up_f32 = octave1_up_filtered;
 8001198:	ed99 7a00 	vldr	s14, [r9]
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <main+0x490>)
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 800119e:	ee07 5a90 	vmov	s15, r5
						(int32_t)octave_2_up_f32*octave_2_volume +
 80011a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_test_ac;
 80011a6:	4628      	mov	r0, r5
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 80011a8:	edd3 6a00 	vldr	s13, [r3]
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						(int32_t)octave_2_up_f32*octave_2_volume +
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <main+0x494>)
 80011b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 80011b6:	4d2f      	ldr	r5, [pc, #188]	; (8001274 <main+0x498>)
						(int32_t)octave_2_up_f32*octave_2_volume +
 80011b8:	ed93 6a00 	vldr	s12, [r3]
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <main+0x49c>)
						(int32_t)octave_2_up_f32*octave_2_volume +
 80011be:	ee27 7a06 	vmul.f32	s14, s14, s12
						(int32_t)((float32_t)value_from_ADC*passthrough_volume);
 80011c2:	edd3 5a00 	vldr	s11, [r3]
 80011c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011ca:	eea8 7a26 	vfma.f32	s14, s16, s13
 80011ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)octave_2_up_f32*octave_2_volume +
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee77 7a87 	vadd.f32	s15, s15, s14
		output_test_ac=	(int32_t)octave_1_up_f32*octave_1_volume +
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	edc5 7a00 	vstr	s15, [r5]
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_test_ac;
 80011e2:	f7ff fb27 	bl	8000834 <Do_PitchShift>
 80011e6:	682b      	ldr	r3, [r5, #0]
		output_buffer.value = delay_effect.callback(&delay_effect,output_buffer.value);
 80011e8:	f50d 6247 	add.w	r2, sp, #3184	; 0xc70
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_test_ac;
 80011ec:	4418      	add	r0, r3
		output_buffer.value = delay_effect.callback(&delay_effect,output_buffer.value);
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <main+0x4a0>)
 80011f0:	4413      	add	r3, r2
		output_buffer.value= Do_PitchShift(value_from_ADC) + output_test_ac;
 80011f2:	6030      	str	r0, [r6, #0]
		output_buffer.value = delay_effect.callback(&delay_effect,output_buffer.value);
 80011f4:	a80c      	add	r0, sp, #48	; 0x30
 80011f6:	6831      	ldr	r1, [r6, #0]
 80011f8:	f8d3 3c38 	ldr.w	r3, [r3, #3128]	; 0xc38
 80011fc:	4798      	blx	r3
		if ( DAC_HALF_COMPLETE_FLAG) {
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <main+0x4a4>)
		output_buffer.value = delay_effect.callback(&delay_effect,output_buffer.value);
 8001200:	6030      	str	r0, [r6, #0]
		if ( DAC_HALF_COMPLETE_FLAG) {
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b14b      	cbz	r3, 800121a <main+0x43e>
			my_data[2] = output_buffer.raw_low;
 8001206:	8833      	ldrh	r3, [r6, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <main+0x45c>)
 800120a:	b29b      	uxth	r3, r3
 800120c:	8093      	strh	r3, [r2, #4]
			my_data[3] = output_buffer.raw_high;
 800120e:	8873      	ldrh	r3, [r6, #2]
 8001210:	b29b      	uxth	r3, r3
 8001212:	80d3      	strh	r3, [r2, #6]
 8001214:	e782      	b.n	800111c <main+0x340>
 8001216:	b672      	cpsid	i
  while (1)
 8001218:	e7fe      	b.n	8001218 <main+0x43c>
			my_data[6] = output_buffer.raw_low;
 800121a:	8833      	ldrh	r3, [r6, #0]
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <main+0x45c>)
 800121e:	b29b      	uxth	r3, r3
 8001220:	8193      	strh	r3, [r2, #12]
			my_data[7] = output_buffer.raw_high;
 8001222:	8873      	ldrh	r3, [r6, #2]
 8001224:	b29b      	uxth	r3, r3
 8001226:	81d3      	strh	r3, [r2, #14]
 8001228:	e778      	b.n	800111c <main+0x340>
 800122a:	bf00      	nop
 800122c:	2400a110 	.word	0x2400a110
 8001230:	40013000 	.word	0x40013000
 8001234:	2400a2ec 	.word	0x2400a2ec
 8001238:	2400a2c8 	.word	0x2400a2c8
 800123c:	24000010 	.word	0x24000010
 8001240:	2400a218 	.word	0x2400a218
 8001244:	2400a200 	.word	0x2400a200
 8001248:	2400a20c 	.word	0x2400a20c
 800124c:	2400a3d8 	.word	0x2400a3d8
 8001250:	2400a188 	.word	0x2400a188
 8001254:	2400a240 	.word	0x2400a240
 8001258:	240003cb 	.word	0x240003cb
 800125c:	473b8000 	.word	0x473b8000
 8001260:	2400a2e4 	.word	0x2400a2e4
 8001264:	2400a2d8 	.word	0x2400a2d8
 8001268:	2400a01c 	.word	0x2400a01c
 800126c:	24000024 	.word	0x24000024
 8001270:	2400a2e0 	.word	0x2400a2e0
 8001274:	2400a2e8 	.word	0x2400a2e8
 8001278:	24000028 	.word	0x24000028
 800127c:	0005c3c0 	.word	0x0005c3c0
 8001280:	2400a010 	.word	0x2400a010
 8001284:	2400a2dc 	.word	0x2400a2dc
 8001288:	2400a2fc 	.word	0x2400a2fc
 800128c:	2400b274 	.word	0x2400b274

08001290 <Error_Handler>:
 8001290:	b672      	cpsid	i
  while (1)
 8001292:	e7fe      	b.n	8001292 <Error_Handler+0x2>

08001294 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_MspInit+0x20>)
{
 8001296:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800129c:	f042 0202 	orr.w	r2, r2, #2
 80012a0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80012a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	b002      	add	sp, #8
 80012b2:	4770      	bx	lr
 80012b4:	58024400 	.word	0x58024400

080012b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80012bc:	b0be      	sub	sp, #248	; 0xf8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2100      	movs	r1, #0
{
 80012c0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c2:	22c8      	movs	r2, #200	; 0xc8
 80012c4:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	910a      	str	r1, [sp, #40]	; 0x28
 80012c8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80012cc:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	f004 fd20 	bl	8005d14 <memset>
  if(hi2s->Instance==SPI1)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	4a75      	ldr	r2, [pc, #468]	; (80014ac <HAL_I2S_MspInit+0x1f4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d005      	beq.n	80012e8 <HAL_I2S_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hi2s->Instance==SPI2)
 80012dc:	4a74      	ldr	r2, [pc, #464]	; (80014b0 <HAL_I2S_MspInit+0x1f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d06d      	beq.n	80013be <HAL_I2S_MspInit+0x106>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012e2:	b03e      	add	sp, #248	; 0xf8
 80012e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ec:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f4:	f002 fd1c 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f040 80ce 	bne.w	800149a <HAL_I2S_MspInit+0x1e2>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001300:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8001302:	f04f 0801 	mov.w	r8, #1
 8001306:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	486a      	ldr	r0, [pc, #424]	; (80014b8 <HAL_I2S_MspInit+0x200>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001314:	4d69      	ldr	r5, [pc, #420]	; (80014bc <HAL_I2S_MspInit+0x204>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001316:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800131a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800131e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001332:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001336:	f002 0201 	and.w	r2, r2, #1
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001346:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 800134a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001350:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 8001358:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800135a:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = ADC_WS_PIN_Pin|ADC_CLK_PIN_Pin;
 800135e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001362:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f001 fad1 	bl	800290c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	2302      	movs	r3, #2
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001370:	a906      	add	r1, sp, #24
 8001372:	4853      	ldr	r0, [pc, #332]	; (80014c0 <HAL_I2S_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001374:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = ADC_DATA_PIN_Pin;
 8001376:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800137a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(ADC_DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 800137e:	f001 fac5 	bl	800290c <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001382:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001384:	494f      	ldr	r1, [pc, #316]	; (80014c4 <HAL_I2S_MspInit+0x20c>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001386:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001388:	4628      	mov	r0, r5
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	622b      	str	r3, [r5, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138c:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800138e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001392:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800139e:	616a      	str	r2, [r5, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80013a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a8:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013ac:	f000 fb2a 	bl	8001a04 <HAL_DMA_Init>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d16f      	bne.n	8001494 <HAL_I2S_MspInit+0x1dc>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 80013b4:	64a5      	str	r5, [r4, #72]	; 0x48
 80013b6:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80013b8:	b03e      	add	sp, #248	; 0xf8
 80013ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80013be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c4:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80013c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	f002 fcb1 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d166      	bne.n	80014a0 <HAL_I2S_MspInit+0x1e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_I2S_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d4:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d6:	f04f 0800 	mov.w	r8, #0
 80013da:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	4839      	ldr	r0, [pc, #228]	; (80014c8 <HAL_I2S_MspInit+0x210>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 80013e8:	4d38      	ldr	r5, [pc, #224]	; (80014cc <HAL_I2S_MspInit+0x214>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80013ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80013f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013f6:	9203      	str	r2, [sp, #12]
 80013f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013fe:	f042 0204 	orr.w	r2, r2, #4
 8001402:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001406:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800140a:	f002 0204 	and.w	r2, r2, #4
 800140e:	9204      	str	r2, [sp, #16]
 8001410:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001416:	f042 0202 	orr.w	r2, r2, #2
 800141a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800141e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001424:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001436:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f001 fa67 	bl	800290c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800143e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001442:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	a906      	add	r1, sp, #24
 8001446:	4822      	ldr	r0, [pc, #136]	; (80014d0 <HAL_I2S_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001448:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800144a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800144e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f001 fa5b 	bl	800290c <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001456:	2228      	movs	r2, #40	; 0x28
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	2300      	movs	r3, #0
    hdma_spi2_tx.Instance = DMA2_Stream1;
 800145a:	491e      	ldr	r1, [pc, #120]	; (80014d4 <HAL_I2S_MspInit+0x21c>)
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800145c:	606a      	str	r2, [r5, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001464:	4628      	mov	r0, r5
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	622b      	str	r3, [r5, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800146a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	612a      	str	r2, [r5, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi2_tx.Instance = DMA2_Stream1;
 8001474:	6029      	str	r1, [r5, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001476:	2140      	movs	r1, #64	; 0x40
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001478:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800147c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001480:	60a9      	str	r1, [r5, #8]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001482:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001484:	f000 fabe 	bl	8001a04 <HAL_DMA_Init>
 8001488:	b968      	cbnz	r0, 80014a6 <HAL_I2S_MspInit+0x1ee>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800148a:	6465      	str	r5, [r4, #68]	; 0x44
 800148c:	63ac      	str	r4, [r5, #56]	; 0x38
}
 800148e:	b03e      	add	sp, #248	; 0xf8
 8001490:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001494:	f7ff fefc 	bl	8001290 <Error_Handler>
 8001498:	e78c      	b.n	80013b4 <HAL_I2S_MspInit+0xfc>
      Error_Handler();
 800149a:	f7ff fef9 	bl	8001290 <Error_Handler>
 800149e:	e72e      	b.n	80012fe <HAL_I2S_MspInit+0x46>
      Error_Handler();
 80014a0:	f7ff fef6 	bl	8001290 <Error_Handler>
 80014a4:	e795      	b.n	80013d2 <HAL_I2S_MspInit+0x11a>
      Error_Handler();
 80014a6:	f7ff fef3 	bl	8001290 <Error_Handler>
 80014aa:	e7ee      	b.n	800148a <HAL_I2S_MspInit+0x1d2>
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40003800 	.word	0x40003800
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020000 	.word	0x58020000
 80014bc:	2400a020 	.word	0x2400a020
 80014c0:	58021800 	.word	0x58021800
 80014c4:	40020010 	.word	0x40020010
 80014c8:	58020800 	.word	0x58020800
 80014cc:	2400a098 	.word	0x2400a098
 80014d0:	58020400 	.word	0x58020400
 80014d4:	40020428 	.word	0x40020428

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b530      	push	{r4, r5, lr}
 80014da:	b0bd      	sub	sp, #244	; 0xf4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	2100      	movs	r1, #0
{
 80014de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	22c8      	movs	r2, #200	; 0xc8
 80014e2:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	9108      	str	r1, [sp, #32]
 80014e6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80014ea:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ee:	f004 fc11 	bl	8005d14 <memset>
  if(hspi->Instance==SPI3)
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_SPI_MspInit+0xe0>)
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014fa:	b03d      	add	sp, #244	; 0xf4
 80014fc:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80014fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001502:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001504:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001506:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f002 fc11 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	2800      	cmp	r0, #0
 8001510:	d14f      	bne.n	80015b2 <HAL_SPI_MspInit+0xda>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001514:	2404      	movs	r4, #4
 8001516:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001518:	2107      	movs	r1, #7
    __HAL_RCC_SPI3_CLK_ENABLE();
 800151a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	4828      	ldr	r0, [pc, #160]	; (80015c0 <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001524:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001528:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800152c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001538:	f042 0202 	orr.w	r2, r2, #2
 800153c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001540:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001544:	f002 0202 	and.w	r2, r2, #2
 8001548:	9202      	str	r2, [sp, #8]
 800154a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001550:	f042 0204 	orr.w	r2, r2, #4
 8001554:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800155c:	9108      	str	r1, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001560:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001564:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001568:	2400      	movs	r4, #0
 800156a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156c:	9303      	str	r3, [sp, #12]
 800156e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001570:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f001 f9ca 	bl	800290c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	a904      	add	r1, sp, #16
 8001580:	4810      	ldr	r0, [pc, #64]	; (80015c4 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001582:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001586:	2406      	movs	r4, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001588:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f001 f9bd 	bl	800290c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001596:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	a904      	add	r1, sp, #16
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800159c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800159e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015a2:	2200      	movs	r2, #0
 80015a4:	2303      	movs	r3, #3
 80015a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f001 f9af 	bl	800290c <HAL_GPIO_Init>
}
 80015ae:	b03d      	add	sp, #244	; 0xf4
 80015b0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80015b2:	f7ff fe6d 	bl	8001290 <Error_Handler>
 80015b6:	e7ac      	b.n	8001512 <HAL_SPI_MspInit+0x3a>
 80015b8:	40003c00 	.word	0x40003c00
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58020800 	.word	0x58020800

080015c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler>
 80015ca:	bf00      	nop

080015cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <HardFault_Handler>
 80015ce:	bf00      	nop

080015d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler>
 80015d2:	bf00      	nop

080015d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <BusFault_Handler>
 80015d6:	bf00      	nop

080015d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler>
 80015da:	bf00      	nop

080015dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <DebugMon_Handler>:
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <PendSV_Handler>:
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 b88c 	b.w	8001704 <HAL_IncTick>

080015ec <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015ec:	4801      	ldr	r0, [pc, #4]	; (80015f4 <DMA1_Stream0_IRQHandler+0x8>)
 80015ee:	f000 be3f 	b.w	8002270 <HAL_DMA_IRQHandler>
 80015f2:	bf00      	nop
 80015f4:	2400a020 	.word	0x2400a020

080015f8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80015f8:	4801      	ldr	r0, [pc, #4]	; (8001600 <DMA2_Stream1_IRQHandler+0x8>)
 80015fa:	f000 be39 	b.w	8002270 <HAL_DMA_IRQHandler>
 80015fe:	bf00      	nop
 8001600:	2400a098 	.word	0x2400a098

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7fe fe66 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f004 fb77 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fbd1 	bl	8000ddc <main>
  bx  lr
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001640:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001644:	240003a4 	.word	0x240003a4
  ldr r2, =_sidata
 8001648:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 800164c:	240003a4 	.word	0x240003a4
  ldr r4, =_ebss
 8001650:	2400b50c 	.word	0x2400b50c

08001654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC3_IRQHandler>
	...

08001658 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_InitTick+0x40>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b90b      	cbnz	r3, 8001662 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001660:	4770      	bx	lr
{
 8001662:	b510      	push	{r4, lr}
 8001664:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_InitTick+0x44>)
 800166c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001670:	6810      	ldr	r0, [r2, #0]
 8001672:	fbb0 f0f3 	udiv	r0, r0, r3
 8001676:	f000 f8cd 	bl	8001814 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	2c0f      	cmp	r4, #15
 800167c:	d800      	bhi.n	8001680 <HAL_InitTick+0x28>
 800167e:	b108      	cbz	r0, 8001684 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
}
 8001682:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	4621      	mov	r1, r4
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f876 	bl	800177c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_InitTick+0x48>)
 8001692:	2000      	movs	r0, #0
 8001694:	601c      	str	r4, [r3, #0]
}
 8001696:	bd10      	pop	{r4, pc}
 8001698:	2400039c 	.word	0x2400039c
 800169c:	24000000 	.word	0x24000000
 80016a0:	240003a0 	.word	0x240003a0

080016a4 <HAL_Init>:
{
 80016a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a8:	4c12      	ldr	r4, [pc, #72]	; (80016f4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	f000 f855 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ae:	f001 fff9 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_Init+0x54>)
 80016b4:	4911      	ldr	r1, [pc, #68]	; (80016fc <HAL_Init+0x58>)
 80016b6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016cc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80016d6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d8:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016da:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	f7ff ffbc 	bl	8001658 <HAL_InitTick>
 80016e0:	b110      	cbz	r0, 80016e8 <HAL_Init+0x44>
    return HAL_ERROR;
 80016e2:	2401      	movs	r4, #1
}
 80016e4:	4620      	mov	r0, r4
 80016e6:	bd10      	pop	{r4, pc}
 80016e8:	4604      	mov	r4, r0
  HAL_MspInit();
 80016ea:	f7ff fdd3 	bl	8001294 <HAL_MspInit>
}
 80016ee:	4620      	mov	r0, r4
 80016f0:	bd10      	pop	{r4, pc}
 80016f2:	bf00      	nop
 80016f4:	24000004 	.word	0x24000004
 80016f8:	58024400 	.word	0x58024400
 80016fc:	08006960 	.word	0x08006960
 8001700:	24000000 	.word	0x24000000

08001704 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x10>)
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_IncTick+0x14>)
 8001708:	6811      	ldr	r1, [r2, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	440b      	add	r3, r1
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2400b508 	.word	0x2400b508
 8001718:	2400039c 	.word	0x2400039c

0800171c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800171c:	4b01      	ldr	r3, [pc, #4]	; (8001724 <HAL_GetTick+0x8>)
 800171e:	6818      	ldr	r0, [r3, #0]
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2400b508 	.word	0x2400b508

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fff6 	bl	800171c <HAL_GetTick>
 8001730:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	1c63      	adds	r3, r4, #1
 8001734:	d002      	beq.n	800173c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_Delay+0x20>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	1b43      	subs	r3, r0, r5
 8001742:	42a3      	cmp	r3, r4
 8001744:	d3fa      	bcc.n	800173c <HAL_Delay+0x14>
  {
  }
}
 8001746:	bd38      	pop	{r3, r4, r5, pc}
 8001748:	2400039c 	.word	0x2400039c

0800174c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <HAL_GetREVID+0x8>)
 800174e:	6818      	ldr	r0, [r3, #0]
}
 8001750:	0c00      	lsrs	r0, r0, #16
 8001752:	4770      	bx	lr
 8001754:	5c001000 	.word	0x5c001000

08001758 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001762:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001768:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800176e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001770:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	05fa0000 	.word	0x05fa0000

0800177c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_NVIC_SetPriority+0x70>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001786:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178e:	f1be 0f04 	cmp.w	lr, #4
 8001792:	bf28      	it	cs
 8001794:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001798:	f1bc 0f06 	cmp.w	ip, #6
 800179c:	d91a      	bls.n	80017d4 <HAL_NVIC_SetPriority+0x58>
 800179e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 3cff 	mov.w	ip, #4294967295
 80017a4:	fa0c fc03 	lsl.w	ip, ip, r3
 80017a8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80017b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80017b6:	ea21 010c 	bic.w	r1, r1, ip
 80017ba:	fa01 f103 	lsl.w	r1, r1, r3
 80017be:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80017c2:	db0a      	blt.n	80017da <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	0109      	lsls	r1, r1, #4
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_NVIC_SetPriority+0x74>)
 80017c8:	b2c9      	uxtb	r1, r1
 80017ca:	4403      	add	r3, r0
 80017cc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	4613      	mov	r3, r2
 80017d8:	e7e8      	b.n	80017ac <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	f000 000f 	and.w	r0, r0, #15
 80017de:	0109      	lsls	r1, r1, #4
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_NVIC_SetPriority+0x78>)
 80017e2:	b2c9      	uxtb	r1, r1
 80017e4:	4403      	add	r3, r0
 80017e6:	7619      	strb	r1, [r3, #24]
 80017e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ecfc 	.word	0xe000ecfc

080017f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017f8:	2800      	cmp	r0, #0
 80017fa:	db07      	blt.n	800180c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fc:	2301      	movs	r3, #1
 80017fe:	f000 011f 	and.w	r1, r0, #31
 8001802:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_NVIC_EnableIRQ+0x18>)
 8001804:	0940      	lsrs	r0, r0, #5
 8001806:	408b      	lsls	r3, r1
 8001808:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	1e43      	subs	r3, r0, #1
 8001816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181a:	d20c      	bcs.n	8001836 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	4906      	ldr	r1, [pc, #24]	; (800183c <HAL_SYSTICK_Config+0x28>)
 8001824:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001828:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001840:	6802      	ldr	r2, [r0, #0]
{
 8001842:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <DMA_CalcBaseAndBitshift+0xd0>)
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <DMA_CalcBaseAndBitshift+0xd4>)
{
 8001848:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800184a:	4e33      	ldr	r6, [pc, #204]	; (8001918 <DMA_CalcBaseAndBitshift+0xd8>)
 800184c:	4d33      	ldr	r5, [pc, #204]	; (800191c <DMA_CalcBaseAndBitshift+0xdc>)
 800184e:	42b2      	cmp	r2, r6
 8001850:	bf18      	it	ne
 8001852:	429a      	cmpne	r2, r3
 8001854:	4c32      	ldr	r4, [pc, #200]	; (8001920 <DMA_CalcBaseAndBitshift+0xe0>)
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	42aa      	cmp	r2, r5
 800185e:	bf08      	it	eq
 8001860:	f043 0301 	orreq.w	r3, r3, #1
 8001864:	42a2      	cmp	r2, r4
 8001866:	bf08      	it	eq
 8001868:	f043 0301 	orreq.w	r3, r3, #1
 800186c:	3430      	adds	r4, #48	; 0x30
 800186e:	4282      	cmp	r2, r0
 8001870:	bf08      	it	eq
 8001872:	f043 0301 	orreq.w	r3, r3, #1
 8001876:	3030      	adds	r0, #48	; 0x30
 8001878:	42a2      	cmp	r2, r4
 800187a:	bf08      	it	eq
 800187c:	f043 0301 	orreq.w	r3, r3, #1
 8001880:	3430      	adds	r4, #48	; 0x30
 8001882:	4282      	cmp	r2, r0
 8001884:	bf08      	it	eq
 8001886:	f043 0301 	orreq.w	r3, r3, #1
 800188a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800188e:	42a2      	cmp	r2, r4
 8001890:	bf08      	it	eq
 8001892:	f043 0301 	orreq.w	r3, r3, #1
 8001896:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800189a:	4282      	cmp	r2, r0
 800189c:	bf08      	it	eq
 800189e:	f043 0301 	orreq.w	r3, r3, #1
 80018a2:	3030      	adds	r0, #48	; 0x30
 80018a4:	42a2      	cmp	r2, r4
 80018a6:	bf08      	it	eq
 80018a8:	f043 0301 	orreq.w	r3, r3, #1
 80018ac:	3430      	adds	r4, #48	; 0x30
 80018ae:	4282      	cmp	r2, r0
 80018b0:	bf08      	it	eq
 80018b2:	f043 0301 	orreq.w	r3, r3, #1
 80018b6:	3030      	adds	r0, #48	; 0x30
 80018b8:	42a2      	cmp	r2, r4
 80018ba:	bf08      	it	eq
 80018bc:	f043 0301 	orreq.w	r3, r3, #1
 80018c0:	3430      	adds	r4, #48	; 0x30
 80018c2:	4282      	cmp	r2, r0
 80018c4:	bf08      	it	eq
 80018c6:	f043 0301 	orreq.w	r3, r3, #1
 80018ca:	3030      	adds	r0, #48	; 0x30
 80018cc:	42a2      	cmp	r2, r4
 80018ce:	bf08      	it	eq
 80018d0:	f043 0301 	orreq.w	r3, r3, #1
 80018d4:	4282      	cmp	r2, r0
 80018d6:	bf08      	it	eq
 80018d8:	f043 0301 	orreq.w	r3, r3, #1
 80018dc:	b913      	cbnz	r3, 80018e4 <DMA_CalcBaseAndBitshift+0xa4>
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <DMA_CalcBaseAndBitshift+0xe4>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d112      	bne.n	800190a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80018e4:	b2d3      	uxtb	r3, r2
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018e8:	4c10      	ldr	r4, [pc, #64]	; (800192c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80018ea:	3b10      	subs	r3, #16
 80018ec:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80018f0:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80018f2:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80018f6:	5c20      	ldrb	r0, [r4, r0]
 80018f8:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <DMA_CalcBaseAndBitshift+0xf0>)
 80018fc:	ea00 0002 	and.w	r0, r0, r2
 8001900:	bf88      	it	hi
 8001902:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001904:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001906:	bc70      	pop	{r4, r5, r6}
 8001908:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800190a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800190e:	e7f9      	b.n	8001904 <DMA_CalcBaseAndBitshift+0xc4>
 8001910:	40020010 	.word	0x40020010
 8001914:	40020070 	.word	0x40020070
 8001918:	40020028 	.word	0x40020028
 800191c:	40020040 	.word	0x40020040
 8001920:	40020058 	.word	0x40020058
 8001924:	400204b8 	.word	0x400204b8
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	08006970 	.word	0x08006970
 8001930:	fffffc00 	.word	0xfffffc00

08001934 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001934:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001938:	4927      	ldr	r1, [pc, #156]	; (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800193a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800193c:	4d27      	ldr	r5, [pc, #156]	; (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800193e:	4c28      	ldr	r4, [pc, #160]	; (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001940:	42ab      	cmp	r3, r5
 8001942:	bf18      	it	ne
 8001944:	4293      	cmpne	r3, r2
 8001946:	bf0c      	ite	eq
 8001948:	2201      	moveq	r2, #1
 800194a:	2200      	movne	r2, #0
 800194c:	428b      	cmp	r3, r1
 800194e:	bf08      	it	eq
 8001950:	f042 0201 	orreq.w	r2, r2, #1
 8001954:	3128      	adds	r1, #40	; 0x28
 8001956:	42a3      	cmp	r3, r4
 8001958:	bf08      	it	eq
 800195a:	f042 0201 	orreq.w	r2, r2, #1
 800195e:	3428      	adds	r4, #40	; 0x28
 8001960:	428b      	cmp	r3, r1
 8001962:	bf08      	it	eq
 8001964:	f042 0201 	orreq.w	r2, r2, #1
 8001968:	3128      	adds	r1, #40	; 0x28
 800196a:	42a3      	cmp	r3, r4
 800196c:	bf08      	it	eq
 800196e:	f042 0201 	orreq.w	r2, r2, #1
 8001972:	428b      	cmp	r3, r1
 8001974:	bf08      	it	eq
 8001976:	f042 0201 	orreq.w	r2, r2, #1
 800197a:	b912      	cbnz	r2, 8001982 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d113      	bne.n	80019aa <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4918      	ldr	r1, [pc, #96]	; (80019e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001988:	3b08      	subs	r3, #8
 800198a:	4c19      	ldr	r4, [pc, #100]	; (80019f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800198c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001990:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001992:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001996:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800199a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80019a2:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80019a6:	bc30      	pop	{r4, r5}
 80019a8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80019aa:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80019ac:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80019ae:	4c12      	ldr	r4, [pc, #72]	; (80019f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 80019b0:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80019b2:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80019b4:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80019b8:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80019ba:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80019be:	d800      	bhi.n	80019c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80019c0:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80019c4:	f001 041f 	and.w	r4, r1, #31
 80019c8:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80019ca:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80019cc:	40a3      	lsls	r3, r4
 80019ce:	4c0c      	ldr	r4, [pc, #48]	; (8001a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80019d0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80019d2:	e7e5      	b.n	80019a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80019d4:	58025408 	.word	0x58025408
 80019d8:	58025430 	.word	0x58025430
 80019dc:	5802541c 	.word	0x5802541c
 80019e0:	58025444 	.word	0x58025444
 80019e4:	58025494 	.word	0x58025494
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	16009600 	.word	0x16009600
 80019f0:	58025880 	.word	0x58025880
 80019f4:	bffdfbf0 	.word	0xbffdfbf0
 80019f8:	aaaaaaab 	.word	0xaaaaaaab
 80019fc:	10008200 	.word	0x10008200
 8001a00:	40020880 	.word	0x40020880

08001a04 <HAL_DMA_Init>:
{
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a08:	4605      	mov	r5, r0
 8001a0a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fe86 	bl	800171c <HAL_GetTick>
  if(hdma == NULL)
 8001a10:	2d00      	cmp	r5, #0
 8001a12:	f000 8199 	beq.w	8001d48 <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a16:	682c      	ldr	r4, [r5, #0]
 8001a18:	4606      	mov	r6, r0
 8001a1a:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <HAL_DMA_Init+0x298>)
 8001a1c:	429c      	cmp	r4, r3
 8001a1e:	d048      	beq.n	8001ab2 <HAL_DMA_Init+0xae>
 8001a20:	3318      	adds	r3, #24
 8001a22:	429c      	cmp	r4, r3
 8001a24:	d045      	beq.n	8001ab2 <HAL_DMA_Init+0xae>
 8001a26:	3330      	adds	r3, #48	; 0x30
 8001a28:	4a9d      	ldr	r2, [pc, #628]	; (8001ca0 <HAL_DMA_Init+0x29c>)
 8001a2a:	4294      	cmp	r4, r2
 8001a2c:	bf18      	it	ne
 8001a2e:	429c      	cmpne	r4, r3
 8001a30:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	4294      	cmp	r4, r2
 8001a3c:	bf08      	it	eq
 8001a3e:	f043 0301 	orreq.w	r3, r3, #1
 8001a42:	3218      	adds	r2, #24
 8001a44:	4294      	cmp	r4, r2
 8001a46:	bf08      	it	eq
 8001a48:	f043 0301 	orreq.w	r3, r3, #1
 8001a4c:	3218      	adds	r2, #24
 8001a4e:	4294      	cmp	r4, r2
 8001a50:	bf08      	it	eq
 8001a52:	f043 0301 	orreq.w	r3, r3, #1
 8001a56:	3218      	adds	r2, #24
 8001a58:	4294      	cmp	r4, r2
 8001a5a:	bf08      	it	eq
 8001a5c:	f043 0301 	orreq.w	r3, r3, #1
 8001a60:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001a64:	4294      	cmp	r4, r2
 8001a66:	bf08      	it	eq
 8001a68:	f043 0301 	orreq.w	r3, r3, #1
 8001a6c:	3218      	adds	r2, #24
 8001a6e:	4294      	cmp	r4, r2
 8001a70:	bf08      	it	eq
 8001a72:	f043 0301 	orreq.w	r3, r3, #1
 8001a76:	3218      	adds	r2, #24
 8001a78:	4294      	cmp	r4, r2
 8001a7a:	bf08      	it	eq
 8001a7c:	f043 0301 	orreq.w	r3, r3, #1
 8001a80:	3218      	adds	r2, #24
 8001a82:	4294      	cmp	r4, r2
 8001a84:	bf08      	it	eq
 8001a86:	f043 0301 	orreq.w	r3, r3, #1
 8001a8a:	3218      	adds	r2, #24
 8001a8c:	4294      	cmp	r4, r2
 8001a8e:	bf08      	it	eq
 8001a90:	f043 0301 	orreq.w	r3, r3, #1
 8001a94:	3218      	adds	r2, #24
 8001a96:	4294      	cmp	r4, r2
 8001a98:	bf08      	it	eq
 8001a9a:	f043 0301 	orreq.w	r3, r3, #1
 8001a9e:	3218      	adds	r2, #24
 8001aa0:	4294      	cmp	r4, r2
 8001aa2:	bf08      	it	eq
 8001aa4:	f043 0301 	orreq.w	r3, r3, #1
 8001aa8:	b91b      	cbnz	r3, 8001ab2 <HAL_DMA_Init+0xae>
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <HAL_DMA_Init+0x2a0>)
 8001aac:	429c      	cmp	r4, r3
 8001aae:	f040 81a4 	bne.w	8001dfa <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	e006      	b.n	8001ad6 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac8:	f7ff fe28 	bl	800171c <HAL_GetTick>
 8001acc:	1b80      	subs	r0, r0, r6
 8001ace:	2805      	cmp	r0, #5
 8001ad0:	f200 8120 	bhi.w	8001d14 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ad4:	682c      	ldr	r4, [r5, #0]
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	07df      	lsls	r7, r3, #31
 8001ada:	d4f5      	bmi.n	8001ac8 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 8001adc:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8001ae2:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae4:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ae6:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6969      	ldr	r1, [r5, #20]
 8001aec:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	69e9      	ldr	r1, [r5, #28]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af4:	496c      	ldr	r1, [pc, #432]	; (8001ca8 <HAL_DMA_Init+0x2a4>)
 8001af6:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8001af8:	6a28      	ldr	r0, [r5, #32]
 8001afa:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001afc:	486b      	ldr	r0, [pc, #428]	; (8001cac <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 8001afe:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b02:	2904      	cmp	r1, #4
 8001b04:	f000 8124 	beq.w	8001d50 <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b08:	6806      	ldr	r6, [r0, #0]
 8001b0a:	4869      	ldr	r0, [pc, #420]	; (8001cb0 <HAL_DMA_Init+0x2ac>)
 8001b0c:	4030      	ands	r0, r6
 8001b0e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8001b12:	f080 80dd 	bcs.w	8001cd0 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b16:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b18:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b1a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001b1e:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b20:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	4628      	mov	r0, r5
 8001b24:	f7ff fe8c 	bl	8001840 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b28:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001b2a:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b2c:	495b      	ldr	r1, [pc, #364]	; (8001c9c <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b2e:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b32:	4e60      	ldr	r6, [pc, #384]	; (8001cb4 <HAL_DMA_Init+0x2b0>)
 8001b34:	4f60      	ldr	r7, [pc, #384]	; (8001cb8 <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b36:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b38:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_DMA_Init+0x2b8>)
 8001b3a:	1ba6      	subs	r6, r4, r6
 8001b3c:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b3e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b40:	eba4 0b02 	sub.w	fp, r4, r2
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_DMA_Init+0x2bc>)
 8001b46:	fab6 f686 	clz	r6, r6
 8001b4a:	fabb fb8b 	clz	fp, fp
 8001b4e:	fab7 f787 	clz	r7, r7
 8001b52:	eba4 0a03 	sub.w	sl, r4, r3
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_DMA_Init+0x2c0>)
 8001b58:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001b5c:	485a      	ldr	r0, [pc, #360]	; (8001cc8 <HAL_DMA_Init+0x2c4>)
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	bf18      	it	ne
 8001b62:	428c      	cmpne	r4, r1
 8001b64:	f103 0318 	add.w	r3, r3, #24
 8001b68:	faba fa8a 	clz	sl, sl
 8001b6c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8001b70:	bf0c      	ite	eq
 8001b72:	2101      	moveq	r1, #1
 8001b74:	2100      	movne	r1, #0
 8001b76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001b7a:	1a22      	subs	r2, r4, r0
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	bf08      	it	eq
 8001b80:	f041 0101 	orreq.w	r1, r1, #1
 8001b84:	3318      	adds	r3, #24
 8001b86:	097f      	lsrs	r7, r7, #5
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	429c      	cmp	r4, r3
 8001b8e:	bf08      	it	eq
 8001b90:	f041 0101 	orreq.w	r1, r1, #1
 8001b94:	3318      	adds	r3, #24
 8001b96:	0952      	lsrs	r2, r2, #5
 8001b98:	429c      	cmp	r4, r3
 8001b9a:	bf08      	it	eq
 8001b9c:	f041 0101 	orreq.w	r1, r1, #1
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	f041 0101 	orreq.w	r1, r1, #1
 8001bac:	3318      	adds	r3, #24
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	bf08      	it	eq
 8001bb2:	f041 0101 	orreq.w	r1, r1, #1
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	bf08      	it	eq
 8001bbc:	f041 0101 	orreq.w	r1, r1, #1
 8001bc0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001bc4:	429c      	cmp	r4, r3
 8001bc6:	bf08      	it	eq
 8001bc8:	f041 0101 	orreq.w	r1, r1, #1
 8001bcc:	3318      	adds	r3, #24
 8001bce:	429c      	cmp	r4, r3
 8001bd0:	bf08      	it	eq
 8001bd2:	f041 0101 	orreq.w	r1, r1, #1
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	429c      	cmp	r4, r3
 8001bda:	bf08      	it	eq
 8001bdc:	f041 0101 	orreq.w	r1, r1, #1
 8001be0:	3318      	adds	r3, #24
 8001be2:	429c      	cmp	r4, r3
 8001be4:	bf08      	it	eq
 8001be6:	f041 0101 	orreq.w	r1, r1, #1
 8001bea:	3318      	adds	r3, #24
 8001bec:	429c      	cmp	r4, r3
 8001bee:	bf08      	it	eq
 8001bf0:	f041 0101 	orreq.w	r1, r1, #1
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	bf08      	it	eq
 8001bfa:	f041 0101 	orreq.w	r1, r1, #1
 8001bfe:	3318      	adds	r3, #24
 8001c00:	429c      	cmp	r4, r3
 8001c02:	bf08      	it	eq
 8001c04:	f041 0101 	orreq.w	r1, r1, #1
 8001c08:	3318      	adds	r3, #24
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	bf08      	it	eq
 8001c0e:	f041 0101 	orreq.w	r1, r1, #1
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_DMA_Init+0x2c8>)
 8001c14:	ea4b 0101 	orr.w	r1, fp, r1
 8001c18:	eba4 0803 	sub.w	r8, r4, r3
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	ea4a 0101 	orr.w	r1, sl, r1
 8001c22:	fab8 f888 	clz	r8, r8
 8001c26:	eba4 0903 	sub.w	r9, r4, r3
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	4331      	orrs	r1, r6
 8001c2e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001c32:	fab9 f989 	clz	r9, r9
 8001c36:	1ae3      	subs	r3, r4, r3
 8001c38:	4339      	orrs	r1, r7
 8001c3a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	ea48 0101 	orr.w	r1, r8, r1
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	ea49 0101 	orr.w	r1, r9, r1
 8001c4c:	4319      	orrs	r1, r3
 8001c4e:	d100      	bne.n	8001c52 <HAL_DMA_Init+0x24e>
 8001c50:	b1da      	cbz	r2, 8001c8a <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c52:	4628      	mov	r0, r5
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f7ff fe6d 	bl	8001934 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c5a:	68a9      	ldr	r1, [r5, #8]
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	2980      	cmp	r1, #128	; 0x80
 8001c60:	d066      	beq.n	8001d30 <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c62:	6868      	ldr	r0, [r5, #4]
 8001c64:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001c66:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c68:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6a:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c6e:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c70:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c72:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c76:	d862      	bhi.n	8001d3e <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001c78:	1e61      	subs	r1, r4, #1
 8001c7a:	2907      	cmp	r1, #7
 8001c7c:	d979      	bls.n	8001d72 <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c7e:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8001c80:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c84:	2100      	movs	r1, #0
 8001c86:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c88:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8e:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001c90:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8001c94:	b003      	add	sp, #12
 8001c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020010 	.word	0x40020010
 8001ca0:	40020040 	.word	0x40020040
 8001ca4:	400204b8 	.word	0x400204b8
 8001ca8:	fe10803f 	.word	0xfe10803f
 8001cac:	5c001000 	.word	0x5c001000
 8001cb0:	ffff0000 	.word	0xffff0000
 8001cb4:	58025430 	.word	0x58025430
 8001cb8:	58025444 	.word	0x58025444
 8001cbc:	58025408 	.word	0x58025408
 8001cc0:	5802541c 	.word	0x5802541c
 8001cc4:	40020028 	.word	0x40020028
 8001cc8:	58025494 	.word	0x58025494
 8001ccc:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cd0:	6868      	ldr	r0, [r5, #4]
 8001cd2:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8001cd6:	2e1f      	cmp	r6, #31
 8001cd8:	d925      	bls.n	8001d26 <HAL_DMA_Init+0x322>
 8001cda:	384f      	subs	r0, #79	; 0x4f
 8001cdc:	2803      	cmp	r0, #3
 8001cde:	d801      	bhi.n	8001ce4 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8001ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ce4:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce6:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ce8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cea:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001cee:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf2:	f47f af15 	bne.w	8001b20 <HAL_DMA_Init+0x11c>
 8001cf6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001cf8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001cfa:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	f43f af0f 	beq.w	8001b20 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d153      	bne.n	8001dae <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8001d06:	2901      	cmp	r1, #1
 8001d08:	d072      	beq.n	8001df0 <HAL_DMA_Init+0x3ec>
 8001d0a:	f031 0202 	bics.w	r2, r1, #2
 8001d0e:	f47f af07 	bne.w	8001b20 <HAL_DMA_Init+0x11c>
 8001d12:	e054      	b.n	8001dbe <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d16:	2303      	movs	r3, #3
        return HAL_ERROR;
 8001d18:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1a:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d1c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8001d20:	b003      	add	sp, #12
 8001d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d26:	4878      	ldr	r0, [pc, #480]	; (8001f08 <HAL_DMA_Init+0x504>)
 8001d28:	40f0      	lsrs	r0, r6
 8001d2a:	07c0      	lsls	r0, r0, #31
 8001d2c:	d5da      	bpl.n	8001ce4 <HAL_DMA_Init+0x2e0>
 8001d2e:	e7d7      	b.n	8001ce0 <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d30:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d32:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8001d34:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d38:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d3a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8001d3e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d40:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d44:	676b      	str	r3, [r5, #116]	; 0x74
 8001d46:	e7a0      	b.n	8001c8a <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d50:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d52:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 8001d56:	4306      	orrs	r6, r0
 8001d58:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d5a:	4e6c      	ldr	r6, [pc, #432]	; (8001f0c <HAL_DMA_Init+0x508>)
 8001d5c:	403e      	ands	r6, r7
 8001d5e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8001d62:	d2b5      	bcs.n	8001cd0 <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d64:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d66:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d68:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	e7c2      	b.n	8001cf8 <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d72:	9a01      	ldr	r2, [sp, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	ea49 0902 	orr.w	r9, r9, r2
 8001d7a:	ea48 0809 	orr.w	r8, r8, r9
 8001d7e:	ea47 0708 	orr.w	r7, r7, r8
 8001d82:	433e      	orrs	r6, r7
 8001d84:	ea5a 0606 	orrs.w	r6, sl, r6
 8001d88:	d107      	bne.n	8001d9a <HAL_DMA_Init+0x396>
 8001d8a:	f1bb 0f00 	cmp.w	fp, #0
 8001d8e:	d104      	bne.n	8001d9a <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d90:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d92:	4860      	ldr	r0, [pc, #384]	; (8001f14 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d94:	4423      	add	r3, r4
 8001d96:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d98:	e003      	b.n	8001da2 <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001d9c:	485f      	ldr	r0, [pc, #380]	; (8001f1c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d9e:	4423      	add	r3, r4
 8001da0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001da2:	2201      	movs	r2, #1
 8001da4:	408a      	lsls	r2, r1
 8001da6:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 8001daa:	676a      	str	r2, [r5, #116]	; 0x74
 8001dac:	e76a      	b.n	8001c84 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 8001db4:	2902      	cmp	r1, #2
 8001db6:	d905      	bls.n	8001dc4 <HAL_DMA_Init+0x3c0>
 8001db8:	2903      	cmp	r1, #3
 8001dba:	f47f aeb1 	bne.w	8001b20 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dbe:	01c2      	lsls	r2, r0, #7
 8001dc0:	f57f aeae 	bpl.w	8001b20 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc6:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8001dc8:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dca:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8001dd0:	e7a6      	b.n	8001d20 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8001dd2:	2903      	cmp	r1, #3
 8001dd4:	f63f aea4 	bhi.w	8001b20 <HAL_DMA_Init+0x11c>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_DMA_Init+0x3dc>)
 8001dda:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001dc5 	.word	0x08001dc5
 8001de4:	08001dbf 	.word	0x08001dbf
 8001de8:	08001dc5 	.word	0x08001dc5
 8001dec:	08001df1 	.word	0x08001df1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df0:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001df4:	f47f ae94 	bne.w	8001b20 <HAL_DMA_Init+0x11c>
 8001df8:	e7e4      	b.n	8001dc4 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dfa:	4a49      	ldr	r2, [pc, #292]	; (8001f20 <HAL_DMA_Init+0x51c>)
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_DMA_Init+0x520>)
 8001dfe:	eba4 0b02 	sub.w	fp, r4, r2
 8001e02:	4e49      	ldr	r6, [pc, #292]	; (8001f28 <HAL_DMA_Init+0x524>)
 8001e04:	eba4 0a03 	sub.w	sl, r4, r3
 8001e08:	4f48      	ldr	r7, [pc, #288]	; (8001f2c <HAL_DMA_Init+0x528>)
 8001e0a:	fabb fb8b 	clz	fp, fp
 8001e0e:	1ba6      	subs	r6, r4, r6
 8001e10:	faba fa8a 	clz	sl, sl
 8001e14:	333c      	adds	r3, #60	; 0x3c
 8001e16:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001e1a:	fab6 f686 	clz	r6, r6
 8001e1e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001e22:	1be7      	subs	r7, r4, r7
 8001e24:	eba4 0803 	sub.w	r8, r4, r3
 8001e28:	0976      	lsrs	r6, r6, #5
 8001e2a:	3314      	adds	r3, #20
 8001e2c:	fab7 f787 	clz	r7, r7
 8001e30:	ea4b 010a 	orr.w	r1, fp, sl
 8001e34:	fab8 f888 	clz	r8, r8
 8001e38:	eba4 0903 	sub.w	r9, r4, r3
 8001e3c:	097f      	lsrs	r7, r7, #5
 8001e3e:	4331      	orrs	r1, r6
 8001e40:	3314      	adds	r3, #20
 8001e42:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001e46:	fab9 f989 	clz	r9, r9
 8001e4a:	4339      	orrs	r1, r7
 8001e4c:	1ae3      	subs	r3, r4, r3
 8001e4e:	4838      	ldr	r0, [pc, #224]	; (8001f30 <HAL_DMA_Init+0x52c>)
 8001e50:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001e54:	ea48 0101 	orr.w	r1, r8, r1
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	1a22      	subs	r2, r4, r0
 8001e5e:	ea49 0101 	orr.w	r1, r9, r1
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	4319      	orrs	r1, r3
 8001e6a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Init+0x472>
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d041      	beq.n	8001efa <HAL_DMA_Init+0x4f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e76:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e78:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001f3c <HAL_DMA_Init+0x538>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001e80:	2100      	movs	r1, #0
 8001e82:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e86:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e88:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e8c:	68a9      	ldr	r1, [r5, #8]
 8001e8e:	2940      	cmp	r1, #64	; 0x40
 8001e90:	d030      	beq.n	8001ef4 <HAL_DMA_Init+0x4f0>
 8001e92:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 8001e96:	fab1 f181 	clz	r1, r1
 8001e9a:	0949      	lsrs	r1, r1, #5
 8001e9c:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ea0:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ea2:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ea4:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_DMA_Init+0x530>)
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eae:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001eb0:	4422      	add	r2, r4
 8001eb2:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001eb6:	69a9      	ldr	r1, [r5, #24]
 8001eb8:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ebc:	69e9      	ldr	r1, [r5, #28]
 8001ebe:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ec2:	6a29      	ldr	r1, [r5, #32]
 8001ec4:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8001ec8:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ecc:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ed0:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ed2:	4919      	ldr	r1, [pc, #100]	; (8001f38 <HAL_DMA_Init+0x534>)
 8001ed4:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed8:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001eda:	0909      	lsrs	r1, r1, #4
 8001edc:	0089      	lsls	r1, r1, #2
 8001ede:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ee0:	f7ff fcae 	bl	8001840 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ee4:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	f001 041f 	and.w	r4, r1, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	40a1      	lsls	r1, r4
 8001ef0:	6041      	str	r1, [r0, #4]
 8001ef2:	e6ae      	b.n	8001c52 <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ef4:	f04f 0e10 	mov.w	lr, #16
 8001ef8:	e7d2      	b.n	8001ea0 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efa:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001efc:	2303      	movs	r3, #3
    return HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f00:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f02:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8001f06:	e70b      	b.n	8001d20 <HAL_DMA_Init+0x31c>
 8001f08:	c3c0003f 	.word	0xc3c0003f
 8001f0c:	ffff0000 	.word	0xffff0000
 8001f10:	1000823f 	.word	0x1000823f
 8001f14:	40020940 	.word	0x40020940
 8001f18:	1600963f 	.word	0x1600963f
 8001f1c:	58025940 	.word	0x58025940
 8001f20:	58025408 	.word	0x58025408
 8001f24:	5802541c 	.word	0x5802541c
 8001f28:	58025430 	.word	0x58025430
 8001f2c:	58025444 	.word	0x58025444
 8001f30:	58025494 	.word	0x58025494
 8001f34:	a7fdabf8 	.word	0xa7fdabf8
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	fffe000f 	.word	0xfffe000f

08001f40 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	f000 8177 	beq.w	8002234 <HAL_DMA_Start_IT+0x2f4>
 8001f46:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8001f48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001f4c:	2801      	cmp	r0, #1
 8001f4e:	f000 8173 	beq.w	8002238 <HAL_DMA_Start_IT+0x2f8>
 8001f52:	2001      	movs	r0, #1
{
 8001f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f58:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001f5c:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f60:	4284      	cmp	r4, r0
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8001f68:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f6a:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001f6e:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8001f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8001f78:	f8dc 4000 	ldr.w	r4, [ip]
 8001f7c:	4d53      	ldr	r5, [pc, #332]	; (80020cc <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7e:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f82:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001f84:	4e52      	ldr	r6, [pc, #328]	; (80020d0 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f86:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001f8a:	4852      	ldr	r0, [pc, #328]	; (80020d4 <HAL_DMA_Start_IT+0x194>)
 8001f8c:	42ac      	cmp	r4, r5
 8001f8e:	bf18      	it	ne
 8001f90:	4284      	cmpne	r4, r0
 8001f92:	f105 0518 	add.w	r5, r5, #24
 8001f96:	bf0c      	ite	eq
 8001f98:	2001      	moveq	r0, #1
 8001f9a:	2000      	movne	r0, #0
 8001f9c:	42ac      	cmp	r4, r5
 8001f9e:	bf08      	it	eq
 8001fa0:	f040 0001 	orreq.w	r0, r0, #1
 8001fa4:	3518      	adds	r5, #24
 8001fa6:	42ac      	cmp	r4, r5
 8001fa8:	bf08      	it	eq
 8001faa:	f040 0001 	orreq.w	r0, r0, #1
 8001fae:	3518      	adds	r5, #24
 8001fb0:	42ac      	cmp	r4, r5
 8001fb2:	bf08      	it	eq
 8001fb4:	f040 0001 	orreq.w	r0, r0, #1
 8001fb8:	3518      	adds	r5, #24
 8001fba:	42ac      	cmp	r4, r5
 8001fbc:	bf08      	it	eq
 8001fbe:	f040 0001 	orreq.w	r0, r0, #1
 8001fc2:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001fc6:	42ac      	cmp	r4, r5
 8001fc8:	bf08      	it	eq
 8001fca:	f040 0001 	orreq.w	r0, r0, #1
 8001fce:	3518      	adds	r5, #24
 8001fd0:	42ac      	cmp	r4, r5
 8001fd2:	bf08      	it	eq
 8001fd4:	f040 0001 	orreq.w	r0, r0, #1
 8001fd8:	3518      	adds	r5, #24
 8001fda:	42ac      	cmp	r4, r5
 8001fdc:	bf08      	it	eq
 8001fde:	f040 0001 	orreq.w	r0, r0, #1
 8001fe2:	3518      	adds	r5, #24
 8001fe4:	42ac      	cmp	r4, r5
 8001fe6:	bf08      	it	eq
 8001fe8:	f040 0001 	orreq.w	r0, r0, #1
 8001fec:	3518      	adds	r5, #24
 8001fee:	42ac      	cmp	r4, r5
 8001ff0:	bf08      	it	eq
 8001ff2:	f040 0001 	orreq.w	r0, r0, #1
 8001ff6:	3518      	adds	r5, #24
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	bf08      	it	eq
 8001ffc:	f040 0001 	orreq.w	r0, r0, #1
 8002000:	3518      	adds	r5, #24
 8002002:	42ac      	cmp	r4, r5
 8002004:	bf08      	it	eq
 8002006:	f040 0001 	orreq.w	r0, r0, #1
 800200a:	3518      	adds	r5, #24
 800200c:	42ac      	cmp	r4, r5
 800200e:	bf14      	ite	ne
 8002010:	4681      	movne	r9, r0
 8002012:	f040 0901 	orreq.w	r9, r0, #1
 8002016:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 800201a:	42b4      	cmp	r4, r6
 800201c:	bf18      	it	ne
 800201e:	42ac      	cmpne	r4, r5
 8002020:	bf0c      	ite	eq
 8002022:	2501      	moveq	r5, #1
 8002024:	2500      	movne	r5, #0
 8002026:	d002      	beq.n	800202e <HAL_DMA_Start_IT+0xee>
 8002028:	f1b9 0f00 	cmp.w	r9, #0
 800202c:	d054      	beq.n	80020d8 <HAL_DMA_Start_IT+0x198>
 800202e:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002030:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8002034:	f026 0601 	bic.w	r6, r6, #1
 8002038:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800203a:	2d00      	cmp	r5, #0
 800203c:	d078      	beq.n	8002130 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203e:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002042:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002044:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002048:	b117      	cbz	r7, 8002050 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800204a:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800204e:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002050:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8002054:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8002058:	f006 081f 	and.w	r8, r6, #31
 800205c:	fa0e fe08 	lsl.w	lr, lr, r8
 8002060:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002064:	6826      	ldr	r6, [r4, #0]
 8002066:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800206a:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800206c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	f000 80e2 	beq.w	800223c <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002078:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800207a:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800207c:	b91d      	cbnz	r5, 8002086 <HAL_DMA_Start_IT+0x146>
 800207e:	f1b9 0f00 	cmp.w	r9, #0
 8002082:	f000 80e1 	beq.w	8002248 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f023 031e 	bic.w	r3, r3, #30
 800208c:	f043 0316 	orr.w	r3, r3, #22
 8002090:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002092:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002096:	b11b      	cbz	r3, 80020a0 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020a0:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	03d2      	lsls	r2, r2, #15
 80020a8:	d503      	bpl.n	80020b2 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80020b2:	b11f      	cbz	r7, 80020bc <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80020bc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6023      	str	r3, [r4, #0]
}
 80020c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ca:	bf00      	nop
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020028 	.word	0x40020028
 80020d4:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020d8:	4f61      	ldr	r7, [pc, #388]	; (8002260 <HAL_DMA_Start_IT+0x320>)
 80020da:	4e62      	ldr	r6, [pc, #392]	; (8002264 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020dc:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020e0:	42b4      	cmp	r4, r6
 80020e2:	bf18      	it	ne
 80020e4:	42bc      	cmpne	r4, r7
 80020e6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80020ea:	bf0c      	ite	eq
 80020ec:	2701      	moveq	r7, #1
 80020ee:	2700      	movne	r7, #0
 80020f0:	42b4      	cmp	r4, r6
 80020f2:	bf08      	it	eq
 80020f4:	f047 0701 	orreq.w	r7, r7, #1
 80020f8:	3614      	adds	r6, #20
 80020fa:	42b4      	cmp	r4, r6
 80020fc:	bf08      	it	eq
 80020fe:	f047 0701 	orreq.w	r7, r7, #1
 8002102:	3614      	adds	r6, #20
 8002104:	42b4      	cmp	r4, r6
 8002106:	bf08      	it	eq
 8002108:	f047 0701 	orreq.w	r7, r7, #1
 800210c:	3614      	adds	r6, #20
 800210e:	42b4      	cmp	r4, r6
 8002110:	bf08      	it	eq
 8002112:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8002116:	6826      	ldr	r6, [r4, #0]
 8002118:	f026 0601 	bic.w	r6, r6, #1
 800211c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800211e:	4e52      	ldr	r6, [pc, #328]	; (8002268 <HAL_DMA_Start_IT+0x328>)
 8002120:	42b4      	cmp	r4, r6
 8002122:	bf08      	it	eq
 8002124:	f047 0701 	orreq.w	r7, r7, #1
 8002128:	b917      	cbnz	r7, 8002130 <HAL_DMA_Start_IT+0x1f0>
 800212a:	4f50      	ldr	r7, [pc, #320]	; (800226c <HAL_DMA_Start_IT+0x32c>)
 800212c:	42bc      	cmp	r4, r7
 800212e:	d10b      	bne.n	8002148 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002130:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8002134:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002136:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800213a:	b117      	cbz	r7, 8002142 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800213c:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8002140:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002142:	f1b9 0f00 	cmp.w	r9, #0
 8002146:	d183      	bne.n	8002050 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002148:	4f46      	ldr	r7, [pc, #280]	; (8002264 <HAL_DMA_Start_IT+0x324>)
 800214a:	f8df e114 	ldr.w	lr, [pc, #276]	; 8002260 <HAL_DMA_Start_IT+0x320>
 800214e:	4574      	cmp	r4, lr
 8002150:	bf18      	it	ne
 8002152:	42bc      	cmpne	r4, r7
 8002154:	f10e 0e14 	add.w	lr, lr, #20
 8002158:	bf0c      	ite	eq
 800215a:	2701      	moveq	r7, #1
 800215c:	2700      	movne	r7, #0
 800215e:	4574      	cmp	r4, lr
 8002160:	bf08      	it	eq
 8002162:	f047 0701 	orreq.w	r7, r7, #1
 8002166:	f10e 0e14 	add.w	lr, lr, #20
 800216a:	4574      	cmp	r4, lr
 800216c:	bf08      	it	eq
 800216e:	f047 0701 	orreq.w	r7, r7, #1
 8002172:	f10e 0e14 	add.w	lr, lr, #20
 8002176:	4574      	cmp	r4, lr
 8002178:	bf08      	it	eq
 800217a:	f047 0701 	orreq.w	r7, r7, #1
 800217e:	f10e 0e14 	add.w	lr, lr, #20
 8002182:	4574      	cmp	r4, lr
 8002184:	bf08      	it	eq
 8002186:	f047 0701 	orreq.w	r7, r7, #1
 800218a:	f10e 0e14 	add.w	lr, lr, #20
 800218e:	4574      	cmp	r4, lr
 8002190:	bf08      	it	eq
 8002192:	f047 0701 	orreq.w	r7, r7, #1
 8002196:	b917      	cbnz	r7, 800219e <HAL_DMA_Start_IT+0x25e>
 8002198:	4f34      	ldr	r7, [pc, #208]	; (800226c <HAL_DMA_Start_IT+0x32c>)
 800219a:	42bc      	cmp	r4, r7
 800219c:	d154      	bne.n	8002248 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800219e:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80021a2:	2701      	movs	r7, #1
 80021a4:	f000 0e1f 	and.w	lr, r0, #31
 80021a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80021ac:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80021b0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d043      	beq.n	8002242 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80021ba:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80021bc:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f023 030e 	bic.w	r3, r3, #14
 80021c4:	f043 030a 	orr.w	r3, r3, #10
 80021c8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80021ca:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d02d      	beq.n	800222e <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_DMA_Start_IT+0x320>)
 80021dc:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_DMA_Start_IT+0x324>)
 80021de:	4294      	cmp	r4, r2
 80021e0:	bf18      	it	ne
 80021e2:	429c      	cmpne	r4, r3
 80021e4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	4294      	cmp	r4, r2
 80021f0:	bf08      	it	eq
 80021f2:	f043 0301 	orreq.w	r3, r3, #1
 80021f6:	3214      	adds	r2, #20
 80021f8:	4294      	cmp	r4, r2
 80021fa:	bf08      	it	eq
 80021fc:	f043 0301 	orreq.w	r3, r3, #1
 8002200:	3214      	adds	r2, #20
 8002202:	4294      	cmp	r4, r2
 8002204:	bf08      	it	eq
 8002206:	f043 0301 	orreq.w	r3, r3, #1
 800220a:	3214      	adds	r2, #20
 800220c:	4294      	cmp	r4, r2
 800220e:	bf08      	it	eq
 8002210:	f043 0301 	orreq.w	r3, r3, #1
 8002214:	3214      	adds	r2, #20
 8002216:	4294      	cmp	r4, r2
 8002218:	bf08      	it	eq
 800221a:	f043 0301 	orreq.w	r3, r3, #1
 800221e:	3214      	adds	r2, #20
 8002220:	4294      	cmp	r4, r2
 8002222:	bf08      	it	eq
 8002224:	f043 0301 	orreq.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	f43f af47 	beq.w	80020bc <HAL_DMA_Start_IT+0x17c>
 800222e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8002232:	e735      	b.n	80020a0 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
 8002236:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002238:	2002      	movs	r0, #2
}
 800223a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800223c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800223e:	60e1      	str	r1, [r4, #12]
 8002240:	e71c      	b.n	800207c <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002242:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002244:	60e1      	str	r1, [r4, #12]
 8002246:	e7ba      	b.n	80021be <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	f023 030e 	bic.w	r3, r3, #14
 800224e:	f043 030a 	orr.w	r3, r3, #10
 8002252:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002254:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ba      	bne.n	80021d2 <HAL_DMA_Start_IT+0x292>
 800225c:	e7bd      	b.n	80021da <HAL_DMA_Start_IT+0x29a>
 800225e:	bf00      	nop
 8002260:	5802541c 	.word	0x5802541c
 8002264:	58025408 	.word	0x58025408
 8002268:	58025480 	.word	0x58025480
 800226c:	58025494 	.word	0x58025494

08002270 <HAL_DMA_IRQHandler>:
{
 8002270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002274:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002276:	4b9e      	ldr	r3, [pc, #632]	; (80024f0 <HAL_DMA_IRQHandler+0x280>)
{
 8002278:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227a:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 800227c:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800227e:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8002280:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	4a9b      	ldr	r2, [pc, #620]	; (80024f4 <HAL_DMA_IRQHandler+0x284>)
 8002286:	489c      	ldr	r0, [pc, #624]	; (80024f8 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 8002288:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800228a:	4293      	cmp	r3, r2
 800228c:	bf18      	it	ne
 800228e:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8002290:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002292:	bf0c      	ite	eq
 8002294:	2001      	moveq	r0, #1
 8002296:	2000      	movne	r0, #0
 8002298:	d04f      	beq.n	800233a <HAL_DMA_IRQHandler+0xca>
 800229a:	3218      	adds	r2, #24
 800229c:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002500 <HAL_DMA_IRQHandler+0x290>
 80022a0:	4563      	cmp	r3, ip
 80022a2:	bf18      	it	ne
 80022a4:	4293      	cmpne	r3, r2
 80022a6:	f10c 0c18 	add.w	ip, ip, #24
 80022aa:	bf0c      	ite	eq
 80022ac:	2201      	moveq	r2, #1
 80022ae:	2200      	movne	r2, #0
 80022b0:	4563      	cmp	r3, ip
 80022b2:	bf08      	it	eq
 80022b4:	f042 0201 	orreq.w	r2, r2, #1
 80022b8:	f10c 0c18 	add.w	ip, ip, #24
 80022bc:	4563      	cmp	r3, ip
 80022be:	bf08      	it	eq
 80022c0:	f042 0201 	orreq.w	r2, r2, #1
 80022c4:	f10c 0c18 	add.w	ip, ip, #24
 80022c8:	4563      	cmp	r3, ip
 80022ca:	bf08      	it	eq
 80022cc:	f042 0201 	orreq.w	r2, r2, #1
 80022d0:	f10c 0c18 	add.w	ip, ip, #24
 80022d4:	4563      	cmp	r3, ip
 80022d6:	bf08      	it	eq
 80022d8:	f042 0201 	orreq.w	r2, r2, #1
 80022dc:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 80022e0:	4563      	cmp	r3, ip
 80022e2:	bf08      	it	eq
 80022e4:	f042 0201 	orreq.w	r2, r2, #1
 80022e8:	f10c 0c18 	add.w	ip, ip, #24
 80022ec:	4563      	cmp	r3, ip
 80022ee:	bf08      	it	eq
 80022f0:	f042 0201 	orreq.w	r2, r2, #1
 80022f4:	f10c 0c18 	add.w	ip, ip, #24
 80022f8:	4563      	cmp	r3, ip
 80022fa:	bf08      	it	eq
 80022fc:	f042 0201 	orreq.w	r2, r2, #1
 8002300:	f10c 0c18 	add.w	ip, ip, #24
 8002304:	4563      	cmp	r3, ip
 8002306:	bf08      	it	eq
 8002308:	f042 0201 	orreq.w	r2, r2, #1
 800230c:	f10c 0c18 	add.w	ip, ip, #24
 8002310:	4563      	cmp	r3, ip
 8002312:	bf08      	it	eq
 8002314:	f042 0201 	orreq.w	r2, r2, #1
 8002318:	f10c 0c18 	add.w	ip, ip, #24
 800231c:	4563      	cmp	r3, ip
 800231e:	bf08      	it	eq
 8002320:	f042 0201 	orreq.w	r2, r2, #1
 8002324:	f10c 0c18 	add.w	ip, ip, #24
 8002328:	4563      	cmp	r3, ip
 800232a:	bf08      	it	eq
 800232c:	f042 0201 	orreq.w	r2, r2, #1
 8002330:	b91a      	cbnz	r2, 800233a <HAL_DMA_IRQHandler+0xca>
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_DMA_IRQHandler+0x28c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	f040 824b 	bne.w	80027d0 <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800233a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 800233c:	2208      	movs	r2, #8
 800233e:	f001 0c1f 	and.w	ip, r1, #31
 8002342:	fa02 f20c 	lsl.w	r2, r2, ip
 8002346:	4217      	tst	r7, r2
 8002348:	f040 817d 	bne.w	8002646 <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800234c:	fa27 f20c 	lsr.w	r2, r7, ip
 8002350:	07d2      	lsls	r2, r2, #31
 8002352:	d50a      	bpl.n	800236a <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	0612      	lsls	r2, r2, #24
 8002358:	d507      	bpl.n	800236a <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f20c 	lsl.w	r2, r2, ip
 8002360:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002362:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002364:	f042 0202 	orr.w	r2, r2, #2
 8002368:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800236a:	f04f 0e04 	mov.w	lr, #4
 800236e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002372:	ea1e 0f07 	tst.w	lr, r7
 8002376:	d05a      	beq.n	800242e <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002378:	2800      	cmp	r0, #0
 800237a:	d14f      	bne.n	800241c <HAL_DMA_IRQHandler+0x1ac>
 800237c:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_DMA_IRQHandler+0x290>)
 800237e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002504 <HAL_DMA_IRQHandler+0x294>
 8002382:	4543      	cmp	r3, r8
 8002384:	bf18      	it	ne
 8002386:	4293      	cmpne	r3, r2
 8002388:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800238c:	bf0c      	ite	eq
 800238e:	2201      	moveq	r2, #1
 8002390:	2200      	movne	r2, #0
 8002392:	4543      	cmp	r3, r8
 8002394:	bf08      	it	eq
 8002396:	f042 0201 	orreq.w	r2, r2, #1
 800239a:	f108 0818 	add.w	r8, r8, #24
 800239e:	4543      	cmp	r3, r8
 80023a0:	bf08      	it	eq
 80023a2:	f042 0201 	orreq.w	r2, r2, #1
 80023a6:	f108 0818 	add.w	r8, r8, #24
 80023aa:	4543      	cmp	r3, r8
 80023ac:	bf08      	it	eq
 80023ae:	f042 0201 	orreq.w	r2, r2, #1
 80023b2:	f108 0818 	add.w	r8, r8, #24
 80023b6:	4543      	cmp	r3, r8
 80023b8:	bf08      	it	eq
 80023ba:	f042 0201 	orreq.w	r2, r2, #1
 80023be:	f508 7856 	add.w	r8, r8, #856	; 0x358
 80023c2:	4543      	cmp	r3, r8
 80023c4:	bf08      	it	eq
 80023c6:	f042 0201 	orreq.w	r2, r2, #1
 80023ca:	f108 0818 	add.w	r8, r8, #24
 80023ce:	4543      	cmp	r3, r8
 80023d0:	bf08      	it	eq
 80023d2:	f042 0201 	orreq.w	r2, r2, #1
 80023d6:	f108 0818 	add.w	r8, r8, #24
 80023da:	4543      	cmp	r3, r8
 80023dc:	bf08      	it	eq
 80023de:	f042 0201 	orreq.w	r2, r2, #1
 80023e2:	f108 0818 	add.w	r8, r8, #24
 80023e6:	4543      	cmp	r3, r8
 80023e8:	bf08      	it	eq
 80023ea:	f042 0201 	orreq.w	r2, r2, #1
 80023ee:	f108 0818 	add.w	r8, r8, #24
 80023f2:	4543      	cmp	r3, r8
 80023f4:	bf08      	it	eq
 80023f6:	f042 0201 	orreq.w	r2, r2, #1
 80023fa:	f108 0818 	add.w	r8, r8, #24
 80023fe:	4543      	cmp	r3, r8
 8002400:	bf08      	it	eq
 8002402:	f042 0201 	orreq.w	r2, r2, #1
 8002406:	f108 0818 	add.w	r8, r8, #24
 800240a:	4543      	cmp	r3, r8
 800240c:	bf08      	it	eq
 800240e:	f042 0201 	orreq.w	r2, r2, #1
 8002412:	b91a      	cbnz	r2, 800241c <HAL_DMA_IRQHandler+0x1ac>
 8002414:	4a39      	ldr	r2, [pc, #228]	; (80024fc <HAL_DMA_IRQHandler+0x28c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f040 8214 	bne.w	8002844 <HAL_DMA_IRQHandler+0x5d4>
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	0792      	lsls	r2, r2, #30
 8002420:	d505      	bpl.n	800242e <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002422:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002426:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002428:	f042 0204 	orr.w	r2, r2, #4
 800242c:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800242e:	2210      	movs	r2, #16
 8002430:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002434:	ea1c 0f07 	tst.w	ip, r7
 8002438:	d069      	beq.n	800250e <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800243a:	2800      	cmp	r0, #0
 800243c:	d145      	bne.n	80024ca <HAL_DMA_IRQHandler+0x25a>
 800243e:	4a30      	ldr	r2, [pc, #192]	; (8002500 <HAL_DMA_IRQHandler+0x290>)
 8002440:	4830      	ldr	r0, [pc, #192]	; (8002504 <HAL_DMA_IRQHandler+0x294>)
 8002442:	4283      	cmp	r3, r0
 8002444:	bf18      	it	ne
 8002446:	4293      	cmpne	r3, r2
 8002448:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800244c:	bf0c      	ite	eq
 800244e:	2201      	moveq	r2, #1
 8002450:	2200      	movne	r2, #0
 8002452:	4283      	cmp	r3, r0
 8002454:	bf08      	it	eq
 8002456:	f042 0201 	orreq.w	r2, r2, #1
 800245a:	3018      	adds	r0, #24
 800245c:	4283      	cmp	r3, r0
 800245e:	bf08      	it	eq
 8002460:	f042 0201 	orreq.w	r2, r2, #1
 8002464:	3018      	adds	r0, #24
 8002466:	4283      	cmp	r3, r0
 8002468:	bf08      	it	eq
 800246a:	f042 0201 	orreq.w	r2, r2, #1
 800246e:	3018      	adds	r0, #24
 8002470:	4283      	cmp	r3, r0
 8002472:	bf08      	it	eq
 8002474:	f042 0201 	orreq.w	r2, r2, #1
 8002478:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800247c:	4283      	cmp	r3, r0
 800247e:	bf08      	it	eq
 8002480:	f042 0201 	orreq.w	r2, r2, #1
 8002484:	3018      	adds	r0, #24
 8002486:	4283      	cmp	r3, r0
 8002488:	bf08      	it	eq
 800248a:	f042 0201 	orreq.w	r2, r2, #1
 800248e:	3018      	adds	r0, #24
 8002490:	4283      	cmp	r3, r0
 8002492:	bf08      	it	eq
 8002494:	f042 0201 	orreq.w	r2, r2, #1
 8002498:	3018      	adds	r0, #24
 800249a:	4283      	cmp	r3, r0
 800249c:	bf08      	it	eq
 800249e:	f042 0201 	orreq.w	r2, r2, #1
 80024a2:	3018      	adds	r0, #24
 80024a4:	4283      	cmp	r3, r0
 80024a6:	bf08      	it	eq
 80024a8:	f042 0201 	orreq.w	r2, r2, #1
 80024ac:	3018      	adds	r0, #24
 80024ae:	4283      	cmp	r3, r0
 80024b0:	bf08      	it	eq
 80024b2:	f042 0201 	orreq.w	r2, r2, #1
 80024b6:	3018      	adds	r0, #24
 80024b8:	4283      	cmp	r3, r0
 80024ba:	bf08      	it	eq
 80024bc:	f042 0201 	orreq.w	r2, r2, #1
 80024c0:	b91a      	cbnz	r2, 80024ca <HAL_DMA_IRQHandler+0x25a>
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <HAL_DMA_IRQHandler+0x28c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	f040 81c5 	bne.w	8002854 <HAL_DMA_IRQHandler+0x5e4>
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	0712      	lsls	r2, r2, #28
 80024ce:	d51e      	bpl.n	800250e <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024d0:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	0352      	lsls	r2, r2, #13
 80024d8:	f100 814e 	bmi.w	8002778 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	05d2      	lsls	r2, r2, #23
 80024e0:	d403      	bmi.n	80024ea <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80024ea:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80024ec:	b17b      	cbz	r3, 800250e <HAL_DMA_IRQHandler+0x29e>
 80024ee:	e00b      	b.n	8002508 <HAL_DMA_IRQHandler+0x298>
 80024f0:	24000000 	.word	0x24000000
 80024f4:	40020028 	.word	0x40020028
 80024f8:	40020010 	.word	0x40020010
 80024fc:	400204b8 	.word	0x400204b8
 8002500:	40020058 	.word	0x40020058
 8002504:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8002508:	4630      	mov	r0, r6
 800250a:	4798      	blx	r3
 800250c:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800250e:	f001 011f 	and.w	r1, r1, #31
 8002512:	2020      	movs	r0, #32
 8002514:	4088      	lsls	r0, r1
 8002516:	4238      	tst	r0, r7
 8002518:	d066      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800251a:	6832      	ldr	r2, [r6, #0]
 800251c:	4ba4      	ldr	r3, [pc, #656]	; (80027b0 <HAL_DMA_IRQHandler+0x540>)
 800251e:	4fa5      	ldr	r7, [pc, #660]	; (80027b4 <HAL_DMA_IRQHandler+0x544>)
 8002520:	42ba      	cmp	r2, r7
 8002522:	bf18      	it	ne
 8002524:	429a      	cmpne	r2, r3
 8002526:	f107 0718 	add.w	r7, r7, #24
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	42ba      	cmp	r2, r7
 8002532:	bf08      	it	eq
 8002534:	f043 0301 	orreq.w	r3, r3, #1
 8002538:	3718      	adds	r7, #24
 800253a:	42ba      	cmp	r2, r7
 800253c:	bf08      	it	eq
 800253e:	f043 0301 	orreq.w	r3, r3, #1
 8002542:	3718      	adds	r7, #24
 8002544:	42ba      	cmp	r2, r7
 8002546:	bf08      	it	eq
 8002548:	f043 0301 	orreq.w	r3, r3, #1
 800254c:	3718      	adds	r7, #24
 800254e:	42ba      	cmp	r2, r7
 8002550:	bf08      	it	eq
 8002552:	f043 0301 	orreq.w	r3, r3, #1
 8002556:	3718      	adds	r7, #24
 8002558:	42ba      	cmp	r2, r7
 800255a:	bf08      	it	eq
 800255c:	f043 0301 	orreq.w	r3, r3, #1
 8002560:	3718      	adds	r7, #24
 8002562:	42ba      	cmp	r2, r7
 8002564:	bf08      	it	eq
 8002566:	f043 0301 	orreq.w	r3, r3, #1
 800256a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800256e:	42ba      	cmp	r2, r7
 8002570:	bf08      	it	eq
 8002572:	f043 0301 	orreq.w	r3, r3, #1
 8002576:	3718      	adds	r7, #24
 8002578:	42ba      	cmp	r2, r7
 800257a:	bf08      	it	eq
 800257c:	f043 0301 	orreq.w	r3, r3, #1
 8002580:	3718      	adds	r7, #24
 8002582:	42ba      	cmp	r2, r7
 8002584:	bf08      	it	eq
 8002586:	f043 0301 	orreq.w	r3, r3, #1
 800258a:	3718      	adds	r7, #24
 800258c:	42ba      	cmp	r2, r7
 800258e:	bf08      	it	eq
 8002590:	f043 0301 	orreq.w	r3, r3, #1
 8002594:	3718      	adds	r7, #24
 8002596:	42ba      	cmp	r2, r7
 8002598:	bf08      	it	eq
 800259a:	f043 0301 	orreq.w	r3, r3, #1
 800259e:	3718      	adds	r7, #24
 80025a0:	42ba      	cmp	r2, r7
 80025a2:	bf08      	it	eq
 80025a4:	f043 0301 	orreq.w	r3, r3, #1
 80025a8:	3718      	adds	r7, #24
 80025aa:	42ba      	cmp	r2, r7
 80025ac:	bf08      	it	eq
 80025ae:	f043 0301 	orreq.w	r3, r3, #1
 80025b2:	b91b      	cbnz	r3, 80025bc <HAL_DMA_IRQHandler+0x34c>
 80025b4:	4b80      	ldr	r3, [pc, #512]	; (80027b8 <HAL_DMA_IRQHandler+0x548>)
 80025b6:	429a      	cmp	r2, r3
 80025b8:	f040 8161 	bne.w	800287e <HAL_DMA_IRQHandler+0x60e>
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	06df      	lsls	r7, r3, #27
 80025c0:	d512      	bpl.n	80025e8 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025c2:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80025c8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ca:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025cc:	f000 80b6 	beq.w	800273c <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025d0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025d4:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025d6:	f000 80d8 	beq.w	800278a <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025da:	031f      	lsls	r7, r3, #12
 80025dc:	f140 80e3 	bpl.w	80027a6 <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 80025e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80025e2:	b10b      	cbz	r3, 80025e8 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 80025e4:	4630      	mov	r0, r6
 80025e6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e8:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80c1 	beq.w	8002772 <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025f0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80025f2:	07dc      	lsls	r4, r3, #31
 80025f4:	d51e      	bpl.n	8002634 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 80025f6:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	2104      	movs	r1, #4
 80025fa:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80025fe:	496f      	ldr	r1, [pc, #444]	; (80027bc <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 8002600:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002602:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8002606:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800260a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e002      	b.n	8002616 <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	07d8      	lsls	r0, r3, #31
 8002614:	d504      	bpl.n	8002620 <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 8002616:	9b01      	ldr	r3, [sp, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	428b      	cmp	r3, r1
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	d9f7      	bls.n	8002610 <HAL_DMA_IRQHandler+0x3a0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002624:	bf4c      	ite	mi
 8002626:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002628:	2301      	movpl	r3, #1
 800262a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800262e:	2300      	movs	r3, #0
 8002630:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8002634:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 809b 	beq.w	8002772 <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 800263c:	4630      	mov	r0, r6
}
 800263e:	b002      	add	sp, #8
 8002640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8002644:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002646:	f8d3 e000 	ldr.w	lr, [r3]
 800264a:	f01e 0f04 	tst.w	lr, #4
 800264e:	d00a      	beq.n	8002666 <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002650:	f8d3 e000 	ldr.w	lr, [r3]
 8002654:	f02e 0e04 	bic.w	lr, lr, #4
 8002658:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800265c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800265e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002666:	fa27 f20c 	lsr.w	r2, r7, ip
 800266a:	07d2      	lsls	r2, r2, #31
 800266c:	f57f ae7d 	bpl.w	800236a <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002670:	4a53      	ldr	r2, [pc, #332]	; (80027c0 <HAL_DMA_IRQHandler+0x550>)
 8002672:	f8df e150 	ldr.w	lr, [pc, #336]	; 80027c4 <HAL_DMA_IRQHandler+0x554>
 8002676:	4573      	cmp	r3, lr
 8002678:	bf18      	it	ne
 800267a:	4293      	cmpne	r3, r2
 800267c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8002680:	bf0c      	ite	eq
 8002682:	2201      	moveq	r2, #1
 8002684:	2200      	movne	r2, #0
 8002686:	4573      	cmp	r3, lr
 8002688:	bf08      	it	eq
 800268a:	f042 0201 	orreq.w	r2, r2, #1
 800268e:	f10e 0e18 	add.w	lr, lr, #24
 8002692:	4573      	cmp	r3, lr
 8002694:	bf08      	it	eq
 8002696:	f042 0201 	orreq.w	r2, r2, #1
 800269a:	f10e 0e18 	add.w	lr, lr, #24
 800269e:	4573      	cmp	r3, lr
 80026a0:	bf08      	it	eq
 80026a2:	f042 0201 	orreq.w	r2, r2, #1
 80026a6:	f10e 0e18 	add.w	lr, lr, #24
 80026aa:	4573      	cmp	r3, lr
 80026ac:	bf08      	it	eq
 80026ae:	f042 0201 	orreq.w	r2, r2, #1
 80026b2:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 80026b6:	4573      	cmp	r3, lr
 80026b8:	bf08      	it	eq
 80026ba:	f042 0201 	orreq.w	r2, r2, #1
 80026be:	f10e 0e18 	add.w	lr, lr, #24
 80026c2:	4573      	cmp	r3, lr
 80026c4:	bf08      	it	eq
 80026c6:	f042 0201 	orreq.w	r2, r2, #1
 80026ca:	f10e 0e18 	add.w	lr, lr, #24
 80026ce:	4573      	cmp	r3, lr
 80026d0:	bf08      	it	eq
 80026d2:	f042 0201 	orreq.w	r2, r2, #1
 80026d6:	f10e 0e18 	add.w	lr, lr, #24
 80026da:	4573      	cmp	r3, lr
 80026dc:	bf08      	it	eq
 80026de:	f042 0201 	orreq.w	r2, r2, #1
 80026e2:	f10e 0e18 	add.w	lr, lr, #24
 80026e6:	4573      	cmp	r3, lr
 80026e8:	bf08      	it	eq
 80026ea:	f042 0201 	orreq.w	r2, r2, #1
 80026ee:	f10e 0e18 	add.w	lr, lr, #24
 80026f2:	4573      	cmp	r3, lr
 80026f4:	bf08      	it	eq
 80026f6:	f042 0201 	orreq.w	r2, r2, #1
 80026fa:	f10e 0e18 	add.w	lr, lr, #24
 80026fe:	4573      	cmp	r3, lr
 8002700:	bf08      	it	eq
 8002702:	f042 0201 	orreq.w	r2, r2, #1
 8002706:	f10e 0e18 	add.w	lr, lr, #24
 800270a:	4573      	cmp	r3, lr
 800270c:	bf08      	it	eq
 800270e:	f042 0201 	orreq.w	r2, r2, #1
 8002712:	2a00      	cmp	r2, #0
 8002714:	f47f ae1e 	bne.w	8002354 <HAL_DMA_IRQHandler+0xe4>
 8002718:	2800      	cmp	r0, #0
 800271a:	f47f ae1b 	bne.w	8002354 <HAL_DMA_IRQHandler+0xe4>
 800271e:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002720:	2204      	movs	r2, #4
 8002722:	fa02 f20c 	lsl.w	r2, r2, ip
 8002726:	423a      	tst	r2, r7
 8002728:	f040 808c 	bne.w	8002844 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800272c:	2210      	movs	r2, #16
 800272e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8002732:	ea17 0f0c 	tst.w	r7, ip
 8002736:	f43f aeea 	beq.w	800250e <HAL_DMA_IRQHandler+0x29e>
 800273a:	e680      	b.n	800243e <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273c:	f023 0316 	bic.w	r3, r3, #22
 8002740:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002742:	6953      	ldr	r3, [r2, #20]
 8002744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002748:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f023 0308 	bic.w	r3, r3, #8
 8002756:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002758:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800275a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 800275c:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800275e:	408b      	lsls	r3, r1
 8002760:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8002762:	6d33      	ldr	r3, [r6, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8002764:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002768:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af65 	bne.w	800263c <HAL_DMA_IRQHandler+0x3cc>
}
 8002772:	b002      	add	sp, #8
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0318      	lsls	r0, r3, #12
 800277c:	f57f aeb5 	bpl.w	80024ea <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002780:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f aec0 	bne.w	8002508 <HAL_DMA_IRQHandler+0x298>
 8002788:	e6c1      	b.n	800250e <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800278a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800278e:	f47f af27 	bne.w	80025e0 <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002792:	6811      	ldr	r1, [r2, #0]
 8002794:	f021 0110 	bic.w	r1, r1, #16
 8002798:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800279a:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800279c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80027a0:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80027a4:	e71c      	b.n	80025e0 <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 80027a6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f af1b 	bne.w	80025e4 <HAL_DMA_IRQHandler+0x374>
 80027ae:	e71b      	b.n	80025e8 <HAL_DMA_IRQHandler+0x378>
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	400204b8 	.word	0x400204b8
 80027bc:	1b4e81b5 	.word	0x1b4e81b5
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1c0      	bne.n	8002750 <HAL_DMA_IRQHandler+0x4e0>
 80027ce:	e7c3      	b.n	8002758 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_DMA_IRQHandler+0x690>)
 80027d2:	484c      	ldr	r0, [pc, #304]	; (8002904 <HAL_DMA_IRQHandler+0x694>)
 80027d4:	4283      	cmp	r3, r0
 80027d6:	bf18      	it	ne
 80027d8:	4293      	cmpne	r3, r2
 80027da:	f100 0014 	add.w	r0, r0, #20
 80027de:	bf0c      	ite	eq
 80027e0:	2201      	moveq	r2, #1
 80027e2:	2200      	movne	r2, #0
 80027e4:	4283      	cmp	r3, r0
 80027e6:	bf08      	it	eq
 80027e8:	f042 0201 	orreq.w	r2, r2, #1
 80027ec:	3014      	adds	r0, #20
 80027ee:	4283      	cmp	r3, r0
 80027f0:	bf08      	it	eq
 80027f2:	f042 0201 	orreq.w	r2, r2, #1
 80027f6:	3014      	adds	r0, #20
 80027f8:	4283      	cmp	r3, r0
 80027fa:	bf08      	it	eq
 80027fc:	f042 0201 	orreq.w	r2, r2, #1
 8002800:	3014      	adds	r0, #20
 8002802:	4283      	cmp	r3, r0
 8002804:	bf08      	it	eq
 8002806:	f042 0201 	orreq.w	r2, r2, #1
 800280a:	3014      	adds	r0, #20
 800280c:	4283      	cmp	r3, r0
 800280e:	bf08      	it	eq
 8002810:	f042 0201 	orreq.w	r2, r2, #1
 8002814:	b912      	cbnz	r2, 800281c <HAL_DMA_IRQHandler+0x5ac>
 8002816:	4a3c      	ldr	r2, [pc, #240]	; (8002908 <HAL_DMA_IRQHandler+0x698>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d1aa      	bne.n	8002772 <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800281c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800281e:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002820:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002822:	f000 001f 	and.w	r0, r0, #31
 8002826:	4085      	lsls	r5, r0
 8002828:	420d      	tst	r5, r1
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x5ee>
 800282c:	0757      	lsls	r7, r2, #29
 800282e:	d516      	bpl.n	800285e <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002830:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002832:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002834:	d547      	bpl.n	80028c6 <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002836:	03d1      	lsls	r1, r2, #15
 8002838:	d44b      	bmi.n	80028d2 <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800283a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f aefd 	bne.w	800263c <HAL_DMA_IRQHandler+0x3cc>
 8002842:	e796      	b.n	8002772 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002844:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002846:	2210      	movs	r2, #16
 8002848:	fa02 fc0c 	lsl.w	ip, r2, ip
 800284c:	ea17 0f0c 	tst.w	r7, ip
 8002850:	f43f ae5d 	beq.w	800250e <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	0750      	lsls	r0, r2, #29
 8002858:	f57f ae59 	bpl.w	800250e <HAL_DMA_IRQHandler+0x29e>
 800285c:	e638      	b.n	80024d0 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800285e:	2502      	movs	r5, #2
 8002860:	4085      	lsls	r5, r0
 8002862:	420d      	tst	r5, r1
 8002864:	d010      	beq.n	8002888 <HAL_DMA_IRQHandler+0x618>
 8002866:	0797      	lsls	r7, r2, #30
 8002868:	d50e      	bpl.n	8002888 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800286a:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800286c:	0414      	lsls	r4, r2, #16
 800286e:	d535      	bpl.n	80028dc <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002870:	03d0      	lsls	r0, r2, #15
 8002872:	d43f      	bmi.n	80028f4 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 8002874:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f aee0 	bne.w	800263c <HAL_DMA_IRQHandler+0x3cc>
 800287c:	e779      	b.n	8002772 <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	079b      	lsls	r3, r3, #30
 8002882:	f57f aeb1 	bpl.w	80025e8 <HAL_DMA_IRQHandler+0x378>
 8002886:	e69c      	b.n	80025c2 <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002888:	2508      	movs	r5, #8
 800288a:	4085      	lsls	r5, r0
 800288c:	420d      	tst	r5, r1
 800288e:	f43f af70 	beq.w	8002772 <HAL_DMA_IRQHandler+0x502>
 8002892:	0711      	lsls	r1, r2, #28
 8002894:	f57f af6d 	bpl.w	8002772 <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800289a:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289c:	f022 020e 	bic.w	r2, r2, #14
 80028a0:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028a2:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80028a4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028a6:	fa03 f000 	lsl.w	r0, r3, r0
 80028aa:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028ac:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80028ae:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80028b2:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	f43f af5b 	beq.w	8002772 <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 80028bc:	4630      	mov	r0, r6
}
 80028be:	b002      	add	sp, #8
 80028c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80028c4:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028c6:	0692      	lsls	r2, r2, #26
 80028c8:	d403      	bmi.n	80028d2 <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f022 0204 	bic.w	r2, r2, #4
 80028d0:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f aeb1 	bne.w	800263c <HAL_DMA_IRQHandler+0x3cc>
 80028da:	e74a      	b.n	8002772 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028dc:	f012 0220 	ands.w	r2, r2, #32
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e2:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80028e4:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e6:	f021 010a 	bic.w	r1, r1, #10
 80028ea:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80028ec:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80028f0:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80028f4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f aea0 	bne.w	800263c <HAL_DMA_IRQHandler+0x3cc>
 80028fc:	e739      	b.n	8002772 <HAL_DMA_IRQHandler+0x502>
 80028fe:	bf00      	nop
 8002900:	58025408 	.word	0x58025408
 8002904:	5802541c 	.word	0x5802541c
 8002908:	58025494 	.word	0x58025494

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002910:	680c      	ldr	r4, [r1, #0]
{
 8002912:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002914:	2c00      	cmp	r4, #0
 8002916:	f000 80a7 	beq.w	8002a68 <HAL_GPIO_Init+0x15c>
 800291a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	4f8a      	ldr	r7, [pc, #552]	; (8002b48 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8002920:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002926:	ea12 0e04 	ands.w	lr, r2, r4
 800292a:	f000 8096 	beq.w	8002a5a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292e:	684d      	ldr	r5, [r1, #4]
 8002930:	f005 0903 	and.w	r9, r5, #3
 8002934:	f109 36ff 	add.w	r6, r9, #4294967295
 8002938:	2e01      	cmp	r6, #1
 800293a:	f240 8098 	bls.w	8002a6e <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293e:	f1b9 0f03 	cmp.w	r9, #3
 8002942:	f040 80d2 	bne.w	8002aea <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002946:	fa09 f20c 	lsl.w	r2, r9, ip
 800294a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800294e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002950:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002954:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800295c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800295e:	d07c      	beq.n	8002a5a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002960:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002964:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002968:	f003 0903 	and.w	r9, r3, #3
 800296c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	f042 0202 	orr.w	r2, r2, #2
 8002972:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002976:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800297e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002982:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002986:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	f002 0202 	and.w	r2, r2, #2
 800298e:	9201      	str	r2, [sp, #4]
 8002990:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002996:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800299a:	4e6c      	ldr	r6, [pc, #432]	; (8002b4c <HAL_GPIO_Init+0x240>)
 800299c:	42b0      	cmp	r0, r6
 800299e:	d028      	beq.n	80029f2 <HAL_GPIO_Init+0xe6>
 80029a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80029a4:	42b0      	cmp	r0, r6
 80029a6:	f000 80ac 	beq.w	8002b02 <HAL_GPIO_Init+0x1f6>
 80029aa:	4e69      	ldr	r6, [pc, #420]	; (8002b50 <HAL_GPIO_Init+0x244>)
 80029ac:	42b0      	cmp	r0, r6
 80029ae:	f000 80ad 	beq.w	8002b0c <HAL_GPIO_Init+0x200>
 80029b2:	4e68      	ldr	r6, [pc, #416]	; (8002b54 <HAL_GPIO_Init+0x248>)
 80029b4:	42b0      	cmp	r0, r6
 80029b6:	f000 809f 	beq.w	8002af8 <HAL_GPIO_Init+0x1ec>
 80029ba:	4e67      	ldr	r6, [pc, #412]	; (8002b58 <HAL_GPIO_Init+0x24c>)
 80029bc:	42b0      	cmp	r0, r6
 80029be:	f000 80af 	beq.w	8002b20 <HAL_GPIO_Init+0x214>
 80029c2:	4e66      	ldr	r6, [pc, #408]	; (8002b5c <HAL_GPIO_Init+0x250>)
 80029c4:	42b0      	cmp	r0, r6
 80029c6:	f000 80b0 	beq.w	8002b2a <HAL_GPIO_Init+0x21e>
 80029ca:	4e65      	ldr	r6, [pc, #404]	; (8002b60 <HAL_GPIO_Init+0x254>)
 80029cc:	42b0      	cmp	r0, r6
 80029ce:	f000 80a2 	beq.w	8002b16 <HAL_GPIO_Init+0x20a>
 80029d2:	4e64      	ldr	r6, [pc, #400]	; (8002b64 <HAL_GPIO_Init+0x258>)
 80029d4:	42b0      	cmp	r0, r6
 80029d6:	f000 80ad 	beq.w	8002b34 <HAL_GPIO_Init+0x228>
 80029da:	4e63      	ldr	r6, [pc, #396]	; (8002b68 <HAL_GPIO_Init+0x25c>)
 80029dc:	42b0      	cmp	r0, r6
 80029de:	f000 80ae 	beq.w	8002b3e <HAL_GPIO_Init+0x232>
 80029e2:	4e62      	ldr	r6, [pc, #392]	; (8002b6c <HAL_GPIO_Init+0x260>)
 80029e4:	42b0      	cmp	r0, r6
 80029e6:	bf0c      	ite	eq
 80029e8:	2609      	moveq	r6, #9
 80029ea:	260a      	movne	r6, #10
 80029ec:	fa06 f609 	lsl.w	r6, r6, r9
 80029f0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f2:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fa:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80029fe:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8002a02:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002a04:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002a08:	bf0c      	ite	eq
 8002a0a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002a0c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8002a14:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8002a18:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002a1c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002a20:	bf0c      	ite	eq
 8002a22:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002a24:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a28:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8002a2c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002a30:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a34:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002a38:	bf0c      	ite	eq
 8002a3a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002a3c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a40:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a42:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8002a46:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002a4a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8002a4e:	bf54      	ite	pl
 8002a50:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8002a52:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002a56:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8002a5a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a5c:	f10c 0c02 	add.w	ip, ip, #2
 8002a60:	fa34 f203 	lsrs.w	r2, r4, r3
 8002a64:	f47f af5d 	bne.w	8002922 <HAL_GPIO_Init+0x16>
  }
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a6e:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8002a72:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a74:	fa08 f80c 	lsl.w	r8, r8, ip
 8002a78:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a7e:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	fa06 f60c 	lsl.w	r6, r6, ip
 8002a86:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002a8a:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002a90:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a96:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002a9c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002a9e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa6:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aaa:	fa06 f60c 	lsl.w	r6, r6, ip
 8002aae:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8002ab2:	fa09 f20c 	lsl.w	r2, r9, ip
 8002ab6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab8:	f47f af49 	bne.w	800294e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8002abc:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ac0:	f003 0b07 	and.w	fp, r3, #7
 8002ac4:	260f      	movs	r6, #15
 8002ac6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002aca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002ace:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ad2:	fa06 f60b 	lsl.w	r6, r6, fp
 8002ad6:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ada:	690e      	ldr	r6, [r1, #16]
 8002adc:	fa06 f60b 	lsl.w	r6, r6, fp
 8002ae0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002ae4:	f8c9 6020 	str.w	r6, [r9, #32]
 8002ae8:	e731      	b.n	800294e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aea:	f04f 0803 	mov.w	r8, #3
 8002aee:	fa08 f80c 	lsl.w	r8, r8, ip
 8002af2:	ea6f 0808 	mvn.w	r8, r8
 8002af6:	e7d2      	b.n	8002a9e <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002af8:	2603      	movs	r6, #3
 8002afa:	fa06 f609 	lsl.w	r6, r6, r9
 8002afe:	4332      	orrs	r2, r6
 8002b00:	e777      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b02:	2601      	movs	r6, #1
 8002b04:	fa06 f609 	lsl.w	r6, r6, r9
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	e772      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b0c:	2602      	movs	r6, #2
 8002b0e:	fa06 f609 	lsl.w	r6, r6, r9
 8002b12:	4332      	orrs	r2, r6
 8002b14:	e76d      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b16:	2606      	movs	r6, #6
 8002b18:	fa06 f609 	lsl.w	r6, r6, r9
 8002b1c:	4332      	orrs	r2, r6
 8002b1e:	e768      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b20:	2604      	movs	r6, #4
 8002b22:	fa06 f609 	lsl.w	r6, r6, r9
 8002b26:	4332      	orrs	r2, r6
 8002b28:	e763      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b2a:	2605      	movs	r6, #5
 8002b2c:	fa06 f609 	lsl.w	r6, r6, r9
 8002b30:	4332      	orrs	r2, r6
 8002b32:	e75e      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b34:	2607      	movs	r6, #7
 8002b36:	fa06 f609 	lsl.w	r6, r6, r9
 8002b3a:	4332      	orrs	r2, r6
 8002b3c:	e759      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b3e:	2608      	movs	r6, #8
 8002b40:	fa06 f609 	lsl.w	r6, r6, r9
 8002b44:	4332      	orrs	r2, r6
 8002b46:	e754      	b.n	80029f2 <HAL_GPIO_Init+0xe6>
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	58020000 	.word	0x58020000
 8002b50:	58020800 	.word	0x58020800
 8002b54:	58020c00 	.word	0x58020c00
 8002b58:	58021000 	.word	0x58021000
 8002b5c:	58021400 	.word	0x58021400
 8002b60:	58021800 	.word	0x58021800
 8002b64:	58021c00 	.word	0x58021c00
 8002b68:	58022000 	.word	0x58022000
 8002b6c:	58022400 	.word	0x58022400

08002b70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b70:	b902      	cbnz	r2, 8002b74 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b72:	0409      	lsls	r1, r1, #16
 8002b74:	6181      	str	r1, [r0, #24]
  }
}
 8002b76:	4770      	bx	lr

08002b78 <I2S_DMATxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b78:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b7c:	b94b      	cbnz	r3, 8002b92 <I2S_DMATxCplt+0x1a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002b7e:	6801      	ldr	r1, [r0, #0]

    hi2s->TxXferCount = (uint16_t) 0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 8002b80:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002b84:	688a      	ldr	r2, [r1, #8]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8a:	608a      	str	r2, [r1, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 8002b8c:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002b8e:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
 8002b92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b94:	4718      	bx	r3
 8002b96:	bf00      	nop

08002b98 <I2S_DMATxHalfCplt>:
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b98:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
 8002b9a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002b9c:	4718      	bx	r3
 8002b9e:	bf00      	nop

08002ba0 <I2S_DMARxCplt>:
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ba0:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ba4:	b94b      	cbnz	r3, 8002bba <I2S_DMARxCplt+0x1a>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002ba6:	6801      	ldr	r1, [r0, #0]
    hi2s->RxXferCount = (uint16_t)0UL;
    hi2s->State = HAL_I2S_STATE_READY;
 8002ba8:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002bac:	688a      	ldr	r2, [r1, #8]
 8002bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bb2:	608a      	str	r2, [r1, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8002bb4:	8743      	strh	r3, [r0, #58]	; 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8002bb6:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
 8002bba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002bbc:	4718      	bx	r3
 8002bbe:	bf00      	nop

08002bc0 <I2S_DMARxHalfCplt>:
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc0:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
 8002bc2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002bc4:	4718      	bx	r3
 8002bc6:	bf00      	nop

08002bc8 <I2S_DMAError>:
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc8:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
  hi2s->TxXferCount = (uint16_t) 0UL;
 8002bca:	2200      	movs	r2, #0
  hi2s->RxXferCount = (uint16_t) 0UL;

  hi2s->State = HAL_I2S_STATE_READY;
 8002bcc:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8002bd0:	6801      	ldr	r1, [r0, #0]
 8002bd2:	688b      	ldr	r3, [r1, #8]
 8002bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bd8:	608b      	str	r3, [r1, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8002bda:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8002bdc:	8742      	strh	r2, [r0, #58]	; 0x3a
  hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	f880 c04d 	strb.w	ip, [r0, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002be2:	6d03      	ldr	r3, [r0, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 8002be4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6503      	str	r3, [r0, #80]	; 0x50
  hi2s->ErrorCallback(hi2s);
 8002bec:	4710      	bx	r2
 8002bee:	bf00      	nop

08002bf0 <HAL_I2S_ErrorCallback>:
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_I2SEx_TxRxHalfCpltCallback>:
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <HAL_I2SEx_TxRxCpltCallback>:
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <HAL_I2S_Init>:
  if (hi2s == NULL)
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	f000 80b6 	beq.w	8002d6e <HAL_I2S_Init+0x172>
{
 8002c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c04:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8002c08:	4604      	mov	r4, r0
 8002c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c0e:	b9ab      	cbnz	r3, 8002c3c <HAL_I2S_Init+0x40>
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8002c10:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_I2S_Init+0x1a4>)
    hi2s->Lock = HAL_UNLOCKED;
 8002c12:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8002c16:	6543      	str	r3, [r0, #84]	; 0x54
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8002c18:	4962      	ldr	r1, [pc, #392]	; (8002da4 <HAL_I2S_Init+0x1a8>)
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_I2S_Init+0x1ac>)
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8002c1c:	4d63      	ldr	r5, [pc, #396]	; (8002dac <HAL_I2S_Init+0x1b0>)
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 8002c1e:	4864      	ldr	r0, [pc, #400]	; (8002db0 <HAL_I2S_Init+0x1b4>)
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8002c20:	4a64      	ldr	r2, [pc, #400]	; (8002db4 <HAL_I2S_Init+0x1b8>)
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8002c22:	e9c4 5116 	strd	r5, r1, [r4, #88]	; 0x58
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8002c26:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8002c2a:	4963      	ldr	r1, [pc, #396]	; (8002db8 <HAL_I2S_Init+0x1bc>)
    if (hi2s->MspInitCallback == NULL)
 8002c2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8002c2e:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
    if (hi2s->MspInitCallback == NULL)
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80a1 	beq.w	8002d7a <HAL_I2S_Init+0x17e>
    hi2s->MspInitCallback(hi2s);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4798      	blx	r3
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c3c:	2302      	movs	r3, #2
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002c3e:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c40:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	07db      	lsls	r3, r3, #31
 8002c48:	d448      	bmi.n	8002cdc <HAL_I2S_Init+0xe0>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002c4a:	6865      	ldr	r5, [r4, #4]
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002c4c:	2300      	movs	r3, #0
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002c4e:	f025 0002 	bic.w	r0, r5, #2
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002c52:	6513      	str	r3, [r2, #80]	; 0x50
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002c54:	2d0a      	cmp	r5, #10
 8002c56:	bf18      	it	ne
 8002c58:	2804      	cmpne	r0, #4
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2001      	moveq	r0, #1
 8002c5e:	2000      	movne	r0, #0
 8002c60:	d141      	bne.n	8002ce6 <HAL_I2S_Init+0xea>
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c62:	6963      	ldr	r3, [r4, #20]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d06b      	beq.n	8002d40 <HAL_I2S_Init+0x144>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002c6e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        packetlength = 1UL;
 8002c72:	2a00      	cmp	r2, #0
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
        packetlength = 1UL;
 8002c78:	bf14      	ite	ne
 8002c7a:	2602      	movne	r6, #2
 8002c7c:	2601      	moveq	r6, #1
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002c7e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002c82:	f002 f885 	bl	8004d90 <HAL_RCCEx_GetPeriphCLKFreq>
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c86:	6921      	ldr	r1, [r4, #16]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002c88:	fab5 f585 	clz	r5, r5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c8c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002c90:	ea4f 1555 	mov.w	r5, r5, lsr #5
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c94:	d06d      	beq.n	8002d72 <HAL_I2S_Init+0x176>
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002c96:	2320      	movs	r3, #32
 8002c98:	40eb      	lsrs	r3, r5
 8002c9a:	fb06 f303 	mul.w	r3, r6, r3
 8002c9e:	6962      	ldr	r2, [r4, #20]
 8002ca0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ca8:	0043      	lsls	r3, r0, #1
 8002caa:	fbb3 f3f2 	udiv	r3, r3, r2
      tmp = tmp / 10UL;
 8002cae:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_I2S_Init+0x1c0>)
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002cb0:	3305      	adds	r3, #5
      tmp = tmp / 10UL;
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002cb6:	091e      	lsrs	r6, r3, #4
 8002cb8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002cbc:	f1a6 0201 	sub.w	r2, r6, #1
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	0952      	lsrs	r2, r2, #5
 8002cc6:	ea12 02d3 	ands.w	r2, r2, r3, lsr #3
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2S_Init+0xd4>
 8002ccc:	2eff      	cmp	r6, #255	; 0xff
 8002cce:	d940      	bls.n	8002d52 <HAL_I2S_Init+0x156>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      return  HAL_ERROR;
 8002cd2:	2001      	movs	r0, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	6523      	str	r3, [r4, #80]	; 0x50
}
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_I2S_DISABLE(hi2s);
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e7b1      	b.n	8002c4a <HAL_I2S_Init+0x4e>
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002ce6:	6921      	ldr	r1, [r4, #16]
 8002ce8:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8002cea:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8002cee:	4333      	orrs	r3, r6
 8002cf0:	4e33      	ldr	r6, [pc, #204]	; (8002dc0 <HAL_I2S_Init+0x1c4>)
 8002cf2:	403e      	ands	r6, r7
 8002cf4:	4333      	orrs	r3, r6
 8002cf6:	69a6      	ldr	r6, [r4, #24]
 8002cf8:	4333      	orrs	r3, r6
 8002cfa:	6a26      	ldr	r6, [r4, #32]
 8002cfc:	4333      	orrs	r3, r6
 8002cfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002d00:	4333      	orrs	r3, r6
 8002d02:	432b      	orrs	r3, r5
 8002d04:	430b      	orrs	r3, r1
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002d06:	f640 71f8 	movw	r1, #4088	; 0xff8
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6513      	str	r3, [r2, #80]	; 0x50
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002d10:	6191      	str	r1, [r2, #24]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002d12:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002d14:	69e1      	ldr	r1, [r4, #28]
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002d1c:	68d3      	ldr	r3, [r2, #12]
 8002d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d22:	430b      	orrs	r3, r1
 8002d24:	60d3      	str	r3, [r2, #12]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002d26:	b128      	cbz	r0, 8002d34 <HAL_I2S_Init+0x138>
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002d28:	68d3      	ldr	r3, [r2, #12]
 8002d2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d34:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d36:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d38:	6520      	str	r0, [r4, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d3a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002d40:	6921      	ldr	r1, [r4, #16]
 8002d42:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002d46:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_I2S_Init+0x1c8>)
 8002d4a:	403b      	ands	r3, r7
 8002d4c:	4333      	orrs	r3, r6
 8002d4e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d50:	e7ca      	b.n	8002ce8 <HAL_I2S_Init+0xec>
    if (i2sdiv == 0UL)
 8002d52:	b9b6      	cbnz	r6, 8002d82 <HAL_I2S_Init+0x186>
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002d54:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002d58:	e9d4 2500 	ldrd	r2, r5, [r4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002d5c:	f025 0002 	bic.w	r0, r5, #2
 8002d60:	2d0a      	cmp	r5, #10
 8002d62:	bf18      	it	ne
 8002d64:	2804      	cmpne	r0, #4
 8002d66:	bf0c      	ite	eq
 8002d68:	2001      	moveq	r0, #1
 8002d6a:	2000      	movne	r0, #0
 8002d6c:	e7eb      	b.n	8002d46 <HAL_I2S_Init+0x14a>
    return HAL_ERROR;
 8002d6e:	2001      	movs	r0, #1
}
 8002d70:	4770      	bx	lr
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d76:	40eb      	lsrs	r3, r5
 8002d78:	e791      	b.n	8002c9e <HAL_I2S_Init+0xa2>
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_I2S_Init+0x1cc>)
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	6722      	str	r2, [r4, #112]	; 0x70
 8002d80:	e75a      	b.n	8002c38 <HAL_I2S_Init+0x3c>
    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002d82:	062d      	lsls	r5, r5, #24
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002d8a:	6865      	ldr	r5, [r4, #4]
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002d8c:	f025 0002 	bic.w	r0, r5, #2
 8002d90:	2d0a      	cmp	r5, #10
 8002d92:	bf18      	it	ne
 8002d94:	2804      	cmpne	r0, #4
 8002d96:	bf0c      	ite	eq
 8002d98:	2001      	moveq	r0, #1
 8002d9a:	2000      	movne	r0, #0
 8002d9c:	e7d3      	b.n	8002d46 <HAL_I2S_Init+0x14a>
 8002d9e:	bf00      	nop
 8002da0:	08000c95 	.word	0x08000c95
 8002da4:	08002bf9 	.word	0x08002bf9
 8002da8:	08000bb1 	.word	0x08000bb1
 8002dac:	08000c05 	.word	0x08000c05
 8002db0:	08000c59 	.word	0x08000c59
 8002db4:	08002bf1 	.word	0x08002bf1
 8002db8:	08002bf5 	.word	0x08002bf5
 8002dbc:	cccccccd 	.word	0xcccccccd
 8002dc0:	fdff9040 	.word	0xfdff9040
 8002dc4:	fe00ffff 	.word	0xfe00ffff
 8002dc8:	080012b9 	.word	0x080012b9

08002dcc <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d04e      	beq.n	8002e6e <HAL_I2S_Transmit_DMA+0xa2>
{
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 8002dd2:	fab2 f582 	clz	r5, r2
 8002dd6:	096d      	lsrs	r5, r5, #5
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d03c      	beq.n	8002e56 <HAL_I2S_Transmit_DMA+0x8a>
 8002ddc:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002dde:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
 8002de2:	2801      	cmp	r0, #1
 8002de4:	b2c6      	uxtb	r6, r0
 8002de6:	d134      	bne.n	8002e52 <HAL_I2S_Transmit_DMA+0x86>
  __HAL_LOCK(hi2s);
 8002de8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002dec:	2801      	cmp	r0, #1
 8002dee:	d030      	beq.n	8002e52 <HAL_I2S_Transmit_DMA+0x86>
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002df0:	6c60      	ldr	r0, [r4, #68]	; 0x44
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8002df2:	2303      	movs	r3, #3
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002df4:	4f1f      	ldr	r7, [pc, #124]	; (8002e74 <HAL_I2S_Transmit_DMA+0xa8>)
  __HAL_LOCK(hi2s);
 8002df6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8002dfa:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8002dfc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hi2s->pRxBuffPtr  = NULL;
 8002e00:	6365      	str	r5, [r4, #52]	; 0x34
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8002e02:	6525      	str	r5, [r4, #80]	; 0x50
  hi2s->TxXferSize  = Size;
 8002e04:	8622      	strh	r2, [r4, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8002e06:	8662      	strh	r2, [r4, #50]	; 0x32
  hi2s->RxXferSize  = (uint16_t)0UL;
 8002e08:	8725      	strh	r5, [r4, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8002e0a:	6822      	ldr	r2, [r4, #0]
  hi2s->RxXferCount = (uint16_t)0UL;
 8002e0c:	8765      	strh	r5, [r4, #58]	; 0x3a
                                 hi2s->TxXferCount))
 8002e0e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8002e10:	3220      	adds	r2, #32
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002e12:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002e14:	4f18      	ldr	r7, [pc, #96]	; (8002e78 <HAL_I2S_Transmit_DMA+0xac>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8002e16:	b29b      	uxth	r3, r3
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002e18:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002e1a:	4f18      	ldr	r7, [pc, #96]	; (8002e7c <HAL_I2S_Transmit_DMA+0xb0>)
 8002e1c:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8002e1e:	f7ff f88f 	bl	8001f40 <HAL_DMA_Start_IT>
 8002e22:	b9d0      	cbnz	r0, 8002e5a <HAL_I2S_Transmit_DMA+0x8e>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	0411      	lsls	r1, r2, #16
 8002e2a:	d403      	bmi.n	8002e34 <HAL_I2S_Transmit_DMA+0x68>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e32:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	07d2      	lsls	r2, r2, #31
 8002e38:	d403      	bmi.n	8002e42 <HAL_I2S_Transmit_DMA+0x76>
    __HAL_I2S_ENABLE(hi2s);
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002e42:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002e44:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002e4c:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 8002e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002e52:	2002      	movs	r0, #2
}
 8002e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
}
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 8002e5c:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8002e64:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8002e68:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8002e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8002e6e:	2001      	movs	r0, #1
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	08002b99 	.word	0x08002b99
 8002e78:	08002b79 	.word	0x08002b79
 8002e7c:	08002bc9 	.word	0x08002bc9

08002e80 <HAL_I2S_Receive_DMA>:
  if ((pData == NULL) || (Size == 0UL))
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d050      	beq.n	8002f26 <HAL_I2S_Receive_DMA+0xa6>
{
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0UL))
 8002e86:	fab2 f582 	clz	r5, r2
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	096d      	lsrs	r5, r5, #5
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d03d      	beq.n	8002f0e <HAL_I2S_Receive_DMA+0x8e>
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002e92:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8002e96:	4604      	mov	r4, r0
 8002e98:	2a01      	cmp	r2, #1
 8002e9a:	b2d6      	uxtb	r6, r2
 8002e9c:	d135      	bne.n	8002f0a <HAL_I2S_Receive_DMA+0x8a>
  __HAL_LOCK(hi2s);
 8002e9e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8002ea2:	2a01      	cmp	r2, #1
 8002ea4:	d031      	beq.n	8002f0a <HAL_I2S_Receive_DMA+0x8a>
  hi2s->pRxBuffPtr  = pData;
 8002ea6:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002ea8:	460a      	mov	r2, r1
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8002eaa:	2104      	movs	r1, #4
  __HAL_LOCK(hi2s);
 8002eac:	f880 604c 	strb.w	r6, [r0, #76]	; 0x4c
  hi2s->pTxBuffPtr  = NULL;
 8002eb0:	62c5      	str	r5, [r0, #44]	; 0x2c
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8002eb2:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002eb6:	4f1d      	ldr	r7, [pc, #116]	; (8002f2c <HAL_I2S_Receive_DMA+0xac>)
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8002eb8:	6505      	str	r5, [r0, #80]	; 0x50
  hi2s->RxXferSize  = Size;
 8002eba:	8703      	strh	r3, [r0, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8002ebc:	8743      	strh	r3, [r0, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002ebe:	6c80      	ldr	r0, [r0, #72]	; 0x48
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002ec0:	6821      	ldr	r1, [r4, #0]
  hi2s->TxXferSize  = (uint16_t)0UL;
 8002ec2:	8625      	strh	r5, [r4, #48]	; 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8002ec4:	8665      	strh	r5, [r4, #50]	; 0x32
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002ec6:	3130      	adds	r1, #48	; 0x30
                                 hi2s->RxXferCount))
 8002ec8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002eca:	6407      	str	r7, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002ecc:	4f18      	ldr	r7, [pc, #96]	; (8002f30 <HAL_I2S_Receive_DMA+0xb0>)
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002ece:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002ed0:	63c7      	str	r7, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002ed2:	4f18      	ldr	r7, [pc, #96]	; (8002f34 <HAL_I2S_Receive_DMA+0xb4>)
 8002ed4:	64c7      	str	r7, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8002ed6:	f7ff f833 	bl	8001f40 <HAL_DMA_Start_IT>
 8002eda:	b9d0      	cbnz	r0, 8002f12 <HAL_I2S_Receive_DMA+0x92>
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	0451      	lsls	r1, r2, #17
 8002ee2:	d403      	bmi.n	8002eec <HAL_I2S_Receive_DMA+0x6c>
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eea:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	07d2      	lsls	r2, r2, #31
 8002ef0:	d403      	bmi.n	8002efa <HAL_I2S_Receive_DMA+0x7a>
    __HAL_I2S_ENABLE(hi2s);
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002efa:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002efc:	2100      	movs	r1, #0
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2s);
 8002f04:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
}
 8002f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002f0a:	2002      	movs	r0, #2
}
 8002f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f12:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return errorcode;
 8002f14:	4630      	mov	r0, r6
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6523      	str	r3, [r4, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8002f1c:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 8002f20:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	08002bc1 	.word	0x08002bc1
 8002f30:	08002ba1 	.word	0x08002ba1
 8002f34:	08002bc9 	.word	0x08002bc9

08002f38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f38:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f3a:	4c1c      	ldr	r4, [pc, #112]	; (8002fac <HAL_PWREx_ConfigSupply+0x74>)
{
 8002f3c:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f3e:	68e3      	ldr	r3, [r4, #12]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f46:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f48:	d005      	beq.n	8002f56 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f4e:	1a18      	subs	r0, r3, r0
 8002f50:	bf18      	it	ne
 8002f52:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f5a:	4303      	orrs	r3, r0
 8002f5c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002f5e:	f7fe fbdd 	bl	800171c <HAL_GetTick>
 8002f62:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f64:	e005      	b.n	8002f72 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f66:	f7fe fbd9 	bl	800171c <HAL_GetTick>
 8002f6a:	1b83      	subs	r3, r0, r6
 8002f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f70:	d81a      	bhi.n	8002fa8 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	049a      	lsls	r2, r3, #18
 8002f76:	d5f6      	bpl.n	8002f66 <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f78:	f1a5 031d 	sub.w	r3, r5, #29
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d904      	bls.n	8002f8a <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8002f80:	3d2d      	subs	r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f82:	2d01      	cmp	r5, #1
 8002f84:	d901      	bls.n	8002f8a <HAL_PWREx_ConfigSupply+0x52>
  return HAL_OK;
 8002f86:	2000      	movs	r0, #0
}
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8002f8a:	f7fe fbc7 	bl	800171c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f8e:	4d07      	ldr	r5, [pc, #28]	; (8002fac <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8002f90:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f92:	e005      	b.n	8002fa0 <HAL_PWREx_ConfigSupply+0x68>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f94:	f7fe fbc2 	bl	800171c <HAL_GetTick>
 8002f98:	1b00      	subs	r0, r0, r4
 8002f9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f9e:	d803      	bhi.n	8002fa8 <HAL_PWREx_ConfigSupply+0x70>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fa0:	68eb      	ldr	r3, [r5, #12]
 8002fa2:	03db      	lsls	r3, r3, #15
 8002fa4:	d5f6      	bpl.n	8002f94 <HAL_PWREx_ConfigSupply+0x5c>
 8002fa6:	e7ee      	b.n	8002f86 <HAL_PWREx_ConfigSupply+0x4e>
      return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
}
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	58024800 	.word	0x58024800

08002fb0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fb0:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002fb2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fb6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fb8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002fba:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fc0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002fc4:	d038      	beq.n	8003038 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fc6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fca:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fce:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fd2:	fb05 f101 	mul.w	r1, r5, r1
 8002fd6:	2a01      	cmp	r2, #1
 8002fd8:	ee07 1a90 	vmov	s15, r1
 8002fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8002fe2:	2a02      	cmp	r2, #2
 8002fe4:	d050      	beq.n	8003088 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8002fe6:	b34a      	cbz	r2, 800303c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe8:	ee07 0a90 	vmov	s15, r0
 8002fec:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 80030a8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002ffa:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80030ac <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003012:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003016:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003022:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003034:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003038:	bc30      	pop	{r4, r5}
 800303a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	0692      	lsls	r2, r2, #26
 8003040:	d529      	bpl.n	8003096 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003042:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003044:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003050:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003058:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80030ac <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800305c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003060:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003062:	ee06 3a10 	vmov	s12, r3
 8003066:	ee05 2a90 	vmov	s11, r2
 800306a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800306e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003072:	ee36 6a26 	vadd.f32	s12, s12, s13
 8003076:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800307a:	eef0 7a46 	vmov.f32	s15, s12
 800307e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8003082:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003086:	e7c8      	b.n	800301a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003088:	ee07 0a90 	vmov	s15, r0
 800308c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80030b4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8003090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003094:	e7ae      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003096:	ee07 0a90 	vmov	s15, r0
 800309a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80030b8 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800309e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a2:	e7a7      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80030a4:	58024400 	.word	0x58024400
 80030a8:	4a742400 	.word	0x4a742400
 80030ac:	39000000 	.word	0x39000000
 80030b0:	03d09000 	.word	0x03d09000
 80030b4:	4bbebc20 	.word	0x4bbebc20
 80030b8:	4c742400 	.word	0x4c742400

080030bc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80030bc:	2800      	cmp	r0, #0
 80030be:	f000 81e8 	beq.w	8003492 <HAL_RCC_OscConfig+0x3d6>
{
 80030c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	4604      	mov	r4, r0
 80030c8:	07d9      	lsls	r1, r3, #31
 80030ca:	d52e      	bpl.n	800312a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030cc:	49a4      	ldr	r1, [pc, #656]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 80030ce:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030d6:	2a10      	cmp	r2, #16
 80030d8:	f000 8107 	beq.w	80032ea <HAL_RCC_OscConfig+0x22e>
 80030dc:	2a18      	cmp	r2, #24
 80030de:	f000 80ff 	beq.w	80032e0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	f000 812a 	beq.w	8003340 <HAL_RCC_OscConfig+0x284>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8168 	beq.w	80033c2 <HAL_RCC_OscConfig+0x306>
 80030f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f6:	4b9a      	ldr	r3, [pc, #616]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f000 8289 	beq.w	8003610 <HAL_RCC_OscConfig+0x554>
 80030fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800310a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800310c:	f7fe fb06 	bl	800171c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003110:	4e93      	ldr	r6, [pc, #588]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8003112:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003114:	e005      	b.n	8003122 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003116:	f7fe fb01 	bl	800171c <HAL_GetTick>
 800311a:	1b40      	subs	r0, r0, r5
 800311c:	2864      	cmp	r0, #100	; 0x64
 800311e:	f200 814e 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003122:	6833      	ldr	r3, [r6, #0]
 8003124:	039b      	lsls	r3, r3, #14
 8003126:	d5f6      	bpl.n	8003116 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	079d      	lsls	r5, r3, #30
 800312c:	f100 808a 	bmi.w	8003244 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003130:	06d9      	lsls	r1, r3, #27
 8003132:	d533      	bpl.n	800319c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003134:	4a8a      	ldr	r2, [pc, #552]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003136:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003138:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800313e:	2b08      	cmp	r3, #8
 8003140:	f000 80e3 	beq.w	800330a <HAL_RCC_OscConfig+0x24e>
 8003144:	2b18      	cmp	r3, #24
 8003146:	f000 80db 	beq.w	8003300 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800314a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800314c:	4d84      	ldr	r5, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 816f 	beq.w	8003432 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800315c:	f7fe fade 	bl	800171c <HAL_GetTick>
 8003160:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003162:	e005      	b.n	8003170 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003164:	f7fe fada 	bl	800171c <HAL_GetTick>
 8003168:	1b80      	subs	r0, r0, r6
 800316a:	2802      	cmp	r0, #2
 800316c:	f200 8127 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	05db      	lsls	r3, r3, #23
 8003174:	d5f6      	bpl.n	8003164 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003176:	f7fe fae9 	bl	800174c <HAL_GetREVID>
 800317a:	f241 0303 	movw	r3, #4099	; 0x1003
 800317e:	4298      	cmp	r0, r3
 8003180:	f200 826d 	bhi.w	800365e <HAL_RCC_OscConfig+0x5a2>
 8003184:	6a22      	ldr	r2, [r4, #32]
 8003186:	686b      	ldr	r3, [r5, #4]
 8003188:	2a20      	cmp	r2, #32
 800318a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800318e:	bf0c      	ite	eq
 8003190:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003194:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003198:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	071d      	lsls	r5, r3, #28
 800319e:	d516      	bpl.n	80031ce <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4d6f      	ldr	r5, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8122 	beq.w	80033ee <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 80031aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80031b2:	f7fe fab3 	bl	800171c <HAL_GetTick>
 80031b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031b8:	e005      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe faaf 	bl	800171c <HAL_GetTick>
 80031be:	1b80      	subs	r0, r0, r6
 80031c0:	2802      	cmp	r0, #2
 80031c2:	f200 80fc 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80031c8:	0798      	lsls	r0, r3, #30
 80031ca:	d5f6      	bpl.n	80031ba <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	069a      	lsls	r2, r3, #26
 80031d0:	d516      	bpl.n	8003200 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031d2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80031d4:	4d62      	ldr	r5, [pc, #392]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 811a 	beq.w	8003410 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031e4:	f7fe fa9a 	bl	800171c <HAL_GetTick>
 80031e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ea:	e005      	b.n	80031f8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe fa96 	bl	800171c <HAL_GetTick>
 80031f0:	1b80      	subs	r0, r0, r6
 80031f2:	2802      	cmp	r0, #2
 80031f4:	f200 80e3 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	049f      	lsls	r7, r3, #18
 80031fc:	d5f6      	bpl.n	80031ec <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	0759      	lsls	r1, r3, #29
 8003202:	f100 80a3 	bmi.w	800334c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003208:	b1d0      	cbz	r0, 8003240 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800320a:	4d55      	ldr	r5, [pc, #340]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 800320c:	692b      	ldr	r3, [r5, #16]
 800320e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003212:	2b18      	cmp	r3, #24
 8003214:	f000 81ae 	beq.w	8003574 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003218:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800321c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003220:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	f000 8142 	beq.w	80034aa <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8003226:	f7fe fa79 	bl	800171c <HAL_GetTick>
 800322a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322c:	e005      	b.n	800323a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fa75 	bl	800171c <HAL_GetTick>
 8003232:	1b00      	subs	r0, r0, r4
 8003234:	2802      	cmp	r0, #2
 8003236:	f200 80c2 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	d4f6      	bmi.n	800322e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8003240:	2000      	movs	r0, #0
}
 8003242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003244:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003246:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003248:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800324a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800324e:	d12d      	bne.n	80032ac <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003252:	68e2      	ldr	r2, [r4, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0759      	lsls	r1, r3, #29
 8003258:	d501      	bpl.n	800325e <HAL_RCC_OscConfig+0x1a2>
 800325a:	2a00      	cmp	r2, #0
 800325c:	d04e      	beq.n	80032fc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800325e:	4d40      	ldr	r5, [pc, #256]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	f023 0319 	bic.w	r3, r3, #25
 8003266:	4313      	orrs	r3, r2
 8003268:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800326a:	f7fe fa57 	bl	800171c <HAL_GetTick>
 800326e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003270:	e005      	b.n	800327e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fa53 	bl	800171c <HAL_GetTick>
 8003276:	1b80      	subs	r0, r0, r6
 8003278:	2802      	cmp	r0, #2
 800327a:	f200 80a0 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327e:	682b      	ldr	r3, [r5, #0]
 8003280:	075b      	lsls	r3, r3, #29
 8003282:	d5f6      	bpl.n	8003272 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	f7fe fa62 	bl	800174c <HAL_GetREVID>
 8003288:	f241 0303 	movw	r3, #4099	; 0x1003
 800328c:	4298      	cmp	r0, r3
 800328e:	f200 80f7 	bhi.w	8003480 <HAL_RCC_OscConfig+0x3c4>
 8003292:	6922      	ldr	r2, [r4, #16]
 8003294:	686b      	ldr	r3, [r5, #4]
 8003296:	2a40      	cmp	r2, #64	; 0x40
 8003298:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800329c:	bf0c      	ite	eq
 800329e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80032a2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80032a6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	e741      	b.n	8003130 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032ac:	2b18      	cmp	r3, #24
 80032ae:	f000 80e3 	beq.w	8003478 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032b2:	4d2b      	ldr	r5, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032b4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032b6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032b8:	2a00      	cmp	r2, #0
 80032ba:	f000 80cc 	beq.w	8003456 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032be:	f023 0319 	bic.w	r3, r3, #25
 80032c2:	4313      	orrs	r3, r2
 80032c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032c6:	f7fe fa29 	bl	800171c <HAL_GetTick>
 80032ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032cc:	e004      	b.n	80032d8 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe fa25 	bl	800171c <HAL_GetTick>
 80032d2:	1b80      	subs	r0, r0, r6
 80032d4:	2802      	cmp	r0, #2
 80032d6:	d872      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	075f      	lsls	r7, r3, #29
 80032dc:	d5f7      	bpl.n	80032ce <HAL_RCC_OscConfig+0x212>
 80032de:	e7d1      	b.n	8003284 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032e0:	f001 0103 	and.w	r1, r1, #3
 80032e4:	2902      	cmp	r1, #2
 80032e6:	f47f aefc 	bne.w	80030e2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	0392      	lsls	r2, r2, #14
 80032f0:	f57f af1b 	bpl.w	800312a <HAL_RCC_OscConfig+0x6e>
 80032f4:	6862      	ldr	r2, [r4, #4]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	f47f af17 	bne.w	800312a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
}
 80032fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	2a01      	cmp	r2, #1
 8003306:	f47f af20 	bne.w	800314a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	05da      	lsls	r2, r3, #23
 8003310:	d502      	bpl.n	8003318 <HAL_RCC_OscConfig+0x25c>
 8003312:	69e3      	ldr	r3, [r4, #28]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d1f1      	bne.n	80032fc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003318:	f7fe fa18 	bl	800174c <HAL_GetREVID>
 800331c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003320:	4298      	cmp	r0, r3
 8003322:	f200 80b8 	bhi.w	8003496 <HAL_RCC_OscConfig+0x3da>
 8003326:	6a22      	ldr	r2, [r4, #32]
 8003328:	2a20      	cmp	r2, #32
 800332a:	f000 81a7 	beq.w	800367c <HAL_RCC_OscConfig+0x5c0>
 800332e:	490c      	ldr	r1, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003330:	684b      	ldr	r3, [r1, #4]
 8003332:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003336:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800333a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	e72d      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_RCC_OscConfig+0x2a4>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334a:	e6df      	b.n	800310c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800334c:	4d05      	ldr	r5, [pc, #20]	; (8003364 <HAL_RCC_OscConfig+0x2a8>)
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003356:	f7fe f9e1 	bl	800171c <HAL_GetTick>
 800335a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800335c:	e009      	b.n	8003372 <HAL_RCC_OscConfig+0x2b6>
 800335e:	bf00      	nop
 8003360:	58024400 	.word	0x58024400
 8003364:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fe f9d8 	bl	800171c <HAL_GetTick>
 800336c:	1b80      	subs	r0, r0, r6
 800336e:	2864      	cmp	r0, #100	; 0x64
 8003370:	d825      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	05da      	lsls	r2, r3, #23
 8003376:	d5f7      	bpl.n	8003368 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	68a3      	ldr	r3, [r4, #8]
 800337a:	2b01      	cmp	r3, #1
 800337c:	f000 8178 	beq.w	8003670 <HAL_RCC_OscConfig+0x5b4>
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8153 	beq.w	800362c <HAL_RCC_OscConfig+0x570>
 8003386:	2b05      	cmp	r3, #5
 8003388:	4ba5      	ldr	r3, [pc, #660]	; (8003620 <HAL_RCC_OscConfig+0x564>)
 800338a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800338c:	f000 817f 	beq.w	800368e <HAL_RCC_OscConfig+0x5d2>
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	671a      	str	r2, [r3, #112]	; 0x70
 8003396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800339e:	f7fe f9bd 	bl	800171c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a2:	4e9f      	ldr	r6, [pc, #636]	; (8003620 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80033a8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033aa:	e004      	b.n	80033b6 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe f9b6 	bl	800171c <HAL_GetTick>
 80033b0:	1b40      	subs	r0, r0, r5
 80033b2:	42b8      	cmp	r0, r7
 80033b4:	d803      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80033b8:	079b      	lsls	r3, r3, #30
 80033ba:	d5f7      	bpl.n	80033ac <HAL_RCC_OscConfig+0x2f0>
 80033bc:	e723      	b.n	8003206 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
}
 80033c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c2:	4d97      	ldr	r5, [pc, #604]	; (8003620 <HAL_RCC_OscConfig+0x564>)
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033d4:	f7fe f9a2 	bl	800171c <HAL_GetTick>
 80033d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033da:	e004      	b.n	80033e6 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe f99e 	bl	800171c <HAL_GetTick>
 80033e0:	1b80      	subs	r0, r0, r6
 80033e2:	2864      	cmp	r0, #100	; 0x64
 80033e4:	d8eb      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	039f      	lsls	r7, r3, #14
 80033ea:	d4f7      	bmi.n	80033dc <HAL_RCC_OscConfig+0x320>
 80033ec:	e69c      	b.n	8003128 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80033ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80033f6:	f7fe f991 	bl	800171c <HAL_GetTick>
 80033fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033fc:	e004      	b.n	8003408 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fe f98d 	bl	800171c <HAL_GetTick>
 8003402:	1b80      	subs	r0, r0, r6
 8003404:	2802      	cmp	r0, #2
 8003406:	d8da      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003408:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800340a:	0799      	lsls	r1, r3, #30
 800340c:	d4f7      	bmi.n	80033fe <HAL_RCC_OscConfig+0x342>
 800340e:	e6dd      	b.n	80031cc <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003416:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003418:	f7fe f980 	bl	800171c <HAL_GetTick>
 800341c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800341e:	e004      	b.n	800342a <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003420:	f7fe f97c 	bl	800171c <HAL_GetTick>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	2802      	cmp	r0, #2
 8003428:	d8c9      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	0498      	lsls	r0, r3, #18
 800342e:	d4f7      	bmi.n	8003420 <HAL_RCC_OscConfig+0x364>
 8003430:	e6e5      	b.n	80031fe <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003438:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800343a:	f7fe f96f 	bl	800171c <HAL_GetTick>
 800343e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003440:	e004      	b.n	800344c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003442:	f7fe f96b 	bl	800171c <HAL_GetTick>
 8003446:	1b80      	subs	r0, r0, r6
 8003448:	2802      	cmp	r0, #2
 800344a:	d8b8      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	05df      	lsls	r7, r3, #23
 8003450:	d4f7      	bmi.n	8003442 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	e6a2      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800345c:	f7fe f95e 	bl	800171c <HAL_GetTick>
 8003460:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003462:	e004      	b.n	800346e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe f95a 	bl	800171c <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	2802      	cmp	r0, #2
 800346c:	d8a7      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	0758      	lsls	r0, r3, #29
 8003472:	d4f7      	bmi.n	8003464 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	e65b      	b.n	8003130 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003478:	0790      	lsls	r0, r2, #30
 800347a:	f47f af1a 	bne.w	80032b2 <HAL_RCC_OscConfig+0x1f6>
 800347e:	e6e7      	b.n	8003250 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	686b      	ldr	r3, [r5, #4]
 8003482:	6922      	ldr	r2, [r4, #16]
 8003484:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003488:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800348c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	e64e      	b.n	8003130 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
}
 8003494:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003496:	4a62      	ldr	r2, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x564>)
 8003498:	6a21      	ldr	r1, [r4, #32]
 800349a:	68d3      	ldr	r3, [r2, #12]
 800349c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80034a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034a4:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	e678      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80034aa:	f7fe f937 	bl	800171c <HAL_GetTick>
 80034ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034b0:	e004      	b.n	80034bc <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe f933 	bl	800171c <HAL_GetTick>
 80034b6:	1b80      	subs	r0, r0, r6
 80034b8:	2802      	cmp	r0, #2
 80034ba:	d880      	bhi.n	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	0199      	lsls	r1, r3, #6
 80034c0:	d4f7      	bmi.n	80034b2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x568>)
 80034c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034c8:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034ca:	4957      	ldr	r1, [pc, #348]	; (8003628 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034cc:	4e54      	ldr	r6, [pc, #336]	; (8003620 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ce:	4313      	orrs	r3, r2
 80034d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80034d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80034d8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80034dc:	3b01      	subs	r3, #1
 80034de:	3a01      	subs	r2, #1
 80034e0:	025b      	lsls	r3, r3, #9
 80034e2:	0412      	lsls	r2, r2, #16
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80034ea:	4313      	orrs	r3, r2
 80034ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034ee:	3a01      	subs	r2, #1
 80034f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f4:	4313      	orrs	r3, r2
 80034f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0612      	lsls	r2, r2, #24
 80034fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003500:	4313      	orrs	r3, r2
 8003502:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003504:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800350c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800350e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003510:	4011      	ands	r1, r2
 8003512:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003516:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800351a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800351c:	f023 030c 	bic.w	r3, r3, #12
 8003520:	4313      	orrs	r3, r2
 8003522:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003524:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003526:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	4313      	orrs	r3, r2
 800352e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003530:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003540:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003546:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003548:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003558:	f7fe f8e0 	bl	800171c <HAL_GetTick>
 800355c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800355e:	e005      	b.n	800356c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe f8dc 	bl	800171c <HAL_GetTick>
 8003564:	1b00      	subs	r0, r0, r4
 8003566:	2802      	cmp	r0, #2
 8003568:	f63f af29 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800356c:	6833      	ldr	r3, [r6, #0]
 800356e:	019a      	lsls	r2, r3, #6
 8003570:	d5f6      	bpl.n	8003560 <HAL_RCC_OscConfig+0x4a4>
 8003572:	e665      	b.n	8003240 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003576:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003578:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357a:	f43f ae62 	beq.w	8003242 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003582:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003584:	428b      	cmp	r3, r1
 8003586:	f47f aeb9 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800358a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003590:	429a      	cmp	r2, r3
 8003592:	f47f aeb3 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003598:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800359c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	f47f aeac 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035a6:	f3c6 2246 	ubfx	r2, r6, #9, #7
 80035aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f47f aea5 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035b4:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80035b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	f47f ae9e 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035c2:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80035c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035c8:	429e      	cmp	r6, r3
 80035ca:	f47f ae97 	bne.w	80032fc <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035d2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035d6:	429a      	cmp	r2, r3
 80035d8:	f43f ae32 	beq.w	8003240 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 80035dc:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_RCC_OscConfig+0x564>)
 80035de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80035e6:	f7fe f899 	bl	800171c <HAL_GetTick>
 80035ea:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035ec:	f7fe f896 	bl	800171c <HAL_GetTick>
 80035f0:	42a8      	cmp	r0, r5
 80035f2:	d0fb      	beq.n	80035ec <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035f4:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 80035f6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x56c>)
 80035fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80035fe:	4023      	ands	r3, r4
 8003600:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003604:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003606:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003610:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e575      	b.n	800310c <HAL_RCC_OscConfig+0x50>
 8003620:	58024400 	.word	0x58024400
 8003624:	fffffc0c 	.word	0xfffffc0c
 8003628:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	4d1c      	ldr	r5, [pc, #112]	; (80036a0 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003632:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	672b      	str	r3, [r5, #112]	; 0x70
 800363a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003642:	f7fe f86b 	bl	800171c <HAL_GetTick>
 8003646:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003648:	e005      	b.n	8003656 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe f867 	bl	800171c <HAL_GetTick>
 800364e:	1b80      	subs	r0, r0, r6
 8003650:	42b8      	cmp	r0, r7
 8003652:	f63f aeb4 	bhi.w	80033be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003656:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003658:	0798      	lsls	r0, r3, #30
 800365a:	d4f6      	bmi.n	800364a <HAL_RCC_OscConfig+0x58e>
 800365c:	e5d3      	b.n	8003206 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365e:	68eb      	ldr	r3, [r5, #12]
 8003660:	6a22      	ldr	r2, [r4, #32]
 8003662:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003666:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800366a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	e595      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_RCC_OscConfig+0x5e4>)
 8003672:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367a:	e690      	b.n	800339e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_RCC_OscConfig+0x5e4>)
 800367e:	6853      	ldr	r3, [r2, #4]
 8003680:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003688:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	e586      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	f042 0204 	orr.w	r2, r2, #4
 8003692:	671a      	str	r2, [r3, #112]	; 0x70
 8003694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	671a      	str	r2, [r3, #112]	; 0x70
 800369c:	e67f      	b.n	800339e <HAL_RCC_OscConfig+0x2e2>
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400

080036a4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a4:	4a48      	ldr	r2, [pc, #288]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x124>)
 80036a6:	6913      	ldr	r3, [r2, #16]
 80036a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d004      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x16>
 80036b0:	2b18      	cmp	r3, #24
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80036b4:	b11b      	cbz	r3, 80036be <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80036b6:	4845      	ldr	r0, [pc, #276]	; (80037cc <HAL_RCC_GetSysClockFreq+0x128>)
 80036b8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ba:	4845      	ldr	r0, [pc, #276]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036bc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	0699      	lsls	r1, r3, #26
 80036c2:	d54a      	bpl.n	800375a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	4843      	ldr	r0, [pc, #268]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x130>)
 80036c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80036cc:	40d8      	lsrs	r0, r3
 80036ce:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80036d2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036d4:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036d6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80036d8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036dc:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036de:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80036e2:	d038      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036e4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ec:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036f0:	fb05 f101 	mul.w	r1, r5, r1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	ee07 1a90 	vmov	s15, r1
 80036fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80036fe:	d002      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x62>
 8003700:	2b02      	cmp	r3, #2
 8003702:	d02c      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0xba>
 8003704:	b393      	cbz	r3, 800376c <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003706:	ee07 0a90 	vmov	s15, r0
 800370a:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x134>
 800370e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003712:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003714:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8003718:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80037dc <HAL_RCC_GetSysClockFreq+0x138>
 800371c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003730:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003734:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x124>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003740:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800374a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003752:	ee17 0a90 	vmov	r0, s15
}
 8003756:	bc30      	pop	{r4, r5}
 8003758:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800375a:	481e      	ldr	r0, [pc, #120]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x130>)
}
 800375c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800375e:	ee07 0a90 	vmov	s15, r0
 8003762:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x13c>
 8003766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376a:	e7d2      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	069b      	lsls	r3, r3, #26
 8003770:	d522      	bpl.n	80037b8 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003772:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003774:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377e:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003780:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003788:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80037dc <HAL_RCC_GetSysClockFreq+0x138>
 800378c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003790:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003792:	ee06 3a10 	vmov	s12, r3
 8003796:	ee05 1a90 	vmov	s11, r1
 800379a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800379e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80037a2:	ee36 6a26 	vadd.f32	s12, s12, s13
 80037a6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80037aa:	eef0 7a46 	vmov.f32	s15, s12
 80037ae:	eee7 7a05 	vfma.f32	s15, s14, s10
 80037b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037b6:	e7bf      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b8:	ee07 0a90 	vmov	s15, r0
 80037bc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80037e4 <HAL_RCC_GetSysClockFreq+0x140>
 80037c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c4:	e7a5      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x6e>
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	003d0900 	.word	0x003d0900
 80037d0:	017d7840 	.word	0x017d7840
 80037d4:	03d09000 	.word	0x03d09000
 80037d8:	4a742400 	.word	0x4a742400
 80037dc:	39000000 	.word	0x39000000
 80037e0:	4bbebc20 	.word	0x4bbebc20
 80037e4:	4c742400 	.word	0x4c742400

080037e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80037e8:	2800      	cmp	r0, #0
 80037ea:	f000 810c 	beq.w	8003a06 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ee:	4a8c      	ldr	r2, [pc, #560]	; (8003a20 <HAL_RCC_ClockConfig+0x238>)
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	428b      	cmp	r3, r1
{
 80037f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fc:	4604      	mov	r4, r0
 80037fe:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	d20c      	bcs.n	800381c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	f023 030f 	bic.w	r3, r3, #15
 8003808:	430b      	orrs	r3, r1
 800380a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380c:	6813      	ldr	r3, [r2, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	428b      	cmp	r3, r1
 8003814:	d002      	beq.n	800381c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
}
 8003818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	075f      	lsls	r7, r3, #29
 8003820:	d50b      	bpl.n	800383a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003822:	4980      	ldr	r1, [pc, #512]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003824:	6920      	ldr	r0, [r4, #16]
 8003826:	698a      	ldr	r2, [r1, #24]
 8003828:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800382c:	4290      	cmp	r0, r2
 800382e:	d904      	bls.n	800383a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003830:	698a      	ldr	r2, [r1, #24]
 8003832:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003836:	4302      	orrs	r2, r0
 8003838:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	071e      	lsls	r6, r3, #28
 800383c:	d50b      	bpl.n	8003856 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800383e:	4979      	ldr	r1, [pc, #484]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003840:	6960      	ldr	r0, [r4, #20]
 8003842:	69ca      	ldr	r2, [r1, #28]
 8003844:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003848:	4290      	cmp	r0, r2
 800384a:	d904      	bls.n	8003856 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800384c:	69ca      	ldr	r2, [r1, #28]
 800384e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003852:	4302      	orrs	r2, r0
 8003854:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	06d8      	lsls	r0, r3, #27
 8003858:	d50b      	bpl.n	8003872 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800385a:	4972      	ldr	r1, [pc, #456]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 800385c:	69a0      	ldr	r0, [r4, #24]
 800385e:	69ca      	ldr	r2, [r1, #28]
 8003860:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003864:	4290      	cmp	r0, r2
 8003866:	d904      	bls.n	8003872 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003868:	69ca      	ldr	r2, [r1, #28]
 800386a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800386e:	4302      	orrs	r2, r0
 8003870:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003872:	0699      	lsls	r1, r3, #26
 8003874:	d50b      	bpl.n	800388e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003876:	496b      	ldr	r1, [pc, #428]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003878:	69e0      	ldr	r0, [r4, #28]
 800387a:	6a0a      	ldr	r2, [r1, #32]
 800387c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003880:	4290      	cmp	r0, r2
 8003882:	d904      	bls.n	800388e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003884:	6a0a      	ldr	r2, [r1, #32]
 8003886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800388a:	4302      	orrs	r2, r0
 800388c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388e:	079a      	lsls	r2, r3, #30
 8003890:	f140 80ab 	bpl.w	80039ea <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003894:	4863      	ldr	r0, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003896:	68e1      	ldr	r1, [r4, #12]
 8003898:	6982      	ldr	r2, [r0, #24]
 800389a:	f002 020f 	and.w	r2, r2, #15
 800389e:	4291      	cmp	r1, r2
 80038a0:	d904      	bls.n	80038ac <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a2:	6982      	ldr	r2, [r0, #24]
 80038a4:	f022 020f 	bic.w	r2, r2, #15
 80038a8:	430a      	orrs	r2, r1
 80038aa:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ac:	07d8      	lsls	r0, r3, #31
 80038ae:	d530      	bpl.n	8003912 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038b0:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 80038b2:	68a1      	ldr	r1, [r4, #8]
 80038b4:	6993      	ldr	r3, [r2, #24]
 80038b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ba:	430b      	orrs	r3, r1
 80038bc:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	2902      	cmp	r1, #2
 80038c4:	f000 80a1 	beq.w	8003a0a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c8:	2903      	cmp	r1, #3
 80038ca:	f000 8098 	beq.w	80039fe <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038ce:	2901      	cmp	r1, #1
 80038d0:	f000 80a1 	beq.w	8003a16 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038d4:	0758      	lsls	r0, r3, #29
 80038d6:	d59e      	bpl.n	8003816 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038d8:	4e52      	ldr	r6, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038da:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038de:	6933      	ldr	r3, [r6, #16]
 80038e0:	f023 0307 	bic.w	r3, r3, #7
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80038e8:	f7fd ff18 	bl	800171c <HAL_GetTick>
 80038ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e005      	b.n	80038fc <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd ff14 	bl	800171c <HAL_GetTick>
 80038f4:	1bc0      	subs	r0, r0, r7
 80038f6:	4540      	cmp	r0, r8
 80038f8:	f200 808b 	bhi.w	8003a12 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	6933      	ldr	r3, [r6, #16]
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003904:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003908:	d1f2      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	0799      	lsls	r1, r3, #30
 800390e:	d506      	bpl.n	800391e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003910:	68e1      	ldr	r1, [r4, #12]
 8003912:	4844      	ldr	r0, [pc, #272]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003914:	6982      	ldr	r2, [r0, #24]
 8003916:	f002 020f 	and.w	r2, r2, #15
 800391a:	428a      	cmp	r2, r1
 800391c:	d869      	bhi.n	80039f2 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391e:	4940      	ldr	r1, [pc, #256]	; (8003a20 <HAL_RCC_ClockConfig+0x238>)
 8003920:	680a      	ldr	r2, [r1, #0]
 8003922:	f002 020f 	and.w	r2, r2, #15
 8003926:	42aa      	cmp	r2, r5
 8003928:	d90a      	bls.n	8003940 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	680a      	ldr	r2, [r1, #0]
 800392c:	f022 020f 	bic.w	r2, r2, #15
 8003930:	432a      	orrs	r2, r5
 8003932:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003934:	680a      	ldr	r2, [r1, #0]
 8003936:	f002 020f 	and.w	r2, r2, #15
 800393a:	42aa      	cmp	r2, r5
 800393c:	f47f af6b 	bne.w	8003816 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003940:	075a      	lsls	r2, r3, #29
 8003942:	d50b      	bpl.n	800395c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003944:	4937      	ldr	r1, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003946:	6920      	ldr	r0, [r4, #16]
 8003948:	698a      	ldr	r2, [r1, #24]
 800394a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800394e:	4290      	cmp	r0, r2
 8003950:	d204      	bcs.n	800395c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003952:	698a      	ldr	r2, [r1, #24]
 8003954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003958:	4302      	orrs	r2, r0
 800395a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	071f      	lsls	r7, r3, #28
 800395e:	d50b      	bpl.n	8003978 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003960:	4930      	ldr	r1, [pc, #192]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 8003962:	6960      	ldr	r0, [r4, #20]
 8003964:	69ca      	ldr	r2, [r1, #28]
 8003966:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800396a:	4290      	cmp	r0, r2
 800396c:	d204      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800396e:	69ca      	ldr	r2, [r1, #28]
 8003970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003974:	4302      	orrs	r2, r0
 8003976:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	06de      	lsls	r6, r3, #27
 800397a:	d50b      	bpl.n	8003994 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800397c:	4929      	ldr	r1, [pc, #164]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 800397e:	69a0      	ldr	r0, [r4, #24]
 8003980:	69ca      	ldr	r2, [r1, #28]
 8003982:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003986:	4290      	cmp	r0, r2
 8003988:	d204      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800398a:	69ca      	ldr	r2, [r1, #28]
 800398c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003990:	4302      	orrs	r2, r0
 8003992:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003994:	069d      	lsls	r5, r3, #26
 8003996:	d50b      	bpl.n	80039b0 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003998:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 800399a:	69e1      	ldr	r1, [r4, #28]
 800399c:	6a13      	ldr	r3, [r2, #32]
 800399e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a2:	4299      	cmp	r1, r3
 80039a4:	d204      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039a6:	6a13      	ldr	r3, [r2, #32]
 80039a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039b0:	f7ff fe78 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_RCC_ClockConfig+0x23c>)
 80039b6:	4603      	mov	r3, r0
 80039b8:	481b      	ldr	r0, [pc, #108]	; (8003a28 <HAL_RCC_ClockConfig+0x240>)
 80039ba:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039bc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039be:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80039c2:	4d1a      	ldr	r5, [pc, #104]	; (8003a2c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039c4:	f002 020f 	and.w	r2, r2, #15
 80039c8:	4c19      	ldr	r4, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039ca:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039cc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039ce:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80039d2:	4818      	ldr	r0, [pc, #96]	; (8003a34 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039d4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039d8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80039da:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80039dc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039de:	40d3      	lsrs	r3, r2
 80039e0:	6023      	str	r3, [r4, #0]
}
 80039e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80039e6:	f7fd be37 	b.w	8001658 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	07da      	lsls	r2, r3, #31
 80039ec:	f53f af60 	bmi.w	80038b0 <HAL_RCC_ClockConfig+0xc8>
 80039f0:	e795      	b.n	800391e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f2:	6982      	ldr	r2, [r0, #24]
 80039f4:	f022 020f 	bic.w	r2, r2, #15
 80039f8:	430a      	orrs	r2, r1
 80039fa:	6182      	str	r2, [r0, #24]
 80039fc:	e78f      	b.n	800391e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039fe:	019f      	lsls	r7, r3, #6
 8003a00:	f53f af6a 	bmi.w	80038d8 <HAL_RCC_ClockConfig+0xf0>
 8003a04:	e707      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
}
 8003a08:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a0a:	039b      	lsls	r3, r3, #14
 8003a0c:	f53f af64 	bmi.w	80038d8 <HAL_RCC_ClockConfig+0xf0>
 8003a10:	e701      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003a12:	2003      	movs	r0, #3
 8003a14:	e700      	b.n	8003818 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a16:	05de      	lsls	r6, r3, #23
 8003a18:	f53f af5e 	bmi.w	80038d8 <HAL_RCC_ClockConfig+0xf0>
 8003a1c:	e6fb      	b.n	8003816 <HAL_RCC_ClockConfig+0x2e>
 8003a1e:	bf00      	nop
 8003a20:	52002000 	.word	0x52002000
 8003a24:	58024400 	.word	0x58024400
 8003a28:	08006960 	.word	0x08006960
 8003a2c:	24000000 	.word	0x24000000
 8003a30:	24000004 	.word	0x24000004
 8003a34:	240003a0 	.word	0x240003a0

08003a38 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	6913      	ldr	r3, [r2, #16]
 8003a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d01a      	beq.n	8003a7c <HAL_RCC_GetHCLKFreq+0x44>
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	d023      	beq.n	8003a92 <HAL_RCC_GetHCLKFreq+0x5a>
 8003a4a:	b1cb      	cbz	r3, 8003a80 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8003a4c:	4814      	ldr	r0, [pc, #80]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x64>)
 8003a50:	4914      	ldr	r1, [pc, #80]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003a52:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a54:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a56:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a5a:	4c13      	ldr	r4, [pc, #76]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x70>)
 8003a5c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a60:	4d12      	ldr	r5, [pc, #72]	; (8003aac <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a62:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a6e:	f003 001f 	and.w	r0, r3, #31
 8003a72:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8003a76:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a78:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x78>)
 8003a7e:	e7e6      	b.n	8003a4e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	d508      	bpl.n	8003a98 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	480a      	ldr	r0, [pc, #40]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003a8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003a8e:	40d8      	lsrs	r0, r3
 8003a90:	e7dd      	b.n	8003a4e <HAL_RCC_GetHCLKFreq+0x16>
 8003a92:	f7ff fa8d 	bl	8002fb0 <HAL_RCC_GetSysClockFreq.part.0>
 8003a96:	e7da      	b.n	8003a4e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a98:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003a9a:	e7d8      	b.n	8003a4e <HAL_RCC_GetHCLKFreq+0x16>
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	003d0900 	.word	0x003d0900
 8003aa4:	08006960 	.word	0x08006960
 8003aa8:	24000004 	.word	0x24000004
 8003aac:	24000000 	.word	0x24000000
 8003ab0:	017d7840 	.word	0x017d7840
 8003ab4:	03d09000 	.word	0x03d09000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aba:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	6913      	ldr	r3, [r2, #16]
 8003abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d021      	beq.n	8003b0a <HAL_RCC_GetPCLK1Freq+0x52>
 8003ac6:	2b18      	cmp	r3, #24
 8003ac8:	d02a      	beq.n	8003b20 <HAL_RCC_GetPCLK1Freq+0x68>
 8003aca:	b303      	cbz	r3, 8003b0e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8003acc:	4818      	ldr	r0, [pc, #96]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ace:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x74>)
 8003ad0:	4918      	ldr	r1, [pc, #96]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003ad2:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad4:	4c18      	ldr	r4, [pc, #96]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ad6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8003ada:	4d18      	ldr	r5, [pc, #96]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ae4:	6993      	ldr	r3, [r2, #24]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8003aea:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa20 f303 	lsr.w	r3, r0, r3
 8003af6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003af8:	69d2      	ldr	r2, [r2, #28]
 8003afa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003afe:	5c88      	ldrb	r0, [r1, r2]
 8003b00:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b04:	fa23 f000 	lsr.w	r0, r3, r0
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0a:	480d      	ldr	r0, [pc, #52]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x88>)
 8003b0c:	e7df      	b.n	8003ace <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	069b      	lsls	r3, r3, #26
 8003b12:	d508      	bpl.n	8003b26 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	480b      	ldr	r0, [pc, #44]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003b18:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b1c:	40d8      	lsrs	r0, r3
 8003b1e:	e7d6      	b.n	8003ace <HAL_RCC_GetPCLK1Freq+0x16>
 8003b20:	f7ff fa46 	bl	8002fb0 <HAL_RCC_GetSysClockFreq.part.0>
 8003b24:	e7d3      	b.n	8003ace <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b26:	4807      	ldr	r0, [pc, #28]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003b28:	e7d1      	b.n	8003ace <HAL_RCC_GetPCLK1Freq+0x16>
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	003d0900 	.word	0x003d0900
 8003b34:	08006960 	.word	0x08006960
 8003b38:	24000004 	.word	0x24000004
 8003b3c:	24000000 	.word	0x24000000
 8003b40:	017d7840 	.word	0x017d7840
 8003b44:	03d09000 	.word	0x03d09000

08003b48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b4a:	4c3a      	ldr	r4, [pc, #232]	; (8003c34 <RCCEx_PLL2_Config+0xec>)
 8003b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d067      	beq.n	8003c26 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460f      	mov	r7, r1
 8003b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd fddb 	bl	800171c <HAL_GetTick>
 8003b66:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b68:	e004      	b.n	8003b74 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b6a:	f7fd fdd7 	bl	800171c <HAL_GetTick>
 8003b6e:	1b43      	subs	r3, r0, r5
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d856      	bhi.n	8003c22 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	011a      	lsls	r2, r3, #4
 8003b78:	d4f7      	bmi.n	8003b6a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b7c:	6832      	ldr	r2, [r6, #0]
 8003b7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b82:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003b86:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b88:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	0412      	lsls	r2, r2, #16
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	6872      	ldr	r2, [r6, #4]
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	6932      	ldr	r2, [r6, #16]
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	0612      	lsls	r2, r2, #24
 8003bac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bb6:	6972      	ldr	r2, [r6, #20]
 8003bb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bc2:	69b3      	ldr	r3, [r6, #24]
 8003bc4:	f022 0220 	bic.w	r2, r2, #32
 8003bc8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bcc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bd6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bd8:	69f2      	ldr	r2, [r6, #28]
 8003bda:	400b      	ands	r3, r1
 8003bdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003be0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003be4:	f043 0310 	orr.w	r3, r3, #16
 8003be8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003bec:	b1ef      	cbz	r7, 8003c2a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003bee:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bf0:	bf0c      	ite	eq
 8003bf2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003bf6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003bfc:	4c0d      	ldr	r4, [pc, #52]	; (8003c34 <RCCEx_PLL2_Config+0xec>)
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c06:	f7fd fd89 	bl	800171c <HAL_GetTick>
 8003c0a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c0c:	e004      	b.n	8003c18 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c0e:	f7fd fd85 	bl	800171c <HAL_GetTick>
 8003c12:	1b40      	subs	r0, r0, r5
 8003c14:	2802      	cmp	r0, #2
 8003c16:	d804      	bhi.n	8003c22 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	d5f7      	bpl.n	8003c0e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8003c1e:	2000      	movs	r0, #0
}
 8003c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003c22:	2003      	movs	r0, #3
}
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
}
 8003c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c30:	e7e4      	b.n	8003bfc <RCCEx_PLL2_Config+0xb4>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	ffff0007 	.word	0xffff0007

08003c3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c3e:	4c3a      	ldr	r4, [pc, #232]	; (8003d28 <RCCEx_PLL3_Config+0xec>)
 8003c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d067      	beq.n	8003d1a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	460f      	mov	r7, r1
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fd fd61 	bl	800171c <HAL_GetTick>
 8003c5a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c5c:	e004      	b.n	8003c68 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c5e:	f7fd fd5d 	bl	800171c <HAL_GetTick>
 8003c62:	1b43      	subs	r3, r0, r5
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d856      	bhi.n	8003d16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	d4f7      	bmi.n	8003c5e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c70:	6832      	ldr	r2, [r6, #0]
 8003c72:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8003c76:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003c7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c7c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	3a01      	subs	r2, #1
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	0412      	lsls	r2, r2, #16
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	6872      	ldr	r2, [r6, #4]
 8003c92:	3a01      	subs	r2, #1
 8003c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	6932      	ldr	r2, [r6, #16]
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0612      	lsls	r2, r2, #24
 8003ca0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003caa:	6972      	ldr	r2, [r6, #20]
 8003cac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003cb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cb6:	69b3      	ldr	r3, [r6, #24]
 8003cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cbc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003cc0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ccc:	69f2      	ldr	r2, [r6, #28]
 8003cce:	400b      	ands	r3, r1
 8003cd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003cd4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003cd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003ce0:	b1ef      	cbz	r7, 8003d1e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ce2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ce4:	bf0c      	ite	eq
 8003ce6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003cea:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003cee:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003cf0:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <RCCEx_PLL3_Config+0xec>)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fd0f 	bl	800171c <HAL_GetTick>
 8003cfe:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d00:	e004      	b.n	8003d0c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d02:	f7fd fd0b 	bl	800171c <HAL_GetTick>
 8003d06:	1b40      	subs	r0, r0, r5
 8003d08:	2802      	cmp	r0, #2
 8003d0a:	d804      	bhi.n	8003d16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	d5f7      	bpl.n	8003d02 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003d16:	2003      	movs	r0, #3
}
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003d1a:	2001      	movs	r0, #1
}
 8003d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d24:	e7e4      	b.n	8003cf0 <RCCEx_PLL3_Config+0xb4>
 8003d26:	bf00      	nop
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	ffff0007 	.word	0xffff0007

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d34:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003d38:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d3a:	011f      	lsls	r7, r3, #4
 8003d3c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8003d40:	d51d      	bpl.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d42:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8003d44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003d48:	f000 8560 	beq.w	800480c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d4c:	d824      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003d4e:	2900      	cmp	r1, #0
 8003d50:	f000 8479 	beq.w	8004646 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003d54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003d58:	d121      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	3008      	adds	r0, #8
 8003d5e:	f7ff fef3 	bl	8003b48 <RCCEx_PLL2_Config>
 8003d62:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	f040 854d 	bne.w	8004804 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d6a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d6c:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d70:	4dad      	ldr	r5, [pc, #692]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d72:	2600      	movs	r6, #0
 8003d74:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003d76:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003d7a:	4301      	orrs	r1, r0
 8003d7c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d7e:	05dd      	lsls	r5, r3, #23
 8003d80:	d511      	bpl.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d82:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003d84:	2904      	cmp	r1, #4
 8003d86:	f200 85ef 	bhi.w	8004968 <HAL_RCCEx_PeriphCLKConfig+0xc38>
 8003d8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d8e:	0570      	.short	0x0570
 8003d90:	05800577 	.word	0x05800577
 8003d94:	03380338 	.word	0x03380338
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d98:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003d9c:	d0e8      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d9e:	05dd      	lsls	r5, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003da0:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003da4:	d4ed      	bmi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003da6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003da8:	0598      	lsls	r0, r3, #22
 8003daa:	d51d      	bpl.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003dac:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003dae:	2980      	cmp	r1, #128	; 0x80
 8003db0:	f000 8549 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8003db4:	f200 8107 	bhi.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003db8:	2900      	cmp	r1, #0
 8003dba:	f000 8451 	beq.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8003dbe:	2940      	cmp	r1, #64	; 0x40
 8003dc0:	f040 8108 	bne.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f104 0008 	add.w	r0, r4, #8
 8003dca:	f7ff febd 	bl	8003b48 <RCCEx_PLL2_Config>
 8003dce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dd0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	f040 8418 	bne.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dda:	4f93      	ldr	r7, [pc, #588]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ddc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003de0:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8003de4:	4301      	orrs	r1, r0
 8003de6:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003de8:	0559      	lsls	r1, r3, #21
 8003dea:	d521      	bpl.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dec:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003df0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003df4:	f000 8513 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003df8:	f200 80ef 	bhi.w	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	f000 8436 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003e02:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003e06:	f040 80f0 	bne.w	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f104 0008 	add.w	r0, r4, #8
 8003e10:	f7ff fe9a 	bl	8003b48 <RCCEx_PLL2_Config>
 8003e14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	f040 83f8 	bne.w	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e20:	4f81      	ldr	r7, [pc, #516]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e22:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8003e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e28:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8003e2c:	4301      	orrs	r1, r0
 8003e2e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e30:	051f      	lsls	r7, r3, #20
 8003e32:	d521      	bpl.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e34:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8003e38:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003e3c:	f000 84f9 	beq.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003e40:	f200 80d6 	bhi.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003e44:	2900      	cmp	r1, #0
 8003e46:	f000 8419 	beq.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8003e4a:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003e4e:	f040 80d7 	bne.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e52:	2100      	movs	r1, #0
 8003e54:	f104 0008 	add.w	r0, r4, #8
 8003e58:	f7ff fe76 	bl	8003b48 <RCCEx_PLL2_Config>
 8003e5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	f040 83db 	bne.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e68:	4f6f      	ldr	r7, [pc, #444]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e6a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8003e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e70:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8003e74:	4301      	orrs	r1, r0
 8003e76:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e78:	0198      	lsls	r0, r3, #6
 8003e7a:	d518      	bpl.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->QspiClockSelection)
 8003e7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003e7e:	2920      	cmp	r1, #32
 8003e80:	f000 8499 	beq.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e84:	f200 80bf 	bhi.w	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003e88:	b139      	cbz	r1, 8003e9a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003e8a:	2910      	cmp	r1, #16
 8003e8c:	f040 80be 	bne.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e90:	4865      	ldr	r0, [pc, #404]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e92:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003e94:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003e98:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	f040 8405 	bne.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ea0:	4f61      	ldr	r7, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ea2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ea4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003ea6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8003eaa:	4301      	orrs	r1, r0
 8003eac:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eae:	04d9      	lsls	r1, r3, #19
 8003eb0:	d51f      	bpl.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003eb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003eb4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003eb8:	f000 84cf 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003ebc:	f200 80a9 	bhi.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	f000 83c7 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003eca:	f040 80aa 	bne.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f104 0008 	add.w	r0, r4, #8
 8003ed4:	f7ff fe38 	bl	8003b48 <RCCEx_PLL2_Config>
 8003ed8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003eda:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	f040 839b 	bne.w	800461a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ee4:	4f50      	ldr	r7, [pc, #320]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ee6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003ee8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003eea:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003eee:	4301      	orrs	r1, r0
 8003ef0:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ef2:	049f      	lsls	r7, r3, #18
 8003ef4:	d51d      	bpl.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ef6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003ef8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003efc:	f000 840e 	beq.w	800471c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8003f00:	f200 8094 	bhi.w	800402c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003f04:	b159      	cbz	r1, 8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f06:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003f0a:	f040 8099 	bne.w	8004040 <HAL_RCCEx_PeriphCLKConfig+0x310>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0e:	2101      	movs	r1, #1
 8003f10:	f104 0008 	add.w	r0, r4, #8
 8003f14:	f7ff fe18 	bl	8003b48 <RCCEx_PLL2_Config>
 8003f18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f1e:	2d00      	cmp	r5, #0
 8003f20:	f040 83bf 	bne.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f24:	4f40      	ldr	r7, [pc, #256]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f26:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003f28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f2a:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8003f2e:	4301      	orrs	r1, r0
 8003f30:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f32:	0458      	lsls	r0, r3, #17
 8003f34:	d51f      	bpl.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f36:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003f3a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003f3e:	f000 83f9 	beq.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f42:	f200 8080 	bhi.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003f46:	b159      	cbz	r1, 8003f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003f48:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003f4c:	f040 8083 	bne.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x326>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f50:	2101      	movs	r1, #1
 8003f52:	f104 0008 	add.w	r0, r4, #8
 8003f56:	f7ff fdf7 	bl	8003b48 <RCCEx_PLL2_Config>
 8003f5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	f040 8396 	bne.w	8004692 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f66:	4f30      	ldr	r7, [pc, #192]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f68:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8003f6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f6e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003f72:	4301      	orrs	r1, r0
 8003f74:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	d509      	bpl.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->DsiClockSelection)
 8003f7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	f000 8290 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x772>
 8003f82:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003f86:	f000 8284 	beq.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8003f8a:	2601      	movs	r6, #1
 8003f8c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f8e:	041f      	lsls	r7, r3, #16
 8003f90:	d50d      	bpl.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch (PeriphClkInit->FdcanClockSelection)
 8003f92:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003f94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003f98:	f000 83e2 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003f9c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003fa0:	f000 823c 	beq.w	800441c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	f000 8241 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8003faa:	2601      	movs	r6, #1
 8003fac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fae:	01d8      	lsls	r0, r3, #7
 8003fb0:	d563      	bpl.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->FmcClockSelection)
 8003fb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003fb4:	2903      	cmp	r1, #3
 8003fb6:	f200 84d0 	bhi.w	800495a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 8003fba:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003fbe:	0054      	.short	0x0054
 8003fc0:	03d9004f 	.word	0x03d9004f
 8003fc4:	0054      	.short	0x0054
    switch (PeriphClkInit->Sai23ClockSelection)
 8003fc6:	29c0      	cmp	r1, #192	; 0xc0
 8003fc8:	f43f af04 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fcc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003fd0:	f43f af00 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fd4:	2601      	movs	r6, #1
 8003fd6:	4635      	mov	r5, r6
 8003fd8:	e706      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003fda:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8003fde:	f43f af1c 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003fe2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003fe6:	f43f af18 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003fea:	2601      	movs	r6, #1
 8003fec:	4635      	mov	r5, r6
 8003fee:	e71f      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ff0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003ff4:	f43f af35 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003ff8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003ffc:	f43f af31 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004000:	2601      	movs	r6, #1
 8004002:	4635      	mov	r5, r6
 8004004:	e738      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch (PeriphClkInit->QspiClockSelection)
 8004006:	2930      	cmp	r1, #48	; 0x30
 8004008:	f43f af47 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800400c:	2601      	movs	r6, #1
 800400e:	4635      	mov	r5, r6
 8004010:	e74d      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004012:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004016:	f43f af62 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800401a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800401e:	f43f af5e 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004022:	2601      	movs	r6, #1
 8004024:	4635      	mov	r5, r6
 8004026:	e764      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004028:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi45ClockSelection)
 800402c:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8004030:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004034:	f43f af73 	beq.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004038:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800403c:	f43f af6f 	beq.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004040:	2601      	movs	r6, #1
 8004042:	4635      	mov	r5, r6
 8004044:	e775      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004046:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800404a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800404e:	d087      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004050:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8004054:	d084      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004056:	2601      	movs	r6, #1
 8004058:	4635      	mov	r5, r6
 800405a:	e78c      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x246>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4839      	ldr	r0, [pc, #228]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800405e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004060:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004064:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004066:	2d00      	cmp	r5, #0
 8004068:	f040 8315 	bne.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x966>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800406c:	4f35      	ldr	r7, [pc, #212]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800406e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004070:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004072:	f021 0103 	bic.w	r1, r1, #3
 8004076:	4301      	orrs	r1, r0
 8004078:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800407a:	0259      	lsls	r1, r3, #9
 800407c:	f100 823f 	bmi.w	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004080:	07d8      	lsls	r0, r3, #31
 8004082:	d530      	bpl.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004084:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004088:	2928      	cmp	r1, #40	; 0x28
 800408a:	d82a      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800408c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004090:	0029021c 	.word	0x0029021c
 8004094:	00290029 	.word	0x00290029
 8004098:	00290029 	.word	0x00290029
 800409c:	00290029 	.word	0x00290029
 80040a0:	00290214 	.word	0x00290214
 80040a4:	00290029 	.word	0x00290029
 80040a8:	00290029 	.word	0x00290029
 80040ac:	00290029 	.word	0x00290029
 80040b0:	00290420 	.word	0x00290420
 80040b4:	00290029 	.word	0x00290029
 80040b8:	00290029 	.word	0x00290029
 80040bc:	00290029 	.word	0x00290029
 80040c0:	0029021c 	.word	0x0029021c
 80040c4:	00290029 	.word	0x00290029
 80040c8:	00290029 	.word	0x00290029
 80040cc:	00290029 	.word	0x00290029
 80040d0:	0029021c 	.word	0x0029021c
 80040d4:	00290029 	.word	0x00290029
 80040d8:	00290029 	.word	0x00290029
 80040dc:	00290029 	.word	0x00290029
 80040e0:	021c      	.short	0x021c
 80040e2:	2601      	movs	r6, #1
 80040e4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040e6:	0799      	lsls	r1, r3, #30
 80040e8:	d51d      	bpl.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040ea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80040ec:	2905      	cmp	r1, #5
 80040ee:	f200 8430 	bhi.w	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040f2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80040f6:	000e      	.short	0x000e
 80040f8:	03d50006 	.word	0x03d50006
 80040fc:	000e000e 	.word	0x000e000e
 8004100:	000e      	.short	0x000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004102:	2101      	movs	r1, #1
 8004104:	f104 0008 	add.w	r0, r4, #8
 8004108:	f7ff fd1e 	bl	8003b48 <RCCEx_PLL2_Config>
 800410c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800410e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004112:	2d00      	cmp	r5, #0
 8004114:	f040 82c1 	bne.w	800469a <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004118:	4f0a      	ldr	r7, [pc, #40]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800411a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800411c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800411e:	f021 0107 	bic.w	r1, r1, #7
 8004122:	4301      	orrs	r1, r0
 8004124:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004126:	075f      	lsls	r7, r3, #29
 8004128:	d521      	bpl.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800412a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800412e:	2905      	cmp	r1, #5
 8004130:	f200 8417 	bhi.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0xc32>
 8004134:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004138:	00080010 	.word	0x00080010
 800413c:	001003c0 	.word	0x001003c0
 8004140:	00100010 	.word	0x00100010
 8004144:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004148:	2101      	movs	r1, #1
 800414a:	f104 0008 	add.w	r0, r4, #8
 800414e:	f7ff fcfb 	bl	8003b48 <RCCEx_PLL2_Config>
 8004152:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004154:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004158:	2d00      	cmp	r5, #0
 800415a:	f040 82a0 	bne.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x96e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415e:	4fae      	ldr	r7, [pc, #696]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004160:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8004164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004166:	f021 0107 	bic.w	r1, r1, #7
 800416a:	4301      	orrs	r1, r0
 800416c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800416e:	0698      	lsls	r0, r3, #26
 8004170:	d51f      	bpl.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004172:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004176:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800417a:	f000 82e6 	beq.w	800474a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800417e:	f200 810b 	bhi.w	8004398 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8004182:	b159      	cbz	r1, 800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004184:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004188:	f040 8110 	bne.w	80043ac <HAL_RCCEx_PeriphCLKConfig+0x67c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418c:	2100      	movs	r1, #0
 800418e:	f104 0008 	add.w	r0, r4, #8
 8004192:	f7ff fcd9 	bl	8003b48 <RCCEx_PLL2_Config>
 8004196:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004198:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800419c:	2d00      	cmp	r5, #0
 800419e:	f040 8287 	bne.w	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a2:	4f9d      	ldr	r7, [pc, #628]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041a4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80041a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041aa:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80041ae:	4301      	orrs	r1, r0
 80041b0:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041b2:	0659      	lsls	r1, r3, #25
 80041b4:	d51f      	bpl.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041b6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80041ba:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80041be:	f000 82e2 	beq.w	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa56>
 80041c2:	f200 80f6 	bhi.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041c6:	b159      	cbz	r1, 80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80041c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80041cc:	f040 80fb 	bne.w	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d0:	2100      	movs	r1, #0
 80041d2:	f104 0008 	add.w	r0, r4, #8
 80041d6:	f7ff fcb7 	bl	8003b48 <RCCEx_PLL2_Config>
 80041da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	f040 8254 	bne.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e6:	4f8c      	ldr	r7, [pc, #560]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80041e8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80041ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041ee:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 80041f2:	4301      	orrs	r1, r0
 80041f4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041f6:	061f      	lsls	r7, r3, #24
 80041f8:	d51f      	bpl.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041fa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80041fe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004202:	f000 82cc 	beq.w	800479e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8004206:	f200 80e1 	bhi.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800420a:	b159      	cbz	r1, 8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800420c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004210:	f040 80e6 	bne.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004214:	2100      	movs	r1, #0
 8004216:	f104 0008 	add.w	r0, r4, #8
 800421a:	f7ff fc95 	bl	8003b48 <RCCEx_PLL2_Config>
 800421e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004220:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004224:	2d00      	cmp	r5, #0
 8004226:	f040 823e 	bne.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800422a:	4f7b      	ldr	r7, [pc, #492]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800422c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8004230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004232:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004236:	4301      	orrs	r1, r0
 8004238:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800423a:	0718      	lsls	r0, r3, #28
 800423c:	d50b      	bpl.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x526>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800423e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004242:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004246:	f000 82c3 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800424a:	4f73      	ldr	r7, [pc, #460]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800424c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800424e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004252:	4301      	orrs	r1, r0
 8004254:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004256:	06d9      	lsls	r1, r3, #27
 8004258:	d50b      	bpl.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x542>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800425a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800425e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004262:	f000 82c2 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004266:	4f6c      	ldr	r7, [pc, #432]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004268:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800426a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800426e:	4301      	orrs	r1, r0
 8004270:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004272:	031f      	lsls	r7, r3, #12
 8004274:	d50e      	bpl.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->AdcClockSelection)
 8004276:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800427a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800427e:	f000 80e0 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004282:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004286:	f000 80e4 	beq.w	8004452 <HAL_RCCEx_PeriphCLKConfig+0x722>
 800428a:	2900      	cmp	r1, #0
 800428c:	f000 8235 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8004290:	2601      	movs	r6, #1
 8004292:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004294:	0358      	lsls	r0, r3, #13
 8004296:	d50f      	bpl.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
    switch (PeriphClkInit->UsbClockSelection)
 8004298:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800429c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80042a0:	f000 80e3 	beq.w	800446a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80042a4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80042a8:	f000 80e7 	beq.w	800447a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80042ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80042b0:	f000 821b 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80042b4:	2601      	movs	r6, #1
 80042b6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042b8:	03d9      	lsls	r1, r3, #15
 80042ba:	d509      	bpl.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch (PeriphClkInit->SdmmcClockSelection)
 80042bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80042be:	2900      	cmp	r1, #0
 80042c0:	f000 820a 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80042c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80042c8:	f000 81ab 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80042cc:	2601      	movs	r6, #1
 80042ce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d0:	009f      	lsls	r7, r3, #2
 80042d2:	f100 8156 	bmi.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0x852>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d6:	0398      	lsls	r0, r3, #14
 80042d8:	d50c      	bpl.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->RngClockSelection)
 80042da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80042de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80042e2:	f000 81ef 	beq.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80042e6:	d97e      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80042e8:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80042ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80042f0:	d07b      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80042f2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042f4:	02d9      	lsls	r1, r3, #11
 80042f6:	d506      	bpl.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042f8:	4847      	ldr	r0, [pc, #284]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80042fa:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 80042fc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80042fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004302:	4329      	orrs	r1, r5
 8004304:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004306:	00df      	lsls	r7, r3, #3
 8004308:	d507      	bpl.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800430a:	4843      	ldr	r0, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800430c:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8004310:	6901      	ldr	r1, [r0, #16]
 8004312:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004316:	4329      	orrs	r1, r5
 8004318:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800431a:	029d      	lsls	r5, r3, #10
 800431c:	d506      	bpl.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800431e:	483e      	ldr	r0, [pc, #248]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004320:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8004322:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004324:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004328:	4329      	orrs	r1, r5
 800432a:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800432c:	0058      	lsls	r0, r3, #1
 800432e:	d509      	bpl.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004330:	4939      	ldr	r1, [pc, #228]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004332:	6908      	ldr	r0, [r1, #16]
 8004334:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004338:	6108      	str	r0, [r1, #16]
 800433a:	6908      	ldr	r0, [r1, #16]
 800433c:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8004340:	4328      	orrs	r0, r5
 8004342:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004344:	2b00      	cmp	r3, #0
 8004346:	da06      	bge.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004348:	4833      	ldr	r0, [pc, #204]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800434a:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800434c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800434e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004352:	4329      	orrs	r1, r5
 8004354:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004356:	0219      	lsls	r1, r3, #8
 8004358:	d507      	bpl.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800435a:	492f      	ldr	r1, [pc, #188]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800435c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004360:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004362:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004366:	4303      	orrs	r3, r0
 8004368:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800436a:	07d3      	lsls	r3, r2, #31
 800436c:	f100 8136 	bmi.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004370:	0797      	lsls	r7, r2, #30
 8004372:	f100 8128 	bmi.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004376:	0755      	lsls	r5, r2, #29
 8004378:	f100 811a 	bmi.w	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x880>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800437c:	0710      	lsls	r0, r2, #28
 800437e:	f100 810c 	bmi.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x86a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004382:	06d1      	lsls	r1, r2, #27
 8004384:	f100 80ac 	bmi.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	f100 8132 	bmi.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
    return HAL_OK;
 800438e:	1e30      	subs	r0, r6, #0
 8004390:	bf18      	it	ne
 8004392:	2001      	movne	r0, #1
}
 8004394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004398:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800439c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043a0:	f43f aefc 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80043a4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80043a8:	f43f aef8 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80043ac:	2601      	movs	r6, #1
 80043ae:	4635      	mov	r5, r6
 80043b0:	e6ff      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043b2:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80043b6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80043ba:	f43f af11 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80043be:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80043c2:	f43f af0d 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80043c6:	2601      	movs	r6, #1
 80043c8:	4635      	mov	r5, r6
 80043ca:	e714      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043cc:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 80043d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80043d4:	f43f af26 	beq.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80043d8:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 80043dc:	f43f af22 	beq.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80043e0:	2601      	movs	r6, #1
 80043e2:	4635      	mov	r5, r6
 80043e4:	e729      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->RngClockSelection)
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d183      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if (ret == HAL_OK)
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	f040 8168 	bne.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f0:	4d09      	ldr	r5, [pc, #36]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80043f2:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80043f4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80043f8:	4301      	orrs	r1, r0
 80043fa:	6569      	str	r1, [r5, #84]	; 0x54
 80043fc:	e77a      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->Sai1ClockSelection)
 80043fe:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004400:	2d00      	cmp	r5, #0
 8004402:	f040 8107 	bne.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004406:	4f04      	ldr	r7, [pc, #16]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004408:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800440a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800440c:	f021 0107 	bic.w	r1, r1, #7
 8004410:	4301      	orrs	r1, r0
 8004412:	6539      	str	r1, [r7, #80]	; 0x50
 8004414:	e4c8      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800441c:	2101      	movs	r1, #1
 800441e:	f104 0008 	add.w	r0, r4, #8
 8004422:	f7ff fb91 	bl	8003b48 <RCCEx_PLL2_Config>
 8004426:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004428:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800442c:	2d00      	cmp	r5, #0
 800442e:	f040 8145 	bne.w	80046bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004432:	4fb8      	ldr	r7, [pc, #736]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004434:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004436:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004438:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800443c:	4301      	orrs	r1, r0
 800443e:	6539      	str	r1, [r7, #80]	; 0x50
 8004440:	e5b5      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004442:	2102      	movs	r1, #2
 8004444:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004448:	f7ff fbf8 	bl	8003c3c <RCCEx_PLL3_Config>
 800444c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800444e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004452:	2d00      	cmp	r5, #0
 8004454:	f040 8130 	bne.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004458:	4fae      	ldr	r7, [pc, #696]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800445a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800445e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004460:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004464:	4301      	orrs	r1, r0
 8004466:	65b9      	str	r1, [r7, #88]	; 0x58
 8004468:	e714      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x564>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800446a:	2101      	movs	r1, #1
 800446c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004470:	f7ff fbe4 	bl	8003c3c <RCCEx_PLL3_Config>
 8004474:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004476:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800447a:	2d00      	cmp	r5, #0
 800447c:	f040 811a 	bne.w	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004480:	4fa4      	ldr	r7, [pc, #656]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004482:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004488:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800448c:	4301      	orrs	r1, r0
 800448e:	6579      	str	r1, [r7, #84]	; 0x54
 8004490:	e712      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004492:	2101      	movs	r1, #1
 8004494:	f104 0008 	add.w	r0, r4, #8
 8004498:	f7ff fb56 	bl	8003b48 <RCCEx_PLL2_Config>
 800449c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800449e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	f040 8116 	bne.w	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80044a8:	4f9a      	ldr	r7, [pc, #616]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80044aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80044ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80044b2:	4301      	orrs	r1, r0
 80044b4:	64f9      	str	r1, [r7, #76]	; 0x4c
 80044b6:	e56a      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044b8:	2101      	movs	r1, #1
 80044ba:	f104 0008 	add.w	r0, r4, #8
 80044be:	f7ff fb43 	bl	8003b48 <RCCEx_PLL2_Config>
 80044c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	f040 80de 	bne.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ce:	4f91      	ldr	r7, [pc, #580]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80044d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80044d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044d6:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 80044da:	4301      	orrs	r1, r0
 80044dc:	6579      	str	r1, [r7, #84]	; 0x54
 80044de:	e602      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e0:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80044e4:	2101      	movs	r1, #1
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7ff fba8 	bl	8003c3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	f000 810e 	beq.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x9de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	069b      	lsls	r3, r3, #26
 80044f6:	f140 8085 	bpl.w	8004604 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 80044fa:	4606      	mov	r6, r0
 80044fc:	e07b      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044fe:	4f86      	ldr	r7, [pc, #536]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004508:	f7fd f908 	bl	800171c <HAL_GetTick>
 800450c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450e:	e006      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004510:	f7fd f904 	bl	800171c <HAL_GetTick>
 8004514:	eba0 0008 	sub.w	r0, r0, r8
 8004518:	2864      	cmp	r0, #100	; 0x64
 800451a:	f200 81e5 	bhi.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	05da      	lsls	r2, r3, #23
 8004522:	d5f5      	bpl.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 8004524:	2d00      	cmp	r5, #0
 8004526:	f040 820f 	bne.w	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800452a:	4a7a      	ldr	r2, [pc, #488]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800452c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004530:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004532:	4059      	eors	r1, r3
 8004534:	f411 7f40 	tst.w	r1, #768	; 0x300
 8004538:	d00b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x822>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800453c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004542:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004546:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004548:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800454a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800454e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004550:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	f000 81d9 	beq.w	800490c <HAL_RCCEx_PeriphCLKConfig+0xbdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800455e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004562:	f000 81e7 	beq.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004566:	496b      	ldr	r1, [pc, #428]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004568:	690a      	ldr	r2, [r1, #16]
 800456a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800456e:	610a      	str	r2, [r1, #16]
 8004570:	4868      	ldr	r0, [pc, #416]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004572:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004576:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8004578:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800457a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	6701      	str	r1, [r0, #112]	; 0x70
 8004580:	e57e      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x350>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004582:	2102      	movs	r1, #2
 8004584:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004588:	f7ff fb58 	bl	8003c3c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800458c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004590:	2800      	cmp	r0, #0
 8004592:	f43f aea0 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = HAL_ERROR;
 8004596:	2601      	movs	r6, #1
 8004598:	e69d      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800459a:	2100      	movs	r1, #0
 800459c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045a0:	f7ff fb4c 	bl	8003c3c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045a4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f43f aeeb 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x652>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045ac:	4606      	mov	r6, r0
 80045ae:	e6e8      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x652>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045b0:	2102      	movs	r1, #2
 80045b2:	f104 0008 	add.w	r0, r4, #8
 80045b6:	f7ff fac7 	bl	8003b48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045ba:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80045bc:	2800      	cmp	r0, #0
 80045be:	f43f aedd 	beq.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045c2:	4606      	mov	r6, r0
 80045c4:	e6da      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c6:	2101      	movs	r1, #1
 80045c8:	f104 0008 	add.w	r0, r4, #8
 80045cc:	f7ff fabc 	bl	8003b48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045d0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f43f aecf 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x646>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045d8:	4606      	mov	r6, r0
 80045da:	e6cc      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x646>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045dc:	2100      	movs	r1, #0
 80045de:	f104 0008 	add.w	r0, r4, #8
 80045e2:	f7ff fab1 	bl	8003b48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045e6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80045e8:	2800      	cmp	r0, #0
 80045ea:	f43f aec1 	beq.w	8004370 <HAL_RCCEx_PeriphCLKConfig+0x640>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ee:	4606      	mov	r6, r0
 80045f0:	e6be      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x640>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f6:	2102      	movs	r1, #2
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7ff fb1f 	bl	8003c3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80045fe:	2800      	cmp	r0, #0
 8004600:	f43f aec5 	beq.w	800438e <HAL_RCCEx_PeriphCLKConfig+0x65e>
  return HAL_ERROR;
 8004604:	2001      	movs	r0, #1
}
 8004606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460a:	462e      	mov	r6, r5
 800460c:	f7ff bbec 	b.w	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004610:	462e      	mov	r6, r5
 8004612:	e40d      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004614:	462e      	mov	r6, r5
 8004616:	f7ff bbc7 	b.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800461a:	462e      	mov	r6, r5
 800461c:	e469      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800461e:	462e      	mov	r6, r5
 8004620:	e42a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x148>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004622:	2102      	movs	r1, #2
 8004624:	f104 0008 	add.w	r0, r4, #8
 8004628:	f7ff fa8e 	bl	8003b48 <RCCEx_PLL2_Config>
 800462c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800462e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004632:	2d00      	cmp	r5, #0
 8004634:	d157      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004636:	4f37      	ldr	r7, [pc, #220]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800463a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800463c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004640:	4301      	orrs	r1, r0
 8004642:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004644:	e644      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4d33      	ldr	r5, [pc, #204]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004648:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800464a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800464e:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8004650:	f7ff bb8e 	b.w	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	482f      	ldr	r0, [pc, #188]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004656:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004658:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800465c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800465e:	e43e      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004660:	482c      	ldr	r0, [pc, #176]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004662:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004664:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004668:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800466a:	f7ff bbb3 	b.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466e:	4829      	ldr	r0, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004670:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004672:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004676:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004678:	f7ff bbcf 	b.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xea>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467c:	4825      	ldr	r0, [pc, #148]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800467e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004680:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004684:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004686:	f7ff bbec 	b.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800468a:	462e      	mov	r6, r5
 800468c:	e52b      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800468e:	462e      	mov	r6, r5
 8004690:	e5b1      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004692:	462e      	mov	r6, r5
 8004694:	e46f      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004696:	462e      	mov	r6, r5
 8004698:	e4ef      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800469a:	462e      	mov	r6, r5
 800469c:	e543      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800469e:	462e      	mov	r6, r5
 80046a0:	e565      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80046a2:	462e      	mov	r6, r5
 80046a4:	e445      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046a6:	462e      	mov	r6, r5
 80046a8:	e5c7      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80046aa:	462e      	mov	r6, r5
 80046ac:	f7ff bbff 	b.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80046b0:	462e      	mov	r6, r5
 80046b2:	e57e      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80046b4:	462e      	mov	r6, r5
 80046b6:	e5ff      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046b8:	462e      	mov	r6, r5
 80046ba:	e5eb      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x564>
 80046bc:	462e      	mov	r6, r5
 80046be:	e476      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80046c0:	462e      	mov	r6, r5
 80046c2:	e617      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4f13      	ldr	r7, [pc, #76]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80046c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046c8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80046cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	d1f6      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80046d2:	e68d      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80046d4:	462e      	mov	r6, r5
 80046d6:	e45a      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d8:	480e      	ldr	r0, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80046da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80046dc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80046e0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	d0a7      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x906>
 80046e6:	462e      	mov	r6, r5
 80046e8:	e5f2      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ea:	480a      	ldr	r0, [pc, #40]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80046ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80046ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80046f2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	d1dd      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80046f8:	e6c2      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x750>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fa:	f104 0008 	add.w	r0, r4, #8
 80046fe:	f7ff fa23 	bl	8003b48 <RCCEx_PLL2_Config>
 8004702:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004704:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004708:	2d00      	cmp	r5, #0
 800470a:	d1d5      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800470c:	e6a4      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x728>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	e63a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
 8004718:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471c:	2101      	movs	r1, #1
 800471e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004722:	f7ff fa8b 	bl	8003c3c <RCCEx_PLL3_Config>
 8004726:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004728:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800472c:	2d00      	cmp	r5, #0
 800472e:	d1b8      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004730:	f7ff bbf8 	b.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004734:	2101      	movs	r1, #1
 8004736:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800473a:	f7ff fa7f 	bl	8003c3c <RCCEx_PLL3_Config>
 800473e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004740:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004744:	2d00      	cmp	r5, #0
 8004746:	d1a4      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004748:	e40d      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800474a:	2102      	movs	r1, #2
 800474c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004750:	f7ff fa74 	bl	8003c3c <RCCEx_PLL3_Config>
 8004754:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004756:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800475a:	2d00      	cmp	r5, #0
 800475c:	d1a8      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800475e:	e520      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4883      	ldr	r0, [pc, #524]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 8004762:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004764:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004768:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800476a:	2d00      	cmp	r5, #0
 800476c:	d1a6      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800476e:	e660      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004770:	2102      	movs	r1, #2
 8004772:	f104 0008 	add.w	r0, r4, #8
 8004776:	f7ff f9e7 	bl	8003b48 <RCCEx_PLL2_Config>
 800477a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800477c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004780:	2d00      	cmp	r5, #0
 8004782:	d188      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004784:	e472      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x33c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004786:	2102      	movs	r1, #2
 8004788:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800478c:	f7ff fa56 	bl	8003c3c <RCCEx_PLL3_Config>
 8004790:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004792:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004796:	2d00      	cmp	r5, #0
 8004798:	f47f af79 	bne.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x95e>
 800479c:	e523      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479e:	2102      	movs	r1, #2
 80047a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80047a4:	f7ff fa4a 	bl	8003c3c <RCCEx_PLL3_Config>
 80047a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	f47f af79 	bne.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80047b4:	e539      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b6:	2102      	movs	r1, #2
 80047b8:	f104 0008 	add.w	r0, r4, #8
 80047bc:	f7ff f9c4 	bl	8003b48 <RCCEx_PLL2_Config>
 80047c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	f47f af6f 	bne.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80047cc:	f7ff bb68 	b.w	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047d0:	2102      	movs	r1, #2
 80047d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80047d6:	f7ff fa31 	bl	8003c3c <RCCEx_PLL3_Config>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 808a 	bne.w	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80047e8:	e52f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047ea:	2102      	movs	r1, #2
 80047ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80047f0:	f7ff fa24 	bl	8003c3c <RCCEx_PLL3_Config>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	f040 8083 	bne.w	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004802:	e530      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x536>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004804:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004808:	f7ff bab9 	b.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800480c:	2102      	movs	r1, #2
 800480e:	3028      	adds	r0, #40	; 0x28
 8004810:	f7ff fa14 	bl	8003c3c <RCCEx_PLL3_Config>
 8004814:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004816:	2e00      	cmp	r6, #0
 8004818:	f43f aaa7 	beq.w	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800481c:	e7f2      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xad4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800481e:	2100      	movs	r1, #0
 8004820:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004824:	f7ff fa0a 	bl	8003c3c <RCCEx_PLL3_Config>
 8004828:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800482a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800482e:	f7ff baf4 	b.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004832:	2100      	movs	r1, #0
 8004834:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004838:	f7ff fa00 	bl	8003c3c <RCCEx_PLL3_Config>
 800483c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800483e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004842:	f7ff bb0e 	b.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004846:	2100      	movs	r1, #0
 8004848:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800484c:	f7ff f9f6 	bl	8003c3c <RCCEx_PLL3_Config>
 8004850:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004852:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004856:	f7ff babd 	b.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800485a:	2100      	movs	r1, #0
 800485c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004860:	f7ff f9ec 	bl	8003c3c <RCCEx_PLL3_Config>
 8004864:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004866:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800486a:	f7ff bb38 	b.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4840      	ldr	r0, [pc, #256]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
        break;
 8004870:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004872:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004874:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004878:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800487a:	e5c1      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487c:	2100      	movs	r1, #0
 800487e:	f104 0008 	add.w	r0, r4, #8
 8004882:	f7ff f961 	bl	8003b48 <RCCEx_PLL2_Config>
 8004886:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004888:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800488c:	e5b8      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800488e:	2100      	movs	r1, #0
 8004890:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004894:	f7ff f9d2 	bl	8003c3c <RCCEx_PLL3_Config>
 8004898:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800489a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800489e:	e5af      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a0:	2101      	movs	r1, #1
 80048a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048a6:	f7ff f9c9 	bl	8003c3c <RCCEx_PLL3_Config>
 80048aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	f47f aef2 	bne.w	800469a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80048b6:	e42f      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048b8:	2101      	movs	r1, #1
 80048ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048be:	f7ff f9bd 	bl	8003c3c <RCCEx_PLL3_Config>
 80048c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	f47f aee8 	bne.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048ce:	e446      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d0:	2101      	movs	r1, #1
 80048d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048d6:	f7ff f9b1 	bl	8003c3c <RCCEx_PLL3_Config>
 80048da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	f47f aed2 	bne.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80048e6:	e5f2      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        status = ret;
 80048e8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80048ee:	4635      	mov	r5, r6
 80048f0:	f7ff bbc6 	b.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0x350>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
        status = HAL_ERROR;
 80048f8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80048fe:	e4a4      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004900:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
        status = HAL_ERROR;
 8004904:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004906:	e9d4 3200 	ldrd	r3, r2, [r4]
 800490a:	e4ac      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x536>
        tickstart = HAL_GetTick();
 800490c:	f7fc ff06 	bl	800171c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004910:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004970 <HAL_RCCEx_PeriphCLKConfig+0xc40>
        tickstart = HAL_GetTick();
 8004914:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fc fefe 	bl	800171c <HAL_GetTick>
 8004920:	1bc0      	subs	r0, r0, r7
 8004922:	4548      	cmp	r0, r9
 8004924:	d8e0      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004926:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800492a:	079b      	lsls	r3, r3, #30
 800492c:	d5f6      	bpl.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xbec>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8004932:	e612      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8004934:	480e      	ldr	r0, [pc, #56]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xc40>)
 8004936:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004938:	6901      	ldr	r1, [r0, #16]
 800493a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800493e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8004942:	430a      	orrs	r2, r1
 8004944:	6102      	str	r2, [r0, #16]
 8004946:	e613      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004948:	e9d4 3200 	ldrd	r3, r2, [r4]
 800494c:	462e      	mov	r6, r5
 800494e:	f7ff bb97 	b.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0x350>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004952:	2601      	movs	r6, #1
 8004954:	4635      	mov	r5, r6
 8004956:	f7ff bbe6 	b.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch (PeriphClkInit->FmcClockSelection)
 800495a:	2601      	movs	r6, #1
 800495c:	4635      	mov	r5, r6
 800495e:	f7ff bb8c 	b.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004962:	2601      	movs	r6, #1
 8004964:	4635      	mov	r5, r6
 8004966:	e402      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x43e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004968:	2601      	movs	r6, #1
 800496a:	f7ff ba1c 	b.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	00ffffcf 	.word	0x00ffffcf

08004978 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004978:	4a50      	ldr	r2, [pc, #320]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800497a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800497c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800497e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004980:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8004982:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004986:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800498a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800498c:	d05d      	beq.n	8004a4a <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800498e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004992:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004996:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800499a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800499e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049a0:	ee07 4a90 	vmov	s15, r4
 80049a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 80049aa:	2902      	cmp	r1, #2
 80049ac:	d078      	beq.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d050      	beq.n	8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80049ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049c0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80049c4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80049d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80049dc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80049e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049e4:	4a35      	ldr	r2, [pc, #212]	; (8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 80049e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80049ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80049f8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004a06:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a0c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a20:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004a24:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a28:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a2a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a2e:	ee07 3a10 	vmov	s14, r3
 8004a32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a36:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a42:	ee17 3a90 	vmov	r3, s15
 8004a46:	6083      	str	r3, [r0, #8]
}
 8004a48:	4770      	bx	lr
 8004a4a:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a4c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a50:	6083      	str	r3, [r0, #8]
}
 8004a52:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	0689      	lsls	r1, r1, #26
 8004a58:	d529      	bpl.n	8004aae <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a5a:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5c:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a60:	4919      	ldr	r1, [pc, #100]	; (8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a66:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a68:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a70:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a78:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7a:	ee06 3a10 	vmov	s12, r3
 8004a7e:	ee05 1a90 	vmov	s11, r1
 8004a82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004a86:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004a8a:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004a8e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004a92:	eef0 7a46 	vmov.f32	s15, s12
 8004a96:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a9e:	e7a1      	b.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8004aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aac:	e787      	b.n	80049be <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8004ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aba:	e780      	b.n	80049be <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	4a742400 	.word	0x4a742400
 8004ac4:	39000000 	.word	0x39000000
 8004ac8:	03d09000 	.word	0x03d09000
 8004acc:	4bbebc20 	.word	0x4bbebc20
 8004ad0:	4c742400 	.word	0x4c742400

08004ad4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ad4:	4a50      	ldr	r2, [pc, #320]	; (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8004ad6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ada:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004adc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8004ade:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ae2:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ae6:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8004ae8:	d05d      	beq.n	8004ba6 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aea:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aee:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004af2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004af6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004afa:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004afc:	ee07 4a90 	vmov	s15, r4
 8004b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004b04:	d003      	beq.n	8004b0e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8004b06:	2902      	cmp	r1, #2
 8004b08:	d078      	beq.n	8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8004b0a:	2900      	cmp	r1, #0
 8004b0c:	d050      	beq.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b1c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004b20:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b34:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004b38:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004b3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b40:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8004b42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004b46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b48:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004b54:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b62:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b68:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b80:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b86:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b8a:	ee07 3a10 	vmov	s14, r3
 8004b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9e:	ee17 3a90 	vmov	r3, s15
 8004ba2:	6083      	str	r3, [r0, #8]
}
 8004ba4:	4770      	bx	lr
 8004ba6:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ba8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bac:	6083      	str	r3, [r0, #8]
}
 8004bae:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	0689      	lsls	r1, r1, #26
 8004bb4:	d529      	bpl.n	8004c0a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb6:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bbc:	4919      	ldr	r1, [pc, #100]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bc4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bcc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd4:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd6:	ee06 3a10 	vmov	s12, r3
 8004bda:	ee05 1a90 	vmov	s11, r1
 8004bde:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004be2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004be6:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004bea:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004bee:	eef0 7a46 	vmov.f32	s15, s12
 8004bf2:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004bf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004bfa:	e7a1      	b.n	8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8004c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c08:	e787      	b.n	8004b1a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c16:	e780      	b.n	8004b1a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	4a742400 	.word	0x4a742400
 8004c20:	39000000 	.word	0x39000000
 8004c24:	03d09000 	.word	0x03d09000
 8004c28:	4bbebc20 	.word	0x4bbebc20
 8004c2c:	4c742400 	.word	0x4c742400

08004c30 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c30:	4a51      	ldr	r2, [pc, #324]	; (8004d78 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 8004c32:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c34:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004c36:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004c38:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8004c3a:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004c3e:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c42:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8004c44:	d05e      	beq.n	8004d04 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c46:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004c4a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c4e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c52:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004c56:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c58:	ee07 4a90 	vmov	s15, r4
 8004c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004c60:	f000 8082 	beq.w	8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8004c64:	2902      	cmp	r1, #2
 8004c66:	d078      	beq.n	8004d5a <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	d050      	beq.n	8004d0e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8004d7c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c7a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004c7e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004d80 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c92:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004c96:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004c9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004c9e:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8004ca0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004ca4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ca6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004cb2:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004cb4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004cc0:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004cc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004cc6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004cde:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ce4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004ce8:	ee07 3a10 	vmov	s14, r3
 8004cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cf0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 3a90 	vmov	r3, s15
 8004d00:	6083      	str	r3, [r0, #8]
}
 8004d02:	4770      	bx	lr
 8004d04:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d06:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004d0a:	6083      	str	r3, [r0, #8]
}
 8004d0c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0e:	6811      	ldr	r1, [r2, #0]
 8004d10:	0689      	lsls	r1, r1, #26
 8004d12:	d5ab      	bpl.n	8004c6c <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d14:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d16:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d1a:	491a      	ldr	r1, [pc, #104]	; (8004d84 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d20:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d22:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d2a:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8004d80 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d32:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d34:	ee06 3a10 	vmov	s12, r3
 8004d38:	ee05 1a90 	vmov	s11, r1
 8004d3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004d40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004d44:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004d48:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004d4c:	eef0 7a46 	vmov.f32	s15, s12
 8004d50:	eee7 7a05 	vfma.f32	s15, s14, s10
 8004d54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004d58:	e7a1      	b.n	8004c9e <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8004d88 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8004d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d66:	e787      	b.n	8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004d8c <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8004d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d74:	e780      	b.n	8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	4c742400 	.word	0x4c742400
 8004d80:	39000000 	.word	0x39000000
 8004d84:	03d09000 	.word	0x03d09000
 8004d88:	4bbebc20 	.word	0x4bbebc20
 8004d8c:	4a742400 	.word	0x4a742400

08004d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d90:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8004d94:	430b      	orrs	r3, r1
{
 8004d96:	b500      	push	{lr}
 8004d98:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004d9e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8004da2:	430b      	orrs	r3, r1
 8004da4:	d038      	beq.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004da6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f000 80e6 	beq.w	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004db0:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8004db4:	430b      	orrs	r3, r1
 8004db6:	f000 8089 	beq.w	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004dba:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	d060      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004dc2:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	f000 8112 	beq.w	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004dcc:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f000 80a3 	beq.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004dd6:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f000 80fa 	beq.w	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004de0:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8004de4:	430b      	orrs	r3, r1
 8004de6:	f000 8143 	beq.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004dea:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8004dee:	4308      	orrs	r0, r1
 8004df0:	d137      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004df2:	4a9a      	ldr	r2, [pc, #616]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004df4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8004dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfe:	f000 8084 	beq.w	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e06:	f000 8157 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004e0a:	bb53      	cbnz	r3, 8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e0c:	6810      	ldr	r0, [r2, #0]
 8004e0e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004e12:	d044      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8004e14:	4892      	ldr	r0, [pc, #584]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004e16:	e042      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004e18:	4a90      	ldr	r2, [pc, #576]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e1c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	f000 80a6 	beq.w	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004e26:	d920      	bls.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004e28:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2a:	d037      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e30:	d117      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e34:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e3a:	0749      	lsls	r1, r1, #29
 8004e3c:	d502      	bpl.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80c2 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e44:	4a85      	ldr	r2, [pc, #532]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	05d0      	lsls	r0, r2, #23
 8004e4a:	d503      	bpl.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e50:	f000 8102 	beq.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e54:	4a81      	ldr	r2, [pc, #516]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	0391      	lsls	r1, r2, #14
 8004e5a:	d502      	bpl.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e60:	d0d8      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004e62:	2000      	movs	r0, #0
}
 8004e64:	b005      	add	sp, #20
 8004e66:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d04d      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d1f7      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e72:	6810      	ldr	r0, [r2, #0]
 8004e74:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004e78:	d011      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7a:	a801      	add	r0, sp, #4
 8004e7c:	f7ff fd7c 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e80:	9801      	ldr	r0, [sp, #4]
 8004e82:	e00c      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004e84:	4a75      	ldr	r2, [pc, #468]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e86:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e90:	d06f      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004e92:	d938      	bls.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e98:	f040 8088 	bne.w	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e9c:	4871      	ldr	r0, [pc, #452]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004e9e:	b005      	add	sp, #20
 8004ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004ea4:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d8d8      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004f5b 	.word	0x08004f5b
 8004ebc:	08004f37 	.word	0x08004f37
 8004ec0:	08004f47 	.word	0x08004f47
 8004ec4:	08004e9d 	.word	0x08004e9d
 8004ec8:	08004f43 	.word	0x08004f43
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004ecc:	4a63      	ldr	r2, [pc, #396]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ece:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ed0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8004ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed8:	d04b      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004eda:	d944      	bls.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8004edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ee0:	d0dc      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee6:	d1bc      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ee8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eea:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ef0:	0752      	lsls	r2, r2, #29
 8004ef2:	d5a7      	bpl.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1a5      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef8:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004efa:	485b      	ldr	r0, [pc, #364]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f02:	40d8      	lsrs	r0, r3
 8004f04:	e7cb      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d154      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f0a:	6810      	ldr	r0, [r2, #0]
 8004f0c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004f10:	d0c5      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f12:	a801      	add	r0, sp, #4
 8004f14:	f7ff fe8c 	bl	8004c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f18:	9802      	ldr	r0, [sp, #8]
 8004f1a:	e7c0      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004f1c:	4a4f      	ldr	r2, [pc, #316]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f1e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f28:	f000 80d0 	beq.w	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f30:	d0da      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d195      	bne.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f36:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004f3e:	d0ae      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004f40:	e79b      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f42:	4a46      	ldr	r2, [pc, #280]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f44:	e775      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f46:	4b45      	ldr	r3, [pc, #276]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004f4e:	d0a6      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f50:	a801      	add	r0, sp, #4
 8004f52:	f7ff fdbf 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f56:	9801      	ldr	r0, [sp, #4]
 8004f58:	e7a1      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f5a:	4b40      	ldr	r3, [pc, #256]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004f62:	d09c      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004f64:	e7d5      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0cf      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f6e:	d080      	beq.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004f70:	e777      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f72:	6810      	ldr	r0, [r2, #0]
 8004f74:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004f78:	d091      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004f7a:	e7e9      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004f7c:	4a37      	ldr	r2, [pc, #220]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f80:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8004f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f88:	d0f3      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004f8a:	d806      	bhi.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0bc      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f94:	f43f af6d 	beq.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004f98:	e763      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004f9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f9e:	f43f af7d 	beq.w	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004fa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fa6:	f43f af44 	beq.w	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8004faa:	e75a      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb0:	d09a      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004fb2:	e756      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	f43f af5b 	beq.w	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004fbc:	e751      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fbe:	6810      	ldr	r0, [r2, #0]
 8004fc0:	f010 0004 	ands.w	r0, r0, #4
 8004fc4:	f43f af6b 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fc8:	6813      	ldr	r3, [r2, #0]
 8004fca:	4827      	ldr	r0, [pc, #156]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004fcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004fd0:	40d8      	lsrs	r0, r3
 8004fd2:	e764      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8004fd8:	03d2      	lsls	r2, r2, #15
 8004fda:	d5bf      	bpl.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004fe2:	f43f af5c 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe6:	a801      	add	r0, sp, #4
 8004fe8:	f7ff fcc6 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004fec:	9803      	ldr	r0, [sp, #12]
 8004fee:	e756      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004ff0:	4a1a      	ldr	r2, [pc, #104]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ff2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ff4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8004ff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ffc:	d0df      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004ffe:	d810      	bhi.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005004:	d058      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500a:	d118      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800500c:	4b13      	ldr	r3, [pc, #76]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005014:	f43f af43 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005018:	a801      	add	r0, sp, #4
 800501a:	f7ff fd5b 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800501e:	9802      	ldr	r0, [sp, #8]
 8005020:	e73d      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005026:	d012      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8005028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502c:	f47f af19 	bne.w	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005038:	f43f af31 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800503c:	e6ea      	b.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800503e:	2b00      	cmp	r3, #0
 8005040:	f47f af0f 	bne.w	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8005044:	b005      	add	sp, #20
 8005046:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800504a:	f7fe bd35 	b.w	8003ab8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800504e:	6810      	ldr	r0, [r2, #0]
 8005050:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8005054:	f43f af23 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8005058:	4804      	ldr	r0, [pc, #16]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800505a:	e720      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800505c:	58024400 	.word	0x58024400
 8005060:	017d7840 	.word	0x017d7840
 8005064:	00bb8000 	.word	0x00bb8000
 8005068:	03d09000 	.word	0x03d09000
 800506c:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8005078:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800507c:	d037      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800507e:	d814      	bhi.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8005080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005084:	d03f      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508a:	d0bf      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f aee8 	bne.w	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005092:	f7fe fcd1 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80050a0:	5cd3      	ldrb	r3, [r2, r3]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	40d8      	lsrs	r0, r3
        break;
 80050a8:	e6f9      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d017      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80050b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050b4:	d0bc      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80050b6:	e6d4      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050b8:	6810      	ldr	r0, [r2, #0]
 80050ba:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80050be:	f43f aeee 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c2:	a801      	add	r0, sp, #4
 80050c4:	f7ff fc58 	bl	8004978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050c8:	9802      	ldr	r0, [sp, #8]
 80050ca:	e6e8      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050cc:	6810      	ldr	r0, [r2, #0]
 80050ce:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80050d2:	f43f aee4 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d6:	a801      	add	r0, sp, #4
 80050d8:	f7ff fcfc 	bl	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050dc:	9803      	ldr	r0, [sp, #12]
 80050de:	e6de      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80050e8:	f43f aed9 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80050ec:	e7b4      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f010 0004 	ands.w	r0, r0, #4
 80050f6:	f43f aed2 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4807      	ldr	r0, [pc, #28]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 80050fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005102:	40d8      	lsrs	r0, r3
 8005104:	e6cb      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005106:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800510e:	f43f aec6 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005112:	e7d6      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005114:	58024400 	.word	0x58024400
 8005118:	08006960 	.word	0x08006960
 800511c:	03d09000 	.word	0x03d09000

08005120 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005120:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005122:	492c      	ldr	r1, [pc, #176]	; (80051d4 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8005124:	695a      	ldr	r2, [r3, #20]
{
 8005126:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005128:	699c      	ldr	r4, [r3, #24]
 800512a:	f044 0408 	orr.w	r4, r4, #8
 800512e:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005130:	699c      	ldr	r4, [r3, #24]
 8005132:	f044 0410 	orr.w	r4, r4, #16
 8005136:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	f024 0401 	bic.w	r4, r4, #1
 800513e:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005140:	691c      	ldr	r4, [r3, #16]
 8005142:	4021      	ands	r1, r4
 8005144:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800514c:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800514e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8005152:	2904      	cmp	r1, #4
 8005154:	d001      	beq.n	800515a <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005156:	0691      	lsls	r1, r2, #26
 8005158:	d430      	bmi.n	80051bc <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800515a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800515e:	2903      	cmp	r1, #3
 8005160:	d001      	beq.n	8005166 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005162:	0654      	lsls	r4, r2, #25
 8005164:	d41f      	bmi.n	80051a6 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005166:	0591      	lsls	r1, r2, #22
 8005168:	d509      	bpl.n	800517e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800516a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800516e:	f041 0101 	orr.w	r1, r1, #1
 8005172:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005176:	6999      	ldr	r1, [r3, #24]
 8005178:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800517c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800517e:	05d2      	lsls	r2, r2, #23
 8005180:	d509      	bpl.n	8005196 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005182:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005194:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005196:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005198:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800519c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80051a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80051a4:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051a6:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80051aa:	f041 0104 	orr.w	r1, r1, #4
 80051ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051b2:	6999      	ldr	r1, [r3, #24]
 80051b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80051b8:	6199      	str	r1, [r3, #24]
 80051ba:	e7d4      	b.n	8005166 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80051bc:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80051c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80051c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80051c8:	6999      	ldr	r1, [r3, #24]
 80051ca:	f041 0120 	orr.w	r1, r1, #32
 80051ce:	6199      	str	r1, [r3, #24]
 80051d0:	e7c3      	b.n	800515a <SPI_CloseTransfer+0x3a>
 80051d2:	bf00      	nop
 80051d4:	fffffc90 	.word	0xfffffc90

080051d8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80051d8:	2800      	cmp	r0, #0
 80051da:	f000 80c9 	beq.w	8005370 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80051de:	4a66      	ldr	r2, [pc, #408]	; (8005378 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e0:	2100      	movs	r1, #0
{
 80051e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80051e6:	6803      	ldr	r3, [r0, #0]
 80051e8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ea:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d017      	beq.n	8005220 <HAL_SPI_Init+0x48>
 80051f0:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_SPI_Init+0x48>
 80051f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051fc:	4293      	cmp	r3, r2
 80051fe:	68c2      	ldr	r2, [r0, #12]
 8005200:	f000 80ae 	beq.w	8005360 <HAL_SPI_Init+0x188>
 8005204:	2a0f      	cmp	r2, #15
 8005206:	d808      	bhi.n	800521a <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005208:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800520a:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800520e:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8005210:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8005212:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005216:	2908      	cmp	r1, #8
 8005218:	d916      	bls.n	8005248 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 800521a:	2001      	movs	r0, #1
}
 800521c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005220:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005222:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005224:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005228:	4e53      	ldr	r6, [pc, #332]	; (8005378 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800522a:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 800522c:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800522e:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005232:	4d52      	ldr	r5, [pc, #328]	; (800537c <HAL_SPI_Init+0x1a4>)
 8005234:	42ab      	cmp	r3, r5
 8005236:	bf18      	it	ne
 8005238:	42b3      	cmpne	r3, r6
 800523a:	d003      	beq.n	8005244 <HAL_SPI_Init+0x6c>
 800523c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005240:	42ab      	cmp	r3, r5
 8005242:	d101      	bne.n	8005248 <HAL_SPI_Init+0x70>
 8005244:	2910      	cmp	r1, #16
 8005246:	d8e8      	bhi.n	800521a <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005248:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 800524c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8005250:	2900      	cmp	r1, #0
 8005252:	d07a      	beq.n	800534a <HAL_SPI_Init+0x172>
 8005254:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8005258:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800525a:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800525c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800525e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005262:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	f021 0101 	bic.w	r1, r1, #1
 800526c:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800526e:	6899      	ldr	r1, [r3, #8]
 8005270:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005274:	6861      	ldr	r1, [r4, #4]
 8005276:	d058      	beq.n	800532a <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005278:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 800527c:	d001      	beq.n	8005282 <HAL_SPI_Init+0xaa>
 800527e:	2a06      	cmp	r2, #6
 8005280:	d849      	bhi.n	8005316 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005282:	f8d3 e000 	ldr.w	lr, [r3]
 8005286:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 800528a:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800528e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005290:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005294:	4337      	orrs	r7, r6
 8005296:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005298:	4337      	orrs	r7, r6
 800529a:	6926      	ldr	r6, [r4, #16]
 800529c:	4337      	orrs	r7, r6
 800529e:	6966      	ldr	r6, [r4, #20]
 80052a0:	4337      	orrs	r7, r6
 80052a2:	6a26      	ldr	r6, [r4, #32]
 80052a4:	4337      	orrs	r7, r6
 80052a6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80052a8:	4337      	orrs	r7, r6
 80052aa:	68a6      	ldr	r6, [r4, #8]
 80052ac:	4337      	orrs	r7, r6
 80052ae:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80052b0:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80052b2:	69e6      	ldr	r6, [r4, #28]
 80052b4:	4332      	orrs	r2, r6
 80052b6:	4302      	orrs	r2, r0
 80052b8:	ea42 020c 	orr.w	r2, r2, ip
 80052bc:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80052be:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80052c0:	433a      	orrs	r2, r7
 80052c2:	430a      	orrs	r2, r1
 80052c4:	432a      	orrs	r2, r5
 80052c6:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80052c8:	b9b9      	cbnz	r1, 80052fa <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80052d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e0:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80052ec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ee:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80052f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80052f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005302:	f1b9 0f00 	cmp.w	r9, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800530c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005310:	430a      	orrs	r2, r1
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e7e9      	b.n	80052ea <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005316:	f8d3 e000 	ldr.w	lr, [r3]
 800531a:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800531c:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8005320:	ea4e 0e06 	orr.w	lr, lr, r6
 8005324:	f8c3 e000 	str.w	lr, [r3]
 8005328:	e7b1      	b.n	800528e <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800532a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800532e:	d006      	beq.n	800533e <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005330:	2900      	cmp	r1, #0
 8005332:	d1a1      	bne.n	8005278 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005334:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800533a:	4689      	mov	r9, r1
 800533c:	e7a1      	b.n	8005282 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800533e:	b9cd      	cbnz	r5, 8005374 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005340:	681e      	ldr	r6, [r3, #0]
 8005342:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8005346:	601e      	str	r6, [r3, #0]
 8005348:	e796      	b.n	8005278 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 800534a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800534c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005350:	f7fc f8c2 	bl	80014d8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005354:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005356:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005358:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800535c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800535e:	e77b      	b.n	8005258 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005360:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005362:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005366:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8005368:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800536a:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800536e:	e769      	b.n	8005244 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8005370:	2001      	movs	r0, #1
}
 8005372:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005374:	4689      	mov	r9, r1
 8005376:	e782      	b.n	800527e <HAL_SPI_Init+0xa6>
 8005378:	40013000 	.word	0x40013000
 800537c:	40003800 	.word	0x40003800

08005380 <HAL_SPI_TransmitReceive>:
{
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005386:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800538a:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800538c:	2b01      	cmp	r3, #1
 800538e:	f000 80b9 	beq.w	8005504 <HAL_SPI_TransmitReceive+0x184>
 8005392:	2301      	movs	r3, #1
 8005394:	4604      	mov	r4, r0
 8005396:	4688      	mov	r8, r1
 8005398:	4691      	mov	r9, r2
 800539a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800539e:	f8d0 a000 	ldr.w	sl, [r0]
  tickstart = HAL_GetTick();
 80053a2:	f7fc f9bb 	bl	800171c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80053a6:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 80053aa:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80053ac:	2901      	cmp	r1, #1
 80053ae:	b2cb      	uxtb	r3, r1
 80053b0:	f040 80a1 	bne.w	80054f6 <HAL_SPI_TransmitReceive+0x176>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	bf18      	it	ne
 80053ba:	f1b8 0f00 	cmpne.w	r8, #0
 80053be:	f000 8094 	beq.w	80054ea <HAL_SPI_TransmitReceive+0x16a>
 80053c2:	fab5 f285 	clz	r2, r5
 80053c6:	0952      	lsrs	r2, r2, #5
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	f000 808e 	beq.w	80054ea <HAL_SPI_TransmitReceive+0x16a>
  SPI_2LINES(hspi);
 80053ce:	6823      	ldr	r3, [r4, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80053d0:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d2:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80053d6:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053da:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 80053de:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 80053e2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053e6:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->RxXferSize  = Size;
 80053ea:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxXferSize  = Size;
 80053ee:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80053f2:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  SPI_2LINES(hspi);
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80053fc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053fe:	4a89      	ldr	r2, [pc, #548]	; (8005624 <HAL_SPI_TransmitReceive+0x2a4>)
 8005400:	6859      	ldr	r1, [r3, #4]
 8005402:	400a      	ands	r2, r1
 8005404:	432a      	orrs	r2, r5
 8005406:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005410:	6862      	ldr	r2, [r4, #4]
 8005412:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005416:	f000 80ee 	beq.w	80055f6 <HAL_SPI_TransmitReceive+0x276>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541a:	f117 0901 	adds.w	r9, r7, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800541e:	68e2      	ldr	r2, [r4, #12]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005420:	46a8      	mov	r8, r5
 8005422:	bf18      	it	ne
 8005424:	f04f 0901 	movne.w	r9, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005428:	2a0f      	cmp	r2, #15
 800542a:	f200 80aa 	bhi.w	8005582 <HAL_SPI_TransmitReceive+0x202>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800542e:	2a07      	cmp	r2, #7
 8005430:	d96d      	bls.n	800550e <HAL_SPI_TransmitReceive+0x18e>
 8005432:	e000      	b.n	8005436 <HAL_SPI_TransmitReceive+0xb6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005434:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	0792      	lsls	r2, r2, #30
 800543a:	d50f      	bpl.n	800545c <HAL_SPI_TransmitReceive+0xdc>
 800543c:	b175      	cbz	r5, 800545c <HAL_SPI_TransmitReceive+0xdc>
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800543e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005440:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005444:	f8aa 1020 	strh.w	r1, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005448:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800544a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800544e:	3a01      	subs	r2, #1
 8005450:	b292      	uxth	r2, r2
 8005452:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005456:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800545a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	07d8      	lsls	r0, r3, #31
 8005460:	d512      	bpl.n	8005488 <HAL_SPI_TransmitReceive+0x108>
 8005462:	f1b8 0f00 	cmp.w	r8, #0
 8005466:	d00f      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x108>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005468:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800546c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800546e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005472:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005474:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005478:	3b01      	subs	r3, #1
 800547a:	b29b      	uxth	r3, r3
 800547c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005480:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8005484:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005488:	f7fc f948 	bl	800171c <HAL_GetTick>
 800548c:	1b80      	subs	r0, r0, r6
 800548e:	42b8      	cmp	r0, r7
 8005490:	d303      	bcc.n	800549a <HAL_SPI_TransmitReceive+0x11a>
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	f040 80b3 	bne.w	8005600 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800549a:	ea45 0308 	orr.w	r3, r5, r8
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c7      	bne.n	8005434 <HAL_SPI_TransmitReceive+0xb4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d40d      	bmi.n	80054c8 <HAL_SPI_TransmitReceive+0x148>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ac:	f7fc f936 	bl	800171c <HAL_GetTick>
 80054b0:	1b80      	subs	r0, r0, r6
 80054b2:	4287      	cmp	r7, r0
 80054b4:	d8f6      	bhi.n	80054a4 <HAL_SPI_TransmitReceive+0x124>
 80054b6:	f1b9 0f00 	cmp.w	r9, #0
 80054ba:	d0f3      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff fe29 	bl	8005120 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 80054ce:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 80054d0:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 80054d2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 80054da:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	bf18      	it	ne
 80054e2:	2301      	movne	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 80054ea:	2200      	movs	r2, #0
 80054ec:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 80054f6:	2200      	movs	r2, #0
    return errorcode;
 80054f8:	2302      	movs	r3, #2
    __HAL_UNLOCK(hspi);
 80054fa:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80054fe:	4618      	mov	r0, r3
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8005504:	2302      	movs	r3, #2
}
 8005506:	4618      	mov	r0, r3
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800550c:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	0791      	lsls	r1, r2, #30
 8005512:	d511      	bpl.n	8005538 <HAL_SPI_TransmitReceive+0x1b8>
 8005514:	b185      	cbz	r5, 8005538 <HAL_SPI_TransmitReceive+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005516:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->TxXferCount--;
 800551e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005522:	3b01      	subs	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800552a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        initial_TxXferCount = hspi->TxXferCount;
 800552c:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005530:	3301      	adds	r3, #1
        initial_TxXferCount = hspi->TxXferCount;
 8005532:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005534:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d513      	bpl.n	8005566 <HAL_SPI_TransmitReceive+0x1e6>
 800553e:	f1b8 0f00 	cmp.w	r8, #0
 8005542:	d010      	beq.n	8005566 <HAL_SPI_TransmitReceive+0x1e6>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005548:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800554a:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800554c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005550:	3b01      	subs	r3, #1
 8005552:	b29b      	uxth	r3, r3
 8005554:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005558:	6e63      	ldr	r3, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 800555a:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800555e:	3301      	adds	r3, #1
        initial_RxXferCount = hspi->RxXferCount;
 8005560:	fa1f f888 	uxth.w	r8, r8
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005564:	6663      	str	r3, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fc f8d9 	bl	800171c <HAL_GetTick>
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	42b8      	cmp	r0, r7
 800556e:	d302      	bcc.n	8005576 <HAL_SPI_TransmitReceive+0x1f6>
 8005570:	f1b9 0f00 	cmp.w	r9, #0
 8005574:	d144      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005576:	ea45 0308 	orr.w	r3, r5, r8
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1c5      	bne.n	800550c <HAL_SPI_TransmitReceive+0x18c>
 8005580:	e790      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x124>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005582:	f248 0a08 	movw	sl, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	0791      	lsls	r1, r2, #30
 800558a:	d50e      	bpl.n	80055aa <HAL_SPI_TransmitReceive+0x22a>
 800558c:	b16d      	cbz	r5, 80055aa <HAL_SPI_TransmitReceive+0x22a>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800558e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005590:	f852 1b04 	ldr.w	r1, [r2], #4
 8005594:	6219      	str	r1, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005596:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8005598:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800559c:	3a01      	subs	r2, #1
 800559e:	b292      	uxth	r2, r2
 80055a0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80055a4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80055a8:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	ea12 0f0a 	tst.w	r2, sl
 80055b0:	d011      	beq.n	80055d6 <HAL_SPI_TransmitReceive+0x256>
 80055b2:	f1b8 0f00 	cmp.w	r8, #0
 80055b6:	d00e      	beq.n	80055d6 <HAL_SPI_TransmitReceive+0x256>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80055b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
        hspi->RxXferCount --;
 80055ba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80055be:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 80055c0:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80055c2:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 80055c6:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80055c8:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 80055ca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80055ce:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 80055d2:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d6:	f7fc f8a1 	bl	800171c <HAL_GetTick>
 80055da:	1b80      	subs	r0, r0, r6
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055dc:	ea45 0308 	orr.w	r3, r5, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e0:	42b8      	cmp	r0, r7
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055e2:	b29b      	uxth	r3, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e4:	d302      	bcc.n	80055ec <HAL_SPI_TransmitReceive+0x26c>
 80055e6:	f1b9 0f00 	cmp.w	r9, #0
 80055ea:	d109      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x280>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f43f af59 	beq.w	80054a4 <HAL_SPI_TransmitReceive+0x124>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	e7c7      	b.n	8005586 <HAL_SPI_TransmitReceive+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e70c      	b.n	800541a <HAL_SPI_TransmitReceive+0x9a>
        SPI_CloseTransfer(hspi);
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff fd8d 	bl	8005120 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005606:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800560a:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800560c:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800560e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
        __HAL_UNLOCK(hspi);
 8005614:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005618:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800561c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
        return HAL_TIMEOUT;
 8005620:	e766      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x170>
 8005622:	bf00      	nop
 8005624:	ffff0000 	.word	0xffff0000

08005628 <arm_biquad_cascade_df2T_f32>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	7807      	ldrb	r7, [r0, #0]
 800562e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005632:	6885      	ldr	r5, [r0, #8]
 8005634:	3514      	adds	r5, #20
 8005636:	6846      	ldr	r6, [r0, #4]
 8005638:	3608      	adds	r6, #8
 800563a:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800563e:	eb02 0b09 	add.w	fp, r2, r9
 8005642:	f003 080f 	and.w	r8, r3, #15
 8005646:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800564a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800564e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005652:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005656:	ed15 6a02 	vldr	s12, [r5, #-8]
 800565a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800565e:	46b4      	mov	ip, r6
 8005660:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005664:	ed16 4a01 	vldr	s8, [r6, #-4]
 8005668:	f1be 0f00 	cmp.w	lr, #0
 800566c:	f000 8195 	beq.w	800599a <arm_biquad_cascade_df2T_f32+0x372>
 8005670:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005674:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8005678:	4674      	mov	r4, lr
 800567a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800567e:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005682:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005686:	ee67 4a03 	vmul.f32	s9, s14, s6
 800568a:	ee34 4a84 	vadd.f32	s8, s9, s8
 800568e:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005692:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005696:	ee26 3a83 	vmul.f32	s6, s13, s6
 800569a:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800569e:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 80056a2:	ee67 4aa3 	vmul.f32	s9, s15, s7
 80056a6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80056aa:	ee25 5a85 	vmul.f32	s10, s11, s10
 80056ae:	ee35 5a03 	vadd.f32	s10, s10, s6
 80056b2:	ee27 4a23 	vmul.f32	s8, s14, s7
 80056b6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80056ba:	ee26 3a24 	vmul.f32	s6, s12, s9
 80056be:	ee33 3a05 	vadd.f32	s6, s6, s10
 80056c2:	ee66 3aa3 	vmul.f32	s7, s13, s7
 80056c6:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 80056ca:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 80056ce:	ee27 5a84 	vmul.f32	s10, s15, s8
 80056d2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80056d6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80056da:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80056de:	ee67 3a04 	vmul.f32	s7, s14, s8
 80056e2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80056e6:	ee26 3a05 	vmul.f32	s6, s12, s10
 80056ea:	ee33 3a24 	vadd.f32	s6, s6, s9
 80056ee:	ee66 3a84 	vmul.f32	s7, s13, s8
 80056f2:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 80056f6:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 80056fa:	ee67 4a84 	vmul.f32	s9, s15, s8
 80056fe:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005702:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005706:	ee35 5a23 	vadd.f32	s10, s10, s7
 800570a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800570e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005712:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005716:	ee33 3a05 	vadd.f32	s6, s6, s10
 800571a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800571e:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8005722:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8005726:	ee27 5a84 	vmul.f32	s10, s15, s8
 800572a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800572e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005732:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005736:	ee67 3a04 	vmul.f32	s7, s14, s8
 800573a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800573e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005742:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005746:	ee66 3a84 	vmul.f32	s7, s13, s8
 800574a:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800574e:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8005752:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005756:	ee74 4a83 	vadd.f32	s9, s9, s6
 800575a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800575e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005762:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005766:	ee35 5a23 	vadd.f32	s10, s10, s7
 800576a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800576e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005772:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005776:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800577a:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800577e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005782:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005786:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800578a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800578e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005792:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005796:	ee26 3a05 	vmul.f32	s6, s12, s10
 800579a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800579e:	ee66 3a84 	vmul.f32	s7, s13, s8
 80057a2:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 80057a6:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 80057aa:	ee67 4a84 	vmul.f32	s9, s15, s8
 80057ae:	ee74 4a83 	vadd.f32	s9, s9, s6
 80057b2:	ee25 5a85 	vmul.f32	s10, s11, s10
 80057b6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80057ba:	ee67 3a04 	vmul.f32	s7, s14, s8
 80057be:	ee35 5a23 	vadd.f32	s10, s10, s7
 80057c2:	ee26 3a24 	vmul.f32	s6, s12, s9
 80057c6:	ee33 3a05 	vadd.f32	s6, s6, s10
 80057ca:	ee66 3a84 	vmul.f32	s7, s13, s8
 80057ce:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 80057d2:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 80057d6:	ee27 5a84 	vmul.f32	s10, s15, s8
 80057da:	ee35 5a03 	vadd.f32	s10, s10, s6
 80057de:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80057e2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80057e6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80057ea:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80057ee:	ee26 3a05 	vmul.f32	s6, s12, s10
 80057f2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80057f6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80057fa:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80057fe:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8005802:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005806:	ee74 4a83 	vadd.f32	s9, s9, s6
 800580a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800580e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005812:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005816:	ee35 5a23 	vadd.f32	s10, s10, s7
 800581a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800581e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005822:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005826:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800582a:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800582e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005832:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005836:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800583a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800583e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005842:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005846:	ee26 3a05 	vmul.f32	s6, s12, s10
 800584a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800584e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005852:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8005856:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800585a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800585e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005862:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005866:	ee35 5a23 	vadd.f32	s10, s10, s7
 800586a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800586e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005872:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005876:	ee33 3a05 	vadd.f32	s6, s6, s10
 800587a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800587e:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8005882:	ed10 4a04 	vldr	s8, [r0, #-16]
 8005886:	ee27 5a84 	vmul.f32	s10, s15, s8
 800588a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800588e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005892:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005896:	ee67 3a04 	vmul.f32	s7, s14, s8
 800589a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800589e:	ee26 3a05 	vmul.f32	s6, s12, s10
 80058a2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80058a6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80058aa:	ed03 5a04 	vstr	s10, [r3, #-16]
 80058ae:	ed10 4a03 	vldr	s8, [r0, #-12]
 80058b2:	ee67 4a84 	vmul.f32	s9, s15, s8
 80058b6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80058ba:	ee25 5a85 	vmul.f32	s10, s11, s10
 80058be:	ee35 5a23 	vadd.f32	s10, s10, s7
 80058c2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80058c6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80058ca:	ee26 3a24 	vmul.f32	s6, s12, s9
 80058ce:	ee33 3a05 	vadd.f32	s6, s6, s10
 80058d2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80058d6:	ed43 4a03 	vstr	s9, [r3, #-12]
 80058da:	ed10 4a02 	vldr	s8, [r0, #-8]
 80058de:	ee27 5a84 	vmul.f32	s10, s15, s8
 80058e2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80058e6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80058ea:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80058ee:	ee67 3a04 	vmul.f32	s7, s14, s8
 80058f2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80058f6:	ee26 3a05 	vmul.f32	s6, s12, s10
 80058fa:	ee33 3a24 	vadd.f32	s6, s6, s9
 80058fe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005902:	ed03 5a02 	vstr	s10, [r3, #-8]
 8005906:	ed10 4a01 	vldr	s8, [r0, #-4]
 800590a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800590e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005912:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005916:	ee35 5a23 	vadd.f32	s10, s10, s7
 800591a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800591e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005922:	ee66 3a24 	vmul.f32	s7, s12, s9
 8005926:	ee73 3a85 	vadd.f32	s7, s7, s10
 800592a:	ee26 5a84 	vmul.f32	s10, s13, s8
 800592e:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8005932:	ee34 4a05 	vadd.f32	s8, s8, s10
 8005936:	ed43 4a01 	vstr	s9, [r3, #-4]
 800593a:	3040      	adds	r0, #64	; 0x40
 800593c:	3340      	adds	r3, #64	; 0x40
 800593e:	3c01      	subs	r4, #1
 8005940:	f47f ae9b 	bne.w	800567a <arm_biquad_cascade_df2T_f32+0x52>
 8005944:	4449      	add	r1, r9
 8005946:	465b      	mov	r3, fp
 8005948:	f1b8 0f00 	cmp.w	r8, #0
 800594c:	d019      	beq.n	8005982 <arm_biquad_cascade_df2T_f32+0x35a>
 800594e:	eb01 000a 	add.w	r0, r1, sl
 8005952:	ecf1 2a01 	vldmia	r1!, {s5}
 8005956:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800595a:	ee33 3a23 	vadd.f32	s6, s6, s7
 800595e:	ee67 3a22 	vmul.f32	s7, s14, s5
 8005962:	ee33 4a84 	vadd.f32	s8, s7, s8
 8005966:	ee26 5a03 	vmul.f32	s10, s12, s6
 800596a:	ee75 3a04 	vadd.f32	s7, s10, s8
 800596e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8005972:	ee25 4a83 	vmul.f32	s8, s11, s6
 8005976:	ee34 4a22 	vadd.f32	s8, s8, s5
 800597a:	eca3 3a01 	vstmia	r3!, {s6}
 800597e:	4281      	cmp	r1, r0
 8005980:	d1e7      	bne.n	8005952 <arm_biquad_cascade_df2T_f32+0x32a>
 8005982:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8005986:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800598a:	3514      	adds	r5, #20
 800598c:	3608      	adds	r6, #8
 800598e:	4611      	mov	r1, r2
 8005990:	3f01      	subs	r7, #1
 8005992:	f47f ae5a 	bne.w	800564a <arm_biquad_cascade_df2T_f32+0x22>
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599a:	4613      	mov	r3, r2
 800599c:	e7d4      	b.n	8005948 <arm_biquad_cascade_df2T_f32+0x320>
	...

080059a0 <arm_biquad_cascade_df2T_init_f32>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	2100      	movs	r1, #0
 80059a8:	60a2      	str	r2, [r4, #8]
 80059aa:	00c2      	lsls	r2, r0, #3
 80059ac:	7020      	strb	r0, [r4, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f9b0 	bl	8005d14 <memset>
 80059b4:	6060      	str	r0, [r4, #4]
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <arm_sub_f32>:
 80059b8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80059bc:	b4f0      	push	{r4, r5, r6, r7}
 80059be:	d033      	beq.n	8005a28 <arm_sub_f32+0x70>
 80059c0:	f100 0610 	add.w	r6, r0, #16
 80059c4:	f101 0510 	add.w	r5, r1, #16
 80059c8:	f102 0410 	add.w	r4, r2, #16
 80059cc:	4667      	mov	r7, ip
 80059ce:	ed15 7a04 	vldr	s14, [r5, #-16]
 80059d2:	3f01      	subs	r7, #1
 80059d4:	ed56 7a04 	vldr	s15, [r6, #-16]
 80059d8:	f105 0510 	add.w	r5, r5, #16
 80059dc:	f106 0610 	add.w	r6, r6, #16
 80059e0:	f104 0410 	add.w	r4, r4, #16
 80059e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059e8:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80059ec:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 80059f0:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 80059f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059f8:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80059fc:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005a00:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a08:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8005a0c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005a10:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a18:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005a1c:	d1d7      	bne.n	80059ce <arm_sub_f32+0x16>
 8005a1e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005a22:	4420      	add	r0, r4
 8005a24:	4421      	add	r1, r4
 8005a26:	4422      	add	r2, r4
 8005a28:	f013 0303 	ands.w	r3, r3, #3
 8005a2c:	d01b      	beq.n	8005a66 <arm_sub_f32+0xae>
 8005a2e:	edd0 7a00 	vldr	s15, [r0]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	ed91 7a00 	vldr	s14, [r1]
 8005a38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a3c:	edc2 7a00 	vstr	s15, [r2]
 8005a40:	d011      	beq.n	8005a66 <arm_sub_f32+0xae>
 8005a42:	edd0 7a01 	vldr	s15, [r0, #4]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	ed91 7a01 	vldr	s14, [r1, #4]
 8005a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a50:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a54:	d007      	beq.n	8005a66 <arm_sub_f32+0xae>
 8005a56:	edd0 7a02 	vldr	s15, [r0, #8]
 8005a5a:	ed91 7a02 	vldr	s14, [r1, #8]
 8005a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a62:	edc2 7a02 	vstr	s15, [r2, #8]
 8005a66:	bcf0      	pop	{r4, r5, r6, r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop

08005a6c <arm_mult_f32>:
 8005a6c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005a70:	b4f0      	push	{r4, r5, r6, r7}
 8005a72:	d033      	beq.n	8005adc <arm_mult_f32+0x70>
 8005a74:	f100 0610 	add.w	r6, r0, #16
 8005a78:	f101 0510 	add.w	r5, r1, #16
 8005a7c:	f102 0410 	add.w	r4, r2, #16
 8005a80:	4667      	mov	r7, ip
 8005a82:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005a86:	3f01      	subs	r7, #1
 8005a88:	ed56 7a04 	vldr	s15, [r6, #-16]
 8005a8c:	f105 0510 	add.w	r5, r5, #16
 8005a90:	f106 0610 	add.w	r6, r6, #16
 8005a94:	f104 0410 	add.w	r4, r4, #16
 8005a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a9c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8005aa0:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8005aa4:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8005aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aac:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8005ab0:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005ab4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005abc:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8005ac0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005ac4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005acc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005ad0:	d1d7      	bne.n	8005a82 <arm_mult_f32+0x16>
 8005ad2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005ad6:	4420      	add	r0, r4
 8005ad8:	4421      	add	r1, r4
 8005ada:	4422      	add	r2, r4
 8005adc:	f013 0303 	ands.w	r3, r3, #3
 8005ae0:	d01b      	beq.n	8005b1a <arm_mult_f32+0xae>
 8005ae2:	edd1 7a00 	vldr	s15, [r1]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	ed90 7a00 	vldr	s14, [r0]
 8005aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af0:	edc2 7a00 	vstr	s15, [r2]
 8005af4:	d011      	beq.n	8005b1a <arm_mult_f32+0xae>
 8005af6:	edd0 7a01 	vldr	s15, [r0, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	ed91 7a01 	vldr	s14, [r1, #4]
 8005b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b04:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b08:	d007      	beq.n	8005b1a <arm_mult_f32+0xae>
 8005b0a:	edd0 7a02 	vldr	s15, [r0, #8]
 8005b0e:	ed91 7a02 	vldr	s14, [r1, #8]
 8005b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b16:	edc2 7a02 	vstr	s15, [r2, #8]
 8005b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <arm_dot_prod_f32>:
 8005b20:	b4f0      	push	{r4, r5, r6, r7}
 8005b22:	0897      	lsrs	r7, r2, #2
 8005b24:	d052      	beq.n	8005bcc <arm_dot_prod_f32+0xac>
 8005b26:	f100 0510 	add.w	r5, r0, #16
 8005b2a:	f101 0410 	add.w	r4, r1, #16
 8005b2e:	463e      	mov	r6, r7
 8005b30:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005bd4 <arm_dot_prod_f32+0xb4>
 8005b34:	ed14 7a04 	vldr	s14, [r4, #-16]
 8005b38:	3e01      	subs	r6, #1
 8005b3a:	ed15 6a04 	vldr	s12, [r5, #-16]
 8005b3e:	f104 0410 	add.w	r4, r4, #16
 8005b42:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 8005b46:	f105 0510 	add.w	r5, r5, #16
 8005b4a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005b4e:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 8005b52:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005b56:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005b5a:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8005b5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b62:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8005b66:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005b6a:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8005b6e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005b72:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b76:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b7e:	d1d9      	bne.n	8005b34 <arm_dot_prod_f32+0x14>
 8005b80:	013f      	lsls	r7, r7, #4
 8005b82:	4438      	add	r0, r7
 8005b84:	4439      	add	r1, r7
 8005b86:	f012 0203 	ands.w	r2, r2, #3
 8005b8a:	d01b      	beq.n	8005bc4 <arm_dot_prod_f32+0xa4>
 8005b8c:	ed91 7a00 	vldr	s14, [r1]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	edd0 6a00 	vldr	s13, [r0]
 8005b96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b9e:	d011      	beq.n	8005bc4 <arm_dot_prod_f32+0xa4>
 8005ba0:	ed91 7a01 	vldr	s14, [r1, #4]
 8005ba4:	2a01      	cmp	r2, #1
 8005ba6:	edd0 6a01 	vldr	s13, [r0, #4]
 8005baa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bb2:	d007      	beq.n	8005bc4 <arm_dot_prod_f32+0xa4>
 8005bb4:	ed90 7a02 	vldr	s14, [r0, #8]
 8005bb8:	edd1 6a02 	vldr	s13, [r1, #8]
 8005bbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bc4:	edc3 7a00 	vstr	s15, [r3]
 8005bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8005bca:	4770      	bx	lr
 8005bcc:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005bd4 <arm_dot_prod_f32+0xb4>
 8005bd0:	e7d9      	b.n	8005b86 <arm_dot_prod_f32+0x66>
 8005bd2:	bf00      	nop
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <arm_add_f32>:
 8005bd8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005bdc:	b4f0      	push	{r4, r5, r6, r7}
 8005bde:	d033      	beq.n	8005c48 <arm_add_f32+0x70>
 8005be0:	f100 0610 	add.w	r6, r0, #16
 8005be4:	f101 0510 	add.w	r5, r1, #16
 8005be8:	f102 0410 	add.w	r4, r2, #16
 8005bec:	4667      	mov	r7, ip
 8005bee:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005bf2:	3f01      	subs	r7, #1
 8005bf4:	ed56 7a04 	vldr	s15, [r6, #-16]
 8005bf8:	f105 0510 	add.w	r5, r5, #16
 8005bfc:	f106 0610 	add.w	r6, r6, #16
 8005c00:	f104 0410 	add.w	r4, r4, #16
 8005c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c08:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8005c0c:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8005c10:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8005c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c18:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8005c1c:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8005c20:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8005c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c28:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8005c2c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8005c30:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8005c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c38:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8005c3c:	d1d7      	bne.n	8005bee <arm_add_f32+0x16>
 8005c3e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005c42:	4420      	add	r0, r4
 8005c44:	4421      	add	r1, r4
 8005c46:	4422      	add	r2, r4
 8005c48:	f013 0303 	ands.w	r3, r3, #3
 8005c4c:	d01b      	beq.n	8005c86 <arm_add_f32+0xae>
 8005c4e:	edd1 7a00 	vldr	s15, [r1]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	ed90 7a00 	vldr	s14, [r0]
 8005c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c5c:	edc2 7a00 	vstr	s15, [r2]
 8005c60:	d011      	beq.n	8005c86 <arm_add_f32+0xae>
 8005c62:	edd0 7a01 	vldr	s15, [r0, #4]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	ed91 7a01 	vldr	s14, [r1, #4]
 8005c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c70:	edc2 7a01 	vstr	s15, [r2, #4]
 8005c74:	d007      	beq.n	8005c86 <arm_add_f32+0xae>
 8005c76:	edd0 7a02 	vldr	s15, [r0, #8]
 8005c7a:	ed91 7a02 	vldr	s14, [r1, #8]
 8005c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c82:	edc2 7a02 	vstr	s15, [r2, #8]
 8005c86:	bcf0      	pop	{r4, r5, r6, r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop

08005c8c <arm_abs_f32>:
 8005c8c:	b470      	push	{r4, r5, r6}
 8005c8e:	0896      	lsrs	r6, r2, #2
 8005c90:	d025      	beq.n	8005cde <arm_abs_f32+0x52>
 8005c92:	f100 0410 	add.w	r4, r0, #16
 8005c96:	f101 0310 	add.w	r3, r1, #16
 8005c9a:	4635      	mov	r5, r6
 8005c9c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005ca0:	3d01      	subs	r5, #1
 8005ca2:	f104 0410 	add.w	r4, r4, #16
 8005ca6:	f103 0310 	add.w	r3, r3, #16
 8005caa:	eef0 7ae7 	vabs.f32	s15, s15
 8005cae:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8005cb2:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8005cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8005cba:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8005cbe:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005cc2:	eef0 7ae7 	vabs.f32	s15, s15
 8005cc6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8005cca:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8005cce:	eef0 7ae7 	vabs.f32	s15, s15
 8005cd2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005cd6:	d1e1      	bne.n	8005c9c <arm_abs_f32+0x10>
 8005cd8:	0136      	lsls	r6, r6, #4
 8005cda:	4430      	add	r0, r6
 8005cdc:	4431      	add	r1, r6
 8005cde:	f012 0203 	ands.w	r2, r2, #3
 8005ce2:	d015      	beq.n	8005d10 <arm_abs_f32+0x84>
 8005ce4:	edd0 7a00 	vldr	s15, [r0]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	eef0 7ae7 	vabs.f32	s15, s15
 8005cee:	edc1 7a00 	vstr	s15, [r1]
 8005cf2:	d00d      	beq.n	8005d10 <arm_abs_f32+0x84>
 8005cf4:	edd0 7a01 	vldr	s15, [r0, #4]
 8005cf8:	2a01      	cmp	r2, #1
 8005cfa:	eef0 7ae7 	vabs.f32	s15, s15
 8005cfe:	edc1 7a01 	vstr	s15, [r1, #4]
 8005d02:	d005      	beq.n	8005d10 <arm_abs_f32+0x84>
 8005d04:	edd0 7a02 	vldr	s15, [r0, #8]
 8005d08:	eef0 7ae7 	vabs.f32	s15, s15
 8005d0c:	edc1 7a02 	vstr	s15, [r1, #8]
 8005d10:	bc70      	pop	{r4, r5, r6}
 8005d12:	4770      	bx	lr

08005d14 <memset>:
 8005d14:	4402      	add	r2, r0
 8005d16:	4603      	mov	r3, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	; (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	; (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	; (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	; (8005d68 <__libc_init_array+0x44>)
 8005d38:	f000 fe06 	bl	8006948 <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	08006b50 	.word	0x08006b50
 8005d60:	08006b50 	.word	0x08006b50
 8005d64:	08006b50 	.word	0x08006b50
 8005d68:	08006b54 	.word	0x08006b54
 8005d6c:	00000000 	.word	0x00000000

08005d70 <sin>:
 8005d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d72:	eeb0 7b40 	vmov.f64	d7, d0
 8005d76:	ee17 3a90 	vmov	r3, s15
 8005d7a:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <sin+0x90>)
 8005d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d80:	4293      	cmp	r3, r2
 8005d82:	dc07      	bgt.n	8005d94 <sin+0x24>
 8005d84:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8005df8 <sin+0x88>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	b005      	add	sp, #20
 8005d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d90:	f000 b8a6 	b.w	8005ee0 <__kernel_sin>
 8005d94:	4a1b      	ldr	r2, [pc, #108]	; (8005e04 <sin+0x94>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	dd04      	ble.n	8005da4 <sin+0x34>
 8005d9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8005d9e:	b005      	add	sp, #20
 8005da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005da4:	4668      	mov	r0, sp
 8005da6:	f000 f8f3 	bl	8005f90 <__ieee754_rem_pio2>
 8005daa:	f000 0003 	and.w	r0, r0, #3
 8005dae:	2801      	cmp	r0, #1
 8005db0:	d00a      	beq.n	8005dc8 <sin+0x58>
 8005db2:	2802      	cmp	r0, #2
 8005db4:	d00f      	beq.n	8005dd6 <sin+0x66>
 8005db6:	b9c0      	cbnz	r0, 8005dea <sin+0x7a>
 8005db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dbc:	ed9d 0b00 	vldr	d0, [sp]
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f000 f88d 	bl	8005ee0 <__kernel_sin>
 8005dc6:	e7ea      	b.n	8005d9e <sin+0x2e>
 8005dc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dcc:	ed9d 0b00 	vldr	d0, [sp]
 8005dd0:	f000 f81a 	bl	8005e08 <__kernel_cos>
 8005dd4:	e7e3      	b.n	8005d9e <sin+0x2e>
 8005dd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dda:	ed9d 0b00 	vldr	d0, [sp]
 8005dde:	2001      	movs	r0, #1
 8005de0:	f000 f87e 	bl	8005ee0 <__kernel_sin>
 8005de4:	eeb1 0b40 	vneg.f64	d0, d0
 8005de8:	e7d9      	b.n	8005d9e <sin+0x2e>
 8005dea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005dee:	ed9d 0b00 	vldr	d0, [sp]
 8005df2:	f000 f809 	bl	8005e08 <__kernel_cos>
 8005df6:	e7f5      	b.n	8005de4 <sin+0x74>
	...
 8005e00:	3fe921fb 	.word	0x3fe921fb
 8005e04:	7fefffff 	.word	0x7fefffff

08005e08 <__kernel_cos>:
 8005e08:	ee10 1a90 	vmov	r1, s1
 8005e0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e14:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8005e18:	da05      	bge.n	8005e26 <__kernel_cos+0x1e>
 8005e1a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8005e1e:	ee17 3a90 	vmov	r3, s15
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d03d      	beq.n	8005ea2 <__kernel_cos+0x9a>
 8005e26:	ee20 5b00 	vmul.f64	d5, d0, d0
 8005e2a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8005e2e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8005ea8 <__kernel_cos+0xa0>
 8005e32:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8005eb0 <__kernel_cos+0xa8>
 8005e36:	eea5 4b07 	vfma.f64	d4, d5, d7
 8005e3a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8005eb8 <__kernel_cos+0xb0>
 8005e3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005e42:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8005ec0 <__kernel_cos+0xb8>
 8005e46:	eea7 4b05 	vfma.f64	d4, d7, d5
 8005e4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8005ec8 <__kernel_cos+0xc0>
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <__kernel_cos+0xd0>)
 8005e50:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005e54:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8005ed0 <__kernel_cos+0xc8>
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	eea7 4b05 	vfma.f64	d4, d7, d5
 8005e5e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005e62:	ee24 4b05 	vmul.f64	d4, d4, d5
 8005e66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e6a:	eea5 1b04 	vfma.f64	d1, d5, d4
 8005e6e:	dc04      	bgt.n	8005e7a <__kernel_cos+0x72>
 8005e70:	ee37 7b41 	vsub.f64	d7, d7, d1
 8005e74:	ee36 0b47 	vsub.f64	d0, d6, d7
 8005e78:	4770      	bx	lr
 8005e7a:	4b18      	ldr	r3, [pc, #96]	; (8005edc <__kernel_cos+0xd4>)
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	dc0d      	bgt.n	8005e9c <__kernel_cos+0x94>
 8005e80:	2200      	movs	r2, #0
 8005e82:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8005e86:	ec43 2b15 	vmov	d5, r2, r3
 8005e8a:	ee36 0b45 	vsub.f64	d0, d6, d5
 8005e8e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005e92:	ee37 7b41 	vsub.f64	d7, d7, d1
 8005e96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8005e9a:	4770      	bx	lr
 8005e9c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8005ea0:	e7f3      	b.n	8005e8a <__kernel_cos+0x82>
 8005ea2:	eeb0 0b46 	vmov.f64	d0, d6
 8005ea6:	4770      	bx	lr
 8005ea8:	be8838d4 	.word	0xbe8838d4
 8005eac:	bda8fae9 	.word	0xbda8fae9
 8005eb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005eb4:	3e21ee9e 	.word	0x3e21ee9e
 8005eb8:	809c52ad 	.word	0x809c52ad
 8005ebc:	be927e4f 	.word	0xbe927e4f
 8005ec0:	19cb1590 	.word	0x19cb1590
 8005ec4:	3efa01a0 	.word	0x3efa01a0
 8005ec8:	16c15177 	.word	0x16c15177
 8005ecc:	bf56c16c 	.word	0xbf56c16c
 8005ed0:	5555554c 	.word	0x5555554c
 8005ed4:	3fa55555 	.word	0x3fa55555
 8005ed8:	3fd33332 	.word	0x3fd33332
 8005edc:	3fe90000 	.word	0x3fe90000

08005ee0 <__kernel_sin>:
 8005ee0:	ee10 3a90 	vmov	r3, s1
 8005ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005eec:	da04      	bge.n	8005ef8 <__kernel_sin+0x18>
 8005eee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8005ef2:	ee17 3a90 	vmov	r3, s15
 8005ef6:	b35b      	cbz	r3, 8005f50 <__kernel_sin+0x70>
 8005ef8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8005efc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8005f00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8005f58 <__kernel_sin+0x78>
 8005f04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005f60 <__kernel_sin+0x80>
 8005f08:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005f0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005f68 <__kernel_sin+0x88>
 8005f10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8005f14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005f70 <__kernel_sin+0x90>
 8005f18:	eea7 4b06 	vfma.f64	d4, d7, d6
 8005f1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005f78 <__kernel_sin+0x98>
 8005f20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8005f24:	b930      	cbnz	r0, 8005f34 <__kernel_sin+0x54>
 8005f26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005f80 <__kernel_sin+0xa0>
 8005f2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005f2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8005f32:	4770      	bx	lr
 8005f34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8005f38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005f3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8005f40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8005f44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005f88 <__kernel_sin+0xa8>
 8005f48:	eea5 1b07 	vfma.f64	d1, d5, d7
 8005f4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	f3af 8000 	nop.w
 8005f58:	5acfd57c 	.word	0x5acfd57c
 8005f5c:	3de5d93a 	.word	0x3de5d93a
 8005f60:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f64:	be5ae5e6 	.word	0xbe5ae5e6
 8005f68:	57b1fe7d 	.word	0x57b1fe7d
 8005f6c:	3ec71de3 	.word	0x3ec71de3
 8005f70:	19c161d5 	.word	0x19c161d5
 8005f74:	bf2a01a0 	.word	0xbf2a01a0
 8005f78:	1110f8a6 	.word	0x1110f8a6
 8005f7c:	3f811111 	.word	0x3f811111
 8005f80:	55555549 	.word	0x55555549
 8005f84:	bfc55555 	.word	0xbfc55555
 8005f88:	55555549 	.word	0x55555549
 8005f8c:	3fc55555 	.word	0x3fc55555

08005f90 <__ieee754_rem_pio2>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	eeb0 7b40 	vmov.f64	d7, d0
 8005f96:	ee17 5a90 	vmov	r5, s15
 8005f9a:	4b99      	ldr	r3, [pc, #612]	; (8006200 <__ieee754_rem_pio2+0x270>)
 8005f9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005fa0:	429e      	cmp	r6, r3
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	dc07      	bgt.n	8005fb8 <__ieee754_rem_pio2+0x28>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2300      	movs	r3, #0
 8005fac:	ed84 0b00 	vstr	d0, [r4]
 8005fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e01b      	b.n	8005ff0 <__ieee754_rem_pio2+0x60>
 8005fb8:	4b92      	ldr	r3, [pc, #584]	; (8006204 <__ieee754_rem_pio2+0x274>)
 8005fba:	429e      	cmp	r6, r3
 8005fbc:	dc3b      	bgt.n	8006036 <__ieee754_rem_pio2+0xa6>
 8005fbe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80061c0 <__ieee754_rem_pio2+0x230>
 8005fc8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8005fcc:	dd19      	ble.n	8006002 <__ieee754_rem_pio2+0x72>
 8005fce:	ee30 7b46 	vsub.f64	d7, d0, d6
 8005fd2:	429e      	cmp	r6, r3
 8005fd4:	d00e      	beq.n	8005ff4 <__ieee754_rem_pio2+0x64>
 8005fd6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80061c8 <__ieee754_rem_pio2+0x238>
 8005fda:	ee37 5b46 	vsub.f64	d5, d7, d6
 8005fde:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005fe2:	ed84 5b00 	vstr	d5, [r4]
 8005fe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fea:	ed84 7b02 	vstr	d7, [r4, #8]
 8005fee:	2001      	movs	r0, #1
 8005ff0:	b008      	add	sp, #32
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80061d0 <__ieee754_rem_pio2+0x240>
 8005ff8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ffc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80061d8 <__ieee754_rem_pio2+0x248>
 8006000:	e7eb      	b.n	8005fda <__ieee754_rem_pio2+0x4a>
 8006002:	429e      	cmp	r6, r3
 8006004:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006008:	d00e      	beq.n	8006028 <__ieee754_rem_pio2+0x98>
 800600a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80061c8 <__ieee754_rem_pio2+0x238>
 800600e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006012:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006016:	ed84 5b00 	vstr	d5, [r4]
 800601a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	ed84 7b02 	vstr	d7, [r4, #8]
 8006026:	e7e3      	b.n	8005ff0 <__ieee754_rem_pio2+0x60>
 8006028:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80061d0 <__ieee754_rem_pio2+0x240>
 800602c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006030:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80061d8 <__ieee754_rem_pio2+0x248>
 8006034:	e7eb      	b.n	800600e <__ieee754_rem_pio2+0x7e>
 8006036:	4b74      	ldr	r3, [pc, #464]	; (8006208 <__ieee754_rem_pio2+0x278>)
 8006038:	429e      	cmp	r6, r3
 800603a:	dc70      	bgt.n	800611e <__ieee754_rem_pio2+0x18e>
 800603c:	f000 f8ec 	bl	8006218 <fabs>
 8006040:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006044:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80061e0 <__ieee754_rem_pio2+0x250>
 8006048:	eea0 7b06 	vfma.f64	d7, d0, d6
 800604c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006050:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006054:	ee17 0a90 	vmov	r0, s15
 8006058:	eeb1 4b45 	vneg.f64	d4, d5
 800605c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80061c0 <__ieee754_rem_pio2+0x230>
 8006060:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006064:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80061c8 <__ieee754_rem_pio2+0x238>
 8006068:	281f      	cmp	r0, #31
 800606a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800606e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006072:	dc08      	bgt.n	8006086 <__ieee754_rem_pio2+0xf6>
 8006074:	4b65      	ldr	r3, [pc, #404]	; (800620c <__ieee754_rem_pio2+0x27c>)
 8006076:	1e42      	subs	r2, r0, #1
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	42b3      	cmp	r3, r6
 800607e:	d002      	beq.n	8006086 <__ieee754_rem_pio2+0xf6>
 8006080:	ed84 6b00 	vstr	d6, [r4]
 8006084:	e024      	b.n	80060d0 <__ieee754_rem_pio2+0x140>
 8006086:	ee16 3a90 	vmov	r3, s13
 800608a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800608e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006092:	2b10      	cmp	r3, #16
 8006094:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006098:	ddf2      	ble.n	8006080 <__ieee754_rem_pio2+0xf0>
 800609a:	eeb0 6b40 	vmov.f64	d6, d0
 800609e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80061d0 <__ieee754_rem_pio2+0x240>
 80060a2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80060a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80060aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80060ae:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80061d8 <__ieee754_rem_pio2+0x248>
 80060b2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80060b6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80060ba:	ee13 3a90 	vmov	r3, s7
 80060be:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b31      	cmp	r3, #49	; 0x31
 80060c6:	dc17      	bgt.n	80060f8 <__ieee754_rem_pio2+0x168>
 80060c8:	eeb0 0b46 	vmov.f64	d0, d6
 80060cc:	ed84 3b00 	vstr	d3, [r4]
 80060d0:	ed94 6b00 	vldr	d6, [r4]
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80060da:	ee30 0b47 	vsub.f64	d0, d0, d7
 80060de:	ed84 0b02 	vstr	d0, [r4, #8]
 80060e2:	da85      	bge.n	8005ff0 <__ieee754_rem_pio2+0x60>
 80060e4:	eeb1 6b46 	vneg.f64	d6, d6
 80060e8:	eeb1 0b40 	vneg.f64	d0, d0
 80060ec:	ed84 6b00 	vstr	d6, [r4]
 80060f0:	ed84 0b02 	vstr	d0, [r4, #8]
 80060f4:	4240      	negs	r0, r0
 80060f6:	e77b      	b.n	8005ff0 <__ieee754_rem_pio2+0x60>
 80060f8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80061e8 <__ieee754_rem_pio2+0x258>
 80060fc:	eeb0 0b46 	vmov.f64	d0, d6
 8006100:	eea4 0b07 	vfma.f64	d0, d4, d7
 8006104:	ee36 6b40 	vsub.f64	d6, d6, d0
 8006108:	eea4 6b07 	vfma.f64	d6, d4, d7
 800610c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80061f0 <__ieee754_rem_pio2+0x260>
 8006110:	eeb0 7b46 	vmov.f64	d7, d6
 8006114:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006118:	ee30 6b47 	vsub.f64	d6, d0, d7
 800611c:	e7b0      	b.n	8006080 <__ieee754_rem_pio2+0xf0>
 800611e:	4b3c      	ldr	r3, [pc, #240]	; (8006210 <__ieee754_rem_pio2+0x280>)
 8006120:	429e      	cmp	r6, r3
 8006122:	dd06      	ble.n	8006132 <__ieee754_rem_pio2+0x1a2>
 8006124:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006128:	ed80 7b02 	vstr	d7, [r0, #8]
 800612c:	ed80 7b00 	vstr	d7, [r0]
 8006130:	e740      	b.n	8005fb4 <__ieee754_rem_pio2+0x24>
 8006132:	1532      	asrs	r2, r6, #20
 8006134:	ee10 0a10 	vmov	r0, s0
 8006138:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800613c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006140:	ec41 0b17 	vmov	d7, r0, r1
 8006144:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006148:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80061f8 <__ieee754_rem_pio2+0x268>
 800614c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006150:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006154:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006158:	ee27 7b05 	vmul.f64	d7, d7, d5
 800615c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006160:	a808      	add	r0, sp, #32
 8006162:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006166:	ee37 7b46 	vsub.f64	d7, d7, d6
 800616a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800616e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006172:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006176:	2103      	movs	r1, #3
 8006178:	ed30 7b02 	vldmdb	r0!, {d7}
 800617c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006184:	460b      	mov	r3, r1
 8006186:	f101 31ff 	add.w	r1, r1, #4294967295
 800618a:	d0f5      	beq.n	8006178 <__ieee754_rem_pio2+0x1e8>
 800618c:	4921      	ldr	r1, [pc, #132]	; (8006214 <__ieee754_rem_pio2+0x284>)
 800618e:	9101      	str	r1, [sp, #4]
 8006190:	2102      	movs	r1, #2
 8006192:	9100      	str	r1, [sp, #0]
 8006194:	a802      	add	r0, sp, #8
 8006196:	4621      	mov	r1, r4
 8006198:	f000 f84a 	bl	8006230 <__kernel_rem_pio2>
 800619c:	2d00      	cmp	r5, #0
 800619e:	f6bf af27 	bge.w	8005ff0 <__ieee754_rem_pio2+0x60>
 80061a2:	ed94 7b00 	vldr	d7, [r4]
 80061a6:	eeb1 7b47 	vneg.f64	d7, d7
 80061aa:	ed84 7b00 	vstr	d7, [r4]
 80061ae:	ed94 7b02 	vldr	d7, [r4, #8]
 80061b2:	eeb1 7b47 	vneg.f64	d7, d7
 80061b6:	ed84 7b02 	vstr	d7, [r4, #8]
 80061ba:	e79b      	b.n	80060f4 <__ieee754_rem_pio2+0x164>
 80061bc:	f3af 8000 	nop.w
 80061c0:	54400000 	.word	0x54400000
 80061c4:	3ff921fb 	.word	0x3ff921fb
 80061c8:	1a626331 	.word	0x1a626331
 80061cc:	3dd0b461 	.word	0x3dd0b461
 80061d0:	1a600000 	.word	0x1a600000
 80061d4:	3dd0b461 	.word	0x3dd0b461
 80061d8:	2e037073 	.word	0x2e037073
 80061dc:	3ba3198a 	.word	0x3ba3198a
 80061e0:	6dc9c883 	.word	0x6dc9c883
 80061e4:	3fe45f30 	.word	0x3fe45f30
 80061e8:	2e000000 	.word	0x2e000000
 80061ec:	3ba3198a 	.word	0x3ba3198a
 80061f0:	252049c1 	.word	0x252049c1
 80061f4:	397b839a 	.word	0x397b839a
 80061f8:	00000000 	.word	0x00000000
 80061fc:	41700000 	.word	0x41700000
 8006200:	3fe921fb 	.word	0x3fe921fb
 8006204:	4002d97b 	.word	0x4002d97b
 8006208:	413921fb 	.word	0x413921fb
 800620c:	08006978 	.word	0x08006978
 8006210:	7fefffff 	.word	0x7fefffff
 8006214:	080069f8 	.word	0x080069f8

08006218 <fabs>:
 8006218:	ec51 0b10 	vmov	r0, r1, d0
 800621c:	ee10 2a10 	vmov	r2, s0
 8006220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006224:	ec43 2b10 	vmov	d0, r2, r3
 8006228:	4770      	bx	lr
 800622a:	0000      	movs	r0, r0
 800622c:	0000      	movs	r0, r0
	...

08006230 <__kernel_rem_pio2>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	ed2d 8b06 	vpush	{d8-d10}
 8006238:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800623c:	460f      	mov	r7, r1
 800623e:	9002      	str	r0, [sp, #8]
 8006240:	49c3      	ldr	r1, [pc, #780]	; (8006550 <__kernel_rem_pio2+0x320>)
 8006242:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800624a:	9901      	ldr	r1, [sp, #4]
 800624c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800624e:	f112 0f14 	cmn.w	r2, #20
 8006252:	bfa8      	it	ge
 8006254:	1ed0      	subge	r0, r2, #3
 8006256:	f101 3aff 	add.w	sl, r1, #4294967295
 800625a:	bfaa      	itet	ge
 800625c:	2418      	movge	r4, #24
 800625e:	2000      	movlt	r0, #0
 8006260:	fb90 f0f4 	sdivge	r0, r0, r4
 8006264:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8006538 <__kernel_rem_pio2+0x308>
 8006268:	f06f 0417 	mvn.w	r4, #23
 800626c:	fb00 4404 	mla	r4, r0, r4, r4
 8006270:	eba0 060a 	sub.w	r6, r0, sl
 8006274:	4414      	add	r4, r2
 8006276:	eb09 0c0a 	add.w	ip, r9, sl
 800627a:	ad1a      	add	r5, sp, #104	; 0x68
 800627c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8006280:	2200      	movs	r2, #0
 8006282:	4562      	cmp	r2, ip
 8006284:	dd10      	ble.n	80062a8 <__kernel_rem_pio2+0x78>
 8006286:	9a01      	ldr	r2, [sp, #4]
 8006288:	a91a      	add	r1, sp, #104	; 0x68
 800628a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800628e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8006292:	f04f 0c00 	mov.w	ip, #0
 8006296:	45cc      	cmp	ip, r9
 8006298:	dc26      	bgt.n	80062e8 <__kernel_rem_pio2+0xb8>
 800629a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8006538 <__kernel_rem_pio2+0x308>
 800629e:	f8dd e008 	ldr.w	lr, [sp, #8]
 80062a2:	4616      	mov	r6, r2
 80062a4:	2500      	movs	r5, #0
 80062a6:	e015      	b.n	80062d4 <__kernel_rem_pio2+0xa4>
 80062a8:	42d6      	cmn	r6, r2
 80062aa:	d409      	bmi.n	80062c0 <__kernel_rem_pio2+0x90>
 80062ac:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80062b0:	ee07 1a90 	vmov	s15, r1
 80062b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80062b8:	eca5 7b02 	vstmia	r5!, {d7}
 80062bc:	3201      	adds	r2, #1
 80062be:	e7e0      	b.n	8006282 <__kernel_rem_pio2+0x52>
 80062c0:	eeb0 7b46 	vmov.f64	d7, d6
 80062c4:	e7f8      	b.n	80062b8 <__kernel_rem_pio2+0x88>
 80062c6:	ecbe 5b02 	vldmia	lr!, {d5}
 80062ca:	ed96 6b00 	vldr	d6, [r6]
 80062ce:	3501      	adds	r5, #1
 80062d0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80062d4:	4555      	cmp	r5, sl
 80062d6:	f1a6 0608 	sub.w	r6, r6, #8
 80062da:	ddf4      	ble.n	80062c6 <__kernel_rem_pio2+0x96>
 80062dc:	eca8 7b02 	vstmia	r8!, {d7}
 80062e0:	f10c 0c01 	add.w	ip, ip, #1
 80062e4:	3208      	adds	r2, #8
 80062e6:	e7d6      	b.n	8006296 <__kernel_rem_pio2+0x66>
 80062e8:	aa06      	add	r2, sp, #24
 80062ea:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8006540 <__kernel_rem_pio2+0x310>
 80062ee:	ed9f ab96 	vldr	d10, [pc, #600]	; 8006548 <__kernel_rem_pio2+0x318>
 80062f2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80062f6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80062fa:	9204      	str	r2, [sp, #16]
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	464d      	mov	r5, r9
 8006300:	00eb      	lsls	r3, r5, #3
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	ab92      	add	r3, sp, #584	; 0x248
 8006306:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800630a:	f10d 0b18 	add.w	fp, sp, #24
 800630e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006310:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006314:	465e      	mov	r6, fp
 8006316:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800631a:	4628      	mov	r0, r5
 800631c:	2800      	cmp	r0, #0
 800631e:	f1a2 0208 	sub.w	r2, r2, #8
 8006322:	dc48      	bgt.n	80063b6 <__kernel_rem_pio2+0x186>
 8006324:	4620      	mov	r0, r4
 8006326:	f000 fa17 	bl	8006758 <scalbn>
 800632a:	eeb0 8b40 	vmov.f64	d8, d0
 800632e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006332:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006336:	f000 fa8f 	bl	8006858 <floor>
 800633a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800633e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006342:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006346:	2c00      	cmp	r4, #0
 8006348:	ee17 8a90 	vmov	r8, s15
 800634c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006350:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006354:	dd41      	ble.n	80063da <__kernel_rem_pio2+0x1aa>
 8006356:	1e68      	subs	r0, r5, #1
 8006358:	ab06      	add	r3, sp, #24
 800635a:	f1c4 0c18 	rsb	ip, r4, #24
 800635e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006362:	fa46 f20c 	asr.w	r2, r6, ip
 8006366:	4490      	add	r8, r2
 8006368:	fa02 f20c 	lsl.w	r2, r2, ip
 800636c:	1ab6      	subs	r6, r6, r2
 800636e:	f1c4 0217 	rsb	r2, r4, #23
 8006372:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006376:	4116      	asrs	r6, r2
 8006378:	2e00      	cmp	r6, #0
 800637a:	dd3d      	ble.n	80063f8 <__kernel_rem_pio2+0x1c8>
 800637c:	f04f 0c00 	mov.w	ip, #0
 8006380:	f108 0801 	add.w	r8, r8, #1
 8006384:	4660      	mov	r0, ip
 8006386:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800638a:	4565      	cmp	r5, ip
 800638c:	dc6a      	bgt.n	8006464 <__kernel_rem_pio2+0x234>
 800638e:	2c00      	cmp	r4, #0
 8006390:	dd04      	ble.n	800639c <__kernel_rem_pio2+0x16c>
 8006392:	2c01      	cmp	r4, #1
 8006394:	d07b      	beq.n	800648e <__kernel_rem_pio2+0x25e>
 8006396:	2c02      	cmp	r4, #2
 8006398:	f000 8083 	beq.w	80064a2 <__kernel_rem_pio2+0x272>
 800639c:	2e02      	cmp	r6, #2
 800639e:	d12b      	bne.n	80063f8 <__kernel_rem_pio2+0x1c8>
 80063a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80063a4:	ee30 8b48 	vsub.f64	d8, d0, d8
 80063a8:	b330      	cbz	r0, 80063f8 <__kernel_rem_pio2+0x1c8>
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f9d4 	bl	8006758 <scalbn>
 80063b0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80063b4:	e020      	b.n	80063f8 <__kernel_rem_pio2+0x1c8>
 80063b6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80063ba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80063be:	3801      	subs	r0, #1
 80063c0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80063c4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80063c8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80063cc:	eca6 0a01 	vstmia	r6!, {s0}
 80063d0:	ed92 0b00 	vldr	d0, [r2]
 80063d4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80063d8:	e7a0      	b.n	800631c <__kernel_rem_pio2+0xec>
 80063da:	d105      	bne.n	80063e8 <__kernel_rem_pio2+0x1b8>
 80063dc:	1e6a      	subs	r2, r5, #1
 80063de:	ab06      	add	r3, sp, #24
 80063e0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80063e4:	15f6      	asrs	r6, r6, #23
 80063e6:	e7c7      	b.n	8006378 <__kernel_rem_pio2+0x148>
 80063e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80063ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80063f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f4:	da34      	bge.n	8006460 <__kernel_rem_pio2+0x230>
 80063f6:	2600      	movs	r6, #0
 80063f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	f040 80aa 	bne.w	8006558 <__kernel_rem_pio2+0x328>
 8006404:	f105 3bff 	add.w	fp, r5, #4294967295
 8006408:	4658      	mov	r0, fp
 800640a:	2200      	movs	r2, #0
 800640c:	4548      	cmp	r0, r9
 800640e:	da50      	bge.n	80064b2 <__kernel_rem_pio2+0x282>
 8006410:	2a00      	cmp	r2, #0
 8006412:	d06b      	beq.n	80064ec <__kernel_rem_pio2+0x2bc>
 8006414:	ab06      	add	r3, sp, #24
 8006416:	3c18      	subs	r4, #24
 8006418:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8087 	beq.w	8006530 <__kernel_rem_pio2+0x300>
 8006422:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006426:	4620      	mov	r0, r4
 8006428:	f000 f996 	bl	8006758 <scalbn>
 800642c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8006540 <__kernel_rem_pio2+0x310>
 8006430:	f10b 0201 	add.w	r2, fp, #1
 8006434:	a96a      	add	r1, sp, #424	; 0x1a8
 8006436:	00d3      	lsls	r3, r2, #3
 8006438:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800643c:	465a      	mov	r2, fp
 800643e:	2a00      	cmp	r2, #0
 8006440:	f280 80b8 	bge.w	80065b4 <__kernel_rem_pio2+0x384>
 8006444:	465a      	mov	r2, fp
 8006446:	2a00      	cmp	r2, #0
 8006448:	f2c0 80d6 	blt.w	80065f8 <__kernel_rem_pio2+0x3c8>
 800644c:	a96a      	add	r1, sp, #424	; 0x1a8
 800644e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8006452:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8006538 <__kernel_rem_pio2+0x308>
 8006456:	4d3f      	ldr	r5, [pc, #252]	; (8006554 <__kernel_rem_pio2+0x324>)
 8006458:	2000      	movs	r0, #0
 800645a:	ebab 0102 	sub.w	r1, fp, r2
 800645e:	e0c0      	b.n	80065e2 <__kernel_rem_pio2+0x3b2>
 8006460:	2602      	movs	r6, #2
 8006462:	e78b      	b.n	800637c <__kernel_rem_pio2+0x14c>
 8006464:	f8db 2000 	ldr.w	r2, [fp]
 8006468:	b958      	cbnz	r0, 8006482 <__kernel_rem_pio2+0x252>
 800646a:	b122      	cbz	r2, 8006476 <__kernel_rem_pio2+0x246>
 800646c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006470:	f8cb 2000 	str.w	r2, [fp]
 8006474:	2201      	movs	r2, #1
 8006476:	f10c 0c01 	add.w	ip, ip, #1
 800647a:	f10b 0b04 	add.w	fp, fp, #4
 800647e:	4610      	mov	r0, r2
 8006480:	e783      	b.n	800638a <__kernel_rem_pio2+0x15a>
 8006482:	ebae 0202 	sub.w	r2, lr, r2
 8006486:	f8cb 2000 	str.w	r2, [fp]
 800648a:	4602      	mov	r2, r0
 800648c:	e7f3      	b.n	8006476 <__kernel_rem_pio2+0x246>
 800648e:	f105 3cff 	add.w	ip, r5, #4294967295
 8006492:	ab06      	add	r3, sp, #24
 8006494:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006498:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800649c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80064a0:	e77c      	b.n	800639c <__kernel_rem_pio2+0x16c>
 80064a2:	f105 3cff 	add.w	ip, r5, #4294967295
 80064a6:	ab06      	add	r3, sp, #24
 80064a8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80064ac:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80064b0:	e7f4      	b.n	800649c <__kernel_rem_pio2+0x26c>
 80064b2:	ab06      	add	r3, sp, #24
 80064b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80064b8:	3801      	subs	r0, #1
 80064ba:	431a      	orrs	r2, r3
 80064bc:	e7a6      	b.n	800640c <__kernel_rem_pio2+0x1dc>
 80064be:	3201      	adds	r2, #1
 80064c0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	d0fa      	beq.n	80064be <__kernel_rem_pio2+0x28e>
 80064c8:	9b05      	ldr	r3, [sp, #20]
 80064ca:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80064ce:	eb0d 0003 	add.w	r0, sp, r3
 80064d2:	9b01      	ldr	r3, [sp, #4]
 80064d4:	18ee      	adds	r6, r5, r3
 80064d6:	ab1a      	add	r3, sp, #104	; 0x68
 80064d8:	f105 0c01 	add.w	ip, r5, #1
 80064dc:	3898      	subs	r0, #152	; 0x98
 80064de:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80064e2:	442a      	add	r2, r5
 80064e4:	4562      	cmp	r2, ip
 80064e6:	da04      	bge.n	80064f2 <__kernel_rem_pio2+0x2c2>
 80064e8:	4615      	mov	r5, r2
 80064ea:	e709      	b.n	8006300 <__kernel_rem_pio2+0xd0>
 80064ec:	9804      	ldr	r0, [sp, #16]
 80064ee:	2201      	movs	r2, #1
 80064f0:	e7e6      	b.n	80064c0 <__kernel_rem_pio2+0x290>
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80064f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80064fc:	9305      	str	r3, [sp, #20]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006506:	2500      	movs	r5, #0
 8006508:	eca6 7b02 	vstmia	r6!, {d7}
 800650c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8006538 <__kernel_rem_pio2+0x308>
 8006510:	46b0      	mov	r8, r6
 8006512:	4555      	cmp	r5, sl
 8006514:	dd04      	ble.n	8006520 <__kernel_rem_pio2+0x2f0>
 8006516:	eca0 7b02 	vstmia	r0!, {d7}
 800651a:	f10c 0c01 	add.w	ip, ip, #1
 800651e:	e7e1      	b.n	80064e4 <__kernel_rem_pio2+0x2b4>
 8006520:	ecbe 5b02 	vldmia	lr!, {d5}
 8006524:	ed38 6b02 	vldmdb	r8!, {d6}
 8006528:	3501      	adds	r5, #1
 800652a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800652e:	e7f0      	b.n	8006512 <__kernel_rem_pio2+0x2e2>
 8006530:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006534:	e76e      	b.n	8006414 <__kernel_rem_pio2+0x1e4>
 8006536:	bf00      	nop
	...
 8006544:	3e700000 	.word	0x3e700000
 8006548:	00000000 	.word	0x00000000
 800654c:	41700000 	.word	0x41700000
 8006550:	08006b40 	.word	0x08006b40
 8006554:	08006b00 	.word	0x08006b00
 8006558:	4260      	negs	r0, r4
 800655a:	eeb0 0b48 	vmov.f64	d0, d8
 800655e:	f000 f8fb 	bl	8006758 <scalbn>
 8006562:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006740 <__kernel_rem_pio2+0x510>
 8006566:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	db18      	blt.n	80065a2 <__kernel_rem_pio2+0x372>
 8006570:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006748 <__kernel_rem_pio2+0x518>
 8006574:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006578:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800657c:	aa06      	add	r2, sp, #24
 800657e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006582:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006586:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800658a:	f105 0b01 	add.w	fp, r5, #1
 800658e:	ee10 3a10 	vmov	r3, s0
 8006592:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006596:	ee17 3a10 	vmov	r3, s14
 800659a:	3418      	adds	r4, #24
 800659c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80065a0:	e73f      	b.n	8006422 <__kernel_rem_pio2+0x1f2>
 80065a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80065a6:	aa06      	add	r2, sp, #24
 80065a8:	ee10 3a10 	vmov	r3, s0
 80065ac:	46ab      	mov	fp, r5
 80065ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80065b2:	e736      	b.n	8006422 <__kernel_rem_pio2+0x1f2>
 80065b4:	a806      	add	r0, sp, #24
 80065b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80065ba:	9001      	str	r0, [sp, #4]
 80065bc:	ee07 0a90 	vmov	s15, r0
 80065c0:	3a01      	subs	r2, #1
 80065c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80065ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80065ce:	ed21 7b02 	vstmdb	r1!, {d7}
 80065d2:	e734      	b.n	800643e <__kernel_rem_pio2+0x20e>
 80065d4:	ecb5 5b02 	vldmia	r5!, {d5}
 80065d8:	ecb4 6b02 	vldmia	r4!, {d6}
 80065dc:	3001      	adds	r0, #1
 80065de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80065e2:	4548      	cmp	r0, r9
 80065e4:	dc01      	bgt.n	80065ea <__kernel_rem_pio2+0x3ba>
 80065e6:	4288      	cmp	r0, r1
 80065e8:	ddf4      	ble.n	80065d4 <__kernel_rem_pio2+0x3a4>
 80065ea:	a842      	add	r0, sp, #264	; 0x108
 80065ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80065f0:	ed81 7b00 	vstr	d7, [r1]
 80065f4:	3a01      	subs	r2, #1
 80065f6:	e726      	b.n	8006446 <__kernel_rem_pio2+0x216>
 80065f8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80065fa:	2a02      	cmp	r2, #2
 80065fc:	dc0a      	bgt.n	8006614 <__kernel_rem_pio2+0x3e4>
 80065fe:	2a00      	cmp	r2, #0
 8006600:	dc2e      	bgt.n	8006660 <__kernel_rem_pio2+0x430>
 8006602:	d047      	beq.n	8006694 <__kernel_rem_pio2+0x464>
 8006604:	f008 0007 	and.w	r0, r8, #7
 8006608:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800660c:	ecbd 8b06 	vpop	{d8-d10}
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006616:	2a03      	cmp	r2, #3
 8006618:	d1f4      	bne.n	8006604 <__kernel_rem_pio2+0x3d4>
 800661a:	a942      	add	r1, sp, #264	; 0x108
 800661c:	f1a3 0208 	sub.w	r2, r3, #8
 8006620:	440a      	add	r2, r1
 8006622:	4611      	mov	r1, r2
 8006624:	4658      	mov	r0, fp
 8006626:	2800      	cmp	r0, #0
 8006628:	f1a1 0108 	sub.w	r1, r1, #8
 800662c:	dc55      	bgt.n	80066da <__kernel_rem_pio2+0x4aa>
 800662e:	4659      	mov	r1, fp
 8006630:	2901      	cmp	r1, #1
 8006632:	f1a2 0208 	sub.w	r2, r2, #8
 8006636:	dc60      	bgt.n	80066fa <__kernel_rem_pio2+0x4ca>
 8006638:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8006750 <__kernel_rem_pio2+0x520>
 800663c:	aa42      	add	r2, sp, #264	; 0x108
 800663e:	4413      	add	r3, r2
 8006640:	f1bb 0f01 	cmp.w	fp, #1
 8006644:	dc69      	bgt.n	800671a <__kernel_rem_pio2+0x4ea>
 8006646:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800664a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800664e:	2e00      	cmp	r6, #0
 8006650:	d16a      	bne.n	8006728 <__kernel_rem_pio2+0x4f8>
 8006652:	ed87 5b00 	vstr	d5, [r7]
 8006656:	ed87 6b02 	vstr	d6, [r7, #8]
 800665a:	ed87 7b04 	vstr	d7, [r7, #16]
 800665e:	e7d1      	b.n	8006604 <__kernel_rem_pio2+0x3d4>
 8006660:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8006750 <__kernel_rem_pio2+0x520>
 8006664:	aa42      	add	r2, sp, #264	; 0x108
 8006666:	4413      	add	r3, r2
 8006668:	465a      	mov	r2, fp
 800666a:	2a00      	cmp	r2, #0
 800666c:	da26      	bge.n	80066bc <__kernel_rem_pio2+0x48c>
 800666e:	b35e      	cbz	r6, 80066c8 <__kernel_rem_pio2+0x498>
 8006670:	eeb1 7b46 	vneg.f64	d7, d6
 8006674:	ed87 7b00 	vstr	d7, [r7]
 8006678:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800667c:	aa44      	add	r2, sp, #272	; 0x110
 800667e:	2301      	movs	r3, #1
 8006680:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006684:	459b      	cmp	fp, r3
 8006686:	da22      	bge.n	80066ce <__kernel_rem_pio2+0x49e>
 8006688:	b10e      	cbz	r6, 800668e <__kernel_rem_pio2+0x45e>
 800668a:	eeb1 7b47 	vneg.f64	d7, d7
 800668e:	ed87 7b02 	vstr	d7, [r7, #8]
 8006692:	e7b7      	b.n	8006604 <__kernel_rem_pio2+0x3d4>
 8006694:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006750 <__kernel_rem_pio2+0x520>
 8006698:	aa42      	add	r2, sp, #264	; 0x108
 800669a:	4413      	add	r3, r2
 800669c:	f1bb 0f00 	cmp.w	fp, #0
 80066a0:	da05      	bge.n	80066ae <__kernel_rem_pio2+0x47e>
 80066a2:	b10e      	cbz	r6, 80066a8 <__kernel_rem_pio2+0x478>
 80066a4:	eeb1 7b47 	vneg.f64	d7, d7
 80066a8:	ed87 7b00 	vstr	d7, [r7]
 80066ac:	e7aa      	b.n	8006604 <__kernel_rem_pio2+0x3d4>
 80066ae:	ed33 6b02 	vldmdb	r3!, {d6}
 80066b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066ba:	e7ef      	b.n	800669c <__kernel_rem_pio2+0x46c>
 80066bc:	ed33 7b02 	vldmdb	r3!, {d7}
 80066c0:	3a01      	subs	r2, #1
 80066c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80066c6:	e7d0      	b.n	800666a <__kernel_rem_pio2+0x43a>
 80066c8:	eeb0 7b46 	vmov.f64	d7, d6
 80066cc:	e7d2      	b.n	8006674 <__kernel_rem_pio2+0x444>
 80066ce:	ecb2 6b02 	vldmia	r2!, {d6}
 80066d2:	3301      	adds	r3, #1
 80066d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066d8:	e7d4      	b.n	8006684 <__kernel_rem_pio2+0x454>
 80066da:	ed91 7b00 	vldr	d7, [r1]
 80066de:	ed91 5b02 	vldr	d5, [r1, #8]
 80066e2:	3801      	subs	r0, #1
 80066e4:	ee37 6b05 	vadd.f64	d6, d7, d5
 80066e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066ec:	ed81 6b00 	vstr	d6, [r1]
 80066f0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80066f4:	ed81 7b02 	vstr	d7, [r1, #8]
 80066f8:	e795      	b.n	8006626 <__kernel_rem_pio2+0x3f6>
 80066fa:	ed92 7b00 	vldr	d7, [r2]
 80066fe:	ed92 5b02 	vldr	d5, [r2, #8]
 8006702:	3901      	subs	r1, #1
 8006704:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006708:	ee37 7b46 	vsub.f64	d7, d7, d6
 800670c:	ed82 6b00 	vstr	d6, [r2]
 8006710:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006714:	ed82 7b02 	vstr	d7, [r2, #8]
 8006718:	e78a      	b.n	8006630 <__kernel_rem_pio2+0x400>
 800671a:	ed33 6b02 	vldmdb	r3!, {d6}
 800671e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006726:	e78b      	b.n	8006640 <__kernel_rem_pio2+0x410>
 8006728:	eeb1 5b45 	vneg.f64	d5, d5
 800672c:	eeb1 6b46 	vneg.f64	d6, d6
 8006730:	ed87 5b00 	vstr	d5, [r7]
 8006734:	eeb1 7b47 	vneg.f64	d7, d7
 8006738:	ed87 6b02 	vstr	d6, [r7, #8]
 800673c:	e78d      	b.n	800665a <__kernel_rem_pio2+0x42a>
 800673e:	bf00      	nop
 8006740:	00000000 	.word	0x00000000
 8006744:	41700000 	.word	0x41700000
 8006748:	00000000 	.word	0x00000000
 800674c:	3e700000 	.word	0x3e700000
	...

08006758 <scalbn>:
 8006758:	ee10 1a90 	vmov	r1, s1
 800675c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006760:	b98b      	cbnz	r3, 8006786 <scalbn+0x2e>
 8006762:	ee10 3a10 	vmov	r3, s0
 8006766:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800676a:	4319      	orrs	r1, r3
 800676c:	d00a      	beq.n	8006784 <scalbn+0x2c>
 800676e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8006820 <scalbn+0xc8>
 8006772:	4b37      	ldr	r3, [pc, #220]	; (8006850 <scalbn+0xf8>)
 8006774:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006778:	4298      	cmp	r0, r3
 800677a:	da0b      	bge.n	8006794 <scalbn+0x3c>
 800677c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8006828 <scalbn+0xd0>
 8006780:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006784:	4770      	bx	lr
 8006786:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800678a:	4293      	cmp	r3, r2
 800678c:	d107      	bne.n	800679e <scalbn+0x46>
 800678e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006792:	4770      	bx	lr
 8006794:	ee10 1a90 	vmov	r1, s1
 8006798:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800679c:	3b36      	subs	r3, #54	; 0x36
 800679e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80067a2:	4290      	cmp	r0, r2
 80067a4:	dd0d      	ble.n	80067c2 <scalbn+0x6a>
 80067a6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8006830 <scalbn+0xd8>
 80067aa:	ee10 3a90 	vmov	r3, s1
 80067ae:	eeb0 6b47 	vmov.f64	d6, d7
 80067b2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8006838 <scalbn+0xe0>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80067bc:	ee27 0b06 	vmul.f64	d0, d7, d6
 80067c0:	4770      	bx	lr
 80067c2:	4418      	add	r0, r3
 80067c4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80067c8:	4298      	cmp	r0, r3
 80067ca:	dcec      	bgt.n	80067a6 <scalbn+0x4e>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dd0a      	ble.n	80067e6 <scalbn+0x8e>
 80067d0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80067d4:	ec53 2b10 	vmov	r2, r3, d0
 80067d8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80067dc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80067e0:	ec43 2b10 	vmov	d0, r2, r3
 80067e4:	4770      	bx	lr
 80067e6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80067ea:	da09      	bge.n	8006800 <scalbn+0xa8>
 80067ec:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006828 <scalbn+0xd0>
 80067f0:	ee10 3a90 	vmov	r3, s1
 80067f4:	eeb0 6b47 	vmov.f64	d6, d7
 80067f8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8006840 <scalbn+0xe8>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	e7db      	b.n	80067b8 <scalbn+0x60>
 8006800:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006804:	ec53 2b10 	vmov	r2, r3, d0
 8006808:	3036      	adds	r0, #54	; 0x36
 800680a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800680e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8006812:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8006848 <scalbn+0xf0>
 8006816:	ec43 2b10 	vmov	d0, r2, r3
 800681a:	e7b1      	b.n	8006780 <scalbn+0x28>
 800681c:	f3af 8000 	nop.w
 8006820:	00000000 	.word	0x00000000
 8006824:	43500000 	.word	0x43500000
 8006828:	c2f8f359 	.word	0xc2f8f359
 800682c:	01a56e1f 	.word	0x01a56e1f
 8006830:	8800759c 	.word	0x8800759c
 8006834:	7e37e43c 	.word	0x7e37e43c
 8006838:	8800759c 	.word	0x8800759c
 800683c:	fe37e43c 	.word	0xfe37e43c
 8006840:	c2f8f359 	.word	0xc2f8f359
 8006844:	81a56e1f 	.word	0x81a56e1f
 8006848:	00000000 	.word	0x00000000
 800684c:	3c900000 	.word	0x3c900000
 8006850:	ffff3cb0 	.word	0xffff3cb0
 8006854:	00000000 	.word	0x00000000

08006858 <floor>:
 8006858:	ee10 1a90 	vmov	r1, s1
 800685c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006860:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006864:	2b13      	cmp	r3, #19
 8006866:	b530      	push	{r4, r5, lr}
 8006868:	ee10 0a10 	vmov	r0, s0
 800686c:	ee10 5a10 	vmov	r5, s0
 8006870:	dc31      	bgt.n	80068d6 <floor+0x7e>
 8006872:	2b00      	cmp	r3, #0
 8006874:	da15      	bge.n	80068a2 <floor+0x4a>
 8006876:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006938 <floor+0xe0>
 800687a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800687e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006886:	dd07      	ble.n	8006898 <floor+0x40>
 8006888:	2900      	cmp	r1, #0
 800688a:	da4e      	bge.n	800692a <floor+0xd2>
 800688c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006890:	4308      	orrs	r0, r1
 8006892:	d04d      	beq.n	8006930 <floor+0xd8>
 8006894:	492a      	ldr	r1, [pc, #168]	; (8006940 <floor+0xe8>)
 8006896:	2000      	movs	r0, #0
 8006898:	460b      	mov	r3, r1
 800689a:	4602      	mov	r2, r0
 800689c:	ec43 2b10 	vmov	d0, r2, r3
 80068a0:	e020      	b.n	80068e4 <floor+0x8c>
 80068a2:	4a28      	ldr	r2, [pc, #160]	; (8006944 <floor+0xec>)
 80068a4:	411a      	asrs	r2, r3
 80068a6:	ea01 0402 	and.w	r4, r1, r2
 80068aa:	4304      	orrs	r4, r0
 80068ac:	d01a      	beq.n	80068e4 <floor+0x8c>
 80068ae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8006938 <floor+0xe0>
 80068b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	ddeb      	ble.n	8006898 <floor+0x40>
 80068c0:	2900      	cmp	r1, #0
 80068c2:	bfbe      	ittt	lt
 80068c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80068c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80068cc:	18c9      	addlt	r1, r1, r3
 80068ce:	ea21 0102 	bic.w	r1, r1, r2
 80068d2:	2000      	movs	r0, #0
 80068d4:	e7e0      	b.n	8006898 <floor+0x40>
 80068d6:	2b33      	cmp	r3, #51	; 0x33
 80068d8:	dd05      	ble.n	80068e6 <floor+0x8e>
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	d101      	bne.n	80068e4 <floor+0x8c>
 80068e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80068e4:	bd30      	pop	{r4, r5, pc}
 80068e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	40e2      	lsrs	r2, r4
 80068f0:	4210      	tst	r0, r2
 80068f2:	d0f7      	beq.n	80068e4 <floor+0x8c>
 80068f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006938 <floor+0xe0>
 80068f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006904:	ddc8      	ble.n	8006898 <floor+0x40>
 8006906:	2900      	cmp	r1, #0
 8006908:	da02      	bge.n	8006910 <floor+0xb8>
 800690a:	2b14      	cmp	r3, #20
 800690c:	d103      	bne.n	8006916 <floor+0xbe>
 800690e:	3101      	adds	r1, #1
 8006910:	ea20 0002 	bic.w	r0, r0, r2
 8006914:	e7c0      	b.n	8006898 <floor+0x40>
 8006916:	2401      	movs	r4, #1
 8006918:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800691c:	fa04 f303 	lsl.w	r3, r4, r3
 8006920:	4418      	add	r0, r3
 8006922:	4285      	cmp	r5, r0
 8006924:	bf88      	it	hi
 8006926:	1909      	addhi	r1, r1, r4
 8006928:	e7f2      	b.n	8006910 <floor+0xb8>
 800692a:	2000      	movs	r0, #0
 800692c:	4601      	mov	r1, r0
 800692e:	e7b3      	b.n	8006898 <floor+0x40>
 8006930:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006934:	e7b0      	b.n	8006898 <floor+0x40>
 8006936:	bf00      	nop
 8006938:	8800759c 	.word	0x8800759c
 800693c:	7e37e43c 	.word	0x7e37e43c
 8006940:	bff00000 	.word	0xbff00000
 8006944:	000fffff 	.word	0x000fffff

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
